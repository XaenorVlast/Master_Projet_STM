
Master_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a38  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e0c  08013b78  08013b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015984  08015984  00016984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801598c  0801598c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015990  08015990  00016990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  20000008  08015994  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000016c  08015af8  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a4  08015b2d  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c04  200001b8  08015b3e  000171b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dbc  08015b3e  00017dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00018000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08015b3e  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   000533ed  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000089d2  00000000  00000000  0006ae84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004878  00000000  00000000  00073858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000037b7  00000000  00000000  000780d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032d02  00000000  00000000  0007b887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047e84  00000000  00000000  000ae589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e7f3  00000000  00000000  000f640d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00214c00  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013fd8  00000000  00000000  00214c44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000062  00000000  00000000  00228c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b8 	.word	0x200001b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08013b60 	.word	0x08013b60

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001bc 	.word	0x200001bc
 800017c:	08013b60 	.word	0x08013b60

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c74:	e000      	b.n	8000c78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_write>:
int invalidMovements = 0;
uint32_t zeroForceValue;
uint32_t attention=0;
extern ADC_HandleTypeDef hadc1;

int _write(int file, char *ptr, int len) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc9 	bl	8000c4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
	}
	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	Init_Sensors();
 8000cd8:	f000 f952 	bl	8000f80 <Init_Sensors>
	CalibrateSensors();
 8000cdc:	f000 f99e 	bl	800101c <CalibrateSensors>
	// Initialisation des structures BenchRep
	referenceMovement.maxAmplitudeZ = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	referenceMovement.minAmplitudeZ = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	referenceMovement.duration = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

	currentMovement.maxAmplitudeZ = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	currentMovement.minAmplitudeZ = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
	currentMovement.duration = 0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000214 	.word	0x20000214

08000d10 <MX_MEMS_Process>:


void MX_MEMS_Process() {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af06      	add	r7, sp, #24
    switch (etat) {
 8000d16:	4b85      	ldr	r3, [pc, #532]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	f200 8102 	bhi.w	8000f24 <MX_MEMS_Process+0x214>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <MX_MEMS_Process+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d65 	.word	0x08000d65
 8000d30:	08000d83 	.word	0x08000d83
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000e2d 	.word	0x08000e2d
 8000d3c:	08000eff 	.word	0x08000eff
        case INITIALISATION:
            // Initialisation des variables
            validMovements = 0;
 8000d40:	4b7b      	ldr	r3, [pc, #492]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
            invalidMovements = 0;
 8000d46:	4b7b      	ldr	r3, [pc, #492]	@ (8000f34 <MX_MEMS_Process+0x224>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
            MX_MEMS_Init();
 8000d4c:	f7ff ffc2 	bl	8000cd4 <MX_MEMS_Init>
            isExerciseStarted = false;
 8000d50:	4b79      	ldr	r3, [pc, #484]	@ (8000f38 <MX_MEMS_Process+0x228>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            exerciseEnded = false;
 8000d56:	4b79      	ldr	r3, [pc, #484]	@ (8000f3c <MX_MEMS_Process+0x22c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
            etat = ATTENTE_DEMARRAGE;
 8000d5c:	4b73      	ldr	r3, [pc, #460]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
            break;
 8000d62:	e0df      	b.n	8000f24 <MX_MEMS_Process+0x214>

        case ATTENTE_DEMARRAGE:
            // Attente du signal pour démarrer un nouvel exercice
            if (!isExerciseStarted) {
 8000d64:	4b74      	ldr	r3, [pc, #464]	@ (8000f38 <MX_MEMS_Process+0x228>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80d3 	beq.w	8000f1a <MX_MEMS_Process+0x20a>
                printf("Nouvel exercice détecté, préparation à l'enregistrement...\n");
 8000d74:	4872      	ldr	r0, [pc, #456]	@ (8000f40 <MX_MEMS_Process+0x230>)
 8000d76:	f011 ffab 	bl	8012cd0 <puts>
                etat = ENREGISTREMENT_REFERENCE;
 8000d7a:	4b6c      	ldr	r3, [pc, #432]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000d80:	e0cb      	b.n	8000f1a <MX_MEMS_Process+0x20a>

        case ENREGISTREMENT_REFERENCE:
            // Enregistrement du mouvement de référence
            printf("Enregistrement du mouvement...\n");
 8000d82:	4870      	ldr	r0, [pc, #448]	@ (8000f44 <MX_MEMS_Process+0x234>)
 8000d84:	f011 ffa4 	bl	8012cd0 <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000d88:	486f      	ldr	r0, [pc, #444]	@ (8000f48 <MX_MEMS_Process+0x238>)
 8000d8a:	f000 f9df 	bl	800114c <recordBenchRep>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <MX_MEMS_Process+0x9c>
                printf("Aucun mouvement de référence détecté, fin de la tentative.\n");
 8000d9a:	486c      	ldr	r0, [pc, #432]	@ (8000f4c <MX_MEMS_Process+0x23c>)
 8000d9c:	f011 ff98 	bl	8012cd0 <puts>
                MVT_REF_vide();
 8000da0:	f00f ff0e 	bl	8010bc0 <MVT_REF_vide>
                etat = INITIALISATION;
 8000da4:	4b61      	ldr	r3, [pc, #388]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Mouvement de référence enregistré. En attente de validation...\n");
                MVT_REF_fin();
                etat = VALIDATION_REFERENCE;
            }
            break;
 8000daa:	e0bb      	b.n	8000f24 <MX_MEMS_Process+0x214>
                printf("Mouvement de référence enregistré. En attente de validation...\n");
 8000dac:	4868      	ldr	r0, [pc, #416]	@ (8000f50 <MX_MEMS_Process+0x240>)
 8000dae:	f011 ff8f 	bl	8012cd0 <puts>
                MVT_REF_fin();
 8000db2:	f00f feff 	bl	8010bb4 <MVT_REF_fin>
                etat = VALIDATION_REFERENCE;
 8000db6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]
            break;
 8000dbc:	e0b2      	b.n	8000f24 <MX_MEMS_Process+0x214>

        case VALIDATION_REFERENCE:
            // Validation du mouvement de référence
            printf("Enregistrement du mouvement pour validation...\n");
 8000dbe:	4865      	ldr	r0, [pc, #404]	@ (8000f54 <MX_MEMS_Process+0x244>)
 8000dc0:	f011 ff86 	bl	8012cd0 <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000dc4:	4864      	ldr	r0, [pc, #400]	@ (8000f58 <MX_MEMS_Process+0x248>)
 8000dc6:	f000 f9c1 	bl	800114c <recordBenchRep>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <MX_MEMS_Process+0xd8>
                printf("Aucun mouvement détecté pour validation, veuillez réessayer.\n");
 8000dd6:	4861      	ldr	r0, [pc, #388]	@ (8000f5c <MX_MEMS_Process+0x24c>)
 8000dd8:	f011 ff7a 	bl	8012cd0 <puts>
                MVT_REF_validation_vide();
 8000ddc:	f00f ff02 	bl	8010be4 <MVT_REF_validation_vide>
                etat = ENREGISTREMENT_REFERENCE;
 8000de0:	4b52      	ldr	r3, [pc, #328]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
                MVT_REF_validation_fail();
                etat = ENREGISTREMENT_REFERENCE;
            }
            break;
 8000de6:	e09d      	b.n	8000f24 <MX_MEMS_Process+0x214>
            } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000de8:	4d57      	ldr	r5, [pc, #348]	@ (8000f48 <MX_MEMS_Process+0x238>)
 8000dea:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000dee:	9304      	str	r3, [sp, #16]
 8000df0:	4b59      	ldr	r3, [pc, #356]	@ (8000f58 <MX_MEMS_Process+0x248>)
 8000df2:	466c      	mov	r4, sp
 8000df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dfe:	f000 faab 	bl	8001358 <compareBenchReps>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <MX_MEMS_Process+0x10a>
                printf("Validation réussie. Commencement des répétitions.\n");
 8000e08:	4855      	ldr	r0, [pc, #340]	@ (8000f60 <MX_MEMS_Process+0x250>)
 8000e0a:	f011 ff61 	bl	8012cd0 <puts>
                MVT_REF_validation_succes();
 8000e0e:	f00f fedd 	bl	8010bcc <MVT_REF_validation_succes>
                etat = ENREGISTREMENT_REPETITIONS;
 8000e12:	4b46      	ldr	r3, [pc, #280]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	701a      	strb	r2, [r3, #0]
            break;
 8000e18:	e084      	b.n	8000f24 <MX_MEMS_Process+0x214>
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
 8000e1a:	4852      	ldr	r0, [pc, #328]	@ (8000f64 <MX_MEMS_Process+0x254>)
 8000e1c:	f011 ff58 	bl	8012cd0 <puts>
                MVT_REF_validation_fail();
 8000e20:	f00f feda 	bl	8010bd8 <MVT_REF_validation_fail>
                etat = ENREGISTREMENT_REFERENCE;
 8000e24:	4b41      	ldr	r3, [pc, #260]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
            break;
 8000e2a:	e07b      	b.n	8000f24 <MX_MEMS_Process+0x214>

        case ENREGISTREMENT_REPETITIONS:
            // Enregistrement des répétitions jusqu'à la fin de la série
            if (!exerciseEnded) {
 8000e2c:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <MX_MEMS_Process+0x22c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d071      	beq.n	8000f1e <MX_MEMS_Process+0x20e>
                printf("Enregistrement d'une nouvelle répétition...\n");
 8000e3a:	484b      	ldr	r0, [pc, #300]	@ (8000f68 <MX_MEMS_Process+0x258>)
 8000e3c:	f011 ff48 	bl	8012cd0 <puts>
                if (!recordBenchRep(&currentMovement)) {
 8000e40:	4845      	ldr	r0, [pc, #276]	@ (8000f58 <MX_MEMS_Process+0x248>)
 8000e42:	f000 f983 	bl	800114c <recordBenchRep>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f083 0301 	eor.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <MX_MEMS_Process+0x15a>
                    printf("Fin de la série détectée après une période d'inactivité.\n");
 8000e52:	4846      	ldr	r0, [pc, #280]	@ (8000f6c <MX_MEMS_Process+0x25c>)
 8000e54:	f011 ff3c 	bl	8012cd0 <puts>
                    MVT_vide();
 8000e58:	f00f feca 	bl	8010bf0 <MVT_vide>
                    exerciseEnded = true;
 8000e5c:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <MX_MEMS_Process+0x22c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
                    etat = ATTENTE_SERIE;
 8000e62:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	701a      	strb	r2, [r3, #0]
                    invalidMovements++;
                    printf("Répétition non valide.\n");
                    MVT_non_valide();
                }
            }
            break;
 8000e68:	e059      	b.n	8000f1e <MX_MEMS_Process+0x20e>
                } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000e6a:	4d37      	ldr	r5, [pc, #220]	@ (8000f48 <MX_MEMS_Process+0x238>)
 8000e6c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e70:	9304      	str	r3, [sp, #16]
 8000e72:	4b39      	ldr	r3, [pc, #228]	@ (8000f58 <MX_MEMS_Process+0x248>)
 8000e74:	466c      	mov	r4, sp
 8000e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e80:	f000 fa6a 	bl	8001358 <compareBenchReps>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01c      	beq.n	8000ec4 <MX_MEMS_Process+0x1b4>
                    if(attention==1){
 8000e8a:	4b39      	ldr	r3, [pc, #228]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d101      	bne.n	8000e96 <MX_MEMS_Process+0x186>
                    	MVT_BRAS_GAUCHE();
 8000e92:	f00f febf 	bl	8010c14 <MVT_BRAS_GAUCHE>
                    if(attention==2){
 8000e96:	4b36      	ldr	r3, [pc, #216]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	d101      	bne.n	8000ea2 <MX_MEMS_Process+0x192>
                    	MVT_BRAS_DROIT();
 8000e9e:	f00f febf 	bl	8010c20 <MVT_BRAS_DROIT>
                    if(attention==0){
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d101      	bne.n	8000eae <MX_MEMS_Process+0x19e>
                    	MVT_BRAS_CORRECT();
 8000eaa:	f00f febf 	bl	8010c2c <MVT_BRAS_CORRECT>
                    validMovements++;
 8000eae:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000eb6:	6013      	str	r3, [r2, #0]
                    printf("Répétition valide.\n");
 8000eb8:	482e      	ldr	r0, [pc, #184]	@ (8000f74 <MX_MEMS_Process+0x264>)
 8000eba:	f011 ff09 	bl	8012cd0 <puts>
                    MVT_valide();
 8000ebe:	f00f fe9d 	bl	8010bfc <MVT_valide>
            break;
 8000ec2:	e02c      	b.n	8000f1e <MX_MEMS_Process+0x20e>
                    if(attention==1){
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <MX_MEMS_Process+0x1c0>
                    	MVT_BRAS_GAUCHE();
 8000ecc:	f00f fea2 	bl	8010c14 <MVT_BRAS_GAUCHE>
                    if(attention==2){
 8000ed0:	4b27      	ldr	r3, [pc, #156]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d101      	bne.n	8000edc <MX_MEMS_Process+0x1cc>
                    	MVT_BRAS_DROIT();
 8000ed8:	f00f fea2 	bl	8010c20 <MVT_BRAS_DROIT>
                    if(attention==0){
 8000edc:	4b24      	ldr	r3, [pc, #144]	@ (8000f70 <MX_MEMS_Process+0x260>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d101      	bne.n	8000ee8 <MX_MEMS_Process+0x1d8>
                    	MVT_BRAS_CORRECT();
 8000ee4:	f00f fea2 	bl	8010c2c <MVT_BRAS_CORRECT>
                    invalidMovements++;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <MX_MEMS_Process+0x224>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3301      	adds	r3, #1
 8000eee:	4a11      	ldr	r2, [pc, #68]	@ (8000f34 <MX_MEMS_Process+0x224>)
 8000ef0:	6013      	str	r3, [r2, #0]
                    printf("Répétition non valide.\n");
 8000ef2:	4821      	ldr	r0, [pc, #132]	@ (8000f78 <MX_MEMS_Process+0x268>)
 8000ef4:	f011 feec 	bl	8012cd0 <puts>
                    MVT_non_valide();
 8000ef8:	f00f fe86 	bl	8010c08 <MVT_non_valide>
            break;
 8000efc:	e00f      	b.n	8000f1e <MX_MEMS_Process+0x20e>

        case ATTENTE_SERIE:
            // Attente d'une nouvelle série
            if (exerciseEnded) {
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <MX_MEMS_Process+0x22c>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d00d      	beq.n	8000f22 <MX_MEMS_Process+0x212>
                printf("Prêt pour une nouvelle série.\n");
 8000f06:	481d      	ldr	r0, [pc, #116]	@ (8000f7c <MX_MEMS_Process+0x26c>)
 8000f08:	f011 fee2 	bl	8012cd0 <puts>
                exerciseEnded = false;
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <MX_MEMS_Process+0x22c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
                etat = ENREGISTREMENT_REPETITIONS;
 8000f12:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000f14:	2204      	movs	r2, #4
 8000f16:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000f18:	e003      	b.n	8000f22 <MX_MEMS_Process+0x212>
            break;
 8000f1a:	bf00      	nop
 8000f1c:	e002      	b.n	8000f24 <MX_MEMS_Process+0x214>
            break;
 8000f1e:	bf00      	nop
 8000f20:	e000      	b.n	8000f24 <MX_MEMS_Process+0x214>
            break;
 8000f22:	bf00      	nop
    }
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bdb0      	pop	{r4, r5, r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000224 	.word	0x20000224
 8000f30:	20000228 	.word	0x20000228
 8000f34:	2000022c 	.word	0x2000022c
 8000f38:	20000225 	.word	0x20000225
 8000f3c:	20000226 	.word	0x20000226
 8000f40:	08013b78 	.word	0x08013b78
 8000f44:	08013bb8 	.word	0x08013bb8
 8000f48:	20000204 	.word	0x20000204
 8000f4c:	08013bd8 	.word	0x08013bd8
 8000f50:	08013c18 	.word	0x08013c18
 8000f54:	08013c5c 	.word	0x08013c5c
 8000f58:	20000214 	.word	0x20000214
 8000f5c:	08013c8c 	.word	0x08013c8c
 8000f60:	08013ccc 	.word	0x08013ccc
 8000f64:	08013d04 	.word	0x08013d04
 8000f68:	08013d50 	.word	0x08013d50
 8000f6c:	08013d80 	.word	0x08013d80
 8000f70:	20000234 	.word	0x20000234
 8000f74:	08013dc0 	.word	0x08013dc0
 8000f78:	08013dd8 	.word	0x08013dd8
 8000f7c:	08013df4 	.word	0x08013df4

08000f80 <Init_Sensors>:


void Init_Sensors(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 8000f84:	f001 fd23 	bl	80029ce <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f88:	f001 fd29 	bl	80029de <BSP_SENSOR_GYR_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f8c:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000fa0 <Init_Sensors+0x20>
 8000f90:	f001 fd47 	bl	8002a22 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f001 fd53 	bl	8002a40 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	42480000 	.word	0x42480000

08000fa4 <ReadSensorData>:

void ReadSensorData(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000fa8:	4818      	ldr	r0, [pc, #96]	@ (800100c <ReadSensorData+0x68>)
 8000faa:	f001 fd20 	bl	80029ee <BSP_SENSOR_ACC_GetAxes>
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <ReadSensorData+0x6c>)
 8000fb0:	f001 fd2a 	bl	8002a08 <BSP_SENSOR_GYR_GetAxes>

	// Appliquer le décalage après la calibration
	AccValue.x -= AccOffset.x;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	@ (800100c <ReadSensorData+0x68>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <ReadSensorData+0x70>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a13      	ldr	r2, [pc, #76]	@ (800100c <ReadSensorData+0x68>)
 8000fc0:	6013      	str	r3, [r2, #0]
	AccValue.y -= AccOffset.y;
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <ReadSensorData+0x68>)
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <ReadSensorData+0x70>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	@ (800100c <ReadSensorData+0x68>)
 8000fce:	6053      	str	r3, [r2, #4]
	AccValue.z -= AccOffset.z;
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <ReadSensorData+0x68>)
 8000fd2:	689a      	ldr	r2, [r3, #8]
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <ReadSensorData+0x70>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	4a0c      	ldr	r2, [pc, #48]	@ (800100c <ReadSensorData+0x68>)
 8000fdc:	6093      	str	r3, [r2, #8]

	GyrValue.x -= GyrOffset.x;
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <ReadSensorData+0x6c>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8001018 <ReadSensorData+0x74>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <ReadSensorData+0x6c>)
 8000fea:	6013      	str	r3, [r2, #0]
	GyrValue.y -= GyrOffset.y;
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <ReadSensorData+0x6c>)
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <ReadSensorData+0x74>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <ReadSensorData+0x6c>)
 8000ff8:	6053      	str	r3, [r2, #4]
	GyrValue.z -= GyrOffset.z;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <ReadSensorData+0x6c>)
 8000ffc:	689a      	ldr	r2, [r3, #8]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <ReadSensorData+0x74>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	1ad3      	subs	r3, r2, r3
 8001004:	4a02      	ldr	r2, [pc, #8]	@ (8001010 <ReadSensorData+0x6c>)
 8001006:	6093      	str	r3, [r2, #8]
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	200001d4 	.word	0x200001d4
 8001010:	200001e0 	.word	0x200001e0
 8001014:	200001ec 	.word	0x200001ec
 8001018:	200001f8 	.word	0x200001f8

0800101c <CalibrateSensors>:
	printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long) GyrValue.x,
			(long) GyrValue.y, (long) GyrValue.z);
	HAL_Delay(2000);
}

void CalibrateSensors(void) {
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	CalibrateAccelerometer();
 8001020:	f000 f804 	bl	800102c <CalibrateAccelerometer>
	CalibrateGyroscope();
 8001024:	f000 f84a 	bl	80010bc <CalibrateGyroscope>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
 800103a:	2300      	movs	r3, #0
 800103c:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800103e:	2300      	movs	r3, #0
 8001040:	613b      	str	r3, [r7, #16]
 8001042:	e015      	b.n	8001070 <CalibrateAccelerometer+0x44>
		BSP_SENSOR_ACC_GetAxes(&tempVal);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fcd1 	bl	80029ee <BSP_SENSOR_ACC_GetAxes>
		sumX += tempVal.x;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	4413      	add	r3, r2
 8001052:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4413      	add	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4413      	add	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001064:	200a      	movs	r0, #10
 8001066:	f000 fe49 	bl	8001cfc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	3301      	adds	r3, #1
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	2b63      	cmp	r3, #99	@ 0x63
 8001074:	dde6      	ble.n	8001044 <CalibrateAccelerometer+0x18>
	}

	AccOffset.x = sumX / CALIBRATION_SAMPLES;
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <CalibrateAccelerometer+0x88>)
 800107a:	fb82 1203 	smull	r1, r2, r2, r3
 800107e:	1152      	asrs	r2, r2, #5
 8001080:	17db      	asrs	r3, r3, #31
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	4a0c      	ldr	r2, [pc, #48]	@ (80010b8 <CalibrateAccelerometer+0x8c>)
 8001086:	6013      	str	r3, [r2, #0]
	AccOffset.y = sumY / CALIBRATION_SAMPLES;
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <CalibrateAccelerometer+0x88>)
 800108c:	fb82 1203 	smull	r1, r2, r2, r3
 8001090:	1152      	asrs	r2, r2, #5
 8001092:	17db      	asrs	r3, r3, #31
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <CalibrateAccelerometer+0x8c>)
 8001098:	6053      	str	r3, [r2, #4]
	AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4a05      	ldr	r2, [pc, #20]	@ (80010b4 <CalibrateAccelerometer+0x88>)
 800109e:	fb82 1203 	smull	r1, r2, r2, r3
 80010a2:	1152      	asrs	r2, r2, #5
 80010a4:	17db      	asrs	r3, r3, #31
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <CalibrateAccelerometer+0x8c>)
 80010aa:	6093      	str	r3, [r2, #8]
}
 80010ac:	bf00      	nop
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	51eb851f 	.word	0x51eb851f
 80010b8:	200001ec 	.word	0x200001ec

080010bc <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	e015      	b.n	8001100 <CalibrateGyroscope+0x44>
		BSP_SENSOR_GYR_GetAxes(&tempVal);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	4618      	mov	r0, r3
 80010d8:	f001 fc96 	bl	8002a08 <BSP_SENSOR_GYR_GetAxes>
		sumX += tempVal.x;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	4413      	add	r3, r2
 80010e2:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4413      	add	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	4413      	add	r3, r2
 80010f2:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 80010f4:	200a      	movs	r0, #10
 80010f6:	f000 fe01 	bl	8001cfc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	3301      	adds	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b63      	cmp	r3, #99	@ 0x63
 8001104:	dde6      	ble.n	80010d4 <CalibrateGyroscope+0x18>
	}

	GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	4a0e      	ldr	r2, [pc, #56]	@ (8001144 <CalibrateGyroscope+0x88>)
 800110a:	fb82 1203 	smull	r1, r2, r2, r3
 800110e:	1152      	asrs	r2, r2, #5
 8001110:	17db      	asrs	r3, r3, #31
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	4a0c      	ldr	r2, [pc, #48]	@ (8001148 <CalibrateGyroscope+0x8c>)
 8001116:	6013      	str	r3, [r2, #0]
	GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	4a0a      	ldr	r2, [pc, #40]	@ (8001144 <CalibrateGyroscope+0x88>)
 800111c:	fb82 1203 	smull	r1, r2, r2, r3
 8001120:	1152      	asrs	r2, r2, #5
 8001122:	17db      	asrs	r3, r3, #31
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	4a08      	ldr	r2, [pc, #32]	@ (8001148 <CalibrateGyroscope+0x8c>)
 8001128:	6053      	str	r3, [r2, #4]
	GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <CalibrateGyroscope+0x88>)
 800112e:	fb82 1203 	smull	r1, r2, r2, r3
 8001132:	1152      	asrs	r2, r2, #5
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	4a03      	ldr	r2, [pc, #12]	@ (8001148 <CalibrateGyroscope+0x8c>)
 800113a:	6093      	str	r3, [r2, #8]
}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	51eb851f 	.word	0x51eb851f
 8001148:	200001f8 	.word	0x200001f8

0800114c <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b08e      	sub	sp, #56	@ 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8001154:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001158:	637b      	str	r3, [r7, #52]	@ 0x34
    int minValueZ = INT_MAX;
 800115a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800115e:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t startTime = HAL_GetTick();
 8001160:	f007 faa4 	bl	80086ac <HAL_GetTick>
 8001164:	62f8      	str	r0, [r7, #44]	@ 0x2c
    uint32_t lastMovementTime = startTime;
 8001166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001168:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t currentTime;
    bool movementDetected = false;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    bool isAscending = false; // Initialisation différée
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int changeOfDirectionCount = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    bool directionDetermined = false;
 800117a:	2300      	movs	r3, #0
 800117c:	77fb      	strb	r3, [r7, #31]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 800117e:	f007 fa95 	bl	80086ac <HAL_GetTick>
 8001182:	61b8      	str	r0, [r7, #24]
    zeroForceValue = Get_Calibration_Value();
 8001184:	f000 f930 	bl	80013e8 <Get_Calibration_Value>
 8001188:	4603      	mov	r3, r0
 800118a:	4a6b      	ldr	r2, [pc, #428]	@ (8001338 <recordBenchRep+0x1ec>)
 800118c:	6013      	str	r3, [r2, #0]
    attention=0;
 800118e:	4b6b      	ldr	r3, [pc, #428]	@ (800133c <recordBenchRep+0x1f0>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]


    while (true) {
        ReadSensorData();
 8001194:	f7ff ff06 	bl	8000fa4 <ReadSensorData>


        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 15000)) {
 8001198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00d      	beq.n	80011c2 <recordBenchRep+0x76>
 80011a6:	f007 fa81 	bl	80086ac <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d904      	bls.n	80011c2 <recordBenchRep+0x76>
            printf("Aucun mouvement détecté pendant plus de 15 secondes, fin de la tentative.\n");
 80011b8:	4861      	ldr	r0, [pc, #388]	@ (8001340 <recordBenchRep+0x1f4>)
 80011ba:	f011 fd89 	bl	8012cd0 <puts>
            return false;
 80011be:	2300      	movs	r3, #0
 80011c0:	e0b5      	b.n	800132e <recordBenchRep+0x1e2>
        }

        // Vérifier si le mouvement dépasse le seuil
        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 80011c2:	4b60      	ldr	r3, [pc, #384]	@ (8001344 <recordBenchRep+0x1f8>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bfb8      	it	lt
 80011ca:	425b      	neglt	r3, r3
 80011cc:	2b64      	cmp	r3, #100	@ 0x64
 80011ce:	f340 808b 	ble.w	80012e8 <recordBenchRep+0x19c>
            if (!movementDetected) {
 80011d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80011d6:	f083 0301 	eor.w	r3, r3, #1
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d00d      	beq.n	80011fc <recordBenchRep+0xb0>
                printf("Mouvement détecté pour la première fois, début du suivi.\n");
 80011e0:	4859      	ldr	r0, [pc, #356]	@ (8001348 <recordBenchRep+0x1fc>)
 80011e2:	f011 fd75 	bl	8012cd0 <puts>
                movementDetected = true;
 80011e6:	2301      	movs	r3, #1
 80011e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                startTime = HAL_GetTick();
 80011ec:	f007 fa5e 	bl	80086ac <HAL_GetTick>
 80011f0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                lastMovementTime = startTime;
 80011f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e002      	b.n	8001202 <recordBenchRep+0xb6>
            } else {
                lastMovementTime = HAL_GetTick();
 80011fc:	f007 fa56 	bl	80086ac <HAL_GetTick>
 8001200:	62b8      	str	r0, [r7, #40]	@ 0x28
            }

            // Mise à jour des valeurs maximales et minimales
            maxValueZ = fmax(maxValueZ, AccValue.z);
 8001202:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001204:	f7ff fa90 	bl	8000728 <__aeabi_i2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	4b4d      	ldr	r3, [pc, #308]	@ (8001344 <recordBenchRep+0x1f8>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fa89 	bl	8000728 <__aeabi_i2d>
 8001216:	4602      	mov	r2, r0
 8001218:	460b      	mov	r3, r1
 800121a:	ec43 2b11 	vmov	d1, r2, r3
 800121e:	ec45 4b10 	vmov	d0, r4, r5
 8001222:	f012 fc1f 	bl	8013a64 <fmax>
 8001226:	ec53 2b10 	vmov	r2, r3, d0
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f7ff fb6d 	bl	800090c <__aeabi_d2iz>
 8001232:	4603      	mov	r3, r0
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
            minValueZ = fmin(minValueZ, AccValue.z);
 8001236:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001238:	f7ff fa76 	bl	8000728 <__aeabi_i2d>
 800123c:	4604      	mov	r4, r0
 800123e:	460d      	mov	r5, r1
 8001240:	4b40      	ldr	r3, [pc, #256]	@ (8001344 <recordBenchRep+0x1f8>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff fa6f 	bl	8000728 <__aeabi_i2d>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	ec43 2b11 	vmov	d1, r2, r3
 8001252:	ec45 4b10 	vmov	d0, r4, r5
 8001256:	f012 fc2f 	bl	8013ab8 <fmin>
 800125a:	ec53 2b10 	vmov	r2, r3, d0
 800125e:	4610      	mov	r0, r2
 8001260:	4619      	mov	r1, r3
 8001262:	f7ff fb53 	bl	800090c <__aeabi_d2iz>
 8001266:	4603      	mov	r3, r0
 8001268:	633b      	str	r3, [r7, #48]	@ 0x30
            uint32_t adcValue = Read_ADC_Value();
 800126a:	f000 f8a3 	bl	80013b4 <Read_ADC_Value>
 800126e:	6178      	str	r0, [r7, #20]
                 int32_t adjustedValue = (int32_t)adcValue - (int32_t)zeroForceValue;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	4a31      	ldr	r2, [pc, #196]	@ (8001338 <recordBenchRep+0x1ec>)
 8001274:	6812      	ldr	r2, [r2, #0]
 8001276:	1a9b      	subs	r3, r3, r2
 8001278:	613b      	str	r3, [r7, #16]

                 if (adjustedValue >= 3) {
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	2b02      	cmp	r3, #2
 800127e:	dd06      	ble.n	800128e <recordBenchRep+0x142>
                          printf("Attention bras gauche!\n");
 8001280:	4832      	ldr	r0, [pc, #200]	@ (800134c <recordBenchRep+0x200>)
 8001282:	f011 fd25 	bl	8012cd0 <puts>
                          attention=1;
 8001286:	4b2d      	ldr	r3, [pc, #180]	@ (800133c <recordBenchRep+0x1f0>)
 8001288:	2201      	movs	r2, #1
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	e009      	b.n	80012a2 <recordBenchRep+0x156>
                      } else if (adjustedValue <= -3) {
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	f113 0f02 	cmn.w	r3, #2
 8001294:	da05      	bge.n	80012a2 <recordBenchRep+0x156>
                          printf("Attention bras droit!\n");
 8001296:	482e      	ldr	r0, [pc, #184]	@ (8001350 <recordBenchRep+0x204>)
 8001298:	f011 fd1a 	bl	8012cd0 <puts>
                          attention=2;
 800129c:	4b27      	ldr	r3, [pc, #156]	@ (800133c <recordBenchRep+0x1f0>)
 800129e:	2202      	movs	r2, #2
 80012a0:	601a      	str	r2, [r3, #0]
                      }

            // Déterminer la direction du mouvement
            if (!directionDetermined) {
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	f083 0301 	eor.w	r3, r3, #1
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00a      	beq.n	80012c4 <recordBenchRep+0x178>
                isAscending = AccValue.z > 0;
 80012ae:	4b25      	ldr	r3, [pc, #148]	@ (8001344 <recordBenchRep+0x1f8>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfcc      	ite	gt
 80012b6:	2301      	movgt	r3, #1
 80012b8:	2300      	movle	r3, #0
 80012ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                directionDetermined = true;
 80012be:	2301      	movs	r3, #1
 80012c0:	77fb      	strb	r3, [r7, #31]
 80012c2:	e011      	b.n	80012e8 <recordBenchRep+0x19c>

            } else {
                bool currentAscending = AccValue.z > 0;
 80012c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001344 <recordBenchRep+0x1f8>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	bfcc      	ite	gt
 80012cc:	2301      	movgt	r3, #1
 80012ce:	2300      	movle	r3, #0
 80012d0:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012d8:	429a      	cmp	r2, r3
 80012da:	d005      	beq.n	80012e8 <recordBenchRep+0x19c>
                    changeOfDirectionCount++;
 80012dc:	6a3b      	ldr	r3, [r7, #32]
 80012de:	3301      	adds	r3, #1
 80012e0:	623b      	str	r3, [r7, #32]
                    isAscending = currentAscending;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                }
            }
        }

        // Vérifier le temps d'inactivité
        currentTime = HAL_GetTick();
 80012e8:	f007 f9e0 	bl	80086ac <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	f43f af4e 	beq.w	8001194 <recordBenchRep+0x48>
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001302:	f67f af47 	bls.w	8001194 <recordBenchRep+0x48>
            printf("Période d'inactivité détectée, fin de l'enregistrement du mouvement.\n");
 8001306:	4813      	ldr	r0, [pc, #76]	@ (8001354 <recordBenchRep+0x208>)
 8001308:	f011 fce2 	bl	8012cd0 <puts>
            break;
 800130c:	bf00      	nop
        }
    }

    // Enregistrer les données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001312:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001318:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	461a      	mov	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	60da      	str	r2, [r3, #12]



    return true; // Mouvement détecté et enregistré
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	3738      	adds	r7, #56	@ 0x38
 8001332:	46bd      	mov	sp, r7
 8001334:	bdb0      	pop	{r4, r5, r7, pc}
 8001336:	bf00      	nop
 8001338:	20000230 	.word	0x20000230
 800133c:	20000234 	.word	0x20000234
 8001340:	08013e64 	.word	0x08013e64
 8001344:	200001d4 	.word	0x200001d4
 8001348:	08013eb0 	.word	0x08013eb0
 800134c:	08013ef0 	.word	0x08013ef0
 8001350:	08013f08 	.word	0x08013f08
 8001354:	08013f20 	.word	0x08013f20

08001358 <compareBenchReps>:


bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 8001358:	b490      	push	{r4, r7}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	463c      	mov	r4, r7
 8001360:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	bfb8      	it	lt
 800136e:	425b      	neglt	r3, r3
 8001370:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001372:	429a      	cmp	r2, r3
 8001374:	db17      	blt.n	80013a6 <compareBenchReps+0x4e>
			&& abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	bfb8      	it	lt
 8001380:	425b      	neglt	r3, r3
 8001382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001384:	429a      	cmp	r2, r3
 8001386:	db0e      	blt.n	80013a6 <compareBenchReps+0x4e>
			&& abs(refRep.duration - newRep.duration) <= tolerance
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	425b      	neglt	r3, r3
 8001394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001396:	429a      	cmp	r2, r3
 8001398:	db05      	blt.n	80013a6 <compareBenchReps+0x4e>
			&& refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139e:	429a      	cmp	r2, r3
 80013a0:	d101      	bne.n	80013a6 <compareBenchReps+0x4e>
		return true;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <compareBenchReps+0x50>
	}
	return false;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc90      	pop	{r4, r7}
 80013b0:	4770      	bx	lr
	...

080013b4 <Read_ADC_Value>:

uint32_t Read_ADC_Value(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 80013ba:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <Read_ADC_Value+0x30>)
 80013bc:	f007 fcfc 	bl	8008db8 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <Read_ADC_Value+0x30>)
 80013c6:	f007 fd7e 	bl	8008ec6 <HAL_ADC_PollForConversion>
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80013ca:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <Read_ADC_Value+0x30>)
 80013cc:	f007 fe08 	bl	8008fe0 <HAL_ADC_GetValue>
 80013d0:	6078      	str	r0, [r7, #4]
    HAL_ADC_Stop(&hadc1);
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <Read_ADC_Value+0x30>)
 80013d4:	f007 fd44 	bl	8008e60 <HAL_ADC_Stop>
    return adcValue;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002d8 	.word	0x200002d8

080013e8 <Get_Calibration_Value>:
uint32_t Get_Calibration_Value(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
    uint32_t sum = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
    const int numSamples = 10;
 80013f2:	230a      	movs	r3, #10
 80013f4:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < numSamples; i++) {
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	e00b      	b.n	8001414 <Get_Calibration_Value+0x2c>
        sum += Read_ADC_Value();
 80013fc:	f7ff ffda 	bl	80013b4 <Read_ADC_Value>
 8001400:	4602      	mov	r2, r0
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4413      	add	r3, r2
 8001406:	60fb      	str	r3, [r7, #12]
        HAL_Delay(10);  // Delay to allow ADC to stabilize
 8001408:	200a      	movs	r0, #10
 800140a:	f000 fc77 	bl	8001cfc <HAL_Delay>
    for (int i = 0; i < numSamples; i++) {
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	3301      	adds	r3, #1
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	dbef      	blt.n	80013fc <Get_Calibration_Value+0x14>
    }
    return sum / numSamples;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001432:	4b0b      	ldr	r3, [pc, #44]	@ (8001460 <APPD_EnableCPU2+0x34>)
 8001434:	1d3c      	adds	r4, r7, #4
 8001436:	461d      	mov	r5, r3
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001440:	c403      	stmia	r4!, {r0, r1}
 8001442:	8022      	strh	r2, [r4, #0]
 8001444:	3402      	adds	r4, #2
 8001446:	0c13      	lsrs	r3, r2, #16
 8001448:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800144a:	f00e fe8b 	bl	8010164 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4618      	mov	r0, r3
 8001452:	f00e f91c 	bl	800f68e <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001456:	bf00      	nop
}
 8001458:	3720      	adds	r7, #32
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	08013f6c 	.word	0x08013f6c

08001464 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <LL_C2_PWR_SetPowerMode+0x28>)
 800146e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4905      	ldr	r1, [pc, #20]	@ (800148c <LL_C2_PWR_SetPowerMode+0x28>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4313      	orrs	r3, r2
 800147c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	58000400 	.word	0x58000400

08001490 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <LL_EXTI_EnableIT_32_63+0x24>)
 800149a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800149e:	4905      	ldr	r1, [pc, #20]	@ (80014b4 <LL_EXTI_EnableIT_32_63+0x24>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	58000800 	.word	0x58000800

080014b8 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014c4:	4a0a      	ldr	r2, [pc, #40]	@ (80014f0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80014ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80014d2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014de:	4313      	orrs	r3, r2
 80014e0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	cafecafe 	.word	0xcafecafe

080014f4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8001506:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4313      	orrs	r3, r2
 800150e:	608b      	str	r3, [r1, #8]
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001520:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001524:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800152c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr

0800153e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800154e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001552:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001568:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800156c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001570:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001574:	d101      	bne.n	800157a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001576:	2301      	movs	r3, #1
 8001578:	e000      	b.n	800157c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800158a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800158e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001596:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800159a:	d101      	bne.n	80015a0 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800159c:	2301      	movs	r3, #1
 800159e:	e000      	b.n	80015a2 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80015c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4013      	ands	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015d0:	68fb      	ldr	r3, [r7, #12]
}
 80015d2:	bf00      	nop
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80015e4:	4b04      	ldr	r3, [pc, #16]	@ (80015f8 <LL_DBGMCU_GetDeviceID+0x18>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	e0042000 	.word	0xe0042000

080015fc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001600:	4b04      	ldr	r3, [pc, #16]	@ (8001614 <LL_DBGMCU_GetRevisionID+0x18>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	b29b      	uxth	r3, r3
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e0042000 	.word	0xe0042000

08001618 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	041b      	lsls	r3, r3, #16
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	605a      	str	r2, [r3, #4]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	431a      	orrs	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	605a      	str	r2, [r3, #4]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
 8001666:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695a      	ldr	r2, [r3, #20]
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	041b      	lsls	r3, r3, #16
 8001670:	431a      	orrs	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	615a      	str	r2, [r3, #20]
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
 800168a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695a      	ldr	r2, [r3, #20]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	615a      	str	r2, [r3, #20]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	683a      	ldr	r2, [r7, #0]
 80016b2:	609a      	str	r2, [r3, #8]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	619a      	str	r2, [r3, #24]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80016e0:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <LL_LPM_EnableSleep+0x1c>)
 80016e2:	691b      	ldr	r3, [r3, #16]
 80016e4:	4a04      	ldr	r2, [pc, #16]	@ (80016f8 <LL_LPM_EnableSleep+0x1c>)
 80016e6:	f023 0304 	bic.w	r3, r3, #4
 80016ea:	6113      	str	r3, [r2, #16]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	22ff      	movs	r2, #255	@ 0xff
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	22ca      	movs	r2, #202	@ 0xca
 8001722:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2253      	movs	r2, #83	@ 0x53
 8001728:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
 800173e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f023 0207 	bic.w	r2, r3, #7
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	431a      	orrs	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	609a      	str	r2, [r3, #8]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001760:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <MX_APPE_Config+0x18>)
 8001762:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001766:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001768:	f000 f824 	bl	80017b4 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800176c:	f000 f864 	bl	8001838 <Config_HSE>

  return;
 8001770:	bf00      	nop
}
 8001772:	bd80      	pop	{r7, pc}
 8001774:	58004000 	.word	0x58004000

08001778 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800177c:	f000 f870 	bl	8001860 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001780:	f000 f888 	bl	8001894 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001784:	4903      	ldr	r1, [pc, #12]	@ (8001794 <MX_APPE_Init+0x1c>)
 8001786:	2000      	movs	r0, #0
 8001788:	f000 ff30 	bl	80025ec <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800178c:	f000 f890 	bl	80018b0 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001790:	bf00      	nop
}
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000378 	.word	0x20000378

08001798 <Init_Smps>:

void Init_Smps(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800179c:	bf00      	nop
}
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <Init_Exti>:

void Init_Exti(void)
{
 80017a6:	b580      	push	{r7, lr}
 80017a8:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80017aa:	2050      	movs	r0, #80	@ 0x50
 80017ac:	f7ff fe70 	bl	8001490 <LL_EXTI_EnableIT_32_63>

  return;
 80017b0:	bf00      	nop
}
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80017b8:	f000 f804 	bl	80017c4 <Reset_BackupDomain>

  Reset_IPCC();
 80017bc:	f000 f81a 	bl	80017f4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80017c0:	bf00      	nop
}
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80017c8:	f7ff feca 	bl	8001560 <LL_RCC_IsActiveFlag_PINRST>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00d      	beq.n	80017ee <Reset_BackupDomain+0x2a>
 80017d2:	f7ff fed8 	bl	8001586 <LL_RCC_IsActiveFlag_SFTRST>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d108      	bne.n	80017ee <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80017dc:	f009 ff48 	bl	800b670 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80017e0:	f009 ff46 	bl	800b670 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80017e4:	f7ff fe9a 	bl	800151c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80017e8:	f7ff fea9 	bl	800153e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80017ec:	bf00      	nop
 80017ee:	bf00      	nop
}
 80017f0:	bd80      	pop	{r7, pc}
	...

080017f4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80017f8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80017fc:	f7ff fed6 	bl	80015ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001800:	213f      	movs	r1, #63	@ 0x3f
 8001802:	480c      	ldr	r0, [pc, #48]	@ (8001834 <Reset_IPCC+0x40>)
 8001804:	f7ff ff4e 	bl	80016a4 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8001808:	213f      	movs	r1, #63	@ 0x3f
 800180a:	480a      	ldr	r0, [pc, #40]	@ (8001834 <Reset_IPCC+0x40>)
 800180c:	f7ff ff58 	bl	80016c0 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001810:	213f      	movs	r1, #63	@ 0x3f
 8001812:	4808      	ldr	r0, [pc, #32]	@ (8001834 <Reset_IPCC+0x40>)
 8001814:	f7ff ff00 	bl	8001618 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8001818:	213f      	movs	r1, #63	@ 0x3f
 800181a:	4806      	ldr	r0, [pc, #24]	@ (8001834 <Reset_IPCC+0x40>)
 800181c:	f7ff ff1f 	bl	800165e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001820:	213f      	movs	r1, #63	@ 0x3f
 8001822:	4804      	ldr	r0, [pc, #16]	@ (8001834 <Reset_IPCC+0x40>)
 8001824:	f7ff ff0a 	bl	800163c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8001828:	213f      	movs	r1, #63	@ 0x3f
 800182a:	4802      	ldr	r0, [pc, #8]	@ (8001834 <Reset_IPCC+0x40>)
 800182c:	f7ff ff29 	bl	8001682 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001830:	bf00      	nop
}
 8001832:	bd80      	pop	{r7, pc}
 8001834:	58000c00 	.word	0x58000c00

08001838 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800183e:	2000      	movs	r0, #0
 8001840:	f00e fd44 	bl	80102cc <OTP_Read>
 8001844:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d005      	beq.n	8001858 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	799b      	ldrb	r3, [r3, #6]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fe31 	bl	80014b8 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001856:	bf00      	nop
 8001858:	bf00      	nop
}
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <System_Init>:

static void System_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  Init_Smps();
 8001864:	f7ff ff98 	bl	8001798 <Init_Smps>

  Init_Exti();
 8001868:	f7ff ff9d 	bl	80017a6 <Init_Exti>

  Init_Rtc();
 800186c:	f000 f802 	bl	8001874 <Init_Rtc>

  return;
 8001870:	bf00      	nop
}
 8001872:	bd80      	pop	{r7, pc}

08001874 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <Init_Rtc+0x1c>)
 800187a:	f7ff ff4c 	bl	8001716 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800187e:	2100      	movs	r1, #0
 8001880:	4803      	ldr	r0, [pc, #12]	@ (8001890 <Init_Rtc+0x1c>)
 8001882:	f7ff ff58 	bl	8001736 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001886:	4802      	ldr	r0, [pc, #8]	@ (8001890 <Init_Rtc+0x1c>)
 8001888:	f7ff ff38 	bl	80016fc <LL_RTC_EnableWriteProtection>

  return;
 800188c:	bf00      	nop
}
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40002800 	.word	0x40002800

08001894 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001898:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800189c:	f7ff fe2a 	bl	80014f4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80018a0:	f010 fe68 	bl	8012574 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80018a4:	2004      	movs	r0, #4
 80018a6:	f7ff fddd 	bl	8001464 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80018aa:	bf00      	nop
}
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b088      	sub	sp, #32
 80018b4:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80018b6:	f00e fa9f 	bl	800fdf8 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80018ba:	4a11      	ldr	r2, [pc, #68]	@ (8001900 <appe_Tl_Init+0x50>)
 80018bc:	2100      	movs	r1, #0
 80018be:	2010      	movs	r0, #16
 80018c0:	f010 ff96 	bl	80127f0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001904 <appe_Tl_Init+0x54>)
 80018c6:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80018c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <appe_Tl_Init+0x58>)
 80018ca:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80018cc:	463b      	mov	r3, r7
 80018ce:	4619      	mov	r1, r3
 80018d0:	480e      	ldr	r0, [pc, #56]	@ (800190c <appe_Tl_Init+0x5c>)
 80018d2:	f00e f953 	bl	800fb7c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <appe_Tl_Init+0x60>)
 80018d8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80018da:	4b0e      	ldr	r3, [pc, #56]	@ (8001914 <appe_Tl_Init+0x64>)
 80018dc:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <appe_Tl_Init+0x68>)
 80018e0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80018e2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018e6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80018e8:	f107 0308 	add.w	r3, r7, #8
 80018ec:	4618      	mov	r0, r3
 80018ee:	f00e fbc5 	bl	801007c <TL_MM_Init>

  TL_Enable();
 80018f2:	f00e fa7b 	bl	800fdec <TL_Enable>

  return;
 80018f6:	bf00      	nop
}
 80018f8:	3720      	adds	r7, #32
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	0800fbb5 	.word	0x0800fbb5
 8001904:	20030734 	.word	0x20030734
 8001908:	0800191d 	.word	0x0800191d
 800190c:	08001935 	.word	0x08001935
 8001910:	2003094c 	.word	0x2003094c
 8001914:	20030840 	.word	0x20030840
 8001918:	200301f8 	.word	0x200301f8

0800191c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001926:	bf00      	nop
}
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	330b      	adds	r3, #11
 8001942:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b29b      	uxth	r3, r3
 800194a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800194e:	2b07      	cmp	r3, #7
 8001950:	f200 80d0 	bhi.w	8001af4 <APPE_SysUserEvtRx+0x1c0>
 8001954:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <APPE_SysUserEvtRx+0x28>)
 8001956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800195a:	bf00      	nop
 800195c:	0800197d 	.word	0x0800197d
 8001960:	08001a0f 	.word	0x08001a0f
 8001964:	08001a31 	.word	0x08001a31
 8001968:	08001af5 	.word	0x08001af5
 800196c:	08001a75 	.word	0x08001a75
 8001970:	08001a99 	.word	0x08001a99
 8001974:	08001ab5 	.word	0x08001ab5
 8001978:	08001ad9 	.word	0x08001ad9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	4618      	mov	r0, r3
 8001982:	f00d feb1 	bl	800f6e8 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001986:	485e      	ldr	r0, [pc, #376]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001988:	f00e fc78 	bl	801027c <DbgTraceGetFileName>
 800198c:	4601      	mov	r1, r0
 800198e:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001992:	4a5c      	ldr	r2, [pc, #368]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001994:	485c      	ldr	r0, [pc, #368]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001996:	f011 f92b 	bl	8012bf0 <iprintf>
 800199a:	7b3b      	ldrb	r3, [r7, #12]
 800199c:	4619      	mov	r1, r3
 800199e:	7b7b      	ldrb	r3, [r7, #13]
 80019a0:	461a      	mov	r2, r3
 80019a2:	7bbb      	ldrb	r3, [r7, #14]
 80019a4:	4859      	ldr	r0, [pc, #356]	@ (8001b0c <APPE_SysUserEvtRx+0x1d8>)
 80019a6:	f011 f923 	bl	8012bf0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80019aa:	4855      	ldr	r0, [pc, #340]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 80019ac:	f00e fc66 	bl	801027c <DbgTraceGetFileName>
 80019b0:	4601      	mov	r1, r0
 80019b2:	f240 136b 	movw	r3, #363	@ 0x16b
 80019b6:	4a53      	ldr	r2, [pc, #332]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 80019b8:	4853      	ldr	r0, [pc, #332]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 80019ba:	f011 f919 	bl	8012bf0 <iprintf>
 80019be:	7c3b      	ldrb	r3, [r7, #16]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4853      	ldr	r0, [pc, #332]	@ (8001b10 <APPE_SysUserEvtRx+0x1dc>)
 80019c4:	f011 f914 	bl	8012bf0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 80019c8:	484d      	ldr	r0, [pc, #308]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 80019ca:	f00e fc57 	bl	801027c <DbgTraceGetFileName>
 80019ce:	4601      	mov	r1, r0
 80019d0:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80019d4:	4a4b      	ldr	r2, [pc, #300]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 80019d6:	484c      	ldr	r0, [pc, #304]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 80019d8:	f011 f90a 	bl	8012bf0 <iprintf>
 80019dc:	7dbb      	ldrb	r3, [r7, #22]
 80019de:	4619      	mov	r1, r3
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	461a      	mov	r2, r3
 80019e4:	7e3b      	ldrb	r3, [r7, #24]
 80019e6:	484b      	ldr	r0, [pc, #300]	@ (8001b14 <APPE_SysUserEvtRx+0x1e0>)
 80019e8:	f011 f902 	bl	8012bf0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80019ec:	4844      	ldr	r0, [pc, #272]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 80019ee:	f00e fc45 	bl	801027c <DbgTraceGetFileName>
 80019f2:	4601      	mov	r1, r0
 80019f4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80019f8:	4a42      	ldr	r2, [pc, #264]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 80019fa:	4843      	ldr	r0, [pc, #268]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 80019fc:	f011 f8f8 	bl	8012bf0 <iprintf>
 8001a00:	4845      	ldr	r0, [pc, #276]	@ (8001b18 <APPE_SysUserEvtRx+0x1e4>)
 8001a02:	f011 f8f5 	bl	8012bf0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f8e0 	bl	8001bcc <APPE_SysEvtReadyProcessing>
    break;
 8001a0c:	e073      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001a0e:	483c      	ldr	r0, [pc, #240]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001a10:	f00e fc34 	bl	801027c <DbgTraceGetFileName>
 8001a14:	4601      	mov	r1, r0
 8001a16:	f240 1373 	movw	r3, #371	@ 0x173
 8001a1a:	4a3a      	ldr	r2, [pc, #232]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001a1c:	483a      	ldr	r0, [pc, #232]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001a1e:	f011 f8e7 	bl	8012bf0 <iprintf>
 8001a22:	483e      	ldr	r0, [pc, #248]	@ (8001b1c <APPE_SysUserEvtRx+0x1e8>)
 8001a24:	f011 f8e4 	bl	8012bf0 <iprintf>
    APPE_SysEvtError(pPayload);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f000 f885 	bl	8001b38 <APPE_SysEvtError>
    break;
 8001a2e:	e062      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001a30:	4833      	ldr	r0, [pc, #204]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001a32:	f00e fc23 	bl	801027c <DbgTraceGetFileName>
 8001a36:	4601      	mov	r1, r0
 8001a38:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001a3c:	4a31      	ldr	r2, [pc, #196]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001a3e:	4832      	ldr	r0, [pc, #200]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001a40:	f011 f8d6 	bl	8012bf0 <iprintf>
 8001a44:	4836      	ldr	r0, [pc, #216]	@ (8001b20 <APPE_SysUserEvtRx+0x1ec>)
 8001a46:	f011 f943 	bl	8012cd0 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001a4a:	482d      	ldr	r0, [pc, #180]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001a4c:	f00e fc16 	bl	801027c <DbgTraceGetFileName>
 8001a50:	4601      	mov	r1, r0
 8001a52:	f240 1379 	movw	r3, #377	@ 0x179
 8001a56:	4a2b      	ldr	r2, [pc, #172]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001a58:	482b      	ldr	r0, [pc, #172]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001a5a:	f011 f8c9 	bl	8012bf0 <iprintf>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3302      	adds	r3, #2
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	3302      	adds	r3, #2
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	482d      	ldr	r0, [pc, #180]	@ (8001b24 <APPE_SysUserEvtRx+0x1f0>)
 8001a6e:	f011 f8bf 	bl	8012bf0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001a72:	e040      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001a74:	4822      	ldr	r0, [pc, #136]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001a76:	f00e fc01 	bl	801027c <DbgTraceGetFileName>
 8001a7a:	4601      	mov	r1, r0
 8001a7c:	f240 137f 	movw	r3, #383	@ 0x17f
 8001a80:	4a20      	ldr	r2, [pc, #128]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001a82:	4821      	ldr	r0, [pc, #132]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001a84:	f011 f8b4 	bl	8012bf0 <iprintf>
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	3302      	adds	r3, #2
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4825      	ldr	r0, [pc, #148]	@ (8001b28 <APPE_SysUserEvtRx+0x1f4>)
 8001a92:	f011 f8ad 	bl	8012bf0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001a96:	e02e      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001a98:	4819      	ldr	r0, [pc, #100]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001a9a:	f00e fbef 	bl	801027c <DbgTraceGetFileName>
 8001a9e:	4601      	mov	r1, r0
 8001aa0:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001aa4:	4a17      	ldr	r2, [pc, #92]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001aa6:	4818      	ldr	r0, [pc, #96]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001aa8:	f011 f8a2 	bl	8012bf0 <iprintf>
 8001aac:	481f      	ldr	r0, [pc, #124]	@ (8001b2c <APPE_SysUserEvtRx+0x1f8>)
 8001aae:	f011 f89f 	bl	8012bf0 <iprintf>
    break;
 8001ab2:	e020      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001ab4:	4812      	ldr	r0, [pc, #72]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001ab6:	f00e fbe1 	bl	801027c <DbgTraceGetFileName>
 8001aba:	4601      	mov	r1, r0
 8001abc:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001ac0:	4a10      	ldr	r2, [pc, #64]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001ac2:	4811      	ldr	r0, [pc, #68]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001ac4:	f011 f894 	bl	8012bf0 <iprintf>
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	3302      	adds	r3, #2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4817      	ldr	r0, [pc, #92]	@ (8001b30 <APPE_SysUserEvtRx+0x1fc>)
 8001ad2:	f011 f88d 	bl	8012bf0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001ad6:	e00e      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001ad8:	4809      	ldr	r0, [pc, #36]	@ (8001b00 <APPE_SysUserEvtRx+0x1cc>)
 8001ada:	f00e fbcf 	bl	801027c <DbgTraceGetFileName>
 8001ade:	4601      	mov	r1, r0
 8001ae0:	f240 138d 	movw	r3, #397	@ 0x18d
 8001ae4:	4a07      	ldr	r2, [pc, #28]	@ (8001b04 <APPE_SysUserEvtRx+0x1d0>)
 8001ae6:	4808      	ldr	r0, [pc, #32]	@ (8001b08 <APPE_SysUserEvtRx+0x1d4>)
 8001ae8:	f011 f882 	bl	8012bf0 <iprintf>
 8001aec:	4811      	ldr	r0, [pc, #68]	@ (8001b34 <APPE_SysUserEvtRx+0x200>)
 8001aee:	f011 f87f 	bl	8012bf0 <iprintf>
    break;
 8001af2:	e000      	b.n	8001af6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001af4:	bf00      	nop
  }

  return;
 8001af6:	bf00      	nop
}
 8001af8:	3720      	adds	r7, #32
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	08013f88 	.word	0x08013f88
 8001b04:	0801573c 	.word	0x0801573c
 8001b08:	08013fa0 	.word	0x08013fa0
 8001b0c:	08013fb4 	.word	0x08013fb4
 8001b10:	08013fd8 	.word	0x08013fd8
 8001b14:	08013ff4 	.word	0x08013ff4
 8001b18:	0801400c 	.word	0x0801400c
 8001b1c:	0801402c 	.word	0x0801402c
 8001b20:	08014050 	.word	0x08014050
 8001b24:	080140a0 	.word	0x080140a0
 8001b28:	080140c8 	.word	0x080140c8
 8001b2c:	08014104 	.word	0x08014104
 8001b30:	08014128 	.word	0x08014128
 8001b34:	08014164 	.word	0x08014164

08001b38 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	330b      	adds	r3, #11
 8001b46:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	3302      	adds	r3, #2
 8001b4c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001b4e:	4819      	ldr	r0, [pc, #100]	@ (8001bb4 <APPE_SysEvtError+0x7c>)
 8001b50:	f00e fb94 	bl	801027c <DbgTraceGetFileName>
 8001b54:	4601      	mov	r1, r0
 8001b56:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8001b5a:	4a17      	ldr	r2, [pc, #92]	@ (8001bb8 <APPE_SysEvtError+0x80>)
 8001b5c:	4817      	ldr	r0, [pc, #92]	@ (8001bbc <APPE_SysEvtError+0x84>)
 8001b5e:	f011 f847 	bl	8012bf0 <iprintf>
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4815      	ldr	r0, [pc, #84]	@ (8001bc0 <APPE_SysEvtError+0x88>)
 8001b6a:	f011 f841 	bl	8012bf0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10d      	bne.n	8001b92 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001b76:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <APPE_SysEvtError+0x7c>)
 8001b78:	f00e fb80 	bl	801027c <DbgTraceGetFileName>
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001b82:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <APPE_SysEvtError+0x80>)
 8001b84:	480d      	ldr	r0, [pc, #52]	@ (8001bbc <APPE_SysEvtError+0x84>)
 8001b86:	f011 f833 	bl	8012bf0 <iprintf>
 8001b8a:	480e      	ldr	r0, [pc, #56]	@ (8001bc4 <APPE_SysEvtError+0x8c>)
 8001b8c:	f011 f8a0 	bl	8012cd0 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001b90:	e00d      	b.n	8001bae <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001b92:	4808      	ldr	r0, [pc, #32]	@ (8001bb4 <APPE_SysEvtError+0x7c>)
 8001b94:	f00e fb72 	bl	801027c <DbgTraceGetFileName>
 8001b98:	4601      	mov	r1, r0
 8001b9a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001b9e:	4a06      	ldr	r2, [pc, #24]	@ (8001bb8 <APPE_SysEvtError+0x80>)
 8001ba0:	4806      	ldr	r0, [pc, #24]	@ (8001bbc <APPE_SysEvtError+0x84>)
 8001ba2:	f011 f825 	bl	8012bf0 <iprintf>
 8001ba6:	4808      	ldr	r0, [pc, #32]	@ (8001bc8 <APPE_SysEvtError+0x90>)
 8001ba8:	f011 f892 	bl	8012cd0 <puts>
  return;
 8001bac:	bf00      	nop
}
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	08013f88 	.word	0x08013f88
 8001bb8:	08015750 	.word	0x08015750
 8001bbc:	08013fa0 	.word	0x08013fa0
 8001bc0:	08014188 	.word	0x08014188
 8001bc4:	080141b8 	.word	0x080141b8
 8001bc8:	080141f4 	.word	0x080141f4

08001bcc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	@ 0x28
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	330b      	adds	r3, #11
 8001bf0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d146      	bne.n	8001c8e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001c00:	4836      	ldr	r0, [pc, #216]	@ (8001cdc <APPE_SysEvtReadyProcessing+0x110>)
 8001c02:	f00e fb3b 	bl	801027c <DbgTraceGetFileName>
 8001c06:	4601      	mov	r1, r0
 8001c08:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001c0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ce0 <APPE_SysEvtReadyProcessing+0x114>)
 8001c0e:	4835      	ldr	r0, [pc, #212]	@ (8001ce4 <APPE_SysEvtReadyProcessing+0x118>)
 8001c10:	f010 ffee 	bl	8012bf0 <iprintf>
 8001c14:	4834      	ldr	r0, [pc, #208]	@ (8001ce8 <APPE_SysEvtReadyProcessing+0x11c>)
 8001c16:	f011 f85b 	bl	8012cd0 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001c1a:	f7ff fc07 	bl	800142c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001c1e:	230f      	movs	r3, #15
 8001c20:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001c22:	237f      	movs	r3, #127	@ 0x7f
 8001c24:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001c26:	f7ff fce9 	bl	80015fc <LL_DBGMCU_GetRevisionID>
 8001c2a:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001c2c:	482b      	ldr	r0, [pc, #172]	@ (8001cdc <APPE_SysEvtReadyProcessing+0x110>)
 8001c2e:	f00e fb25 	bl	801027c <DbgTraceGetFileName>
 8001c32:	4601      	mov	r1, r0
 8001c34:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001c38:	4a29      	ldr	r2, [pc, #164]	@ (8001ce0 <APPE_SysEvtReadyProcessing+0x114>)
 8001c3a:	482a      	ldr	r0, [pc, #168]	@ (8001ce4 <APPE_SysEvtReadyProcessing+0x118>)
 8001c3c:	f010 ffd8 	bl	8012bf0 <iprintf>
 8001c40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c42:	482a      	ldr	r0, [pc, #168]	@ (8001cec <APPE_SysEvtReadyProcessing+0x120>)
 8001c44:	f010 ffd4 	bl	8012bf0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001c4e:	f7ff fcc7 	bl	80015e0 <LL_DBGMCU_GetDeviceID>
 8001c52:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001c54:	4821      	ldr	r0, [pc, #132]	@ (8001cdc <APPE_SysEvtReadyProcessing+0x110>)
 8001c56:	f00e fb11 	bl	801027c <DbgTraceGetFileName>
 8001c5a:	4601      	mov	r1, r0
 8001c5c:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001c60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce0 <APPE_SysEvtReadyProcessing+0x114>)
 8001c62:	4820      	ldr	r0, [pc, #128]	@ (8001ce4 <APPE_SysEvtReadyProcessing+0x118>)
 8001c64:	f010 ffc4 	bl	8012bf0 <iprintf>
 8001c68:	6a39      	ldr	r1, [r7, #32]
 8001c6a:	4821      	ldr	r0, [pc, #132]	@ (8001cf0 <APPE_SysEvtReadyProcessing+0x124>)
 8001c6c:	f010 ffc0 	bl	8012bf0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001c76:	f107 0308 	add.w	r3, r7, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00d fd1e 	bl	800f6bc <SHCI_C2_Config>

    APP_BLE_Init();
 8001c80:	f00e fc2e 	bl	80104e0 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001c84:	2100      	movs	r1, #0
 8001c86:	2001      	movs	r0, #1
 8001c88:	f010 fc86 	bl	8012598 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001c8c:	e022      	b.n	8001cd4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d110      	bne.n	8001cb8 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001c96:	4811      	ldr	r0, [pc, #68]	@ (8001cdc <APPE_SysEvtReadyProcessing+0x110>)
 8001c98:	f00e faf0 	bl	801027c <DbgTraceGetFileName>
 8001c9c:	4601      	mov	r1, r0
 8001c9e:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce0 <APPE_SysEvtReadyProcessing+0x114>)
 8001ca4:	480f      	ldr	r0, [pc, #60]	@ (8001ce4 <APPE_SysEvtReadyProcessing+0x118>)
 8001ca6:	f010 ffa3 	bl	8012bf0 <iprintf>
 8001caa:	4812      	ldr	r0, [pc, #72]	@ (8001cf4 <APPE_SysEvtReadyProcessing+0x128>)
 8001cac:	f010 ffa0 	bl	8012bf0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
  return;
 8001cb6:	e00d      	b.n	8001cd4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001cb8:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <APPE_SysEvtReadyProcessing+0x110>)
 8001cba:	f00e fadf 	bl	801027c <DbgTraceGetFileName>
 8001cbe:	4601      	mov	r1, r0
 8001cc0:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001cc4:	4a06      	ldr	r2, [pc, #24]	@ (8001ce0 <APPE_SysEvtReadyProcessing+0x114>)
 8001cc6:	4807      	ldr	r0, [pc, #28]	@ (8001ce4 <APPE_SysEvtReadyProcessing+0x118>)
 8001cc8:	f010 ff92 	bl	8012bf0 <iprintf>
 8001ccc:	480a      	ldr	r0, [pc, #40]	@ (8001cf8 <APPE_SysEvtReadyProcessing+0x12c>)
 8001cce:	f010 ff8f 	bl	8012bf0 <iprintf>
  return;
 8001cd2:	bf00      	nop
}
 8001cd4:	3728      	adds	r7, #40	@ 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	08013f88 	.word	0x08013f88
 8001ce0:	08015764 	.word	0x08015764
 8001ce4:	08013fa0 	.word	0x08013fa0
 8001ce8:	0801422c 	.word	0x0801422c
 8001cec:	08014248 	.word	0x08014248
 8001cf0:	0801426c 	.word	0x0801426c
 8001cf4:	0801428c 	.word	0x0801428c
 8001cf8:	080142c0 	.word	0x080142c0

08001cfc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f006 fcd2 	bl	80086ac <HAL_GetTick>
 8001d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d14:	d00a      	beq.n	8001d2c <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001d16:	f006 fce1 	bl	80086dc <HAL_GetTickFreq>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	4413      	add	r3, r2
 8001d22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d24:	e002      	b.n	8001d2c <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001d26:	f7ff fcd9 	bl	80016dc <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001d2a:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001d2c:	f006 fcbe 	bl	80086ac <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8f4      	bhi.n	8001d26 <HAL_Delay+0x2a>
  }
}
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d4e:	f010 fc53 	bl	80125f8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001d5a:	bf00      	nop
}
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d72:	f010 fc41 	bl	80125f8 <UTIL_SEQ_Run>
  return;
 8001d76:	bf00      	nop
}
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b082      	sub	sp, #8
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2010      	movs	r0, #16
 8001d8a:	f010 fd53 	bl	8012834 <UTIL_SEQ_SetTask>
  return;
 8001d8e:	bf00      	nop
}
 8001d90:	3708      	adds	r7, #8
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b082      	sub	sp, #8
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001d9e:	2002      	movs	r0, #2
 8001da0:	f010 fdb4 	bl	801290c <UTIL_SEQ_SetEvt>
  return;
 8001da4:	bf00      	nop
}
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001db4:	2002      	movs	r0, #2
 8001db6:	f010 fdc9 	bl	801294c <UTIL_SEQ_WaitEvt>
  return;
 8001dba:	bf00      	nop
}
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <LL_EXTI_EnableIT_0_31>:
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001dce:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001dd2:	4905      	ldr	r1, [pc, #20]	@ (8001de8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	58000800 	.word	0x58000800

08001dec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4904      	ldr	r1, [pc, #16]	@ (8001e0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	58000800 	.word	0x58000800

08001e10 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <ReadRtcSsrValue+0x3c>)
 8001e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <ReadRtcSsrValue+0x3c>)
 8001e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001e26:	e005      	b.n	8001e34 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001e2c:	4b07      	ldr	r3, [pc, #28]	@ (8001e4c <ReadRtcSsrValue+0x3c>)
 8001e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1f5      	bne.n	8001e28 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001e3c:	683b      	ldr	r3, [r7, #0]
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40002800 	.word	0x40002800

08001e50 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001e60:	79ba      	ldrb	r2, [r7, #6]
 8001e62:	491d      	ldr	r1, [pc, #116]	@ (8001ed8 <LinkTimerAfter+0x88>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3315      	adds	r3, #21
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e74:	7bfb      	ldrb	r3, [r7, #15]
 8001e76:	2b06      	cmp	r3, #6
 8001e78:	d009      	beq.n	8001e8e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001e7a:	7bfa      	ldrb	r2, [r7, #15]
 8001e7c:	4916      	ldr	r1, [pc, #88]	@ (8001ed8 <LinkTimerAfter+0x88>)
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	440b      	add	r3, r1
 8001e88:	3314      	adds	r3, #20
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001e8e:	79fa      	ldrb	r2, [r7, #7]
 8001e90:	4911      	ldr	r1, [pc, #68]	@ (8001ed8 <LinkTimerAfter+0x88>)
 8001e92:	4613      	mov	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	4413      	add	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	440b      	add	r3, r1
 8001e9c:	3315      	adds	r3, #21
 8001e9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ea0:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001ea2:	79fa      	ldrb	r2, [r7, #7]
 8001ea4:	490c      	ldr	r1, [pc, #48]	@ (8001ed8 <LinkTimerAfter+0x88>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	440b      	add	r3, r1
 8001eb0:	3314      	adds	r3, #20
 8001eb2:	79ba      	ldrb	r2, [r7, #6]
 8001eb4:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001eb6:	79ba      	ldrb	r2, [r7, #6]
 8001eb8:	4907      	ldr	r1, [pc, #28]	@ (8001ed8 <LinkTimerAfter+0x88>)
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	00db      	lsls	r3, r3, #3
 8001ec2:	440b      	add	r3, r1
 8001ec4:	3315      	adds	r3, #21
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	701a      	strb	r2, [r3, #0]

  return;
 8001eca:	bf00      	nop
}
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20000238 	.word	0x20000238

08001edc <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	460a      	mov	r2, r1
 8001ee6:	71fb      	strb	r3, [r7, #7]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001eec:	4b29      	ldr	r3, [pc, #164]	@ (8001f94 <LinkTimerBefore+0xb8>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	79ba      	ldrb	r2, [r7, #6]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d032      	beq.n	8001f5e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001ef8:	79ba      	ldrb	r2, [r7, #6]
 8001efa:	4927      	ldr	r1, [pc, #156]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	440b      	add	r3, r1
 8001f06:	3314      	adds	r3, #20
 8001f08:	781b      	ldrb	r3, [r3, #0]
 8001f0a:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	4922      	ldr	r1, [pc, #136]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f10:	4613      	mov	r3, r2
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	440b      	add	r3, r1
 8001f1a:	3315      	adds	r3, #21
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001f20:	79fa      	ldrb	r2, [r7, #7]
 8001f22:	491d      	ldr	r1, [pc, #116]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f24:	4613      	mov	r3, r2
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3315      	adds	r3, #21
 8001f30:	79ba      	ldrb	r2, [r7, #6]
 8001f32:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	4918      	ldr	r1, [pc, #96]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f38:	4613      	mov	r3, r2
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	3314      	adds	r3, #20
 8001f44:	7bfa      	ldrb	r2, [r7, #15]
 8001f46:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001f48:	79ba      	ldrb	r2, [r7, #6]
 8001f4a:	4913      	ldr	r1, [pc, #76]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	4413      	add	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	440b      	add	r3, r1
 8001f56:	3314      	adds	r3, #20
 8001f58:	79fa      	ldrb	r2, [r7, #7]
 8001f5a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001f5c:	e014      	b.n	8001f88 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001f5e:	79fa      	ldrb	r2, [r7, #7]
 8001f60:	490d      	ldr	r1, [pc, #52]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3315      	adds	r3, #21
 8001f6e:	79ba      	ldrb	r2, [r7, #6]
 8001f70:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001f72:	79ba      	ldrb	r2, [r7, #6]
 8001f74:	4908      	ldr	r1, [pc, #32]	@ (8001f98 <LinkTimerBefore+0xbc>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3314      	adds	r3, #20
 8001f82:	79fa      	ldrb	r2, [r7, #7]
 8001f84:	701a      	strb	r2, [r3, #0]
  return;
 8001f86:	bf00      	nop
}
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	200002c8 	.word	0x200002c8
 8001f98:	20000238 	.word	0x20000238

08001f9c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001fa6:	4b4e      	ldr	r3, [pc, #312]	@ (80020e0 <linkTimer+0x144>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b06      	cmp	r3, #6
 8001fae:	d118      	bne.n	8001fe2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001fb0:	4b4b      	ldr	r3, [pc, #300]	@ (80020e0 <linkTimer+0x144>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b2da      	uxtb	r2, r3
 8001fb6:	4b4b      	ldr	r3, [pc, #300]	@ (80020e4 <linkTimer+0x148>)
 8001fb8:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001fba:	4a49      	ldr	r2, [pc, #292]	@ (80020e0 <linkTimer+0x144>)
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001fc0:	79fa      	ldrb	r2, [r7, #7]
 8001fc2:	4949      	ldr	r1, [pc, #292]	@ (80020e8 <linkTimer+0x14c>)
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	4413      	add	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	440b      	add	r3, r1
 8001fce:	3315      	adds	r3, #21
 8001fd0:	2206      	movs	r2, #6
 8001fd2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001fd4:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <linkTimer+0x150>)
 8001fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fda:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	81fb      	strh	r3, [r7, #14]
 8001fe0:	e078      	b.n	80020d4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001fe2:	f000 f909 	bl	80021f8 <ReturnTimeElapsed>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001fea:	79fa      	ldrb	r2, [r7, #7]
 8001fec:	493e      	ldr	r1, [pc, #248]	@ (80020e8 <linkTimer+0x14c>)
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	00db      	lsls	r3, r3, #3
 8001ff6:	440b      	add	r3, r1
 8001ff8:	3308      	adds	r3, #8
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	89fb      	ldrh	r3, [r7, #14]
 8001ffe:	79fa      	ldrb	r2, [r7, #7]
 8002000:	4419      	add	r1, r3
 8002002:	4839      	ldr	r0, [pc, #228]	@ (80020e8 <linkTimer+0x14c>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4403      	add	r3, r0
 800200e:	3308      	adds	r3, #8
 8002010:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002012:	79fa      	ldrb	r2, [r7, #7]
 8002014:	4934      	ldr	r1, [pc, #208]	@ (80020e8 <linkTimer+0x14c>)
 8002016:	4613      	mov	r3, r2
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4413      	add	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	440b      	add	r3, r1
 8002020:	3308      	adds	r3, #8
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002026:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <linkTimer+0x144>)
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	4619      	mov	r1, r3
 800202e:	4a2e      	ldr	r2, [pc, #184]	@ (80020e8 <linkTimer+0x14c>)
 8002030:	460b      	mov	r3, r1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	440b      	add	r3, r1
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	3308      	adds	r3, #8
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68ba      	ldr	r2, [r7, #8]
 8002040:	429a      	cmp	r2, r3
 8002042:	d337      	bcc.n	80020b4 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002044:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <linkTimer+0x144>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800204a:	7b7a      	ldrb	r2, [r7, #13]
 800204c:	4926      	ldr	r1, [pc, #152]	@ (80020e8 <linkTimer+0x14c>)
 800204e:	4613      	mov	r3, r2
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4413      	add	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	440b      	add	r3, r1
 8002058:	3315      	adds	r3, #21
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800205e:	e013      	b.n	8002088 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002060:	7b7a      	ldrb	r2, [r7, #13]
 8002062:	4921      	ldr	r1, [pc, #132]	@ (80020e8 <linkTimer+0x14c>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3315      	adds	r3, #21
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002074:	7b7a      	ldrb	r2, [r7, #13]
 8002076:	491c      	ldr	r1, [pc, #112]	@ (80020e8 <linkTimer+0x14c>)
 8002078:	4613      	mov	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3315      	adds	r3, #21
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002088:	7b3b      	ldrb	r3, [r7, #12]
 800208a:	2b06      	cmp	r3, #6
 800208c:	d00b      	beq.n	80020a6 <linkTimer+0x10a>
 800208e:	7b3a      	ldrb	r2, [r7, #12]
 8002090:	4915      	ldr	r1, [pc, #84]	@ (80020e8 <linkTimer+0x14c>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68ba      	ldr	r2, [r7, #8]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d2dc      	bcs.n	8002060 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80020a6:	7b7a      	ldrb	r2, [r7, #13]
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff fecf 	bl	8001e50 <LinkTimerAfter>
 80020b2:	e00f      	b.n	80020d4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80020b4:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <linkTimer+0x144>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	4611      	mov	r1, r2
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff ff0c 	bl	8001edc <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <linkTimer+0x144>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b06      	ldr	r3, [pc, #24]	@ (80020e4 <linkTimer+0x148>)
 80020cc:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80020ce:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <linkTimer+0x144>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80020d4:	89fb      	ldrh	r3, [r7, #14]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	200002c8 	.word	0x200002c8
 80020e4:	200002c9 	.word	0x200002c9
 80020e8:	20000238 	.word	0x20000238
 80020ec:	200002cc 	.word	0x200002cc

080020f0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	460a      	mov	r2, r1
 80020fa:	71fb      	strb	r3, [r7, #7]
 80020fc:	4613      	mov	r3, r2
 80020fe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002100:	4b39      	ldr	r3, [pc, #228]	@ (80021e8 <UnlinkTimer+0xf8>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	79fa      	ldrb	r2, [r7, #7]
 8002108:	429a      	cmp	r2, r3
 800210a:	d111      	bne.n	8002130 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 800210c:	4b36      	ldr	r3, [pc, #216]	@ (80021e8 <UnlinkTimer+0xf8>)
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4b36      	ldr	r3, [pc, #216]	@ (80021ec <UnlinkTimer+0xfc>)
 8002114:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	4935      	ldr	r1, [pc, #212]	@ (80021f0 <UnlinkTimer+0x100>)
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	3315      	adds	r3, #21
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <UnlinkTimer+0xf8>)
 800212c:	701a      	strb	r2, [r3, #0]
 800212e:	e03e      	b.n	80021ae <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002130:	79fa      	ldrb	r2, [r7, #7]
 8002132:	492f      	ldr	r1, [pc, #188]	@ (80021f0 <UnlinkTimer+0x100>)
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	440b      	add	r3, r1
 800213e:	3314      	adds	r3, #20
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002144:	79fa      	ldrb	r2, [r7, #7]
 8002146:	492a      	ldr	r1, [pc, #168]	@ (80021f0 <UnlinkTimer+0x100>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	440b      	add	r3, r1
 8002152:	3315      	adds	r3, #21
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002158:	79f9      	ldrb	r1, [r7, #7]
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	4824      	ldr	r0, [pc, #144]	@ (80021f0 <UnlinkTimer+0x100>)
 800215e:	460b      	mov	r3, r1
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	440b      	add	r3, r1
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4403      	add	r3, r0
 8002168:	3315      	adds	r3, #21
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2d8      	uxtb	r0, r3
 800216e:	4920      	ldr	r1, [pc, #128]	@ (80021f0 <UnlinkTimer+0x100>)
 8002170:	4613      	mov	r3, r2
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	4413      	add	r3, r2
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	440b      	add	r3, r1
 800217a:	3315      	adds	r3, #21
 800217c:	4602      	mov	r2, r0
 800217e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002180:	7bbb      	ldrb	r3, [r7, #14]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d013      	beq.n	80021ae <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002186:	79f9      	ldrb	r1, [r7, #7]
 8002188:	7bba      	ldrb	r2, [r7, #14]
 800218a:	4819      	ldr	r0, [pc, #100]	@ (80021f0 <UnlinkTimer+0x100>)
 800218c:	460b      	mov	r3, r1
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	440b      	add	r3, r1
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4403      	add	r3, r0
 8002196:	3314      	adds	r3, #20
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	b2d8      	uxtb	r0, r3
 800219c:	4914      	ldr	r1, [pc, #80]	@ (80021f0 <UnlinkTimer+0x100>)
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	440b      	add	r3, r1
 80021a8:	3314      	adds	r3, #20
 80021aa:	4602      	mov	r2, r0
 80021ac:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80021ae:	79fa      	ldrb	r2, [r7, #7]
 80021b0:	490f      	ldr	r1, [pc, #60]	@ (80021f0 <UnlinkTimer+0x100>)
 80021b2:	4613      	mov	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4413      	add	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	440b      	add	r3, r1
 80021bc:	330c      	adds	r3, #12
 80021be:	2201      	movs	r2, #1
 80021c0:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80021c2:	4b09      	ldr	r3, [pc, #36]	@ (80021e8 <UnlinkTimer+0xf8>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d107      	bne.n	80021dc <UnlinkTimer+0xec>
 80021cc:	79bb      	ldrb	r3, [r7, #6]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d104      	bne.n	80021dc <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80021d2:	4b08      	ldr	r3, [pc, #32]	@ (80021f4 <UnlinkTimer+0x104>)
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	601a      	str	r2, [r3, #0]
  }

  return;
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
}
 80021de:	3714      	adds	r7, #20
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	200002c8 	.word	0x200002c8
 80021ec:	200002c9 	.word	0x200002c9
 80021f0:	20000238 	.word	0x20000238
 80021f4:	200002cc 	.word	0x200002cc

080021f8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80021fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002268 <ReturnTimeElapsed+0x70>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002206:	d026      	beq.n	8002256 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002208:	f7ff fe02 	bl	8001e10 <ReadRtcSsrValue>
 800220c:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <ReturnTimeElapsed+0x70>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d805      	bhi.n	8002224 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <ReturnTimeElapsed+0x70>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	e00a      	b.n	800223a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002224:	4b11      	ldr	r3, [pc, #68]	@ (800226c <ReturnTimeElapsed+0x74>)
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	461a      	mov	r2, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002230:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <ReturnTimeElapsed+0x70>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	4413      	add	r3, r2
 8002238:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <ReturnTimeElapsed+0x78>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	fb02 f303 	mul.w	r3, r2, r3
 8002246:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002248:	4b0a      	ldr	r3, [pc, #40]	@ (8002274 <ReturnTimeElapsed+0x7c>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	40d3      	lsrs	r3, r2
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	e001      	b.n	800225a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	b29b      	uxth	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200002cc 	.word	0x200002cc
 800226c:	200002d4 	.word	0x200002d4
 8002270:	200002d2 	.word	0x200002d2
 8002274:	200002d1 	.word	0x200002d1

08002278 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002282:	88fb      	ldrh	r3, [r7, #6]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d108      	bne.n	800229a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002288:	f7ff fdc2 	bl	8001e10 <ReadRtcSsrValue>
 800228c:	4603      	mov	r3, r0
 800228e:	4a21      	ldr	r2, [pc, #132]	@ (8002314 <RestartWakeupCounter+0x9c>)
 8002290:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002292:	2003      	movs	r0, #3
 8002294:	f007 fd8b 	bl	8009dae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002298:	e039      	b.n	800230e <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800229a:	88fb      	ldrh	r3, [r7, #6]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d803      	bhi.n	80022a8 <RestartWakeupCounter+0x30>
 80022a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <RestartWakeupCounter+0xa0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d002      	beq.n	80022ae <RestartWakeupCounter+0x36>
      Value -= 1;
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	3b01      	subs	r3, #1
 80022ac:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80022ae:	bf00      	nop
 80022b0:	4b1a      	ldr	r3, [pc, #104]	@ (800231c <RestartWakeupCounter+0xa4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f8      	beq.n	80022b0 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80022be:	4b17      	ldr	r3, [pc, #92]	@ (800231c <RestartWakeupCounter+0xa4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b15      	ldr	r3, [pc, #84]	@ (800231c <RestartWakeupCounter+0xa4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80022ce:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80022d0:	4b13      	ldr	r3, [pc, #76]	@ (8002320 <RestartWakeupCounter+0xa8>)
 80022d2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80022d6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80022d8:	2003      	movs	r0, #3
 80022da:	f007 fd76 	bl	8009dca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80022de:	4b11      	ldr	r3, [pc, #68]	@ (8002324 <RestartWakeupCounter+0xac>)
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	0c1b      	lsrs	r3, r3, #16
 80022e4:	041b      	lsls	r3, r3, #16
 80022e6:	88fa      	ldrh	r2, [r7, #6]
 80022e8:	490e      	ldr	r1, [pc, #56]	@ (8002324 <RestartWakeupCounter+0xac>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80022ee:	f7ff fd8f 	bl	8001e10 <ReadRtcSsrValue>
 80022f2:	4603      	mov	r3, r0
 80022f4:	4a07      	ldr	r2, [pc, #28]	@ (8002314 <RestartWakeupCounter+0x9c>)
 80022f6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80022f8:	4b08      	ldr	r3, [pc, #32]	@ (800231c <RestartWakeupCounter+0xa4>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <RestartWakeupCounter+0xa4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002306:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002308:	f3af 8000 	nop.w
  return ;
 800230c:	bf00      	nop
}
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	200002cc 	.word	0x200002cc
 8002318:	200002d1 	.word	0x200002d1
 800231c:	20000378 	.word	0x20000378
 8002320:	58000800 	.word	0x58000800
 8002324:	40002800 	.word	0x40002800

08002328 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800232e:	4b45      	ldr	r3, [pc, #276]	@ (8002444 <RescheduleTimerList+0x11c>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002336:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800233a:	d107      	bne.n	800234c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800233c:	bf00      	nop
 800233e:	4b42      	ldr	r3, [pc, #264]	@ (8002448 <RescheduleTimerList+0x120>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	f003 0304 	and.w	r3, r3, #4
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1f8      	bne.n	800233e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800234c:	4b3e      	ldr	r3, [pc, #248]	@ (8002448 <RescheduleTimerList+0x120>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	4b3d      	ldr	r3, [pc, #244]	@ (8002448 <RescheduleTimerList+0x120>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800235c:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <RescheduleTimerList+0x124>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	493a      	ldr	r1, [pc, #232]	@ (8002450 <RescheduleTimerList+0x128>)
 8002366:	4613      	mov	r3, r2
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	4413      	add	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	440b      	add	r3, r1
 8002370:	3308      	adds	r3, #8
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002376:	f7ff ff3f 	bl	80021f8 <ReturnTimeElapsed>
 800237a:	4603      	mov	r3, r0
 800237c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800237e:	88fb      	ldrh	r3, [r7, #6]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	429a      	cmp	r2, r3
 8002384:	d205      	bcs.n	8002392 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800238a:	4b32      	ldr	r3, [pc, #200]	@ (8002454 <RescheduleTimerList+0x12c>)
 800238c:	2201      	movs	r2, #1
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	e04d      	b.n	800242e <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	4a30      	ldr	r2, [pc, #192]	@ (8002458 <RescheduleTimerList+0x130>)
 8002396:	8812      	ldrh	r2, [r2, #0]
 8002398:	b292      	uxth	r2, r2
 800239a:	4413      	add	r3, r2
 800239c:	461a      	mov	r2, r3
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d906      	bls.n	80023b2 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80023a4:	4b2c      	ldr	r3, [pc, #176]	@ (8002458 <RescheduleTimerList+0x130>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002454 <RescheduleTimerList+0x12c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
 80023b0:	e03d      	b.n	800242e <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	88fb      	ldrh	r3, [r7, #6]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80023bc:	4b25      	ldr	r3, [pc, #148]	@ (8002454 <RescheduleTimerList+0x12c>)
 80023be:	2201      	movs	r2, #1
 80023c0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80023c2:	e034      	b.n	800242e <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80023c4:	7bfa      	ldrb	r2, [r7, #15]
 80023c6:	4922      	ldr	r1, [pc, #136]	@ (8002450 <RescheduleTimerList+0x128>)
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	440b      	add	r3, r1
 80023d2:	3308      	adds	r3, #8
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d20a      	bcs.n	80023f2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	491c      	ldr	r1, [pc, #112]	@ (8002450 <RescheduleTimerList+0x128>)
 80023e0:	4613      	mov	r3, r2
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	4413      	add	r3, r2
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	440b      	add	r3, r1
 80023ea:	3308      	adds	r3, #8
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	e013      	b.n	800241a <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	4916      	ldr	r1, [pc, #88]	@ (8002450 <RescheduleTimerList+0x128>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	440b      	add	r3, r1
 8002400:	3308      	adds	r3, #8
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	88fb      	ldrh	r3, [r7, #6]
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	1ac9      	subs	r1, r1, r3
 800240a:	4811      	ldr	r0, [pc, #68]	@ (8002450 <RescheduleTimerList+0x128>)
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	4403      	add	r3, r0
 8002416:	3308      	adds	r3, #8
 8002418:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	490c      	ldr	r1, [pc, #48]	@ (8002450 <RescheduleTimerList+0x128>)
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	00db      	lsls	r3, r3, #3
 8002426:	440b      	add	r3, r1
 8002428:	3315      	adds	r3, #21
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	2b06      	cmp	r3, #6
 8002432:	d1c7      	bne.n	80023c4 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002434:	89bb      	ldrh	r3, [r7, #12]
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff ff1e 	bl	8002278 <RestartWakeupCounter>

  return ;
 800243c:	bf00      	nop
}
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40002800 	.word	0x40002800
 8002448:	20000378 	.word	0x20000378
 800244c:	200002c8 	.word	0x200002c8
 8002450:	20000238 	.word	0x20000238
 8002454:	200002d0 	.word	0x200002d0
 8002458:	200002d6 	.word	0x200002d6

0800245c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	@ 0x28
 8002460:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002462:	f3ef 8310 	mrs	r3, PRIMASK
 8002466:	617b      	str	r3, [r7, #20]
  return(result);
 8002468:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800246a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800246c:	b672      	cpsid	i
}
 800246e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002470:	4b59      	ldr	r3, [pc, #356]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	22ca      	movs	r2, #202	@ 0xca
 8002476:	625a      	str	r2, [r3, #36]	@ 0x24
 8002478:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2253      	movs	r2, #83	@ 0x53
 800247e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002480:	4b55      	ldr	r3, [pc, #340]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800248e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002490:	4b52      	ldr	r3, [pc, #328]	@ (80025dc <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002498:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800249c:	4950      	ldr	r1, [pc, #320]	@ (80025e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800249e:	4613      	mov	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	4413      	add	r3, r2
 80024a4:	00db      	lsls	r3, r3, #3
 80024a6:	440b      	add	r3, r1
 80024a8:	330c      	adds	r3, #12
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d16e      	bne.n	8002590 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80024b2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80024b6:	494a      	ldr	r1, [pc, #296]	@ (80025e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80024b8:	4613      	mov	r3, r2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	4413      	add	r3, r2
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	440b      	add	r3, r1
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80024c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80024ca:	4945      	ldr	r1, [pc, #276]	@ (80025e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	440b      	add	r3, r1
 80024d6:	3310      	adds	r3, #16
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80024dc:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d04c      	beq.n	8002580 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80024e6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80024ea:	493d      	ldr	r1, [pc, #244]	@ (80025e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	440b      	add	r3, r1
 80024f6:	330d      	adds	r3, #13
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d124      	bne.n	800254a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002504:	2101      	movs	r1, #1
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fdf2 	bl	80020f0 <UnlinkTimer>
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	f383 8810 	msr	PRIMASK, r3
}
 8002516:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002518:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800251c:	4930      	ldr	r1, [pc, #192]	@ (80025e0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	440b      	add	r3, r1
 8002528:	3304      	adds	r3, #4
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f9b8 	bl	80028a8 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	22ca      	movs	r2, #202	@ 0xca
 800253e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002540:	4b25      	ldr	r3, [pc, #148]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2253      	movs	r2, #83	@ 0x53
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
 8002548:	e012      	b.n	8002570 <HW_TS_RTC_Wakeup_Handler+0x114>
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f383 8810 	msr	PRIMASK, r3
}
 8002554:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002556:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800255a:	4618      	mov	r0, r3
 800255c:	f000 f920 	bl	80027a0 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	22ca      	movs	r2, #202	@ 0xca
 8002566:	625a      	str	r2, [r3, #36]	@ 0x24
 8002568:	4b1b      	ldr	r3, [pc, #108]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2253      	movs	r2, #83	@ 0x53
 800256e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002570:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	4619      	mov	r1, r3
 8002578:	69b8      	ldr	r0, [r7, #24]
 800257a:	f000 fa1b 	bl	80029b4 <HW_TS_RTC_Int_AppNot>
 800257e:	e022      	b.n	80025c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002580:	f7ff fed2 	bl	8002328 <RescheduleTimerList>
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	f383 8810 	msr	PRIMASK, r3
}
 800258e:	e01a      	b.n	80025c6 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002590:	bf00      	nop
 8002592:	4b11      	ldr	r3, [pc, #68]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0f8      	beq.n	8002592 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025a0:	4b0d      	ldr	r3, [pc, #52]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	4b0b      	ldr	r3, [pc, #44]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025b0:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80025b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025b8:	60da      	str	r2, [r3, #12]
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f383 8810 	msr	PRIMASK, r3
}
 80025c4:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025c6:	4b04      	ldr	r3, [pc, #16]	@ (80025d8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	22ff      	movs	r2, #255	@ 0xff
 80025cc:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80025ce:	bf00      	nop
}
 80025d0:	3728      	adds	r7, #40	@ 0x28
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	20000378 	.word	0x20000378
 80025dc:	200002c8 	.word	0x200002c8
 80025e0:	20000238 	.word	0x20000238
 80025e4:	200002d0 	.word	0x200002d0
 80025e8:	58000800 	.word	0x58000800

080025ec <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b088      	sub	sp, #32
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80025f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002774 <HW_TS_Init+0x188>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	22ca      	movs	r2, #202	@ 0xca
 80025fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002600:	4b5c      	ldr	r3, [pc, #368]	@ (8002774 <HW_TS_Init+0x188>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2253      	movs	r2, #83	@ 0x53
 8002606:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002608:	4b5b      	ldr	r3, [pc, #364]	@ (8002778 <HW_TS_Init+0x18c>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	4a5a      	ldr	r2, [pc, #360]	@ (8002778 <HW_TS_Init+0x18c>)
 800260e:	f043 0320 	orr.w	r3, r3, #32
 8002612:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002614:	4b58      	ldr	r3, [pc, #352]	@ (8002778 <HW_TS_Init+0x18c>)
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f1c3 0304 	rsb	r3, r3, #4
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4b55      	ldr	r3, [pc, #340]	@ (800277c <HW_TS_Init+0x190>)
 8002628:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800262a:	4b53      	ldr	r3, [pc, #332]	@ (8002778 <HW_TS_Init+0x18c>)
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002632:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002636:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	fa92 f2a2 	rbit	r2, r2
 800263e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002644:	697a      	ldr	r2, [r7, #20]
 8002646:	2a00      	cmp	r2, #0
 8002648:	d101      	bne.n	800264e <HW_TS_Init+0x62>
  {
    return 32U;
 800264a:	2220      	movs	r2, #32
 800264c:	e003      	b.n	8002656 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	fab2 f282 	clz	r2, r2
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	40d3      	lsrs	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	3301      	adds	r3, #1
 800265c:	b2da      	uxtb	r2, r3
 800265e:	4b48      	ldr	r3, [pc, #288]	@ (8002780 <HW_TS_Init+0x194>)
 8002660:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002662:	4b45      	ldr	r3, [pc, #276]	@ (8002778 <HW_TS_Init+0x18c>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	b29b      	uxth	r3, r3
 8002668:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800266c:	b29b      	uxth	r3, r3
 800266e:	3301      	adds	r3, #1
 8002670:	b29a      	uxth	r2, r3
 8002672:	4b44      	ldr	r3, [pc, #272]	@ (8002784 <HW_TS_Init+0x198>)
 8002674:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002676:	4b43      	ldr	r3, [pc, #268]	@ (8002784 <HW_TS_Init+0x198>)
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	4a40      	ldr	r2, [pc, #256]	@ (8002780 <HW_TS_Init+0x194>)
 800267e:	7812      	ldrb	r2, [r2, #0]
 8002680:	fb02 f303 	mul.w	r3, r2, r3
 8002684:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002688:	4a3c      	ldr	r2, [pc, #240]	@ (800277c <HW_TS_Init+0x190>)
 800268a:	7812      	ldrb	r2, [r2, #0]
 800268c:	40d3      	lsrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002696:	4293      	cmp	r3, r2
 8002698:	d904      	bls.n	80026a4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800269a:	4b3b      	ldr	r3, [pc, #236]	@ (8002788 <HW_TS_Init+0x19c>)
 800269c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e003      	b.n	80026ac <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b37      	ldr	r3, [pc, #220]	@ (8002788 <HW_TS_Init+0x19c>)
 80026aa:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80026ac:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80026b0:	f7ff fb9c 	bl	8001dec <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80026b4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80026b8:	f7ff fb84 	bl	8001dc4 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d13d      	bne.n	800273e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80026c2:	4b32      	ldr	r3, [pc, #200]	@ (800278c <HW_TS_Init+0x1a0>)
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80026c8:	4b31      	ldr	r3, [pc, #196]	@ (8002790 <HW_TS_Init+0x1a4>)
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	e00c      	b.n	80026f0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80026d6:	7ffa      	ldrb	r2, [r7, #31]
 80026d8:	492e      	ldr	r1, [pc, #184]	@ (8002794 <HW_TS_Init+0x1a8>)
 80026da:	4613      	mov	r3, r2
 80026dc:	005b      	lsls	r3, r3, #1
 80026de:	4413      	add	r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	440b      	add	r3, r1
 80026e4:	330c      	adds	r3, #12
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80026ea:	7ffb      	ldrb	r3, [r7, #31]
 80026ec:	3301      	adds	r3, #1
 80026ee:	77fb      	strb	r3, [r7, #31]
 80026f0:	7ffb      	ldrb	r3, [r7, #31]
 80026f2:	2b05      	cmp	r3, #5
 80026f4:	d9ef      	bls.n	80026d6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80026f6:	4b28      	ldr	r3, [pc, #160]	@ (8002798 <HW_TS_Init+0x1ac>)
 80026f8:	2206      	movs	r2, #6
 80026fa:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80026fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002774 <HW_TS_Init+0x188>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <HW_TS_Init+0x188>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800270a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 800270c:	4b19      	ldr	r3, [pc, #100]	@ (8002774 <HW_TS_Init+0x188>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	4b17      	ldr	r3, [pc, #92]	@ (8002774 <HW_TS_Init+0x188>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800271c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800271e:	4b1f      	ldr	r3, [pc, #124]	@ (800279c <HW_TS_Init+0x1b0>)
 8002720:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002724:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8002726:	2003      	movs	r0, #3
 8002728:	f007 fb4f 	bl	8009dca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HW_TS_Init+0x188>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	4b10      	ldr	r3, [pc, #64]	@ (8002774 <HW_TS_Init+0x188>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	e009      	b.n	8002752 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800273e:	4b0d      	ldr	r3, [pc, #52]	@ (8002774 <HW_TS_Init+0x188>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800274c:	2003      	movs	r0, #3
 800274e:	f007 fb2e 	bl	8009dae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002752:	4b08      	ldr	r3, [pc, #32]	@ (8002774 <HW_TS_Init+0x188>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	22ff      	movs	r2, #255	@ 0xff
 8002758:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800275a:	2200      	movs	r2, #0
 800275c:	2103      	movs	r1, #3
 800275e:	2003      	movs	r0, #3
 8002760:	f007 fae3 	bl	8009d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002764:	2003      	movs	r0, #3
 8002766:	f007 fafa 	bl	8009d5e <HAL_NVIC_EnableIRQ>

  return;
 800276a:	bf00      	nop
}
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000378 	.word	0x20000378
 8002778:	40002800 	.word	0x40002800
 800277c:	200002d1 	.word	0x200002d1
 8002780:	200002d2 	.word	0x200002d2
 8002784:	200002d4 	.word	0x200002d4
 8002788:	200002d6 	.word	0x200002d6
 800278c:	200002d0 	.word	0x200002d0
 8002790:	200002cc 	.word	0x200002cc
 8002794:	20000238 	.word	0x20000238
 8002798:	200002c8 	.word	0x200002c8
 800279c:	58000800 	.word	0x58000800

080027a0 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027aa:	f3ef 8310 	mrs	r3, PRIMASK
 80027ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80027b0:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80027b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027b4:	b672      	cpsid	i
}
 80027b6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027b8:	2003      	movs	r0, #3
 80027ba:	f007 fade 	bl	8009d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027be:	4b34      	ldr	r3, [pc, #208]	@ (8002890 <HW_TS_Stop+0xf0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	22ca      	movs	r2, #202	@ 0xca
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c6:	4b32      	ldr	r3, [pc, #200]	@ (8002890 <HW_TS_Stop+0xf0>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2253      	movs	r2, #83	@ 0x53
 80027cc:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	4930      	ldr	r1, [pc, #192]	@ (8002894 <HW_TS_Stop+0xf4>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	00db      	lsls	r3, r3, #3
 80027da:	440b      	add	r3, r1
 80027dc:	330c      	adds	r3, #12
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d142      	bne.n	800286c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fc80 	bl	80020f0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80027f0:	4b29      	ldr	r3, [pc, #164]	@ (8002898 <HW_TS_Stop+0xf8>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80027f6:	7cfb      	ldrb	r3, [r7, #19]
 80027f8:	2b06      	cmp	r3, #6
 80027fa:	d12f      	bne.n	800285c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HW_TS_Stop+0xfc>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002808:	d107      	bne.n	800281a <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800280a:	bf00      	nop
 800280c:	4b20      	ldr	r3, [pc, #128]	@ (8002890 <HW_TS_Stop+0xf0>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0304 	and.w	r3, r3, #4
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1f8      	bne.n	800280c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800281a:	4b1d      	ldr	r3, [pc, #116]	@ (8002890 <HW_TS_Stop+0xf0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	4b1b      	ldr	r3, [pc, #108]	@ (8002890 <HW_TS_Stop+0xf0>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002828:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800282a:	bf00      	nop
 800282c:	4b18      	ldr	r3, [pc, #96]	@ (8002890 <HW_TS_Stop+0xf0>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0304 	and.w	r3, r3, #4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f8      	beq.n	800282c <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800283a:	4b15      	ldr	r3, [pc, #84]	@ (8002890 <HW_TS_Stop+0xf0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <HW_TS_Stop+0xf0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800284a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800284c:	4b14      	ldr	r3, [pc, #80]	@ (80028a0 <HW_TS_Stop+0x100>)
 800284e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002852:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002854:	2003      	movs	r0, #3
 8002856:	f007 fab8 	bl	8009dca <HAL_NVIC_ClearPendingIRQ>
 800285a:	e007      	b.n	800286c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800285c:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <HW_TS_Stop+0x104>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	7cfa      	ldrb	r2, [r7, #19]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002868:	f7ff fd5e 	bl	8002328 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800286c:	4b08      	ldr	r3, [pc, #32]	@ (8002890 <HW_TS_Stop+0xf0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	22ff      	movs	r2, #255	@ 0xff
 8002872:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002874:	2003      	movs	r0, #3
 8002876:	f007 fa72 	bl	8009d5e <HAL_NVIC_EnableIRQ>
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	f383 8810 	msr	PRIMASK, r3
}
 8002884:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002886:	bf00      	nop
}
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20000378 	.word	0x20000378
 8002894:	20000238 	.word	0x20000238
 8002898:	200002c8 	.word	0x200002c8
 800289c:	40002800 	.word	0x40002800
 80028a0:	58000800 	.word	0x58000800
 80028a4:	200002c9 	.word	0x200002c9

080028a8 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	6039      	str	r1, [r7, #0]
 80028b2:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80028b4:	79fa      	ldrb	r2, [r7, #7]
 80028b6:	493b      	ldr	r1, [pc, #236]	@ (80029a4 <HW_TS_Start+0xfc>)
 80028b8:	4613      	mov	r3, r2
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	4413      	add	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	440b      	add	r3, r1
 80028c2:	330c      	adds	r3, #12
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d103      	bne.n	80028d4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80028cc:	79fb      	ldrb	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff66 	bl	80027a0 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028d4:	f3ef 8310 	mrs	r3, PRIMASK
 80028d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80028da:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80028dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80028de:	b672      	cpsid	i
}
 80028e0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80028e2:	2003      	movs	r0, #3
 80028e4:	f007 fa49 	bl	8009d7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80028e8:	4b2f      	ldr	r3, [pc, #188]	@ (80029a8 <HW_TS_Start+0x100>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	22ca      	movs	r2, #202	@ 0xca
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80028f0:	4b2d      	ldr	r3, [pc, #180]	@ (80029a8 <HW_TS_Start+0x100>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2253      	movs	r2, #83	@ 0x53
 80028f6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80028f8:	79fa      	ldrb	r2, [r7, #7]
 80028fa:	492a      	ldr	r1, [pc, #168]	@ (80029a4 <HW_TS_Start+0xfc>)
 80028fc:	4613      	mov	r3, r2
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4413      	add	r3, r2
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	440b      	add	r3, r1
 8002906:	330c      	adds	r3, #12
 8002908:	2202      	movs	r2, #2
 800290a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800290c:	79fa      	ldrb	r2, [r7, #7]
 800290e:	4925      	ldr	r1, [pc, #148]	@ (80029a4 <HW_TS_Start+0xfc>)
 8002910:	4613      	mov	r3, r2
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4413      	add	r3, r2
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	440b      	add	r3, r1
 800291a:	3308      	adds	r3, #8
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002920:	79fa      	ldrb	r2, [r7, #7]
 8002922:	4920      	ldr	r1, [pc, #128]	@ (80029a4 <HW_TS_Start+0xfc>)
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	440b      	add	r3, r1
 800292e:	3304      	adds	r3, #4
 8002930:	683a      	ldr	r2, [r7, #0]
 8002932:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	4618      	mov	r0, r3
 8002938:	f7ff fb30 	bl	8001f9c <linkTimer>
 800293c:	4603      	mov	r3, r0
 800293e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002940:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HW_TS_Start+0x104>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002946:	4b1a      	ldr	r3, [pc, #104]	@ (80029b0 <HW_TS_Start+0x108>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	7c7a      	ldrb	r2, [r7, #17]
 800294e:	429a      	cmp	r2, r3
 8002950:	d002      	beq.n	8002958 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002952:	f7ff fce9 	bl	8002328 <RescheduleTimerList>
 8002956:	e013      	b.n	8002980 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002958:	79fa      	ldrb	r2, [r7, #7]
 800295a:	4912      	ldr	r1, [pc, #72]	@ (80029a4 <HW_TS_Start+0xfc>)
 800295c:	4613      	mov	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3308      	adds	r3, #8
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	8a7b      	ldrh	r3, [r7, #18]
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	1ac9      	subs	r1, r1, r3
 8002970:	480c      	ldr	r0, [pc, #48]	@ (80029a4 <HW_TS_Start+0xfc>)
 8002972:	4613      	mov	r3, r2
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4403      	add	r3, r0
 800297c:	3308      	adds	r3, #8
 800297e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002980:	4b09      	ldr	r3, [pc, #36]	@ (80029a8 <HW_TS_Start+0x100>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	22ff      	movs	r2, #255	@ 0xff
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002988:	2003      	movs	r0, #3
 800298a:	f007 f9e8 	bl	8009d5e <HAL_NVIC_EnableIRQ>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800299a:	bf00      	nop
}
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000238 	.word	0x20000238
 80029a8:	20000378 	.word	0x20000378
 80029ac:	200002c8 	.word	0x200002c8
 80029b0:	200002c9 	.word	0x200002c9

080029b4 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	460b      	mov	r3, r1
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4798      	blx	r3

  return;
 80029c6:	bf00      	nop
}
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80029d2:	2102      	movs	r1, #2
 80029d4:	2000      	movs	r0, #0
 80029d6:	f005 fa21 	bl	8007e1c <IKS01A3_MOTION_SENSOR_Init>
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}

080029de <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80029e2:	2101      	movs	r1, #1
 80029e4:	2000      	movs	r0, #0
 80029e6:	f005 fa19 	bl	8007e1c <IKS01A3_MOTION_SENSOR_Init>
}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}

080029ee <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	2102      	movs	r1, #2
 80029fa:	2000      	movs	r0, #0
 80029fc:	f005 fb0a 	bl	8008014 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8002a00:	bf00      	nop
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	2101      	movs	r1, #1
 8002a14:	2000      	movs	r0, #0
 8002a16:	f005 fafd 	bl	8008014 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8002a1a:	bf00      	nop
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b082      	sub	sp, #8
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 8002a2c:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a30:	2102      	movs	r1, #2
 8002a32:	2000      	movs	r0, #0
 8002a34:	f005 fb32 	bl	800809c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	2102      	movs	r1, #2
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f005 fb6b 	bl	8008128 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <LL_RCC_LSE_SetDriveCapability>:
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6a:	f023 0218 	bic.w	r2, r3, #24
 8002a6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <LL_AHB1_GRP1_EnableClock>:
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002a8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a92:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002a94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002a9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aa2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_AHB2_GRP1_EnableClock>:
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002ac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ac4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ac6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ad0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ad4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002adc:	68fb      	ldr	r3, [r7, #12]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002af2:	f005 fd6d 	bl	80085d0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002af6:	f7fe fe31 	bl	800175c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002afa:	f000 f825 	bl	8002b48 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002afe:	f000 f89b 	bl	8002c38 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002b02:	f000 f933 	bl	8002d6c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b06:	f000 fa09 	bl	8002f1c <MX_GPIO_Init>
  MX_DMA_Init();
 8002b0a:	f000 f9f5 	bl	8002ef8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002b0e:	f000 f97d 	bl	8002e0c <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002b12:	f000 f9c9 	bl	8002ea8 <MX_USB_PCD_Init>
  MX_RTC_Init();
 8002b16:	f000 f945 	bl	8002da4 <MX_RTC_Init>
  MX_ADC1_Init();
 8002b1a:	f000 f8c1 	bl	8002ca0 <MX_ADC1_Init>
  MX_RF_Init();
 8002b1e:	f000 f939 	bl	8002d94 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8002b22:	f7fe f8d7 	bl	8000cd4 <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002b26:	f7fe fe27 	bl	8001778 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002b2a:	f7ff f90c 	bl	8001d46 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t valeur_start = global_payload_pointer[0];
 8002b2e:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <main+0x58>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	71fb      	strb	r3, [r7, #7]

    if(valeur_start==0x01){
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d1f6      	bne.n	8002b2a <main+0x3e>

    MX_MEMS_Process();
 8002b3c:	f7fe f8e8 	bl	8000d10 <MX_MEMS_Process>
  {
 8002b40:	e7f3      	b.n	8002b2a <main+0x3e>
 8002b42:	bf00      	nop
 8002b44:	20000bc0 	.word	0x20000bc0

08002b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b09a      	sub	sp, #104	@ 0x68
 8002b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b4e:	f107 0320 	add.w	r3, r7, #32
 8002b52:	2248      	movs	r2, #72	@ 0x48
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f010 f99a 	bl	8012e90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	615a      	str	r2, [r3, #20]
 8002b6c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002b6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b7c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f023 0303 	bic.w	r3, r3, #3
 8002b88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002b92:	f008 fd6d 	bl	800b670 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7ff ff5f 	bl	8002a5a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b9c:	4b25      	ldr	r3, [pc, #148]	@ (8002c34 <SystemClock_Config+0xec>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ba4:	4a23      	ldr	r2, [pc, #140]	@ (8002c34 <SystemClock_Config+0xec>)
 8002ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	4b21      	ldr	r3, [pc, #132]	@ (8002c34 <SystemClock_Config+0xec>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bb4:	603b      	str	r3, [r7, #0]
 8002bb6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002bb8:	232f      	movs	r3, #47	@ 0x2f
 8002bba:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bd0:	2340      	movs	r3, #64	@ 0x40
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002bd8:	2360      	movs	r3, #96	@ 0x60
 8002bda:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bdc:	2305      	movs	r3, #5
 8002bde:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002be0:	2300      	movs	r3, #0
 8002be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be4:	f107 0320 	add.w	r3, r7, #32
 8002be8:	4618      	mov	r0, r3
 8002bea:	f009 f8d5 	bl	800bd98 <HAL_RCC_OscConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002bf4:	f000 f9da 	bl	8002fac <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002bf8:	236f      	movs	r3, #111	@ 0x6f
 8002bfa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c00:	2300      	movs	r3, #0
 8002c02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
 8002c12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002c14:	1d3b      	adds	r3, r7, #4
 8002c16:	2101      	movs	r1, #1
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f009 fc31 	bl	800c480 <HAL_RCC_ClockConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d001      	beq.n	8002c28 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002c24:	f000 f9c2 	bl	8002fac <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002c28:	f00a f9ec 	bl	800d004 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002c2c:	bf00      	nop
 8002c2e:	3768      	adds	r7, #104	@ 0x68
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	58000400 	.word	0x58000400

08002c38 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b094      	sub	sp, #80	@ 0x50
 8002c3c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c3e:	463b      	mov	r3, r7
 8002c40:	2250      	movs	r2, #80	@ 0x50
 8002c42:	2100      	movs	r1, #0
 8002c44:	4618      	mov	r0, r3
 8002c46:	f010 f923 	bl	8012e90 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002c4a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002c4e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002c50:	2318      	movs	r3, #24
 8002c52:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002c5a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c5e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002c60:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002c64:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002c66:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002c6a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c6c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c70:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002c72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002c78:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002c82:	2300      	movs	r3, #0
 8002c84:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c86:	463b      	mov	r3, r7
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f00a f845 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002c94:	f000 f98a 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002c98:	bf00      	nop
 8002c9a:	3750      	adds	r7, #80	@ 0x50
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002ca6:	463b      	mov	r3, r7
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	605a      	str	r2, [r3, #4]
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	60da      	str	r2, [r3, #12]
 8002cb2:	611a      	str	r2, [r3, #16]
 8002cb4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cb8:	4a29      	ldr	r2, [pc, #164]	@ (8002d60 <MX_ADC1_Init+0xc0>)
 8002cba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002cbc:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cc8:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002cce:	4b23      	ldr	r3, [pc, #140]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cd4:	4b21      	ldr	r3, [pc, #132]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002cda:	4b20      	ldr	r3, [pc, #128]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002cf4:	4b19      	ldr	r3, [pc, #100]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002cfa:	4b18      	ldr	r3, [pc, #96]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d00:	4b16      	ldr	r3, [pc, #88]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d08:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002d16:	4811      	ldr	r0, [pc, #68]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002d18:	f005 ff02 	bl	8008b20 <HAL_ADC_Init>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002d22:	f000 f943 	bl	8002fac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002d26:	4b0f      	ldr	r3, [pc, #60]	@ (8002d64 <MX_ADC1_Init+0xc4>)
 8002d28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002d2a:	2306      	movs	r3, #6
 8002d2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002d32:	4b0d      	ldr	r3, [pc, #52]	@ (8002d68 <MX_ADC1_Init+0xc8>)
 8002d34:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002d36:	2304      	movs	r3, #4
 8002d38:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d3e:	463b      	mov	r3, r7
 8002d40:	4619      	mov	r1, r3
 8002d42:	4806      	ldr	r0, [pc, #24]	@ (8002d5c <MX_ADC1_Init+0xbc>)
 8002d44:	f006 f95a 	bl	8008ffc <HAL_ADC_ConfigChannel>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002d4e:	f000 f92d 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	200002d8 	.word	0x200002d8
 8002d60:	50040000 	.word	0x50040000
 8002d64:	14f00020 	.word	0x14f00020
 8002d68:	407f0000 	.word	0x407f0000

08002d6c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d70:	4b06      	ldr	r3, [pc, #24]	@ (8002d8c <MX_IPCC_Init+0x20>)
 8002d72:	4a07      	ldr	r2, [pc, #28]	@ (8002d90 <MX_IPCC_Init+0x24>)
 8002d74:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d76:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <MX_IPCC_Init+0x20>)
 8002d78:	f008 fafc 	bl	800b374 <HAL_IPCC_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d82:	f000 f913 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000033c 	.word	0x2000033c
 8002d90:	58000c00 	.word	0x58000c00

08002d94 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr
	...

08002da4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002da8:	4b16      	ldr	r3, [pc, #88]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002daa:	4a17      	ldr	r2, [pc, #92]	@ (8002e08 <MX_RTC_Init+0x64>)
 8002dac:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002dae:	4b15      	ldr	r3, [pc, #84]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002db4:	4b13      	ldr	r3, [pc, #76]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002db6:	220f      	movs	r2, #15
 8002db8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002dba:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002dbc:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002dc0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002dc2:	4b10      	ldr	r3, [pc, #64]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002dce:	4b0d      	ldr	r3, [pc, #52]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002dda:	480a      	ldr	r0, [pc, #40]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002ddc:	f00a fa2a 	bl	800d234 <HAL_RTC_Init>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002de6:	f000 f8e1 	bl	8002fac <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002dea:	2200      	movs	r2, #0
 8002dec:	2100      	movs	r1, #0
 8002dee:	4805      	ldr	r0, [pc, #20]	@ (8002e04 <MX_RTC_Init+0x60>)
 8002df0:	f00a fb20 	bl	800d434 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002dfa:	f000 f8d7 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000378 	.word	0x20000378
 8002e08:	40002800 	.word	0x40002800

08002e0c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002e10:	4b23      	ldr	r3, [pc, #140]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e12:	4a24      	ldr	r2, [pc, #144]	@ (8002ea4 <MX_USART1_UART_Init+0x98>)
 8002e14:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002e16:	4b22      	ldr	r3, [pc, #136]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e1c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002e24:	4b1e      	ldr	r3, [pc, #120]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002e30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e32:	220c      	movs	r2, #12
 8002e34:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e36:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002e3c:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002e42:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e44:	4b16      	ldr	r3, [pc, #88]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e50:	4b13      	ldr	r3, [pc, #76]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e56:	4812      	ldr	r0, [pc, #72]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e58:	f00a fbc8 	bl	800d5ec <HAL_UART_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002e62:	f000 f8a3 	bl	8002fac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e66:	2100      	movs	r1, #0
 8002e68:	480d      	ldr	r0, [pc, #52]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e6a:	f00b f88f 	bl	800df8c <HAL_UARTEx_SetTxFifoThreshold>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002e74:	f000 f89a 	bl	8002fac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4809      	ldr	r0, [pc, #36]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e7c:	f00b f8c4 	bl	800e008 <HAL_UARTEx_SetRxFifoThreshold>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d001      	beq.n	8002e8a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002e86:	f000 f891 	bl	8002fac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <MX_USART1_UART_Init+0x94>)
 8002e8c:	f00b f845 	bl	800df1a <HAL_UARTEx_DisableFifoMode>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002e96:	f000 f889 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000039c 	.word	0x2000039c
 8002ea4:	40013800 	.word	0x40013800

08002ea8 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002eac:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002eae:	4a11      	ldr	r2, [pc, #68]	@ (8002ef4 <MX_USB_PCD_Init+0x4c>)
 8002eb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002eb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002eba:	2202      	movs	r2, #2
 8002ebc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002eca:	4b09      	ldr	r3, [pc, #36]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ed0:	4b07      	ldr	r3, [pc, #28]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ed6:	4b06      	ldr	r3, [pc, #24]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002edc:	4804      	ldr	r0, [pc, #16]	@ (8002ef0 <MX_USB_PCD_Init+0x48>)
 8002ede:	f008 facf 	bl	800b480 <HAL_PCD_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ee8:	f000 f860 	bl	8002fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000490 	.word	0x20000490
 8002ef4:	40006800 	.word	0x40006800

08002ef8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002efc:	2004      	movs	r0, #4
 8002efe:	f7ff fdc2 	bl	8002a86 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002f02:	2002      	movs	r0, #2
 8002f04:	f7ff fdbf 	bl	8002a86 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	203a      	movs	r0, #58	@ 0x3a
 8002f0e:	f006 ff0c 	bl	8009d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002f12:	203a      	movs	r0, #58	@ 0x3a
 8002f14:	f006 ff23 	bl	8009d5e <HAL_NVIC_EnableIRQ>

}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f22:	1d3b      	adds	r3, r7, #4
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	609a      	str	r2, [r3, #8]
 8002f2c:	60da      	str	r2, [r3, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f30:	2004      	movs	r0, #4
 8002f32:	f7ff fdc1 	bl	8002ab8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	2002      	movs	r0, #2
 8002f38:	f7ff fdbe 	bl	8002ab8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	2001      	movs	r0, #1
 8002f3e:	f7ff fdbb 	bl	8002ab8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	2008      	movs	r0, #8
 8002f44:	f7ff fdb8 	bl	8002ab8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002f48:	2200      	movs	r2, #0
 8002f4a:	2123      	movs	r1, #35	@ 0x23
 8002f4c:	4814      	ldr	r0, [pc, #80]	@ (8002fa0 <MX_GPIO_Init+0x84>)
 8002f4e:	f007 fb55 	bl	800a5fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f52:	2310      	movs	r3, #16
 8002f54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	4619      	mov	r1, r3
 8002f62:	4810      	ldr	r0, [pc, #64]	@ (8002fa4 <MX_GPIO_Init+0x88>)
 8002f64:	f007 f8fc 	bl	800a160 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002f68:	2323      	movs	r3, #35	@ 0x23
 8002f6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f78:	1d3b      	adds	r3, r7, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4808      	ldr	r0, [pc, #32]	@ (8002fa0 <MX_GPIO_Init+0x84>)
 8002f7e:	f007 f8ef 	bl	800a160 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002f82:	2303      	movs	r3, #3
 8002f84:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f86:	2300      	movs	r3, #0
 8002f88:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	4619      	mov	r1, r3
 8002f92:	4805      	ldr	r0, [pc, #20]	@ (8002fa8 <MX_GPIO_Init+0x8c>)
 8002f94:	f007 f8e4 	bl	800a160 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002f98:	bf00      	nop
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	48000400 	.word	0x48000400
 8002fa4:	48000800 	.word	0x48000800
 8002fa8:	48000c00 	.word	0x48000c00

08002fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb0:	b672      	cpsid	i
}
 8002fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fb4:	bf00      	nop
 8002fb6:	e7fd      	b.n	8002fb4 <Error_Handler+0x8>

08002fb8 <LL_RCC_EnableRTC>:
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fc4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002fd0:	bf00      	nop
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <LL_AHB2_GRP1_EnableClock>:
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002fe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002fe6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002fe8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ff2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ff6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr

0800300c <LL_AHB3_GRP1_EnableClock>:
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003014:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003018:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800301a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4313      	orrs	r3, r2
 8003022:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003024:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003028:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4013      	ands	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003046:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800304a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800304c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4313      	orrs	r3, r2
 8003054:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800305a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4013      	ands	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8003078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800307c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800307e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4313      	orrs	r3, r2
 8003086:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003088:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800308c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003094:	68fb      	ldr	r3, [r7, #12]
}
 8003096:	bf00      	nop
 8003098:	3714      	adds	r7, #20
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80030a6:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80030aa:	f7ff ffaf 	bl	800300c <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80030ae:	2200      	movs	r2, #0
 80030b0:	2100      	movs	r1, #0
 80030b2:	202e      	movs	r0, #46	@ 0x2e
 80030b4:	f006 fe39 	bl	8009d2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80030b8:	202e      	movs	r0, #46	@ 0x2e
 80030ba:	f006 fe50 	bl	8009d5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
	...

080030c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b088      	sub	sp, #32
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	2200      	movs	r2, #0
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	605a      	str	r2, [r3, #4]
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	60da      	str	r2, [r3, #12]
 80030da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	@ (8003118 <HAL_ADC_MspInit+0x54>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80030e6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80030ea:	f7ff ff76 	bl	8002fda <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7ff ff73 	bl	8002fda <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80030f4:	2303      	movs	r3, #3
 80030f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030f8:	2303      	movs	r3, #3
 80030fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fc:	2300      	movs	r3, #0
 80030fe:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003100:	f107 030c 	add.w	r3, r7, #12
 8003104:	4619      	mov	r1, r3
 8003106:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800310a:	f007 f829 	bl	800a160 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800310e:	bf00      	nop
 8003110:	3720      	adds	r7, #32
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	50040000 	.word	0x50040000

0800311c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0d      	ldr	r2, [pc, #52]	@ (8003160 <HAL_IPCC_MspInit+0x44>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d113      	bne.n	8003156 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800312e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003132:	f7ff ff6b 	bl	800300c <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	202c      	movs	r0, #44	@ 0x2c
 800313c:	f006 fdf5 	bl	8009d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003140:	202c      	movs	r0, #44	@ 0x2c
 8003142:	f006 fe0c 	bl	8009d5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003146:	2200      	movs	r2, #0
 8003148:	2100      	movs	r1, #0
 800314a:	202d      	movs	r0, #45	@ 0x2d
 800314c:	f006 fded 	bl	8009d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003150:	202d      	movs	r0, #45	@ 0x2d
 8003152:	f006 fe04 	bl	8009d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003156:	bf00      	nop
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	58000c00 	.word	0x58000c00

08003164 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b096      	sub	sp, #88	@ 0x58
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800316c:	f107 0308 	add.w	r3, r7, #8
 8003170:	2250      	movs	r2, #80	@ 0x50
 8003172:	2100      	movs	r1, #0
 8003174:	4618      	mov	r0, r3
 8003176:	f00f fe8b 	bl	8012e90 <memset>
  if(hrtc->Instance==RTC)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a13      	ldr	r2, [pc, #76]	@ (80031cc <HAL_RTC_MspInit+0x68>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d11f      	bne.n	80031c4 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8003184:	f008 fa74 	bl	800b670 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003188:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800318c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800318e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003192:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	4618      	mov	r0, r3
 800319a:	f009 fdbd 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 800319e:	4603      	mov	r3, r0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d001      	beq.n	80031a8 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80031a4:	f7ff ff02 	bl	8002fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031a8:	f7ff ff06 	bl	8002fb8 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80031ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80031b0:	f7ff ff45 	bl	800303e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2100      	movs	r1, #0
 80031b8:	2003      	movs	r0, #3
 80031ba:	f006 fdb6 	bl	8009d2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80031be:	2003      	movs	r0, #3
 80031c0:	f006 fdcd 	bl	8009d5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031c4:	bf00      	nop
 80031c6:	3758      	adds	r7, #88	@ 0x58
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40002800 	.word	0x40002800

080031d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b09c      	sub	sp, #112	@ 0x70
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2250      	movs	r2, #80	@ 0x50
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f00f fe4d 	bl	8012e90 <memset>
  if(huart->Instance==USART1)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2a      	ldr	r2, [pc, #168]	@ (80032a4 <HAL_UART_MspInit+0xd4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d14d      	bne.n	800329c <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003200:	2301      	movs	r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003204:	2300      	movs	r3, #0
 8003206:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003208:	f107 030c 	add.w	r3, r7, #12
 800320c:	4618      	mov	r0, r3
 800320e:	f009 fd83 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	d001      	beq.n	800321c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003218:	f7ff fec8 	bl	8002fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800321c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003220:	f7ff ff26 	bl	8003070 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003224:	2002      	movs	r0, #2
 8003226:	f7ff fed8 	bl	8002fda <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800322a:	23c0      	movs	r3, #192	@ 0xc0
 800322c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003232:	2301      	movs	r3, #1
 8003234:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003236:	2300      	movs	r3, #0
 8003238:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800323a:	2307      	movs	r3, #7
 800323c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800323e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003242:	4619      	mov	r1, r3
 8003244:	4818      	ldr	r0, [pc, #96]	@ (80032a8 <HAL_UART_MspInit+0xd8>)
 8003246:	f006 ff8b 	bl	800a160 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800324a:	4b18      	ldr	r3, [pc, #96]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 800324c:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <HAL_UART_MspInit+0xe0>)
 800324e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003250:	4b16      	ldr	r3, [pc, #88]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003252:	220f      	movs	r2, #15
 8003254:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003256:	4b15      	ldr	r3, [pc, #84]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003258:	2210      	movs	r2, #16
 800325a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800325c:	4b13      	ldr	r3, [pc, #76]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 800325e:	2200      	movs	r2, #0
 8003260:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003262:	4b12      	ldr	r3, [pc, #72]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003264:	2280      	movs	r2, #128	@ 0x80
 8003266:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 800326a:	2200      	movs	r2, #0
 800326c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800326e:	4b0f      	ldr	r3, [pc, #60]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003270:	2200      	movs	r2, #0
 8003272:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003274:	4b0d      	ldr	r3, [pc, #52]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003276:	2200      	movs	r2, #0
 8003278:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800327a:	4b0c      	ldr	r3, [pc, #48]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 800327c:	2200      	movs	r2, #0
 800327e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003280:	480a      	ldr	r0, [pc, #40]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003282:	f006 fdb1 	bl	8009de8 <HAL_DMA_Init>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800328c:	f7ff fe8e 	bl	8002fac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a06      	ldr	r2, [pc, #24]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003294:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003296:	4a05      	ldr	r2, [pc, #20]	@ (80032ac <HAL_UART_MspInit+0xdc>)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800329c:	bf00      	nop
 800329e:	3770      	adds	r7, #112	@ 0x70
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40013800 	.word	0x40013800
 80032a8:	48000400 	.word	0x48000400
 80032ac:	20000430 	.word	0x20000430
 80032b0:	40020444 	.word	0x40020444

080032b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b088      	sub	sp, #32
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032bc:	f107 030c 	add.w	r3, r7, #12
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
 80032c4:	605a      	str	r2, [r3, #4]
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	60da      	str	r2, [r3, #12]
 80032ca:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003310 <HAL_PCD_MspInit+0x5c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d118      	bne.n	8003308 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d6:	2001      	movs	r0, #1
 80032d8:	f7ff fe7f 	bl	8002fda <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80032dc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80032e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e2:	2302      	movs	r3, #2
 80032e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80032ee:	230a      	movs	r3, #10
 80032f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	4619      	mov	r1, r3
 80032f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80032fc:	f006 ff30 	bl	800a160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003300:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003304:	f7ff fe9b 	bl	800303e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8003308:	bf00      	nop
 800330a:	3720      	adds	r7, #32
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40006800 	.word	0x40006800

08003314 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003314:	b480      	push	{r7}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <NMI_Handler+0x4>

0800331c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <HardFault_Handler+0x4>

08003324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <MemManage_Handler+0x4>

0800332c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <BusFault_Handler+0x4>

08003334 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <UsageFault_Handler+0x4>

0800333c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003340:	bf00      	nop
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800334a:	b480      	push	{r7}
 800334c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800334e:	bf00      	nop
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003366:	b580      	push	{r7, lr}
 8003368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800336a:	f005 f98b 	bl	8008684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800336e:	bf00      	nop
 8003370:	bd80      	pop	{r7, pc}

08003372 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003376:	f7ff f871 	bl	800245c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	bd80      	pop	{r7, pc}

0800337e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003382:	f00e ffb9 	bl	80122f8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003386:	bf00      	nop
 8003388:	bd80      	pop	{r7, pc}

0800338a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800338e:	f00e ffe9 	bl	8012364 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003392:	bf00      	nop
 8003394:	bd80      	pop	{r7, pc}

08003396 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800339a:	f007 f947 	bl	800a62c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800339e:	bf00      	nop
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80033a8:	4802      	ldr	r0, [pc, #8]	@ (80033b4 <DMA2_Channel4_IRQHandler+0x10>)
 80033aa:	f006 fdc5 	bl	8009f38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80033ae:	bf00      	nop
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000430 	.word	0x20000430

080033b8 <LL_AHB2_GRP1_EnableClock>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80033c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4013      	ands	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033dc:	68fb      	ldr	r3, [r7, #12]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <LL_APB1_GRP1_EnableClock>:
{
 80033ea:	b480      	push	{r7}
 80033ec:	b085      	sub	sp, #20
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80033f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80033f6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80033f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4313      	orrs	r3, r2
 8003400:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003406:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4013      	ands	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800340e:	68fb      	ldr	r3, [r7, #12]
}
 8003410:	bf00      	nop
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_APB1_GRP1_DisableClock>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003424:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003428:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	43db      	mvns	r3, r3
 800342e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003432:	4013      	ands	r3, r2
 8003434:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
	...

08003444 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800344a:	2300      	movs	r3, #0
 800344c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800344e:	4b19      	ldr	r3, [pc, #100]	@ (80034b4 <BSP_I2C1_Init+0x70>)
 8003450:	4a19      	ldr	r2, [pc, #100]	@ (80034b8 <BSP_I2C1_Init+0x74>)
 8003452:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003454:	4b19      	ldr	r3, [pc, #100]	@ (80034bc <BSP_I2C1_Init+0x78>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	4918      	ldr	r1, [pc, #96]	@ (80034bc <BSP_I2C1_Init+0x78>)
 800345c:	600a      	str	r2, [r1, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d122      	bne.n	80034a8 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003462:	4814      	ldr	r0, [pc, #80]	@ (80034b4 <BSP_I2C1_Init+0x70>)
 8003464:	f007 fc12 	bl	800ac8c <HAL_I2C_GetState>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11c      	bne.n	80034a8 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800346e:	4811      	ldr	r0, [pc, #68]	@ (80034b4 <BSP_I2C1_Init+0x70>)
 8003470:	f000 f8fe 	bl	8003670 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d116      	bne.n	80034a8 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800347a:	480e      	ldr	r0, [pc, #56]	@ (80034b4 <BSP_I2C1_Init+0x70>)
 800347c:	f000 f8b4 	bl	80035e8 <MX_I2C1_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003486:	f06f 0307 	mvn.w	r3, #7
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e00c      	b.n	80034a8 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800348e:	2100      	movs	r1, #0
 8003490:	4808      	ldr	r0, [pc, #32]	@ (80034b4 <BSP_I2C1_Init+0x70>)
 8003492:	f007 fed7 	bl	800b244 <HAL_I2CEx_ConfigAnalogFilter>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800349c:	f06f 0307 	mvn.w	r3, #7
 80034a0:	607b      	str	r3, [r7, #4]
 80034a2:	e001      	b.n	80034a8 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80034a4:	2300      	movs	r3, #0
 80034a6:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80034a8:	687b      	ldr	r3, [r7, #4]
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	2000076c 	.word	0x2000076c
 80034b8:	40005400 	.word	0x40005400
 80034bc:	200007c0 	.word	0x200007c0

080034c0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80034ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003508 <BSP_I2C1_DeInit+0x48>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80034d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003508 <BSP_I2C1_DeInit+0x48>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003508 <BSP_I2C1_DeInit+0x48>)
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003508 <BSP_I2C1_DeInit+0x48>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80034e4:	4809      	ldr	r0, [pc, #36]	@ (800350c <BSP_I2C1_DeInit+0x4c>)
 80034e6:	f000 f907 	bl	80036f8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80034ea:	4808      	ldr	r0, [pc, #32]	@ (800350c <BSP_I2C1_DeInit+0x4c>)
 80034ec:	f007 f95d 	bl	800a7aa <HAL_I2C_DeInit>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80034f6:	f06f 0307 	mvn.w	r3, #7
 80034fa:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80034fc:	687b      	ldr	r3, [r7, #4]
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	200007c0 	.word	0x200007c0
 800350c:	2000076c 	.word	0x2000076c

08003510 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b08a      	sub	sp, #40	@ 0x28
 8003514:	af04      	add	r7, sp, #16
 8003516:	60ba      	str	r2, [r7, #8]
 8003518:	461a      	mov	r2, r3
 800351a:	4603      	mov	r3, r0
 800351c:	81fb      	strh	r3, [r7, #14]
 800351e:	460b      	mov	r3, r1
 8003520:	81bb      	strh	r3, [r7, #12]
 8003522:	4613      	mov	r3, r2
 8003524:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800352a:	89ba      	ldrh	r2, [r7, #12]
 800352c:	89f9      	ldrh	r1, [r7, #14]
 800352e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003532:	9302      	str	r3, [sp, #8]
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	9301      	str	r3, [sp, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2301      	movs	r3, #1
 800353e:	480c      	ldr	r0, [pc, #48]	@ (8003570 <BSP_I2C1_WriteReg+0x60>)
 8003540:	f007 f976 	bl	800a830 <HAL_I2C_Mem_Write>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800354a:	4809      	ldr	r0, [pc, #36]	@ (8003570 <BSP_I2C1_WriteReg+0x60>)
 800354c:	f007 fbac 	bl	800aca8 <HAL_I2C_GetError>
 8003550:	4603      	mov	r3, r0
 8003552:	2b04      	cmp	r3, #4
 8003554:	d103      	bne.n	800355e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003556:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	e002      	b.n	8003564 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800355e:	f06f 0303 	mvn.w	r3, #3
 8003562:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003564:	697b      	ldr	r3, [r7, #20]
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000076c 	.word	0x2000076c

08003574 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b08a      	sub	sp, #40	@ 0x28
 8003578:	af04      	add	r7, sp, #16
 800357a:	60ba      	str	r2, [r7, #8]
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	81fb      	strh	r3, [r7, #14]
 8003582:	460b      	mov	r3, r1
 8003584:	81bb      	strh	r3, [r7, #12]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800358e:	89ba      	ldrh	r2, [r7, #12]
 8003590:	89f9      	ldrh	r1, [r7, #14]
 8003592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003596:	9302      	str	r3, [sp, #8]
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	2301      	movs	r3, #1
 80035a2:	480c      	ldr	r0, [pc, #48]	@ (80035d4 <BSP_I2C1_ReadReg+0x60>)
 80035a4:	f007 fa58 	bl	800aa58 <HAL_I2C_Mem_Read>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00c      	beq.n	80035c8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80035ae:	4809      	ldr	r0, [pc, #36]	@ (80035d4 <BSP_I2C1_ReadReg+0x60>)
 80035b0:	f007 fb7a 	bl	800aca8 <HAL_I2C_GetError>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d103      	bne.n	80035c2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80035ba:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	e002      	b.n	80035c8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80035c2:	f06f 0303 	mvn.w	r3, #3
 80035c6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80035c8:	697b      	ldr	r3, [r7, #20]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	2000076c 	.word	0x2000076c

080035d8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80035dc:	f005 f866 	bl	80086ac <HAL_GetTick>
 80035e0:	4603      	mov	r3, r0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	bd80      	pop	{r7, pc}
	...

080035e8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	@ (8003668 <MX_I2C1_Init+0x80>)
 80035f8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1b      	ldr	r2, [pc, #108]	@ (800366c <MX_I2C1_Init+0x84>)
 80035fe:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f007 f822 	bl	800a674 <HAL_I2C_Init>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800363a:	2100      	movs	r1, #0
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f007 fe01 	bl	800b244 <HAL_I2CEx_ConfigAnalogFilter>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800364c:	2100      	movs	r1, #0
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f007 fe43 	bl	800b2da <HAL_I2CEx_ConfigDigitalFilter>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800365e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40005400 	.word	0x40005400
 800366c:	00707cbb 	.word	0x00707cbb

08003670 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b09c      	sub	sp, #112	@ 0x70
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	2250      	movs	r2, #80	@ 0x50
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f00f fc05 	bl	8012e90 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003686:	2304      	movs	r3, #4
 8003688:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800368a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800368e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003690:	f107 030c 	add.w	r3, r7, #12
 8003694:	4618      	mov	r0, r3
 8003696:	f009 fb3f 	bl	800cd18 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369a:	2002      	movs	r0, #2
 800369c:	f7ff fe8c 	bl	80033b8 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80036a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80036a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036a6:	2312      	movs	r3, #18
 80036a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036aa:	2300      	movs	r3, #0
 80036ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ae:	2300      	movs	r3, #0
 80036b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80036b2:	2304      	movs	r3, #4
 80036b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80036b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036ba:	4619      	mov	r1, r3
 80036bc:	480d      	ldr	r0, [pc, #52]	@ (80036f4 <I2C1_MspInit+0x84>)
 80036be:	f006 fd4f 	bl	800a160 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80036c2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80036c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80036c8:	2312      	movs	r3, #18
 80036ca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036cc:	2300      	movs	r3, #0
 80036ce:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d0:	2300      	movs	r3, #0
 80036d2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80036d4:	2304      	movs	r3, #4
 80036d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80036d8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80036dc:	4619      	mov	r1, r3
 80036de:	4805      	ldr	r0, [pc, #20]	@ (80036f4 <I2C1_MspInit+0x84>)
 80036e0:	f006 fd3e 	bl	800a160 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036e4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80036e8:	f7ff fe7f 	bl	80033ea <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80036ec:	bf00      	nop
 80036ee:	3770      	adds	r7, #112	@ 0x70
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	48000400 	.word	0x48000400

080036f8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003700:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003704:	f7ff fe8a 	bl	800341c <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8003708:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800370c:	4805      	ldr	r0, [pc, #20]	@ (8003724 <I2C1_MspDeInit+0x2c>)
 800370e:	f006 fe97 	bl	800a440 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003712:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003716:	4803      	ldr	r0, [pc, #12]	@ (8003724 <I2C1_MspDeInit+0x2c>)
 8003718:	f006 fe92 	bl	800a440 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	48000400 	.word	0x48000400

08003728 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]
 8003738:	e00a      	b.n	8003750 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800373a:	f3af 8000 	nop.w
 800373e:	4601      	mov	r1, r0
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	60ba      	str	r2, [r7, #8]
 8003746:	b2ca      	uxtb	r2, r1
 8003748:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	3301      	adds	r3, #1
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697a      	ldr	r2, [r7, #20]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	429a      	cmp	r2, r3
 8003756:	dbf0      	blt.n	800373a <_read+0x12>
  }

  return len;
 8003758:	687b      	ldr	r3, [r7, #4]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003762:	b480      	push	{r7}
 8003764:	b083      	sub	sp, #12
 8003766:	af00      	add	r7, sp, #0
 8003768:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800376a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800376e:	4618      	mov	r0, r3
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr

0800377a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800377a:	b480      	push	{r7}
 800377c:	b083      	sub	sp, #12
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800378a:	605a      	str	r2, [r3, #4]
  return 0;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <_isatty>:

int _isatty(int file)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80037a2:	2301      	movs	r3, #1
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3714      	adds	r7, #20
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
	...

080037cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037d4:	4a14      	ldr	r2, [pc, #80]	@ (8003828 <_sbrk+0x5c>)
 80037d6:	4b15      	ldr	r3, [pc, #84]	@ (800382c <_sbrk+0x60>)
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037e0:	4b13      	ldr	r3, [pc, #76]	@ (8003830 <_sbrk+0x64>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d102      	bne.n	80037ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037e8:	4b11      	ldr	r3, [pc, #68]	@ (8003830 <_sbrk+0x64>)
 80037ea:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <_sbrk+0x68>)
 80037ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037ee:	4b10      	ldr	r3, [pc, #64]	@ (8003830 <_sbrk+0x64>)
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d207      	bcs.n	800380c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037fc:	f00f fbac 	bl	8012f58 <__errno>
 8003800:	4603      	mov	r3, r0
 8003802:	220c      	movs	r2, #12
 8003804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003806:	f04f 33ff 	mov.w	r3, #4294967295
 800380a:	e009      	b.n	8003820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800380c:	4b08      	ldr	r3, [pc, #32]	@ (8003830 <_sbrk+0x64>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003812:	4b07      	ldr	r3, [pc, #28]	@ (8003830 <_sbrk+0x64>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4413      	add	r3, r2
 800381a:	4a05      	ldr	r2, [pc, #20]	@ (8003830 <_sbrk+0x64>)
 800381c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800381e:	68fb      	ldr	r3, [r7, #12]
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	20030000 	.word	0x20030000
 800382c:	00000400 	.word	0x00000400
 8003830:	200007c4 	.word	0x200007c4
 8003834:	20000dc0 	.word	0x20000dc0

08003838 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800383c:	4b24      	ldr	r3, [pc, #144]	@ (80038d0 <SystemInit+0x98>)
 800383e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003842:	4a23      	ldr	r2, [pc, #140]	@ (80038d0 <SystemInit+0x98>)
 8003844:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003848:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800384c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003856:	f043 0301 	orr.w	r3, r3, #1
 800385a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003860:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003864:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003870:	4b18      	ldr	r3, [pc, #96]	@ (80038d4 <SystemInit+0x9c>)
 8003872:	4013      	ands	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800387a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800387e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003882:	f023 0305 	bic.w	r3, r3, #5
 8003886:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800388e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003892:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003896:	f023 0301 	bic.w	r3, r3, #1
 800389a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800389e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038a2:	4a0d      	ldr	r2, [pc, #52]	@ (80038d8 <SystemInit+0xa0>)
 80038a4:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80038a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038aa:	4a0b      	ldr	r2, [pc, #44]	@ (80038d8 <SystemInit+0xa0>)
 80038ac:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80038b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]
}
 80038c6:	bf00      	nop
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	e000ed00 	.word	0xe000ed00
 80038d4:	faf6fefb 	.word	0xfaf6fefb
 80038d8:	22041000 	.word	0x22041000

080038dc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80038dc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038de:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e0:	3304      	adds	r3, #4

080038e2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038e4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80038e6:	d3f9      	bcc.n	80038dc <CopyDataInit>
  bx lr
 80038e8:	4770      	bx	lr

080038ea <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80038ea:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80038ec:	3004      	adds	r0, #4

080038ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80038ee:	4288      	cmp	r0, r1
  bcc FillZerobss
 80038f0:	d3fb      	bcc.n	80038ea <FillZerobss>
  bx lr
 80038f2:	4770      	bx	lr

080038f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038f4:	480c      	ldr	r0, [pc, #48]	@ (8003928 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038f8:	f7ff ff9e 	bl	8003838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80038fc:	480b      	ldr	r0, [pc, #44]	@ (800392c <LoopForever+0x6>)
 80038fe:	490c      	ldr	r1, [pc, #48]	@ (8003930 <LoopForever+0xa>)
 8003900:	4a0c      	ldr	r2, [pc, #48]	@ (8003934 <LoopForever+0xe>)
 8003902:	2300      	movs	r3, #0
 8003904:	f7ff ffed 	bl	80038e2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003908:	480b      	ldr	r0, [pc, #44]	@ (8003938 <LoopForever+0x12>)
 800390a:	490c      	ldr	r1, [pc, #48]	@ (800393c <LoopForever+0x16>)
 800390c:	4a0c      	ldr	r2, [pc, #48]	@ (8003940 <LoopForever+0x1a>)
 800390e:	2300      	movs	r3, #0
 8003910:	f7ff ffe7 	bl	80038e2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003914:	480b      	ldr	r0, [pc, #44]	@ (8003944 <LoopForever+0x1e>)
 8003916:	490c      	ldr	r1, [pc, #48]	@ (8003948 <LoopForever+0x22>)
 8003918:	2300      	movs	r3, #0
 800391a:	f7ff ffe8 	bl	80038ee <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800391e:	f00f fb21 	bl	8012f64 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003922:	f7ff f8e3 	bl	8002aec <main>

08003926 <LoopForever>:

LoopForever:
  b LoopForever
 8003926:	e7fe      	b.n	8003926 <LoopForever>
  ldr   r0, =_estack
 8003928:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 800392c:	20000008 	.word	0x20000008
 8003930:	2000016c 	.word	0x2000016c
 8003934:	08015994 	.word	0x08015994
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003938:	200301e4 	.word	0x200301e4
 800393c:	20030a67 	.word	0x20030a67
 8003940:	08015b3e 	.word	0x08015b3e
  INIT_BSS _sbss, _ebss
 8003944:	200001b8 	.word	0x200001b8
 8003948:	20000dbc 	.word	0x20000dbc

0800394c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800394c:	e7fe      	b.n	800394c <ADC1_IRQHandler>
	...

08003950 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d103      	bne.n	800396c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e051      	b.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685a      	ldr	r2, [r3, #4]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	7b1a      	ldrb	r2, [r3, #12]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	691a      	ldr	r2, [r3, #16]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	695a      	ldr	r2, [r3, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a1c <LIS2DW12_RegisterBusIO+0xcc>)
 80039a8:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a1c      	ldr	r2, [pc, #112]	@ (8003a20 <LIS2DW12_RegisterBusIO+0xd0>)
 80039ae:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	69da      	ldr	r2, [r3, #28]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d103      	bne.n	80039ce <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 80039c6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	e020      	b.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4798      	blx	r3
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80039da:	f04f 33ff 	mov.w	r3, #4294967295
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e016      	b.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d112      	bne.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10d      	bne.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80039f4:	2305      	movs	r3, #5
 80039f6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80039f8:	7afb      	ldrb	r3, [r7, #11]
 80039fa:	461a      	mov	r2, r3
 80039fc:	2121      	movs	r1, #33	@ 0x21
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 fcc1 	bl	8004386 <LIS2DW12_Write_Reg>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a0e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003a10:	68fb      	ldr	r3, [r7, #12]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	08004719 	.word	0x08004719
 8003a20:	0800474f 	.word	0x0800474f

08003a24 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3320      	adds	r3, #32
 8003a30:	2101      	movs	r1, #1
 8003a32:	4618      	mov	r0, r3
 8003a34:	f001 f9cb 	bl	8004dce <lis2dw12_auto_increment_set>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	e04b      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	3320      	adds	r3, #32
 8003a48:	2101      	movs	r1, #1
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f8e2 	bl	8004c14 <lis2dw12_block_data_update_set>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
 8003a5a:	e03f      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3320      	adds	r3, #32
 8003a60:	2100      	movs	r1, #0
 8003a62:	4618      	mov	r0, r3
 8003a64:	f001 f9d9 	bl	8004e1a <lis2dw12_fifo_mode_set>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a72:	e033      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	3320      	adds	r3, #32
 8003a78:	2104      	movs	r1, #4
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 feb2 	bl	80047e4 <lis2dw12_power_mode_set>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d002      	beq.n	8003a8c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003a86:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8a:	e027      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <LIS2DW12_Init+0xc0>)
 8003a90:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3320      	adds	r3, #32
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 ffa3 	bl	80049f4 <lis2dw12_data_rate_set>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003ab4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ab8:	e010      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3320      	adds	r3, #32
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 f8cd 	bl	8004c60 <lis2dw12_full_scale_set>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003acc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ad0:	e004      	b.n	8003adc <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	42c80000 	.word	0x42c80000

08003ae8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f888 	bl	8003c06 <LIS2DW12_ACC_Disable>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003afc:	f04f 33ff 	mov.w	r3, #4294967295
 8003b00:	e010      	b.n	8003b24 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3320      	adds	r3, #32
 8003b3a:	6839      	ldr	r1, [r7, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 f935 	bl	8004dac <lis2dw12_device_id_get>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d002      	beq.n	8003b4e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003b48:	f04f 33ff 	mov.w	r3, #4294967295
 8003b4c:	e000      	b.n	8003b50 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2200      	movs	r2, #0
 8003b72:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	2200      	movs	r2, #0
 8003b78:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	2210      	movs	r2, #16
 8003b84:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	4a06      	ldr	r2, [pc, #24]	@ (8003bb0 <LIS2DW12_GetCapabilities+0x58>)
 8003b98:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003ba2:	2300      	movs	r3, #0
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	44c80000 	.word	0x44c80000

08003bb4 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e019      	b.n	8003bfe <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003bdc:	461a      	mov	r2, r3
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fbea 	bl	80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d002      	beq.n	8003bf4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003bee:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf2:	e004      	b.n	8003bfe <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d101      	bne.n	8003c1c <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	e010      	b.n	8003c3e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	3320      	adds	r3, #32
 8003c20:	2100      	movs	r1, #0
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fee6 	bl	80049f4 <lis2dw12_data_rate_set>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d002      	beq.n	8003c34 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c32:	e004      	b.n	8003c3e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
	...

08003c48 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	3320      	adds	r3, #32
 8003c5a:	f107 020b 	add.w	r2, r7, #11
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f823 	bl	8004cac <lis2dw12_full_scale_get>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d002      	beq.n	8003c72 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c70:	e080      	b.n	8003d74 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	3320      	adds	r3, #32
 8003c76:	f107 020a 	add.w	r2, r7, #10
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fdff 	bl	8004880 <lis2dw12_power_mode_get>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d002      	beq.n	8003c8e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	e072      	b.n	8003d74 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003c8e:	7abb      	ldrb	r3, [r7, #10]
 8003c90:	2b1b      	cmp	r3, #27
 8003c92:	bf8c      	ite	hi
 8003c94:	2201      	movhi	r2, #1
 8003c96:	2200      	movls	r2, #0
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	2a00      	cmp	r2, #0
 8003c9c:	d162      	bne.n	8003d64 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003ca6:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d12f      	bne.n	8003d18 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003cb8:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bf14      	ite	ne
 8003cc0:	2301      	movne	r3, #1
 8003cc2:	2300      	moveq	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04c      	beq.n	8003d64 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003cca:	7afb      	ldrb	r3, [r7, #11]
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d81b      	bhi.n	8003d08 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf1 	.word	0x08003cf1
 8003ce0:	08003cf9 	.word	0x08003cf9
 8003ce4:	08003d01 	.word	0x08003d01
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4a24      	ldr	r2, [pc, #144]	@ (8003d7c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003cec:	601a      	str	r2, [r3, #0]
          break;
 8003cee:	e012      	b.n	8003d16 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4a23      	ldr	r2, [pc, #140]	@ (8003d80 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003cf4:	601a      	str	r2, [r3, #0]
          break;
 8003cf6:	e00e      	b.n	8003d16 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4a22      	ldr	r2, [pc, #136]	@ (8003d84 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003cfc:	601a      	str	r2, [r3, #0]
          break;
 8003cfe:	e00a      	b.n	8003d16 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4a21      	ldr	r2, [pc, #132]	@ (8003d88 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003d04:	601a      	str	r2, [r3, #0]
          break;
 8003d06:	e006      	b.n	8003d16 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4a20      	ldr	r2, [pc, #128]	@ (8003d8c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d0c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	60fb      	str	r3, [r7, #12]
          break;
 8003d14:	bf00      	nop
      }
      break;
 8003d16:	e02c      	b.n	8003d72 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003d18:	7afb      	ldrb	r3, [r7, #11]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	d81a      	bhi.n	8003d54 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003d1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d24 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d24:	08003d35 	.word	0x08003d35
 8003d28:	08003d3d 	.word	0x08003d3d
 8003d2c:	08003d45 	.word	0x08003d45
 8003d30:	08003d4d 	.word	0x08003d4d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	4a16      	ldr	r2, [pc, #88]	@ (8003d90 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003d38:	601a      	str	r2, [r3, #0]
          break;
 8003d3a:	e012      	b.n	8003d62 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	@ (8003d94 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003d40:	601a      	str	r2, [r3, #0]
          break;
 8003d42:	e00e      	b.n	8003d62 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	4a0d      	ldr	r2, [pc, #52]	@ (8003d7c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003d48:	601a      	str	r2, [r3, #0]
          break;
 8003d4a:	e00a      	b.n	8003d62 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d80 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003d50:	601a      	str	r2, [r3, #0]
          break;
 8003d52:	e006      	b.n	8003d62 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	4a0d      	ldr	r2, [pc, #52]	@ (8003d8c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d58:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5e:	60fb      	str	r3, [r7, #12]
          break;
 8003d60:	bf00      	nop
      }
      break;
 8003d62:	e006      	b.n	8003d72 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	4a09      	ldr	r2, [pc, #36]	@ (8003d8c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003d68:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6e:	60fb      	str	r3, [r7, #12]
      break;
 8003d70:	bf00      	nop
  }

  return ret;
 8003d72:	68fb      	ldr	r3, [r7, #12]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	3f79db23 	.word	0x3f79db23
 8003d80:	3ff9db23 	.word	0x3ff9db23
 8003d84:	4079db23 	.word	0x4079db23
 8003d88:	40f9db23 	.word	0x40f9db23
 8003d8c:	bf800000 	.word	0xbf800000
 8003d90:	3e79db23 	.word	0x3e79db23
 8003d94:	3ef9db23 	.word	0x3ef9db23

08003d98 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3320      	adds	r3, #32
 8003daa:	f107 020b 	add.w	r2, r7, #11
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 fe65 	bl	8004a80 <lis2dw12_data_rate_get>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc0:	e14f      	b.n	8004062 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3320      	adds	r3, #32
 8003dc6:	f107 020a 	add.w	r2, r7, #10
 8003dca:	4611      	mov	r1, r2
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fd57 	bl	8004880 <lis2dw12_power_mode_get>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ddc:	e141      	b.n	8004062 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	2b32      	cmp	r3, #50	@ 0x32
 8003de2:	f200 8136 	bhi.w	8004052 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003de6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003eb9 	.word	0x08003eb9
 8003df0:	08003ec3 	.word	0x08003ec3
 8003df4:	08003f1d 	.word	0x08003f1d
 8003df8:	08003f25 	.word	0x08003f25
 8003dfc:	08003f2d 	.word	0x08003f2d
 8003e00:	08003f35 	.word	0x08003f35
 8003e04:	08003f3d 	.word	0x08003f3d
 8003e08:	08003f45 	.word	0x08003f45
 8003e0c:	08003f9f 	.word	0x08003f9f
 8003e10:	08003ff9 	.word	0x08003ff9
 8003e14:	08004053 	.word	0x08004053
 8003e18:	08004053 	.word	0x08004053
 8003e1c:	08004053 	.word	0x08004053
 8003e20:	08004053 	.word	0x08004053
 8003e24:	08004053 	.word	0x08004053
 8003e28:	08004053 	.word	0x08004053
 8003e2c:	08004053 	.word	0x08004053
 8003e30:	08004053 	.word	0x08004053
 8003e34:	08003eb9 	.word	0x08003eb9
 8003e38:	08004053 	.word	0x08004053
 8003e3c:	08004053 	.word	0x08004053
 8003e40:	08004053 	.word	0x08004053
 8003e44:	08004053 	.word	0x08004053
 8003e48:	08004053 	.word	0x08004053
 8003e4c:	08004053 	.word	0x08004053
 8003e50:	08004053 	.word	0x08004053
 8003e54:	08004053 	.word	0x08004053
 8003e58:	08004053 	.word	0x08004053
 8003e5c:	08004053 	.word	0x08004053
 8003e60:	08004053 	.word	0x08004053
 8003e64:	08004053 	.word	0x08004053
 8003e68:	08004053 	.word	0x08004053
 8003e6c:	08004053 	.word	0x08004053
 8003e70:	08004053 	.word	0x08004053
 8003e74:	08004053 	.word	0x08004053
 8003e78:	08004053 	.word	0x08004053
 8003e7c:	08004053 	.word	0x08004053
 8003e80:	08004053 	.word	0x08004053
 8003e84:	08004053 	.word	0x08004053
 8003e88:	08004053 	.word	0x08004053
 8003e8c:	08004053 	.word	0x08004053
 8003e90:	08004053 	.word	0x08004053
 8003e94:	08004053 	.word	0x08004053
 8003e98:	08004053 	.word	0x08004053
 8003e9c:	08004053 	.word	0x08004053
 8003ea0:	08004053 	.word	0x08004053
 8003ea4:	08004053 	.word	0x08004053
 8003ea8:	08004053 	.word	0x08004053
 8003eac:	08004053 	.word	0x08004053
 8003eb0:	08004053 	.word	0x08004053
 8003eb4:	08003eb9 	.word	0x08003eb9
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]
      break;
 8003ec0:	e0ce      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003ec2:	7abb      	ldrb	r3, [r7, #10]
 8003ec4:	2b1b      	cmp	r3, #27
 8003ec6:	bf8c      	ite	hi
 8003ec8:	2201      	movhi	r2, #1
 8003eca:	2200      	movls	r2, #0
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	2a00      	cmp	r2, #0
 8003ed0:	d11c      	bne.n	8003f0c <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003edc:	2a00      	cmp	r2, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2201      	movne	r2, #1
 8003ee2:	2200      	moveq	r2, #0
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d10c      	bne.n	8003f04 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003eea:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	bf14      	ite	ne
 8003ef2:	2301      	movne	r3, #1
 8003ef4:	2300      	moveq	r3, #0
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d007      	beq.n	8003f0c <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4a5b      	ldr	r2, [pc, #364]	@ (800406c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003f00:	601a      	str	r2, [r3, #0]
          break;
 8003f02:	e00a      	b.n	8003f1a <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	4a5a      	ldr	r2, [pc, #360]	@ (8004070 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003f08:	601a      	str	r2, [r3, #0]
          break;
 8003f0a:	e006      	b.n	8003f1a <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	4a59      	ldr	r2, [pc, #356]	@ (8004074 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f10:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	60fb      	str	r3, [r7, #12]
          break;
 8003f18:	bf00      	nop
      }
      break;
 8003f1a:	e0a1      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	4a53      	ldr	r2, [pc, #332]	@ (800406c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003f20:	601a      	str	r2, [r3, #0]
      break;
 8003f22:	e09d      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	4a54      	ldr	r2, [pc, #336]	@ (8004078 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003f28:	601a      	str	r2, [r3, #0]
      break;
 8003f2a:	e099      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	4a53      	ldr	r2, [pc, #332]	@ (800407c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003f30:	601a      	str	r2, [r3, #0]
      break;
 8003f32:	e095      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	4a52      	ldr	r2, [pc, #328]	@ (8004080 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003f38:	601a      	str	r2, [r3, #0]
      break;
 8003f3a:	e091      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	4a51      	ldr	r2, [pc, #324]	@ (8004084 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f40:	601a      	str	r2, [r3, #0]
      break;
 8003f42:	e08d      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003f44:	7abb      	ldrb	r3, [r7, #10]
 8003f46:	2b1b      	cmp	r3, #27
 8003f48:	bf8c      	ite	hi
 8003f4a:	2201      	movhi	r2, #1
 8003f4c:	2200      	movls	r2, #0
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d11c      	bne.n	8003f8e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003f54:	2201      	movs	r2, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003f5e:	2a00      	cmp	r2, #0
 8003f60:	bf14      	ite	ne
 8003f62:	2201      	movne	r2, #1
 8003f64:	2200      	moveq	r2, #0
 8003f66:	b2d2      	uxtb	r2, r2
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d10c      	bne.n	8003f86 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003f6c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf14      	ite	ne
 8003f74:	2301      	movne	r3, #1
 8003f76:	2300      	moveq	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d007      	beq.n	8003f8e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	4a41      	ldr	r2, [pc, #260]	@ (8004088 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003f82:	601a      	str	r2, [r3, #0]
          break;
 8003f84:	e00a      	b.n	8003f9c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	4a3e      	ldr	r2, [pc, #248]	@ (8004084 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f8a:	601a      	str	r2, [r3, #0]
          break;
 8003f8c:	e006      	b.n	8003f9c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4a38      	ldr	r2, [pc, #224]	@ (8004074 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f92:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295
 8003f98:	60fb      	str	r3, [r7, #12]
          break;
 8003f9a:	bf00      	nop
      }
      break;
 8003f9c:	e060      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003f9e:	7abb      	ldrb	r3, [r7, #10]
 8003fa0:	2b1b      	cmp	r3, #27
 8003fa2:	bf8c      	ite	hi
 8003fa4:	2201      	movhi	r2, #1
 8003fa6:	2200      	movls	r2, #0
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	2a00      	cmp	r2, #0
 8003fac:	d11c      	bne.n	8003fe8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003fb8:	2a00      	cmp	r2, #0
 8003fba:	bf14      	ite	ne
 8003fbc:	2201      	movne	r2, #1
 8003fbe:	2200      	moveq	r2, #0
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	2a00      	cmp	r2, #0
 8003fc4:	d10c      	bne.n	8003fe0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003fc6:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4a2c      	ldr	r2, [pc, #176]	@ (800408c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003fdc:	601a      	str	r2, [r3, #0]
          break;
 8003fde:	e00a      	b.n	8003ff6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4a28      	ldr	r2, [pc, #160]	@ (8004084 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003fe4:	601a      	str	r2, [r3, #0]
          break;
 8003fe6:	e006      	b.n	8003ff6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	4a22      	ldr	r2, [pc, #136]	@ (8004074 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003fec:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003fee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff2:	60fb      	str	r3, [r7, #12]
          break;
 8003ff4:	bf00      	nop
      }
      break;
 8003ff6:	e033      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003ff8:	7abb      	ldrb	r3, [r7, #10]
 8003ffa:	2b1b      	cmp	r3, #27
 8003ffc:	bf8c      	ite	hi
 8003ffe:	2201      	movhi	r2, #1
 8004000:	2200      	movls	r2, #0
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	2a00      	cmp	r2, #0
 8004006:	d11c      	bne.n	8004042 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8004008:	2201      	movs	r2, #1
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004012:	2a00      	cmp	r2, #0
 8004014:	bf14      	ite	ne
 8004016:	2201      	movne	r2, #1
 8004018:	2200      	moveq	r2, #0
 800401a:	b2d2      	uxtb	r2, r2
 800401c:	2a00      	cmp	r2, #0
 800401e:	d10c      	bne.n	800403a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8004020:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf14      	ite	ne
 8004028:	2301      	movne	r3, #1
 800402a:	2300      	moveq	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d007      	beq.n	8004042 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	4a16      	ldr	r2, [pc, #88]	@ (8004090 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8004036:	601a      	str	r2, [r3, #0]
          break;
 8004038:	e00a      	b.n	8004050 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	4a11      	ldr	r2, [pc, #68]	@ (8004084 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800403e:	601a      	str	r2, [r3, #0]
          break;
 8004040:	e006      	b.n	8004050 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	4a0b      	ldr	r2, [pc, #44]	@ (8004074 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004046:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004048:	f04f 33ff 	mov.w	r3, #4294967295
 800404c:	60fb      	str	r3, [r7, #12]
          break;
 800404e:	bf00      	nop
      }
      break;
 8004050:	e006      	b.n	8004060 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	4a07      	ldr	r2, [pc, #28]	@ (8004074 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004056:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004058:	f04f 33ff 	mov.w	r3, #4294967295
 800405c:	60fb      	str	r3, [r7, #12]
      break;
 800405e:	bf00      	nop
  }

  return ret;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	41480000 	.word	0x41480000
 8004070:	3fcccccd 	.word	0x3fcccccd
 8004074:	bf800000 	.word	0xbf800000
 8004078:	41c80000 	.word	0x41c80000
 800407c:	42480000 	.word	0x42480000
 8004080:	42c80000 	.word	0x42c80000
 8004084:	43480000 	.word	0x43480000
 8004088:	43c80000 	.word	0x43c80000
 800408c:	44480000 	.word	0x44480000
 8004090:	44c80000 	.word	0x44c80000

08004094 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80040a0:	2200      	movs	r2, #0
 80040a2:	2100      	movs	r1, #0
 80040a4:	ed97 0a00 	vldr	s0, [r7]
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f805 	bl	80040b8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80040ae:	4603      	mov	r3, r0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3708      	adds	r7, #8
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}

080040b8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80040c4:	460b      	mov	r3, r1
 80040c6:	71fb      	strb	r3, [r7, #7]
 80040c8:	4613      	mov	r3, r2
 80040ca:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d109      	bne.n	80040ea <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80040d6:	79ba      	ldrb	r2, [r7, #6]
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	4619      	mov	r1, r3
 80040dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f96b 	bl	80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80040e6:	4603      	mov	r3, r0
 80040e8:	e008      	b.n	80040fc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80040ea:	79ba      	ldrb	r2, [r7, #6]
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	4619      	mov	r1, r3
 80040f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 fa7d 	bl	80045f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 80040fa:	4603      	mov	r3, r0
  }
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800410e:	2300      	movs	r3, #0
 8004110:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3320      	adds	r3, #32
 8004116:	f107 020b 	add.w	r2, r7, #11
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f000 fdc5 	bl	8004cac <lis2dw12_full_scale_get>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d002      	beq.n	800412e <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8004128:	f04f 33ff 	mov.w	r3, #4294967295
 800412c:	e027      	b.n	800417e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 800412e:	7afb      	ldrb	r3, [r7, #11]
 8004130:	2b03      	cmp	r3, #3
 8004132:	d81b      	bhi.n	800416c <LIS2DW12_ACC_GetFullScale+0x68>
 8004134:	a201      	add	r2, pc, #4	@ (adr r2, 800413c <LIS2DW12_ACC_GetFullScale+0x38>)
 8004136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413a:	bf00      	nop
 800413c:	0800414d 	.word	0x0800414d
 8004140:	08004155 	.word	0x08004155
 8004144:	0800415d 	.word	0x0800415d
 8004148:	08004165 	.word	0x08004165
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2202      	movs	r2, #2
 8004150:	601a      	str	r2, [r3, #0]
      break;
 8004152:	e013      	b.n	800417c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2204      	movs	r2, #4
 8004158:	601a      	str	r2, [r3, #0]
      break;
 800415a:	e00f      	b.n	800417c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2208      	movs	r2, #8
 8004160:	601a      	str	r2, [r3, #0]
      break;
 8004162:	e00b      	b.n	800417c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2210      	movs	r2, #16
 8004168:	601a      	str	r2, [r3, #0]
      break;
 800416a:	e007      	b.n	800417c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	f04f 32ff 	mov.w	r2, #4294967295
 8004172:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	60fb      	str	r3, [r7, #12]
      break;
 800417a:	bf00      	nop
  }

  return ret;
 800417c:	68fb      	ldr	r3, [r7, #12]
}
 800417e:	4618      	mov	r0, r3
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop

08004188 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	2b02      	cmp	r3, #2
 8004196:	dd0b      	ble.n	80041b0 <LIS2DW12_ACC_SetFullScale+0x28>
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	2b04      	cmp	r3, #4
 800419c:	dd06      	ble.n	80041ac <LIS2DW12_ACC_SetFullScale+0x24>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	dc01      	bgt.n	80041a8 <LIS2DW12_ACC_SetFullScale+0x20>
 80041a4:	2302      	movs	r3, #2
 80041a6:	e004      	b.n	80041b2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041a8:	2303      	movs	r3, #3
 80041aa:	e002      	b.n	80041b2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e000      	b.n	80041b2 <LIS2DW12_ACC_SetFullScale+0x2a>
 80041b0:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80041b2:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3320      	adds	r3, #32
 80041b8:	7bfa      	ldrb	r2, [r7, #15]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fd4f 	bl	8004c60 <lis2dw12_full_scale_set>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d002      	beq.n	80041ce <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80041c8:	f04f 33ff 	mov.w	r3, #4294967295
 80041cc:	e000      	b.n	80041d0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b086      	sub	sp, #24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3320      	adds	r3, #32
 80041ea:	f107 020b 	add.w	r2, r7, #11
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f000 fb45 	bl	8004880 <lis2dw12_power_mode_get>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	e068      	b.n	80042d4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	3320      	adds	r3, #32
 8004206:	f107 020c 	add.w	r2, r7, #12
 800420a:	4611      	mov	r1, r2
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fd85 	bl	8004d1c <lis2dw12_acceleration_raw_get>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d002      	beq.n	800421e <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8004218:	f04f 33ff 	mov.w	r3, #4294967295
 800421c:	e05a      	b.n	80042d4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 800421e:	7afb      	ldrb	r3, [r7, #11]
 8004220:	2b1b      	cmp	r3, #27
 8004222:	bf8c      	ite	hi
 8004224:	2201      	movhi	r2, #1
 8004226:	2200      	movls	r2, #0
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	2a00      	cmp	r2, #0
 800422c:	d14d      	bne.n	80042ca <LIS2DW12_ACC_GetAxesRaw+0xf2>
 800422e:	2201      	movs	r2, #1
 8004230:	409a      	lsls	r2, r3
 8004232:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8004236:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800423a:	2b00      	cmp	r3, #0
 800423c:	bf14      	ite	ne
 800423e:	2301      	movne	r3, #1
 8004240:	2300      	moveq	r3, #0
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d124      	bne.n	8004292 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8004248:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d037      	beq.n	80042ca <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800425a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	da00      	bge.n	8004264 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004262:	330f      	adds	r3, #15
 8004264:	111b      	asrs	r3, r3, #4
 8004266:	b21a      	sxth	r2, r3
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800426c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da00      	bge.n	8004276 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004274:	330f      	adds	r3, #15
 8004276:	111b      	asrs	r3, r3, #4
 8004278:	b21a      	sxth	r2, r3
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800427e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	da00      	bge.n	8004288 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004286:	330f      	adds	r3, #15
 8004288:	111b      	asrs	r3, r3, #4
 800428a:	b21a      	sxth	r2, r3
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	809a      	strh	r2, [r3, #4]
      break;
 8004290:	e01f      	b.n	80042d2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004292:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	da00      	bge.n	800429c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800429a:	3303      	adds	r3, #3
 800429c:	109b      	asrs	r3, r3, #2
 800429e:	b21a      	sxth	r2, r3
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80042a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	da00      	bge.n	80042ae <LIS2DW12_ACC_GetAxesRaw+0xd6>
 80042ac:	3303      	adds	r3, #3
 80042ae:	109b      	asrs	r3, r3, #2
 80042b0:	b21a      	sxth	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80042b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	da00      	bge.n	80042c0 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80042be:	3303      	adds	r3, #3
 80042c0:	109b      	asrs	r3, r3, #2
 80042c2:	b21a      	sxth	r2, r3
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	809a      	strh	r2, [r3, #4]
      break;
 80042c8:	e003      	b.n	80042d2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80042ca:	f04f 33ff 	mov.w	r3, #4294967295
 80042ce:	617b      	str	r3, [r7, #20]
      break;
 80042d0:	bf00      	nop
  }

  return ret;
 80042d2:	697b      	ldr	r3, [r7, #20]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80042e6:	f04f 0300 	mov.w	r3, #0
 80042ea:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80042ec:	f107 0310 	add.w	r3, r7, #16
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f7ff ff70 	bl	80041d8 <LIS2DW12_ACC_GetAxesRaw>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d002      	beq.n	8004304 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80042fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004302:	e03c      	b.n	800437e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004304:	f107 030c 	add.w	r3, r7, #12
 8004308:	4619      	mov	r1, r3
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f7ff fc9c 	bl	8003c48 <LIS2DW12_ACC_GetSensitivity>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	e030      	b.n	800437e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 800431c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004320:	ee07 3a90 	vmov	s15, r3
 8004324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004328:	edd7 7a03 	vldr	s15, [r7, #12]
 800432c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004334:	ee17 2a90 	vmov	r2, s15
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800433c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004340:	ee07 3a90 	vmov	s15, r3
 8004344:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004348:	edd7 7a03 	vldr	s15, [r7, #12]
 800434c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004350:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004354:	ee17 2a90 	vmov	r2, s15
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800435c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004360:	ee07 3a90 	vmov	s15, r3
 8004364:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004368:	edd7 7a03 	vldr	s15, [r7, #12]
 800436c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004374:	ee17 2a90 	vmov	r2, s15
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b082      	sub	sp, #8
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	70fb      	strb	r3, [r7, #3]
 8004392:	4613      	mov	r3, r2
 8004394:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f103 0020 	add.w	r0, r3, #32
 800439c:	1cba      	adds	r2, r7, #2
 800439e:	78f9      	ldrb	r1, [r7, #3]
 80043a0:	2301      	movs	r3, #1
 80043a2:	f000 fa07 	bl	80047b4 <lis2dw12_write_reg>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80043ac:	f04f 33ff 	mov.w	r3, #4294967295
 80043b0:	e000      	b.n	80043b4 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80043c8:	460b      	mov	r3, r1
 80043ca:	71fb      	strb	r3, [r7, #7]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80043d0:	79fb      	ldrb	r3, [r7, #7]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d80b      	bhi.n	80043f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80043d8:	a201      	add	r2, pc, #4	@ (adr r2, 80043e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	08004449 	.word	0x08004449
 80043e8:	08004475 	.word	0x08004475
 80043ec:	080044a1 	.word	0x080044a1
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80043f0:	79bb      	ldrb	r3, [r7, #6]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d002      	beq.n	80043fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80043f6:	2304      	movs	r3, #4
 80043f8:	75fb      	strb	r3, [r7, #23]
          break;
 80043fa:	e002      	b.n	8004402 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80043fc:	2314      	movs	r3, #20
 80043fe:	75fb      	strb	r3, [r7, #23]
          break;
 8004400:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8004402:	edd7 7a02 	vldr	s15, [r7, #8]
 8004406:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800440a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800440e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004412:	d400      	bmi.n	8004416 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8004414:	e05a      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 8004416:	4b6f      	ldr	r3, [pc, #444]	@ (80045d4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 8004418:	60bb      	str	r3, [r7, #8]
      break;
 800441a:	e057      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 800441c:	79bb      	ldrb	r3, [r7, #6]
 800441e:	2b01      	cmp	r3, #1
 8004420:	d002      	beq.n	8004428 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004422:	2303      	movs	r3, #3
 8004424:	75fb      	strb	r3, [r7, #23]
          break;
 8004426:	e002      	b.n	800442e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004428:	2313      	movs	r3, #19
 800442a:	75fb      	strb	r3, [r7, #23]
          break;
 800442c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800442e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004432:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800443a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443e:	dc00      	bgt.n	8004442 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004440:	e044      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004442:	4b66      	ldr	r3, [pc, #408]	@ (80045dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004444:	60bb      	str	r3, [r7, #8]
      break;
 8004446:	e041      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004448:	79bb      	ldrb	r3, [r7, #6]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d002      	beq.n	8004454 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800444e:	2302      	movs	r3, #2
 8004450:	75fb      	strb	r3, [r7, #23]
          break;
 8004452:	e002      	b.n	800445a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004454:	2312      	movs	r3, #18
 8004456:	75fb      	strb	r3, [r7, #23]
          break;
 8004458:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800445a:	edd7 7a02 	vldr	s15, [r7, #8]
 800445e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	dc00      	bgt.n	800446e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800446c:	e02e      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800446e:	4b5b      	ldr	r3, [pc, #364]	@ (80045dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004470:	60bb      	str	r3, [r7, #8]
      break;
 8004472:	e02b      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004474:	79bb      	ldrb	r3, [r7, #6]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d002      	beq.n	8004480 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800447a:	2301      	movs	r3, #1
 800447c:	75fb      	strb	r3, [r7, #23]
          break;
 800447e:	e002      	b.n	8004486 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004480:	2311      	movs	r3, #17
 8004482:	75fb      	strb	r3, [r7, #23]
          break;
 8004484:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004486:	edd7 7a02 	vldr	s15, [r7, #8]
 800448a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800448e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	dc00      	bgt.n	800449a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004498:	e018      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800449a:	4b50      	ldr	r3, [pc, #320]	@ (80045dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800449c:	60bb      	str	r3, [r7, #8]
      break;
 800449e:	e015      	b.n	80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80044a0:	79bb      	ldrb	r3, [r7, #6]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d002      	beq.n	80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
          break;
 80044aa:	e002      	b.n	80044b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80044ac:	2310      	movs	r3, #16
 80044ae:	75fb      	strb	r3, [r7, #23]
          break;
 80044b0:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80044b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80044b6:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80044ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	dc00      	bgt.n	80044c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80044c4:	e001      	b.n	80044ca <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80044c6:	4b45      	ldr	r3, [pc, #276]	@ (80045dc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80044c8:	60bb      	str	r3, [r7, #8]
      break;
 80044ca:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80044cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80044d0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80044d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044dc:	d801      	bhi.n	80044e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80044de:	2301      	movs	r3, #1
 80044e0:	e04d      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80044e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80044e6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80044ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f2:	d801      	bhi.n	80044f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e042      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80044f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80044fc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004508:	d801      	bhi.n	800450e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800450a:	2303      	movs	r3, #3
 800450c:	e037      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800450e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004512:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80045e4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 8004516:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	d801      	bhi.n	8004524 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004520:	2304      	movs	r3, #4
 8004522:	e02c      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004524:	edd7 7a02 	vldr	s15, [r7, #8]
 8004528:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80045e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 800452c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004534:	d801      	bhi.n	800453a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004536:	2305      	movs	r3, #5
 8004538:	e021      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800453a:	edd7 7a02 	vldr	s15, [r7, #8]
 800453e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800454a:	d801      	bhi.n	8004550 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800454c:	2306      	movs	r3, #6
 800454e:	e016      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004550:	edd7 7a02 	vldr	s15, [r7, #8]
 8004554:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80045ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004560:	d801      	bhi.n	8004566 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004562:	2307      	movs	r3, #7
 8004564:	e00b      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004566:	edd7 7a02 	vldr	s15, [r7, #8]
 800456a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80045f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800456e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004576:	d801      	bhi.n	800457c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004578:	2308      	movs	r3, #8
 800457a:	e000      	b.n	800457e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800457c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800457e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	3320      	adds	r3, #32
 8004584:	7dba      	ldrb	r2, [r7, #22]
 8004586:	4611      	mov	r1, r2
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fa33 	bl	80049f4 <lis2dw12_data_rate_set>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004594:	f04f 33ff 	mov.w	r3, #4294967295
 8004598:	e018      	b.n	80045cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3320      	adds	r3, #32
 800459e:	7dfa      	ldrb	r2, [r7, #23]
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f91e 	bl	80047e4 <lis2dw12_power_mode_set>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80045ae:	f04f 33ff 	mov.w	r3, #4294967295
 80045b2:	e00b      	b.n	80045cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	79fa      	ldrb	r2, [r7, #7]
 80045be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	79ba      	ldrb	r2, [r7, #6]
 80045c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	41480000 	.word	0x41480000
 80045d8:	43480000 	.word	0x43480000
 80045dc:	43480000 	.word	0x43480000
 80045e0:	3fcccccd 	.word	0x3fcccccd
 80045e4:	42480000 	.word	0x42480000
 80045e8:	42c80000 	.word	0x42c80000
 80045ec:	43c80000 	.word	0x43c80000
 80045f0:	44480000 	.word	0x44480000

080045f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8004600:	460b      	mov	r3, r1
 8004602:	71fb      	strb	r3, [r7, #7]
 8004604:	4613      	mov	r3, r2
 8004606:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	79fa      	ldrb	r2, [r7, #7]
 800460c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	79ba      	ldrb	r2, [r7, #6]
 8004614:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 8004618:	edd7 7a02 	vldr	s15, [r7, #8]
 800461c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80046dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	d801      	bhi.n	800462e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800462a:	4b2d      	ldr	r3, [pc, #180]	@ (80046e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 800462c:	e04d      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 800462e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004632:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d801      	bhi.n	8004644 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004640:	4b28      	ldr	r3, [pc, #160]	@ (80046e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004642:	e042      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004644:	edd7 7a02 	vldr	s15, [r7, #8]
 8004648:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800464c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004654:	d801      	bhi.n	800465a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004656:	4b24      	ldr	r3, [pc, #144]	@ (80046e8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004658:	e037      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800465a:	edd7 7a02 	vldr	s15, [r7, #8]
 800465e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466a:	d801      	bhi.n	8004670 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800466c:	4b20      	ldr	r3, [pc, #128]	@ (80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800466e:	e02c      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004670:	edd7 7a02 	vldr	s15, [r7, #8]
 8004674:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80046f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004678:	eef4 7ac7 	vcmpe.f32	s15, s14
 800467c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004680:	d801      	bhi.n	8004686 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004684:	e021      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004686:	edd7 7a02 	vldr	s15, [r7, #8]
 800468a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800468e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004696:	d801      	bhi.n	800469c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800469a:	e016      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 800469c:	edd7 7a02 	vldr	s15, [r7, #8]
 80046a0:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004704 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80046a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ac:	d801      	bhi.n	80046b2 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80046ae:	4b16      	ldr	r3, [pc, #88]	@ (8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80046b0:	e00b      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 80046b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80046b6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800470c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80046ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c2:	d801      	bhi.n	80046c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80046c4:	4b12      	ldr	r3, [pc, #72]	@ (8004710 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80046c6:	e000      	b.n	80046ca <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80046c8:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	3fcccccd 	.word	0x3fcccccd
 80046e0:	3fcccccd 	.word	0x3fcccccd
 80046e4:	41480000 	.word	0x41480000
 80046e8:	41c80000 	.word	0x41c80000
 80046ec:	42480000 	.word	0x42480000
 80046f0:	42480000 	.word	0x42480000
 80046f4:	42c80000 	.word	0x42c80000
 80046f8:	42c80000 	.word	0x42c80000
 80046fc:	43480000 	.word	0x43480000
 8004700:	43480000 	.word	0x43480000
 8004704:	43c80000 	.word	0x43c80000
 8004708:	43c80000 	.word	0x43c80000
 800470c:	44480000 	.word	0x44480000
 8004710:	44480000 	.word	0x44480000
 8004714:	44c80000 	.word	0x44c80000

08004718 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004718:	b590      	push	{r4, r7, lr}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607a      	str	r2, [r7, #4]
 8004722:	461a      	mov	r2, r3
 8004724:	460b      	mov	r3, r1
 8004726:	72fb      	strb	r3, [r7, #11]
 8004728:	4613      	mov	r3, r2
 800472a:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	695c      	ldr	r4, [r3, #20]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	7b1b      	ldrb	r3, [r3, #12]
 8004738:	4618      	mov	r0, r3
 800473a:	7afb      	ldrb	r3, [r7, #11]
 800473c:	b299      	uxth	r1, r3
 800473e:	893b      	ldrh	r3, [r7, #8]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	47a0      	blx	r4
 8004744:	4603      	mov	r3, r0
}
 8004746:	4618      	mov	r0, r3
 8004748:	371c      	adds	r7, #28
 800474a:	46bd      	mov	sp, r7
 800474c:	bd90      	pop	{r4, r7, pc}

0800474e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800474e:	b590      	push	{r4, r7, lr}
 8004750:	b087      	sub	sp, #28
 8004752:	af00      	add	r7, sp, #0
 8004754:	60f8      	str	r0, [r7, #12]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	461a      	mov	r2, r3
 800475a:	460b      	mov	r3, r1
 800475c:	72fb      	strb	r3, [r7, #11]
 800475e:	4613      	mov	r3, r2
 8004760:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	691c      	ldr	r4, [r3, #16]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	7b1b      	ldrb	r3, [r3, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	7afb      	ldrb	r3, [r7, #11]
 8004772:	b299      	uxth	r1, r3
 8004774:	893b      	ldrh	r3, [r7, #8]
 8004776:	687a      	ldr	r2, [r7, #4]
 8004778:	47a0      	blx	r4
 800477a:	4603      	mov	r3, r0
}
 800477c:	4618      	mov	r0, r3
 800477e:	371c      	adds	r7, #28
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	607a      	str	r2, [r7, #4]
 800478e:	461a      	mov	r2, r3
 8004790:	460b      	mov	r3, r1
 8004792:	72fb      	strb	r3, [r7, #11]
 8004794:	4613      	mov	r3, r2
 8004796:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685c      	ldr	r4, [r3, #4]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	68d8      	ldr	r0, [r3, #12]
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	7af9      	ldrb	r1, [r7, #11]
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	47a0      	blx	r4
 80047a8:	6178      	str	r0, [r7, #20]

  return ret;
 80047aa:	697b      	ldr	r3, [r7, #20]
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	371c      	adds	r7, #28
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd90      	pop	{r4, r7, pc}

080047b4 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80047b4:	b590      	push	{r4, r7, lr}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	607a      	str	r2, [r7, #4]
 80047be:	461a      	mov	r2, r3
 80047c0:	460b      	mov	r3, r1
 80047c2:	72fb      	strb	r3, [r7, #11]
 80047c4:	4613      	mov	r3, r2
 80047c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681c      	ldr	r4, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	68d8      	ldr	r0, [r3, #12]
 80047d0:	893b      	ldrh	r3, [r7, #8]
 80047d2:	7af9      	ldrb	r1, [r7, #11]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	47a0      	blx	r4
 80047d8:	6178      	str	r0, [r7, #20]

  return ret;
 80047da:	697b      	ldr	r3, [r7, #20]
}
 80047dc:	4618      	mov	r0, r3
 80047de:	371c      	adds	r7, #28
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd90      	pop	{r4, r7, pc}

080047e4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	460b      	mov	r3, r1
 80047ee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047f0:	f107 0210 	add.w	r2, r7, #16
 80047f4:	2301      	movs	r3, #1
 80047f6:	2120      	movs	r1, #32
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff ffc3 	bl	8004784 <lis2dw12_read_reg>
 80047fe:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d118      	bne.n	8004838 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 8004806:	78fb      	ldrb	r3, [r7, #3]
 8004808:	089b      	lsrs	r3, r3, #2
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	b2da      	uxtb	r2, r3
 8004810:	7c3b      	ldrb	r3, [r7, #16]
 8004812:	f362 0383 	bfi	r3, r2, #2, #2
 8004816:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	b2da      	uxtb	r2, r3
 8004820:	7c3b      	ldrb	r3, [r7, #16]
 8004822:	f362 0301 	bfi	r3, r2, #0, #2
 8004826:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004828:	f107 0210 	add.w	r2, r7, #16
 800482c:	2301      	movs	r3, #1
 800482e:	2120      	movs	r1, #32
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff ffbf 	bl	80047b4 <lis2dw12_write_reg>
 8004836:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d107      	bne.n	800484e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800483e:	f107 020c 	add.w	r2, r7, #12
 8004842:	2301      	movs	r3, #1
 8004844:	2125      	movs	r1, #37	@ 0x25
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f7ff ff9c 	bl	8004784 <lis2dw12_read_reg>
 800484c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d110      	bne.n	8004876 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004854:	78fb      	ldrb	r3, [r7, #3]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	b2da      	uxtb	r2, r3
 800485e:	7b3b      	ldrb	r3, [r7, #12]
 8004860:	f362 0382 	bfi	r3, r2, #2, #1
 8004864:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004866:	f107 020c 	add.w	r2, r7, #12
 800486a:	2301      	movs	r3, #1
 800486c:	2125      	movs	r1, #37	@ 0x25
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7ff ffa0 	bl	80047b4 <lis2dw12_write_reg>
 8004874:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004876:	697b      	ldr	r3, [r7, #20]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3718      	adds	r7, #24
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800488a:	f107 0210 	add.w	r2, r7, #16
 800488e:	2301      	movs	r3, #1
 8004890:	2120      	movs	r1, #32
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff76 	bl	8004784 <lis2dw12_read_reg>
 8004898:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f040 80a3 	bne.w	80049e8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80048a2:	f107 020c 	add.w	r2, r7, #12
 80048a6:	2301      	movs	r3, #1
 80048a8:	2125      	movs	r1, #37	@ 0x25
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff ff6a 	bl	8004784 <lis2dw12_read_reg>
 80048b0:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80048b2:	7b3b      	ldrb	r3, [r7, #12]
 80048b4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	011a      	lsls	r2, r3, #4
 80048bc:	7c3b      	ldrb	r3, [r7, #16]
 80048be:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80048c8:	7c3a      	ldrb	r2, [r7, #16]
 80048ca:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80048ce:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80048d0:	4413      	add	r3, r2
 80048d2:	2b1b      	cmp	r3, #27
 80048d4:	f200 8084 	bhi.w	80049e0 <lis2dw12_power_mode_get+0x160>
 80048d8:	a201      	add	r2, pc, #4	@ (adr r2, 80048e0 <lis2dw12_power_mode_get+0x60>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004969 	.word	0x08004969
 80048e8:	08004961 	.word	0x08004961
 80048ec:	08004959 	.word	0x08004959
 80048f0:	08004951 	.word	0x08004951
 80048f4:	080049e1 	.word	0x080049e1
 80048f8:	080049e1 	.word	0x080049e1
 80048fc:	080049e1 	.word	0x080049e1
 8004900:	08004991 	.word	0x08004991
 8004904:	08004989 	.word	0x08004989
 8004908:	08004981 	.word	0x08004981
 800490c:	08004979 	.word	0x08004979
 8004910:	080049e1 	.word	0x080049e1
 8004914:	080049e1 	.word	0x080049e1
 8004918:	080049e1 	.word	0x080049e1
 800491c:	080049e1 	.word	0x080049e1
 8004920:	080049b9 	.word	0x080049b9
 8004924:	080049b1 	.word	0x080049b1
 8004928:	080049a9 	.word	0x080049a9
 800492c:	080049a1 	.word	0x080049a1
 8004930:	08004999 	.word	0x08004999
 8004934:	080049e1 	.word	0x080049e1
 8004938:	080049e1 	.word	0x080049e1
 800493c:	080049e1 	.word	0x080049e1
 8004940:	080049d9 	.word	0x080049d9
 8004944:	080049d1 	.word	0x080049d1
 8004948:	080049c9 	.word	0x080049c9
 800494c:	080049c1 	.word	0x080049c1
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2204      	movs	r2, #4
 8004954:	701a      	strb	r2, [r3, #0]
        break;
 8004956:	e047      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	2203      	movs	r2, #3
 800495c:	701a      	strb	r2, [r3, #0]
        break;
 800495e:	e043      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2202      	movs	r2, #2
 8004964:	701a      	strb	r2, [r3, #0]
        break;
 8004966:	e03f      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2201      	movs	r2, #1
 800496c:	701a      	strb	r2, [r3, #0]
        break;
 800496e:	e03b      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]
        break;
 8004976:	e037      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	220b      	movs	r2, #11
 800497c:	701a      	strb	r2, [r3, #0]
        break;
 800497e:	e033      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	220a      	movs	r2, #10
 8004984:	701a      	strb	r2, [r3, #0]
        break;
 8004986:	e02f      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	2209      	movs	r2, #9
 800498c:	701a      	strb	r2, [r3, #0]
        break;
 800498e:	e02b      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2208      	movs	r2, #8
 8004994:	701a      	strb	r2, [r3, #0]
        break;
 8004996:	e027      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	2214      	movs	r2, #20
 800499c:	701a      	strb	r2, [r3, #0]
        break;
 800499e:	e023      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2213      	movs	r2, #19
 80049a4:	701a      	strb	r2, [r3, #0]
        break;
 80049a6:	e01f      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	2212      	movs	r2, #18
 80049ac:	701a      	strb	r2, [r3, #0]
        break;
 80049ae:	e01b      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2211      	movs	r2, #17
 80049b4:	701a      	strb	r2, [r3, #0]
        break;
 80049b6:	e017      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	2210      	movs	r2, #16
 80049bc:	701a      	strb	r2, [r3, #0]
        break;
 80049be:	e013      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	221b      	movs	r2, #27
 80049c4:	701a      	strb	r2, [r3, #0]
        break;
 80049c6:	e00f      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	221a      	movs	r2, #26
 80049cc:	701a      	strb	r2, [r3, #0]
        break;
 80049ce:	e00b      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2219      	movs	r2, #25
 80049d4:	701a      	strb	r2, [r3, #0]
        break;
 80049d6:	e007      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2218      	movs	r2, #24
 80049dc:	701a      	strb	r2, [r3, #0]
        break;
 80049de:	e003      	b.n	80049e8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	2204      	movs	r2, #4
 80049e4:	701a      	strb	r2, [r3, #0]
        break;
 80049e6:	bf00      	nop
    }
  }

  return ret;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop

080049f4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a00:	f107 0210 	add.w	r2, r7, #16
 8004a04:	2301      	movs	r3, #1
 8004a06:	2120      	movs	r1, #32
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff febb 	bl	8004784 <lis2dw12_read_reg>
 8004a0e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d10f      	bne.n	8004a36 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 030f 	and.w	r3, r3, #15
 8004a1c:	b2da      	uxtb	r2, r3
 8004a1e:	7c3b      	ldrb	r3, [r7, #16]
 8004a20:	f362 1307 	bfi	r3, r2, #4, #4
 8004a24:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a26:	f107 0210 	add.w	r2, r7, #16
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	2120      	movs	r1, #32
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fec0 	bl	80047b4 <lis2dw12_write_reg>
 8004a34:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d107      	bne.n	8004a4c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004a3c:	f107 020c 	add.w	r2, r7, #12
 8004a40:	2301      	movs	r3, #1
 8004a42:	2122      	movs	r1, #34	@ 0x22
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff fe9d 	bl	8004784 <lis2dw12_read_reg>
 8004a4a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d110      	bne.n	8004a74 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004a52:	78fb      	ldrb	r3, [r7, #3]
 8004a54:	091b      	lsrs	r3, r3, #4
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	7b3b      	ldrb	r3, [r7, #12]
 8004a5e:	f362 0301 	bfi	r3, r2, #0, #2
 8004a62:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004a64:	f107 020c 	add.w	r2, r7, #12
 8004a68:	2301      	movs	r3, #1
 8004a6a:	2122      	movs	r1, #34	@ 0x22
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f7ff fea1 	bl	80047b4 <lis2dw12_write_reg>
 8004a72:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004a74:	697b      	ldr	r3, [r7, #20]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
	...

08004a80 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004a8a:	f107 0210 	add.w	r2, r7, #16
 8004a8e:	2301      	movs	r3, #1
 8004a90:	2120      	movs	r1, #32
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7ff fe76 	bl	8004784 <lis2dw12_read_reg>
 8004a98:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 80b3 	bne.w	8004c08 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004aa2:	f107 020c 	add.w	r2, r7, #12
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	2122      	movs	r1, #34	@ 0x22
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f7ff fe6a 	bl	8004784 <lis2dw12_read_reg>
 8004ab0:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004ab2:	7b3b      	ldrb	r3, [r7, #12]
 8004ab4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	7c3a      	ldrb	r2, [r7, #16]
 8004abe:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	2b32      	cmp	r3, #50	@ 0x32
 8004ac8:	f200 809a 	bhi.w	8004c00 <lis2dw12_data_rate_get+0x180>
 8004acc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad4 <lis2dw12_data_rate_get+0x54>)
 8004ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad2:	bf00      	nop
 8004ad4:	08004ba1 	.word	0x08004ba1
 8004ad8:	08004ba9 	.word	0x08004ba9
 8004adc:	08004bb1 	.word	0x08004bb1
 8004ae0:	08004bb9 	.word	0x08004bb9
 8004ae4:	08004bc1 	.word	0x08004bc1
 8004ae8:	08004bc9 	.word	0x08004bc9
 8004aec:	08004bd1 	.word	0x08004bd1
 8004af0:	08004bd9 	.word	0x08004bd9
 8004af4:	08004be1 	.word	0x08004be1
 8004af8:	08004be9 	.word	0x08004be9
 8004afc:	08004c01 	.word	0x08004c01
 8004b00:	08004c01 	.word	0x08004c01
 8004b04:	08004c01 	.word	0x08004c01
 8004b08:	08004c01 	.word	0x08004c01
 8004b0c:	08004c01 	.word	0x08004c01
 8004b10:	08004c01 	.word	0x08004c01
 8004b14:	08004c01 	.word	0x08004c01
 8004b18:	08004c01 	.word	0x08004c01
 8004b1c:	08004bf9 	.word	0x08004bf9
 8004b20:	08004c01 	.word	0x08004c01
 8004b24:	08004c01 	.word	0x08004c01
 8004b28:	08004c01 	.word	0x08004c01
 8004b2c:	08004c01 	.word	0x08004c01
 8004b30:	08004c01 	.word	0x08004c01
 8004b34:	08004c01 	.word	0x08004c01
 8004b38:	08004c01 	.word	0x08004c01
 8004b3c:	08004c01 	.word	0x08004c01
 8004b40:	08004c01 	.word	0x08004c01
 8004b44:	08004c01 	.word	0x08004c01
 8004b48:	08004c01 	.word	0x08004c01
 8004b4c:	08004c01 	.word	0x08004c01
 8004b50:	08004c01 	.word	0x08004c01
 8004b54:	08004c01 	.word	0x08004c01
 8004b58:	08004c01 	.word	0x08004c01
 8004b5c:	08004c01 	.word	0x08004c01
 8004b60:	08004c01 	.word	0x08004c01
 8004b64:	08004c01 	.word	0x08004c01
 8004b68:	08004c01 	.word	0x08004c01
 8004b6c:	08004c01 	.word	0x08004c01
 8004b70:	08004c01 	.word	0x08004c01
 8004b74:	08004c01 	.word	0x08004c01
 8004b78:	08004c01 	.word	0x08004c01
 8004b7c:	08004c01 	.word	0x08004c01
 8004b80:	08004c01 	.word	0x08004c01
 8004b84:	08004c01 	.word	0x08004c01
 8004b88:	08004c01 	.word	0x08004c01
 8004b8c:	08004c01 	.word	0x08004c01
 8004b90:	08004c01 	.word	0x08004c01
 8004b94:	08004c01 	.word	0x08004c01
 8004b98:	08004c01 	.word	0x08004c01
 8004b9c:	08004bf1 	.word	0x08004bf1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	701a      	strb	r2, [r3, #0]
        break;
 8004ba6:	e02f      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
        break;
 8004bae:	e02b      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]
        break;
 8004bb6:	e027      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2203      	movs	r2, #3
 8004bbc:	701a      	strb	r2, [r3, #0]
        break;
 8004bbe:	e023      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2204      	movs	r2, #4
 8004bc4:	701a      	strb	r2, [r3, #0]
        break;
 8004bc6:	e01f      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2205      	movs	r2, #5
 8004bcc:	701a      	strb	r2, [r3, #0]
        break;
 8004bce:	e01b      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2206      	movs	r2, #6
 8004bd4:	701a      	strb	r2, [r3, #0]
        break;
 8004bd6:	e017      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2207      	movs	r2, #7
 8004bdc:	701a      	strb	r2, [r3, #0]
        break;
 8004bde:	e013      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2208      	movs	r2, #8
 8004be4:	701a      	strb	r2, [r3, #0]
        break;
 8004be6:	e00f      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2209      	movs	r2, #9
 8004bec:	701a      	strb	r2, [r3, #0]
        break;
 8004bee:	e00b      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	2232      	movs	r2, #50	@ 0x32
 8004bf4:	701a      	strb	r2, [r3, #0]
        break;
 8004bf6:	e007      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2212      	movs	r2, #18
 8004bfc:	701a      	strb	r2, [r3, #0]
        break;
 8004bfe:	e003      	b.n	8004c08 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
        break;
 8004c06:	bf00      	nop
    }
  }

  return ret;
 8004c08:	697b      	ldr	r3, [r7, #20]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3718      	adds	r7, #24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop

08004c14 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b084      	sub	sp, #16
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c20:	f107 0208 	add.w	r2, r7, #8
 8004c24:	2301      	movs	r3, #1
 8004c26:	2121      	movs	r1, #33	@ 0x21
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fdab 	bl	8004784 <lis2dw12_read_reg>
 8004c2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10f      	bne.n	8004c56 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004c36:	78fb      	ldrb	r3, [r7, #3]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	7a3b      	ldrb	r3, [r7, #8]
 8004c40:	f362 03c3 	bfi	r3, r2, #3, #1
 8004c44:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004c46:	f107 0208 	add.w	r2, r7, #8
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	2121      	movs	r1, #33	@ 0x21
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff fdb0 	bl	80047b4 <lis2dw12_write_reg>
 8004c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c56:	68fb      	ldr	r3, [r7, #12]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004c6c:	f107 0208 	add.w	r2, r7, #8
 8004c70:	2301      	movs	r3, #1
 8004c72:	2125      	movs	r1, #37	@ 0x25
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f7ff fd85 	bl	8004784 <lis2dw12_read_reg>
 8004c7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004c82:	78fb      	ldrb	r3, [r7, #3]
 8004c84:	f003 0303 	and.w	r3, r3, #3
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	7a3b      	ldrb	r3, [r7, #8]
 8004c8c:	f362 1305 	bfi	r3, r2, #4, #2
 8004c90:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004c92:	f107 0208 	add.w	r2, r7, #8
 8004c96:	2301      	movs	r3, #1
 8004c98:	2125      	movs	r1, #37	@ 0x25
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7ff fd8a 	bl	80047b4 <lis2dw12_write_reg>
 8004ca0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004cb6:	f107 0208 	add.w	r2, r7, #8
 8004cba:	2301      	movs	r3, #1
 8004cbc:	2125      	movs	r1, #37	@ 0x25
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fd60 	bl	8004784 <lis2dw12_read_reg>
 8004cc4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004cc6:	7a3b      	ldrb	r3, [r7, #8]
 8004cc8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b03      	cmp	r3, #3
 8004cd0:	d81a      	bhi.n	8004d08 <lis2dw12_full_scale_get+0x5c>
 8004cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd8 <lis2dw12_full_scale_get+0x2c>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004ce9 	.word	0x08004ce9
 8004cdc:	08004cf1 	.word	0x08004cf1
 8004ce0:	08004cf9 	.word	0x08004cf9
 8004ce4:	08004d01 	.word	0x08004d01
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	2200      	movs	r2, #0
 8004cec:	701a      	strb	r2, [r3, #0]
      break;
 8004cee:	e00f      	b.n	8004d10 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
      break;
 8004cf6:	e00b      	b.n	8004d10 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	2202      	movs	r2, #2
 8004cfc:	701a      	strb	r2, [r3, #0]
      break;
 8004cfe:	e007      	b.n	8004d10 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2203      	movs	r2, #3
 8004d04:	701a      	strb	r2, [r3, #0]
      break;
 8004d06:	e003      	b.n	8004d10 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	701a      	strb	r2, [r3, #0]
      break;
 8004d0e:	bf00      	nop
  }

  return ret;
 8004d10:	68fb      	ldr	r3, [r7, #12]
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop

08004d1c <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004d26:	f107 020c 	add.w	r2, r7, #12
 8004d2a:	2306      	movs	r3, #6
 8004d2c:	2128      	movs	r1, #40	@ 0x28
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fd28 	bl	8004784 <lis2dw12_read_reg>
 8004d34:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004d36:	7b7b      	ldrb	r3, [r7, #13]
 8004d38:	b21a      	sxth	r2, r3
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	7b3a      	ldrb	r2, [r7, #12]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	b21a      	sxth	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	3302      	adds	r3, #2
 8004d5c:	b212      	sxth	r2, r2
 8004d5e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	3302      	adds	r3, #2
 8004d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	7bba      	ldrb	r2, [r7, #14]
 8004d70:	4413      	add	r3, r2
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	3302      	adds	r3, #2
 8004d78:	b212      	sxth	r2, r2
 8004d7a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004d7c:	7c7a      	ldrb	r2, [r7, #17]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	3304      	adds	r3, #4
 8004d82:	b212      	sxth	r2, r2
 8004d84:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	7c3a      	ldrb	r2, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	b212      	sxth	r2, r2
 8004da0:	801a      	strh	r2, [r3, #0]

  return ret;
 8004da2:	697b      	ldr	r3, [r7, #20]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004db6:	2301      	movs	r3, #1
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	210f      	movs	r1, #15
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff fce1 	bl	8004784 <lis2dw12_read_reg>
 8004dc2:	60f8      	str	r0, [r7, #12]

  return ret;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004dda:	f107 0208 	add.w	r2, r7, #8
 8004dde:	2301      	movs	r3, #1
 8004de0:	2121      	movs	r1, #33	@ 0x21
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7ff fcce 	bl	8004784 <lis2dw12_read_reg>
 8004de8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	b2da      	uxtb	r2, r3
 8004df8:	7a3b      	ldrb	r3, [r7, #8]
 8004dfa:	f362 0382 	bfi	r3, r2, #2, #1
 8004dfe:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004e00:	f107 0208 	add.w	r2, r7, #8
 8004e04:	2301      	movs	r3, #1
 8004e06:	2121      	movs	r1, #33	@ 0x21
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff fcd3 	bl	80047b4 <lis2dw12_write_reg>
 8004e0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e10:	68fb      	ldr	r3, [r7, #12]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004e1a:	b580      	push	{r7, lr}
 8004e1c:	b084      	sub	sp, #16
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
 8004e22:	460b      	mov	r3, r1
 8004e24:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004e26:	f107 0208 	add.w	r2, r7, #8
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	212e      	movs	r1, #46	@ 0x2e
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fca8 	bl	8004784 <lis2dw12_read_reg>
 8004e34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10f      	bne.n	8004e5c <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	b2da      	uxtb	r2, r3
 8004e44:	7a3b      	ldrb	r3, [r7, #8]
 8004e46:	f362 1347 	bfi	r3, r2, #5, #3
 8004e4a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004e4c:	f107 0208 	add.w	r2, r7, #8
 8004e50:	2301      	movs	r3, #1
 8004e52:	212e      	movs	r1, #46	@ 0x2e
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f7ff fcad 	bl	80047b4 <lis2dw12_write_reg>
 8004e5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	e067      	b.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681a      	ldr	r2, [r3, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	685a      	ldr	r2, [r3, #4]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	7b1a      	ldrb	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	691a      	ldr	r2, [r3, #16]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	699a      	ldr	r2, [r3, #24]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a28      	ldr	r2, [pc, #160]	@ (8004f60 <LIS2MDL_RegisterBusIO+0xf8>)
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a27      	ldr	r2, [pc, #156]	@ (8004f64 <LIS2MDL_RegisterBusIO+0xfc>)
 8004ec6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	69da      	ldr	r2, [r3, #28]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d103      	bne.n	8004ee6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004ede:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee2:	60fb      	str	r3, [r7, #12]
 8004ee4:	e036      	b.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4798      	blx	r3
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	e02c      	b.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d028      	beq.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d123      	bne.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d10d      	bne.n	8004f30 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004f14:	2334      	movs	r3, #52	@ 0x34
 8004f16:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004f18:	7afb      	ldrb	r3, [r7, #11]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	2162      	movs	r1, #98	@ 0x62
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb18 	bl	8005554 <LIS2MDL_Write_Reg>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d014      	beq.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2e:	e012      	b.n	8004f56 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d101      	bne.n	8004f3c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	e00c      	b.n	8004f56 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	3320      	adds	r3, #32
 8004f40:	2101      	movs	r1, #1
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 ff69 	bl	8005e1a <lis2mdl_i2c_interface_set>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f52:	e000      	b.n	8004f56 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004f54:	68fb      	ldr	r3, [r7, #12]
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	080055ab 	.word	0x080055ab
 8004f64:	0800562d 	.word	0x0800562d

08004f68 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d144      	bne.n	8005002 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004f78:	f107 0208 	add.w	r2, r7, #8
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	2162      	movs	r1, #98	@ 0x62
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb94 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	e06c      	b.n	800506c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f92:	f107 020c 	add.w	r2, r7, #12
 8004f96:	2301      	movs	r3, #1
 8004f98:	2160      	movs	r1, #96	@ 0x60
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f000 fb87 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	e05f      	b.n	800506c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004fac:	7a3b      	ldrb	r3, [r7, #8]
 8004fae:	f043 0310 	orr.w	r3, r3, #16
 8004fb2:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004fb4:	7a3b      	ldrb	r3, [r7, #8]
 8004fb6:	f36f 0341 	bfc	r3, #1, #1
 8004fba:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004fbc:	7b3b      	ldrb	r3, [r7, #12]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f362 0301 	bfi	r3, r2, #0, #2
 8004fc4:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004fc6:	7b3b      	ldrb	r3, [r7, #12]
 8004fc8:	f043 030c 	orr.w	r3, r3, #12
 8004fcc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004fce:	f107 0208 	add.w	r2, r7, #8
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	2162      	movs	r1, #98	@ 0x62
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fca8 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe6:	e041      	b.n	800506c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004fe8:	f107 020c 	add.w	r2, r7, #12
 8004fec:	2301      	movs	r3, #1
 8004fee:	2160      	movs	r1, #96	@ 0x60
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fc9b 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d032      	beq.n	8005062 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004ffc:	f04f 33ff 	mov.w	r3, #4294967295
 8005000:	e034      	b.n	800506c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3320      	adds	r3, #32
 8005006:	2101      	movs	r1, #1
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fe61 	bl	8005cd0 <lis2mdl_block_data_update_set>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8005014:	f04f 33ff 	mov.w	r3, #4294967295
 8005018:	e028      	b.n	800506c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3320      	adds	r3, #32
 800501e:	2102      	movs	r1, #2
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fdd1 	bl	8005bc8 <lis2mdl_operating_mode_set>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295
 8005030:	e01c      	b.n	800506c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3320      	adds	r3, #32
 8005036:	2103      	movs	r1, #3
 8005038:	4618      	mov	r0, r3
 800503a:	f000 fdeb 	bl	8005c14 <lis2mdl_data_rate_set>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d002      	beq.n	800504a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8005044:	f04f 33ff 	mov.w	r3, #4294967295
 8005048:	e010      	b.n	800506c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	3320      	adds	r3, #32
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f000 febc 	bl	8005dce <lis2mdl_self_test_set>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	e004      	b.n	800506c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 f8a5 	bl	80051cc <LIS2MDL_MAG_Disable>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8005088:	f04f 33ff 	mov.w	r3, #4294967295
 800508c:	e004      	b.n	8005098 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3708      	adds	r7, #8
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d10b      	bne.n	80050ca <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80050b2:	2301      	movs	r3, #1
 80050b4:	683a      	ldr	r2, [r7, #0]
 80050b6:	214f      	movs	r1, #79	@ 0x4f
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 faf8 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00e      	beq.n	80050e2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80050c4:	f04f 33ff 	mov.w	r3, #4294967295
 80050c8:	e00c      	b.n	80050e4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	3320      	adds	r3, #32
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f000 fe6b 	bl	8005dac <lis2mdl_device_id_get>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80050dc:	f04f 33ff 	mov.w	r3, #4294967295
 80050e0:	e000      	b.n	80050e4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3708      	adds	r7, #8
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2201      	movs	r2, #1
 8005106:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2200      	movs	r2, #0
 8005112:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2232      	movs	r2, #50	@ 0x32
 800511e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	4a04      	ldr	r2, [pc, #16]	@ (8005144 <LIS2MDL_GetCapabilities+0x58>)
 8005134:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	42c80000 	.word	0x42c80000

08005148 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005156:	2b01      	cmp	r3, #1
 8005158:	d101      	bne.n	800515e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800515a:	2300      	movs	r3, #0
 800515c:	e032      	b.n	80051c4 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b03      	cmp	r3, #3
 8005164:	d11d      	bne.n	80051a2 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005166:	f107 020c 	add.w	r2, r7, #12
 800516a:	2301      	movs	r3, #1
 800516c:	2160      	movs	r1, #96	@ 0x60
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa9d 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	e021      	b.n	80051c4 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005180:	7b3b      	ldrb	r3, [r7, #12]
 8005182:	f36f 0301 	bfc	r3, #0, #2
 8005186:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005188:	f107 020c 	add.w	r2, r7, #12
 800518c:	2301      	movs	r3, #1
 800518e:	2160      	movs	r1, #96	@ 0x60
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fbcb 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	e010      	b.n	80051c4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3320      	adds	r3, #32
 80051a6:	2100      	movs	r1, #0
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fd0d 	bl	8005bc8 <lis2mdl_operating_mode_set>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80051b4:	f04f 33ff 	mov.w	r3, #4294967295
 80051b8:	e004      	b.n	80051c4 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80051de:	2300      	movs	r3, #0
 80051e0:	e033      	b.n	800524a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d11e      	bne.n	8005228 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80051ea:	f107 020c 	add.w	r2, r7, #12
 80051ee:	2301      	movs	r3, #1
 80051f0:	2160      	movs	r1, #96	@ 0x60
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fa5b 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80051fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005202:	e022      	b.n	800524a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005204:	7b3b      	ldrb	r3, [r7, #12]
 8005206:	2202      	movs	r2, #2
 8005208:	f362 0301 	bfi	r3, r2, #0, #2
 800520c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800520e:	f107 020c 	add.w	r2, r7, #12
 8005212:	2301      	movs	r3, #1
 8005214:	2160      	movs	r1, #96	@ 0x60
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fb88 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295
 8005226:	e010      	b.n	800524a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3320      	adds	r3, #32
 800522c:	2102      	movs	r1, #2
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fcca 	bl	8005bc8 <lis2mdl_operating_mode_set>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800523a:	f04f 33ff 	mov.w	r3, #4294967295
 800523e:	e004      	b.n	800524a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005262:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3320      	adds	r3, #32
 8005286:	f107 020b 	add.w	r2, r7, #11
 800528a:	4611      	mov	r1, r2
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fce7 	bl	8005c60 <lis2mdl_data_rate_get>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d002      	beq.n	800529e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005298:	f04f 33ff 	mov.w	r3, #4294967295
 800529c:	e023      	b.n	80052e6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800529e:	7afb      	ldrb	r3, [r7, #11]
 80052a0:	2b03      	cmp	r3, #3
 80052a2:	d81b      	bhi.n	80052dc <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80052a4:	a201      	add	r2, pc, #4	@ (adr r2, 80052ac <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80052a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052aa:	bf00      	nop
 80052ac:	080052bd 	.word	0x080052bd
 80052b0:	080052c5 	.word	0x080052c5
 80052b4:	080052cd 	.word	0x080052cd
 80052b8:	080052d5 	.word	0x080052d5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4a0c      	ldr	r2, [pc, #48]	@ (80052f0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80052c0:	601a      	str	r2, [r3, #0]
      break;
 80052c2:	e00f      	b.n	80052e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	4a0b      	ldr	r2, [pc, #44]	@ (80052f4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80052c8:	601a      	str	r2, [r3, #0]
      break;
 80052ca:	e00b      	b.n	80052e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80052d0:	601a      	str	r2, [r3, #0]
      break;
 80052d2:	e007      	b.n	80052e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80052d8:	601a      	str	r2, [r3, #0]
      break;
 80052da:	e003      	b.n	80052e4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80052dc:	f04f 33ff 	mov.w	r3, #4294967295
 80052e0:	60fb      	str	r3, [r7, #12]
      break;
 80052e2:	bf00      	nop
  }

  return ret;
 80052e4:	68fb      	ldr	r3, [r7, #12]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	41200000 	.word	0x41200000
 80052f4:	41a00000 	.word	0x41a00000
 80052f8:	42480000 	.word	0x42480000
 80052fc:	42c80000 	.word	0x42c80000

08005300 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 800530c:	edd7 7a00 	vldr	s15, [r7]
 8005310:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005314:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531c:	d801      	bhi.n	8005322 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 800531e:	2300      	movs	r3, #0
 8005320:	e016      	b.n	8005350 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005322:	edd7 7a00 	vldr	s15, [r7]
 8005326:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800532a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800532e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005332:	d801      	bhi.n	8005338 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005334:	2301      	movs	r3, #1
 8005336:	e00b      	b.n	8005350 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005338:	edd7 7a00 	vldr	s15, [r7]
 800533c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80053c4 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005340:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005348:	d801      	bhi.n	800534e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800534a:	2302      	movs	r3, #2
 800534c:	e000      	b.n	8005350 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800534e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005350:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d121      	bne.n	800539e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800535a:	f107 020c 	add.w	r2, r7, #12
 800535e:	2301      	movs	r3, #1
 8005360:	2160      	movs	r1, #96	@ 0x60
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f9a3 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d002      	beq.n	8005374 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	e022      	b.n	80053ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005374:	7bfb      	ldrb	r3, [r7, #15]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	b2da      	uxtb	r2, r3
 800537c:	7b3b      	ldrb	r3, [r7, #12]
 800537e:	f362 0383 	bfi	r3, r2, #2, #2
 8005382:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005384:	f107 020c 	add.w	r2, r7, #12
 8005388:	2301      	movs	r3, #1
 800538a:	2160      	movs	r1, #96	@ 0x60
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 facd 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005398:	f04f 33ff 	mov.w	r3, #4294967295
 800539c:	e00d      	b.n	80053ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3320      	adds	r3, #32
 80053a2:	7bfa      	ldrb	r2, [r7, #15]
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fc34 	bl	8005c14 <lis2mdl_data_rate_set>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d002      	beq.n	80053b8 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
 80053b6:	e000      	b.n	80053ba <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	42480000 	.word	0x42480000

080053c8 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	2232      	movs	r2, #50	@ 0x32
 80053d6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	370c      	adds	r7, #12
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b083      	sub	sp, #12
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80053fe:	b580      	push	{r7, lr}
 8005400:	b084      	sub	sp, #16
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3320      	adds	r3, #32
 800540c:	f107 0208 	add.w	r2, r7, #8
 8005410:	4611      	mov	r1, r2
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fc82 	bl	8005d1c <lis2mdl_magnetic_raw_get>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 800541e:	f04f 33ff 	mov.w	r3, #4294967295
 8005422:	e00c      	b.n	800543e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005424:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800542c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005434:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b088      	sub	sp, #32
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	2b03      	cmp	r3, #3
 8005456:	d134      	bne.n	80054c2 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005458:	f107 0218 	add.w	r2, r7, #24
 800545c:	2306      	movs	r3, #6
 800545e:	2168      	movs	r1, #104	@ 0x68
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f924 	bl	80056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800546c:	f04f 33ff 	mov.w	r3, #4294967295
 8005470:	e06c      	b.n	800554c <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005472:	7e7b      	ldrb	r3, [r7, #25]
 8005474:	b21b      	sxth	r3, r3
 8005476:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005478:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800547c:	b29b      	uxth	r3, r3
 800547e:	021b      	lsls	r3, r3, #8
 8005480:	b29b      	uxth	r3, r3
 8005482:	7e3a      	ldrb	r2, [r7, #24]
 8005484:	4413      	add	r3, r2
 8005486:	b29b      	uxth	r3, r3
 8005488:	b21b      	sxth	r3, r3
 800548a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800548c:	7efb      	ldrb	r3, [r7, #27]
 800548e:	b21b      	sxth	r3, r3
 8005490:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005492:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005496:	b29b      	uxth	r3, r3
 8005498:	021b      	lsls	r3, r3, #8
 800549a:	b29b      	uxth	r3, r3
 800549c:	7eba      	ldrb	r2, [r7, #26]
 800549e:	4413      	add	r3, r2
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	b21b      	sxth	r3, r3
 80054a4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80054a6:	7f7b      	ldrb	r3, [r7, #29]
 80054a8:	b21b      	sxth	r3, r3
 80054aa:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80054ac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	7f3a      	ldrb	r2, [r7, #28]
 80054b8:	4413      	add	r3, r2
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	b21b      	sxth	r3, r3
 80054be:	82bb      	strh	r3, [r7, #20]
 80054c0:	e00d      	b.n	80054de <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3320      	adds	r3, #32
 80054c6:	f107 0210 	add.w	r2, r7, #16
 80054ca:	4611      	mov	r1, r2
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fc25 	bl	8005d1c <lis2mdl_magnetic_raw_get>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80054d8:	f04f 33ff 	mov.w	r3, #4294967295
 80054dc:	e036      	b.n	800554c <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80054de:	f107 030c 	add.w	r3, r7, #12
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff feb4 	bl	8005252 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80054ea:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80054ee:	ee07 3a90 	vmov	s15, r3
 80054f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80054f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005502:	ee17 2a90 	vmov	r2, s15
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800550a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800550e:	ee07 3a90 	vmov	s15, r3
 8005512:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005516:	edd7 7a03 	vldr	s15, [r7, #12]
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005522:	ee17 2a90 	vmov	r2, s15
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800552a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005536:	edd7 7a03 	vldr	s15, [r7, #12]
 800553a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800553e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005542:	ee17 2a90 	vmov	r2, s15
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800554a:	2300      	movs	r3, #0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	70fb      	strb	r3, [r7, #3]
 8005560:	4613      	mov	r3, r2
 8005562:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d10b      	bne.n	8005584 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800556c:	1cba      	adds	r2, r7, #2
 800556e:	78f9      	ldrb	r1, [r7, #3]
 8005570:	2301      	movs	r3, #1
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9da 	bl	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d010      	beq.n	80055a0 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	e00e      	b.n	80055a2 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f103 0020 	add.w	r0, r3, #32
 800558a:	1cba      	adds	r2, r7, #2
 800558c:	78f9      	ldrb	r1, [r7, #3]
 800558e:	2301      	movs	r3, #1
 8005590:	f000 fb02 	bl	8005b98 <lis2mdl_write_reg>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800559a:	f04f 33ff 	mov.w	r3, #4294967295
 800559e:	e000      	b.n	80055a2 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80055a0:	2300      	movs	r3, #0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80055aa:	b590      	push	{r4, r7, lr}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	461a      	mov	r2, r3
 80055b6:	460b      	mov	r3, r1
 80055b8:	72fb      	strb	r3, [r7, #11]
 80055ba:	4613      	mov	r3, r2
 80055bc:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d10e      	bne.n	80055e8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	695c      	ldr	r4, [r3, #20]
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	7b1b      	ldrb	r3, [r3, #12]
 80055d2:	4618      	mov	r0, r3
 80055d4:	7afb      	ldrb	r3, [r7, #11]
 80055d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	4619      	mov	r1, r3
 80055de:	893b      	ldrh	r3, [r7, #8]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	47a0      	blx	r4
 80055e4:	4603      	mov	r3, r0
 80055e6:	e01d      	b.n	8005624 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d10b      	bne.n	8005608 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	695c      	ldr	r4, [r3, #20]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	7b1b      	ldrb	r3, [r3, #12]
 80055f8:	4618      	mov	r0, r3
 80055fa:	7afb      	ldrb	r3, [r7, #11]
 80055fc:	b299      	uxth	r1, r3
 80055fe:	893b      	ldrh	r3, [r7, #8]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	47a0      	blx	r4
 8005604:	4603      	mov	r3, r0
 8005606:	e00d      	b.n	8005624 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	695c      	ldr	r4, [r3, #20]
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	7b1b      	ldrb	r3, [r3, #12]
 8005610:	4618      	mov	r0, r3
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	893b      	ldrh	r3, [r7, #8]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	47a0      	blx	r4
 8005622:	4603      	mov	r3, r0
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	bd90      	pop	{r4, r7, pc}

0800562c <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800562c:	b590      	push	{r4, r7, lr}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	607a      	str	r2, [r7, #4]
 8005636:	461a      	mov	r2, r3
 8005638:	460b      	mov	r3, r1
 800563a:	72fb      	strb	r3, [r7, #11]
 800563c:	4613      	mov	r3, r2
 800563e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10e      	bne.n	800566a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	691c      	ldr	r4, [r3, #16]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	7b1b      	ldrb	r3, [r3, #12]
 8005654:	4618      	mov	r0, r3
 8005656:	7afb      	ldrb	r3, [r7, #11]
 8005658:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800565c:	b2db      	uxtb	r3, r3
 800565e:	4619      	mov	r1, r3
 8005660:	893b      	ldrh	r3, [r7, #8]
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	47a0      	blx	r4
 8005666:	4603      	mov	r3, r0
 8005668:	e01d      	b.n	80056a6 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b03      	cmp	r3, #3
 8005670:	d10b      	bne.n	800568a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	691c      	ldr	r4, [r3, #16]
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	7b1b      	ldrb	r3, [r3, #12]
 800567a:	4618      	mov	r0, r3
 800567c:	7afb      	ldrb	r3, [r7, #11]
 800567e:	b299      	uxth	r1, r3
 8005680:	893b      	ldrh	r3, [r7, #8]
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	47a0      	blx	r4
 8005686:	4603      	mov	r3, r0
 8005688:	e00d      	b.n	80056a6 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	691c      	ldr	r4, [r3, #16]
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	7b1b      	ldrb	r3, [r3, #12]
 8005692:	4618      	mov	r0, r3
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800569a:	b2db      	uxtb	r3, r3
 800569c:	4619      	mov	r1, r3
 800569e:	893b      	ldrh	r3, [r7, #8]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	47a0      	blx	r4
 80056a4:	4603      	mov	r3, r0
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	371c      	adds	r7, #28
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd90      	pop	{r4, r7, pc}

080056ae <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b08c      	sub	sp, #48	@ 0x30
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	60f8      	str	r0, [r7, #12]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	461a      	mov	r2, r3
 80056ba:	460b      	mov	r3, r1
 80056bc:	72fb      	strb	r3, [r7, #11]
 80056be:	4613      	mov	r3, r2
 80056c0:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80056c8:	2340      	movs	r3, #64	@ 0x40
 80056ca:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80056ce:	2300      	movs	r3, #0
 80056d0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80056d4:	233d      	movs	r3, #61	@ 0x3d
 80056d6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80056d8:	2315      	movs	r3, #21
 80056da:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80056de:	2316      	movs	r3, #22
 80056e0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80056e4:	2317      	movs	r3, #23
 80056e6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80056ea:	2314      	movs	r3, #20
 80056ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80056f0:	2344      	movs	r3, #68	@ 0x44
 80056f2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80056f4:	2302      	movs	r3, #2
 80056f6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80056fa:	2339      	movs	r3, #57	@ 0x39
 80056fc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005700:	2301      	movs	r3, #1
 8005702:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005706:	2329      	movs	r3, #41	@ 0x29
 8005708:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 800570c:	231e      	movs	r3, #30
 800570e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 8005718:	893b      	ldrh	r3, [r7, #8]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 800571e:	2310      	movs	r3, #16
 8005720:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005724:	2300      	movs	r3, #0
 8005726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800572a:	2340      	movs	r3, #64	@ 0x40
 800572c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f103 0020 	add.w	r0, r3, #32
 8005736:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800573a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800573e:	2301      	movs	r3, #1
 8005740:	f000 fa2a 	bl	8005b98 <lis2mdl_write_reg>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e0e9      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f103 0020 	add.w	r0, r3, #32
 8005756:	f107 021f 	add.w	r2, r7, #31
 800575a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800575e:	2301      	movs	r3, #1
 8005760:	f000 fa1a 	bl	8005b98 <lis2mdl_write_reg>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800576a:	f04f 33ff 	mov.w	r3, #4294967295
 800576e:	e0d9      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f103 0020 	add.w	r0, r3, #32
 8005776:	f107 020b 	add.w	r2, r7, #11
 800577a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800577e:	2301      	movs	r3, #1
 8005780:	f000 fa0a 	bl	8005b98 <lis2mdl_write_reg>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800578a:	f04f 33ff 	mov.w	r3, #4294967295
 800578e:	e0c9      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f103 0020 	add.w	r0, r3, #32
 8005796:	f107 021d 	add.w	r2, r7, #29
 800579a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800579e:	2301      	movs	r3, #1
 80057a0:	f000 f9fa 	bl	8005b98 <lis2mdl_write_reg>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
 80057ae:	e0b9      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f103 0020 	add.w	r0, r3, #32
 80057b6:	f107 021e 	add.w	r2, r7, #30
 80057ba:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80057be:	2301      	movs	r3, #1
 80057c0:	f000 f9ea 	bl	8005b98 <lis2mdl_write_reg>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d002      	beq.n	80057d0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80057ca:	f04f 33ff 	mov.w	r3, #4294967295
 80057ce:	e0a9      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f103 0020 	add.w	r0, r3, #32
 80057d6:	f107 0220 	add.w	r2, r7, #32
 80057da:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80057de:	2301      	movs	r3, #1
 80057e0:	f000 f9da 	bl	8005b98 <lis2mdl_write_reg>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80057ea:	f04f 33ff 	mov.w	r3, #4294967295
 80057ee:	e099      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f103 0020 	add.w	r0, r3, #32
 80057f6:	f107 021c 	add.w	r2, r7, #28
 80057fa:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80057fe:	2301      	movs	r3, #1
 8005800:	f000 f9b2 	bl	8005b68 <lis2mdl_read_reg>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	e089      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005810:	7f3b      	ldrb	r3, [r7, #28]
 8005812:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005816:	429a      	cmp	r2, r3
 8005818:	d102      	bne.n	8005820 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800581a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800581e:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f103 0020 	add.w	r0, r3, #32
 8005826:	f107 021c 	add.w	r2, r7, #28
 800582a:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 800582e:	2301      	movs	r3, #1
 8005830:	f000 f9b2 	bl	8005b98 <lis2mdl_write_reg>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800583a:	f04f 33ff 	mov.w	r3, #4294967295
 800583e:	e071      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f103 0020 	add.w	r0, r3, #32
 8005846:	f107 0214 	add.w	r2, r7, #20
 800584a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800584e:	2306      	movs	r3, #6
 8005850:	f000 f98a 	bl	8005b68 <lis2mdl_read_reg>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d002      	beq.n	8005860 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800585a:	f04f 33ff 	mov.w	r3, #4294967295
 800585e:	e061      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f103 0020 	add.w	r0, r3, #32
 8005866:	f107 021b 	add.w	r2, r7, #27
 800586a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800586e:	2301      	movs	r3, #1
 8005870:	f000 f97a 	bl	8005b68 <lis2mdl_read_reg>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295
 800587e:	e051      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005880:	7efa      	ldrb	r2, [r7, #27]
 8005882:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005886:	4013      	ands	r3, r2
 8005888:	b2db      	uxtb	r3, r3
 800588a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800588e:	429a      	cmp	r2, r3
 8005890:	d1e6      	bne.n	8005860 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f103 0020 	add.w	r0, r3, #32
 8005898:	f107 021b 	add.w	r2, r7, #27
 800589c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80058a0:	2301      	movs	r3, #1
 80058a2:	f000 f961 	bl	8005b68 <lis2mdl_read_reg>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80058ac:	f04f 33ff 	mov.w	r3, #4294967295
 80058b0:	e038      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80058b2:	7efa      	ldrb	r2, [r7, #27]
 80058b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80058b8:	4013      	ands	r3, r2
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d1e6      	bne.n	8005892 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f103 0020 	add.w	r0, r3, #32
 80058ca:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80058ce:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80058d2:	2301      	movs	r3, #1
 80058d4:	f000 f960 	bl	8005b98 <lis2mdl_write_reg>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e01f      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f103 0020 	add.w	r0, r3, #32
 80058ea:	893b      	ldrh	r3, [r7, #8]
 80058ec:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	f000 f939 	bl	8005b68 <lis2mdl_read_reg>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80058fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005900:	e010      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f103 0020 	add.w	r0, r3, #32
 8005908:	f107 0220 	add.w	r2, r7, #32
 800590c:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005910:	2301      	movs	r3, #1
 8005912:	f000 f941 	bl	8005b98 <lis2mdl_write_reg>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 800591c:	f04f 33ff 	mov.w	r3, #4294967295
 8005920:	e000      	b.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3730      	adds	r7, #48	@ 0x30
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	461a      	mov	r2, r3
 8005938:	460b      	mov	r3, r1
 800593a:	72fb      	strb	r3, [r7, #11]
 800593c:	4613      	mov	r3, r2
 800593e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005946:	2340      	movs	r3, #64	@ 0x40
 8005948:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005952:	233c      	movs	r3, #60	@ 0x3c
 8005954:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005956:	2315      	movs	r3, #21
 8005958:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800595c:	2316      	movs	r3, #22
 800595e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005962:	2317      	movs	r3, #23
 8005964:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005968:	2300      	movs	r3, #0
 800596a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800596c:	2314      	movs	r3, #20
 800596e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005972:	2344      	movs	r3, #68	@ 0x44
 8005974:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005976:	2339      	movs	r3, #57	@ 0x39
 8005978:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005982:	2329      	movs	r3, #41	@ 0x29
 8005984:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005988:	231e      	movs	r3, #30
 800598a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800598e:	2301      	movs	r3, #1
 8005990:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800599a:	2300      	movs	r3, #0
 800599c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80059a0:	2340      	movs	r3, #64	@ 0x40
 80059a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 80059a6:	230e      	movs	r3, #14
 80059a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f103 0020 	add.w	r0, r3, #32
 80059b2:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80059b6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80059ba:	2301      	movs	r3, #1
 80059bc:	f000 f8ec 	bl	8005b98 <lis2mdl_write_reg>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d002      	beq.n	80059cc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 80059c6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ca:	e0c9      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f103 0020 	add.w	r0, r3, #32
 80059d2:	f107 021f 	add.w	r2, r7, #31
 80059d6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80059da:	2301      	movs	r3, #1
 80059dc:	f000 f8dc 	bl	8005b98 <lis2mdl_write_reg>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d002      	beq.n	80059ec <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80059e6:	f04f 33ff 	mov.w	r3, #4294967295
 80059ea:	e0b9      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f103 0020 	add.w	r0, r3, #32
 80059f2:	f107 020b 	add.w	r2, r7, #11
 80059f6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80059fa:	2301      	movs	r3, #1
 80059fc:	f000 f8cc 	bl	8005b98 <lis2mdl_write_reg>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005a06:	f04f 33ff 	mov.w	r3, #4294967295
 8005a0a:	e0a9      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f103 0020 	add.w	r0, r3, #32
 8005a12:	f107 021e 	add.w	r2, r7, #30
 8005a16:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	f000 f8bc 	bl	8005b98 <lis2mdl_write_reg>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005a26:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2a:	e099      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f103 0020 	add.w	r0, r3, #32
 8005a32:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005a36:	2301      	movs	r3, #1
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	f000 f8ad 	bl	8005b98 <lis2mdl_write_reg>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005a44:	f04f 33ff 	mov.w	r3, #4294967295
 8005a48:	e08a      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f103 0020 	add.w	r0, r3, #32
 8005a50:	f107 021d 	add.w	r2, r7, #29
 8005a54:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f000 f89d 	bl	8005b98 <lis2mdl_write_reg>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d002      	beq.n	8005a6a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005a64:	f04f 33ff 	mov.w	r3, #4294967295
 8005a68:	e07a      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f103 0020 	add.w	r0, r3, #32
 8005a70:	f107 0220 	add.w	r2, r7, #32
 8005a74:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f000 f88d 	bl	8005b98 <lis2mdl_write_reg>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005a84:	f04f 33ff 	mov.w	r3, #4294967295
 8005a88:	e06a      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f103 0020 	add.w	r0, r3, #32
 8005a90:	f107 021c 	add.w	r2, r7, #28
 8005a94:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f000 f865 	bl	8005b68 <lis2mdl_read_reg>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa8:	e05a      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005aaa:	7f3b      	ldrb	r3, [r7, #28]
 8005aac:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d102      	bne.n	8005aba <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ab8:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f103 0020 	add.w	r0, r3, #32
 8005ac0:	f107 021c 	add.w	r2, r7, #28
 8005ac4:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f000 f865 	bl	8005b98 <lis2mdl_write_reg>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad8:	e042      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f103 0020 	add.w	r0, r3, #32
 8005ae0:	f107 0214 	add.w	r2, r7, #20
 8005ae4:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005ae8:	2306      	movs	r3, #6
 8005aea:	f000 f83d 	bl	8005b68 <lis2mdl_read_reg>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d002      	beq.n	8005afa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005af4:	f04f 33ff 	mov.w	r3, #4294967295
 8005af8:	e032      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f103 0020 	add.w	r0, r3, #32
 8005b00:	f107 021b 	add.w	r2, r7, #27
 8005b04:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005b08:	2301      	movs	r3, #1
 8005b0a:	f000 f82d 	bl	8005b68 <lis2mdl_read_reg>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005b14:	f04f 33ff 	mov.w	r3, #4294967295
 8005b18:	e022      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005b1a:	7efa      	ldrb	r2, [r7, #27]
 8005b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b20:	4013      	ands	r3, r2
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1e6      	bne.n	8005afa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f103 0020 	add.w	r0, r3, #32
 8005b32:	f107 021b 	add.w	r2, r7, #27
 8005b36:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	f000 f814 	bl	8005b68 <lis2mdl_read_reg>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d002      	beq.n	8005b4c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005b46:	f04f 33ff 	mov.w	r3, #4294967295
 8005b4a:	e009      	b.n	8005b60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005b4c:	7efa      	ldrb	r2, [r7, #27]
 8005b4e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005b52:	4013      	ands	r3, r2
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d1e6      	bne.n	8005b2c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3730      	adds	r7, #48	@ 0x30
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005b68:	b590      	push	{r4, r7, lr}
 8005b6a:	b087      	sub	sp, #28
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	460b      	mov	r3, r1
 8005b76:	72fb      	strb	r3, [r7, #11]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	685c      	ldr	r4, [r3, #4]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	68d8      	ldr	r0, [r3, #12]
 8005b84:	893b      	ldrh	r3, [r7, #8]
 8005b86:	7af9      	ldrb	r1, [r7, #11]
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	47a0      	blx	r4
 8005b8c:	6178      	str	r0, [r7, #20]

  return ret;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	371c      	adds	r7, #28
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd90      	pop	{r4, r7, pc}

08005b98 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005b98:	b590      	push	{r4, r7, lr}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	607a      	str	r2, [r7, #4]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	72fb      	strb	r3, [r7, #11]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681c      	ldr	r4, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	68d8      	ldr	r0, [r3, #12]
 8005bb4:	893b      	ldrh	r3, [r7, #8]
 8005bb6:	7af9      	ldrb	r1, [r7, #11]
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	47a0      	blx	r4
 8005bbc:	6178      	str	r0, [r7, #20]

  return ret;
 8005bbe:	697b      	ldr	r3, [r7, #20]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd90      	pop	{r4, r7, pc}

08005bc8 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005bd4:	f107 0208 	add.w	r2, r7, #8
 8005bd8:	2301      	movs	r3, #1
 8005bda:	2160      	movs	r1, #96	@ 0x60
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7ff ffc3 	bl	8005b68 <lis2mdl_read_reg>
 8005be2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10f      	bne.n	8005c0a <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005bea:	78fb      	ldrb	r3, [r7, #3]
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	b2da      	uxtb	r2, r3
 8005bf2:	7a3b      	ldrb	r3, [r7, #8]
 8005bf4:	f362 0301 	bfi	r3, r2, #0, #2
 8005bf8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	2301      	movs	r3, #1
 8005c00:	2160      	movs	r1, #96	@ 0x60
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff ffc8 	bl	8005b98 <lis2mdl_write_reg>
 8005c08:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005c20:	f107 0208 	add.w	r2, r7, #8
 8005c24:	2301      	movs	r3, #1
 8005c26:	2160      	movs	r1, #96	@ 0x60
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff9d 	bl	8005b68 <lis2mdl_read_reg>
 8005c2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10f      	bne.n	8005c56 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005c36:	78fb      	ldrb	r3, [r7, #3]
 8005c38:	f003 0303 	and.w	r3, r3, #3
 8005c3c:	b2da      	uxtb	r2, r3
 8005c3e:	7a3b      	ldrb	r3, [r7, #8]
 8005c40:	f362 0383 	bfi	r3, r2, #2, #2
 8005c44:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005c46:	f107 0208 	add.w	r2, r7, #8
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	2160      	movs	r1, #96	@ 0x60
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ffa2 	bl	8005b98 <lis2mdl_write_reg>
 8005c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c56:	68fb      	ldr	r3, [r7, #12]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005c6a:	f107 0208 	add.w	r2, r7, #8
 8005c6e:	2301      	movs	r3, #1
 8005c70:	2160      	movs	r1, #96	@ 0x60
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7ff ff78 	bl	8005b68 <lis2mdl_read_reg>
 8005c78:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005c7a:	7a3b      	ldrb	r3, [r7, #8]
 8005c7c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d81a      	bhi.n	8005cbc <lis2mdl_data_rate_get+0x5c>
 8005c86:	a201      	add	r2, pc, #4	@ (adr r2, 8005c8c <lis2mdl_data_rate_get+0x2c>)
 8005c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8c:	08005c9d 	.word	0x08005c9d
 8005c90:	08005ca5 	.word	0x08005ca5
 8005c94:	08005cad 	.word	0x08005cad
 8005c98:	08005cb5 	.word	0x08005cb5
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	701a      	strb	r2, [r3, #0]
      break;
 8005ca2:	e00f      	b.n	8005cc4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	701a      	strb	r2, [r3, #0]
      break;
 8005caa:	e00b      	b.n	8005cc4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	701a      	strb	r2, [r3, #0]
      break;
 8005cb2:	e007      	b.n	8005cc4 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2203      	movs	r2, #3
 8005cb8:	701a      	strb	r2, [r3, #0]
      break;
 8005cba:	e003      	b.n	8005cc4 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
      break;
 8005cc2:	bf00      	nop
  }

  return ret;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop

08005cd0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005cdc:	f107 0208 	add.w	r2, r7, #8
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	2162      	movs	r1, #98	@ 0x62
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f7ff ff3f 	bl	8005b68 <lis2mdl_read_reg>
 8005cea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10f      	bne.n	8005d12 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005cf2:	78fb      	ldrb	r3, [r7, #3]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	7a3b      	ldrb	r3, [r7, #8]
 8005cfc:	f362 1304 	bfi	r3, r2, #4, #1
 8005d00:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005d02:	f107 0208 	add.w	r2, r7, #8
 8005d06:	2301      	movs	r3, #1
 8005d08:	2162      	movs	r1, #98	@ 0x62
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7ff ff44 	bl	8005b98 <lis2mdl_write_reg>
 8005d10:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d12:	68fb      	ldr	r3, [r7, #12]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005d26:	f107 020c 	add.w	r2, r7, #12
 8005d2a:	2306      	movs	r3, #6
 8005d2c:	2168      	movs	r1, #104	@ 0x68
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff ff1a 	bl	8005b68 <lis2mdl_read_reg>
 8005d34:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005d36:	7b7b      	ldrb	r3, [r7, #13]
 8005d38:	b21a      	sxth	r2, r3
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	021b      	lsls	r3, r3, #8
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	7b3a      	ldrb	r2, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	b29b      	uxth	r3, r3
 8005d50:	b21a      	sxth	r2, r3
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005d56:	7bfa      	ldrb	r2, [r7, #15]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	3302      	adds	r3, #2
 8005d5c:	b212      	sxth	r2, r2
 8005d5e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	3302      	adds	r3, #2
 8005d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	021b      	lsls	r3, r3, #8
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	7bba      	ldrb	r2, [r7, #14]
 8005d70:	4413      	add	r3, r2
 8005d72:	b29a      	uxth	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	3302      	adds	r3, #2
 8005d78:	b212      	sxth	r2, r2
 8005d7a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005d7c:	7c7a      	ldrb	r2, [r7, #17]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	3304      	adds	r3, #4
 8005d82:	b212      	sxth	r2, r2
 8005d84:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	3304      	adds	r3, #4
 8005d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	021b      	lsls	r3, r3, #8
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	7c3a      	ldrb	r2, [r7, #16]
 8005d96:	4413      	add	r3, r2
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	3304      	adds	r3, #4
 8005d9e:	b212      	sxth	r2, r2
 8005da0:	801a      	strh	r2, [r3, #0]

  return ret;
 8005da2:	697b      	ldr	r3, [r7, #20]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005db6:	2301      	movs	r3, #1
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	214f      	movs	r1, #79	@ 0x4f
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff fed3 	bl	8005b68 <lis2mdl_read_reg>
 8005dc2:	60f8      	str	r0, [r7, #12]

  return ret;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}

08005dce <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b084      	sub	sp, #16
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005dda:	f107 0208 	add.w	r2, r7, #8
 8005dde:	2301      	movs	r3, #1
 8005de0:	2162      	movs	r1, #98	@ 0x62
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f7ff fec0 	bl	8005b68 <lis2mdl_read_reg>
 8005de8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d10f      	bne.n	8005e10 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005df0:	78fb      	ldrb	r3, [r7, #3]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	b2da      	uxtb	r2, r3
 8005df8:	7a3b      	ldrb	r3, [r7, #8]
 8005dfa:	f362 0341 	bfi	r3, r2, #1, #1
 8005dfe:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e00:	f107 0208 	add.w	r2, r7, #8
 8005e04:	2301      	movs	r3, #1
 8005e06:	2162      	movs	r1, #98	@ 0x62
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff fec5 	bl	8005b98 <lis2mdl_write_reg>
 8005e0e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e10:	68fb      	ldr	r3, [r7, #12]
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b084      	sub	sp, #16
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	460b      	mov	r3, r1
 8005e24:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e26:	f107 0208 	add.w	r2, r7, #8
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	2162      	movs	r1, #98	@ 0x62
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f7ff fe9a 	bl	8005b68 <lis2mdl_read_reg>
 8005e34:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10f      	bne.n	8005e5c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	7a3b      	ldrb	r3, [r7, #8]
 8005e46:	f362 1345 	bfi	r3, r2, #5, #1
 8005e4a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e4c:	f107 0208 	add.w	r2, r7, #8
 8005e50:	2301      	movs	r3, #1
 8005e52:	2162      	movs	r1, #98	@ 0x62
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff fe9f 	bl	8005b98 <lis2mdl_write_reg>
 8005e5a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b084      	sub	sp, #16
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	e051      	b.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	689a      	ldr	r2, [r3, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	7b1a      	ldrb	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695a      	ldr	r2, [r3, #20]
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a1d      	ldr	r2, [pc, #116]	@ (8005f34 <LSM6DSO_RegisterBusIO+0xcc>)
 8005ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a1c      	ldr	r2, [pc, #112]	@ (8005f38 <LSM6DSO_RegisterBusIO+0xd0>)
 8005ec6:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	69da      	ldr	r2, [r3, #28]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d103      	bne.n	8005ee6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005ede:	f04f 33ff 	mov.w	r3, #4294967295
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	e020      	b.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4798      	blx	r3
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef6:	60fb      	str	r3, [r7, #12]
 8005ef8:	e016      	b.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d112      	bne.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	461a      	mov	r2, r3
 8005f14:	2112      	movs	r1, #18
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 ff5d 	bl	8006dd6 <LSM6DSO_Write_Reg>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d002      	beq.n	8005f28 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005f22:	f04f 33ff 	mov.w	r3, #4294967295
 8005f26:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005f28:	68fb      	ldr	r3, [r7, #12]
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	bf00      	nop
 8005f34:	08007279 	.word	0x08007279
 8005f38:	080072af 	.word	0x080072af

08005f3c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b03      	cmp	r3, #3
 8005f4a:	d00b      	beq.n	8005f64 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3320      	adds	r3, #32
 8005f50:	2180      	movs	r1, #128	@ 0x80
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 fe84 	bl	8007c60 <lsm6dso_i3c_disable_set>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	e060      	b.n	8006026 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3320      	adds	r3, #32
 8005f68:	2101      	movs	r1, #1
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f001 fe52 	bl	8007c14 <lsm6dso_auto_increment_set>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005f76:	f04f 33ff 	mov.w	r3, #4294967295
 8005f7a:	e054      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	3320      	adds	r3, #32
 8005f80:	2101      	movs	r1, #1
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 fd62 	bl	8007a4c <lsm6dso_block_data_update_set>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f92:	e048      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3320      	adds	r3, #32
 8005f98:	2100      	movs	r1, #0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 fea8 	bl	8007cf0 <lsm6dso_fifo_mode_set>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d002      	beq.n	8005fac <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8005faa:	e03c      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2204      	movs	r2, #4
 8005fb0:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3320      	adds	r3, #32
 8005fb8:	2100      	movs	r1, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f001 fa20 	bl	8007400 <lsm6dso_xl_data_rate_set>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8005fca:	e02c      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3320      	adds	r3, #32
 8005fd0:	2100      	movs	r1, #0
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f001 f9b6 	bl	8007344 <lsm6dso_xl_full_scale_set>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005fde:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe2:	e020      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2204      	movs	r2, #4
 8005fe8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3320      	adds	r3, #32
 8005ff0:	2100      	movs	r1, #0
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f001 fbce 	bl	8007794 <lsm6dso_gy_data_rate_set>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8006002:	e010      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	3320      	adds	r3, #32
 8006008:	2106      	movs	r1, #6
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fb5a 	bl	80076c4 <lsm6dso_gy_full_scale_set>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
 800601a:	e004      	b.n	8006026 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f888 	bl	800614c <LSM6DSO_ACC_Disable>
 800603c:	4603      	mov	r3, r0
 800603e:	2b00      	cmp	r3, #0
 8006040:	d002      	beq.n	8006048 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006042:	f04f 33ff 	mov.w	r3, #4294967295
 8006046:	e015      	b.n	8006074 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fc2e 	bl	80068aa <LSM6DSO_GYRO_Disable>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006054:	f04f 33ff 	mov.w	r3, #4294967295
 8006058:	e00c      	b.n	8006074 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3320      	adds	r3, #32
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f001 fdb0 	bl	8007bf2 <lsm6dso_device_id_get>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8006098:	f04f 33ff 	mov.w	r3, #4294967295
 800609c:	e000      	b.n	80060a0 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	2201      	movs	r2, #1
 80060b6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2201      	movs	r2, #1
 80060bc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	2200      	movs	r2, #0
 80060c2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80060d0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	2210      	movs	r2, #16
 80060d6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	2200      	movs	r2, #0
 80060dc:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	4a07      	ldr	r2, [pc, #28]	@ (8006100 <LSM6DSO_GetCapabilities+0x58>)
 80060e2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	4a06      	ldr	r2, [pc, #24]	@ (8006100 <LSM6DSO_GetCapabilities+0x58>)
 80060e8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	f04f 0200 	mov.w	r2, #0
 80060f0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	45d02000 	.word	0x45d02000

08006104 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006112:	2b01      	cmp	r3, #1
 8006114:	d101      	bne.n	800611a <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006116:	2300      	movs	r3, #0
 8006118:	e014      	b.n	8006144 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f103 0220 	add.w	r2, r3, #32
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8006126:	4619      	mov	r1, r3
 8006128:	4610      	mov	r0, r2
 800612a:	f001 f969 	bl	8007400 <lsm6dso_xl_data_rate_set>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006134:	f04f 33ff 	mov.w	r3, #4294967295
 8006138:	e004      	b.n	8006144 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800615a:	2b00      	cmp	r3, #0
 800615c:	d101      	bne.n	8006162 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	e01f      	b.n	80061a2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	f103 0220 	add.w	r2, r3, #32
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	3333      	adds	r3, #51	@ 0x33
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f001 fa40 	bl	80075f4 <lsm6dso_xl_data_rate_get>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800617a:	f04f 33ff 	mov.w	r3, #4294967295
 800617e:	e010      	b.n	80061a2 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3320      	adds	r3, #32
 8006184:	2100      	movs	r1, #0
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f93a 	bl	8007400 <lsm6dso_xl_data_rate_set>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d002      	beq.n	8006198 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	e004      	b.n	80061a2 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}
	...

080061ac <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3320      	adds	r3, #32
 80061be:	f107 020b 	add.w	r2, r7, #11
 80061c2:	4611      	mov	r1, r2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f8e3 	bl	8007390 <lsm6dso_xl_full_scale_get>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80061d0:	f04f 33ff 	mov.w	r3, #4294967295
 80061d4:	e023      	b.n	800621e <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80061d6:	7afb      	ldrb	r3, [r7, #11]
 80061d8:	2b03      	cmp	r3, #3
 80061da:	d81b      	bhi.n	8006214 <LSM6DSO_ACC_GetSensitivity+0x68>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	0800620d 	.word	0x0800620d
 80061ec:	080061fd 	.word	0x080061fd
 80061f0:	08006205 	.word	0x08006205
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	4a0c      	ldr	r2, [pc, #48]	@ (8006228 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80061f8:	601a      	str	r2, [r3, #0]
      break;
 80061fa:	e00f      	b.n	800621c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	4a0b      	ldr	r2, [pc, #44]	@ (800622c <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006200:	601a      	str	r2, [r3, #0]
      break;
 8006202:	e00b      	b.n	800621c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	4a0a      	ldr	r2, [pc, #40]	@ (8006230 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8006208:	601a      	str	r2, [r3, #0]
      break;
 800620a:	e007      	b.n	800621c <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	4a09      	ldr	r2, [pc, #36]	@ (8006234 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006210:	601a      	str	r2, [r3, #0]
      break;
 8006212:	e003      	b.n	800621c <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006214:	f04f 33ff 	mov.w	r3, #4294967295
 8006218:	60fb      	str	r3, [r7, #12]
      break;
 800621a:	bf00      	nop
  }

  return ret;
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	3d79db23 	.word	0x3d79db23
 800622c:	3df9db23 	.word	0x3df9db23
 8006230:	3e79db23 	.word	0x3e79db23
 8006234:	3ef9db23 	.word	0x3ef9db23

08006238 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3320      	adds	r3, #32
 800624a:	f107 020b 	add.w	r2, r7, #11
 800624e:	4611      	mov	r1, r2
 8006250:	4618      	mov	r0, r3
 8006252:	f001 f9cf 	bl	80075f4 <lsm6dso_xl_data_rate_get>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d002      	beq.n	8006262 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800625c:	f04f 33ff 	mov.w	r3, #4294967295
 8006260:	e054      	b.n	800630c <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006262:	7afb      	ldrb	r3, [r7, #11]
 8006264:	2b0b      	cmp	r3, #11
 8006266:	d84c      	bhi.n	8006302 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a1 	.word	0x080062a1
 8006274:	080062b3 	.word	0x080062b3
 8006278:	080062bb 	.word	0x080062bb
 800627c:	080062c3 	.word	0x080062c3
 8006280:	080062cb 	.word	0x080062cb
 8006284:	080062d3 	.word	0x080062d3
 8006288:	080062db 	.word	0x080062db
 800628c:	080062e3 	.word	0x080062e3
 8006290:	080062eb 	.word	0x080062eb
 8006294:	080062f3 	.word	0x080062f3
 8006298:	080062fb 	.word	0x080062fb
 800629c:	080062ab 	.word	0x080062ab
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	f04f 0200 	mov.w	r2, #0
 80062a6:	601a      	str	r2, [r3, #0]
      break;
 80062a8:	e02f      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80062ae:	601a      	str	r2, [r3, #0]
      break;
 80062b0:	e02b      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	4a18      	ldr	r2, [pc, #96]	@ (8006318 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80062b6:	601a      	str	r2, [r3, #0]
      break;
 80062b8:	e027      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	4a17      	ldr	r2, [pc, #92]	@ (800631c <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80062be:	601a      	str	r2, [r3, #0]
      break;
 80062c0:	e023      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	4a16      	ldr	r2, [pc, #88]	@ (8006320 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80062c6:	601a      	str	r2, [r3, #0]
      break;
 80062c8:	e01f      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	4a15      	ldr	r2, [pc, #84]	@ (8006324 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80062ce:	601a      	str	r2, [r3, #0]
      break;
 80062d0:	e01b      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	4a14      	ldr	r2, [pc, #80]	@ (8006328 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80062d6:	601a      	str	r2, [r3, #0]
      break;
 80062d8:	e017      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	4a13      	ldr	r2, [pc, #76]	@ (800632c <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80062de:	601a      	str	r2, [r3, #0]
      break;
 80062e0:	e013      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	4a12      	ldr	r2, [pc, #72]	@ (8006330 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80062e6:	601a      	str	r2, [r3, #0]
      break;
 80062e8:	e00f      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	4a11      	ldr	r2, [pc, #68]	@ (8006334 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80062ee:	601a      	str	r2, [r3, #0]
      break;
 80062f0:	e00b      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	4a10      	ldr	r2, [pc, #64]	@ (8006338 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80062f6:	601a      	str	r2, [r3, #0]
      break;
 80062f8:	e007      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	4a0f      	ldr	r2, [pc, #60]	@ (800633c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80062fe:	601a      	str	r2, [r3, #0]
      break;
 8006300:	e003      	b.n	800630a <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006302:	f04f 33ff 	mov.w	r3, #4294967295
 8006306:	60fb      	str	r3, [r7, #12]
      break;
 8006308:	bf00      	nop
  }

  return ret;
 800630a:	68fb      	ldr	r3, [r7, #12]
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	3fcccccd 	.word	0x3fcccccd
 8006318:	41480000 	.word	0x41480000
 800631c:	41d00000 	.word	0x41d00000
 8006320:	42500000 	.word	0x42500000
 8006324:	42d00000 	.word	0x42d00000
 8006328:	43500000 	.word	0x43500000
 800632c:	43d08000 	.word	0x43d08000
 8006330:	44504000 	.word	0x44504000
 8006334:	44d06000 	.word	0x44d06000
 8006338:	45505000 	.word	0x45505000
 800633c:	45d05800 	.word	0x45d05800

08006340 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800634c:	2100      	movs	r1, #0
 800634e:	ed97 0a00 	vldr	s0, [r7]
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f806 	bl	8006364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006358:	4603      	mov	r3, r0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08c      	sub	sp, #48	@ 0x30
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006370:	460b      	mov	r3, r1
 8006372:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006374:	2300      	movs	r3, #0
 8006376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	2b02      	cmp	r3, #2
 8006380:	f000 80ea 	beq.w	8006558 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006384:	2b02      	cmp	r3, #2
 8006386:	f300 8163 	bgt.w	8006650 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800638e:	2b01      	cmp	r3, #1
 8006390:	d074      	beq.n	800647c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006392:	e15d      	b.n	8006650 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f103 0020 	add.w	r0, r3, #32
 800639a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800639e:	2301      	movs	r3, #1
 80063a0:	2114      	movs	r1, #20
 80063a2:	f000 ff9f 	bl	80072e4 <lsm6dso_read_reg>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d002      	beq.n	80063b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80063ac:	f04f 33ff 	mov.w	r3, #4294967295
 80063b0:	e16c      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80063b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d025      	beq.n	800640c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d10b      	bne.n	80063e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3320      	adds	r3, #32
 80063ce:	2100      	movs	r1, #0
 80063d0:	4618      	mov	r0, r3
 80063d2:	f001 f815 	bl	8007400 <lsm6dso_xl_data_rate_set>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80063dc:	f04f 33ff 	mov.w	r3, #4294967295
 80063e0:	e154      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80063e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063e6:	f36f 13c7 	bfc	r3, #7, #1
 80063ea:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f103 0020 	add.w	r0, r3, #32
 80063f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80063f8:	2301      	movs	r3, #1
 80063fa:	2114      	movs	r1, #20
 80063fc:	f000 ff8a 	bl	8007314 <lsm6dso_write_reg>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	e13f      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f103 0020 	add.w	r0, r3, #32
 8006412:	f107 0220 	add.w	r2, r7, #32
 8006416:	2301      	movs	r3, #1
 8006418:	2115      	movs	r1, #21
 800641a:	f000 ff63 	bl	80072e4 <lsm6dso_read_reg>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006424:	f04f 33ff 	mov.w	r3, #4294967295
 8006428:	e130      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800642a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800642e:	f003 0310 	and.w	r3, r3, #16
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d014      	beq.n	8006462 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006438:	f897 3020 	ldrb.w	r3, [r7, #32]
 800643c:	f36f 1304 	bfc	r3, #4, #1
 8006440:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f103 0020 	add.w	r0, r3, #32
 800644a:	f107 0220 	add.w	r2, r7, #32
 800644e:	2301      	movs	r3, #1
 8006450:	2115      	movs	r1, #21
 8006452:	f000 ff5f 	bl	8007314 <lsm6dso_write_reg>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 800645c:	f04f 33ff 	mov.w	r3, #4294967295
 8006460:	e114      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006462:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006466:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800646a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800646e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006472:	d400      	bmi.n	8006476 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006474:	e0f0      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006476:	4b87      	ldr	r3, [pc, #540]	@ (8006694 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647a:	e0ed      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f103 0020 	add.w	r0, r3, #32
 8006482:	f107 021c 	add.w	r2, r7, #28
 8006486:	2301      	movs	r3, #1
 8006488:	2114      	movs	r1, #20
 800648a:	f000 ff2b 	bl	80072e4 <lsm6dso_read_reg>
 800648e:	4603      	mov	r3, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006494:	f04f 33ff 	mov.w	r3, #4294967295
 8006498:	e0f8      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800649a:	7f3b      	ldrb	r3, [r7, #28]
 800649c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d023      	beq.n	80064ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d10b      	bne.n	80064c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3320      	adds	r3, #32
 80064b4:	2100      	movs	r1, #0
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 ffa2 	bl	8007400 <lsm6dso_xl_data_rate_set>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80064c2:	f04f 33ff 	mov.w	r3, #4294967295
 80064c6:	e0e1      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80064c8:	7f3b      	ldrb	r3, [r7, #28]
 80064ca:	f36f 13c7 	bfc	r3, #7, #1
 80064ce:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f103 0020 	add.w	r0, r3, #32
 80064d6:	f107 021c 	add.w	r2, r7, #28
 80064da:	2301      	movs	r3, #1
 80064dc:	2114      	movs	r1, #20
 80064de:	f000 ff19 	bl	8007314 <lsm6dso_write_reg>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80064e8:	f04f 33ff 	mov.w	r3, #4294967295
 80064ec:	e0ce      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f103 0020 	add.w	r0, r3, #32
 80064f4:	f107 0218 	add.w	r2, r7, #24
 80064f8:	2301      	movs	r3, #1
 80064fa:	2115      	movs	r1, #21
 80064fc:	f000 fef2 	bl	80072e4 <lsm6dso_read_reg>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 8006506:	f04f 33ff 	mov.w	r3, #4294967295
 800650a:	e0bf      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 800650c:	7e3b      	ldrb	r3, [r7, #24]
 800650e:	f003 0310 	and.w	r3, r3, #16
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d112      	bne.n	800653e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 8006518:	7e3b      	ldrb	r3, [r7, #24]
 800651a:	f043 0310 	orr.w	r3, r3, #16
 800651e:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f103 0020 	add.w	r0, r3, #32
 8006526:	f107 0218 	add.w	r2, r7, #24
 800652a:	2301      	movs	r3, #1
 800652c:	2115      	movs	r1, #21
 800652e:	f000 fef1 	bl	8007314 <lsm6dso_write_reg>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	e0a6      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800653e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006542:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006698 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	dc00      	bgt.n	8006552 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006550:	e082      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006552:	4b52      	ldr	r3, [pc, #328]	@ (800669c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006556:	e07f      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f103 0020 	add.w	r0, r3, #32
 800655e:	f107 0210 	add.w	r2, r7, #16
 8006562:	2301      	movs	r3, #1
 8006564:	2115      	movs	r1, #21
 8006566:	f000 febd 	bl	80072e4 <lsm6dso_read_reg>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006570:	f04f 33ff 	mov.w	r3, #4294967295
 8006574:	e08a      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006576:	7c3b      	ldrb	r3, [r7, #16]
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d012      	beq.n	80065a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006582:	7c3b      	ldrb	r3, [r7, #16]
 8006584:	f36f 1304 	bfc	r3, #4, #1
 8006588:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f103 0020 	add.w	r0, r3, #32
 8006590:	f107 0210 	add.w	r2, r7, #16
 8006594:	2301      	movs	r3, #1
 8006596:	2115      	movs	r1, #21
 8006598:	f000 febc 	bl	8007314 <lsm6dso_write_reg>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d002      	beq.n	80065a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80065a2:	f04f 33ff 	mov.w	r3, #4294967295
 80065a6:	e071      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d108      	bne.n	80065c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f979 	bl	80068aa <LSM6DSO_GYRO_Disable>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80065be:	f04f 33ff 	mov.w	r3, #4294967295
 80065c2:	e063      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f103 0020 	add.w	r0, r3, #32
 80065ca:	f107 0214 	add.w	r2, r7, #20
 80065ce:	2301      	movs	r3, #1
 80065d0:	2114      	movs	r1, #20
 80065d2:	f000 fe87 	bl	80072e4 <lsm6dso_read_reg>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80065dc:	f04f 33ff 	mov.w	r3, #4294967295
 80065e0:	e054      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80065e2:	7d3b      	ldrb	r3, [r7, #20]
 80065e4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d123      	bne.n	8006636 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10b      	bne.n	8006610 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	3320      	adds	r3, #32
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fefe 	bl	8007400 <lsm6dso_xl_data_rate_set>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 800660a:	f04f 33ff 	mov.w	r3, #4294967295
 800660e:	e03d      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006610:	7d3b      	ldrb	r3, [r7, #20]
 8006612:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006616:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f103 0020 	add.w	r0, r3, #32
 800661e:	f107 0214 	add.w	r2, r7, #20
 8006622:	2301      	movs	r3, #1
 8006624:	2114      	movs	r1, #20
 8006626:	f000 fe75 	bl	8007314 <lsm6dso_write_reg>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006630:	f04f 33ff 	mov.w	r3, #4294967295
 8006634:	e02a      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006636:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800663a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006698 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800663e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006646:	dc00      	bgt.n	800664a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006648:	e006      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800664a:	4b14      	ldr	r3, [pc, #80]	@ (800669c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800664c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800664e:	e003      	b.n	8006658 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006656:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800665a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800665e:	d102      	bne.n	8006666 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006660:	f04f 33ff 	mov.w	r3, #4294967295
 8006664:	e012      	b.n	800668c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800666c:	2b01      	cmp	r3, #1
 800666e:	d106      	bne.n	800667e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006670:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fbc9 	bl	8006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800667a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800667c:	e005      	b.n	800668a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800667e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f000 fc5a 	bl	8006f3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006688:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800668c:	4618      	mov	r0, r3
 800668e:	3730      	adds	r7, #48	@ 0x30
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	41480000 	.word	0x41480000
 8006698:	43500000 	.word	0x43500000
 800669c:	43500000 	.word	0x43500000

080066a0 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3320      	adds	r3, #32
 80066b2:	f107 020b 	add.w	r2, r7, #11
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 fe69 	bl	8007390 <lsm6dso_xl_full_scale_get>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80066c4:	f04f 33ff 	mov.w	r3, #4294967295
 80066c8:	e023      	b.n	8006712 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	2b03      	cmp	r3, #3
 80066ce:	d81b      	bhi.n	8006708 <LSM6DSO_ACC_GetFullScale+0x68>
 80066d0:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <LSM6DSO_ACC_GetFullScale+0x38>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	080066e9 	.word	0x080066e9
 80066dc:	08006701 	.word	0x08006701
 80066e0:	080066f1 	.word	0x080066f1
 80066e4:	080066f9 	.word	0x080066f9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	2202      	movs	r2, #2
 80066ec:	601a      	str	r2, [r3, #0]
      break;
 80066ee:	e00f      	b.n	8006710 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2204      	movs	r2, #4
 80066f4:	601a      	str	r2, [r3, #0]
      break;
 80066f6:	e00b      	b.n	8006710 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2208      	movs	r2, #8
 80066fc:	601a      	str	r2, [r3, #0]
      break;
 80066fe:	e007      	b.n	8006710 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2210      	movs	r2, #16
 8006704:	601a      	str	r2, [r3, #0]
      break;
 8006706:	e003      	b.n	8006710 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006708:	f04f 33ff 	mov.w	r3, #4294967295
 800670c:	60fb      	str	r3, [r7, #12]
      break;
 800670e:	bf00      	nop
  }

  return ret;
 8006710:	68fb      	ldr	r3, [r7, #12]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop

0800671c <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	2b02      	cmp	r3, #2
 800672a:	dd0b      	ble.n	8006744 <LSM6DSO_ACC_SetFullScale+0x28>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b04      	cmp	r3, #4
 8006730:	dd06      	ble.n	8006740 <LSM6DSO_ACC_SetFullScale+0x24>
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	2b08      	cmp	r3, #8
 8006736:	dc01      	bgt.n	800673c <LSM6DSO_ACC_SetFullScale+0x20>
 8006738:	2303      	movs	r3, #3
 800673a:	e004      	b.n	8006746 <LSM6DSO_ACC_SetFullScale+0x2a>
 800673c:	2301      	movs	r3, #1
 800673e:	e002      	b.n	8006746 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006740:	2302      	movs	r3, #2
 8006742:	e000      	b.n	8006746 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006744:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006746:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	3320      	adds	r3, #32
 800674c:	7bfa      	ldrb	r2, [r7, #15]
 800674e:	4611      	mov	r1, r2
 8006750:	4618      	mov	r0, r3
 8006752:	f000 fdf7 	bl	8007344 <lsm6dso_xl_full_scale_set>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	e000      	b.n	8006764 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3320      	adds	r3, #32
 800677a:	f107 0208 	add.w	r2, r7, #8
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f001 f9d1 	bl	8007b28 <lsm6dso_acceleration_raw_get>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	e00c      	b.n	80067ac <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006792:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800679a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80067a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80067be:	f04f 0300 	mov.w	r3, #0
 80067c2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3320      	adds	r3, #32
 80067c8:	f107 0210 	add.w	r2, r7, #16
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f001 f9aa 	bl	8007b28 <lsm6dso_acceleration_raw_get>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80067da:	f04f 33ff 	mov.w	r3, #4294967295
 80067de:	e03c      	b.n	800685a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff fce0 	bl	80061ac <LSM6DSO_ACC_GetSensitivity>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d002      	beq.n	80067f8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	e030      	b.n	800685a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80067f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80067fc:	ee07 3a90 	vmov	s15, r3
 8006800:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006804:	edd7 7a03 	vldr	s15, [r7, #12]
 8006808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006810:	ee17 2a90 	vmov	r2, s15
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006818:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800681c:	ee07 3a90 	vmov	s15, r3
 8006820:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006824:	edd7 7a03 	vldr	s15, [r7, #12]
 8006828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800682c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006830:	ee17 2a90 	vmov	r2, s15
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006838:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006844:	edd7 7a03 	vldr	s15, [r7, #12]
 8006848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006850:	ee17 2a90 	vmov	r2, s15
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3718      	adds	r7, #24
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b082      	sub	sp, #8
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006870:	2b01      	cmp	r3, #1
 8006872:	d101      	bne.n	8006878 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	e014      	b.n	80068a2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f103 0220 	add.w	r2, r3, #32
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006884:	4619      	mov	r1, r3
 8006886:	4610      	mov	r0, r2
 8006888:	f000 ff84 	bl	8007794 <lsm6dso_gy_data_rate_set>
 800688c:	4603      	mov	r3, r0
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006892:	f04f 33ff 	mov.w	r3, #4294967295
 8006896:	e004      	b.n	80068a2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2201      	movs	r2, #1
 800689c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b082      	sub	sp, #8
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d101      	bne.n	80068c0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80068bc:	2300      	movs	r3, #0
 80068be:	e01f      	b.n	8006900 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f103 0220 	add.w	r2, r3, #32
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	3334      	adds	r3, #52	@ 0x34
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f001 f85b 	bl	8007988 <lsm6dso_gy_data_rate_get>
 80068d2:	4603      	mov	r3, r0
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	e010      	b.n	8006900 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3320      	adds	r3, #32
 80068e2:	2100      	movs	r1, #0
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 ff55 	bl	8007794 <lsm6dso_gy_data_rate_set>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	e004      	b.n	8006900 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3320      	adds	r3, #32
 800691a:	f107 020b 	add.w	r2, r7, #11
 800691e:	4611      	mov	r1, r2
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fef5 	bl	8007710 <lsm6dso_gy_full_scale_get>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295
 8006930:	e02d      	b.n	800698e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006932:	7afb      	ldrb	r3, [r7, #11]
 8006934:	2b06      	cmp	r3, #6
 8006936:	d825      	bhi.n	8006984 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006938:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800693a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693e:	bf00      	nop
 8006940:	08006965 	.word	0x08006965
 8006944:	0800695d 	.word	0x0800695d
 8006948:	0800696d 	.word	0x0800696d
 800694c:	08006985 	.word	0x08006985
 8006950:	08006975 	.word	0x08006975
 8006954:	08006985 	.word	0x08006985
 8006958:	0800697d 	.word	0x0800697d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	4a0e      	ldr	r2, [pc, #56]	@ (8006998 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006960:	601a      	str	r2, [r3, #0]
      break;
 8006962:	e013      	b.n	800698c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	4a0d      	ldr	r2, [pc, #52]	@ (800699c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006968:	601a      	str	r2, [r3, #0]
      break;
 800696a:	e00f      	b.n	800698c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	4a0c      	ldr	r2, [pc, #48]	@ (80069a0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006970:	601a      	str	r2, [r3, #0]
      break;
 8006972:	e00b      	b.n	800698c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4a0b      	ldr	r2, [pc, #44]	@ (80069a4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006978:	601a      	str	r2, [r3, #0]
      break;
 800697a:	e007      	b.n	800698c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	4a0a      	ldr	r2, [pc, #40]	@ (80069a8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006980:	601a      	str	r2, [r3, #0]
      break;
 8006982:	e003      	b.n	800698c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	60fb      	str	r3, [r7, #12]
      break;
 800698a:	bf00      	nop
  }

  return ret;
 800698c:	68fb      	ldr	r3, [r7, #12]
}
 800698e:	4618      	mov	r0, r3
 8006990:	3710      	adds	r7, #16
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	408c0000 	.word	0x408c0000
 800699c:	410c0000 	.word	0x410c0000
 80069a0:	418c0000 	.word	0x418c0000
 80069a4:	420c0000 	.word	0x420c0000
 80069a8:	428c0000 	.word	0x428c0000

080069ac <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	3320      	adds	r3, #32
 80069be:	f107 020b 	add.w	r2, r7, #11
 80069c2:	4611      	mov	r1, r2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f000 ffdf 	bl	8007988 <lsm6dso_gy_data_rate_get>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80069d0:	f04f 33ff 	mov.w	r3, #4294967295
 80069d4:	e04e      	b.n	8006a74 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80069d6:	7afb      	ldrb	r3, [r7, #11]
 80069d8:	2b0a      	cmp	r3, #10
 80069da:	d846      	bhi.n	8006a6a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80069dc:	a201      	add	r2, pc, #4	@ (adr r2, 80069e4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	08006a1b 	.word	0x08006a1b
 80069ec:	08006a23 	.word	0x08006a23
 80069f0:	08006a2b 	.word	0x08006a2b
 80069f4:	08006a33 	.word	0x08006a33
 80069f8:	08006a3b 	.word	0x08006a3b
 80069fc:	08006a43 	.word	0x08006a43
 8006a00:	08006a4b 	.word	0x08006a4b
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	08006a5b 	.word	0x08006a5b
 8006a0c:	08006a63 	.word	0x08006a63
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	f04f 0200 	mov.w	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
      break;
 8006a18:	e02b      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	4a17      	ldr	r2, [pc, #92]	@ (8006a7c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006a1e:	601a      	str	r2, [r3, #0]
      break;
 8006a20:	e027      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	4a16      	ldr	r2, [pc, #88]	@ (8006a80 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006a26:	601a      	str	r2, [r3, #0]
      break;
 8006a28:	e023      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	4a15      	ldr	r2, [pc, #84]	@ (8006a84 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006a2e:	601a      	str	r2, [r3, #0]
      break;
 8006a30:	e01f      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	4a14      	ldr	r2, [pc, #80]	@ (8006a88 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006a36:	601a      	str	r2, [r3, #0]
      break;
 8006a38:	e01b      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	4a13      	ldr	r2, [pc, #76]	@ (8006a8c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006a3e:	601a      	str	r2, [r3, #0]
      break;
 8006a40:	e017      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	4a12      	ldr	r2, [pc, #72]	@ (8006a90 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006a46:	601a      	str	r2, [r3, #0]
      break;
 8006a48:	e013      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	4a11      	ldr	r2, [pc, #68]	@ (8006a94 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006a4e:	601a      	str	r2, [r3, #0]
      break;
 8006a50:	e00f      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	4a10      	ldr	r2, [pc, #64]	@ (8006a98 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006a56:	601a      	str	r2, [r3, #0]
      break;
 8006a58:	e00b      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006a9c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006a5e:	601a      	str	r2, [r3, #0]
      break;
 8006a60:	e007      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	4a0e      	ldr	r2, [pc, #56]	@ (8006aa0 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006a66:	601a      	str	r2, [r3, #0]
      break;
 8006a68:	e003      	b.n	8006a72 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8006a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006a6e:	60fb      	str	r3, [r7, #12]
      break;
 8006a70:	bf00      	nop
  }

  return ret;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}
 8006a7c:	41480000 	.word	0x41480000
 8006a80:	41d00000 	.word	0x41d00000
 8006a84:	42500000 	.word	0x42500000
 8006a88:	42d00000 	.word	0x42d00000
 8006a8c:	43500000 	.word	0x43500000
 8006a90:	43d08000 	.word	0x43d08000
 8006a94:	44504000 	.word	0x44504000
 8006a98:	44d06000 	.word	0x44d06000
 8006a9c:	45505000 	.word	0x45505000
 8006aa0:	45d05800 	.word	0x45d05800

08006aa4 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	ed97 0a00 	vldr	s0, [r7]
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f806 	bl	8006ac8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006abc:	4603      	mov	r3, r0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	ed87 0a02 	vstr	s0, [r7, #8]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006ae0:	79fb      	ldrb	r3, [r7, #7]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d002      	beq.n	8006aec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d028      	beq.n	8006b3c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8006aea:	e05c      	b.n	8006ba6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f103 0020 	add.w	r0, r3, #32
 8006af2:	f107 0214 	add.w	r2, r7, #20
 8006af6:	2301      	movs	r3, #1
 8006af8:	2116      	movs	r1, #22
 8006afa:	f000 fbf3 	bl	80072e4 <lsm6dso_read_reg>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006b04:	f04f 33ff 	mov.w	r3, #4294967295
 8006b08:	e06c      	b.n	8006be4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8006b0a:	7d3b      	ldrb	r3, [r7, #20]
 8006b0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d04b      	beq.n	8006bae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006b16:	7d3b      	ldrb	r3, [r7, #20]
 8006b18:	f36f 13c7 	bfc	r3, #7, #1
 8006b1c:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f103 0020 	add.w	r0, r3, #32
 8006b24:	f107 0214 	add.w	r2, r7, #20
 8006b28:	2301      	movs	r3, #1
 8006b2a:	2116      	movs	r1, #22
 8006b2c:	f000 fbf2 	bl	8007314 <lsm6dso_write_reg>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d03b      	beq.n	8006bae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006b36:	f04f 33ff 	mov.w	r3, #4294967295
 8006b3a:	e053      	b.n	8006be4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f103 0020 	add.w	r0, r3, #32
 8006b42:	f107 0210 	add.w	r2, r7, #16
 8006b46:	2301      	movs	r3, #1
 8006b48:	2116      	movs	r1, #22
 8006b4a:	f000 fbcb 	bl	80072e4 <lsm6dso_read_reg>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d002      	beq.n	8006b5a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006b54:	f04f 33ff 	mov.w	r3, #4294967295
 8006b58:	e044      	b.n	8006be4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006b5a:	7c3b      	ldrb	r3, [r7, #16]
 8006b5c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d112      	bne.n	8006b8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006b66:	7c3b      	ldrb	r3, [r7, #16]
 8006b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f103 0020 	add.w	r0, r3, #32
 8006b74:	f107 0210 	add.w	r2, r7, #16
 8006b78:	2301      	movs	r3, #1
 8006b7a:	2116      	movs	r1, #22
 8006b7c:	f000 fbca 	bl	8007314 <lsm6dso_write_reg>
 8006b80:	4603      	mov	r3, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d002      	beq.n	8006b8c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006b86:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8a:	e02b      	b.n	8006be4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006b8c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006b90:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006bec <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9c:	dc00      	bgt.n	8006ba0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006b9e:	e007      	b.n	8006bb0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006ba0:	4b13      	ldr	r3, [pc, #76]	@ (8006bf0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006ba2:	61bb      	str	r3, [r7, #24]
 8006ba4:	e004      	b.n	8006bb0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8006baa:	61fb      	str	r3, [r7, #28]
      break;
 8006bac:	e000      	b.n	8006bb0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006bae:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb6:	d102      	bne.n	8006bbe <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bbc:	e012      	b.n	8006be4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d106      	bne.n	8006bd6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006bc8:	ed97 0a06 	vldr	s0, [r7, #24]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f000 fa45 	bl	800705c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006bd2:	61f8      	str	r0, [r7, #28]
 8006bd4:	e005      	b.n	8006be2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006bd6:	ed97 0a06 	vldr	s0, [r7, #24]
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 faca 	bl	8007174 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006be0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006be2:	69fb      	ldr	r3, [r7, #28]
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3720      	adds	r7, #32
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	43500000 	.word	0x43500000
 8006bf0:	43500000 	.word	0x43500000

08006bf4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	3320      	adds	r3, #32
 8006c06:	f107 020b 	add.w	r2, r7, #11
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f000 fd7f 	bl	8007710 <lsm6dso_gy_full_scale_get>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	e030      	b.n	8006c80 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006c1e:	7afb      	ldrb	r3, [r7, #11]
 8006c20:	2b06      	cmp	r3, #6
 8006c22:	d828      	bhi.n	8006c76 <LSM6DSO_GYRO_GetFullScale+0x82>
 8006c24:	a201      	add	r2, pc, #4	@ (adr r2, 8006c2c <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c49 	.word	0x08006c49
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c77 	.word	0x08006c77
 8006c3c:	08006c63 	.word	0x08006c63
 8006c40:	08006c77 	.word	0x08006c77
 8006c44:	08006c6d 	.word	0x08006c6d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	227d      	movs	r2, #125	@ 0x7d
 8006c4c:	601a      	str	r2, [r3, #0]
      break;
 8006c4e:	e016      	b.n	8006c7e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	22fa      	movs	r2, #250	@ 0xfa
 8006c54:	601a      	str	r2, [r3, #0]
      break;
 8006c56:	e012      	b.n	8006c7e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006c5e:	601a      	str	r2, [r3, #0]
      break;
 8006c60:	e00d      	b.n	8006c7e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006c68:	601a      	str	r2, [r3, #0]
      break;
 8006c6a:	e008      	b.n	8006c7e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006c72:	601a      	str	r2, [r3, #0]
      break;
 8006c74:	e003      	b.n	8006c7e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006c76:	f04f 33ff 	mov.w	r3, #4294967295
 8006c7a:	60fb      	str	r3, [r7, #12]
      break;
 8006c7c:	bf00      	nop
  }

  return ret;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3710      	adds	r7, #16
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b7d      	cmp	r3, #125	@ 0x7d
 8006c96:	dd12      	ble.n	8006cbe <LSM6DSO_GYRO_SetFullScale+0x36>
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	2bfa      	cmp	r3, #250	@ 0xfa
 8006c9c:	dd0d      	ble.n	8006cba <LSM6DSO_GYRO_SetFullScale+0x32>
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006ca4:	dd07      	ble.n	8006cb6 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006cac:	dc01      	bgt.n	8006cb2 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006cae:	2304      	movs	r3, #4
 8006cb0:	e006      	b.n	8006cc0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006cb2:	2306      	movs	r3, #6
 8006cb4:	e004      	b.n	8006cc0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e002      	b.n	8006cc0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e000      	b.n	8006cc0 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006cbe:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006cc0:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	3320      	adds	r3, #32
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fcfa 	bl	80076c4 <lsm6dso_gy_full_scale_set>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cda:	e000      	b.n	8006cde <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	3320      	adds	r3, #32
 8006cf4:	f107 0208 	add.w	r2, r7, #8
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fecc 	bl	8007a98 <lsm6dso_angular_rate_raw_get>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d002      	beq.n	8006d0c <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006d06:	f04f 33ff 	mov.w	r3, #4294967295
 8006d0a:	e00c      	b.n	8006d26 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006d0c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006d14:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006d1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b086      	sub	sp, #24
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3320      	adds	r3, #32
 8006d3c:	f107 0210 	add.w	r2, r7, #16
 8006d40:	4611      	mov	r1, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 fea8 	bl	8007a98 <lsm6dso_angular_rate_raw_get>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d002      	beq.n	8006d54 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006d52:	e03c      	b.n	8006dce <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006d54:	f107 030c 	add.w	r3, r7, #12
 8006d58:	4619      	mov	r1, r3
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7ff fdd4 	bl	8006908 <LSM6DSO_GYRO_GetSensitivity>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006d66:	f04f 33ff 	mov.w	r3, #4294967295
 8006d6a:	e030      	b.n	8006dce <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006d6c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d70:	ee07 3a90 	vmov	s15, r3
 8006d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d78:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d84:	ee17 2a90 	vmov	r2, s15
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006d8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006d98:	edd7 7a03 	vldr	s15, [r7, #12]
 8006d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006da0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006da4:	ee17 2a90 	vmov	r2, s15
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006dac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006db0:	ee07 3a90 	vmov	s15, r3
 8006db4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006db8:	edd7 7a03 	vldr	s15, [r7, #12]
 8006dbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006dc4:	ee17 2a90 	vmov	r2, s15
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006dcc:	2300      	movs	r3, #0
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006dd6:	b580      	push	{r7, lr}
 8006dd8:	b082      	sub	sp, #8
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	6078      	str	r0, [r7, #4]
 8006dde:	460b      	mov	r3, r1
 8006de0:	70fb      	strb	r3, [r7, #3]
 8006de2:	4613      	mov	r3, r2
 8006de4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f103 0020 	add.w	r0, r3, #32
 8006dec:	1cba      	adds	r2, r7, #2
 8006dee:	78f9      	ldrb	r1, [r7, #3]
 8006df0:	2301      	movs	r3, #1
 8006df2:	f000 fa8f 	bl	8007314 <lsm6dso_write_reg>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d002      	beq.n	8006e02 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8006e00:	e000      	b.n	8006e04 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006e18:	edd7 7a00 	vldr	s15, [r7]
 8006e1c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006f1c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d801      	bhi.n	8006e2e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006e2a:	230b      	movs	r3, #11
 8006e2c:	e063      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e2e:	edd7 7a00 	vldr	s15, [r7]
 8006e32:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	d801      	bhi.n	8006e44 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e058      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e44:	edd7 7a00 	vldr	s15, [r7]
 8006e48:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	d801      	bhi.n	8006e5a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e04d      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e5a:	edd7 7a00 	vldr	s15, [r7]
 8006e5e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006f20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d801      	bhi.n	8006e70 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e042      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e70:	edd7 7a00 	vldr	s15, [r7]
 8006e74:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006f24 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e80:	d801      	bhi.n	8006e86 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006e82:	2304      	movs	r3, #4
 8006e84:	e037      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e86:	edd7 7a00 	vldr	s15, [r7]
 8006e8a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006f28 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	d801      	bhi.n	8006e9c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006e98:	2305      	movs	r3, #5
 8006e9a:	e02c      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006e9c:	edd7 7a00 	vldr	s15, [r7]
 8006ea0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006f2c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eac:	d801      	bhi.n	8006eb2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006eae:	2306      	movs	r3, #6
 8006eb0:	e021      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006eb2:	edd7 7a00 	vldr	s15, [r7]
 8006eb6:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006f30 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	d801      	bhi.n	8006ec8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006ec4:	2307      	movs	r3, #7
 8006ec6:	e016      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ec8:	edd7 7a00 	vldr	s15, [r7]
 8006ecc:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006f34 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	d801      	bhi.n	8006ede <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006eda:	2308      	movs	r3, #8
 8006edc:	e00b      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ede:	edd7 7a00 	vldr	s15, [r7]
 8006ee2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006f38 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	d801      	bhi.n	8006ef4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006ef0:	2309      	movs	r3, #9
 8006ef2:	e000      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ef4:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006ef6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	3320      	adds	r3, #32
 8006efc:	7bfa      	ldrb	r2, [r7, #15]
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f000 fa7d 	bl	8007400 <lsm6dso_xl_data_rate_set>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006f10:	e000      	b.n	8006f14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	3fcccccd 	.word	0x3fcccccd
 8006f20:	42500000 	.word	0x42500000
 8006f24:	42d00000 	.word	0x42d00000
 8006f28:	43500000 	.word	0x43500000
 8006f2c:	43d08000 	.word	0x43d08000
 8006f30:	44504000 	.word	0x44504000
 8006f34:	44d06000 	.word	0x44d06000
 8006f38:	45505000 	.word	0x45505000

08006f3c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006f48:	edd7 7a00 	vldr	s15, [r7]
 8006f4c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800703c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006f50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f58:	d801      	bhi.n	8006f5e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006f5a:	230b      	movs	r3, #11
 8006f5c:	e063      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006f5e:	edd7 7a00 	vldr	s15, [r7]
 8006f62:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f6e:	d801      	bhi.n	8006f74 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006f70:	2301      	movs	r3, #1
 8006f72:	e058      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006f74:	edd7 7a00 	vldr	s15, [r7]
 8006f78:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f84:	d801      	bhi.n	8006f8a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e04d      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006f8a:	edd7 7a00 	vldr	s15, [r7]
 8006f8e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8007040 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9a:	d801      	bhi.n	8006fa0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e042      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006fa0:	edd7 7a00 	vldr	s15, [r7]
 8006fa4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8007044 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb0:	d801      	bhi.n	8006fb6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006fb2:	2304      	movs	r3, #4
 8006fb4:	e037      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006fb6:	edd7 7a00 	vldr	s15, [r7]
 8006fba:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8007048 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006fbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc6:	d801      	bhi.n	8006fcc <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006fc8:	2305      	movs	r3, #5
 8006fca:	e02c      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006fcc:	edd7 7a00 	vldr	s15, [r7]
 8006fd0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800704c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006fd4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fdc:	d801      	bhi.n	8006fe2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006fde:	2306      	movs	r3, #6
 8006fe0:	e021      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006fe2:	edd7 7a00 	vldr	s15, [r7]
 8006fe6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8007050 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006fea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff2:	d801      	bhi.n	8006ff8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006ff4:	2307      	movs	r3, #7
 8006ff6:	e016      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ff8:	edd7 7a00 	vldr	s15, [r7]
 8006ffc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8007054 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007000:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007008:	d801      	bhi.n	800700e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800700a:	2308      	movs	r3, #8
 800700c:	e00b      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800700e:	edd7 7a00 	vldr	s15, [r7]
 8007012:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8007058 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8007016:	eef4 7ac7 	vcmpe.f32	s15, s14
 800701a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800701e:	d801      	bhi.n	8007024 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007020:	2309      	movs	r3, #9
 8007022:	e000      	b.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007024:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 800702c:	2300      	movs	r3, #0
}
 800702e:	4618      	mov	r0, r3
 8007030:	370c      	adds	r7, #12
 8007032:	46bd      	mov	sp, r7
 8007034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	3fcccccd 	.word	0x3fcccccd
 8007040:	42500000 	.word	0x42500000
 8007044:	42d00000 	.word	0x42d00000
 8007048:	43500000 	.word	0x43500000
 800704c:	43d08000 	.word	0x43d08000
 8007050:	44504000 	.word	0x44504000
 8007054:	44d06000 	.word	0x44d06000
 8007058:	45505000 	.word	0x45505000

0800705c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
 8007064:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007068:	edd7 7a00 	vldr	s15, [r7]
 800706c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007078:	d801      	bhi.n	800707e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800707a:	2301      	movs	r3, #1
 800707c:	e058      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800707e:	edd7 7a00 	vldr	s15, [r7]
 8007082:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007086:	eef4 7ac7 	vcmpe.f32	s15, s14
 800708a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708e:	d801      	bhi.n	8007094 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8007090:	2302      	movs	r3, #2
 8007092:	e04d      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007094:	edd7 7a00 	vldr	s15, [r7]
 8007098:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007158 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 800709c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a4:	d801      	bhi.n	80070aa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80070a6:	2303      	movs	r3, #3
 80070a8:	e042      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80070aa:	edd7 7a00 	vldr	s15, [r7]
 80070ae:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800715c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80070b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	d801      	bhi.n	80070c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80070bc:	2304      	movs	r3, #4
 80070be:	e037      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80070c0:	edd7 7a00 	vldr	s15, [r7]
 80070c4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007160 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80070c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070d0:	d801      	bhi.n	80070d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80070d2:	2305      	movs	r3, #5
 80070d4:	e02c      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80070d6:	edd7 7a00 	vldr	s15, [r7]
 80070da:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007164 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80070de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e6:	d801      	bhi.n	80070ec <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80070e8:	2306      	movs	r3, #6
 80070ea:	e021      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80070ec:	edd7 7a00 	vldr	s15, [r7]
 80070f0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007168 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 80070f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fc:	d801      	bhi.n	8007102 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 80070fe:	2307      	movs	r3, #7
 8007100:	e016      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007102:	edd7 7a00 	vldr	s15, [r7]
 8007106:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800716c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800710a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800710e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007112:	d801      	bhi.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007114:	2308      	movs	r3, #8
 8007116:	e00b      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007118:	edd7 7a00 	vldr	s15, [r7]
 800711c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007170 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007128:	d801      	bhi.n	800712e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800712a:	2309      	movs	r3, #9
 800712c:	e000      	b.n	8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800712e:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007130:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3320      	adds	r3, #32
 8007136:	7bfa      	ldrb	r2, [r7, #15]
 8007138:	4611      	mov	r1, r2
 800713a:	4618      	mov	r0, r3
 800713c:	f000 fb2a 	bl	8007794 <lsm6dso_gy_data_rate_set>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8007146:	f04f 33ff 	mov.w	r3, #4294967295
 800714a:	e000      	b.n	800714e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	42500000 	.word	0x42500000
 800715c:	42d00000 	.word	0x42d00000
 8007160:	43500000 	.word	0x43500000
 8007164:	43d08000 	.word	0x43d08000
 8007168:	44504000 	.word	0x44504000
 800716c:	44d06000 	.word	0x44d06000
 8007170:	45505000 	.word	0x45505000

08007174 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007180:	edd7 7a00 	vldr	s15, [r7]
 8007184:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007188:	eef4 7ac7 	vcmpe.f32	s15, s14
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	d801      	bhi.n	8007196 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007192:	2301      	movs	r3, #1
 8007194:	e058      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007196:	edd7 7a00 	vldr	s15, [r7]
 800719a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800719e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a6:	d801      	bhi.n	80071ac <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80071a8:	2302      	movs	r3, #2
 80071aa:	e04d      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80071ac:	edd7 7a00 	vldr	s15, [r7]
 80071b0:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800725c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80071b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071bc:	d801      	bhi.n	80071c2 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80071be:	2303      	movs	r3, #3
 80071c0:	e042      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80071c2:	edd7 7a00 	vldr	s15, [r7]
 80071c6:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007260 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80071ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071d2:	d801      	bhi.n	80071d8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80071d4:	2304      	movs	r3, #4
 80071d6:	e037      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80071d8:	edd7 7a00 	vldr	s15, [r7]
 80071dc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007264 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80071e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e8:	d801      	bhi.n	80071ee <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80071ea:	2305      	movs	r3, #5
 80071ec:	e02c      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80071ee:	edd7 7a00 	vldr	s15, [r7]
 80071f2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007268 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80071f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fe:	d801      	bhi.n	8007204 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007200:	2306      	movs	r3, #6
 8007202:	e021      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007204:	edd7 7a00 	vldr	s15, [r7]
 8007208:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800726c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 800720c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007214:	d801      	bhi.n	800721a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8007216:	2307      	movs	r3, #7
 8007218:	e016      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800721a:	edd7 7a00 	vldr	s15, [r7]
 800721e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007270 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007222:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722a:	d801      	bhi.n	8007230 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 800722c:	2308      	movs	r3, #8
 800722e:	e00b      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007230:	edd7 7a00 	vldr	s15, [r7]
 8007234:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007274 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007238:	eef4 7ac7 	vcmpe.f32	s15, s14
 800723c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007240:	d801      	bhi.n	8007246 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007242:	2309      	movs	r3, #9
 8007244:	e000      	b.n	8007248 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007246:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	42500000 	.word	0x42500000
 8007260:	42d00000 	.word	0x42d00000
 8007264:	43500000 	.word	0x43500000
 8007268:	43d08000 	.word	0x43d08000
 800726c:	44504000 	.word	0x44504000
 8007270:	44d06000 	.word	0x44d06000
 8007274:	45505000 	.word	0x45505000

08007278 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007278:	b590      	push	{r4, r7, lr}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	607a      	str	r2, [r7, #4]
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	72fb      	strb	r3, [r7, #11]
 8007288:	4613      	mov	r3, r2
 800728a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	695c      	ldr	r4, [r3, #20]
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	7b1b      	ldrb	r3, [r3, #12]
 8007298:	4618      	mov	r0, r3
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	b299      	uxth	r1, r3
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	47a0      	blx	r4
 80072a4:	4603      	mov	r3, r0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd90      	pop	{r4, r7, pc}

080072ae <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80072ae:	b590      	push	{r4, r7, lr}
 80072b0:	b087      	sub	sp, #28
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	60f8      	str	r0, [r7, #12]
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	461a      	mov	r2, r3
 80072ba:	460b      	mov	r3, r1
 80072bc:	72fb      	strb	r3, [r7, #11]
 80072be:	4613      	mov	r3, r2
 80072c0:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	691c      	ldr	r4, [r3, #16]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	7b1b      	ldrb	r3, [r3, #12]
 80072ce:	4618      	mov	r0, r3
 80072d0:	7afb      	ldrb	r3, [r7, #11]
 80072d2:	b299      	uxth	r1, r3
 80072d4:	893b      	ldrh	r3, [r7, #8]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	47a0      	blx	r4
 80072da:	4603      	mov	r3, r0
}
 80072dc:	4618      	mov	r0, r3
 80072de:	371c      	adds	r7, #28
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd90      	pop	{r4, r7, pc}

080072e4 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	461a      	mov	r2, r3
 80072f0:	460b      	mov	r3, r1
 80072f2:	72fb      	strb	r3, [r7, #11]
 80072f4:	4613      	mov	r3, r2
 80072f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685c      	ldr	r4, [r3, #4]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	68d8      	ldr	r0, [r3, #12]
 8007300:	893b      	ldrh	r3, [r7, #8]
 8007302:	7af9      	ldrb	r1, [r7, #11]
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	47a0      	blx	r4
 8007308:	6178      	str	r0, [r7, #20]

  return ret;
 800730a:	697b      	ldr	r3, [r7, #20]
}
 800730c:	4618      	mov	r0, r3
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	bd90      	pop	{r4, r7, pc}

08007314 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b087      	sub	sp, #28
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	460b      	mov	r3, r1
 8007322:	72fb      	strb	r3, [r7, #11]
 8007324:	4613      	mov	r3, r2
 8007326:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681c      	ldr	r4, [r3, #0]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	68d8      	ldr	r0, [r3, #12]
 8007330:	893b      	ldrh	r3, [r7, #8]
 8007332:	7af9      	ldrb	r1, [r7, #11]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	47a0      	blx	r4
 8007338:	6178      	str	r0, [r7, #20]

  return ret;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	371c      	adds	r7, #28
 8007340:	46bd      	mov	sp, r7
 8007342:	bd90      	pop	{r4, r7, pc}

08007344 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	460b      	mov	r3, r1
 800734e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007350:	f107 0208 	add.w	r2, r7, #8
 8007354:	2301      	movs	r3, #1
 8007356:	2110      	movs	r1, #16
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f7ff ffc3 	bl	80072e4 <lsm6dso_read_reg>
 800735e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d10f      	bne.n	8007386 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	b2da      	uxtb	r2, r3
 800736e:	7a3b      	ldrb	r3, [r7, #8]
 8007370:	f362 0383 	bfi	r3, r2, #2, #2
 8007374:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007376:	f107 0208 	add.w	r2, r7, #8
 800737a:	2301      	movs	r3, #1
 800737c:	2110      	movs	r1, #16
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f7ff ffc8 	bl	8007314 <lsm6dso_write_reg>
 8007384:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007386:	68fb      	ldr	r3, [r7, #12]
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800739a:	f107 0208 	add.w	r2, r7, #8
 800739e:	2301      	movs	r3, #1
 80073a0:	2110      	movs	r1, #16
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f7ff ff9e 	bl	80072e4 <lsm6dso_read_reg>
 80073a8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80073aa:	7a3b      	ldrb	r3, [r7, #8]
 80073ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d81a      	bhi.n	80073ec <lsm6dso_xl_full_scale_get+0x5c>
 80073b6:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <lsm6dso_xl_full_scale_get+0x2c>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073d5 	.word	0x080073d5
 80073c4:	080073dd 	.word	0x080073dd
 80073c8:	080073e5 	.word	0x080073e5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
      break;
 80073d2:	e00f      	b.n	80073f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
      break;
 80073da:	e00b      	b.n	80073f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2202      	movs	r2, #2
 80073e0:	701a      	strb	r2, [r3, #0]
      break;
 80073e2:	e007      	b.n	80073f4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2203      	movs	r2, #3
 80073e8:	701a      	strb	r2, [r3, #0]
      break;
 80073ea:	e003      	b.n	80073f4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
      break;
 80073f2:	bf00      	nop
  }

  return ret;
 80073f4:	68fb      	ldr	r3, [r7, #12]
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	4619      	mov	r1, r3
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fc90 	bl	8007d3c <lsm6dso_fsm_enable_get>
 800741c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <lsm6dso_xl_data_rate_set+0x28>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	e0e0      	b.n	80075ea <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007428:	7b3b      	ldrb	r3, [r7, #12]
 800742a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800742e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007430:	7b3b      	ldrb	r3, [r7, #12]
 8007432:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007436:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007438:	4313      	orrs	r3, r2
 800743a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800743c:	7b3b      	ldrb	r3, [r7, #12]
 800743e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007442:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007444:	4313      	orrs	r3, r2
 8007446:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007448:	7b3b      	ldrb	r3, [r7, #12]
 800744a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800744e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007450:	4313      	orrs	r3, r2
 8007452:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007454:	7b3b      	ldrb	r3, [r7, #12]
 8007456:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800745a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800745c:	4313      	orrs	r3, r2
 800745e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007460:	7b3b      	ldrb	r3, [r7, #12]
 8007462:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007466:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007468:	4313      	orrs	r3, r2
 800746a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800746c:	7b3b      	ldrb	r3, [r7, #12]
 800746e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007472:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007474:	4313      	orrs	r3, r2
 8007476:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007478:	7b3b      	ldrb	r3, [r7, #12]
 800747a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800747e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007480:	4313      	orrs	r3, r2
 8007482:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007484:	7b7b      	ldrb	r3, [r7, #13]
 8007486:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800748a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800748c:	4313      	orrs	r3, r2
 800748e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007490:	7b7b      	ldrb	r3, [r7, #13]
 8007492:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007496:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007498:	4313      	orrs	r3, r2
 800749a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800749c:	7b7b      	ldrb	r3, [r7, #13]
 800749e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80074a4:	4313      	orrs	r3, r2
 80074a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80074a8:	7b7b      	ldrb	r3, [r7, #13]
 80074aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80074ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80074b4:	7b7b      	ldrb	r3, [r7, #13]
 80074b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80074ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80074bc:	4313      	orrs	r3, r2
 80074be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80074c0:	7b7b      	ldrb	r3, [r7, #13]
 80074c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80074c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80074cc:	7b7b      	ldrb	r3, [r7, #13]
 80074ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80074d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80074d4:	4313      	orrs	r3, r2
 80074d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80074d8:	7b7b      	ldrb	r3, [r7, #13]
 80074da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80074de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80074e0:	4313      	orrs	r3, r2
 80074e2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d164      	bne.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80074e8:	f107 030b 	add.w	r3, r7, #11
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fc46 	bl	8007d80 <lsm6dso_fsm_data_rate_get>
 80074f4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <lsm6dso_xl_data_rate_set+0x100>
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	e074      	b.n	80075ea <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	2b03      	cmp	r3, #3
 8007504:	d852      	bhi.n	80075ac <lsm6dso_xl_data_rate_set+0x1ac>
 8007506:	a201      	add	r2, pc, #4	@ (adr r2, 800750c <lsm6dso_xl_data_rate_set+0x10c>)
 8007508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800750c:	0800751d 	.word	0x0800751d
 8007510:	0800752f 	.word	0x0800752f
 8007514:	0800754d 	.word	0x0800754d
 8007518:	08007577 	.word	0x08007577
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 800751c:	78fb      	ldrb	r3, [r7, #3]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d102      	bne.n	8007528 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007526:	e044      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007528:	78fb      	ldrb	r3, [r7, #3]
 800752a:	75fb      	strb	r3, [r7, #23]
        break;
 800752c:	e041      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800752e:	78fb      	ldrb	r3, [r7, #3]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d102      	bne.n	800753a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007534:	2302      	movs	r3, #2
 8007536:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007538:	e03b      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d102      	bne.n	8007546 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007540:	2302      	movs	r3, #2
 8007542:	75fb      	strb	r3, [r7, #23]
        break;
 8007544:	e035      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007546:	78fb      	ldrb	r3, [r7, #3]
 8007548:	75fb      	strb	r3, [r7, #23]
        break;
 800754a:	e032      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d102      	bne.n	8007558 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007552:	2303      	movs	r3, #3
 8007554:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007556:	e02c      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d102      	bne.n	8007564 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800755e:	2303      	movs	r3, #3
 8007560:	75fb      	strb	r3, [r7, #23]
        break;
 8007562:	e026      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007564:	78fb      	ldrb	r3, [r7, #3]
 8007566:	2b02      	cmp	r3, #2
 8007568:	d102      	bne.n	8007570 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800756a:	2303      	movs	r3, #3
 800756c:	75fb      	strb	r3, [r7, #23]
        break;
 800756e:	e020      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007570:	78fb      	ldrb	r3, [r7, #3]
 8007572:	75fb      	strb	r3, [r7, #23]
        break;
 8007574:	e01d      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007576:	78fb      	ldrb	r3, [r7, #3]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d102      	bne.n	8007582 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800757c:	2304      	movs	r3, #4
 800757e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007580:	e017      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007582:	78fb      	ldrb	r3, [r7, #3]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d102      	bne.n	800758e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007588:	2304      	movs	r3, #4
 800758a:	75fb      	strb	r3, [r7, #23]
        break;
 800758c:	e011      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	2b02      	cmp	r3, #2
 8007592:	d102      	bne.n	800759a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007594:	2304      	movs	r3, #4
 8007596:	75fb      	strb	r3, [r7, #23]
        break;
 8007598:	e00b      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	2b03      	cmp	r3, #3
 800759e:	d102      	bne.n	80075a6 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80075a0:	2304      	movs	r3, #4
 80075a2:	75fb      	strb	r3, [r7, #23]
        break;
 80075a4:	e005      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80075a6:	78fb      	ldrb	r3, [r7, #3]
 80075a8:	75fb      	strb	r3, [r7, #23]
        break;
 80075aa:	e002      	b.n	80075b2 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80075ac:	78fb      	ldrb	r3, [r7, #3]
 80075ae:	75fb      	strb	r3, [r7, #23]
        break;
 80075b0:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80075b2:	f107 0208 	add.w	r2, r7, #8
 80075b6:	2301      	movs	r3, #1
 80075b8:	2110      	movs	r1, #16
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fe92 	bl	80072e4 <lsm6dso_read_reg>
 80075c0:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80075c2:	7dfb      	ldrb	r3, [r7, #23]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	7a3b      	ldrb	r3, [r7, #8]
 80075cc:	f362 1307 	bfi	r3, r2, #4, #4
 80075d0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80075d2:	f107 0208 	add.w	r2, r7, #8
 80075d6:	2301      	movs	r3, #1
 80075d8:	2110      	movs	r1, #16
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff fe9a 	bl	8007314 <lsm6dso_write_reg>
 80075e0:	4602      	mov	r2, r0
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4413      	add	r3, r2
 80075e6:	613b      	str	r3, [r7, #16]

  return ret;
 80075e8:	693b      	ldr	r3, [r7, #16]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop

080075f4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80075fe:	f107 0208 	add.w	r2, r7, #8
 8007602:	2301      	movs	r3, #1
 8007604:	2110      	movs	r1, #16
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7ff fe6c 	bl	80072e4 <lsm6dso_read_reg>
 800760c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800760e:	7a3b      	ldrb	r3, [r7, #8]
 8007610:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007614:	b2db      	uxtb	r3, r3
 8007616:	2b0b      	cmp	r3, #11
 8007618:	d84a      	bhi.n	80076b0 <lsm6dso_xl_data_rate_get+0xbc>
 800761a:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <lsm6dso_xl_data_rate_get+0x2c>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007651 	.word	0x08007651
 8007624:	08007659 	.word	0x08007659
 8007628:	08007661 	.word	0x08007661
 800762c:	08007669 	.word	0x08007669
 8007630:	08007671 	.word	0x08007671
 8007634:	08007679 	.word	0x08007679
 8007638:	08007681 	.word	0x08007681
 800763c:	08007689 	.word	0x08007689
 8007640:	08007691 	.word	0x08007691
 8007644:	08007699 	.word	0x08007699
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076a9 	.word	0x080076a9
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	e02f      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2201      	movs	r2, #1
 800765c:	701a      	strb	r2, [r3, #0]
      break;
 800765e:	e02b      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	2202      	movs	r2, #2
 8007664:	701a      	strb	r2, [r3, #0]
      break;
 8007666:	e027      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2203      	movs	r2, #3
 800766c:	701a      	strb	r2, [r3, #0]
      break;
 800766e:	e023      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	2204      	movs	r2, #4
 8007674:	701a      	strb	r2, [r3, #0]
      break;
 8007676:	e01f      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	2205      	movs	r2, #5
 800767c:	701a      	strb	r2, [r3, #0]
      break;
 800767e:	e01b      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2206      	movs	r2, #6
 8007684:	701a      	strb	r2, [r3, #0]
      break;
 8007686:	e017      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2207      	movs	r2, #7
 800768c:	701a      	strb	r2, [r3, #0]
      break;
 800768e:	e013      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	2208      	movs	r2, #8
 8007694:	701a      	strb	r2, [r3, #0]
      break;
 8007696:	e00f      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	2209      	movs	r2, #9
 800769c:	701a      	strb	r2, [r3, #0]
      break;
 800769e:	e00b      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	220a      	movs	r2, #10
 80076a4:	701a      	strb	r2, [r3, #0]
      break;
 80076a6:	e007      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	220b      	movs	r2, #11
 80076ac:	701a      	strb	r2, [r3, #0]
      break;
 80076ae:	e003      	b.n	80076b8 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	2200      	movs	r2, #0
 80076b4:	701a      	strb	r2, [r3, #0]
      break;
 80076b6:	bf00      	nop
  }

  return ret;
 80076b8:	68fb      	ldr	r3, [r7, #12]
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop

080076c4 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80076d0:	f107 0208 	add.w	r2, r7, #8
 80076d4:	2301      	movs	r3, #1
 80076d6:	2111      	movs	r1, #17
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7ff fe03 	bl	80072e4 <lsm6dso_read_reg>
 80076de:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10f      	bne.n	8007706 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80076e6:	78fb      	ldrb	r3, [r7, #3]
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	7a3b      	ldrb	r3, [r7, #8]
 80076f0:	f362 0343 	bfi	r3, r2, #1, #3
 80076f4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80076f6:	f107 0208 	add.w	r2, r7, #8
 80076fa:	2301      	movs	r3, #1
 80076fc:	2111      	movs	r1, #17
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f7ff fe08 	bl	8007314 <lsm6dso_write_reg>
 8007704:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007706:	68fb      	ldr	r3, [r7, #12]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800771a:	f107 0208 	add.w	r2, r7, #8
 800771e:	2301      	movs	r3, #1
 8007720:	2111      	movs	r1, #17
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7ff fdde 	bl	80072e4 <lsm6dso_read_reg>
 8007728:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800772a:	7a3b      	ldrb	r3, [r7, #8]
 800772c:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b06      	cmp	r3, #6
 8007734:	d824      	bhi.n	8007780 <lsm6dso_gy_full_scale_get+0x70>
 8007736:	a201      	add	r2, pc, #4	@ (adr r2, 800773c <lsm6dso_gy_full_scale_get+0x2c>)
 8007738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773c:	08007759 	.word	0x08007759
 8007740:	08007761 	.word	0x08007761
 8007744:	08007769 	.word	0x08007769
 8007748:	08007781 	.word	0x08007781
 800774c:	08007771 	.word	0x08007771
 8007750:	08007781 	.word	0x08007781
 8007754:	08007779 	.word	0x08007779
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	2200      	movs	r2, #0
 800775c:	701a      	strb	r2, [r3, #0]
      break;
 800775e:	e013      	b.n	8007788 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
      break;
 8007766:	e00f      	b.n	8007788 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	2202      	movs	r2, #2
 800776c:	701a      	strb	r2, [r3, #0]
      break;
 800776e:	e00b      	b.n	8007788 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	2204      	movs	r2, #4
 8007774:	701a      	strb	r2, [r3, #0]
      break;
 8007776:	e007      	b.n	8007788 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	2206      	movs	r2, #6
 800777c:	701a      	strb	r2, [r3, #0]
      break;
 800777e:	e003      	b.n	8007788 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]
      break;
 8007786:	bf00      	nop
  }

  return ret;
 8007788:	68fb      	ldr	r3, [r7, #12]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3710      	adds	r7, #16
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop

08007794 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	460b      	mov	r3, r1
 800779e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80077a0:	78fb      	ldrb	r3, [r7, #3]
 80077a2:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 fac6 	bl	8007d3c <lsm6dso_fsm_enable_get>
 80077b0:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <lsm6dso_gy_data_rate_set+0x28>
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	e0e0      	b.n	800797e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80077bc:	7b3b      	ldrb	r3, [r7, #12]
 80077be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80077c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80077c4:	7b3b      	ldrb	r3, [r7, #12]
 80077c6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80077ca:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80077cc:	4313      	orrs	r3, r2
 80077ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80077d0:	7b3b      	ldrb	r3, [r7, #12]
 80077d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80077d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80077d8:	4313      	orrs	r3, r2
 80077da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80077dc:	7b3b      	ldrb	r3, [r7, #12]
 80077de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80077e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80077e4:	4313      	orrs	r3, r2
 80077e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80077e8:	7b3b      	ldrb	r3, [r7, #12]
 80077ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80077ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80077f0:	4313      	orrs	r3, r2
 80077f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80077f4:	7b3b      	ldrb	r3, [r7, #12]
 80077f6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80077fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80077fc:	4313      	orrs	r3, r2
 80077fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007800:	7b3b      	ldrb	r3, [r7, #12]
 8007802:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007806:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007808:	4313      	orrs	r3, r2
 800780a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800780c:	7b3b      	ldrb	r3, [r7, #12]
 800780e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007812:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007814:	4313      	orrs	r3, r2
 8007816:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007818:	7b7b      	ldrb	r3, [r7, #13]
 800781a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800781e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007820:	4313      	orrs	r3, r2
 8007822:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007824:	7b7b      	ldrb	r3, [r7, #13]
 8007826:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800782a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800782c:	4313      	orrs	r3, r2
 800782e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007830:	7b7b      	ldrb	r3, [r7, #13]
 8007832:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007836:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007838:	4313      	orrs	r3, r2
 800783a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800783c:	7b7b      	ldrb	r3, [r7, #13]
 800783e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007842:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007844:	4313      	orrs	r3, r2
 8007846:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007848:	7b7b      	ldrb	r3, [r7, #13]
 800784a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800784e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007850:	4313      	orrs	r3, r2
 8007852:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007854:	7b7b      	ldrb	r3, [r7, #13]
 8007856:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800785a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800785c:	4313      	orrs	r3, r2
 800785e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007860:	7b7b      	ldrb	r3, [r7, #13]
 8007862:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007866:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007868:	4313      	orrs	r3, r2
 800786a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800786c:	7b7b      	ldrb	r3, [r7, #13]
 800786e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007872:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007874:	4313      	orrs	r3, r2
 8007876:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007878:	2b01      	cmp	r3, #1
 800787a:	d164      	bne.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800787c:	f107 030b 	add.w	r3, r7, #11
 8007880:	4619      	mov	r1, r3
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fa7c 	bl	8007d80 <lsm6dso_fsm_data_rate_get>
 8007888:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d001      	beq.n	8007894 <lsm6dso_gy_data_rate_set+0x100>
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	e074      	b.n	800797e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	2b03      	cmp	r3, #3
 8007898:	d852      	bhi.n	8007940 <lsm6dso_gy_data_rate_set+0x1ac>
 800789a:	a201      	add	r2, pc, #4	@ (adr r2, 80078a0 <lsm6dso_gy_data_rate_set+0x10c>)
 800789c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a0:	080078b1 	.word	0x080078b1
 80078a4:	080078c3 	.word	0x080078c3
 80078a8:	080078e1 	.word	0x080078e1
 80078ac:	0800790b 	.word	0x0800790b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d102      	bne.n	80078bc <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80078ba:	e044      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80078bc:	78fb      	ldrb	r3, [r7, #3]
 80078be:	75fb      	strb	r3, [r7, #23]
        break;
 80078c0:	e041      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d102      	bne.n	80078ce <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80078c8:	2302      	movs	r3, #2
 80078ca:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80078cc:	e03b      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80078ce:	78fb      	ldrb	r3, [r7, #3]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d102      	bne.n	80078da <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80078d4:	2302      	movs	r3, #2
 80078d6:	75fb      	strb	r3, [r7, #23]
        break;
 80078d8:	e035      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80078da:	78fb      	ldrb	r3, [r7, #3]
 80078dc:	75fb      	strb	r3, [r7, #23]
        break;
 80078de:	e032      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80078e6:	2303      	movs	r3, #3
 80078e8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80078ea:	e02c      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d102      	bne.n	80078f8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80078f2:	2303      	movs	r3, #3
 80078f4:	75fb      	strb	r3, [r7, #23]
        break;
 80078f6:	e026      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	2b02      	cmp	r3, #2
 80078fc:	d102      	bne.n	8007904 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80078fe:	2303      	movs	r3, #3
 8007900:	75fb      	strb	r3, [r7, #23]
        break;
 8007902:	e020      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007904:	78fb      	ldrb	r3, [r7, #3]
 8007906:	75fb      	strb	r3, [r7, #23]
        break;
 8007908:	e01d      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007910:	2304      	movs	r3, #4
 8007912:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007914:	e017      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007916:	78fb      	ldrb	r3, [r7, #3]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d102      	bne.n	8007922 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 800791c:	2304      	movs	r3, #4
 800791e:	75fb      	strb	r3, [r7, #23]
        break;
 8007920:	e011      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d102      	bne.n	800792e <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007928:	2304      	movs	r3, #4
 800792a:	75fb      	strb	r3, [r7, #23]
        break;
 800792c:	e00b      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 800792e:	78fb      	ldrb	r3, [r7, #3]
 8007930:	2b03      	cmp	r3, #3
 8007932:	d102      	bne.n	800793a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007934:	2304      	movs	r3, #4
 8007936:	75fb      	strb	r3, [r7, #23]
        break;
 8007938:	e005      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	75fb      	strb	r3, [r7, #23]
        break;
 800793e:	e002      	b.n	8007946 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8007940:	78fb      	ldrb	r3, [r7, #3]
 8007942:	75fb      	strb	r3, [r7, #23]
        break;
 8007944:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007946:	f107 0208 	add.w	r2, r7, #8
 800794a:	2301      	movs	r3, #1
 800794c:	2111      	movs	r1, #17
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fcc8 	bl	80072e4 <lsm6dso_read_reg>
 8007954:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8007956:	7dfb      	ldrb	r3, [r7, #23]
 8007958:	f003 030f 	and.w	r3, r3, #15
 800795c:	b2da      	uxtb	r2, r3
 800795e:	7a3b      	ldrb	r3, [r7, #8]
 8007960:	f362 1307 	bfi	r3, r2, #4, #4
 8007964:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007966:	f107 0208 	add.w	r2, r7, #8
 800796a:	2301      	movs	r3, #1
 800796c:	2111      	movs	r1, #17
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f7ff fcd0 	bl	8007314 <lsm6dso_write_reg>
 8007974:	4602      	mov	r2, r0
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	4413      	add	r3, r2
 800797a:	613b      	str	r3, [r7, #16]

  return ret;
 800797c:	693b      	ldr	r3, [r7, #16]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop

08007988 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007992:	f107 0208 	add.w	r2, r7, #8
 8007996:	2301      	movs	r3, #1
 8007998:	2111      	movs	r1, #17
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f7ff fca2 	bl	80072e4 <lsm6dso_read_reg>
 80079a0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80079a2:	7a3b      	ldrb	r3, [r7, #8]
 80079a4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b0a      	cmp	r3, #10
 80079ac:	d844      	bhi.n	8007a38 <lsm6dso_gy_data_rate_get+0xb0>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <lsm6dso_gy_data_rate_get+0x2c>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079e1 	.word	0x080079e1
 80079b8:	080079e9 	.word	0x080079e9
 80079bc:	080079f1 	.word	0x080079f1
 80079c0:	080079f9 	.word	0x080079f9
 80079c4:	08007a01 	.word	0x08007a01
 80079c8:	08007a09 	.word	0x08007a09
 80079cc:	08007a11 	.word	0x08007a11
 80079d0:	08007a19 	.word	0x08007a19
 80079d4:	08007a21 	.word	0x08007a21
 80079d8:	08007a29 	.word	0x08007a29
 80079dc:	08007a31 	.word	0x08007a31
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
      break;
 80079e6:	e02b      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
      break;
 80079ee:	e027      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	2202      	movs	r2, #2
 80079f4:	701a      	strb	r2, [r3, #0]
      break;
 80079f6:	e023      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2203      	movs	r2, #3
 80079fc:	701a      	strb	r2, [r3, #0]
      break;
 80079fe:	e01f      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2204      	movs	r2, #4
 8007a04:	701a      	strb	r2, [r3, #0]
      break;
 8007a06:	e01b      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2205      	movs	r2, #5
 8007a0c:	701a      	strb	r2, [r3, #0]
      break;
 8007a0e:	e017      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2206      	movs	r2, #6
 8007a14:	701a      	strb	r2, [r3, #0]
      break;
 8007a16:	e013      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	2207      	movs	r2, #7
 8007a1c:	701a      	strb	r2, [r3, #0]
      break;
 8007a1e:	e00f      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	2208      	movs	r2, #8
 8007a24:	701a      	strb	r2, [r3, #0]
      break;
 8007a26:	e00b      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2209      	movs	r2, #9
 8007a2c:	701a      	strb	r2, [r3, #0]
      break;
 8007a2e:	e007      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	220a      	movs	r2, #10
 8007a34:	701a      	strb	r2, [r3, #0]
      break;
 8007a36:	e003      	b.n	8007a40 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	701a      	strb	r2, [r3, #0]
      break;
 8007a3e:	bf00      	nop
  }

  return ret;
 8007a40:	68fb      	ldr	r3, [r7, #12]
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3710      	adds	r7, #16
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop

08007a4c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007a58:	f107 0208 	add.w	r2, r7, #8
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	2112      	movs	r1, #18
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fc3f 	bl	80072e4 <lsm6dso_read_reg>
 8007a66:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10f      	bne.n	8007a8e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007a6e:	78fb      	ldrb	r3, [r7, #3]
 8007a70:	f003 0301 	and.w	r3, r3, #1
 8007a74:	b2da      	uxtb	r2, r3
 8007a76:	7a3b      	ldrb	r3, [r7, #8]
 8007a78:	f362 1386 	bfi	r3, r2, #6, #1
 8007a7c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007a7e:	f107 0208 	add.w	r2, r7, #8
 8007a82:	2301      	movs	r3, #1
 8007a84:	2112      	movs	r1, #18
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7ff fc44 	bl	8007314 <lsm6dso_write_reg>
 8007a8c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007aa2:	f107 020c 	add.w	r2, r7, #12
 8007aa6:	2306      	movs	r3, #6
 8007aa8:	2122      	movs	r1, #34	@ 0x22
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fc1a 	bl	80072e4 <lsm6dso_read_reg>
 8007ab0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007ab2:	7b7b      	ldrb	r3, [r7, #13]
 8007ab4:	b21a      	sxth	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	7b3a      	ldrb	r2, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	b29b      	uxth	r3, r3
 8007acc:	b21a      	sxth	r2, r3
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007ad2:	7bfa      	ldrb	r2, [r7, #15]
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	3302      	adds	r3, #2
 8007ad8:	b212      	sxth	r2, r2
 8007ada:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	3302      	adds	r3, #2
 8007ae0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	021b      	lsls	r3, r3, #8
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	7bba      	ldrb	r2, [r7, #14]
 8007aec:	4413      	add	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	3302      	adds	r3, #2
 8007af4:	b212      	sxth	r2, r2
 8007af6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007af8:	7c7a      	ldrb	r2, [r7, #17]
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	3304      	adds	r3, #4
 8007afe:	b212      	sxth	r2, r2
 8007b00:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	3304      	adds	r3, #4
 8007b06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	7c3a      	ldrb	r2, [r7, #16]
 8007b12:	4413      	add	r3, r2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	b212      	sxth	r2, r2
 8007b1c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007b1e:	697b      	ldr	r3, [r7, #20]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3718      	adds	r7, #24
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007b32:	f107 020c 	add.w	r2, r7, #12
 8007b36:	2306      	movs	r3, #6
 8007b38:	2128      	movs	r1, #40	@ 0x28
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7ff fbd2 	bl	80072e4 <lsm6dso_read_reg>
 8007b40:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007b42:	7b7b      	ldrb	r3, [r7, #13]
 8007b44:	b21a      	sxth	r2, r3
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b50:	b29b      	uxth	r3, r3
 8007b52:	021b      	lsls	r3, r3, #8
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	7b3a      	ldrb	r2, [r7, #12]
 8007b58:	4413      	add	r3, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	b21a      	sxth	r2, r3
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007b62:	7bfa      	ldrb	r2, [r7, #15]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	3302      	adds	r3, #2
 8007b68:	b212      	sxth	r2, r2
 8007b6a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	3302      	adds	r3, #2
 8007b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	021b      	lsls	r3, r3, #8
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	7bba      	ldrb	r2, [r7, #14]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3302      	adds	r3, #2
 8007b84:	b212      	sxth	r2, r2
 8007b86:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007b88:	7c7a      	ldrb	r2, [r7, #17]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	b212      	sxth	r2, r2
 8007b90:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	3304      	adds	r3, #4
 8007b96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	021b      	lsls	r3, r3, #8
 8007b9e:	b29b      	uxth	r3, r3
 8007ba0:	7c3a      	ldrb	r2, [r7, #16]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	b29a      	uxth	r2, r3
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	3304      	adds	r3, #4
 8007baa:	b212      	sxth	r2, r2
 8007bac:	801a      	strh	r2, [r3, #0]

  return ret;
 8007bae:	697b      	ldr	r3, [r7, #20]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	f003 0303 	and.w	r3, r3, #3
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	7a3b      	ldrb	r3, [r7, #8]
 8007bd2:	f362 1387 	bfi	r3, r2, #6, #2
 8007bd6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007bd8:	f107 0208 	add.w	r2, r7, #8
 8007bdc:	2301      	movs	r3, #1
 8007bde:	2101      	movs	r1, #1
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fb97 	bl	8007314 <lsm6dso_write_reg>
 8007be6:	60f8      	str	r0, [r7, #12]

  return ret;
 8007be8:	68fb      	ldr	r3, [r7, #12]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b084      	sub	sp, #16
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	683a      	ldr	r2, [r7, #0]
 8007c00:	210f      	movs	r1, #15
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fb6e 	bl	80072e4 <lsm6dso_read_reg>
 8007c08:	60f8      	str	r0, [r7, #12]

  return ret;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007c20:	f107 0208 	add.w	r2, r7, #8
 8007c24:	2301      	movs	r3, #1
 8007c26:	2112      	movs	r1, #18
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7ff fb5b 	bl	80072e4 <lsm6dso_read_reg>
 8007c2e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d10f      	bne.n	8007c56 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	7a3b      	ldrb	r3, [r7, #8]
 8007c40:	f362 0382 	bfi	r3, r2, #2, #1
 8007c44:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007c46:	f107 0208 	add.w	r2, r7, #8
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	2112      	movs	r1, #18
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fb60 	bl	8007314 <lsm6dso_write_reg>
 8007c54:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3710      	adds	r7, #16
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	460b      	mov	r3, r1
 8007c6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007c6c:	f107 020c 	add.w	r2, r7, #12
 8007c70:	2301      	movs	r3, #1
 8007c72:	2118      	movs	r1, #24
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff fb35 	bl	80072e4 <lsm6dso_read_reg>
 8007c7a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007c7c:	78fb      	ldrb	r3, [r7, #3]
 8007c7e:	09db      	lsrs	r3, r3, #7
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	7b3b      	ldrb	r3, [r7, #12]
 8007c8a:	f362 0341 	bfi	r3, r2, #1, #1
 8007c8e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007c90:	f107 020c 	add.w	r2, r7, #12
 8007c94:	2301      	movs	r3, #1
 8007c96:	2118      	movs	r1, #24
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7ff fb3b 	bl	8007314 <lsm6dso_write_reg>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <lsm6dso_i3c_disable_set+0x50>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	e01b      	b.n	8007ce8 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007cb0:	f107 0210 	add.w	r2, r7, #16
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	2162      	movs	r1, #98	@ 0x62
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7ff fb13 	bl	80072e4 <lsm6dso_read_reg>
 8007cbe:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007cc0:	78fb      	ldrb	r3, [r7, #3]
 8007cc2:	f003 0303 	and.w	r3, r3, #3
 8007cc6:	b2da      	uxtb	r2, r3
 8007cc8:	7c3b      	ldrb	r3, [r7, #16]
 8007cca:	f362 03c4 	bfi	r3, r2, #3, #2
 8007cce:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007cd0:	f107 0210 	add.w	r2, r7, #16
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	2162      	movs	r1, #98	@ 0x62
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f7ff fb1b 	bl	8007314 <lsm6dso_write_reg>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	617b      	str	r3, [r7, #20]

  return ret;
 8007ce6:	697b      	ldr	r3, [r7, #20]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007cfc:	f107 0208 	add.w	r2, r7, #8
 8007d00:	2301      	movs	r3, #1
 8007d02:	210a      	movs	r1, #10
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7ff faed 	bl	80072e4 <lsm6dso_read_reg>
 8007d0a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10f      	bne.n	8007d32 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007d12:	78fb      	ldrb	r3, [r7, #3]
 8007d14:	f003 0307 	and.w	r3, r3, #7
 8007d18:	b2da      	uxtb	r2, r3
 8007d1a:	7a3b      	ldrb	r3, [r7, #8]
 8007d1c:	f362 0302 	bfi	r3, r2, #0, #3
 8007d20:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007d22:	f107 0208 	add.w	r2, r7, #8
 8007d26:	2301      	movs	r3, #1
 8007d28:	210a      	movs	r1, #10
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7ff faf2 	bl	8007314 <lsm6dso_write_reg>
 8007d30:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d32:	68fb      	ldr	r3, [r7, #12]
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007d46:	2102      	movs	r1, #2
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff ff35 	bl	8007bb8 <lsm6dso_mem_bank_set>
 8007d4e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007d50:	2302      	movs	r3, #2
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	2146      	movs	r1, #70	@ 0x46
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f7ff fac4 	bl	80072e4 <lsm6dso_read_reg>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff ff26 	bl	8007bb8 <lsm6dso_mem_bank_set>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4413      	add	r3, r2
 8007d72:	60fb      	str	r3, [r7, #12]

  return ret;
 8007d74:	68fb      	ldr	r3, [r7, #12]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
	...

08007d80 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007d8a:	2102      	movs	r1, #2
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7ff ff13 	bl	8007bb8 <lsm6dso_mem_bank_set>
 8007d92:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d001      	beq.n	8007d9e <lsm6dso_fsm_data_rate_get+0x1e>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	e03a      	b.n	8007e14 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007d9e:	f107 0208 	add.w	r2, r7, #8
 8007da2:	2301      	movs	r3, #1
 8007da4:	215f      	movs	r1, #95	@ 0x5f
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7ff fa9c 	bl	80072e4 <lsm6dso_read_reg>
 8007dac:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d125      	bne.n	8007e00 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007db4:	7a3b      	ldrb	r3, [r7, #8]
 8007db6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d81b      	bhi.n	8007df8 <lsm6dso_fsm_data_rate_get+0x78>
 8007dc0:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <lsm6dso_fsm_data_rate_get+0x48>)
 8007dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc6:	bf00      	nop
 8007dc8:	08007dd9 	.word	0x08007dd9
 8007dcc:	08007de1 	.word	0x08007de1
 8007dd0:	08007de9 	.word	0x08007de9
 8007dd4:	08007df1 	.word	0x08007df1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	701a      	strb	r2, [r3, #0]
      break;
 8007dde:	e010      	b.n	8007e02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2201      	movs	r2, #1
 8007de4:	701a      	strb	r2, [r3, #0]
      break;
 8007de6:	e00c      	b.n	8007e02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2202      	movs	r2, #2
 8007dec:	701a      	strb	r2, [r3, #0]
      break;
 8007dee:	e008      	b.n	8007e02 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	2203      	movs	r2, #3
 8007df4:	701a      	strb	r2, [r3, #0]
      break;
 8007df6:	e004      	b.n	8007e02 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	701a      	strb	r2, [r3, #0]
      break;
 8007dfe:	e000      	b.n	8007e02 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007e00:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007e02:	2100      	movs	r1, #0
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7ff fed7 	bl	8007bb8 <lsm6dso_mem_bank_set>
 8007e0a:	4602      	mov	r2, r0
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4413      	add	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  return ret;
 8007e12:	68fb      	ldr	r3, [r7, #12]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3710      	adds	r7, #16
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	@ 0x38
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007e26:	2300      	movs	r3, #0
 8007e28:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d06e      	beq.n	8007f16 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	f200 809d 	bhi.w	8007f7a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d032      	beq.n	8007eb2 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007e4c:	e095      	b.n	8007f7a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007e4e:	6838      	ldr	r0, [r7, #0]
 8007e50:	f000 f9ae 	bl	80081b0 <LSM6DSO_0_Probe>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d002      	beq.n	8007e60 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5e:	e0cc      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007e60:	4a68      	ldr	r2, [pc, #416]	@ (8008004 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e68:	68db      	ldr	r3, [r3, #12]
 8007e6a:	4967      	ldr	r1, [pc, #412]	@ (8008008 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e72:	f107 010c 	add.w	r1, r7, #12
 8007e76:	4610      	mov	r0, r2
 8007e78:	4798      	blx	r3
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007e80:	f06f 0306 	mvn.w	r3, #6
 8007e84:	e0b9      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007e86:	7b3b      	ldrb	r3, [r7, #12]
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d103      	bne.n	8007e94 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	f043 0302 	orr.w	r3, r3, #2
 8007e92:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007e94:	7b7b      	ldrb	r3, [r7, #13]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d103      	bne.n	8007ea2 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e9c:	f043 0301 	orr.w	r3, r3, #1
 8007ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d16c      	bne.n	8007f82 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	f043 0304 	orr.w	r3, r3, #4
 8007eae:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007eb0:	e067      	b.n	8007f82 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007eb2:	6838      	ldr	r0, [r7, #0]
 8007eb4:	f000 fa3c 	bl	8008330 <LIS2DW12_0_Probe>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d002      	beq.n	8007ec4 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec2:	e09a      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007ec4:	4a4f      	ldr	r2, [pc, #316]	@ (8008004 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	494e      	ldr	r1, [pc, #312]	@ (8008008 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ed6:	f107 010c 	add.w	r1, r7, #12
 8007eda:	4610      	mov	r0, r2
 8007edc:	4798      	blx	r3
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d002      	beq.n	8007eea <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007ee4:	f06f 0306 	mvn.w	r3, #6
 8007ee8:	e087      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007eea:	7b3b      	ldrb	r3, [r7, #12]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d103      	bne.n	8007ef8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef2:	f043 0302 	orr.w	r3, r3, #2
 8007ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007ef8:	7b7b      	ldrb	r3, [r7, #13]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d103      	bne.n	8007f06 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	f043 0301 	orr.w	r3, r3, #1
 8007f04:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007f06:	7bbb      	ldrb	r3, [r7, #14]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d13c      	bne.n	8007f86 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0e:	f043 0304 	orr.w	r3, r3, #4
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007f14:	e037      	b.n	8007f86 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007f16:	6838      	ldr	r0, [r7, #0]
 8007f18:	f000 fab2 	bl	8008480 <LIS2MDL_0_Probe>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d002      	beq.n	8007f28 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007f22:	f04f 33ff 	mov.w	r3, #4294967295
 8007f26:	e068      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007f28:	4a36      	ldr	r2, [pc, #216]	@ (8008004 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f30:	68db      	ldr	r3, [r3, #12]
 8007f32:	4935      	ldr	r1, [pc, #212]	@ (8008008 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f3a:	f107 010c 	add.w	r1, r7, #12
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4798      	blx	r3
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007f48:	f06f 0306 	mvn.w	r3, #6
 8007f4c:	e055      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007f4e:	7b3b      	ldrb	r3, [r7, #12]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d103      	bne.n	8007f5c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f56:	f043 0302 	orr.w	r3, r3, #2
 8007f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007f5c:	7b7b      	ldrb	r3, [r7, #13]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d103      	bne.n	8007f6a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007f6a:	7bbb      	ldrb	r3, [r7, #14]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d10c      	bne.n	8007f8a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f72:	f043 0304 	orr.w	r3, r3, #4
 8007f76:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007f78:	e007      	b.n	8007f8a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007f7a:	f06f 0301 	mvn.w	r3, #1
 8007f7e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007f80:	e004      	b.n	8007f8c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007f82:	bf00      	nop
 8007f84:	e002      	b.n	8007f8c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007f86:	bf00      	nop
 8007f88:	e000      	b.n	8007f8c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007f8a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007f8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f94:	e031      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007f96:	2300      	movs	r3, #0
 8007f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f9a:	e02a      	b.n	8007ff2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d11e      	bne.n	8007fe6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007fa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	4013      	ands	r3, r2
 8007fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d118      	bne.n	8007fe6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007fb4:	4a15      	ldr	r2, [pc, #84]	@ (800800c <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fbc:	4814      	ldr	r0, [pc, #80]	@ (8008010 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	490e      	ldr	r1, [pc, #56]	@ (8008008 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007fd0:	687a      	ldr	r2, [r7, #4]
 8007fd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4798      	blx	r3
 8007fda:	4603      	mov	r3, r0
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007fe0:	f06f 0304 	mvn.w	r3, #4
 8007fe4:	e009      	b.n	8007ffa <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	3301      	adds	r3, #1
 8007ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ff4:	2b02      	cmp	r3, #2
 8007ff6:	d9d1      	bls.n	8007f9c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3738      	adds	r7, #56	@ 0x38
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}
 8008002:	bf00      	nop
 8008004:	200007f8 	.word	0x200007f8
 8008008:	200007c8 	.word	0x200007c8
 800800c:	200000cc 	.word	0x200000cc
 8008010:	200007d4 	.word	0x200007d4

08008014 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	60f8      	str	r0, [r7, #12]
 800801c:	60b9      	str	r1, [r7, #8]
 800801e:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b02      	cmp	r3, #2
 8008024:	d903      	bls.n	800802e <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008026:	f06f 0301 	mvn.w	r3, #1
 800802a:	617b      	str	r3, [r7, #20]
 800802c:	e029      	b.n	8008082 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 800802e:	4a17      	ldr	r2, [pc, #92]	@ (800808c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4013      	ands	r3, r2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	429a      	cmp	r2, r3
 800803e:	d11d      	bne.n	800807c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008040:	4a13      	ldr	r2, [pc, #76]	@ (8008090 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008048:	4812      	ldr	r0, [pc, #72]	@ (8008094 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	4613      	mov	r3, r2
 800804e:	005b      	lsls	r3, r3, #1
 8008050:	4413      	add	r3, r2
 8008052:	440b      	add	r3, r1
 8008054:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008058:	69db      	ldr	r3, [r3, #28]
 800805a:	490f      	ldr	r1, [pc, #60]	@ (8008098 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 800805c:	68fa      	ldr	r2, [r7, #12]
 800805e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	4610      	mov	r0, r2
 8008066:	4798      	blx	r3
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800806e:	f06f 0304 	mvn.w	r3, #4
 8008072:	617b      	str	r3, [r7, #20]
 8008074:	e005      	b.n	8008082 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008076:	2300      	movs	r3, #0
 8008078:	617b      	str	r3, [r7, #20]
 800807a:	e002      	b.n	8008082 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800807c:	f06f 0301 	mvn.w	r3, #1
 8008080:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008082:	697b      	ldr	r3, [r7, #20]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	20000804 	.word	0x20000804
 8008090:	200000cc 	.word	0x200000cc
 8008094:	200007d4 	.word	0x200007d4
 8008098:	200007c8 	.word	0x200007c8

0800809c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b086      	sub	sp, #24
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d903      	bls.n	80080b8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80080b0:	f06f 0301 	mvn.w	r3, #1
 80080b4:	617b      	str	r3, [r7, #20]
 80080b6:	e02a      	b.n	800810e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80080b8:	4a17      	ldr	r2, [pc, #92]	@ (8008118 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4013      	ands	r3, r2
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d11e      	bne.n	8008108 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80080ca:	4a14      	ldr	r2, [pc, #80]	@ (800811c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80080d2:	4813      	ldr	r0, [pc, #76]	@ (8008120 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4613      	mov	r3, r2
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	4413      	add	r3, r2
 80080dc:	440b      	add	r3, r1
 80080de:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	490f      	ldr	r1, [pc, #60]	@ (8008124 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80080e6:	68fa      	ldr	r2, [r7, #12]
 80080e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080ec:	ed97 0a01 	vldr	s0, [r7, #4]
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080fa:	f06f 0304 	mvn.w	r3, #4
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e005      	b.n	800810e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008102:	2300      	movs	r3, #0
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e002      	b.n	800810e <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008108:	f06f 0301 	mvn.w	r3, #1
 800810c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800810e:	697b      	ldr	r3, [r7, #20]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	20000804 	.word	0x20000804
 800811c:	200000cc 	.word	0x200000cc
 8008120:	200007d4 	.word	0x200007d4
 8008124:	200007c8 	.word	0x200007c8

08008128 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d903      	bls.n	8008142 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800813a:	f06f 0301 	mvn.w	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e029      	b.n	8008196 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008142:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	429a      	cmp	r2, r3
 8008152:	d11d      	bne.n	8008190 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8008154:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800815c:	4812      	ldr	r0, [pc, #72]	@ (80081a8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	440b      	add	r3, r1
 8008168:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800816c:	699b      	ldr	r3, [r3, #24]
 800816e:	490f      	ldr	r1, [pc, #60]	@ (80081ac <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008182:	f06f 0304 	mvn.w	r3, #4
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e005      	b.n	8008196 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	e002      	b.n	8008196 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008190:	f06f 0301 	mvn.w	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000804 	.word	0x20000804
 80081a4:	200000cc 	.word	0x200000cc
 80081a8:	200007d4 	.word	0x200007d4
 80081ac:	200007c8 	.word	0x200007c8

080081b0 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b094      	sub	sp, #80	@ 0x50
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80081b8:	2300      	movs	r3, #0
 80081ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80081bc:	2300      	movs	r3, #0
 80081be:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80081c0:	23d7      	movs	r3, #215	@ 0xd7
 80081c2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80081c6:	4b4b      	ldr	r3, [pc, #300]	@ (80082f4 <LSM6DSO_0_Probe+0x144>)
 80081c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80081ca:	4b4b      	ldr	r3, [pc, #300]	@ (80082f8 <LSM6DSO_0_Probe+0x148>)
 80081cc:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80081ce:	4b4b      	ldr	r3, [pc, #300]	@ (80082fc <LSM6DSO_0_Probe+0x14c>)
 80081d0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80081d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008300 <LSM6DSO_0_Probe+0x150>)
 80081d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80081d6:	4b4b      	ldr	r3, [pc, #300]	@ (8008304 <LSM6DSO_0_Probe+0x154>)
 80081d8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80081da:	4b4b      	ldr	r3, [pc, #300]	@ (8008308 <LSM6DSO_0_Probe+0x158>)
 80081dc:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80081de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80081e2:	4619      	mov	r1, r3
 80081e4:	4849      	ldr	r0, [pc, #292]	@ (800830c <LSM6DSO_0_Probe+0x15c>)
 80081e6:	f7fd fe3f 	bl	8005e68 <LSM6DSO_RegisterBusIO>
 80081ea:	4603      	mov	r3, r0
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d003      	beq.n	80081f8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80081f0:	f06f 0306 	mvn.w	r3, #6
 80081f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081f6:	e077      	b.n	80082e8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80081f8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80081fc:	4619      	mov	r1, r3
 80081fe:	4843      	ldr	r0, [pc, #268]	@ (800830c <LSM6DSO_0_Probe+0x15c>)
 8008200:	f7fd ff3c 	bl	800607c <LSM6DSO_ReadID>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800820a:	f06f 0306 	mvn.w	r3, #6
 800820e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008210:	e06a      	b.n	80082e8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8008212:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008216:	2b6c      	cmp	r3, #108	@ 0x6c
 8008218:	d003      	beq.n	8008222 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800821a:	f06f 0306 	mvn.w	r3, #6
 800821e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008220:	e062      	b.n	80082e8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8008222:	f107 030c 	add.w	r3, r7, #12
 8008226:	4619      	mov	r1, r3
 8008228:	4838      	ldr	r0, [pc, #224]	@ (800830c <LSM6DSO_0_Probe+0x15c>)
 800822a:	f7fd ff3d 	bl	80060a8 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800822e:	7b7b      	ldrb	r3, [r7, #13]
 8008230:	461a      	mov	r2, r3
 8008232:	7b3b      	ldrb	r3, [r7, #12]
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	431a      	orrs	r2, r3
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	4313      	orrs	r3, r2
 800823e:	4a34      	ldr	r2, [pc, #208]	@ (8008310 <LSM6DSO_0_Probe+0x160>)
 8008240:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8008242:	4b34      	ldr	r3, [pc, #208]	@ (8008314 <LSM6DSO_0_Probe+0x164>)
 8008244:	4a31      	ldr	r2, [pc, #196]	@ (800830c <LSM6DSO_0_Probe+0x15c>)
 8008246:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008248:	4b33      	ldr	r3, [pc, #204]	@ (8008318 <LSM6DSO_0_Probe+0x168>)
 800824a:	4a34      	ldr	r2, [pc, #208]	@ (800831c <LSM6DSO_0_Probe+0x16c>)
 800824c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800824e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d11d      	bne.n	8008290 <LSM6DSO_0_Probe+0xe0>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f003 0301 	and.w	r3, r3, #1
 800825a:	2b00      	cmp	r3, #0
 800825c:	d018      	beq.n	8008290 <LSM6DSO_0_Probe+0xe0>
 800825e:	7b7b      	ldrb	r3, [r7, #13]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d115      	bne.n	8008290 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008264:	4b2e      	ldr	r3, [pc, #184]	@ (8008320 <LSM6DSO_0_Probe+0x170>)
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	4a2e      	ldr	r2, [pc, #184]	@ (8008324 <LSM6DSO_0_Probe+0x174>)
 800826a:	492f      	ldr	r1, [pc, #188]	@ (8008328 <LSM6DSO_0_Probe+0x178>)
 800826c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008270:	4b29      	ldr	r3, [pc, #164]	@ (8008318 <LSM6DSO_0_Probe+0x168>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a27      	ldr	r2, [pc, #156]	@ (8008314 <LSM6DSO_0_Probe+0x164>)
 8008278:	6812      	ldr	r2, [r2, #0]
 800827a:	4610      	mov	r0, r2
 800827c:	4798      	blx	r3
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008284:	f06f 0304 	mvn.w	r3, #4
 8008288:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800828a:	e001      	b.n	8008290 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008290:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008292:	2b00      	cmp	r3, #0
 8008294:	d11d      	bne.n	80082d2 <LSM6DSO_0_Probe+0x122>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f003 0302 	and.w	r3, r3, #2
 800829c:	2b00      	cmp	r3, #0
 800829e:	d018      	beq.n	80082d2 <LSM6DSO_0_Probe+0x122>
 80082a0:	7b3b      	ldrb	r3, [r7, #12]
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d115      	bne.n	80082d2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80082a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008320 <LSM6DSO_0_Probe+0x170>)
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008324 <LSM6DSO_0_Probe+0x174>)
 80082ac:	491f      	ldr	r1, [pc, #124]	@ (800832c <LSM6DSO_0_Probe+0x17c>)
 80082ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80082b2:	4b19      	ldr	r3, [pc, #100]	@ (8008318 <LSM6DSO_0_Probe+0x168>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a16      	ldr	r2, [pc, #88]	@ (8008314 <LSM6DSO_0_Probe+0x164>)
 80082ba:	6812      	ldr	r2, [r2, #0]
 80082bc:	4610      	mov	r0, r2
 80082be:	4798      	blx	r3
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d003      	beq.n	80082ce <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80082c6:	f06f 0304 	mvn.w	r3, #4
 80082ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082cc:	e001      	b.n	80082d2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80082ce:	2300      	movs	r3, #0
 80082d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80082d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d107      	bne.n	80082e8 <LSM6DSO_0_Probe+0x138>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f003 0304 	and.w	r3, r3, #4
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d002      	beq.n	80082e8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80082e2:	f06f 0304 	mvn.w	r3, #4
 80082e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80082e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3750      	adds	r7, #80	@ 0x50
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	08003445 	.word	0x08003445
 80082f8:	080034c1 	.word	0x080034c1
 80082fc:	08003575 	.word	0x08003575
 8008300:	08003511 	.word	0x08003511
 8008304:	080035d9 	.word	0x080035d9
 8008308:	08001cfd 	.word	0x08001cfd
 800830c:	20000810 	.word	0x20000810
 8008310:	20000804 	.word	0x20000804
 8008314:	200007c8 	.word	0x200007c8
 8008318:	200007f8 	.word	0x200007f8
 800831c:	20000074 	.word	0x20000074
 8008320:	200000cc 	.word	0x200000cc
 8008324:	200007d4 	.word	0x200007d4
 8008328:	200000a8 	.word	0x200000a8
 800832c:	20000084 	.word	0x20000084

08008330 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b094      	sub	sp, #80	@ 0x50
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008338:	2300      	movs	r3, #0
 800833a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800833c:	2300      	movs	r3, #0
 800833e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008340:	2333      	movs	r3, #51	@ 0x33
 8008342:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008346:	4b40      	ldr	r3, [pc, #256]	@ (8008448 <LIS2DW12_0_Probe+0x118>)
 8008348:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800834a:	4b40      	ldr	r3, [pc, #256]	@ (800844c <LIS2DW12_0_Probe+0x11c>)
 800834c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800834e:	4b40      	ldr	r3, [pc, #256]	@ (8008450 <LIS2DW12_0_Probe+0x120>)
 8008350:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008352:	4b40      	ldr	r3, [pc, #256]	@ (8008454 <LIS2DW12_0_Probe+0x124>)
 8008354:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008356:	4b40      	ldr	r3, [pc, #256]	@ (8008458 <LIS2DW12_0_Probe+0x128>)
 8008358:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800835a:	4b40      	ldr	r3, [pc, #256]	@ (800845c <LIS2DW12_0_Probe+0x12c>)
 800835c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800835e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008362:	4619      	mov	r1, r3
 8008364:	483e      	ldr	r0, [pc, #248]	@ (8008460 <LIS2DW12_0_Probe+0x130>)
 8008366:	f7fb faf3 	bl	8003950 <LIS2DW12_RegisterBusIO>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008370:	f06f 0306 	mvn.w	r3, #6
 8008374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008376:	e062      	b.n	800843e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008378:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800837c:	4619      	mov	r1, r3
 800837e:	4838      	ldr	r0, [pc, #224]	@ (8008460 <LIS2DW12_0_Probe+0x130>)
 8008380:	f7fb fbd4 	bl	8003b2c <LIS2DW12_ReadID>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800838a:	f06f 0306 	mvn.w	r3, #6
 800838e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008390:	e055      	b.n	800843e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008392:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008396:	2b44      	cmp	r3, #68	@ 0x44
 8008398:	d003      	beq.n	80083a2 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800839a:	f06f 0306 	mvn.w	r3, #6
 800839e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083a0:	e04d      	b.n	800843e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80083a2:	f107 030c 	add.w	r3, r7, #12
 80083a6:	4619      	mov	r1, r3
 80083a8:	482d      	ldr	r0, [pc, #180]	@ (8008460 <LIS2DW12_0_Probe+0x130>)
 80083aa:	f7fb fbd5 	bl	8003b58 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80083ae:	7b7b      	ldrb	r3, [r7, #13]
 80083b0:	461a      	mov	r2, r3
 80083b2:	7b3b      	ldrb	r3, [r7, #12]
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	431a      	orrs	r2, r3
 80083b8:	7bbb      	ldrb	r3, [r7, #14]
 80083ba:	009b      	lsls	r3, r3, #2
 80083bc:	4313      	orrs	r3, r2
 80083be:	4a29      	ldr	r2, [pc, #164]	@ (8008464 <LIS2DW12_0_Probe+0x134>)
 80083c0:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80083c2:	4b29      	ldr	r3, [pc, #164]	@ (8008468 <LIS2DW12_0_Probe+0x138>)
 80083c4:	4a26      	ldr	r2, [pc, #152]	@ (8008460 <LIS2DW12_0_Probe+0x130>)
 80083c6:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80083c8:	4b28      	ldr	r3, [pc, #160]	@ (800846c <LIS2DW12_0_Probe+0x13c>)
 80083ca:	4a29      	ldr	r2, [pc, #164]	@ (8008470 <LIS2DW12_0_Probe+0x140>)
 80083cc:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80083ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d11e      	bne.n	8008412 <LIS2DW12_0_Probe+0xe2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f003 0302 	and.w	r3, r3, #2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d019      	beq.n	8008412 <LIS2DW12_0_Probe+0xe2>
 80083de:	7b3b      	ldrb	r3, [r7, #12]
 80083e0:	2b01      	cmp	r3, #1
 80083e2:	d116      	bne.n	8008412 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80083e4:	4b23      	ldr	r3, [pc, #140]	@ (8008474 <LIS2DW12_0_Probe+0x144>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	4a23      	ldr	r2, [pc, #140]	@ (8008478 <LIS2DW12_0_Probe+0x148>)
 80083ea:	3303      	adds	r3, #3
 80083ec:	4923      	ldr	r1, [pc, #140]	@ (800847c <LIS2DW12_0_Probe+0x14c>)
 80083ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80083f2:	4b1e      	ldr	r3, [pc, #120]	@ (800846c <LIS2DW12_0_Probe+0x13c>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008468 <LIS2DW12_0_Probe+0x138>)
 80083fa:	6852      	ldr	r2, [r2, #4]
 80083fc:	4610      	mov	r0, r2
 80083fe:	4798      	blx	r3
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008406:	f06f 0304 	mvn.w	r3, #4
 800840a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800840c:	e001      	b.n	8008412 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800840e:	2300      	movs	r3, #0
 8008410:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008412:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008414:	2b00      	cmp	r3, #0
 8008416:	d107      	bne.n	8008428 <LIS2DW12_0_Probe+0xf8>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d002      	beq.n	8008428 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008422:	f06f 0304 	mvn.w	r3, #4
 8008426:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8008428:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d107      	bne.n	800843e <LIS2DW12_0_Probe+0x10e>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f003 0304 	and.w	r3, r3, #4
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008438:	f06f 0304 	mvn.w	r3, #4
 800843c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800843e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008440:	4618      	mov	r0, r3
 8008442:	3750      	adds	r7, #80	@ 0x50
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	08003445 	.word	0x08003445
 800844c:	080034c1 	.word	0x080034c1
 8008450:	08003575 	.word	0x08003575
 8008454:	08003511 	.word	0x08003511
 8008458:	080035d9 	.word	0x080035d9
 800845c:	08001cfd 	.word	0x08001cfd
 8008460:	20000848 	.word	0x20000848
 8008464:	20000804 	.word	0x20000804
 8008468:	200007c8 	.word	0x200007c8
 800846c:	200007f8 	.word	0x200007f8
 8008470:	2000000c 	.word	0x2000000c
 8008474:	200000cc 	.word	0x200000cc
 8008478:	200007d4 	.word	0x200007d4
 800847c:	2000001c 	.word	0x2000001c

08008480 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b094      	sub	sp, #80	@ 0x50
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008488:	2300      	movs	r3, #0
 800848a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800848c:	2300      	movs	r3, #0
 800848e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008490:	233d      	movs	r3, #61	@ 0x3d
 8008492:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008496:	4b40      	ldr	r3, [pc, #256]	@ (8008598 <LIS2MDL_0_Probe+0x118>)
 8008498:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800849a:	4b40      	ldr	r3, [pc, #256]	@ (800859c <LIS2MDL_0_Probe+0x11c>)
 800849c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800849e:	4b40      	ldr	r3, [pc, #256]	@ (80085a0 <LIS2MDL_0_Probe+0x120>)
 80084a0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80084a2:	4b40      	ldr	r3, [pc, #256]	@ (80085a4 <LIS2MDL_0_Probe+0x124>)
 80084a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80084a6:	4b40      	ldr	r3, [pc, #256]	@ (80085a8 <LIS2MDL_0_Probe+0x128>)
 80084a8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80084aa:	4b40      	ldr	r3, [pc, #256]	@ (80085ac <LIS2MDL_0_Probe+0x12c>)
 80084ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80084ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80084b2:	4619      	mov	r1, r3
 80084b4:	483e      	ldr	r0, [pc, #248]	@ (80085b0 <LIS2MDL_0_Probe+0x130>)
 80084b6:	f7fc fcd7 	bl	8004e68 <LIS2MDL_RegisterBusIO>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d003      	beq.n	80084c8 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084c0:	f06f 0306 	mvn.w	r3, #6
 80084c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084c6:	e062      	b.n	800858e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80084c8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80084cc:	4619      	mov	r1, r3
 80084ce:	4838      	ldr	r0, [pc, #224]	@ (80085b0 <LIS2MDL_0_Probe+0x130>)
 80084d0:	f7fc fde6 	bl	80050a0 <LIS2MDL_ReadID>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084da:	f06f 0306 	mvn.w	r3, #6
 80084de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084e0:	e055      	b.n	800858e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80084e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084e6:	2b40      	cmp	r3, #64	@ 0x40
 80084e8:	d003      	beq.n	80084f2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084ea:	f06f 0306 	mvn.w	r3, #6
 80084ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084f0:	e04d      	b.n	800858e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80084f2:	f107 030c 	add.w	r3, r7, #12
 80084f6:	4619      	mov	r1, r3
 80084f8:	482d      	ldr	r0, [pc, #180]	@ (80085b0 <LIS2MDL_0_Probe+0x130>)
 80084fa:	f7fc fdf7 	bl	80050ec <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80084fe:	7b7b      	ldrb	r3, [r7, #13]
 8008500:	461a      	mov	r2, r3
 8008502:	7b3b      	ldrb	r3, [r7, #12]
 8008504:	005b      	lsls	r3, r3, #1
 8008506:	431a      	orrs	r2, r3
 8008508:	7bbb      	ldrb	r3, [r7, #14]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4313      	orrs	r3, r2
 800850e:	4a29      	ldr	r2, [pc, #164]	@ (80085b4 <LIS2MDL_0_Probe+0x134>)
 8008510:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8008512:	4b29      	ldr	r3, [pc, #164]	@ (80085b8 <LIS2MDL_0_Probe+0x138>)
 8008514:	4a26      	ldr	r2, [pc, #152]	@ (80085b0 <LIS2MDL_0_Probe+0x130>)
 8008516:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 8008518:	4b28      	ldr	r3, [pc, #160]	@ (80085bc <LIS2MDL_0_Probe+0x13c>)
 800851a:	4a29      	ldr	r2, [pc, #164]	@ (80085c0 <LIS2MDL_0_Probe+0x140>)
 800851c:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 800851e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d11e      	bne.n	8008562 <LIS2MDL_0_Probe+0xe2>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f003 0304 	and.w	r3, r3, #4
 800852a:	2b00      	cmp	r3, #0
 800852c:	d019      	beq.n	8008562 <LIS2MDL_0_Probe+0xe2>
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b01      	cmp	r3, #1
 8008532:	d116      	bne.n	8008562 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008534:	4b23      	ldr	r3, [pc, #140]	@ (80085c4 <LIS2MDL_0_Probe+0x144>)
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	4a23      	ldr	r2, [pc, #140]	@ (80085c8 <LIS2MDL_0_Probe+0x148>)
 800853a:	3306      	adds	r3, #6
 800853c:	4923      	ldr	r1, [pc, #140]	@ (80085cc <LIS2MDL_0_Probe+0x14c>)
 800853e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008542:	4b1e      	ldr	r3, [pc, #120]	@ (80085bc <LIS2MDL_0_Probe+0x13c>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <LIS2MDL_0_Probe+0x138>)
 800854a:	6892      	ldr	r2, [r2, #8]
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d003      	beq.n	800855e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008556:	f06f 0304 	mvn.w	r3, #4
 800855a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800855c:	e001      	b.n	8008562 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800855e:	2300      	movs	r3, #0
 8008560:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008564:	2b00      	cmp	r3, #0
 8008566:	d107      	bne.n	8008578 <LIS2MDL_0_Probe+0xf8>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f003 0302 	and.w	r3, r3, #2
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008572:	f06f 0304 	mvn.w	r3, #4
 8008576:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d107      	bne.n	800858e <LIS2MDL_0_Probe+0x10e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008588:	f06f 0304 	mvn.w	r3, #4
 800858c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800858e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008590:	4618      	mov	r0, r3
 8008592:	3750      	adds	r7, #80	@ 0x50
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}
 8008598:	08003445 	.word	0x08003445
 800859c:	080034c1 	.word	0x080034c1
 80085a0:	08003575 	.word	0x08003575
 80085a4:	08003511 	.word	0x08003511
 80085a8:	080035d9 	.word	0x080035d9
 80085ac:	08001cfd 	.word	0x08001cfd
 80085b0:	20000884 	.word	0x20000884
 80085b4:	20000804 	.word	0x20000804
 80085b8:	200007c8 	.word	0x200007c8
 80085bc:	200007f8 	.word	0x200007f8
 80085c0:	20000040 	.word	0x20000040
 80085c4:	200000cc 	.word	0x200000cc
 80085c8:	200007d4 	.word	0x200007d4
 80085cc:	20000050 	.word	0x20000050

080085d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80085d6:	2300      	movs	r3, #0
 80085d8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80085da:	4b0c      	ldr	r3, [pc, #48]	@ (800860c <HAL_Init+0x3c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4a0b      	ldr	r2, [pc, #44]	@ (800860c <HAL_Init+0x3c>)
 80085e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085e4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80085e6:	2003      	movs	r0, #3
 80085e8:	f001 fb94 	bl	8009d14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80085ec:	2000      	movs	r0, #0
 80085ee:	f000 f80f 	bl	8008610 <HAL_InitTick>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	71fb      	strb	r3, [r7, #7]
 80085fc:	e001      	b.n	8008602 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085fe:	f7fa fd50 	bl	80030a2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008602:	79fb      	ldrb	r3, [r7, #7]
}
 8008604:	4618      	mov	r0, r3
 8008606:	3708      	adds	r7, #8
 8008608:	46bd      	mov	sp, r7
 800860a:	bd80      	pop	{r7, pc}
 800860c:	58004000 	.word	0x58004000

08008610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b084      	sub	sp, #16
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800861c:	4b17      	ldr	r3, [pc, #92]	@ (800867c <HAL_InitTick+0x6c>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d024      	beq.n	800866e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008624:	f004 f8d8 	bl	800c7d8 <HAL_RCC_GetHCLKFreq>
 8008628:	4602      	mov	r2, r0
 800862a:	4b14      	ldr	r3, [pc, #80]	@ (800867c <HAL_InitTick+0x6c>)
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	4619      	mov	r1, r3
 8008630:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008634:	fbb3 f3f1 	udiv	r3, r3, r1
 8008638:	fbb2 f3f3 	udiv	r3, r2, r3
 800863c:	4618      	mov	r0, r3
 800863e:	f001 fbaa 	bl	8009d96 <HAL_SYSTICK_Config>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d10f      	bne.n	8008668 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2b0f      	cmp	r3, #15
 800864c:	d809      	bhi.n	8008662 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800864e:	2200      	movs	r2, #0
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	f04f 30ff 	mov.w	r0, #4294967295
 8008656:	f001 fb68 	bl	8009d2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800865a:	4a09      	ldr	r2, [pc, #36]	@ (8008680 <HAL_InitTick+0x70>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6013      	str	r3, [r2, #0]
 8008660:	e007      	b.n	8008672 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008662:	2301      	movs	r3, #1
 8008664:	73fb      	strb	r3, [r7, #15]
 8008666:	e004      	b.n	8008672 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	73fb      	strb	r3, [r7, #15]
 800866c:	e001      	b.n	8008672 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008672:	7bfb      	ldrb	r3, [r7, #15]
}
 8008674:	4618      	mov	r0, r3
 8008676:	3710      	adds	r7, #16
 8008678:	46bd      	mov	sp, r7
 800867a:	bd80      	pop	{r7, pc}
 800867c:	200000e4 	.word	0x200000e4
 8008680:	200000e0 	.word	0x200000e0

08008684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008688:	4b06      	ldr	r3, [pc, #24]	@ (80086a4 <HAL_IncTick+0x20>)
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	461a      	mov	r2, r3
 800868e:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <HAL_IncTick+0x24>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4413      	add	r3, r2
 8008694:	4a04      	ldr	r2, [pc, #16]	@ (80086a8 <HAL_IncTick+0x24>)
 8008696:	6013      	str	r3, [r2, #0]
}
 8008698:	bf00      	nop
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	200000e4 	.word	0x200000e4
 80086a8:	200008b8 	.word	0x200008b8

080086ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  return uwTick;
 80086b0:	4b03      	ldr	r3, [pc, #12]	@ (80086c0 <HAL_GetTick+0x14>)
 80086b2:	681b      	ldr	r3, [r3, #0]
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	200008b8 	.word	0x200008b8

080086c4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80086c8:	4b03      	ldr	r3, [pc, #12]	@ (80086d8 <HAL_GetTickPrio+0x14>)
 80086ca:	681b      	ldr	r3, [r3, #0]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop
 80086d8:	200000e0 	.word	0x200000e0

080086dc <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80086e0:	4b03      	ldr	r3, [pc, #12]	@ (80086f0 <HAL_GetTickFreq+0x14>)
 80086e2:	781b      	ldrb	r3, [r3, #0]
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	200000e4 	.word	0x200000e4

080086f4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800870e:	bf00      	nop
 8008710:	370c      	adds	r7, #12
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800871a:	b480      	push	{r7}
 800871c:	b083      	sub	sp, #12
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
 8008722:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	431a      	orrs	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800875c:	b480      	push	{r7}
 800875e:	b087      	sub	sp, #28
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3360      	adds	r3, #96	@ 0x60
 800876e:	461a      	mov	r2, r3
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b08      	ldr	r3, [pc, #32]	@ (80087a0 <LL_ADC_SetOffset+0x44>)
 800877e:	4013      	ands	r3, r2
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	4313      	orrs	r3, r2
 800878c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008794:	bf00      	nop
 8008796:	371c      	adds	r7, #28
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	03fff000 	.word	0x03fff000

080087a4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	3360      	adds	r3, #96	@ 0x60
 80087b2:	461a      	mov	r2, r3
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	4413      	add	r3, r2
 80087ba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b087      	sub	sp, #28
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3360      	adds	r3, #96	@ 0x60
 80087e0:	461a      	mov	r2, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	4413      	add	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	431a      	orrs	r2, r3
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80087fa:	bf00      	nop
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800881a:	2301      	movs	r3, #1
 800881c:	e000      	b.n	8008820 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800881e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008820:	4618      	mov	r0, r3
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800882c:	b480      	push	{r7}
 800882e:	b087      	sub	sp, #28
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	3330      	adds	r3, #48	@ 0x30
 800883c:	461a      	mov	r2, r3
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	f003 030c 	and.w	r3, r3, #12
 8008848:	4413      	add	r3, r2
 800884a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	f003 031f 	and.w	r3, r3, #31
 8008856:	211f      	movs	r1, #31
 8008858:	fa01 f303 	lsl.w	r3, r1, r3
 800885c:	43db      	mvns	r3, r3
 800885e:	401a      	ands	r2, r3
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	0e9b      	lsrs	r3, r3, #26
 8008864:	f003 011f 	and.w	r1, r3, #31
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	f003 031f 	and.w	r3, r3, #31
 800886e:	fa01 f303 	lsl.w	r3, r1, r3
 8008872:	431a      	orrs	r2, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008878:	bf00      	nop
 800887a:	371c      	adds	r7, #28
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	3314      	adds	r3, #20
 8008894:	461a      	mov	r2, r3
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	0e5b      	lsrs	r3, r3, #25
 800889a:	009b      	lsls	r3, r3, #2
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	4413      	add	r3, r2
 80088a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	0d1b      	lsrs	r3, r3, #20
 80088ac:	f003 031f 	and.w	r3, r3, #31
 80088b0:	2107      	movs	r1, #7
 80088b2:	fa01 f303 	lsl.w	r3, r1, r3
 80088b6:	43db      	mvns	r3, r3
 80088b8:	401a      	ands	r2, r3
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	0d1b      	lsrs	r3, r3, #20
 80088be:	f003 031f 	and.w	r3, r3, #31
 80088c2:	6879      	ldr	r1, [r7, #4]
 80088c4:	fa01 f303 	lsl.w	r3, r1, r3
 80088c8:	431a      	orrs	r2, r3
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80088ce:	bf00      	nop
 80088d0:	371c      	adds	r7, #28
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088f4:	43db      	mvns	r3, r3
 80088f6:	401a      	ands	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f003 0318 	and.w	r3, r3, #24
 80088fe:	4908      	ldr	r1, [pc, #32]	@ (8008920 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008900:	40d9      	lsrs	r1, r3
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	400b      	ands	r3, r1
 8008906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800890a:	431a      	orrs	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	0007ffff 	.word	0x0007ffff

08008924 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008934:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	6093      	str	r3, [r2, #8]
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008958:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800895c:	d101      	bne.n	8008962 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800895e:	2301      	movs	r3, #1
 8008960:	e000      	b.n	8008964 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008980:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008984:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008998:	b480      	push	{r7}
 800899a:	b083      	sub	sp, #12
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ac:	d101      	bne.n	80089b2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80089ae:	2301      	movs	r3, #1
 80089b0:	e000      	b.n	80089b4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	689b      	ldr	r3, [r3, #8]
 80089cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80089d4:	f043 0201 	orr.w	r2, r3, #1
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b083      	sub	sp, #12
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80089f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80089fc:	f043 0202 	orr.w	r2, r3, #2
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	689b      	ldr	r3, [r3, #8]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d101      	bne.n	8008a28 <LL_ADC_IsEnabled+0x18>
 8008a24:	2301      	movs	r3, #1
 8008a26:	e000      	b.n	8008a2a <LL_ADC_IsEnabled+0x1a>
 8008a28:	2300      	movs	r3, #0
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b083      	sub	sp, #12
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d101      	bne.n	8008a4e <LL_ADC_IsDisableOngoing+0x18>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	e000      	b.n	8008a50 <LL_ADC_IsDisableOngoing+0x1a>
 8008a4e:	2300      	movs	r3, #0
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a6c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a70:	f043 0204 	orr.w	r2, r3, #4
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008a78:	bf00      	nop
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a98:	f043 0210 	orr.w	r2, r3, #16
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b04      	cmp	r3, #4
 8008abe:	d101      	bne.n	8008ac4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	e000      	b.n	8008ac6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	370c      	adds	r7, #12
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b083      	sub	sp, #12
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ae2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008ae6:	f043 0220 	orr.w	r2, r3, #32
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008aee:	bf00      	nop
 8008af0:	370c      	adds	r7, #12
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008afa:	b480      	push	{r7}
 8008afc:	b083      	sub	sp, #12
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b08      	cmp	r3, #8
 8008b0c:	d101      	bne.n	8008b12 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008b0e:	2301      	movs	r3, #1
 8008b10:	e000      	b.n	8008b14 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008b12:	2300      	movs	r3, #0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e12e      	b.n	8008d9c <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	691b      	ldr	r3, [r3, #16]
 8008b42:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d109      	bne.n	8008b60 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f7fa fab9 	bl	80030c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2200      	movs	r2, #0
 8008b56:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7ff feef 	bl	8008948 <LL_ADC_IsDeepPowerDownEnabled>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7ff fed5 	bl	8008924 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff ff0a 	bl	8008998 <LL_ADC_IsInternalRegulatorEnabled>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d115      	bne.n	8008bb6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff feee 	bl	8008970 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008b94:	4b83      	ldr	r3, [pc, #524]	@ (8008da4 <HAL_ADC_Init+0x284>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	099b      	lsrs	r3, r3, #6
 8008b9a:	4a83      	ldr	r2, [pc, #524]	@ (8008da8 <HAL_ADC_Init+0x288>)
 8008b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ba0:	099b      	lsrs	r3, r3, #6
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	005b      	lsls	r3, r3, #1
 8008ba6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008ba8:	e002      	b.n	8008bb0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1f9      	bne.n	8008baa <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4618      	mov	r0, r3
 8008bbc:	f7ff feec 	bl	8008998 <LL_ADC_IsInternalRegulatorEnabled>
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d10d      	bne.n	8008be2 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bca:	f043 0210 	orr.w	r2, r3, #16
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bd6:	f043 0201 	orr.w	r2, r3, #1
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f7ff ff60 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8008bec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bf2:	f003 0310 	and.w	r3, r3, #16
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 80c7 	bne.w	8008d8a <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	f040 80c3 	bne.w	8008d8a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c08:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008c0c:	f043 0202 	orr.w	r2, r3, #2
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f7ff fef9 	bl	8008a10 <LL_ADC_IsEnabled>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008c24:	4861      	ldr	r0, [pc, #388]	@ (8008dac <HAL_ADC_Init+0x28c>)
 8008c26:	f7ff fef3 	bl	8008a10 <LL_ADC_IsEnabled>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d105      	bne.n	8008c3c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	4619      	mov	r1, r3
 8008c36:	485e      	ldr	r0, [pc, #376]	@ (8008db0 <HAL_ADC_Init+0x290>)
 8008c38:	f7ff fd5c 	bl	80086f4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	7e5b      	ldrb	r3, [r3, #25]
 8008c40:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c46:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008c4c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008c52:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c5a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008c5c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008c5e:	69ba      	ldr	r2, [r7, #24]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d106      	bne.n	8008c7c <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c72:	3b01      	subs	r3, #1
 8008c74:	045b      	lsls	r3, r3, #17
 8008c76:	69ba      	ldr	r2, [r7, #24]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d009      	beq.n	8008c98 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c88:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	68da      	ldr	r2, [r3, #12]
 8008c9e:	4b45      	ldr	r3, [pc, #276]	@ (8008db4 <HAL_ADC_Init+0x294>)
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	6812      	ldr	r2, [r2, #0]
 8008ca6:	69b9      	ldr	r1, [r7, #24]
 8008ca8:	430b      	orrs	r3, r1
 8008caa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7ff fefb 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8008cb6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	f7ff ff1c 	bl	8008afa <LL_ADC_INJ_IsConversionOngoing>
 8008cc2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d13d      	bne.n	8008d46 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d13a      	bne.n	8008d46 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008cd4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cdc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008cec:	f023 0302 	bic.w	r3, r3, #2
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6812      	ldr	r2, [r2, #0]
 8008cf4:	69b9      	ldr	r1, [r7, #24]
 8008cf6:	430b      	orrs	r3, r1
 8008cf8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d118      	bne.n	8008d36 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008d0e:	f023 0304 	bic.w	r3, r3, #4
 8008d12:	687a      	ldr	r2, [r7, #4]
 8008d14:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008d1a:	4311      	orrs	r1, r2
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008d20:	4311      	orrs	r1, r2
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008d26:	430a      	orrs	r2, r1
 8008d28:	431a      	orrs	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f042 0201 	orr.w	r2, r2, #1
 8008d32:	611a      	str	r2, [r3, #16]
 8008d34:	e007      	b.n	8008d46 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691a      	ldr	r2, [r3, #16]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f022 0201 	bic.w	r2, r2, #1
 8008d44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d10c      	bne.n	8008d68 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d54:	f023 010f 	bic.w	r1, r3, #15
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	69db      	ldr	r3, [r3, #28]
 8008d5c:	1e5a      	subs	r2, r3, #1
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	430a      	orrs	r2, r1
 8008d64:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d66:	e007      	b.n	8008d78 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	f022 020f 	bic.w	r2, r2, #15
 8008d76:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d7c:	f023 0303 	bic.w	r3, r3, #3
 8008d80:	f043 0201 	orr.w	r2, r3, #1
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	655a      	str	r2, [r3, #84]	@ 0x54
 8008d88:	e007      	b.n	8008d9a <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d8e:	f043 0210 	orr.w	r2, r3, #16
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3720      	adds	r7, #32
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	20000008 	.word	0x20000008
 8008da8:	053e2d63 	.word	0x053e2d63
 8008dac:	50040000 	.word	0x50040000
 8008db0:	50040300 	.word	0x50040300
 8008db4:	fff0c007 	.word	0xfff0c007

08008db8 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fe71 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d140      	bne.n	8008e52 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d101      	bne.n	8008dde <HAL_ADC_Start+0x26>
 8008dda:	2302      	movs	r3, #2
 8008ddc:	e03c      	b.n	8008e58 <HAL_ADC_Start+0xa0>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2201      	movs	r2, #1
 8008de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f000 fd8a 	bl	8009900 <ADC_Enable>
 8008dec:	4603      	mov	r3, r0
 8008dee:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d128      	bne.n	8008e48 <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dfa:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e16:	d106      	bne.n	8008e26 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e1c:	f023 0206 	bic.w	r2, r3, #6
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	659a      	str	r2, [r3, #88]	@ 0x58
 8008e24:	e002      	b.n	8008e2c <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	221c      	movs	r2, #28
 8008e32:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff fe0b 	bl	8008a5c <LL_ADC_REG_StartConversion>
 8008e46:	e006      	b.n	8008e56 <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8008e50:	e001      	b.n	8008e56 <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008e52:	2302      	movs	r3, #2
 8008e54:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d101      	bne.n	8008e76 <HAL_ADC_Stop+0x16>
 8008e72:	2302      	movs	r3, #2
 8008e74:	e023      	b.n	8008ebe <HAL_ADC_Stop+0x5e>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008e7e:	2103      	movs	r1, #3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fc81 	bl	8009788 <ADC_ConversionStop>
 8008e86:	4603      	mov	r3, r0
 8008e88:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008e8a:	7bfb      	ldrb	r3, [r7, #15]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d111      	bne.n	8008eb4 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fdaf 	bl	80099f4 <ADC_Disable>
 8008e96:	4603      	mov	r3, r0
 8008e98:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008e9a:	7bfb      	ldrb	r3, [r7, #15]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d109      	bne.n	8008eb4 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008ea8:	f023 0301 	bic.w	r3, r3, #1
 8008eac:	f043 0201 	orr.w	r2, r3, #1
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
 8008ece:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	695b      	ldr	r3, [r3, #20]
 8008ed4:	2b08      	cmp	r3, #8
 8008ed6:	d102      	bne.n	8008ede <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8008ed8:	2308      	movs	r3, #8
 8008eda:	60fb      	str	r3, [r7, #12]
 8008edc:	e010      	b.n	8008f00 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68db      	ldr	r3, [r3, #12]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d007      	beq.n	8008efc <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ef0:	f043 0220 	orr.w	r2, r3, #32
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e06d      	b.n	8008fd8 <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8008efc:	2304      	movs	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8008f00:	f7ff fbd4 	bl	80086ac <HAL_GetTick>
 8008f04:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008f06:	e021      	b.n	8008f4c <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0e:	d01d      	beq.n	8008f4c <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8008f10:	f7ff fbcc 	bl	80086ac <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d302      	bcc.n	8008f26 <HAL_ADC_PollForConversion+0x60>
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d112      	bne.n	8008f4c <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f38:	f043 0204 	orr.w	r2, r3, #4
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8008f48:	2303      	movs	r3, #3
 8008f4a:	e045      	b.n	8008fd8 <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4013      	ands	r3, r2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d0d6      	beq.n	8008f08 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f5e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fc4b 	bl	8008806 <LL_ADC_REG_IsTriggerSourceSWStart>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d01c      	beq.n	8008fb0 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	7e5b      	ldrb	r3, [r3, #25]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d118      	bne.n	8008fb0 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0308 	and.w	r3, r3, #8
 8008f88:	2b08      	cmp	r3, #8
 8008f8a:	d111      	bne.n	8008fb0 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fa8:	f043 0201 	orr.w	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2b08      	cmp	r3, #8
 8008fb4:	d104      	bne.n	8008fc0 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2208      	movs	r2, #8
 8008fbc:	601a      	str	r2, [r3, #0]
 8008fbe:	e00a      	b.n	8008fd6 <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	220c      	movs	r2, #12
 8008fd4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8008fd6:	2300      	movs	r3, #0
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3710      	adds	r7, #16
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b0b6      	sub	sp, #216	@ 0xd8
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009006:	2300      	movs	r3, #0
 8009008:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009016:	2b01      	cmp	r3, #1
 8009018:	d101      	bne.n	800901e <HAL_ADC_ConfigChannel+0x22>
 800901a:	2302      	movs	r3, #2
 800901c:	e39f      	b.n	800975e <HAL_ADC_ConfigChannel+0x762>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2201      	movs	r2, #1
 8009022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f7ff fd3e 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	f040 8384 	bne.w	8009740 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6818      	ldr	r0, [r3, #0]
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	6859      	ldr	r1, [r3, #4]
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	461a      	mov	r2, r3
 8009046:	f7ff fbf1 	bl	800882c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4618      	mov	r0, r3
 8009050:	f7ff fd2c 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8009054:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f7ff fd4c 	bl	8008afa <LL_ADC_INJ_IsConversionOngoing>
 8009062:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009066:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800906a:	2b00      	cmp	r3, #0
 800906c:	f040 81a6 	bne.w	80093bc <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009070:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009074:	2b00      	cmp	r3, #0
 8009076:	f040 81a1 	bne.w	80093bc <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	6819      	ldr	r1, [r3, #0]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	461a      	mov	r2, r3
 8009088:	f7ff fbfc 	bl	8008884 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695a      	ldr	r2, [r3, #20]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	08db      	lsrs	r3, r3, #3
 8009098:	f003 0303 	and.w	r3, r3, #3
 800909c:	005b      	lsls	r3, r3, #1
 800909e:	fa02 f303 	lsl.w	r3, r2, r3
 80090a2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b04      	cmp	r3, #4
 80090ac:	d00a      	beq.n	80090c4 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6818      	ldr	r0, [r3, #0]
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	6919      	ldr	r1, [r3, #16]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090be:	f7ff fb4d 	bl	800875c <LL_ADC_SetOffset>
 80090c2:	e17b      	b.n	80093bc <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2100      	movs	r1, #0
 80090ca:	4618      	mov	r0, r3
 80090cc:	f7ff fb6a 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d10a      	bne.n	80090f0 <HAL_ADC_ConfigChannel+0xf4>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2100      	movs	r1, #0
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fb5f 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 80090e6:	4603      	mov	r3, r0
 80090e8:	0e9b      	lsrs	r3, r3, #26
 80090ea:	f003 021f 	and.w	r2, r3, #31
 80090ee:	e01e      	b.n	800912e <HAL_ADC_ConfigChannel+0x132>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f7ff fb54 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 80090fc:	4603      	mov	r3, r0
 80090fe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009102:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009106:	fa93 f3a3 	rbit	r3, r3
 800910a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 800910e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009112:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8009116:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 800911e:	2320      	movs	r3, #32
 8009120:	e004      	b.n	800912c <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8009122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009126:	fab3 f383 	clz	r3, r3
 800912a:	b2db      	uxtb	r3, r3
 800912c:	461a      	mov	r2, r3
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009136:	2b00      	cmp	r3, #0
 8009138:	d105      	bne.n	8009146 <HAL_ADC_ConfigChannel+0x14a>
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	0e9b      	lsrs	r3, r3, #26
 8009140:	f003 031f 	and.w	r3, r3, #31
 8009144:	e018      	b.n	8009178 <HAL_ADC_ConfigChannel+0x17c>
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800914e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009152:	fa93 f3a3 	rbit	r3, r3
 8009156:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800915a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800915e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8009162:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800916a:	2320      	movs	r3, #32
 800916c:	e004      	b.n	8009178 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 800916e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009172:	fab3 f383 	clz	r3, r3
 8009176:	b2db      	uxtb	r3, r3
 8009178:	429a      	cmp	r2, r3
 800917a:	d106      	bne.n	800918a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2200      	movs	r2, #0
 8009182:	2100      	movs	r1, #0
 8009184:	4618      	mov	r0, r3
 8009186:	f7ff fb23 	bl	80087d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2101      	movs	r1, #1
 8009190:	4618      	mov	r0, r3
 8009192:	f7ff fb07 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 8009196:	4603      	mov	r3, r0
 8009198:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800919c:	2b00      	cmp	r3, #0
 800919e:	d10a      	bne.n	80091b6 <HAL_ADC_ConfigChannel+0x1ba>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2101      	movs	r1, #1
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff fafc 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 80091ac:	4603      	mov	r3, r0
 80091ae:	0e9b      	lsrs	r3, r3, #26
 80091b0:	f003 021f 	and.w	r2, r3, #31
 80091b4:	e01e      	b.n	80091f4 <HAL_ADC_ConfigChannel+0x1f8>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	2101      	movs	r1, #1
 80091bc:	4618      	mov	r0, r3
 80091be:	f7ff faf1 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80091c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80091cc:	fa93 f3a3 	rbit	r3, r3
 80091d0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80091d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80091d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80091dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d101      	bne.n	80091e8 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80091e4:	2320      	movs	r3, #32
 80091e6:	e004      	b.n	80091f2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80091e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80091ec:	fab3 f383 	clz	r3, r3
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	461a      	mov	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d105      	bne.n	800920c <HAL_ADC_ConfigChannel+0x210>
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	0e9b      	lsrs	r3, r3, #26
 8009206:	f003 031f 	and.w	r3, r3, #31
 800920a:	e018      	b.n	800923e <HAL_ADC_ConfigChannel+0x242>
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009218:	fa93 f3a3 	rbit	r3, r3
 800921c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009220:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009224:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8009228:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800922c:	2b00      	cmp	r3, #0
 800922e:	d101      	bne.n	8009234 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8009230:	2320      	movs	r3, #32
 8009232:	e004      	b.n	800923e <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009238:	fab3 f383 	clz	r3, r3
 800923c:	b2db      	uxtb	r3, r3
 800923e:	429a      	cmp	r2, r3
 8009240:	d106      	bne.n	8009250 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	2200      	movs	r2, #0
 8009248:	2101      	movs	r1, #1
 800924a:	4618      	mov	r0, r3
 800924c:	f7ff fac0 	bl	80087d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2102      	movs	r1, #2
 8009256:	4618      	mov	r0, r3
 8009258:	f7ff faa4 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 800925c:	4603      	mov	r3, r0
 800925e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <HAL_ADC_ConfigChannel+0x280>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2102      	movs	r1, #2
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fa99 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 8009272:	4603      	mov	r3, r0
 8009274:	0e9b      	lsrs	r3, r3, #26
 8009276:	f003 021f 	and.w	r2, r3, #31
 800927a:	e01e      	b.n	80092ba <HAL_ADC_ConfigChannel+0x2be>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	2102      	movs	r1, #2
 8009282:	4618      	mov	r0, r3
 8009284:	f7ff fa8e 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 8009288:	4603      	mov	r3, r0
 800928a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800928e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009292:	fa93 f3a3 	rbit	r3, r3
 8009296:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800929a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800929e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80092a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80092aa:	2320      	movs	r3, #32
 80092ac:	e004      	b.n	80092b8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80092ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80092b2:	fab3 f383 	clz	r3, r3
 80092b6:	b2db      	uxtb	r3, r3
 80092b8:	461a      	mov	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <HAL_ADC_ConfigChannel+0x2d6>
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	0e9b      	lsrs	r3, r3, #26
 80092cc:	f003 031f 	and.w	r3, r3, #31
 80092d0:	e016      	b.n	8009300 <HAL_ADC_ConfigChannel+0x304>
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092de:	fa93 f3a3 	rbit	r3, r3
 80092e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80092e4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80092e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80092ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d101      	bne.n	80092f6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 80092f2:	2320      	movs	r3, #32
 80092f4:	e004      	b.n	8009300 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 80092f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80092fa:	fab3 f383 	clz	r3, r3
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	429a      	cmp	r2, r3
 8009302:	d106      	bne.n	8009312 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2200      	movs	r2, #0
 800930a:	2102      	movs	r1, #2
 800930c:	4618      	mov	r0, r3
 800930e:	f7ff fa5f 	bl	80087d0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2103      	movs	r1, #3
 8009318:	4618      	mov	r0, r3
 800931a:	f7ff fa43 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 800931e:	4603      	mov	r3, r0
 8009320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <HAL_ADC_ConfigChannel+0x342>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2103      	movs	r1, #3
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fa38 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 8009334:	4603      	mov	r3, r0
 8009336:	0e9b      	lsrs	r3, r3, #26
 8009338:	f003 021f 	and.w	r2, r3, #31
 800933c:	e017      	b.n	800936e <HAL_ADC_ConfigChannel+0x372>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2103      	movs	r1, #3
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff fa2d 	bl	80087a4 <LL_ADC_GetOffsetChannel>
 800934a:	4603      	mov	r3, r0
 800934c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800934e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009350:	fa93 f3a3 	rbit	r3, r3
 8009354:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8009356:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009358:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800935a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800935c:	2b00      	cmp	r3, #0
 800935e:	d101      	bne.n	8009364 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8009360:	2320      	movs	r3, #32
 8009362:	e003      	b.n	800936c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8009364:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009366:	fab3 f383 	clz	r3, r3
 800936a:	b2db      	uxtb	r3, r3
 800936c:	461a      	mov	r2, r3
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009376:	2b00      	cmp	r3, #0
 8009378:	d105      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x38a>
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	0e9b      	lsrs	r3, r3, #26
 8009380:	f003 031f 	and.w	r3, r3, #31
 8009384:	e011      	b.n	80093aa <HAL_ADC_ConfigChannel+0x3ae>
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800938c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800938e:	fa93 f3a3 	rbit	r3, r3
 8009392:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8009394:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009396:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8009398:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 800939e:	2320      	movs	r3, #32
 80093a0:	e003      	b.n	80093aa <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80093a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80093a4:	fab3 f383 	clz	r3, r3
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d106      	bne.n	80093bc <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	2103      	movs	r1, #3
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fa0a 	bl	80087d0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7ff fb25 	bl	8008a10 <LL_ADC_IsEnabled>
 80093c6:	4603      	mov	r3, r0
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	f040 81c2 	bne.w	8009752 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6818      	ldr	r0, [r3, #0]
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	6819      	ldr	r1, [r3, #0]
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68db      	ldr	r3, [r3, #12]
 80093da:	461a      	mov	r2, r3
 80093dc:	f7ff fa7e 	bl	80088dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	4a8e      	ldr	r2, [pc, #568]	@ (8009620 <HAL_ADC_ConfigChannel+0x624>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	f040 8130 	bne.w	800964c <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10b      	bne.n	8009414 <HAL_ADC_ConfigChannel+0x418>
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	0e9b      	lsrs	r3, r3, #26
 8009402:	3301      	adds	r3, #1
 8009404:	f003 031f 	and.w	r3, r3, #31
 8009408:	2b09      	cmp	r3, #9
 800940a:	bf94      	ite	ls
 800940c:	2301      	movls	r3, #1
 800940e:	2300      	movhi	r3, #0
 8009410:	b2db      	uxtb	r3, r3
 8009412:	e019      	b.n	8009448 <HAL_ADC_ConfigChannel+0x44c>
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800941a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800941c:	fa93 f3a3 	rbit	r3, r3
 8009420:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009422:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009424:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8009426:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 800942c:	2320      	movs	r3, #32
 800942e:	e003      	b.n	8009438 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8009430:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009432:	fab3 f383 	clz	r3, r3
 8009436:	b2db      	uxtb	r3, r3
 8009438:	3301      	adds	r3, #1
 800943a:	f003 031f 	and.w	r3, r3, #31
 800943e:	2b09      	cmp	r3, #9
 8009440:	bf94      	ite	ls
 8009442:	2301      	movls	r3, #1
 8009444:	2300      	movhi	r3, #0
 8009446:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009448:	2b00      	cmp	r3, #0
 800944a:	d079      	beq.n	8009540 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009454:	2b00      	cmp	r3, #0
 8009456:	d107      	bne.n	8009468 <HAL_ADC_ConfigChannel+0x46c>
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	0e9b      	lsrs	r3, r3, #26
 800945e:	3301      	adds	r3, #1
 8009460:	069b      	lsls	r3, r3, #26
 8009462:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009466:	e015      	b.n	8009494 <HAL_ADC_ConfigChannel+0x498>
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800946e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009470:	fa93 f3a3 	rbit	r3, r3
 8009474:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8009476:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009478:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800947a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8009480:	2320      	movs	r3, #32
 8009482:	e003      	b.n	800948c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8009484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009486:	fab3 f383 	clz	r3, r3
 800948a:	b2db      	uxtb	r3, r3
 800948c:	3301      	adds	r3, #1
 800948e:	069b      	lsls	r3, r3, #26
 8009490:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800949c:	2b00      	cmp	r3, #0
 800949e:	d109      	bne.n	80094b4 <HAL_ADC_ConfigChannel+0x4b8>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	0e9b      	lsrs	r3, r3, #26
 80094a6:	3301      	adds	r3, #1
 80094a8:	f003 031f 	and.w	r3, r3, #31
 80094ac:	2101      	movs	r1, #1
 80094ae:	fa01 f303 	lsl.w	r3, r1, r3
 80094b2:	e017      	b.n	80094e4 <HAL_ADC_ConfigChannel+0x4e8>
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094bc:	fa93 f3a3 	rbit	r3, r3
 80094c0:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80094c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80094c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d101      	bne.n	80094d0 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80094cc:	2320      	movs	r3, #32
 80094ce:	e003      	b.n	80094d8 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80094d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80094d2:	fab3 f383 	clz	r3, r3
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	3301      	adds	r3, #1
 80094da:	f003 031f 	and.w	r3, r3, #31
 80094de:	2101      	movs	r1, #1
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	ea42 0103 	orr.w	r1, r2, r3
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <HAL_ADC_ConfigChannel+0x50e>
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	0e9b      	lsrs	r3, r3, #26
 80094fa:	3301      	adds	r3, #1
 80094fc:	f003 021f 	and.w	r2, r3, #31
 8009500:	4613      	mov	r3, r2
 8009502:	005b      	lsls	r3, r3, #1
 8009504:	4413      	add	r3, r2
 8009506:	051b      	lsls	r3, r3, #20
 8009508:	e018      	b.n	800953c <HAL_ADC_ConfigChannel+0x540>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009512:	fa93 f3a3 	rbit	r3, r3
 8009516:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800951a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800951c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009522:	2320      	movs	r3, #32
 8009524:	e003      	b.n	800952e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8009526:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009528:	fab3 f383 	clz	r3, r3
 800952c:	b2db      	uxtb	r3, r3
 800952e:	3301      	adds	r3, #1
 8009530:	f003 021f 	and.w	r2, r3, #31
 8009534:	4613      	mov	r3, r2
 8009536:	005b      	lsls	r3, r3, #1
 8009538:	4413      	add	r3, r2
 800953a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800953c:	430b      	orrs	r3, r1
 800953e:	e080      	b.n	8009642 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009548:	2b00      	cmp	r3, #0
 800954a:	d107      	bne.n	800955c <HAL_ADC_ConfigChannel+0x560>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	0e9b      	lsrs	r3, r3, #26
 8009552:	3301      	adds	r3, #1
 8009554:	069b      	lsls	r3, r3, #26
 8009556:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800955a:	e015      	b.n	8009588 <HAL_ADC_ConfigChannel+0x58c>
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009564:	fa93 f3a3 	rbit	r3, r3
 8009568:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800956e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009570:	2b00      	cmp	r3, #0
 8009572:	d101      	bne.n	8009578 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8009574:	2320      	movs	r3, #32
 8009576:	e003      	b.n	8009580 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8009578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800957a:	fab3 f383 	clz	r3, r3
 800957e:	b2db      	uxtb	r3, r3
 8009580:	3301      	adds	r3, #1
 8009582:	069b      	lsls	r3, r3, #26
 8009584:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009590:	2b00      	cmp	r3, #0
 8009592:	d109      	bne.n	80095a8 <HAL_ADC_ConfigChannel+0x5ac>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	0e9b      	lsrs	r3, r3, #26
 800959a:	3301      	adds	r3, #1
 800959c:	f003 031f 	and.w	r3, r3, #31
 80095a0:	2101      	movs	r1, #1
 80095a2:	fa01 f303 	lsl.w	r3, r1, r3
 80095a6:	e017      	b.n	80095d8 <HAL_ADC_ConfigChannel+0x5dc>
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ae:	6a3b      	ldr	r3, [r7, #32]
 80095b0:	fa93 f3a3 	rbit	r3, r3
 80095b4:	61fb      	str	r3, [r7, #28]
  return result;
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80095ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d101      	bne.n	80095c4 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80095c0:	2320      	movs	r3, #32
 80095c2:	e003      	b.n	80095cc <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80095c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c6:	fab3 f383 	clz	r3, r3
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	3301      	adds	r3, #1
 80095ce:	f003 031f 	and.w	r3, r3, #31
 80095d2:	2101      	movs	r1, #1
 80095d4:	fa01 f303 	lsl.w	r3, r1, r3
 80095d8:	ea42 0103 	orr.w	r1, r2, r3
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d10d      	bne.n	8009604 <HAL_ADC_ConfigChannel+0x608>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	0e9b      	lsrs	r3, r3, #26
 80095ee:	3301      	adds	r3, #1
 80095f0:	f003 021f 	and.w	r2, r3, #31
 80095f4:	4613      	mov	r3, r2
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	4413      	add	r3, r2
 80095fa:	3b1e      	subs	r3, #30
 80095fc:	051b      	lsls	r3, r3, #20
 80095fe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009602:	e01d      	b.n	8009640 <HAL_ADC_ConfigChannel+0x644>
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	fa93 f3a3 	rbit	r3, r3
 8009610:	613b      	str	r3, [r7, #16]
  return result;
 8009612:	693b      	ldr	r3, [r7, #16]
 8009614:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009616:	69bb      	ldr	r3, [r7, #24]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 800961c:	2320      	movs	r3, #32
 800961e:	e005      	b.n	800962c <HAL_ADC_ConfigChannel+0x630>
 8009620:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	fab3 f383 	clz	r3, r3
 800962a:	b2db      	uxtb	r3, r3
 800962c:	3301      	adds	r3, #1
 800962e:	f003 021f 	and.w	r2, r3, #31
 8009632:	4613      	mov	r3, r2
 8009634:	005b      	lsls	r3, r3, #1
 8009636:	4413      	add	r3, r2
 8009638:	3b1e      	subs	r3, #30
 800963a:	051b      	lsls	r3, r3, #20
 800963c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009640:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009646:	4619      	mov	r1, r3
 8009648:	f7ff f91c 	bl	8008884 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681a      	ldr	r2, [r3, #0]
 8009650:	4b45      	ldr	r3, [pc, #276]	@ (8009768 <HAL_ADC_ConfigChannel+0x76c>)
 8009652:	4013      	ands	r3, r2
 8009654:	2b00      	cmp	r3, #0
 8009656:	d07c      	beq.n	8009752 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009658:	4844      	ldr	r0, [pc, #272]	@ (800976c <HAL_ADC_ConfigChannel+0x770>)
 800965a:	f7ff f871 	bl	8008740 <LL_ADC_GetCommonPathInternalCh>
 800965e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009662:	4843      	ldr	r0, [pc, #268]	@ (8009770 <HAL_ADC_ConfigChannel+0x774>)
 8009664:	f7ff f9d4 	bl	8008a10 <LL_ADC_IsEnabled>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d15e      	bne.n	800972c <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800966e:	683b      	ldr	r3, [r7, #0]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a40      	ldr	r2, [pc, #256]	@ (8009774 <HAL_ADC_ConfigChannel+0x778>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d127      	bne.n	80096c8 <HAL_ADC_ConfigChannel+0x6cc>
 8009678:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800967c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d121      	bne.n	80096c8 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4a39      	ldr	r2, [pc, #228]	@ (8009770 <HAL_ADC_ConfigChannel+0x774>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d161      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800968e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009692:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009696:	4619      	mov	r1, r3
 8009698:	4834      	ldr	r0, [pc, #208]	@ (800976c <HAL_ADC_ConfigChannel+0x770>)
 800969a:	f7ff f83e 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800969e:	4b36      	ldr	r3, [pc, #216]	@ (8009778 <HAL_ADC_ConfigChannel+0x77c>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	099b      	lsrs	r3, r3, #6
 80096a4:	4a35      	ldr	r2, [pc, #212]	@ (800977c <HAL_ADC_ConfigChannel+0x780>)
 80096a6:	fba2 2303 	umull	r2, r3, r2, r3
 80096aa:	099b      	lsrs	r3, r3, #6
 80096ac:	1c5a      	adds	r2, r3, #1
 80096ae:	4613      	mov	r3, r2
 80096b0:	005b      	lsls	r3, r3, #1
 80096b2:	4413      	add	r3, r2
 80096b4:	009b      	lsls	r3, r3, #2
 80096b6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80096b8:	e002      	b.n	80096c0 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	3b01      	subs	r3, #1
 80096be:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1f9      	bne.n	80096ba <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80096c6:	e044      	b.n	8009752 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a2c      	ldr	r2, [pc, #176]	@ (8009780 <HAL_ADC_ConfigChannel+0x784>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d113      	bne.n	80096fa <HAL_ADC_ConfigChannel+0x6fe>
 80096d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80096d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d10d      	bne.n	80096fa <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4a23      	ldr	r2, [pc, #140]	@ (8009770 <HAL_ADC_ConfigChannel+0x774>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d134      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80096e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80096ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80096f0:	4619      	mov	r1, r3
 80096f2:	481e      	ldr	r0, [pc, #120]	@ (800976c <HAL_ADC_ConfigChannel+0x770>)
 80096f4:	f7ff f811 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80096f8:	e02b      	b.n	8009752 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a21      	ldr	r2, [pc, #132]	@ (8009784 <HAL_ADC_ConfigChannel+0x788>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d126      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x756>
 8009704:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009708:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800970c:	2b00      	cmp	r3, #0
 800970e:	d120      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a16      	ldr	r2, [pc, #88]	@ (8009770 <HAL_ADC_ConfigChannel+0x774>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d11b      	bne.n	8009752 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800971a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800971e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009722:	4619      	mov	r1, r3
 8009724:	4811      	ldr	r0, [pc, #68]	@ (800976c <HAL_ADC_ConfigChannel+0x770>)
 8009726:	f7fe fff8 	bl	800871a <LL_ADC_SetCommonPathInternalCh>
 800972a:	e012      	b.n	8009752 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009730:	f043 0220 	orr.w	r2, r3, #32
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800973e:	e008      	b.n	8009752 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009744:	f043 0220 	orr.w	r2, r3, #32
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800975a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800975e:	4618      	mov	r0, r3
 8009760:	37d8      	adds	r7, #216	@ 0xd8
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	80080000 	.word	0x80080000
 800976c:	50040300 	.word	0x50040300
 8009770:	50040000 	.word	0x50040000
 8009774:	c7520000 	.word	0xc7520000
 8009778:	20000008 	.word	0x20000008
 800977c:	053e2d63 	.word	0x053e2d63
 8009780:	cb840000 	.word	0xcb840000
 8009784:	80000001 	.word	0x80000001

08009788 <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b088      	sub	sp, #32
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009792:	2300      	movs	r3, #0
 8009794:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4618      	mov	r0, r3
 80097a0:	f7ff f984 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 80097a4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff f9a5 	bl	8008afa <LL_ADC_INJ_IsConversionOngoing>
 80097b0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d103      	bne.n	80097c0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	f000 8098 	beq.w	80098f0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d02a      	beq.n	8009824 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7e5b      	ldrb	r3, [r3, #25]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d126      	bne.n	8009824 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	7e1b      	ldrb	r3, [r3, #24]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d122      	bne.n	8009824 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80097de:	2301      	movs	r3, #1
 80097e0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80097e2:	e014      	b.n	800980e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4a45      	ldr	r2, [pc, #276]	@ (80098fc <ADC_ConversionStop+0x174>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d90d      	bls.n	8009808 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f0:	f043 0210 	orr.w	r2, r3, #16
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097fc:	f043 0201 	orr.w	r2, r3, #1
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009804:	2301      	movs	r3, #1
 8009806:	e074      	b.n	80098f2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009808:	69fb      	ldr	r3, [r7, #28]
 800980a:	3301      	adds	r3, #1
 800980c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009818:	2b40      	cmp	r3, #64	@ 0x40
 800981a:	d1e3      	bne.n	80097e4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2240      	movs	r2, #64	@ 0x40
 8009822:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	2b02      	cmp	r3, #2
 8009828:	d014      	beq.n	8009854 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4618      	mov	r0, r3
 8009830:	f7ff f93c 	bl	8008aac <LL_ADC_REG_IsConversionOngoing>
 8009834:	4603      	mov	r3, r0
 8009836:	2b00      	cmp	r3, #0
 8009838:	d00c      	beq.n	8009854 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f7ff f8f9 	bl	8008a36 <LL_ADC_IsDisableOngoing>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d104      	bne.n	8009854 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4618      	mov	r0, r3
 8009850:	f7ff f918 	bl	8008a84 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009854:	69bb      	ldr	r3, [r7, #24]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d014      	beq.n	8009884 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff f94b 	bl	8008afa <LL_ADC_INJ_IsConversionOngoing>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00c      	beq.n	8009884 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff f8e1 	bl	8008a36 <LL_ADC_IsDisableOngoing>
 8009874:	4603      	mov	r3, r0
 8009876:	2b00      	cmp	r3, #0
 8009878:	d104      	bne.n	8009884 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff f927 	bl	8008ad2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009884:	69bb      	ldr	r3, [r7, #24]
 8009886:	2b02      	cmp	r3, #2
 8009888:	d005      	beq.n	8009896 <ADC_ConversionStop+0x10e>
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	2b03      	cmp	r3, #3
 800988e:	d105      	bne.n	800989c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009890:	230c      	movs	r3, #12
 8009892:	617b      	str	r3, [r7, #20]
        break;
 8009894:	e005      	b.n	80098a2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009896:	2308      	movs	r3, #8
 8009898:	617b      	str	r3, [r7, #20]
        break;
 800989a:	e002      	b.n	80098a2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800989c:	2304      	movs	r3, #4
 800989e:	617b      	str	r3, [r7, #20]
        break;
 80098a0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80098a2:	f7fe ff03 	bl	80086ac <HAL_GetTick>
 80098a6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80098a8:	e01b      	b.n	80098e2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80098aa:	f7fe feff 	bl	80086ac <HAL_GetTick>
 80098ae:	4602      	mov	r2, r0
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	1ad3      	subs	r3, r2, r3
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d914      	bls.n	80098e2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	4013      	ands	r3, r2
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00d      	beq.n	80098e2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ca:	f043 0210 	orr.w	r2, r3, #16
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098d6:	f043 0201 	orr.w	r2, r3, #1
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80098de:	2301      	movs	r3, #1
 80098e0:	e007      	b.n	80098f2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	689a      	ldr	r2, [r3, #8]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	4013      	ands	r3, r2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d1dc      	bne.n	80098aa <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	a33fffff 	.word	0xa33fffff

08009900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009908:	2300      	movs	r3, #0
 800990a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff f87d 	bl	8008a10 <LL_ADC_IsEnabled>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d15e      	bne.n	80099da <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	689a      	ldr	r2, [r3, #8]
 8009922:	4b30      	ldr	r3, [pc, #192]	@ (80099e4 <ADC_Enable+0xe4>)
 8009924:	4013      	ands	r3, r2
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00d      	beq.n	8009946 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992e:	f043 0210 	orr.w	r2, r3, #16
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800993a:	f043 0201 	orr.w	r2, r3, #1
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8009942:	2301      	movs	r3, #1
 8009944:	e04a      	b.n	80099dc <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4618      	mov	r0, r3
 800994c:	f7ff f838 	bl	80089c0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009950:	4825      	ldr	r0, [pc, #148]	@ (80099e8 <ADC_Enable+0xe8>)
 8009952:	f7fe fef5 	bl	8008740 <LL_ADC_GetCommonPathInternalCh>
 8009956:	4603      	mov	r3, r0
 8009958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800995c:	2b00      	cmp	r3, #0
 800995e:	d00f      	beq.n	8009980 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009960:	4b22      	ldr	r3, [pc, #136]	@ (80099ec <ADC_Enable+0xec>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	099b      	lsrs	r3, r3, #6
 8009966:	4a22      	ldr	r2, [pc, #136]	@ (80099f0 <ADC_Enable+0xf0>)
 8009968:	fba2 2303 	umull	r2, r3, r2, r3
 800996c:	099b      	lsrs	r3, r3, #6
 800996e:	3301      	adds	r3, #1
 8009970:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009972:	e002      	b.n	800997a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	3b01      	subs	r3, #1
 8009978:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1f9      	bne.n	8009974 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009980:	f7fe fe94 	bl	80086ac <HAL_GetTick>
 8009984:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009986:	e021      	b.n	80099cc <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff f83f 	bl	8008a10 <LL_ADC_IsEnabled>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff f80f 	bl	80089c0 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80099a2:	f7fe fe83 	bl	80086ac <HAL_GetTick>
 80099a6:	4602      	mov	r2, r0
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	1ad3      	subs	r3, r2, r3
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d90d      	bls.n	80099cc <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	f043 0210 	orr.w	r2, r3, #16
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099c0:	f043 0201 	orr.w	r2, r3, #1
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 80099c8:	2301      	movs	r3, #1
 80099ca:	e007      	b.n	80099dc <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f003 0301 	and.w	r3, r3, #1
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d1d6      	bne.n	8009988 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	8000003f 	.word	0x8000003f
 80099e8:	50040300 	.word	0x50040300
 80099ec:	20000008 	.word	0x20000008
 80099f0:	053e2d63 	.word	0x053e2d63

080099f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7ff f818 	bl	8008a36 <LL_ADC_IsDisableOngoing>
 8009a06:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f7fe ffff 	bl	8008a10 <LL_ADC_IsEnabled>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d047      	beq.n	8009aa8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d144      	bne.n	8009aa8 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	f003 030d 	and.w	r3, r3, #13
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d10c      	bne.n	8009a46 <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f7fe ffd9 	bl	80089e8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2203      	movs	r2, #3
 8009a3c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009a3e:	f7fe fe35 	bl	80086ac <HAL_GetTick>
 8009a42:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009a44:	e029      	b.n	8009a9a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a4a:	f043 0210 	orr.w	r2, r3, #16
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a56:	f043 0201 	orr.w	r2, r3, #1
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e023      	b.n	8009aaa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009a62:	f7fe fe23 	bl	80086ac <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d914      	bls.n	8009a9a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	689b      	ldr	r3, [r3, #8]
 8009a76:	f003 0301 	and.w	r3, r3, #1
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d00d      	beq.n	8009a9a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a82:	f043 0210 	orr.w	r2, r3, #16
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a8e:	f043 0201 	orr.w	r2, r3, #1
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e007      	b.n	8009aaa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 0301 	and.w	r3, r3, #1
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d1dc      	bne.n	8009a62 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	3710      	adds	r7, #16
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <__NVIC_SetPriorityGrouping>:
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f003 0307 	and.w	r3, r3, #7
 8009ac2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8009af8 <__NVIC_SetPriorityGrouping+0x44>)
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009aca:	68ba      	ldr	r2, [r7, #8]
 8009acc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009ad0:	4013      	ands	r3, r2
 8009ad2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009ad8:	68bb      	ldr	r3, [r7, #8]
 8009ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009adc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ae6:	4a04      	ldr	r2, [pc, #16]	@ (8009af8 <__NVIC_SetPriorityGrouping+0x44>)
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	60d3      	str	r3, [r2, #12]
}
 8009aec:	bf00      	nop
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	e000ed00 	.word	0xe000ed00

08009afc <__NVIC_GetPriorityGrouping>:
{
 8009afc:	b480      	push	{r7}
 8009afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009b00:	4b04      	ldr	r3, [pc, #16]	@ (8009b14 <__NVIC_GetPriorityGrouping+0x18>)
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	0a1b      	lsrs	r3, r3, #8
 8009b06:	f003 0307 	and.w	r3, r3, #7
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr
 8009b14:	e000ed00 	.word	0xe000ed00

08009b18 <__NVIC_EnableIRQ>:
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	db0b      	blt.n	8009b42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	f003 021f 	and.w	r2, r3, #31
 8009b30:	4907      	ldr	r1, [pc, #28]	@ (8009b50 <__NVIC_EnableIRQ+0x38>)
 8009b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b36:	095b      	lsrs	r3, r3, #5
 8009b38:	2001      	movs	r0, #1
 8009b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8009b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009b42:	bf00      	nop
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr
 8009b4e:	bf00      	nop
 8009b50:	e000e100 	.word	0xe000e100

08009b54 <__NVIC_DisableIRQ>:
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	db12      	blt.n	8009b8c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009b66:	79fb      	ldrb	r3, [r7, #7]
 8009b68:	f003 021f 	and.w	r2, r3, #31
 8009b6c:	490a      	ldr	r1, [pc, #40]	@ (8009b98 <__NVIC_DisableIRQ+0x44>)
 8009b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	2001      	movs	r0, #1
 8009b76:	fa00 f202 	lsl.w	r2, r0, r2
 8009b7a:	3320      	adds	r3, #32
 8009b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009b80:	f3bf 8f4f 	dsb	sy
}
 8009b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b86:	f3bf 8f6f 	isb	sy
}
 8009b8a:	bf00      	nop
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr
 8009b98:	e000e100 	.word	0xe000e100

08009b9c <__NVIC_SetPendingIRQ>:
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b083      	sub	sp, #12
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	db0c      	blt.n	8009bc8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bae:	79fb      	ldrb	r3, [r7, #7]
 8009bb0:	f003 021f 	and.w	r2, r3, #31
 8009bb4:	4907      	ldr	r1, [pc, #28]	@ (8009bd4 <__NVIC_SetPendingIRQ+0x38>)
 8009bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	2001      	movs	r0, #1
 8009bbe:	fa00 f202 	lsl.w	r2, r0, r2
 8009bc2:	3340      	adds	r3, #64	@ 0x40
 8009bc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009bc8:	bf00      	nop
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr
 8009bd4:	e000e100 	.word	0xe000e100

08009bd8 <__NVIC_ClearPendingIRQ>:
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b083      	sub	sp, #12
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	db0c      	blt.n	8009c04 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	f003 021f 	and.w	r2, r3, #31
 8009bf0:	4907      	ldr	r1, [pc, #28]	@ (8009c10 <__NVIC_ClearPendingIRQ+0x38>)
 8009bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bf6:	095b      	lsrs	r3, r3, #5
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8009bfe:	3360      	adds	r3, #96	@ 0x60
 8009c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c04:	bf00      	nop
 8009c06:	370c      	adds	r7, #12
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	e000e100 	.word	0xe000e100

08009c14 <__NVIC_SetPriority>:
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	6039      	str	r1, [r7, #0]
 8009c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	db0a      	blt.n	8009c3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	b2da      	uxtb	r2, r3
 8009c2c:	490c      	ldr	r1, [pc, #48]	@ (8009c60 <__NVIC_SetPriority+0x4c>)
 8009c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c32:	0112      	lsls	r2, r2, #4
 8009c34:	b2d2      	uxtb	r2, r2
 8009c36:	440b      	add	r3, r1
 8009c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c3c:	e00a      	b.n	8009c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	b2da      	uxtb	r2, r3
 8009c42:	4908      	ldr	r1, [pc, #32]	@ (8009c64 <__NVIC_SetPriority+0x50>)
 8009c44:	79fb      	ldrb	r3, [r7, #7]
 8009c46:	f003 030f 	and.w	r3, r3, #15
 8009c4a:	3b04      	subs	r3, #4
 8009c4c:	0112      	lsls	r2, r2, #4
 8009c4e:	b2d2      	uxtb	r2, r2
 8009c50:	440b      	add	r3, r1
 8009c52:	761a      	strb	r2, [r3, #24]
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr
 8009c60:	e000e100 	.word	0xe000e100
 8009c64:	e000ed00 	.word	0xe000ed00

08009c68 <NVIC_EncodePriority>:
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b089      	sub	sp, #36	@ 0x24
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	60f8      	str	r0, [r7, #12]
 8009c70:	60b9      	str	r1, [r7, #8]
 8009c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c7c:	69fb      	ldr	r3, [r7, #28]
 8009c7e:	f1c3 0307 	rsb	r3, r3, #7
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	bf28      	it	cs
 8009c86:	2304      	movcs	r3, #4
 8009c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	3304      	adds	r3, #4
 8009c8e:	2b06      	cmp	r3, #6
 8009c90:	d902      	bls.n	8009c98 <NVIC_EncodePriority+0x30>
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	3b03      	subs	r3, #3
 8009c96:	e000      	b.n	8009c9a <NVIC_EncodePriority+0x32>
 8009c98:	2300      	movs	r3, #0
 8009c9a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca6:	43da      	mvns	r2, r3
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	401a      	ands	r2, r3
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cba:	43d9      	mvns	r1, r3
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cc0:	4313      	orrs	r3, r2
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3724      	adds	r7, #36	@ 0x24
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
	...

08009cd0 <SysTick_Config>:
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ce0:	d301      	bcc.n	8009ce6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	e00f      	b.n	8009d06 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8009d10 <SysTick_Config+0x40>)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	3b01      	subs	r3, #1
 8009cec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cee:	210f      	movs	r1, #15
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	f7ff ff8e 	bl	8009c14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cf8:	4b05      	ldr	r3, [pc, #20]	@ (8009d10 <SysTick_Config+0x40>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cfe:	4b04      	ldr	r3, [pc, #16]	@ (8009d10 <SysTick_Config+0x40>)
 8009d00:	2207      	movs	r2, #7
 8009d02:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3708      	adds	r7, #8
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	e000e010 	.word	0xe000e010

08009d14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f7ff fec9 	bl	8009ab4 <__NVIC_SetPriorityGrouping>
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	4603      	mov	r3, r0
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	607a      	str	r2, [r7, #4]
 8009d36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d38:	f7ff fee0 	bl	8009afc <__NVIC_GetPriorityGrouping>
 8009d3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d3e:	687a      	ldr	r2, [r7, #4]
 8009d40:	68b9      	ldr	r1, [r7, #8]
 8009d42:	6978      	ldr	r0, [r7, #20]
 8009d44:	f7ff ff90 	bl	8009c68 <NVIC_EncodePriority>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4e:	4611      	mov	r1, r2
 8009d50:	4618      	mov	r0, r3
 8009d52:	f7ff ff5f 	bl	8009c14 <__NVIC_SetPriority>
}
 8009d56:	bf00      	nop
 8009d58:	3718      	adds	r7, #24
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b082      	sub	sp, #8
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	4603      	mov	r3, r0
 8009d66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fed3 	bl	8009b18 <__NVIC_EnableIRQ>
}
 8009d72:	bf00      	nop
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}

08009d7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009d7a:	b580      	push	{r7, lr}
 8009d7c:	b082      	sub	sp, #8
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	4603      	mov	r3, r0
 8009d82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fee3 	bl	8009b54 <__NVIC_DisableIRQ>
}
 8009d8e:	bf00      	nop
 8009d90:	3708      	adds	r7, #8
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b082      	sub	sp, #8
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff ff96 	bl	8009cd0 <SysTick_Config>
 8009da4:	4603      	mov	r3, r0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b082      	sub	sp, #8
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	4603      	mov	r3, r0
 8009db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8009db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff feed 	bl	8009b9c <__NVIC_SetPendingIRQ>
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fefd 	bl	8009bd8 <__NVIC_ClearPendingIRQ>
}
 8009dde:	bf00      	nop
 8009de0:	3708      	adds	r7, #8
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009df6:	2301      	movs	r3, #1
 8009df8:	e08e      	b.n	8009f18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	461a      	mov	r2, r3
 8009e00:	4b47      	ldr	r3, [pc, #284]	@ (8009f20 <HAL_DMA_Init+0x138>)
 8009e02:	429a      	cmp	r2, r3
 8009e04:	d80f      	bhi.n	8009e26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	4b45      	ldr	r3, [pc, #276]	@ (8009f24 <HAL_DMA_Init+0x13c>)
 8009e0e:	4413      	add	r3, r2
 8009e10:	4a45      	ldr	r2, [pc, #276]	@ (8009f28 <HAL_DMA_Init+0x140>)
 8009e12:	fba2 2303 	umull	r2, r3, r2, r3
 8009e16:	091b      	lsrs	r3, r3, #4
 8009e18:	009a      	lsls	r2, r3, #2
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	4a42      	ldr	r2, [pc, #264]	@ (8009f2c <HAL_DMA_Init+0x144>)
 8009e22:	641a      	str	r2, [r3, #64]	@ 0x40
 8009e24:	e00e      	b.n	8009e44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	4b40      	ldr	r3, [pc, #256]	@ (8009f30 <HAL_DMA_Init+0x148>)
 8009e2e:	4413      	add	r3, r2
 8009e30:	4a3d      	ldr	r2, [pc, #244]	@ (8009f28 <HAL_DMA_Init+0x140>)
 8009e32:	fba2 2303 	umull	r2, r3, r2, r3
 8009e36:	091b      	lsrs	r3, r3, #4
 8009e38:	009a      	lsls	r2, r3, #2
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a3c      	ldr	r2, [pc, #240]	@ (8009f34 <HAL_DMA_Init+0x14c>)
 8009e42:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009e5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	691b      	ldr	r3, [r3, #16]
 8009e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f8fe 	bl	800a098 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009ea4:	d102      	bne.n	8009eac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009eb4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009eb8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009ec2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <HAL_DMA_Init+0x106>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	685b      	ldr	r3, [r3, #4]
 8009ed0:	2b04      	cmp	r3, #4
 8009ed2:	d80c      	bhi.n	8009eee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f91d 	bl	800a114 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ede:	2200      	movs	r2, #0
 8009ee0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009eea:	605a      	str	r2, [r3, #4]
 8009eec:	e008      	b.n	8009f00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2200      	movs	r2, #0
 8009f04:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3710      	adds	r7, #16
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}
 8009f20:	40020407 	.word	0x40020407
 8009f24:	bffdfff8 	.word	0xbffdfff8
 8009f28:	cccccccd 	.word	0xcccccccd
 8009f2c:	40020000 	.word	0x40020000
 8009f30:	bffdfbf8 	.word	0xbffdfbf8
 8009f34:	40020400 	.word	0x40020400

08009f38 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f54:	f003 031c 	and.w	r3, r3, #28
 8009f58:	2204      	movs	r2, #4
 8009f5a:	409a      	lsls	r2, r3
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d026      	beq.n	8009fb2 <HAL_DMA_IRQHandler+0x7a>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d021      	beq.n	8009fb2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d107      	bne.n	8009f8c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	681a      	ldr	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	f022 0204 	bic.w	r2, r2, #4
 8009f8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f90:	f003 021c 	and.w	r2, r3, #28
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f98:	2104      	movs	r1, #4
 8009f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8009f9e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d071      	beq.n	800a08c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009fb0:	e06c      	b.n	800a08c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fb6:	f003 031c 	and.w	r3, r3, #28
 8009fba:	2202      	movs	r2, #2
 8009fbc:	409a      	lsls	r2, r3
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d02e      	beq.n	800a024 <HAL_DMA_IRQHandler+0xec>
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f003 0302 	and.w	r3, r3, #2
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d029      	beq.n	800a024 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0320 	and.w	r3, r3, #32
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 020a 	bic.w	r2, r2, #10
 8009fec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ffa:	f003 021c 	and.w	r2, r3, #28
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a002:	2102      	movs	r1, #2
 800a004:	fa01 f202 	lsl.w	r2, r1, r2
 800a008:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2200      	movs	r2, #0
 800a00e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	2b00      	cmp	r3, #0
 800a018:	d038      	beq.n	800a08c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a022:	e033      	b.n	800a08c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a028:	f003 031c 	and.w	r3, r3, #28
 800a02c:	2208      	movs	r2, #8
 800a02e:	409a      	lsls	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d02a      	beq.n	800a08e <HAL_DMA_IRQHandler+0x156>
 800a038:	68bb      	ldr	r3, [r7, #8]
 800a03a:	f003 0308 	and.w	r3, r3, #8
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d025      	beq.n	800a08e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	681a      	ldr	r2, [r3, #0]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f022 020e 	bic.w	r2, r2, #14
 800a050:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a056:	f003 021c 	and.w	r2, r3, #28
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a05e:	2101      	movs	r1, #1
 800a060:	fa01 f202 	lsl.w	r2, r1, r2
 800a064:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2201      	movs	r2, #1
 800a06a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2200      	movs	r2, #0
 800a078:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a080:	2b00      	cmp	r3, #0
 800a082:	d004      	beq.n	800a08e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a08c:	bf00      	nop
 800a08e:	bf00      	nop
}
 800a090:	3710      	adds	r7, #16
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
	...

0800a098 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	4b17      	ldr	r3, [pc, #92]	@ (800a104 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	d80a      	bhi.n	800a0c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0b0:	089b      	lsrs	r3, r3, #2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a0b8:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	6493      	str	r3, [r2, #72]	@ 0x48
 800a0c0:	e007      	b.n	800a0d2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0c6:	089b      	lsrs	r3, r3, #2
 800a0c8:	009a      	lsls	r2, r3, #2
 800a0ca:	4b0f      	ldr	r3, [pc, #60]	@ (800a108 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a0cc:	4413      	add	r3, r2
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	3b08      	subs	r3, #8
 800a0da:	4a0c      	ldr	r2, [pc, #48]	@ (800a10c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e0:	091b      	lsrs	r3, r3, #4
 800a0e2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a0a      	ldr	r2, [pc, #40]	@ (800a110 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a0e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f003 031f 	and.w	r3, r3, #31
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	409a      	lsls	r2, r3
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a0f8:	bf00      	nop
 800a0fa:	3714      	adds	r7, #20
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr
 800a104:	40020407 	.word	0x40020407
 800a108:	4002081c 	.word	0x4002081c
 800a10c:	cccccccd 	.word	0xcccccccd
 800a110:	40020880 	.word	0x40020880

0800a114 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a114:	b480      	push	{r7}
 800a116:	b085      	sub	sp, #20
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a124:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a126:	68fa      	ldr	r2, [r7, #12]
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a12a:	4413      	add	r3, r2
 800a12c:	009b      	lsls	r3, r3, #2
 800a12e:	461a      	mov	r2, r3
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a09      	ldr	r2, [pc, #36]	@ (800a15c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800a138:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2201      	movs	r2, #1
 800a144:	409a      	lsls	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a14a:	bf00      	nop
 800a14c:	3714      	adds	r7, #20
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	1000823f 	.word	0x1000823f
 800a15c:	40020940 	.word	0x40020940

0800a160 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a160:	b480      	push	{r7}
 800a162:	b087      	sub	sp, #28
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a16a:	2300      	movs	r3, #0
 800a16c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a16e:	e14c      	b.n	800a40a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	2101      	movs	r1, #1
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	fa01 f303 	lsl.w	r3, r1, r3
 800a17c:	4013      	ands	r3, r2
 800a17e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2b00      	cmp	r3, #0
 800a184:	f000 813e 	beq.w	800a404 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	f003 0303 	and.w	r3, r3, #3
 800a190:	2b01      	cmp	r3, #1
 800a192:	d005      	beq.n	800a1a0 <HAL_GPIO_Init+0x40>
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	f003 0303 	and.w	r3, r3, #3
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d130      	bne.n	800a202 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	005b      	lsls	r3, r3, #1
 800a1aa:	2203      	movs	r2, #3
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	43db      	mvns	r3, r3
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	4013      	ands	r3, r2
 800a1b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	005b      	lsls	r3, r3, #1
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	693a      	ldr	r2, [r7, #16]
 800a1ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	fa02 f303 	lsl.w	r3, r2, r3
 800a1de:	43db      	mvns	r3, r3
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	4013      	ands	r3, r2
 800a1e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	685b      	ldr	r3, [r3, #4]
 800a1ea:	091b      	lsrs	r3, r3, #4
 800a1ec:	f003 0201 	and.w	r2, r3, #1
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	693a      	ldr	r2, [r7, #16]
 800a200:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d017      	beq.n	800a23e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	2203      	movs	r2, #3
 800a21a:	fa02 f303 	lsl.w	r3, r2, r3
 800a21e:	43db      	mvns	r3, r3
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4013      	ands	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	689a      	ldr	r2, [r3, #8]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	fa02 f303 	lsl.w	r3, r2, r3
 800a232:	693a      	ldr	r2, [r7, #16]
 800a234:	4313      	orrs	r3, r2
 800a236:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	f003 0303 	and.w	r3, r3, #3
 800a246:	2b02      	cmp	r3, #2
 800a248:	d123      	bne.n	800a292 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	08da      	lsrs	r2, r3, #3
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	3208      	adds	r2, #8
 800a252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a256:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	220f      	movs	r2, #15
 800a262:	fa02 f303 	lsl.w	r3, r2, r3
 800a266:	43db      	mvns	r3, r3
 800a268:	693a      	ldr	r2, [r7, #16]
 800a26a:	4013      	ands	r3, r2
 800a26c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	691a      	ldr	r2, [r3, #16]
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f003 0307 	and.w	r3, r3, #7
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	fa02 f303 	lsl.w	r3, r2, r3
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	4313      	orrs	r3, r2
 800a282:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	08da      	lsrs	r2, r3, #3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3208      	adds	r2, #8
 800a28c:	6939      	ldr	r1, [r7, #16]
 800a28e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a298:	697b      	ldr	r3, [r7, #20]
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	2203      	movs	r2, #3
 800a29e:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a2:	43db      	mvns	r3, r3
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	f003 0203 	and.w	r2, r3, #3
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	005b      	lsls	r3, r3, #1
 800a2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a2ba:	693a      	ldr	r2, [r7, #16]
 800a2bc:	4313      	orrs	r3, r2
 800a2be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	693a      	ldr	r2, [r7, #16]
 800a2c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 8098 	beq.w	800a404 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a2d4:	4a54      	ldr	r2, [pc, #336]	@ (800a428 <HAL_GPIO_Init+0x2c8>)
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	089b      	lsrs	r3, r3, #2
 800a2da:	3302      	adds	r3, #2
 800a2dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f003 0303 	and.w	r3, r3, #3
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	220f      	movs	r2, #15
 800a2ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f0:	43db      	mvns	r3, r3
 800a2f2:	693a      	ldr	r2, [r7, #16]
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a2fe:	d019      	beq.n	800a334 <HAL_GPIO_Init+0x1d4>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a4a      	ldr	r2, [pc, #296]	@ (800a42c <HAL_GPIO_Init+0x2cc>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d013      	beq.n	800a330 <HAL_GPIO_Init+0x1d0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	4a49      	ldr	r2, [pc, #292]	@ (800a430 <HAL_GPIO_Init+0x2d0>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d00d      	beq.n	800a32c <HAL_GPIO_Init+0x1cc>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	4a48      	ldr	r2, [pc, #288]	@ (800a434 <HAL_GPIO_Init+0x2d4>)
 800a314:	4293      	cmp	r3, r2
 800a316:	d007      	beq.n	800a328 <HAL_GPIO_Init+0x1c8>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	4a47      	ldr	r2, [pc, #284]	@ (800a438 <HAL_GPIO_Init+0x2d8>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d101      	bne.n	800a324 <HAL_GPIO_Init+0x1c4>
 800a320:	2304      	movs	r3, #4
 800a322:	e008      	b.n	800a336 <HAL_GPIO_Init+0x1d6>
 800a324:	2307      	movs	r3, #7
 800a326:	e006      	b.n	800a336 <HAL_GPIO_Init+0x1d6>
 800a328:	2303      	movs	r3, #3
 800a32a:	e004      	b.n	800a336 <HAL_GPIO_Init+0x1d6>
 800a32c:	2302      	movs	r3, #2
 800a32e:	e002      	b.n	800a336 <HAL_GPIO_Init+0x1d6>
 800a330:	2301      	movs	r3, #1
 800a332:	e000      	b.n	800a336 <HAL_GPIO_Init+0x1d6>
 800a334:	2300      	movs	r3, #0
 800a336:	697a      	ldr	r2, [r7, #20]
 800a338:	f002 0203 	and.w	r2, r2, #3
 800a33c:	0092      	lsls	r2, r2, #2
 800a33e:	4093      	lsls	r3, r2
 800a340:	693a      	ldr	r2, [r7, #16]
 800a342:	4313      	orrs	r3, r2
 800a344:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a346:	4938      	ldr	r1, [pc, #224]	@ (800a428 <HAL_GPIO_Init+0x2c8>)
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	089b      	lsrs	r3, r3, #2
 800a34c:	3302      	adds	r3, #2
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a354:	4b39      	ldr	r3, [pc, #228]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	43db      	mvns	r3, r3
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	4013      	ands	r3, r2
 800a362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	4313      	orrs	r3, r2
 800a376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a378:	4a30      	ldr	r2, [pc, #192]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a37e:	4b2f      	ldr	r3, [pc, #188]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	43db      	mvns	r3, r3
 800a388:	693a      	ldr	r2, [r7, #16]
 800a38a:	4013      	ands	r3, r2
 800a38c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a3a2:	4a26      	ldr	r2, [pc, #152]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a3a8:	4b24      	ldr	r3, [pc, #144]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a3aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a3ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	43db      	mvns	r3, r3
 800a3b4:	693a      	ldr	r2, [r7, #16]
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	685b      	ldr	r3, [r3, #4]
 800a3be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d003      	beq.n	800a3ce <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a3ce:	4a1b      	ldr	r2, [pc, #108]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a3d6:	4b19      	ldr	r3, [pc, #100]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a3dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	43db      	mvns	r3, r3
 800a3e2:	693a      	ldr	r2, [r7, #16]
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d003      	beq.n	800a3fc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a3fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a43c <HAL_GPIO_Init+0x2dc>)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	3301      	adds	r3, #1
 800a408:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a40a:	683b      	ldr	r3, [r7, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	fa22 f303 	lsr.w	r3, r2, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	f47f aeab 	bne.w	800a170 <HAL_GPIO_Init+0x10>
  }
}
 800a41a:	bf00      	nop
 800a41c:	bf00      	nop
 800a41e:	371c      	adds	r7, #28
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr
 800a428:	40010000 	.word	0x40010000
 800a42c:	48000400 	.word	0x48000400
 800a430:	48000800 	.word	0x48000800
 800a434:	48000c00 	.word	0x48000c00
 800a438:	48001000 	.word	0x48001000
 800a43c:	58000800 	.word	0x58000800

0800a440 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a44a:	2300      	movs	r3, #0
 800a44c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a44e:	e0bb      	b.n	800a5c8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a450:	2201      	movs	r2, #1
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	683a      	ldr	r2, [r7, #0]
 800a45a:	4013      	ands	r3, r2
 800a45c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a45e:	693b      	ldr	r3, [r7, #16]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f000 80ae 	beq.w	800a5c2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a466:	4a5f      	ldr	r2, [pc, #380]	@ (800a5e4 <HAL_GPIO_DeInit+0x1a4>)
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	3302      	adds	r3, #2
 800a46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a472:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f003 0303 	and.w	r3, r3, #3
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	220f      	movs	r2, #15
 800a47e:	fa02 f303 	lsl.w	r3, r2, r3
 800a482:	68fa      	ldr	r2, [r7, #12]
 800a484:	4013      	ands	r3, r2
 800a486:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a48e:	d019      	beq.n	800a4c4 <HAL_GPIO_DeInit+0x84>
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a55      	ldr	r2, [pc, #340]	@ (800a5e8 <HAL_GPIO_DeInit+0x1a8>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d013      	beq.n	800a4c0 <HAL_GPIO_DeInit+0x80>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a54      	ldr	r2, [pc, #336]	@ (800a5ec <HAL_GPIO_DeInit+0x1ac>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d00d      	beq.n	800a4bc <HAL_GPIO_DeInit+0x7c>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a53      	ldr	r2, [pc, #332]	@ (800a5f0 <HAL_GPIO_DeInit+0x1b0>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d007      	beq.n	800a4b8 <HAL_GPIO_DeInit+0x78>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a52      	ldr	r2, [pc, #328]	@ (800a5f4 <HAL_GPIO_DeInit+0x1b4>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d101      	bne.n	800a4b4 <HAL_GPIO_DeInit+0x74>
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	e008      	b.n	800a4c6 <HAL_GPIO_DeInit+0x86>
 800a4b4:	2307      	movs	r3, #7
 800a4b6:	e006      	b.n	800a4c6 <HAL_GPIO_DeInit+0x86>
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e004      	b.n	800a4c6 <HAL_GPIO_DeInit+0x86>
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e002      	b.n	800a4c6 <HAL_GPIO_DeInit+0x86>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e000      	b.n	800a4c6 <HAL_GPIO_DeInit+0x86>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	697a      	ldr	r2, [r7, #20]
 800a4c8:	f002 0203 	and.w	r2, r2, #3
 800a4cc:	0092      	lsls	r2, r2, #2
 800a4ce:	4093      	lsls	r3, r2
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d136      	bne.n	800a544 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a4d6:	4b48      	ldr	r3, [pc, #288]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a4d8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	43db      	mvns	r3, r3
 800a4e0:	4945      	ldr	r1, [pc, #276]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a4e8:	4b43      	ldr	r3, [pc, #268]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a4ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	43db      	mvns	r3, r3
 800a4f2:	4941      	ldr	r1, [pc, #260]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a4f4:	4013      	ands	r3, r2
 800a4f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a4fa:	4b3f      	ldr	r3, [pc, #252]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a4fc:	681a      	ldr	r2, [r3, #0]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	43db      	mvns	r3, r3
 800a502:	493d      	ldr	r1, [pc, #244]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a504:	4013      	ands	r3, r2
 800a506:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a508:	4b3b      	ldr	r3, [pc, #236]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a50a:	685a      	ldr	r2, [r3, #4]
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	43db      	mvns	r3, r3
 800a510:	4939      	ldr	r1, [pc, #228]	@ (800a5f8 <HAL_GPIO_DeInit+0x1b8>)
 800a512:	4013      	ands	r3, r2
 800a514:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f003 0303 	and.w	r3, r3, #3
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	220f      	movs	r2, #15
 800a520:	fa02 f303 	lsl.w	r3, r2, r3
 800a524:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a526:	4a2f      	ldr	r2, [pc, #188]	@ (800a5e4 <HAL_GPIO_DeInit+0x1a4>)
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	089b      	lsrs	r3, r3, #2
 800a52c:	3302      	adds	r3, #2
 800a52e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	43da      	mvns	r2, r3
 800a536:	482b      	ldr	r0, [pc, #172]	@ (800a5e4 <HAL_GPIO_DeInit+0x1a4>)
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	089b      	lsrs	r3, r3, #2
 800a53c:	400a      	ands	r2, r1
 800a53e:	3302      	adds	r3, #2
 800a540:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681a      	ldr	r2, [r3, #0]
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	005b      	lsls	r3, r3, #1
 800a54c:	2103      	movs	r1, #3
 800a54e:	fa01 f303 	lsl.w	r3, r1, r3
 800a552:	431a      	orrs	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	08da      	lsrs	r2, r3, #3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	3208      	adds	r2, #8
 800a560:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	f003 0307 	and.w	r3, r3, #7
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	220f      	movs	r2, #15
 800a56e:	fa02 f303 	lsl.w	r3, r2, r3
 800a572:	43db      	mvns	r3, r3
 800a574:	697a      	ldr	r2, [r7, #20]
 800a576:	08d2      	lsrs	r2, r2, #3
 800a578:	4019      	ands	r1, r3
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	3208      	adds	r2, #8
 800a57e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68da      	ldr	r2, [r3, #12]
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	2103      	movs	r1, #3
 800a58c:	fa01 f303 	lsl.w	r3, r1, r3
 800a590:	43db      	mvns	r3, r3
 800a592:	401a      	ands	r2, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	685a      	ldr	r2, [r3, #4]
 800a59c:	2101      	movs	r1, #1
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a4:	43db      	mvns	r3, r3
 800a5a6:	401a      	ands	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689a      	ldr	r2, [r3, #8]
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	2103      	movs	r1, #3
 800a5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5ba:	43db      	mvns	r3, r3
 800a5bc:	401a      	ands	r2, r3
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	3301      	adds	r3, #1
 800a5c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a5c8:	683a      	ldr	r2, [r7, #0]
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	f47f af3d 	bne.w	800a450 <HAL_GPIO_DeInit+0x10>
  }
}
 800a5d6:	bf00      	nop
 800a5d8:	bf00      	nop
 800a5da:	371c      	adds	r7, #28
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr
 800a5e4:	40010000 	.word	0x40010000
 800a5e8:	48000400 	.word	0x48000400
 800a5ec:	48000800 	.word	0x48000800
 800a5f0:	48000c00 	.word	0x48000c00
 800a5f4:	48001000 	.word	0x48001000
 800a5f8:	58000800 	.word	0x58000800

0800a5fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
 800a604:	460b      	mov	r3, r1
 800a606:	807b      	strh	r3, [r7, #2]
 800a608:	4613      	mov	r3, r2
 800a60a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a60c:	787b      	ldrb	r3, [r7, #1]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d003      	beq.n	800a61a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a612:	887a      	ldrh	r2, [r7, #2]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a618:	e002      	b.n	800a620 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a61a:	887a      	ldrh	r2, [r7, #2]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr

0800a62c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a632:	4b0a      	ldr	r3, [pc, #40]	@ (800a65c <HAL_HSEM_IRQHandler+0x30>)
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a638:	4b08      	ldr	r3, [pc, #32]	@ (800a65c <HAL_HSEM_IRQHandler+0x30>)
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	43db      	mvns	r3, r3
 800a640:	4906      	ldr	r1, [pc, #24]	@ (800a65c <HAL_HSEM_IRQHandler+0x30>)
 800a642:	4013      	ands	r3, r2
 800a644:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a646:	4a05      	ldr	r2, [pc, #20]	@ (800a65c <HAL_HSEM_IRQHandler+0x30>)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f000 f807 	bl	800a660 <HAL_HSEM_FreeCallback>
}
 800a652:	bf00      	nop
 800a654:	3708      	adds	r7, #8
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	58001500 	.word	0x58001500

0800a660 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a660:	b480      	push	{r7}
 800a662:	b083      	sub	sp, #12
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a668:	bf00      	nop
 800a66a:	370c      	adds	r7, #12
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d101      	bne.n	800a686 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	e08d      	b.n	800a7a2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d106      	bne.n	800a6a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f8b4 	bl	800a808 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2224      	movs	r2, #36	@ 0x24
 800a6a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 0201 	bic.w	r2, r2, #1
 800a6b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a6c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	689a      	ldr	r2, [r3, #8]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a6d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	d107      	bne.n	800a6ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6ea:	609a      	str	r2, [r3, #8]
 800a6ec:	e006      	b.n	800a6fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689a      	ldr	r2, [r3, #8]
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a6fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	2b02      	cmp	r3, #2
 800a702:	d108      	bne.n	800a716 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	685a      	ldr	r2, [r3, #4]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a712:	605a      	str	r2, [r3, #4]
 800a714:	e007      	b.n	800a726 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	685a      	ldr	r2, [r3, #4]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a724:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	6812      	ldr	r2, [r2, #0]
 800a730:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a738:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	68da      	ldr	r2, [r3, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a748:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	691a      	ldr	r2, [r3, #16]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	695b      	ldr	r3, [r3, #20]
 800a752:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	430a      	orrs	r2, r1
 800a762:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	69d9      	ldr	r1, [r3, #28]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6a1a      	ldr	r2, [r3, #32]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f042 0201 	orr.w	r2, r2, #1
 800a782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2200      	movs	r2, #0
 800a788:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2200      	movs	r2, #0
 800a796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3708      	adds	r7, #8
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e021      	b.n	800a800 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2224      	movs	r2, #36	@ 0x24
 800a7c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f022 0201 	bic.w	r2, r2, #1
 800a7d2:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 f821 	bl	800a81c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a7fe:	2300      	movs	r3, #0
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b088      	sub	sp, #32
 800a834:	af02      	add	r7, sp, #8
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	4608      	mov	r0, r1
 800a83a:	4611      	mov	r1, r2
 800a83c:	461a      	mov	r2, r3
 800a83e:	4603      	mov	r3, r0
 800a840:	817b      	strh	r3, [r7, #10]
 800a842:	460b      	mov	r3, r1
 800a844:	813b      	strh	r3, [r7, #8]
 800a846:	4613      	mov	r3, r2
 800a848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a850:	b2db      	uxtb	r3, r3
 800a852:	2b20      	cmp	r3, #32
 800a854:	f040 80f9 	bne.w	800aa4a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d002      	beq.n	800a864 <HAL_I2C_Mem_Write+0x34>
 800a85e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a86a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	e0ed      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a876:	2b01      	cmp	r3, #1
 800a878:	d101      	bne.n	800a87e <HAL_I2C_Mem_Write+0x4e>
 800a87a:	2302      	movs	r3, #2
 800a87c:	e0e6      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2201      	movs	r2, #1
 800a882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a886:	f7fd ff11 	bl	80086ac <HAL_GetTick>
 800a88a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a88c:	697b      	ldr	r3, [r7, #20]
 800a88e:	9300      	str	r3, [sp, #0]
 800a890:	2319      	movs	r3, #25
 800a892:	2201      	movs	r2, #1
 800a894:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a898:	68f8      	ldr	r0, [r7, #12]
 800a89a:	f000 fadd 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d001      	beq.n	800a8a8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	e0d1      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	2221      	movs	r2, #33	@ 0x21
 800a8ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2240      	movs	r2, #64	@ 0x40
 800a8b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6a3a      	ldr	r2, [r7, #32]
 800a8c2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a8c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a8d0:	88f8      	ldrh	r0, [r7, #6]
 800a8d2:	893a      	ldrh	r2, [r7, #8]
 800a8d4:	8979      	ldrh	r1, [r7, #10]
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	9301      	str	r3, [sp, #4]
 800a8da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8dc:	9300      	str	r3, [sp, #0]
 800a8de:	4603      	mov	r3, r0
 800a8e0:	68f8      	ldr	r0, [r7, #12]
 800a8e2:	f000 f9ed 	bl	800acc0 <I2C_RequestMemoryWrite>
 800a8e6:	4603      	mov	r3, r0
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d005      	beq.n	800a8f8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e0a9      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	2bff      	cmp	r3, #255	@ 0xff
 800a900:	d90e      	bls.n	800a920 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	22ff      	movs	r2, #255	@ 0xff
 800a906:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a90c:	b2da      	uxtb	r2, r3
 800a90e:	8979      	ldrh	r1, [r7, #10]
 800a910:	2300      	movs	r3, #0
 800a912:	9300      	str	r3, [sp, #0]
 800a914:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f000 fc61 	bl	800b1e0 <I2C_TransferConfig>
 800a91e:	e00f      	b.n	800a940 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a924:	b29a      	uxth	r2, r3
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	8979      	ldrh	r1, [r7, #10]
 800a932:	2300      	movs	r3, #0
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a93a:	68f8      	ldr	r0, [r7, #12]
 800a93c:	f000 fc50 	bl	800b1e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a944:	68f8      	ldr	r0, [r7, #12]
 800a946:	f000 fae0 	bl	800af0a <I2C_WaitOnTXISFlagUntilTimeout>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e07b      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a958:	781a      	ldrb	r2, [r3, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a964:	1c5a      	adds	r2, r3, #1
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a96e:	b29b      	uxth	r3, r3
 800a970:	3b01      	subs	r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a97c:	3b01      	subs	r3, #1
 800a97e:	b29a      	uxth	r2, r3
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a988:	b29b      	uxth	r3, r3
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d034      	beq.n	800a9f8 <HAL_I2C_Mem_Write+0x1c8>
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a992:	2b00      	cmp	r3, #0
 800a994:	d130      	bne.n	800a9f8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a99c:	2200      	movs	r2, #0
 800a99e:	2180      	movs	r1, #128	@ 0x80
 800a9a0:	68f8      	ldr	r0, [r7, #12]
 800a9a2:	f000 fa59 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e04d      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	2bff      	cmp	r3, #255	@ 0xff
 800a9b8:	d90e      	bls.n	800a9d8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	22ff      	movs	r2, #255	@ 0xff
 800a9be:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	8979      	ldrh	r1, [r7, #10]
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 fc05 	bl	800b1e0 <I2C_TransferConfig>
 800a9d6:	e00f      	b.n	800a9f8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9dc:	b29a      	uxth	r2, r3
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9e6:	b2da      	uxtb	r2, r3
 800a9e8:	8979      	ldrh	r1, [r7, #10]
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	9300      	str	r3, [sp, #0]
 800a9ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a9f2:	68f8      	ldr	r0, [r7, #12]
 800a9f4:	f000 fbf4 	bl	800b1e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d19e      	bne.n	800a940 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa06:	68f8      	ldr	r0, [r7, #12]
 800aa08:	f000 fac6 	bl	800af98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800aa12:	2301      	movs	r3, #1
 800aa14:	e01a      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	2220      	movs	r2, #32
 800aa1c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	6859      	ldr	r1, [r3, #4]
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	4b0a      	ldr	r3, [pc, #40]	@ (800aa54 <HAL_I2C_Mem_Write+0x224>)
 800aa2a:	400b      	ands	r3, r1
 800aa2c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e000      	b.n	800aa4c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800aa4a:	2302      	movs	r3, #2
  }
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3718      	adds	r7, #24
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	fe00e800 	.word	0xfe00e800

0800aa58 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	4608      	mov	r0, r1
 800aa62:	4611      	mov	r1, r2
 800aa64:	461a      	mov	r2, r3
 800aa66:	4603      	mov	r3, r0
 800aa68:	817b      	strh	r3, [r7, #10]
 800aa6a:	460b      	mov	r3, r1
 800aa6c:	813b      	strh	r3, [r7, #8]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	2b20      	cmp	r3, #32
 800aa7c:	f040 80fd 	bne.w	800ac7a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa80:	6a3b      	ldr	r3, [r7, #32]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d002      	beq.n	800aa8c <HAL_I2C_Mem_Read+0x34>
 800aa86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d105      	bne.n	800aa98 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa92:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e0f1      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d101      	bne.n	800aaa6 <HAL_I2C_Mem_Read+0x4e>
 800aaa2:	2302      	movs	r3, #2
 800aaa4:	e0ea      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2201      	movs	r2, #1
 800aaaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aaae:	f7fd fdfd 	bl	80086ac <HAL_GetTick>
 800aab2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	9300      	str	r3, [sp, #0]
 800aab8:	2319      	movs	r3, #25
 800aaba:	2201      	movs	r2, #1
 800aabc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aac0:	68f8      	ldr	r0, [r7, #12]
 800aac2:	f000 f9c9 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800aac6:	4603      	mov	r3, r0
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d001      	beq.n	800aad0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800aacc:	2301      	movs	r3, #1
 800aace:	e0d5      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2222      	movs	r2, #34	@ 0x22
 800aad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2240      	movs	r2, #64	@ 0x40
 800aadc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2200      	movs	r2, #0
 800aae4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6a3a      	ldr	r2, [r7, #32]
 800aaea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aaf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aaf8:	88f8      	ldrh	r0, [r7, #6]
 800aafa:	893a      	ldrh	r2, [r7, #8]
 800aafc:	8979      	ldrh	r1, [r7, #10]
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	9301      	str	r3, [sp, #4]
 800ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4603      	mov	r3, r0
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f92d 	bl	800ad68 <I2C_RequestMemoryRead>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d005      	beq.n	800ab20 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2200      	movs	r2, #0
 800ab18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e0ad      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	2bff      	cmp	r3, #255	@ 0xff
 800ab28:	d90e      	bls.n	800ab48 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	22ff      	movs	r2, #255	@ 0xff
 800ab2e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab34:	b2da      	uxtb	r2, r3
 800ab36:	8979      	ldrh	r1, [r7, #10]
 800ab38:	4b52      	ldr	r3, [pc, #328]	@ (800ac84 <HAL_I2C_Mem_Read+0x22c>)
 800ab3a:	9300      	str	r3, [sp, #0]
 800ab3c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab40:	68f8      	ldr	r0, [r7, #12]
 800ab42:	f000 fb4d 	bl	800b1e0 <I2C_TransferConfig>
 800ab46:	e00f      	b.n	800ab68 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab56:	b2da      	uxtb	r2, r3
 800ab58:	8979      	ldrh	r1, [r7, #10]
 800ab5a:	4b4a      	ldr	r3, [pc, #296]	@ (800ac84 <HAL_I2C_Mem_Read+0x22c>)
 800ab5c:	9300      	str	r3, [sp, #0]
 800ab5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab62:	68f8      	ldr	r0, [r7, #12]
 800ab64:	f000 fb3c 	bl	800b1e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	9300      	str	r3, [sp, #0]
 800ab6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6e:	2200      	movs	r2, #0
 800ab70:	2104      	movs	r1, #4
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f000 f970 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	e07c      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab8c:	b2d2      	uxtb	r2, r2
 800ab8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab94:	1c5a      	adds	r2, r3, #1
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab9e:	3b01      	subs	r3, #1
 800aba0:	b29a      	uxth	r2, r3
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abaa:	b29b      	uxth	r3, r3
 800abac:	3b01      	subs	r3, #1
 800abae:	b29a      	uxth	r2, r3
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abb8:	b29b      	uxth	r3, r3
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d034      	beq.n	800ac28 <HAL_I2C_Mem_Read+0x1d0>
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d130      	bne.n	800ac28 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	9300      	str	r3, [sp, #0]
 800abca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abcc:	2200      	movs	r2, #0
 800abce:	2180      	movs	r1, #128	@ 0x80
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f000 f941 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800abd6:	4603      	mov	r3, r0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d001      	beq.n	800abe0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800abdc:	2301      	movs	r3, #1
 800abde:	e04d      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abe4:	b29b      	uxth	r3, r3
 800abe6:	2bff      	cmp	r3, #255	@ 0xff
 800abe8:	d90e      	bls.n	800ac08 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	22ff      	movs	r2, #255	@ 0xff
 800abee:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abf4:	b2da      	uxtb	r2, r3
 800abf6:	8979      	ldrh	r1, [r7, #10]
 800abf8:	2300      	movs	r3, #0
 800abfa:	9300      	str	r3, [sp, #0]
 800abfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac00:	68f8      	ldr	r0, [r7, #12]
 800ac02:	f000 faed 	bl	800b1e0 <I2C_TransferConfig>
 800ac06:	e00f      	b.n	800ac28 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac0c:	b29a      	uxth	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac16:	b2da      	uxtb	r2, r3
 800ac18:	8979      	ldrh	r1, [r7, #10]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	9300      	str	r3, [sp, #0]
 800ac1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac22:	68f8      	ldr	r0, [r7, #12]
 800ac24:	f000 fadc 	bl	800b1e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d19a      	bne.n	800ab68 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ac32:	697a      	ldr	r2, [r7, #20]
 800ac34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 f9ae 	bl	800af98 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e01a      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2220      	movs	r2, #32
 800ac4c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6859      	ldr	r1, [r3, #4]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681a      	ldr	r2, [r3, #0]
 800ac58:	4b0b      	ldr	r3, [pc, #44]	@ (800ac88 <HAL_I2C_Mem_Read+0x230>)
 800ac5a:	400b      	ands	r3, r1
 800ac5c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	e000      	b.n	800ac7c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ac7a:	2302      	movs	r3, #2
  }
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3718      	adds	r7, #24
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	80002400 	.word	0x80002400
 800ac88:	fe00e800 	.word	0xfe00e800

0800ac8c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac9a:	b2db      	uxtb	r3, r3
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	370c      	adds	r7, #12
 800aca0:	46bd      	mov	sp, r7
 800aca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca6:	4770      	bx	lr

0800aca8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800aca8:	b480      	push	{r7}
 800acaa:	b083      	sub	sp, #12
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800acb4:	4618      	mov	r0, r3
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af02      	add	r7, sp, #8
 800acc6:	60f8      	str	r0, [r7, #12]
 800acc8:	4608      	mov	r0, r1
 800acca:	4611      	mov	r1, r2
 800accc:	461a      	mov	r2, r3
 800acce:	4603      	mov	r3, r0
 800acd0:	817b      	strh	r3, [r7, #10]
 800acd2:	460b      	mov	r3, r1
 800acd4:	813b      	strh	r3, [r7, #8]
 800acd6:	4613      	mov	r3, r2
 800acd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800acda:	88fb      	ldrh	r3, [r7, #6]
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	8979      	ldrh	r1, [r7, #10]
 800ace0:	4b20      	ldr	r3, [pc, #128]	@ (800ad64 <I2C_RequestMemoryWrite+0xa4>)
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 fa79 	bl	800b1e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800acee:	69fa      	ldr	r2, [r7, #28]
 800acf0:	69b9      	ldr	r1, [r7, #24]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f000 f909 	bl	800af0a <I2C_WaitOnTXISFlagUntilTimeout>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d001      	beq.n	800ad02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800acfe:	2301      	movs	r3, #1
 800ad00:	e02c      	b.n	800ad5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad02:	88fb      	ldrh	r3, [r7, #6]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d105      	bne.n	800ad14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad08:	893b      	ldrh	r3, [r7, #8]
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	629a      	str	r2, [r3, #40]	@ 0x28
 800ad12:	e015      	b.n	800ad40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ad14:	893b      	ldrh	r3, [r7, #8]
 800ad16:	0a1b      	lsrs	r3, r3, #8
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	b2da      	uxtb	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	69b9      	ldr	r1, [r7, #24]
 800ad26:	68f8      	ldr	r0, [r7, #12]
 800ad28:	f000 f8ef 	bl	800af0a <I2C_WaitOnTXISFlagUntilTimeout>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d001      	beq.n	800ad36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ad32:	2301      	movs	r3, #1
 800ad34:	e012      	b.n	800ad5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ad36:	893b      	ldrh	r3, [r7, #8]
 800ad38:	b2da      	uxtb	r2, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	2200      	movs	r2, #0
 800ad48:	2180      	movs	r1, #128	@ 0x80
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f884 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e000      	b.n	800ad5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ad5a:	2300      	movs	r3, #0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3710      	adds	r7, #16
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	80002000 	.word	0x80002000

0800ad68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b086      	sub	sp, #24
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	4608      	mov	r0, r1
 800ad72:	4611      	mov	r1, r2
 800ad74:	461a      	mov	r2, r3
 800ad76:	4603      	mov	r3, r0
 800ad78:	817b      	strh	r3, [r7, #10]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	813b      	strh	r3, [r7, #8]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ad82:	88fb      	ldrh	r3, [r7, #6]
 800ad84:	b2da      	uxtb	r2, r3
 800ad86:	8979      	ldrh	r1, [r7, #10]
 800ad88:	4b20      	ldr	r3, [pc, #128]	@ (800ae0c <I2C_RequestMemoryRead+0xa4>)
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	68f8      	ldr	r0, [r7, #12]
 800ad90:	f000 fa26 	bl	800b1e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad94:	69fa      	ldr	r2, [r7, #28]
 800ad96:	69b9      	ldr	r1, [r7, #24]
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f8b6 	bl	800af0a <I2C_WaitOnTXISFlagUntilTimeout>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d001      	beq.n	800ada8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ada4:	2301      	movs	r3, #1
 800ada6:	e02c      	b.n	800ae02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d105      	bne.n	800adba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800adae:	893b      	ldrh	r3, [r7, #8]
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	629a      	str	r2, [r3, #40]	@ 0x28
 800adb8:	e015      	b.n	800ade6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800adba:	893b      	ldrh	r3, [r7, #8]
 800adbc:	0a1b      	lsrs	r3, r3, #8
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adc8:	69fa      	ldr	r2, [r7, #28]
 800adca:	69b9      	ldr	r1, [r7, #24]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f89c 	bl	800af0a <I2C_WaitOnTXISFlagUntilTimeout>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d001      	beq.n	800addc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800add8:	2301      	movs	r3, #1
 800adda:	e012      	b.n	800ae02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800addc:	893b      	ldrh	r3, [r7, #8]
 800adde:	b2da      	uxtb	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ade6:	69fb      	ldr	r3, [r7, #28]
 800ade8:	9300      	str	r3, [sp, #0]
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	2200      	movs	r2, #0
 800adee:	2140      	movs	r1, #64	@ 0x40
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 f831 	bl	800ae58 <I2C_WaitOnFlagUntilTimeout>
 800adf6:	4603      	mov	r3, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d001      	beq.n	800ae00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800adfc:	2301      	movs	r3, #1
 800adfe:	e000      	b.n	800ae02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	80002000 	.word	0x80002000

0800ae10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	f003 0302 	and.w	r3, r3, #2
 800ae22:	2b02      	cmp	r3, #2
 800ae24:	d103      	bne.n	800ae2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d007      	beq.n	800ae4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	699a      	ldr	r2, [r3, #24]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f042 0201 	orr.w	r2, r2, #1
 800ae4a:	619a      	str	r2, [r3, #24]
  }
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b084      	sub	sp, #16
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	603b      	str	r3, [r7, #0]
 800ae64:	4613      	mov	r3, r2
 800ae66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae68:	e03b      	b.n	800aee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae6a:	69ba      	ldr	r2, [r7, #24]
 800ae6c:	6839      	ldr	r1, [r7, #0]
 800ae6e:	68f8      	ldr	r0, [r7, #12]
 800ae70:	f000 f8d6 	bl	800b020 <I2C_IsErrorOccurred>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e041      	b.n	800af02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae84:	d02d      	beq.n	800aee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae86:	f7fd fc11 	bl	80086ac <HAL_GetTick>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	1ad3      	subs	r3, r2, r3
 800ae90:	683a      	ldr	r2, [r7, #0]
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d302      	bcc.n	800ae9c <I2C_WaitOnFlagUntilTimeout+0x44>
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d122      	bne.n	800aee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	699a      	ldr	r2, [r3, #24]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	4013      	ands	r3, r2
 800aea6:	68ba      	ldr	r2, [r7, #8]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	bf0c      	ite	eq
 800aeac:	2301      	moveq	r3, #1
 800aeae:	2300      	movne	r3, #0
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	79fb      	ldrb	r3, [r7, #7]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d113      	bne.n	800aee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aebe:	f043 0220 	orr.w	r2, r3, #32
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	2220      	movs	r2, #32
 800aeca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aede:	2301      	movs	r3, #1
 800aee0:	e00f      	b.n	800af02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	699a      	ldr	r2, [r3, #24]
 800aee8:	68bb      	ldr	r3, [r7, #8]
 800aeea:	4013      	ands	r3, r2
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	bf0c      	ite	eq
 800aef2:	2301      	moveq	r3, #1
 800aef4:	2300      	movne	r3, #0
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	461a      	mov	r2, r3
 800aefa:	79fb      	ldrb	r3, [r7, #7]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d0b4      	beq.n	800ae6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af00:	2300      	movs	r3, #0
}
 800af02:	4618      	mov	r0, r3
 800af04:	3710      	adds	r7, #16
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}

0800af0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af0a:	b580      	push	{r7, lr}
 800af0c:	b084      	sub	sp, #16
 800af0e:	af00      	add	r7, sp, #0
 800af10:	60f8      	str	r0, [r7, #12]
 800af12:	60b9      	str	r1, [r7, #8]
 800af14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af16:	e033      	b.n	800af80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	68b9      	ldr	r1, [r7, #8]
 800af1c:	68f8      	ldr	r0, [r7, #12]
 800af1e:	f000 f87f 	bl	800b020 <I2C_IsErrorOccurred>
 800af22:	4603      	mov	r3, r0
 800af24:	2b00      	cmp	r3, #0
 800af26:	d001      	beq.n	800af2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800af28:	2301      	movs	r3, #1
 800af2a:	e031      	b.n	800af90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af32:	d025      	beq.n	800af80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af34:	f7fd fbba 	bl	80086ac <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	68ba      	ldr	r2, [r7, #8]
 800af40:	429a      	cmp	r2, r3
 800af42:	d302      	bcc.n	800af4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d11a      	bne.n	800af80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	699b      	ldr	r3, [r3, #24]
 800af50:	f003 0302 	and.w	r3, r3, #2
 800af54:	2b02      	cmp	r3, #2
 800af56:	d013      	beq.n	800af80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af5c:	f043 0220 	orr.w	r2, r3, #32
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2220      	movs	r2, #32
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2200      	movs	r2, #0
 800af70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800af7c:	2301      	movs	r3, #1
 800af7e:	e007      	b.n	800af90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	f003 0302 	and.w	r3, r3, #2
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d1c4      	bne.n	800af18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800afa4:	e02f      	b.n	800b006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800afa6:	687a      	ldr	r2, [r7, #4]
 800afa8:	68b9      	ldr	r1, [r7, #8]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 f838 	bl	800b020 <I2C_IsErrorOccurred>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d001      	beq.n	800afba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	e02d      	b.n	800b016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afba:	f7fd fb77 	bl	80086ac <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d302      	bcc.n	800afd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11a      	bne.n	800b006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b20      	cmp	r3, #32
 800afdc:	d013      	beq.n	800b006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afe2:	f043 0220 	orr.w	r2, r3, #32
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2220      	movs	r2, #32
 800afee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2200      	movs	r2, #0
 800aff6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e007      	b.n	800b016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	699b      	ldr	r3, [r3, #24]
 800b00c:	f003 0320 	and.w	r3, r3, #32
 800b010:	2b20      	cmp	r3, #32
 800b012:	d1c8      	bne.n	800afa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}
	...

0800b020 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08a      	sub	sp, #40	@ 0x28
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b02c:	2300      	movs	r3, #0
 800b02e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	f003 0310 	and.w	r3, r3, #16
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d068      	beq.n	800b11e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2210      	movs	r2, #16
 800b052:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b054:	e049      	b.n	800b0ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b05c:	d045      	beq.n	800b0ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b05e:	f7fd fb25 	bl	80086ac <HAL_GetTick>
 800b062:	4602      	mov	r2, r0
 800b064:	69fb      	ldr	r3, [r7, #28]
 800b066:	1ad3      	subs	r3, r2, r3
 800b068:	68ba      	ldr	r2, [r7, #8]
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d302      	bcc.n	800b074 <I2C_IsErrorOccurred+0x54>
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d13a      	bne.n	800b0ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	685b      	ldr	r3, [r3, #4]
 800b07a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b07e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b086:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	699b      	ldr	r3, [r3, #24]
 800b08e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b092:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b096:	d121      	bne.n	800b0dc <I2C_IsErrorOccurred+0xbc>
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b09e:	d01d      	beq.n	800b0dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b0a0:	7cfb      	ldrb	r3, [r7, #19]
 800b0a2:	2b20      	cmp	r3, #32
 800b0a4:	d01a      	beq.n	800b0dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	685a      	ldr	r2, [r3, #4]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b0b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b0b6:	f7fd faf9 	bl	80086ac <HAL_GetTick>
 800b0ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0bc:	e00e      	b.n	800b0dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b0be:	f7fd faf5 	bl	80086ac <HAL_GetTick>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	1ad3      	subs	r3, r2, r3
 800b0c8:	2b19      	cmp	r3, #25
 800b0ca:	d907      	bls.n	800b0dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	f043 0320 	orr.w	r3, r3, #32
 800b0d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b0d4:	2301      	movs	r3, #1
 800b0d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b0da:	e006      	b.n	800b0ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d1e9      	bne.n	800b0be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	699b      	ldr	r3, [r3, #24]
 800b0f0:	f003 0320 	and.w	r3, r3, #32
 800b0f4:	2b20      	cmp	r3, #32
 800b0f6:	d003      	beq.n	800b100 <I2C_IsErrorOccurred+0xe0>
 800b0f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d0aa      	beq.n	800b056 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b100:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b104:	2b00      	cmp	r3, #0
 800b106:	d103      	bne.n	800b110 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2220      	movs	r2, #32
 800b10e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b110:	6a3b      	ldr	r3, [r7, #32]
 800b112:	f043 0304 	orr.w	r3, r3, #4
 800b116:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d00b      	beq.n	800b148 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b130:	6a3b      	ldr	r3, [r7, #32]
 800b132:	f043 0301 	orr.w	r3, r3, #1
 800b136:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d00b      	beq.n	800b16a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b152:	6a3b      	ldr	r3, [r7, #32]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b162:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b164:	2301      	movs	r3, #1
 800b166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b170:	2b00      	cmp	r3, #0
 800b172:	d00b      	beq.n	800b18c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b174:	6a3b      	ldr	r3, [r7, #32]
 800b176:	f043 0302 	orr.w	r3, r3, #2
 800b17a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b18c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b190:	2b00      	cmp	r3, #0
 800b192:	d01c      	beq.n	800b1ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f7ff fe3b 	bl	800ae10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	6859      	ldr	r1, [r3, #4]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681a      	ldr	r2, [r3, #0]
 800b1a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b1dc <I2C_IsErrorOccurred+0x1bc>)
 800b1a6:	400b      	ands	r3, r1
 800b1a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2220      	movs	r2, #32
 800b1ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3728      	adds	r7, #40	@ 0x28
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	fe00e800 	.word	0xfe00e800

0800b1e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	607b      	str	r3, [r7, #4]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	817b      	strh	r3, [r7, #10]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b1f2:	897b      	ldrh	r3, [r7, #10]
 800b1f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b1f8:	7a7b      	ldrb	r3, [r7, #9]
 800b1fa:	041b      	lsls	r3, r3, #16
 800b1fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b200:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b206:	6a3b      	ldr	r3, [r7, #32]
 800b208:	4313      	orrs	r3, r2
 800b20a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b20e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	0d5b      	lsrs	r3, r3, #21
 800b21a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b21e:	4b08      	ldr	r3, [pc, #32]	@ (800b240 <I2C_TransferConfig+0x60>)
 800b220:	430b      	orrs	r3, r1
 800b222:	43db      	mvns	r3, r3
 800b224:	ea02 0103 	and.w	r1, r2, r3
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	697a      	ldr	r2, [r7, #20]
 800b22e:	430a      	orrs	r2, r1
 800b230:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b232:	bf00      	nop
 800b234:	371c      	adds	r7, #28
 800b236:	46bd      	mov	sp, r7
 800b238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23c:	4770      	bx	lr
 800b23e:	bf00      	nop
 800b240:	03ff63ff 	.word	0x03ff63ff

0800b244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b244:	b480      	push	{r7}
 800b246:	b083      	sub	sp, #12
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b254:	b2db      	uxtb	r3, r3
 800b256:	2b20      	cmp	r3, #32
 800b258:	d138      	bne.n	800b2cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b260:	2b01      	cmp	r3, #1
 800b262:	d101      	bne.n	800b268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b264:	2302      	movs	r3, #2
 800b266:	e032      	b.n	800b2ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2224      	movs	r2, #36	@ 0x24
 800b274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	681a      	ldr	r2, [r3, #0]
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	f022 0201 	bic.w	r2, r2, #1
 800b286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	681a      	ldr	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	6819      	ldr	r1, [r3, #0]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	430a      	orrs	r2, r1
 800b2a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	e000      	b.n	800b2ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b2cc:	2302      	movs	r3, #2
  }
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	370c      	adds	r7, #12
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr

0800b2da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b2da:	b480      	push	{r7}
 800b2dc:	b085      	sub	sp, #20
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b20      	cmp	r3, #32
 800b2ee:	d139      	bne.n	800b364 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d101      	bne.n	800b2fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b2fa:	2302      	movs	r3, #2
 800b2fc:	e033      	b.n	800b366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2224      	movs	r2, #36	@ 0x24
 800b30a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f022 0201 	bic.w	r2, r2, #1
 800b31c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b32c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	021b      	lsls	r3, r3, #8
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	4313      	orrs	r3, r2
 800b336:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	68fa      	ldr	r2, [r7, #12]
 800b33e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f042 0201 	orr.w	r2, r2, #1
 800b34e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2220      	movs	r2, #32
 800b354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b360:	2300      	movs	r3, #0
 800b362:	e000      	b.n	800b366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b364:	2302      	movs	r3, #2
  }
}
 800b366:	4618      	mov	r0, r3
 800b368:	3714      	adds	r7, #20
 800b36a:	46bd      	mov	sp, r7
 800b36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b370:	4770      	bx	lr
	...

0800b374 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800b37c:	2300      	movs	r3, #0
 800b37e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d01e      	beq.n	800b3c4 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b386:	4b13      	ldr	r3, [pc, #76]	@ (800b3d4 <HAL_IPCC_Init+0x60>)
 800b388:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b390:	b2db      	uxtb	r3, r3
 800b392:	2b00      	cmp	r3, #0
 800b394:	d102      	bne.n	800b39c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7f7 fec0 	bl	800311c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f000 f85b 	bl	800b458 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f000 f82c 	bl	800b40c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b3c2:	e001      	b.n	800b3c8 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800b3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	58000c00 	.word	0x58000c00

0800b3d8 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b3d8:	b480      	push	{r7}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	60f8      	str	r0, [r7, #12]
 800b3e0:	60b9      	str	r1, [r7, #8]
 800b3e2:	4613      	mov	r3, r2
 800b3e4:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800b3e6:	bf00      	nop
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b085      	sub	sp, #20
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800b400:	bf00      	nop
 800b402:	3714      	adds	r7, #20
 800b404:	46bd      	mov	sp, r7
 800b406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40a:	4770      	bx	lr

0800b40c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b414:	2300      	movs	r3, #0
 800b416:	60fb      	str	r3, [r7, #12]
 800b418:	e00f      	b.n	800b43a <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	4a0b      	ldr	r2, [pc, #44]	@ (800b450 <IPCC_SetDefaultCallbacks+0x44>)
 800b424:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	3306      	adds	r3, #6
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	4413      	add	r3, r2
 800b430:	4a08      	ldr	r2, [pc, #32]	@ (800b454 <IPCC_SetDefaultCallbacks+0x48>)
 800b432:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	3301      	adds	r3, #1
 800b438:	60fb      	str	r3, [r7, #12]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	2b05      	cmp	r3, #5
 800b43e:	d9ec      	bls.n	800b41a <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800b440:	bf00      	nop
 800b442:	bf00      	nop
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
 800b44e:	bf00      	nop
 800b450:	0800b3d9 	.word	0x0800b3d9
 800b454:	0800b3f3 	.word	0x0800b3f3

0800b458 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800b46c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	223f      	movs	r2, #63	@ 0x3f
 800b472:	609a      	str	r2, [r3, #8]
}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b084      	sub	sp, #16
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b48e:	2301      	movs	r3, #1
 800b490:	e0c0      	b.n	800b614 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800b498:	b2db      	uxtb	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d106      	bne.n	800b4ac <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f7f7 ff04 	bl	80032b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2203      	movs	r2, #3
 800b4b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f002 fe31 	bl	800e120 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]
 800b4c2:	e03e      	b.n	800b542 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b4c4:	7bfa      	ldrb	r2, [r7, #15]
 800b4c6:	6879      	ldr	r1, [r7, #4]
 800b4c8:	4613      	mov	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	4413      	add	r3, r2
 800b4ce:	00db      	lsls	r3, r3, #3
 800b4d0:	440b      	add	r3, r1
 800b4d2:	3311      	adds	r3, #17
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b4d8:	7bfa      	ldrb	r2, [r7, #15]
 800b4da:	6879      	ldr	r1, [r7, #4]
 800b4dc:	4613      	mov	r3, r2
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	00db      	lsls	r3, r3, #3
 800b4e4:	440b      	add	r3, r1
 800b4e6:	3310      	adds	r3, #16
 800b4e8:	7bfa      	ldrb	r2, [r7, #15]
 800b4ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b4ec:	7bfa      	ldrb	r2, [r7, #15]
 800b4ee:	6879      	ldr	r1, [r7, #4]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	009b      	lsls	r3, r3, #2
 800b4f4:	4413      	add	r3, r2
 800b4f6:	00db      	lsls	r3, r3, #3
 800b4f8:	440b      	add	r3, r1
 800b4fa:	3313      	adds	r3, #19
 800b4fc:	2200      	movs	r2, #0
 800b4fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b500:	7bfa      	ldrb	r2, [r7, #15]
 800b502:	6879      	ldr	r1, [r7, #4]
 800b504:	4613      	mov	r3, r2
 800b506:	009b      	lsls	r3, r3, #2
 800b508:	4413      	add	r3, r2
 800b50a:	00db      	lsls	r3, r3, #3
 800b50c:	440b      	add	r3, r1
 800b50e:	3320      	adds	r3, #32
 800b510:	2200      	movs	r2, #0
 800b512:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b514:	7bfa      	ldrb	r2, [r7, #15]
 800b516:	6879      	ldr	r1, [r7, #4]
 800b518:	4613      	mov	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	00db      	lsls	r3, r3, #3
 800b520:	440b      	add	r3, r1
 800b522:	3324      	adds	r3, #36	@ 0x24
 800b524:	2200      	movs	r2, #0
 800b526:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b528:	7bfb      	ldrb	r3, [r7, #15]
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	1c5a      	adds	r2, r3, #1
 800b52e:	4613      	mov	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	4413      	add	r3, r2
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	440b      	add	r3, r1
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
 800b53e:	3301      	adds	r3, #1
 800b540:	73fb      	strb	r3, [r7, #15]
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	791b      	ldrb	r3, [r3, #4]
 800b546:	7bfa      	ldrb	r2, [r7, #15]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d3bb      	bcc.n	800b4c4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b54c:	2300      	movs	r3, #0
 800b54e:	73fb      	strb	r3, [r7, #15]
 800b550:	e044      	b.n	800b5dc <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b552:	7bfa      	ldrb	r2, [r7, #15]
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	4613      	mov	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	4413      	add	r3, r2
 800b55c:	00db      	lsls	r3, r3, #3
 800b55e:	440b      	add	r3, r1
 800b560:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800b564:	2200      	movs	r2, #0
 800b566:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b568:	7bfa      	ldrb	r2, [r7, #15]
 800b56a:	6879      	ldr	r1, [r7, #4]
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	00db      	lsls	r3, r3, #3
 800b574:	440b      	add	r3, r1
 800b576:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b57a:	7bfa      	ldrb	r2, [r7, #15]
 800b57c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b57e:	7bfa      	ldrb	r2, [r7, #15]
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	4613      	mov	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	4413      	add	r3, r2
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	440b      	add	r3, r1
 800b58c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800b590:	2200      	movs	r2, #0
 800b592:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b594:	7bfa      	ldrb	r2, [r7, #15]
 800b596:	6879      	ldr	r1, [r7, #4]
 800b598:	4613      	mov	r3, r2
 800b59a:	009b      	lsls	r3, r3, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	440b      	add	r3, r1
 800b5a2:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b5aa:	7bfa      	ldrb	r2, [r7, #15]
 800b5ac:	6879      	ldr	r1, [r7, #4]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	4413      	add	r3, r2
 800b5b4:	00db      	lsls	r3, r3, #3
 800b5b6:	440b      	add	r3, r1
 800b5b8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b5bc:	2200      	movs	r2, #0
 800b5be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b5c0:	7bfa      	ldrb	r2, [r7, #15]
 800b5c2:	6879      	ldr	r1, [r7, #4]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	4413      	add	r3, r2
 800b5ca:	00db      	lsls	r3, r3, #3
 800b5cc:	440b      	add	r3, r1
 800b5ce:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5d6:	7bfb      	ldrb	r3, [r7, #15]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	73fb      	strb	r3, [r7, #15]
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	791b      	ldrb	r3, [r3, #4]
 800b5e0:	7bfa      	ldrb	r2, [r7, #15]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d3b5      	bcc.n	800b552 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6818      	ldr	r0, [r3, #0]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3304      	adds	r3, #4
 800b5ee:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b5f2:	f002 fdb0 	bl	800e156 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	7a9b      	ldrb	r3, [r3, #10]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d102      	bne.n	800b612 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f805 	bl	800b61c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b640:	b29b      	uxth	r3, r3
 800b642:	f043 0301 	orr.w	r3, r3, #1
 800b646:	b29a      	uxth	r2, r3
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b654:	b29b      	uxth	r3, r3
 800b656:	f043 0302 	orr.w	r3, r3, #2
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b670:	b480      	push	{r7}
 800b672:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b674:	4b05      	ldr	r3, [pc, #20]	@ (800b68c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a04      	ldr	r2, [pc, #16]	@ (800b68c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b67a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b67e:	6013      	str	r3, [r2, #0]
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr
 800b68a:	bf00      	nop
 800b68c:	58000400 	.word	0x58000400

0800b690 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b690:	b480      	push	{r7}
 800b692:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b694:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <HAL_PWREx_GetVoltageRange+0x18>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	58000400 	.word	0x58000400

0800b6ac <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b6b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b6ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b6be:	d101      	bne.n	800b6c4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e000      	b.n	800b6c6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b6c4:	2300      	movs	r3, #0
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr

0800b6d0 <LL_RCC_HSE_Enable>:
{
 800b6d0:	b480      	push	{r7}
 800b6d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b6d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b6e2:	6013      	str	r3, [r2, #0]
}
 800b6e4:	bf00      	nop
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ec:	4770      	bx	lr

0800b6ee <LL_RCC_HSE_Disable>:
{
 800b6ee:	b480      	push	{r7}
 800b6f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b6f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b700:	6013      	str	r3, [r2, #0]
}
 800b702:	bf00      	nop
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <LL_RCC_HSE_IsReady>:
{
 800b70c:	b480      	push	{r7}
 800b70e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b71a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b71e:	d101      	bne.n	800b724 <LL_RCC_HSE_IsReady+0x18>
 800b720:	2301      	movs	r3, #1
 800b722:	e000      	b.n	800b726 <LL_RCC_HSE_IsReady+0x1a>
 800b724:	2300      	movs	r3, #0
}
 800b726:	4618      	mov	r0, r3
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <LL_RCC_HSI_Enable>:
{
 800b730:	b480      	push	{r7}
 800b732:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b734:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b73e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b742:	6013      	str	r3, [r2, #0]
}
 800b744:	bf00      	nop
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <LL_RCC_HSI_Disable>:
{
 800b74e:	b480      	push	{r7}
 800b750:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b752:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b75c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b760:	6013      	str	r3, [r2, #0]
}
 800b762:	bf00      	nop
 800b764:	46bd      	mov	sp, r7
 800b766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76a:	4770      	bx	lr

0800b76c <LL_RCC_HSI_IsReady>:
{
 800b76c:	b480      	push	{r7}
 800b76e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b77a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b77e:	d101      	bne.n	800b784 <LL_RCC_HSI_IsReady+0x18>
 800b780:	2301      	movs	r3, #1
 800b782:	e000      	b.n	800b786 <LL_RCC_HSI_IsReady+0x1a>
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b798:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b79c:	685b      	ldr	r3, [r3, #4]
 800b79e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	061b      	lsls	r3, r3, #24
 800b7a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	604b      	str	r3, [r1, #4]
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr

0800b7ba <LL_RCC_HSI48_Enable>:
{
 800b7ba:	b480      	push	{r7}
 800b7bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b7be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7ca:	f043 0301 	orr.w	r3, r3, #1
 800b7ce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b7d2:	bf00      	nop
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr

0800b7dc <LL_RCC_HSI48_Disable>:
{
 800b7dc:	b480      	push	{r7}
 800b7de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b7e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b7e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7ec:	f023 0301 	bic.w	r3, r3, #1
 800b7f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b7f4:	bf00      	nop
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <LL_RCC_HSI48_IsReady>:
{
 800b7fe:	b480      	push	{r7}
 800b800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b802:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b806:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b80a:	f003 0302 	and.w	r3, r3, #2
 800b80e:	2b02      	cmp	r3, #2
 800b810:	d101      	bne.n	800b816 <LL_RCC_HSI48_IsReady+0x18>
 800b812:	2301      	movs	r3, #1
 800b814:	e000      	b.n	800b818 <LL_RCC_HSI48_IsReady+0x1a>
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	46bd      	mov	sp, r7
 800b81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b820:	4770      	bx	lr

0800b822 <LL_RCC_LSE_Enable>:
{
 800b822:	b480      	push	{r7}
 800b824:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b826:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b82e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b83a:	bf00      	nop
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <LL_RCC_LSE_Disable>:
{
 800b844:	b480      	push	{r7}
 800b846:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b84c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b850:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b854:	f023 0301 	bic.w	r3, r3, #1
 800b858:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b85c:	bf00      	nop
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr

0800b866 <LL_RCC_LSE_EnableBypass>:
{
 800b866:	b480      	push	{r7}
 800b868:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b86a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b86e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b872:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b876:	f043 0304 	orr.w	r3, r3, #4
 800b87a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b87e:	bf00      	nop
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <LL_RCC_LSE_DisableBypass>:
{
 800b888:	b480      	push	{r7}
 800b88a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b88c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b898:	f023 0304 	bic.w	r3, r3, #4
 800b89c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b8a0:	bf00      	nop
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <LL_RCC_LSE_IsReady>:
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b8ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b8b6:	f003 0302 	and.w	r3, r3, #2
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d101      	bne.n	800b8c2 <LL_RCC_LSE_IsReady+0x18>
 800b8be:	2301      	movs	r3, #1
 800b8c0:	e000      	b.n	800b8c4 <LL_RCC_LSE_IsReady+0x1a>
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <LL_RCC_LSI1_Enable>:
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b8e6:	bf00      	nop
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <LL_RCC_LSI1_Disable>:
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b8f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b8fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b900:	f023 0301 	bic.w	r3, r3, #1
 800b904:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b908:	bf00      	nop
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <LL_RCC_LSI1_IsReady>:
{
 800b912:	b480      	push	{r7}
 800b914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b91a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b91e:	f003 0302 	and.w	r3, r3, #2
 800b922:	2b02      	cmp	r3, #2
 800b924:	d101      	bne.n	800b92a <LL_RCC_LSI1_IsReady+0x18>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <LL_RCC_LSI1_IsReady+0x1a>
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <LL_RCC_LSI2_Enable>:
{
 800b936:	b480      	push	{r7}
 800b938:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b93a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b93e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b946:	f043 0304 	orr.w	r3, r3, #4
 800b94a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b94e:	bf00      	nop
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <LL_RCC_LSI2_Disable>:
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b960:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b968:	f023 0304 	bic.w	r3, r3, #4
 800b96c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b970:	bf00      	nop
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LL_RCC_LSI2_IsReady>:
{
 800b97a:	b480      	push	{r7}
 800b97c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b97e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b982:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b986:	f003 0308 	and.w	r3, r3, #8
 800b98a:	2b08      	cmp	r3, #8
 800b98c:	d101      	bne.n	800b992 <LL_RCC_LSI2_IsReady+0x18>
 800b98e:	2301      	movs	r3, #1
 800b990:	e000      	b.n	800b994 <LL_RCC_LSI2_IsReady+0x1a>
 800b992:	2300      	movs	r3, #0
}
 800b994:	4618      	mov	r0, r3
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <LL_RCC_LSI2_SetTrimming>:
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b9a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ae:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	021b      	lsls	r3, r3, #8
 800b9b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <LL_RCC_MSI_Enable>:
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b9d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	6013      	str	r3, [r2, #0]
}
 800b9e0:	bf00      	nop
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <LL_RCC_MSI_Disable>:
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b9ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9f8:	f023 0301 	bic.w	r3, r3, #1
 800b9fc:	6013      	str	r3, [r2, #0]
}
 800b9fe:	bf00      	nop
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <LL_RCC_MSI_IsReady>:
{
 800ba08:	b480      	push	{r7}
 800ba0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800ba0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f003 0302 	and.w	r3, r3, #2
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	d101      	bne.n	800ba1e <LL_RCC_MSI_IsReady+0x16>
 800ba1a:	2301      	movs	r3, #1
 800ba1c:	e000      	b.n	800ba20 <LL_RCC_MSI_IsReady+0x18>
 800ba1e:	2300      	movs	r3, #0
}
 800ba20:	4618      	mov	r0, r3
 800ba22:	46bd      	mov	sp, r7
 800ba24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba28:	4770      	bx	lr

0800ba2a <LL_RCC_MSI_SetRange>:
{
 800ba2a:	b480      	push	{r7}
 800ba2c:	b083      	sub	sp, #12
 800ba2e:	af00      	add	r7, sp, #0
 800ba30:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800ba32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ba3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	4313      	orrs	r3, r2
 800ba44:	600b      	str	r3, [r1, #0]
}
 800ba46:	bf00      	nop
 800ba48:	370c      	adds	r7, #12
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <LL_RCC_MSI_GetRange>:
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800ba58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba62:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2bb0      	cmp	r3, #176	@ 0xb0
 800ba68:	d901      	bls.n	800ba6e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800ba6a:	23b0      	movs	r3, #176	@ 0xb0
 800ba6c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800ba6e:	687b      	ldr	r3, [r7, #4]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <LL_RCC_MSI_SetCalibTrimming>:
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800ba84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba96:	4313      	orrs	r3, r2
 800ba98:	604b      	str	r3, [r1, #4]
}
 800ba9a:	bf00      	nop
 800ba9c:	370c      	adds	r7, #12
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr

0800baa6 <LL_RCC_SetSysClkSource>:
{
 800baa6:	b480      	push	{r7}
 800baa8:	b083      	sub	sp, #12
 800baaa:	af00      	add	r7, sp, #0
 800baac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800baae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bab2:	689b      	ldr	r3, [r3, #8]
 800bab4:	f023 0203 	bic.w	r2, r3, #3
 800bab8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4313      	orrs	r3, r2
 800bac0:	608b      	str	r3, [r1, #8]
}
 800bac2:	bf00      	nop
 800bac4:	370c      	adds	r7, #12
 800bac6:	46bd      	mov	sp, r7
 800bac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bacc:	4770      	bx	lr

0800bace <LL_RCC_GetSysClkSource>:
{
 800bace:	b480      	push	{r7}
 800bad0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bad2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f003 030c 	and.w	r3, r3, #12
}
 800badc:	4618      	mov	r0, r3
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <LL_RCC_SetAHBPrescaler>:
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800baee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800baf8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4313      	orrs	r3, r2
 800bb00:	608b      	str	r3, [r1, #8]
}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <LL_C2_RCC_SetAHBPrescaler>:
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bb16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bb1e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bb2e:	bf00      	nop
 800bb30:	370c      	adds	r7, #12
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <LL_RCC_SetAHB4Prescaler>:
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b083      	sub	sp, #12
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bb42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bb4a:	f023 020f 	bic.w	r2, r3, #15
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	091b      	lsrs	r3, r3, #4
 800bb52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb56:	4313      	orrs	r3, r2
 800bb58:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bb5c:	bf00      	nop
 800bb5e:	370c      	adds	r7, #12
 800bb60:	46bd      	mov	sp, r7
 800bb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb66:	4770      	bx	lr

0800bb68 <LL_RCC_SetAPB1Prescaler>:
{
 800bb68:	b480      	push	{r7}
 800bb6a:	b083      	sub	sp, #12
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bb70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bb7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4313      	orrs	r3, r2
 800bb82:	608b      	str	r3, [r1, #8]
}
 800bb84:	bf00      	nop
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <LL_RCC_SetAPB2Prescaler>:
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bba2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	608b      	str	r3, [r1, #8]
}
 800bbac:	bf00      	nop
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb6:	4770      	bx	lr

0800bbb8 <LL_RCC_GetAHBPrescaler>:
{
 800bbb8:	b480      	push	{r7}
 800bbba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bbbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc0:	689b      	ldr	r3, [r3, #8]
 800bbc2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <LL_RCC_GetAHB4Prescaler>:
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bbd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbd8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bbdc:	011b      	lsls	r3, r3, #4
 800bbde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <LL_RCC_GetAPB1Prescaler>:
{
 800bbec:	b480      	push	{r7}
 800bbee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bbf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbf4:	689b      	ldr	r3, [r3, #8]
 800bbf6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <LL_RCC_GetAPB2Prescaler>:
{
 800bc04:	b480      	push	{r7}
 800bc06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bc08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc0c:	689b      	ldr	r3, [r3, #8]
 800bc0e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <LL_RCC_PLL_Enable>:
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bc20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bc2e:	6013      	str	r3, [r2, #0]
}
 800bc30:	bf00      	nop
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <LL_RCC_PLL_Disable>:
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bc3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bc4c:	6013      	str	r3, [r2, #0]
}
 800bc4e:	bf00      	nop
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr

0800bc58 <LL_RCC_PLL_IsReady>:
{
 800bc58:	b480      	push	{r7}
 800bc5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bc5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc6a:	d101      	bne.n	800bc70 <LL_RCC_PLL_IsReady+0x18>
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	e000      	b.n	800bc72 <LL_RCC_PLL_IsReady+0x1a>
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <LL_RCC_PLL_GetN>:
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bc80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	0a1b      	lsrs	r3, r3, #8
 800bc88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc94:	4770      	bx	lr

0800bc96 <LL_RCC_PLL_GetR>:
{
 800bc96:	b480      	push	{r7}
 800bc98:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bc9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <LL_RCC_PLL_GetDivider>:
{
 800bcae:	b480      	push	{r7}
 800bcb0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bcb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb6:	68db      	ldr	r3, [r3, #12]
 800bcb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <LL_RCC_PLL_GetMainSource>:
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bcca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	f003 0303 	and.w	r3, r3, #3
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <LL_RCC_IsActiveFlag_HPRE>:
{
 800bcde:	b480      	push	{r7}
 800bce0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bcec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcf0:	d101      	bne.n	800bcf6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800bcf2:	2301      	movs	r3, #1
 800bcf4:	e000      	b.n	800bcf8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800bd02:	b480      	push	{r7}
 800bd04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800bd06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd0a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd16:	d101      	bne.n	800bd1c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e000      	b.n	800bd1e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800bd1c:	2300      	movs	r3, #0
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	46bd      	mov	sp, r7
 800bd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd26:	4770      	bx	lr

0800bd28 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800bd2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd30:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bd34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bd38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd3c:	d101      	bne.n	800bd42 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800bd3e:	2301      	movs	r3, #1
 800bd40:	e000      	b.n	800bd44 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <LL_RCC_IsActiveFlag_PPRE1>:
{
 800bd4e:	b480      	push	{r7}
 800bd50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800bd52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd56:	689b      	ldr	r3, [r3, #8]
 800bd58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd60:	d101      	bne.n	800bd66 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800bd62:	2301      	movs	r3, #1
 800bd64:	e000      	b.n	800bd68 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800bd66:	2300      	movs	r3, #0
}
 800bd68:	4618      	mov	r0, r3
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd70:	4770      	bx	lr

0800bd72 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800bd72:	b480      	push	{r7}
 800bd74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800bd76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bd80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd84:	d101      	bne.n	800bd8a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800bd86:	2301      	movs	r3, #1
 800bd88:	e000      	b.n	800bd8c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
	...

0800bd98 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bd98:	b590      	push	{r4, r7, lr}
 800bd9a:	b08d      	sub	sp, #52	@ 0x34
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e363      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	f000 808d 	beq.w	800bed2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bdb8:	f7ff fe89 	bl	800bace <LL_RCC_GetSysClkSource>
 800bdbc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bdbe:	f7ff ff82 	bl	800bcc6 <LL_RCC_PLL_GetMainSource>
 800bdc2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d005      	beq.n	800bdd6 <HAL_RCC_OscConfig+0x3e>
 800bdca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdcc:	2b0c      	cmp	r3, #12
 800bdce:	d147      	bne.n	800be60 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bdd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd2:	2b01      	cmp	r3, #1
 800bdd4:	d144      	bne.n	800be60 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	69db      	ldr	r3, [r3, #28]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d101      	bne.n	800bde2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	e347      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bde6:	f7ff fe34 	bl	800ba52 <LL_RCC_MSI_GetRange>
 800bdea:	4603      	mov	r3, r0
 800bdec:	429c      	cmp	r4, r3
 800bdee:	d914      	bls.n	800be1a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 fd2f 	bl	800c858 <RCC_SetFlashLatencyFromMSIRange>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d001      	beq.n	800be04 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	e336      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be08:	4618      	mov	r0, r3
 800be0a:	f7ff fe0e 	bl	800ba2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6a1b      	ldr	r3, [r3, #32]
 800be12:	4618      	mov	r0, r3
 800be14:	f7ff fe32 	bl	800ba7c <LL_RCC_MSI_SetCalibTrimming>
 800be18:	e013      	b.n	800be42 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be1e:	4618      	mov	r0, r3
 800be20:	f7ff fe03 	bl	800ba2a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6a1b      	ldr	r3, [r3, #32]
 800be28:	4618      	mov	r0, r3
 800be2a:	f7ff fe27 	bl	800ba7c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be32:	4618      	mov	r0, r3
 800be34:	f000 fd10 	bl	800c858 <RCC_SetFlashLatencyFromMSIRange>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d001      	beq.n	800be42 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800be3e:	2301      	movs	r3, #1
 800be40:	e317      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800be42:	f000 fcc9 	bl	800c7d8 <HAL_RCC_GetHCLKFreq>
 800be46:	4603      	mov	r3, r0
 800be48:	4aa4      	ldr	r2, [pc, #656]	@ (800c0dc <HAL_RCC_OscConfig+0x344>)
 800be4a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800be4c:	4ba4      	ldr	r3, [pc, #656]	@ (800c0e0 <HAL_RCC_OscConfig+0x348>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4618      	mov	r0, r3
 800be52:	f7fc fbdd 	bl	8008610 <HAL_InitTick>
 800be56:	4603      	mov	r3, r0
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d039      	beq.n	800bed0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800be5c:	2301      	movs	r3, #1
 800be5e:	e308      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	69db      	ldr	r3, [r3, #28]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d01e      	beq.n	800bea6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800be68:	f7ff fdb0 	bl	800b9cc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800be6c:	f7fc fc1e 	bl	80086ac <HAL_GetTick>
 800be70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800be72:	e008      	b.n	800be86 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800be74:	f7fc fc1a 	bl	80086ac <HAL_GetTick>
 800be78:	4602      	mov	r2, r0
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	1ad3      	subs	r3, r2, r3
 800be7e:	2b02      	cmp	r3, #2
 800be80:	d901      	bls.n	800be86 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800be82:	2303      	movs	r3, #3
 800be84:	e2f5      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800be86:	f7ff fdbf 	bl	800ba08 <LL_RCC_MSI_IsReady>
 800be8a:	4603      	mov	r3, r0
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d0f1      	beq.n	800be74 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be94:	4618      	mov	r0, r3
 800be96:	f7ff fdc8 	bl	800ba2a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7ff fdec 	bl	800ba7c <LL_RCC_MSI_SetCalibTrimming>
 800bea4:	e015      	b.n	800bed2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bea6:	f7ff fda0 	bl	800b9ea <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800beaa:	f7fc fbff 	bl	80086ac <HAL_GetTick>
 800beae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800beb0:	e008      	b.n	800bec4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800beb2:	f7fc fbfb 	bl	80086ac <HAL_GetTick>
 800beb6:	4602      	mov	r2, r0
 800beb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beba:	1ad3      	subs	r3, r2, r3
 800bebc:	2b02      	cmp	r3, #2
 800bebe:	d901      	bls.n	800bec4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e2d6      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bec4:	f7ff fda0 	bl	800ba08 <LL_RCC_MSI_IsReady>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1f1      	bne.n	800beb2 <HAL_RCC_OscConfig+0x11a>
 800bece:	e000      	b.n	800bed2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bed0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f003 0301 	and.w	r3, r3, #1
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d047      	beq.n	800bf6e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bede:	f7ff fdf6 	bl	800bace <LL_RCC_GetSysClkSource>
 800bee2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bee4:	f7ff feef 	bl	800bcc6 <LL_RCC_PLL_GetMainSource>
 800bee8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	2b08      	cmp	r3, #8
 800beee:	d005      	beq.n	800befc <HAL_RCC_OscConfig+0x164>
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	2b0c      	cmp	r3, #12
 800bef4:	d108      	bne.n	800bf08 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	2b03      	cmp	r3, #3
 800befa:	d105      	bne.n	800bf08 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d134      	bne.n	800bf6e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e2b4      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685b      	ldr	r3, [r3, #4]
 800bf0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf10:	d102      	bne.n	800bf18 <HAL_RCC_OscConfig+0x180>
 800bf12:	f7ff fbdd 	bl	800b6d0 <LL_RCC_HSE_Enable>
 800bf16:	e001      	b.n	800bf1c <HAL_RCC_OscConfig+0x184>
 800bf18:	f7ff fbe9 	bl	800b6ee <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	685b      	ldr	r3, [r3, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d012      	beq.n	800bf4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf24:	f7fc fbc2 	bl	80086ac <HAL_GetTick>
 800bf28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf2a:	e008      	b.n	800bf3e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf2c:	f7fc fbbe 	bl	80086ac <HAL_GetTick>
 800bf30:	4602      	mov	r2, r0
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	2b64      	cmp	r3, #100	@ 0x64
 800bf38:	d901      	bls.n	800bf3e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800bf3a:	2303      	movs	r3, #3
 800bf3c:	e299      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800bf3e:	f7ff fbe5 	bl	800b70c <LL_RCC_HSE_IsReady>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d0f1      	beq.n	800bf2c <HAL_RCC_OscConfig+0x194>
 800bf48:	e011      	b.n	800bf6e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf4a:	f7fc fbaf 	bl	80086ac <HAL_GetTick>
 800bf4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800bf50:	e008      	b.n	800bf64 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bf52:	f7fc fbab 	bl	80086ac <HAL_GetTick>
 800bf56:	4602      	mov	r2, r0
 800bf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5a:	1ad3      	subs	r3, r2, r3
 800bf5c:	2b64      	cmp	r3, #100	@ 0x64
 800bf5e:	d901      	bls.n	800bf64 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800bf60:	2303      	movs	r3, #3
 800bf62:	e286      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800bf64:	f7ff fbd2 	bl	800b70c <LL_RCC_HSE_IsReady>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f1      	bne.n	800bf52 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	f003 0302 	and.w	r3, r3, #2
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d04c      	beq.n	800c014 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf7a:	f7ff fda8 	bl	800bace <LL_RCC_GetSysClkSource>
 800bf7e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bf80:	f7ff fea1 	bl	800bcc6 <LL_RCC_PLL_GetMainSource>
 800bf84:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800bf86:	69bb      	ldr	r3, [r7, #24]
 800bf88:	2b04      	cmp	r3, #4
 800bf8a:	d005      	beq.n	800bf98 <HAL_RCC_OscConfig+0x200>
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2b0c      	cmp	r3, #12
 800bf90:	d10e      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	d10b      	bne.n	800bfb0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	e266      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	691b      	ldr	r3, [r3, #16]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fbf1 	bl	800b790 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800bfae:	e031      	b.n	800c014 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d019      	beq.n	800bfec <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bfb8:	f7ff fbba 	bl	800b730 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfbc:	f7fc fb76 	bl	80086ac <HAL_GetTick>
 800bfc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800bfc2:	e008      	b.n	800bfd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bfc4:	f7fc fb72 	bl	80086ac <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d901      	bls.n	800bfd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e24d      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800bfd6:	f7ff fbc9 	bl	800b76c <LL_RCC_HSI_IsReady>
 800bfda:	4603      	mov	r3, r0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d0f1      	beq.n	800bfc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7ff fbd3 	bl	800b790 <LL_RCC_HSI_SetCalibTrimming>
 800bfea:	e013      	b.n	800c014 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bfec:	f7ff fbaf 	bl	800b74e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bff0:	f7fc fb5c 	bl	80086ac <HAL_GetTick>
 800bff4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800bff6:	e008      	b.n	800c00a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bff8:	f7fc fb58 	bl	80086ac <HAL_GetTick>
 800bffc:	4602      	mov	r2, r0
 800bffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c000:	1ad3      	subs	r3, r2, r3
 800c002:	2b02      	cmp	r3, #2
 800c004:	d901      	bls.n	800c00a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e233      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c00a:	f7ff fbaf 	bl	800b76c <LL_RCC_HSI_IsReady>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d1f1      	bne.n	800bff8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f003 0308 	and.w	r3, r3, #8
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d106      	bne.n	800c02e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c028:	2b00      	cmp	r3, #0
 800c02a:	f000 80a3 	beq.w	800c174 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d076      	beq.n	800c124 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0310 	and.w	r3, r3, #16
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d046      	beq.n	800c0d0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c042:	f7ff fc66 	bl	800b912 <LL_RCC_LSI1_IsReady>
 800c046:	4603      	mov	r3, r0
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d113      	bne.n	800c074 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c04c:	f7ff fc3f 	bl	800b8ce <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c050:	f7fc fb2c 	bl	80086ac <HAL_GetTick>
 800c054:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c056:	e008      	b.n	800c06a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c058:	f7fc fb28 	bl	80086ac <HAL_GetTick>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	2b02      	cmp	r3, #2
 800c064:	d901      	bls.n	800c06a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c066:	2303      	movs	r3, #3
 800c068:	e203      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c06a:	f7ff fc52 	bl	800b912 <LL_RCC_LSI1_IsReady>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0f1      	beq.n	800c058 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c074:	f7ff fc5f 	bl	800b936 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c078:	f7fc fb18 	bl	80086ac <HAL_GetTick>
 800c07c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c07e:	e008      	b.n	800c092 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c080:	f7fc fb14 	bl	80086ac <HAL_GetTick>
 800c084:	4602      	mov	r2, r0
 800c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	2b03      	cmp	r3, #3
 800c08c:	d901      	bls.n	800c092 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e1ef      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c092:	f7ff fc72 	bl	800b97a <LL_RCC_LSI2_IsReady>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d0f1      	beq.n	800c080 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	699b      	ldr	r3, [r3, #24]
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7ff fc7c 	bl	800b99e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c0a6:	f7ff fc23 	bl	800b8f0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0aa:	f7fc faff 	bl	80086ac <HAL_GetTick>
 800c0ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c0b0:	e008      	b.n	800c0c4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0b2:	f7fc fafb 	bl	80086ac <HAL_GetTick>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ba:	1ad3      	subs	r3, r2, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d901      	bls.n	800c0c4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e1d6      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c0c4:	f7ff fc25 	bl	800b912 <LL_RCC_LSI1_IsReady>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d1f1      	bne.n	800c0b2 <HAL_RCC_OscConfig+0x31a>
 800c0ce:	e051      	b.n	800c174 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c0d0:	f7ff fbfd 	bl	800b8ce <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d4:	f7fc faea 	bl	80086ac <HAL_GetTick>
 800c0d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c0da:	e00c      	b.n	800c0f6 <HAL_RCC_OscConfig+0x35e>
 800c0dc:	20000008 	.word	0x20000008
 800c0e0:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c0e4:	f7fc fae2 	bl	80086ac <HAL_GetTick>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d901      	bls.n	800c0f6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e1bd      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c0f6:	f7ff fc0c 	bl	800b912 <LL_RCC_LSI1_IsReady>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d0f1      	beq.n	800c0e4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c100:	f7ff fc2a 	bl	800b958 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c104:	e008      	b.n	800c118 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c106:	f7fc fad1 	bl	80086ac <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	2b03      	cmp	r3, #3
 800c112:	d901      	bls.n	800c118 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c114:	2303      	movs	r3, #3
 800c116:	e1ac      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c118:	f7ff fc2f 	bl	800b97a <LL_RCC_LSI2_IsReady>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d1f1      	bne.n	800c106 <HAL_RCC_OscConfig+0x36e>
 800c122:	e027      	b.n	800c174 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c124:	f7ff fc18 	bl	800b958 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c128:	f7fc fac0 	bl	80086ac <HAL_GetTick>
 800c12c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c12e:	e008      	b.n	800c142 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c130:	f7fc fabc 	bl	80086ac <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	2b03      	cmp	r3, #3
 800c13c:	d901      	bls.n	800c142 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	e197      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c142:	f7ff fc1a 	bl	800b97a <LL_RCC_LSI2_IsReady>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1f1      	bne.n	800c130 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c14c:	f7ff fbd0 	bl	800b8f0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c150:	f7fc faac 	bl	80086ac <HAL_GetTick>
 800c154:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c156:	e008      	b.n	800c16a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c158:	f7fc faa8 	bl	80086ac <HAL_GetTick>
 800c15c:	4602      	mov	r2, r0
 800c15e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c160:	1ad3      	subs	r3, r2, r3
 800c162:	2b02      	cmp	r3, #2
 800c164:	d901      	bls.n	800c16a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c166:	2303      	movs	r3, #3
 800c168:	e183      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c16a:	f7ff fbd2 	bl	800b912 <LL_RCC_LSI1_IsReady>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b00      	cmp	r3, #0
 800c172:	d1f1      	bne.n	800c158 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f003 0304 	and.w	r3, r3, #4
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d05b      	beq.n	800c238 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c180:	4ba7      	ldr	r3, [pc, #668]	@ (800c420 <HAL_RCC_OscConfig+0x688>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d114      	bne.n	800c1b6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c18c:	f7ff fa70 	bl	800b670 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c190:	f7fc fa8c 	bl	80086ac <HAL_GetTick>
 800c194:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c196:	e008      	b.n	800c1aa <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c198:	f7fc fa88 	bl	80086ac <HAL_GetTick>
 800c19c:	4602      	mov	r2, r0
 800c19e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d901      	bls.n	800c1aa <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c1a6:	2303      	movs	r3, #3
 800c1a8:	e163      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c1aa:	4b9d      	ldr	r3, [pc, #628]	@ (800c420 <HAL_RCC_OscConfig+0x688>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d0f0      	beq.n	800c198 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	2b01      	cmp	r3, #1
 800c1bc:	d102      	bne.n	800c1c4 <HAL_RCC_OscConfig+0x42c>
 800c1be:	f7ff fb30 	bl	800b822 <LL_RCC_LSE_Enable>
 800c1c2:	e00c      	b.n	800c1de <HAL_RCC_OscConfig+0x446>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	2b05      	cmp	r3, #5
 800c1ca:	d104      	bne.n	800c1d6 <HAL_RCC_OscConfig+0x43e>
 800c1cc:	f7ff fb4b 	bl	800b866 <LL_RCC_LSE_EnableBypass>
 800c1d0:	f7ff fb27 	bl	800b822 <LL_RCC_LSE_Enable>
 800c1d4:	e003      	b.n	800c1de <HAL_RCC_OscConfig+0x446>
 800c1d6:	f7ff fb35 	bl	800b844 <LL_RCC_LSE_Disable>
 800c1da:	f7ff fb55 	bl	800b888 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	689b      	ldr	r3, [r3, #8]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d014      	beq.n	800c210 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c1e6:	f7fc fa61 	bl	80086ac <HAL_GetTick>
 800c1ea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c1ec:	e00a      	b.n	800c204 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c1ee:	f7fc fa5d 	bl	80086ac <HAL_GetTick>
 800c1f2:	4602      	mov	r2, r0
 800c1f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1f6:	1ad3      	subs	r3, r2, r3
 800c1f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1fc:	4293      	cmp	r3, r2
 800c1fe:	d901      	bls.n	800c204 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c200:	2303      	movs	r3, #3
 800c202:	e136      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c204:	f7ff fb51 	bl	800b8aa <LL_RCC_LSE_IsReady>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d0ef      	beq.n	800c1ee <HAL_RCC_OscConfig+0x456>
 800c20e:	e013      	b.n	800c238 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c210:	f7fc fa4c 	bl	80086ac <HAL_GetTick>
 800c214:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c216:	e00a      	b.n	800c22e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c218:	f7fc fa48 	bl	80086ac <HAL_GetTick>
 800c21c:	4602      	mov	r2, r0
 800c21e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c220:	1ad3      	subs	r3, r2, r3
 800c222:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c226:	4293      	cmp	r3, r2
 800c228:	d901      	bls.n	800c22e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e121      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c22e:	f7ff fb3c 	bl	800b8aa <LL_RCC_LSE_IsReady>
 800c232:	4603      	mov	r3, r0
 800c234:	2b00      	cmp	r3, #0
 800c236:	d1ef      	bne.n	800c218 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c240:	2b00      	cmp	r3, #0
 800c242:	d02c      	beq.n	800c29e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d014      	beq.n	800c276 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c24c:	f7ff fab5 	bl	800b7ba <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c250:	f7fc fa2c 	bl	80086ac <HAL_GetTick>
 800c254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c256:	e008      	b.n	800c26a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c258:	f7fc fa28 	bl	80086ac <HAL_GetTick>
 800c25c:	4602      	mov	r2, r0
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	1ad3      	subs	r3, r2, r3
 800c262:	2b02      	cmp	r3, #2
 800c264:	d901      	bls.n	800c26a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c266:	2303      	movs	r3, #3
 800c268:	e103      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c26a:	f7ff fac8 	bl	800b7fe <LL_RCC_HSI48_IsReady>
 800c26e:	4603      	mov	r3, r0
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0f1      	beq.n	800c258 <HAL_RCC_OscConfig+0x4c0>
 800c274:	e013      	b.n	800c29e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c276:	f7ff fab1 	bl	800b7dc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c27a:	f7fc fa17 	bl	80086ac <HAL_GetTick>
 800c27e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c280:	e008      	b.n	800c294 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c282:	f7fc fa13 	bl	80086ac <HAL_GetTick>
 800c286:	4602      	mov	r2, r0
 800c288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28a:	1ad3      	subs	r3, r2, r3
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d901      	bls.n	800c294 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c290:	2303      	movs	r3, #3
 800c292:	e0ee      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c294:	f7ff fab3 	bl	800b7fe <LL_RCC_HSI48_IsReady>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1f1      	bne.n	800c282 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	f000 80e4 	beq.w	800c470 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2a8:	f7ff fc11 	bl	800bace <LL_RCC_GetSysClkSource>
 800c2ac:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c2ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ba:	2b02      	cmp	r3, #2
 800c2bc:	f040 80b4 	bne.w	800c428 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f003 0203 	and.w	r2, r3, #3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d123      	bne.n	800c316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2d8:	429a      	cmp	r2, r3
 800c2da:	d11c      	bne.n	800c316 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	0a1b      	lsrs	r3, r3, #8
 800c2e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d114      	bne.n	800c316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d10d      	bne.n	800c316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c304:	429a      	cmp	r2, r3
 800c306:	d106      	bne.n	800c316 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c312:	429a      	cmp	r2, r3
 800c314:	d05d      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c316:	693b      	ldr	r3, [r7, #16]
 800c318:	2b0c      	cmp	r3, #12
 800c31a:	d058      	beq.n	800c3ce <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c31c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e0a1      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c32e:	f7ff fc84 	bl	800bc3a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c332:	f7fc f9bb 	bl	80086ac <HAL_GetTick>
 800c336:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c338:	e008      	b.n	800c34c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c33a:	f7fc f9b7 	bl	80086ac <HAL_GetTick>
 800c33e:	4602      	mov	r2, r0
 800c340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c342:	1ad3      	subs	r3, r2, r3
 800c344:	2b02      	cmp	r3, #2
 800c346:	d901      	bls.n	800c34c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c348:	2303      	movs	r3, #3
 800c34a:	e092      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c34c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c356:	2b00      	cmp	r3, #0
 800c358:	d1ef      	bne.n	800c33a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c35a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c35e:	68da      	ldr	r2, [r3, #12]
 800c360:	4b30      	ldr	r3, [pc, #192]	@ (800c424 <HAL_RCC_OscConfig+0x68c>)
 800c362:	4013      	ands	r3, r2
 800c364:	687a      	ldr	r2, [r7, #4]
 800c366:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c36c:	4311      	orrs	r1, r2
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c372:	0212      	lsls	r2, r2, #8
 800c374:	4311      	orrs	r1, r2
 800c376:	687a      	ldr	r2, [r7, #4]
 800c378:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c37a:	4311      	orrs	r1, r2
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c380:	4311      	orrs	r1, r2
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c386:	430a      	orrs	r2, r1
 800c388:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c38c:	4313      	orrs	r3, r2
 800c38e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c390:	f7ff fc44 	bl	800bc1c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c394:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c398:	68db      	ldr	r3, [r3, #12]
 800c39a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c39e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c3a4:	f7fc f982 	bl	80086ac <HAL_GetTick>
 800c3a8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3aa:	e008      	b.n	800c3be <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3ac:	f7fc f97e 	bl	80086ac <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b02      	cmp	r3, #2
 800c3b8:	d901      	bls.n	800c3be <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e059      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d0ef      	beq.n	800c3ac <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c3cc:	e050      	b.n	800c470 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	e04f      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d147      	bne.n	800c470 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c3e0:	f7ff fc1c 	bl	800bc1c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c3e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3e8:	68db      	ldr	r3, [r3, #12]
 800c3ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c3ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c3f4:	f7fc f95a 	bl	80086ac <HAL_GetTick>
 800c3f8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c3fa:	e008      	b.n	800c40e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3fc:	f7fc f956 	bl	80086ac <HAL_GetTick>
 800c400:	4602      	mov	r2, r0
 800c402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c404:	1ad3      	subs	r3, r2, r3
 800c406:	2b02      	cmp	r3, #2
 800c408:	d901      	bls.n	800c40e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c40a:	2303      	movs	r3, #3
 800c40c:	e031      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c40e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d0ef      	beq.n	800c3fc <HAL_RCC_OscConfig+0x664>
 800c41c:	e028      	b.n	800c470 <HAL_RCC_OscConfig+0x6d8>
 800c41e:	bf00      	nop
 800c420:	58000400 	.word	0x58000400
 800c424:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2b0c      	cmp	r3, #12
 800c42c:	d01e      	beq.n	800c46c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c42e:	f7ff fc04 	bl	800bc3a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c432:	f7fc f93b 	bl	80086ac <HAL_GetTick>
 800c436:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c438:	e008      	b.n	800c44c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c43a:	f7fc f937 	bl	80086ac <HAL_GetTick>
 800c43e:	4602      	mov	r2, r0
 800c440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c442:	1ad3      	subs	r3, r2, r3
 800c444:	2b02      	cmp	r3, #2
 800c446:	d901      	bls.n	800c44c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c448:	2303      	movs	r3, #3
 800c44a:	e012      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1ef      	bne.n	800c43a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c45a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45e:	68da      	ldr	r2, [r3, #12]
 800c460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c464:	4b05      	ldr	r3, [pc, #20]	@ (800c47c <HAL_RCC_OscConfig+0x6e4>)
 800c466:	4013      	ands	r3, r2
 800c468:	60cb      	str	r3, [r1, #12]
 800c46a:	e001      	b.n	800c470 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c46c:	2301      	movs	r3, #1
 800c46e:	e000      	b.n	800c472 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c470:	2300      	movs	r3, #0
}
 800c472:	4618      	mov	r0, r3
 800c474:	3734      	adds	r7, #52	@ 0x34
 800c476:	46bd      	mov	sp, r7
 800c478:	bd90      	pop	{r4, r7, pc}
 800c47a:	bf00      	nop
 800c47c:	eefefffc 	.word	0xeefefffc

0800c480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c490:	2301      	movs	r3, #1
 800c492:	e12d      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c494:	4b98      	ldr	r3, [pc, #608]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f003 0307 	and.w	r3, r3, #7
 800c49c:	683a      	ldr	r2, [r7, #0]
 800c49e:	429a      	cmp	r2, r3
 800c4a0:	d91b      	bls.n	800c4da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c4a2:	4b95      	ldr	r3, [pc, #596]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	f023 0207 	bic.w	r2, r3, #7
 800c4aa:	4993      	ldr	r1, [pc, #588]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4b2:	f7fc f8fb 	bl	80086ac <HAL_GetTick>
 800c4b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4b8:	e008      	b.n	800c4cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c4ba:	f7fc f8f7 	bl	80086ac <HAL_GetTick>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	1ad3      	subs	r3, r2, r3
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	d901      	bls.n	800c4cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e111      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c4cc:	4b8a      	ldr	r3, [pc, #552]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 0307 	and.w	r3, r3, #7
 800c4d4:	683a      	ldr	r2, [r7, #0]
 800c4d6:	429a      	cmp	r2, r3
 800c4d8:	d1ef      	bne.n	800c4ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f003 0302 	and.w	r3, r3, #2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d016      	beq.n	800c514 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7ff fafb 	bl	800bae6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c4f0:	f7fc f8dc 	bl	80086ac <HAL_GetTick>
 800c4f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c4f6:	e008      	b.n	800c50a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c4f8:	f7fc f8d8 	bl	80086ac <HAL_GetTick>
 800c4fc:	4602      	mov	r2, r0
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	2b02      	cmp	r3, #2
 800c504:	d901      	bls.n	800c50a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e0f2      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c50a:	f7ff fbe8 	bl	800bcde <LL_RCC_IsActiveFlag_HPRE>
 800c50e:	4603      	mov	r3, r0
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0f1      	beq.n	800c4f8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f003 0320 	and.w	r3, r3, #32
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d016      	beq.n	800c54e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	695b      	ldr	r3, [r3, #20]
 800c524:	4618      	mov	r0, r3
 800c526:	f7ff faf2 	bl	800bb0e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c52a:	f7fc f8bf 	bl	80086ac <HAL_GetTick>
 800c52e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c530:	e008      	b.n	800c544 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c532:	f7fc f8bb 	bl	80086ac <HAL_GetTick>
 800c536:	4602      	mov	r2, r0
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	1ad3      	subs	r3, r2, r3
 800c53c:	2b02      	cmp	r3, #2
 800c53e:	d901      	bls.n	800c544 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c540:	2303      	movs	r3, #3
 800c542:	e0d5      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c544:	f7ff fbdd 	bl	800bd02 <LL_RCC_IsActiveFlag_C2HPRE>
 800c548:	4603      	mov	r3, r0
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d0f1      	beq.n	800c532 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c556:	2b00      	cmp	r3, #0
 800c558:	d016      	beq.n	800c588 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	4618      	mov	r0, r3
 800c560:	f7ff faeb 	bl	800bb3a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c564:	f7fc f8a2 	bl	80086ac <HAL_GetTick>
 800c568:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c56a:	e008      	b.n	800c57e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c56c:	f7fc f89e 	bl	80086ac <HAL_GetTick>
 800c570:	4602      	mov	r2, r0
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	2b02      	cmp	r3, #2
 800c578:	d901      	bls.n	800c57e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c57a:	2303      	movs	r3, #3
 800c57c:	e0b8      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c57e:	f7ff fbd3 	bl	800bd28 <LL_RCC_IsActiveFlag_SHDHPRE>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d0f1      	beq.n	800c56c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d016      	beq.n	800c5c2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4618      	mov	r0, r3
 800c59a:	f7ff fae5 	bl	800bb68 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c59e:	f7fc f885 	bl	80086ac <HAL_GetTick>
 800c5a2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c5a4:	e008      	b.n	800c5b8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5a6:	f7fc f881 	bl	80086ac <HAL_GetTick>
 800c5aa:	4602      	mov	r2, r0
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	1ad3      	subs	r3, r2, r3
 800c5b0:	2b02      	cmp	r3, #2
 800c5b2:	d901      	bls.n	800c5b8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c5b4:	2303      	movs	r3, #3
 800c5b6:	e09b      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c5b8:	f7ff fbc9 	bl	800bd4e <LL_RCC_IsActiveFlag_PPRE1>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d0f1      	beq.n	800c5a6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f003 0308 	and.w	r3, r3, #8
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d017      	beq.n	800c5fe <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	00db      	lsls	r3, r3, #3
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff fadb 	bl	800bb90 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c5da:	f7fc f867 	bl	80086ac <HAL_GetTick>
 800c5de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c5e0:	e008      	b.n	800c5f4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c5e2:	f7fc f863 	bl	80086ac <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e07d      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c5f4:	f7ff fbbd 	bl	800bd72 <LL_RCC_IsActiveFlag_PPRE2>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d0f1      	beq.n	800c5e2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	f003 0301 	and.w	r3, r3, #1
 800c606:	2b00      	cmp	r3, #0
 800c608:	d043      	beq.n	800c692 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	2b02      	cmp	r3, #2
 800c610:	d106      	bne.n	800c620 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c612:	f7ff f87b 	bl	800b70c <LL_RCC_HSE_IsReady>
 800c616:	4603      	mov	r3, r0
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d11e      	bne.n	800c65a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c61c:	2301      	movs	r3, #1
 800c61e:	e067      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d106      	bne.n	800c636 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c628:	f7ff fb16 	bl	800bc58 <LL_RCC_PLL_IsReady>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d113      	bne.n	800c65a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c632:	2301      	movs	r3, #1
 800c634:	e05c      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	685b      	ldr	r3, [r3, #4]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d106      	bne.n	800c64c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c63e:	f7ff f9e3 	bl	800ba08 <LL_RCC_MSI_IsReady>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d108      	bne.n	800c65a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e051      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c64c:	f7ff f88e 	bl	800b76c <LL_RCC_HSI_IsReady>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c656:	2301      	movs	r3, #1
 800c658:	e04a      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff fa21 	bl	800baa6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c664:	f7fc f822 	bl	80086ac <HAL_GetTick>
 800c668:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c66a:	e00a      	b.n	800c682 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c66c:	f7fc f81e 	bl	80086ac <HAL_GetTick>
 800c670:	4602      	mov	r2, r0
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	1ad3      	subs	r3, r2, r3
 800c676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d901      	bls.n	800c682 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c67e:	2303      	movs	r3, #3
 800c680:	e036      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c682:	f7ff fa24 	bl	800bace <LL_RCC_GetSysClkSource>
 800c686:	4602      	mov	r2, r0
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	685b      	ldr	r3, [r3, #4]
 800c68c:	009b      	lsls	r3, r3, #2
 800c68e:	429a      	cmp	r2, r3
 800c690:	d1ec      	bne.n	800c66c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c692:	4b19      	ldr	r3, [pc, #100]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f003 0307 	and.w	r3, r3, #7
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	d21b      	bcs.n	800c6d8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c6a0:	4b15      	ldr	r3, [pc, #84]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f023 0207 	bic.w	r2, r3, #7
 800c6a8:	4913      	ldr	r1, [pc, #76]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c6aa:	683b      	ldr	r3, [r7, #0]
 800c6ac:	4313      	orrs	r3, r2
 800c6ae:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6b0:	f7fb fffc 	bl	80086ac <HAL_GetTick>
 800c6b4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6b6:	e008      	b.n	800c6ca <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c6b8:	f7fb fff8 	bl	80086ac <HAL_GetTick>
 800c6bc:	4602      	mov	r2, r0
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	1ad3      	subs	r3, r2, r3
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d901      	bls.n	800c6ca <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c6c6:	2303      	movs	r3, #3
 800c6c8:	e012      	b.n	800c6f0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c6ca:	4b0b      	ldr	r3, [pc, #44]	@ (800c6f8 <HAL_RCC_ClockConfig+0x278>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	683a      	ldr	r2, [r7, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d1ef      	bne.n	800c6b8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c6d8:	f000 f87e 	bl	800c7d8 <HAL_RCC_GetHCLKFreq>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4a07      	ldr	r2, [pc, #28]	@ (800c6fc <HAL_RCC_ClockConfig+0x27c>)
 800c6e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c6e2:	f7fb ffef 	bl	80086c4 <HAL_GetTickPrio>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7fb ff91 	bl	8008610 <HAL_InitTick>
 800c6ee:	4603      	mov	r3, r0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3710      	adds	r7, #16
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}
 800c6f8:	58004000 	.word	0x58004000
 800c6fc:	20000008 	.word	0x20000008

0800c700 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c700:	b590      	push	{r4, r7, lr}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c706:	f7ff f9e2 	bl	800bace <LL_RCC_GetSysClkSource>
 800c70a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d10a      	bne.n	800c728 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c712:	f7ff f99e 	bl	800ba52 <LL_RCC_MSI_GetRange>
 800c716:	4603      	mov	r3, r0
 800c718:	091b      	lsrs	r3, r3, #4
 800c71a:	f003 030f 	and.w	r3, r3, #15
 800c71e:	4a2b      	ldr	r2, [pc, #172]	@ (800c7cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800c720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	e04b      	b.n	800c7c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2b04      	cmp	r3, #4
 800c72c:	d102      	bne.n	800c734 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c72e:	4b28      	ldr	r3, [pc, #160]	@ (800c7d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c730:	60fb      	str	r3, [r7, #12]
 800c732:	e045      	b.n	800c7c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b08      	cmp	r3, #8
 800c738:	d10a      	bne.n	800c750 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c73a:	f7fe ffb7 	bl	800b6ac <LL_RCC_HSE_IsEnabledDiv2>
 800c73e:	4603      	mov	r3, r0
 800c740:	2b01      	cmp	r3, #1
 800c742:	d102      	bne.n	800c74a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c744:	4b22      	ldr	r3, [pc, #136]	@ (800c7d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c746:	60fb      	str	r3, [r7, #12]
 800c748:	e03a      	b.n	800c7c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c74a:	4b22      	ldr	r3, [pc, #136]	@ (800c7d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c74c:	60fb      	str	r3, [r7, #12]
 800c74e:	e037      	b.n	800c7c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c750:	f7ff fab9 	bl	800bcc6 <LL_RCC_PLL_GetMainSource>
 800c754:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b02      	cmp	r3, #2
 800c75a:	d003      	beq.n	800c764 <HAL_RCC_GetSysClockFreq+0x64>
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d003      	beq.n	800c76a <HAL_RCC_GetSysClockFreq+0x6a>
 800c762:	e00d      	b.n	800c780 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c764:	4b1a      	ldr	r3, [pc, #104]	@ (800c7d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c766:	60bb      	str	r3, [r7, #8]
        break;
 800c768:	e015      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c76a:	f7fe ff9f 	bl	800b6ac <LL_RCC_HSE_IsEnabledDiv2>
 800c76e:	4603      	mov	r3, r0
 800c770:	2b01      	cmp	r3, #1
 800c772:	d102      	bne.n	800c77a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c774:	4b16      	ldr	r3, [pc, #88]	@ (800c7d0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c776:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c778:	e00d      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c77a:	4b16      	ldr	r3, [pc, #88]	@ (800c7d4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c77c:	60bb      	str	r3, [r7, #8]
        break;
 800c77e:	e00a      	b.n	800c796 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c780:	f7ff f967 	bl	800ba52 <LL_RCC_MSI_GetRange>
 800c784:	4603      	mov	r3, r0
 800c786:	091b      	lsrs	r3, r3, #4
 800c788:	f003 030f 	and.w	r3, r3, #15
 800c78c:	4a0f      	ldr	r2, [pc, #60]	@ (800c7cc <HAL_RCC_GetSysClockFreq+0xcc>)
 800c78e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c792:	60bb      	str	r3, [r7, #8]
        break;
 800c794:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c796:	f7ff fa71 	bl	800bc7c <LL_RCC_PLL_GetN>
 800c79a:	4602      	mov	r2, r0
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	fb03 f402 	mul.w	r4, r3, r2
 800c7a2:	f7ff fa84 	bl	800bcae <LL_RCC_PLL_GetDivider>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	091b      	lsrs	r3, r3, #4
 800c7aa:	3301      	adds	r3, #1
 800c7ac:	fbb4 f4f3 	udiv	r4, r4, r3
 800c7b0:	f7ff fa71 	bl	800bc96 <LL_RCC_PLL_GetR>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	0f5b      	lsrs	r3, r3, #29
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	fbb4 f3f3 	udiv	r3, r4, r3
 800c7be:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	3714      	adds	r7, #20
 800c7c6:	46bd      	mov	sp, r7
 800c7c8:	bd90      	pop	{r4, r7, pc}
 800c7ca:	bf00      	nop
 800c7cc:	080157e0 	.word	0x080157e0
 800c7d0:	00f42400 	.word	0x00f42400
 800c7d4:	01e84800 	.word	0x01e84800

0800c7d8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c7d8:	b598      	push	{r3, r4, r7, lr}
 800c7da:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c7dc:	f7ff ff90 	bl	800c700 <HAL_RCC_GetSysClockFreq>
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	f7ff f9e9 	bl	800bbb8 <LL_RCC_GetAHBPrescaler>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	091b      	lsrs	r3, r3, #4
 800c7ea:	f003 030f 	and.w	r3, r3, #15
 800c7ee:	4a03      	ldr	r2, [pc, #12]	@ (800c7fc <HAL_RCC_GetHCLKFreq+0x24>)
 800c7f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7f4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	bd98      	pop	{r3, r4, r7, pc}
 800c7fc:	08015780 	.word	0x08015780

0800c800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c800:	b598      	push	{r3, r4, r7, lr}
 800c802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c804:	f7ff ffe8 	bl	800c7d8 <HAL_RCC_GetHCLKFreq>
 800c808:	4604      	mov	r4, r0
 800c80a:	f7ff f9ef 	bl	800bbec <LL_RCC_GetAPB1Prescaler>
 800c80e:	4603      	mov	r3, r0
 800c810:	0a1b      	lsrs	r3, r3, #8
 800c812:	f003 0307 	and.w	r3, r3, #7
 800c816:	4a04      	ldr	r2, [pc, #16]	@ (800c828 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c81c:	f003 031f 	and.w	r3, r3, #31
 800c820:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c824:	4618      	mov	r0, r3
 800c826:	bd98      	pop	{r3, r4, r7, pc}
 800c828:	080157c0 	.word	0x080157c0

0800c82c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c82c:	b598      	push	{r3, r4, r7, lr}
 800c82e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c830:	f7ff ffd2 	bl	800c7d8 <HAL_RCC_GetHCLKFreq>
 800c834:	4604      	mov	r4, r0
 800c836:	f7ff f9e5 	bl	800bc04 <LL_RCC_GetAPB2Prescaler>
 800c83a:	4603      	mov	r3, r0
 800c83c:	0adb      	lsrs	r3, r3, #11
 800c83e:	f003 0307 	and.w	r3, r3, #7
 800c842:	4a04      	ldr	r2, [pc, #16]	@ (800c854 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c848:	f003 031f 	and.w	r3, r3, #31
 800c84c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c850:	4618      	mov	r0, r3
 800c852:	bd98      	pop	{r3, r4, r7, pc}
 800c854:	080157c0 	.word	0x080157c0

0800c858 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c858:	b590      	push	{r4, r7, lr}
 800c85a:	b085      	sub	sp, #20
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2bb0      	cmp	r3, #176	@ 0xb0
 800c864:	d903      	bls.n	800c86e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c866:	4b15      	ldr	r3, [pc, #84]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c86a:	60fb      	str	r3, [r7, #12]
 800c86c:	e007      	b.n	800c87e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	091b      	lsrs	r3, r3, #4
 800c872:	f003 030f 	and.w	r3, r3, #15
 800c876:	4a11      	ldr	r2, [pc, #68]	@ (800c8bc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c87c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c87e:	f7ff f9a7 	bl	800bbd0 <LL_RCC_GetAHB4Prescaler>
 800c882:	4603      	mov	r3, r0
 800c884:	091b      	lsrs	r3, r3, #4
 800c886:	f003 030f 	and.w	r3, r3, #15
 800c88a:	4a0d      	ldr	r2, [pc, #52]	@ (800c8c0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c88c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c890:	68fa      	ldr	r2, [r7, #12]
 800c892:	fbb2 f3f3 	udiv	r3, r2, r3
 800c896:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	4a0a      	ldr	r2, [pc, #40]	@ (800c8c4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c89c:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a0:	0c9c      	lsrs	r4, r3, #18
 800c8a2:	f7fe fef5 	bl	800b690 <HAL_PWREx_GetVoltageRange>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	4619      	mov	r1, r3
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 f80c 	bl	800c8c8 <RCC_SetFlashLatency>
 800c8b0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3714      	adds	r7, #20
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd90      	pop	{r4, r7, pc}
 800c8ba:	bf00      	nop
 800c8bc:	080157e0 	.word	0x080157e0
 800c8c0:	08015780 	.word	0x08015780
 800c8c4:	431bde83 	.word	0x431bde83

0800c8c8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c8c8:	b590      	push	{r4, r7, lr}
 800c8ca:	b093      	sub	sp, #76	@ 0x4c
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c8d2:	4b37      	ldr	r3, [pc, #220]	@ (800c9b0 <RCC_SetFlashLatency+0xe8>)
 800c8d4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c8d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c8de:	4a35      	ldr	r2, [pc, #212]	@ (800c9b4 <RCC_SetFlashLatency+0xec>)
 800c8e0:	f107 031c 	add.w	r3, r7, #28
 800c8e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c8ea:	4b33      	ldr	r3, [pc, #204]	@ (800c9b8 <RCC_SetFlashLatency+0xf0>)
 800c8ec:	f107 040c 	add.w	r4, r7, #12
 800c8f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c8f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c900:	d11a      	bne.n	800c938 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c902:	2300      	movs	r3, #0
 800c904:	643b      	str	r3, [r7, #64]	@ 0x40
 800c906:	e013      	b.n	800c930 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c908:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c90a:	009b      	lsls	r3, r3, #2
 800c90c:	3348      	adds	r3, #72	@ 0x48
 800c90e:	443b      	add	r3, r7
 800c910:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c914:	687a      	ldr	r2, [r7, #4]
 800c916:	429a      	cmp	r2, r3
 800c918:	d807      	bhi.n	800c92a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c91a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c91c:	009b      	lsls	r3, r3, #2
 800c91e:	3348      	adds	r3, #72	@ 0x48
 800c920:	443b      	add	r3, r7
 800c922:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c926:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c928:	e020      	b.n	800c96c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c92a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c92c:	3301      	adds	r3, #1
 800c92e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c932:	2b03      	cmp	r3, #3
 800c934:	d9e8      	bls.n	800c908 <RCC_SetFlashLatency+0x40>
 800c936:	e019      	b.n	800c96c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c938:	2300      	movs	r3, #0
 800c93a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c93c:	e013      	b.n	800c966 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c93e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	3348      	adds	r3, #72	@ 0x48
 800c944:	443b      	add	r3, r7
 800c946:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c94a:	687a      	ldr	r2, [r7, #4]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d807      	bhi.n	800c960 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	3348      	adds	r3, #72	@ 0x48
 800c956:	443b      	add	r3, r7
 800c958:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c95c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c95e:	e005      	b.n	800c96c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c962:	3301      	adds	r3, #1
 800c964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d9e8      	bls.n	800c93e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c96c:	4b13      	ldr	r3, [pc, #76]	@ (800c9bc <RCC_SetFlashLatency+0xf4>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	f023 0207 	bic.w	r2, r3, #7
 800c974:	4911      	ldr	r1, [pc, #68]	@ (800c9bc <RCC_SetFlashLatency+0xf4>)
 800c976:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c978:	4313      	orrs	r3, r2
 800c97a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c97c:	f7fb fe96 	bl	80086ac <HAL_GetTick>
 800c980:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c982:	e008      	b.n	800c996 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c984:	f7fb fe92 	bl	80086ac <HAL_GetTick>
 800c988:	4602      	mov	r2, r0
 800c98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c98c:	1ad3      	subs	r3, r2, r3
 800c98e:	2b02      	cmp	r3, #2
 800c990:	d901      	bls.n	800c996 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c992:	2303      	movs	r3, #3
 800c994:	e007      	b.n	800c9a6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c996:	4b09      	ldr	r3, [pc, #36]	@ (800c9bc <RCC_SetFlashLatency+0xf4>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f003 0307 	and.w	r3, r3, #7
 800c99e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d1ef      	bne.n	800c984 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c9a4:	2300      	movs	r3, #0
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	374c      	adds	r7, #76	@ 0x4c
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd90      	pop	{r4, r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	080142f4 	.word	0x080142f4
 800c9b4:	08014304 	.word	0x08014304
 800c9b8:	08014310 	.word	0x08014310
 800c9bc:	58004000 	.word	0x58004000

0800c9c0 <LL_RCC_LSE_IsEnabled>:
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c9c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	2b01      	cmp	r3, #1
 800c9d2:	d101      	bne.n	800c9d8 <LL_RCC_LSE_IsEnabled+0x18>
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e000      	b.n	800c9da <LL_RCC_LSE_IsEnabled+0x1a>
 800c9d8:	2300      	movs	r3, #0
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e2:	4770      	bx	lr

0800c9e4 <LL_RCC_LSE_IsReady>:
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c9e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c9f0:	f003 0302 	and.w	r3, r3, #2
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d101      	bne.n	800c9fc <LL_RCC_LSE_IsReady+0x18>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	e000      	b.n	800c9fe <LL_RCC_LSE_IsReady+0x1a>
 800c9fc:	2300      	movs	r3, #0
}
 800c9fe:	4618      	mov	r0, r3
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <LL_RCC_MSI_EnablePLLMode>:
{
 800ca08:	b480      	push	{r7}
 800ca0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800ca0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ca16:	f043 0304 	orr.w	r3, r3, #4
 800ca1a:	6013      	str	r3, [r2, #0]
}
 800ca1c:	bf00      	nop
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca24:	4770      	bx	lr

0800ca26 <LL_RCC_SetRFWKPClockSource>:
{
 800ca26:	b480      	push	{r7}
 800ca28:	b083      	sub	sp, #12
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ca2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ca36:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ca3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ca46:	bf00      	nop
 800ca48:	370c      	adds	r7, #12
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr

0800ca52 <LL_RCC_SetSMPSClockSource>:
{
 800ca52:	b480      	push	{r7}
 800ca54:	b083      	sub	sp, #12
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ca5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca60:	f023 0203 	bic.w	r2, r3, #3
 800ca64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4313      	orrs	r3, r2
 800ca6c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ca6e:	bf00      	nop
 800ca70:	370c      	adds	r7, #12
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <LL_RCC_SetSMPSPrescaler>:
{
 800ca7a:	b480      	push	{r7}
 800ca7c:	b083      	sub	sp, #12
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800ca82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca88:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800ca8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ca96:	bf00      	nop
 800ca98:	370c      	adds	r7, #12
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa0:	4770      	bx	lr

0800caa2 <LL_RCC_SetUSARTClockSource>:
{
 800caa2:	b480      	push	{r7}
 800caa4:	b083      	sub	sp, #12
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800caaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cab2:	f023 0203 	bic.w	r2, r3, #3
 800cab6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	4313      	orrs	r3, r2
 800cabe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <LL_RCC_SetLPUARTClockSource>:
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cade:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cae2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4313      	orrs	r3, r2
 800caea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800caee:	bf00      	nop
 800caf0:	370c      	adds	r7, #12
 800caf2:	46bd      	mov	sp, r7
 800caf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf8:	4770      	bx	lr

0800cafa <LL_RCC_SetI2CClockSource>:
{
 800cafa:	b480      	push	{r7}
 800cafc:	b083      	sub	sp, #12
 800cafe:	af00      	add	r7, sp, #0
 800cb00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cb02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb06:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	091b      	lsrs	r3, r3, #4
 800cb0e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb12:	43db      	mvns	r3, r3
 800cb14:	401a      	ands	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	011b      	lsls	r3, r3, #4
 800cb1a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cb1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb22:	4313      	orrs	r3, r2
 800cb24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <LL_RCC_SetLPTIMClockSource>:
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cb3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb40:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	0c1b      	lsrs	r3, r3, #16
 800cb48:	041b      	lsls	r3, r3, #16
 800cb4a:	43db      	mvns	r3, r3
 800cb4c:	401a      	ands	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	041b      	lsls	r3, r3, #16
 800cb52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb56:	4313      	orrs	r3, r2
 800cb58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <LL_RCC_SetSAIClockSource>:
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cb70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb78:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cb7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cb88:	bf00      	nop
 800cb8a:	370c      	adds	r7, #12
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <LL_RCC_SetRNGClockSource>:
{
 800cb94:	b480      	push	{r7}
 800cb96:	b083      	sub	sp, #12
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800cb9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cba4:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800cba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbb4:	bf00      	nop
 800cbb6:	370c      	adds	r7, #12
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <LL_RCC_SetCLK48ClockSource>:
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b083      	sub	sp, #12
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800cbc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbd0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cbd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <LL_RCC_SetUSBClockSource>:
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f7ff ffe3 	bl	800cbc0 <LL_RCC_SetCLK48ClockSource>
}
 800cbfa:	bf00      	nop
 800cbfc:	3708      	adds	r7, #8
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <LL_RCC_SetADCClockSource>:
{
 800cc02:	b480      	push	{r7}
 800cc04:	b083      	sub	sp, #12
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cc0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc12:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cc16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4313      	orrs	r3, r2
 800cc1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc22:	bf00      	nop
 800cc24:	370c      	adds	r7, #12
 800cc26:	46bd      	mov	sp, r7
 800cc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2c:	4770      	bx	lr

0800cc2e <LL_RCC_SetRTCClockSource>:
{
 800cc2e:	b480      	push	{r7}
 800cc30:	b083      	sub	sp, #12
 800cc32:	af00      	add	r7, sp, #0
 800cc34:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cc36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc3e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cc42:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800cc4e:	bf00      	nop
 800cc50:	370c      	adds	r7, #12
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <LL_RCC_GetRTCClockSource>:
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800cc5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc72:	4770      	bx	lr

0800cc74 <LL_RCC_ForceBackupDomainReset>:
{
 800cc74:	b480      	push	{r7}
 800cc76:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cc80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cc84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cc88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cc8c:	bf00      	nop
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr

0800cc96 <LL_RCC_ReleaseBackupDomainReset>:
{
 800cc96:	b480      	push	{r7}
 800cc98:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cc9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cca2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ccaa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800ccae:	bf00      	nop
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <LL_RCC_PLLSAI1_Enable>:
{
 800ccb8:	b480      	push	{r7}
 800ccba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ccbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ccc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ccca:	6013      	str	r3, [r2, #0]
}
 800cccc:	bf00      	nop
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <LL_RCC_PLLSAI1_Disable>:
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800ccda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cce4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cce8:	6013      	str	r3, [r2, #0]
}
 800ccea:	bf00      	nop
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <LL_RCC_PLLSAI1_IsReady>:
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ccf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd06:	d101      	bne.n	800cd0c <LL_RCC_PLLSAI1_IsReady+0x18>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e000      	b.n	800cd0e <LL_RCC_PLLSAI1_IsReady+0x1a>
 800cd0c:	2300      	movs	r3, #0
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr

0800cd18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b088      	sub	sp, #32
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800cd20:	2300      	movs	r3, #0
 800cd22:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800cd24:	2300      	movs	r3, #0
 800cd26:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d034      	beq.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd38:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd3c:	d021      	beq.n	800cd82 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800cd3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800cd42:	d81b      	bhi.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd44:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd48:	d01d      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800cd4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cd4e:	d815      	bhi.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d00b      	beq.n	800cd6c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800cd54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd58:	d110      	bne.n	800cd7c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800cd5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd5e:	68db      	ldr	r3, [r3, #12]
 800cd60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd68:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd6a:	e00d      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	4618      	mov	r0, r3
 800cd72:	f000 f94d 	bl	800d010 <RCCEx_PLLSAI1_ConfigNP>
 800cd76:	4603      	mov	r3, r0
 800cd78:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800cd7a:	e005      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800cd7c:	2301      	movs	r3, #1
 800cd7e:	77fb      	strb	r3, [r7, #31]
        break;
 800cd80:	e002      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cd82:	bf00      	nop
 800cd84:	e000      	b.n	800cd88 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800cd86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd88:	7ffb      	ldrb	r3, [r7, #31]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d105      	bne.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fee8 	bl	800cb68 <LL_RCC_SetSAIClockSource>
 800cd98:	e001      	b.n	800cd9e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd9a:	7ffb      	ldrb	r3, [r7, #31]
 800cd9c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d046      	beq.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cdaa:	f7ff ff56 	bl	800cc5a <LL_RCC_GetRTCClockSource>
 800cdae:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdb4:	69ba      	ldr	r2, [r7, #24]
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d03c      	beq.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cdba:	f7fe fc59 	bl	800b670 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdc8:	4618      	mov	r0, r3
 800cdca:	f7ff ff30 	bl	800cc2e <LL_RCC_SetRTCClockSource>
 800cdce:	e02e      	b.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cdd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdd8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800cdda:	f7ff ff4b 	bl	800cc74 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cdde:	f7ff ff5a 	bl	800cc96 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cdec:	4313      	orrs	r3, r2
 800cdee:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cdf0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cdfa:	f7ff fde1 	bl	800c9c0 <LL_RCC_LSE_IsEnabled>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d114      	bne.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ce04:	f7fb fc52 	bl	80086ac <HAL_GetTick>
 800ce08:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce0a:	e00b      	b.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ce0c:	f7fb fc4e 	bl	80086ac <HAL_GetTick>
 800ce10:	4602      	mov	r2, r0
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	1ad3      	subs	r3, r2, r3
 800ce16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d902      	bls.n	800ce24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800ce1e:	2303      	movs	r3, #3
 800ce20:	77fb      	strb	r3, [r7, #31]
              break;
 800ce22:	e004      	b.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800ce24:	f7ff fdde 	bl	800c9e4 <LL_RCC_LSE_IsReady>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b01      	cmp	r3, #1
 800ce2c:	d1ee      	bne.n	800ce0c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800ce2e:	7ffb      	ldrb	r3, [r7, #31]
 800ce30:	77bb      	strb	r3, [r7, #30]
 800ce32:	e001      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce34:	7ffb      	ldrb	r3, [r7, #31]
 800ce36:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d004      	beq.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	699b      	ldr	r3, [r3, #24]
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f7ff fe2a 	bl	800caa2 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	f003 0302 	and.w	r3, r3, #2
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d004      	beq.n	800ce64 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	69db      	ldr	r3, [r3, #28]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7ff fe35 	bl	800cace <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f003 0310 	and.w	r3, r3, #16
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d004      	beq.n	800ce7a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7ff fe5d 	bl	800cb34 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	f003 0320 	and.w	r3, r3, #32
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d004      	beq.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7ff fe52 	bl	800cb34 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	f003 0304 	and.w	r3, r3, #4
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d004      	beq.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6a1b      	ldr	r3, [r3, #32]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7ff fe2a 	bl	800cafa <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f003 0308 	and.w	r3, r3, #8
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d004      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	f7ff fe1f 	bl	800cafa <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d022      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cecc:	4618      	mov	r0, r3
 800cece:	f7ff fe8d 	bl	800cbec <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ced6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ceda:	d107      	bne.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cedc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cee0:	68db      	ldr	r3, [r3, #12]
 800cee2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cee6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ceea:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cef0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cef4:	d10b      	bne.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3304      	adds	r3, #4
 800cefa:	4618      	mov	r0, r3
 800cefc:	f000 f8e3 	bl	800d0c6 <RCCEx_PLLSAI1_ConfigNQ>
 800cf00:	4603      	mov	r3, r0
 800cf02:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cf04:	7ffb      	ldrb	r3, [r7, #31]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800cf0a:	7ffb      	ldrb	r3, [r7, #31]
 800cf0c:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d02b      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf22:	d008      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cf2c:	d003      	beq.n	800cf36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d105      	bne.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7ff fe2a 	bl	800cb94 <LL_RCC_SetRNGClockSource>
 800cf40:	e00a      	b.n	800cf58 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	f7ff fe21 	bl	800cb94 <LL_RCC_SetRNGClockSource>
 800cf52:	68f8      	ldr	r0, [r7, #12]
 800cf54:	f7ff fe34 	bl	800cbc0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf5c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800cf60:	d107      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800cf62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf66:	68db      	ldr	r3, [r3, #12]
 800cf68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cf70:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d022      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fe3d 	bl	800cc02 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cf8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf90:	d107      	bne.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800cf92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cfa0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cfa6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cfaa:	d10b      	bne.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 f8e3 	bl	800d17c <RCCEx_PLLSAI1_ConfigNR>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800cfba:	7ffb      	ldrb	r3, [r7, #31]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d001      	beq.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800cfc0:	7ffb      	ldrb	r3, [r7, #31]
 800cfc2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d004      	beq.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7ff fd26 	bl	800ca26 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfea:	4618      	mov	r0, r3
 800cfec:	f7ff fd45 	bl	800ca7a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cff4:	4618      	mov	r0, r3
 800cff6:	f7ff fd2c 	bl	800ca52 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800cffa:	7fbb      	ldrb	r3, [r7, #30]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3720      	adds	r7, #32
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800d008:	f7ff fcfe 	bl	800ca08 <LL_RCC_MSI_EnablePLLMode>
}
 800d00c:	bf00      	nop
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d018:	2300      	movs	r3, #0
 800d01a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d01c:	f7ff fe5b 	bl	800ccd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d020:	f7fb fb44 	bl	80086ac <HAL_GetTick>
 800d024:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d026:	e009      	b.n	800d03c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d028:	f7fb fb40 	bl	80086ac <HAL_GetTick>
 800d02c:	4602      	mov	r2, r0
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	1ad3      	subs	r3, r2, r3
 800d032:	2b02      	cmp	r3, #2
 800d034:	d902      	bls.n	800d03c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	73fb      	strb	r3, [r7, #15]
      break;
 800d03a:	e004      	b.n	800d046 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d03c:	f7ff fe5a 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d040:	4603      	mov	r3, r0
 800d042:	2b00      	cmp	r3, #0
 800d044:	d1f0      	bne.n	800d028 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d137      	bne.n	800d0bc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d04c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	021b      	lsls	r3, r3, #8
 800d05c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d060:	4313      	orrs	r3, r2
 800d062:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d076:	4313      	orrs	r3, r2
 800d078:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d07a:	f7ff fe1d 	bl	800ccb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d07e:	f7fb fb15 	bl	80086ac <HAL_GetTick>
 800d082:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d084:	e009      	b.n	800d09a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d086:	f7fb fb11 	bl	80086ac <HAL_GetTick>
 800d08a:	4602      	mov	r2, r0
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	1ad3      	subs	r3, r2, r3
 800d090:	2b02      	cmp	r3, #2
 800d092:	d902      	bls.n	800d09a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d094:	2303      	movs	r3, #3
 800d096:	73fb      	strb	r3, [r7, #15]
        break;
 800d098:	e004      	b.n	800d0a4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d09a:	f7ff fe2b 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	2b01      	cmp	r3, #1
 800d0a2:	d1f0      	bne.n	800d086 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d0a4:	7bfb      	ldrb	r3, [r7, #15]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d108      	bne.n	800d0bc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d0aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0ae:	691a      	ldr	r2, [r3, #16]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	691b      	ldr	r3, [r3, #16]
 800d0b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0be:	4618      	mov	r0, r3
 800d0c0:	3710      	adds	r7, #16
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	b084      	sub	sp, #16
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d0d2:	f7ff fe00 	bl	800ccd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d0d6:	f7fb fae9 	bl	80086ac <HAL_GetTick>
 800d0da:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0dc:	e009      	b.n	800d0f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d0de:	f7fb fae5 	bl	80086ac <HAL_GetTick>
 800d0e2:	4602      	mov	r2, r0
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	1ad3      	subs	r3, r2, r3
 800d0e8:	2b02      	cmp	r3, #2
 800d0ea:	d902      	bls.n	800d0f2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d0ec:	2303      	movs	r3, #3
 800d0ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f0:	e004      	b.n	800d0fc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d0f2:	f7ff fdff 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d1f0      	bne.n	800d0de <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d0fc:	7bfb      	ldrb	r3, [r7, #15]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d137      	bne.n	800d172 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	021b      	lsls	r3, r3, #8
 800d112:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d116:	4313      	orrs	r3, r2
 800d118:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d11a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d11e:	691b      	ldr	r3, [r3, #16]
 800d120:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d12c:	4313      	orrs	r3, r2
 800d12e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d130:	f7ff fdc2 	bl	800ccb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d134:	f7fb faba 	bl	80086ac <HAL_GetTick>
 800d138:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d13a:	e009      	b.n	800d150 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d13c:	f7fb fab6 	bl	80086ac <HAL_GetTick>
 800d140:	4602      	mov	r2, r0
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	1ad3      	subs	r3, r2, r3
 800d146:	2b02      	cmp	r3, #2
 800d148:	d902      	bls.n	800d150 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	73fb      	strb	r3, [r7, #15]
        break;
 800d14e:	e004      	b.n	800d15a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d150:	f7ff fdd0 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d154:	4603      	mov	r3, r0
 800d156:	2b01      	cmp	r3, #1
 800d158:	d1f0      	bne.n	800d13c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d108      	bne.n	800d172 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d164:	691a      	ldr	r2, [r3, #16]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	691b      	ldr	r3, [r3, #16]
 800d16a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d16e:	4313      	orrs	r3, r2
 800d170:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d172:	7bfb      	ldrb	r3, [r7, #15]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3710      	adds	r7, #16
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b084      	sub	sp, #16
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d184:	2300      	movs	r3, #0
 800d186:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d188:	f7ff fda5 	bl	800ccd6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d18c:	f7fb fa8e 	bl	80086ac <HAL_GetTick>
 800d190:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d192:	e009      	b.n	800d1a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d194:	f7fb fa8a 	bl	80086ac <HAL_GetTick>
 800d198:	4602      	mov	r2, r0
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	1ad3      	subs	r3, r2, r3
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d902      	bls.n	800d1a8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d1a2:	2303      	movs	r3, #3
 800d1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d1a6:	e004      	b.n	800d1b2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d1a8:	f7ff fda4 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d1f0      	bne.n	800d194 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d1b2:	7bfb      	ldrb	r3, [r7, #15]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d137      	bne.n	800d228 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d1b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1bc:	691b      	ldr	r3, [r3, #16]
 800d1be:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	021b      	lsls	r3, r3, #8
 800d1c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d1d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	68db      	ldr	r3, [r3, #12]
 800d1de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d1e6:	f7ff fd67 	bl	800ccb8 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1ea:	f7fb fa5f 	bl	80086ac <HAL_GetTick>
 800d1ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1f0:	e009      	b.n	800d206 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1f2:	f7fb fa5b 	bl	80086ac <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d902      	bls.n	800d206 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	73fb      	strb	r3, [r7, #15]
        break;
 800d204:	e004      	b.n	800d210 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d206:	f7ff fd75 	bl	800ccf4 <LL_RCC_PLLSAI1_IsReady>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d1f0      	bne.n	800d1f2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d108      	bne.n	800d228 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d21a:	691a      	ldr	r2, [r3, #16]
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	691b      	ldr	r3, [r3, #16]
 800d220:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d224:	4313      	orrs	r3, r2
 800d226:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d228:	7bfb      	ldrb	r3, [r7, #15]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3710      	adds	r7, #16
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d101      	bne.n	800d246 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d242:	2301      	movs	r3, #1
 800d244:	e09f      	b.n	800d386 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d106      	bne.n	800d260 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f7f5 ff82 	bl	8003164 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d268:	4b49      	ldr	r3, [pc, #292]	@ (800d390 <HAL_RTC_Init+0x15c>)
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	f003 0310 	and.w	r3, r3, #16
 800d270:	2b10      	cmp	r3, #16
 800d272:	d07e      	beq.n	800d372 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	22ca      	movs	r2, #202	@ 0xca
 800d27a:	625a      	str	r2, [r3, #36]	@ 0x24
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	2253      	movs	r2, #83	@ 0x53
 800d282:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 f8ab 	bl	800d3e0 <RTC_EnterInitMode>
 800d28a:	4603      	mov	r3, r0
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d00a      	beq.n	800d2a6 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	22ff      	movs	r2, #255	@ 0xff
 800d296:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2204      	movs	r2, #4
 800d29c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	73fb      	strb	r3, [r7, #15]
 800d2a4:	e067      	b.n	800d376 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6812      	ldr	r2, [r2, #0]
 800d2b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d2b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d2b8:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	6899      	ldr	r1, [r3, #8]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	691b      	ldr	r3, [r3, #16]
 800d2c8:	431a      	orrs	r2, r3
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	699b      	ldr	r3, [r3, #24]
 800d2ce:	431a      	orrs	r2, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	430a      	orrs	r2, r1
 800d2d6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	687a      	ldr	r2, [r7, #4]
 800d2de:	68d2      	ldr	r2, [r2, #12]
 800d2e0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6919      	ldr	r1, [r3, #16]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	689b      	ldr	r3, [r3, #8]
 800d2ec:	041a      	lsls	r2, r3, #16
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68da      	ldr	r2, [r3, #12]
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d304:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f022 0203 	bic.w	r2, r2, #3
 800d314:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	69da      	ldr	r2, [r3, #28]
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	695b      	ldr	r3, [r3, #20]
 800d324:	431a      	orrs	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	430a      	orrs	r2, r1
 800d32c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	f003 0320 	and.w	r3, r3, #32
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d113      	bne.n	800d364 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 f829 	bl	800d394 <HAL_RTC_WaitForSynchro>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d00d      	beq.n	800d364 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	22ff      	movs	r2, #255	@ 0xff
 800d34e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2204      	movs	r2, #4
 800d354:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e010      	b.n	800d386 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	22ff      	movs	r2, #255	@ 0xff
 800d36a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	73fb      	strb	r3, [r7, #15]
 800d370:	e001      	b.n	800d376 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d372:	2300      	movs	r3, #0
 800d374:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d376:	7bfb      	ldrb	r3, [r7, #15]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d103      	bne.n	800d384 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	40002800 	.word	0x40002800

0800d394 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d3aa:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d3ac:	f7fb f97e 	bl	80086ac <HAL_GetTick>
 800d3b0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d3b2:	e009      	b.n	800d3c8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d3b4:	f7fb f97a 	bl	80086ac <HAL_GetTick>
 800d3b8:	4602      	mov	r2, r0
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	1ad3      	subs	r3, r2, r3
 800d3be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d3c2:	d901      	bls.n	800d3c8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	e007      	b.n	800d3d8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	68db      	ldr	r3, [r3, #12]
 800d3ce:	f003 0320 	and.w	r3, r3, #32
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0ee      	beq.n	800d3b4 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3710      	adds	r7, #16
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d119      	bne.n	800d42a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800d3fe:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d400:	f7fb f954 	bl	80086ac <HAL_GetTick>
 800d404:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d406:	e009      	b.n	800d41c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d408:	f7fb f950 	bl	80086ac <HAL_GetTick>
 800d40c:	4602      	mov	r2, r0
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	1ad3      	subs	r3, r2, r3
 800d412:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d416:	d901      	bls.n	800d41c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d418:	2303      	movs	r3, #3
 800d41a:	e007      	b.n	800d42c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d426:	2b00      	cmp	r3, #0
 800d428:	d0ee      	beq.n	800d408 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b086      	sub	sp, #24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	60f8      	str	r0, [r7, #12]
 800d43c:	60b9      	str	r1, [r7, #8]
 800d43e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d446:	2b01      	cmp	r3, #1
 800d448:	d101      	bne.n	800d44e <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800d44a:	2302      	movs	r3, #2
 800d44c:	e0a8      	b.n	800d5a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2202      	movs	r2, #2
 800d45a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	22ca      	movs	r2, #202	@ 0xca
 800d464:	625a      	str	r2, [r3, #36]	@ 0x24
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2253      	movs	r2, #83	@ 0x53
 800d46c:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d020      	beq.n	800d4be <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800d47c:	f7fb f916 	bl	80086ac <HAL_GetTick>
 800d480:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d482:	e015      	b.n	800d4b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d484:	f7fb f912 	bl	80086ac <HAL_GetTick>
 800d488:	4602      	mov	r2, r0
 800d48a:	697b      	ldr	r3, [r7, #20]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d492:	d90d      	bls.n	800d4b0 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	22ff      	movs	r2, #255	@ 0xff
 800d49a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	2203      	movs	r2, #3
 800d4a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e077      	b.n	800d5a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	f003 0304 	and.w	r3, r3, #4
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d1e2      	bne.n	800d484 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689a      	ldr	r2, [r3, #8]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d4cc:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d4de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d4e0:	f7fb f8e4 	bl	80086ac <HAL_GetTick>
 800d4e4:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d4e6:	e015      	b.n	800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d4e8:	f7fb f8e0 	bl	80086ac <HAL_GetTick>
 800d4ec:	4602      	mov	r2, r0
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	1ad3      	subs	r3, r2, r3
 800d4f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d4f6:	d90d      	bls.n	800d514 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	22ff      	movs	r2, #255	@ 0xff
 800d4fe:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2203      	movs	r2, #3
 800d504:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d510:	2303      	movs	r3, #3
 800d512:	e045      	b.n	800d5a0 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	f003 0304 	and.w	r3, r3, #4
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d0e2      	beq.n	800d4e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	68ba      	ldr	r2, [r7, #8]
 800d528:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	689a      	ldr	r2, [r3, #8]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	f022 0207 	bic.w	r2, r2, #7
 800d538:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	6899      	ldr	r1, [r3, #8]
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	430a      	orrs	r2, r1
 800d548:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d54a:	4b17      	ldr	r3, [pc, #92]	@ (800d5a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d550:	4a15      	ldr	r2, [pc, #84]	@ (800d5a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d552:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d556:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d55a:	4b13      	ldr	r3, [pc, #76]	@ (800d5a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	4a12      	ldr	r2, [pc, #72]	@ (800d5a8 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d560:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d564:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	689a      	ldr	r2, [r3, #8]
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d574:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689a      	ldr	r2, [r3, #8]
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d584:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	22ff      	movs	r2, #255	@ 0xff
 800d58c:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	2200      	movs	r2, #0
 800d59a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d59e:	2300      	movs	r3, #0
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}
 800d5a8:	58000800 	.word	0x58000800

0800d5ac <LL_RCC_GetUSARTClockSource>:
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800d5b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5b8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4013      	ands	r3, r2
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	370c      	adds	r7, #12
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ca:	4770      	bx	lr

0800d5cc <LL_RCC_GetLPUARTClockSource>:
{
 800d5cc:	b480      	push	{r7}
 800d5ce:	b083      	sub	sp, #12
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800d5d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4013      	ands	r3, r2
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	370c      	adds	r7, #12
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ea:	4770      	bx	lr

0800d5ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d101      	bne.n	800d5fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	e042      	b.n	800d684 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d604:	2b00      	cmp	r3, #0
 800d606:	d106      	bne.n	800d616 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2200      	movs	r2, #0
 800d60c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d610:	6878      	ldr	r0, [r7, #4]
 800d612:	f7f5 fddd 	bl	80031d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2224      	movs	r2, #36	@ 0x24
 800d61a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	681a      	ldr	r2, [r3, #0]
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	f022 0201 	bic.w	r2, r2, #1
 800d62c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 fa50 	bl	800dadc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f825 	bl	800d68c <UART_SetConfig>
 800d642:	4603      	mov	r3, r0
 800d644:	2b01      	cmp	r3, #1
 800d646:	d101      	bne.n	800d64c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d648:	2301      	movs	r3, #1
 800d64a:	e01b      	b.n	800d684 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d65a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d66a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	681a      	ldr	r2, [r3, #0]
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f042 0201 	orr.w	r2, r2, #1
 800d67a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 facf 	bl	800dc20 <UART_CheckIdleState>
 800d682:	4603      	mov	r3, r0
}
 800d684:	4618      	mov	r0, r3
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d68c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d690:	b08c      	sub	sp, #48	@ 0x30
 800d692:	af00      	add	r7, sp, #0
 800d694:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	689a      	ldr	r2, [r3, #8]
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	691b      	ldr	r3, [r3, #16]
 800d6a4:	431a      	orrs	r2, r3
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	695b      	ldr	r3, [r3, #20]
 800d6aa:	431a      	orrs	r2, r3
 800d6ac:	697b      	ldr	r3, [r7, #20]
 800d6ae:	69db      	ldr	r3, [r3, #28]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	4baf      	ldr	r3, [pc, #700]	@ (800d978 <UART_SetConfig+0x2ec>)
 800d6bc:	4013      	ands	r3, r2
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	6812      	ldr	r2, [r2, #0]
 800d6c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d6c4:	430b      	orrs	r3, r1
 800d6c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	685b      	ldr	r3, [r3, #4]
 800d6ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	68da      	ldr	r2, [r3, #12]
 800d6d6:	697b      	ldr	r3, [r7, #20]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	430a      	orrs	r2, r1
 800d6dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	699b      	ldr	r3, [r3, #24]
 800d6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d6e4:	697b      	ldr	r3, [r7, #20]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	4aa4      	ldr	r2, [pc, #656]	@ (800d97c <UART_SetConfig+0x2f0>)
 800d6ea:	4293      	cmp	r3, r2
 800d6ec:	d004      	beq.n	800d6f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d6ee:	697b      	ldr	r3, [r7, #20]
 800d6f0:	6a1b      	ldr	r3, [r3, #32]
 800d6f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	689b      	ldr	r3, [r3, #8]
 800d6fe:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d702:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d706:	697a      	ldr	r2, [r7, #20]
 800d708:	6812      	ldr	r2, [r2, #0]
 800d70a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d70c:	430b      	orrs	r3, r1
 800d70e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d716:	f023 010f 	bic.w	r1, r3, #15
 800d71a:	697b      	ldr	r3, [r7, #20]
 800d71c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	430a      	orrs	r2, r1
 800d724:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d726:	697b      	ldr	r3, [r7, #20]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	4a95      	ldr	r2, [pc, #596]	@ (800d980 <UART_SetConfig+0x2f4>)
 800d72c:	4293      	cmp	r3, r2
 800d72e:	d125      	bne.n	800d77c <UART_SetConfig+0xf0>
 800d730:	2003      	movs	r0, #3
 800d732:	f7ff ff3b 	bl	800d5ac <LL_RCC_GetUSARTClockSource>
 800d736:	4603      	mov	r3, r0
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d81b      	bhi.n	800d774 <UART_SetConfig+0xe8>
 800d73c:	a201      	add	r2, pc, #4	@ (adr r2, 800d744 <UART_SetConfig+0xb8>)
 800d73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d742:	bf00      	nop
 800d744:	0800d755 	.word	0x0800d755
 800d748:	0800d765 	.word	0x0800d765
 800d74c:	0800d75d 	.word	0x0800d75d
 800d750:	0800d76d 	.word	0x0800d76d
 800d754:	2301      	movs	r3, #1
 800d756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d75a:	e042      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d75c:	2302      	movs	r3, #2
 800d75e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d762:	e03e      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d764:	2304      	movs	r3, #4
 800d766:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d76a:	e03a      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d76c:	2308      	movs	r3, #8
 800d76e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d772:	e036      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d774:	2310      	movs	r3, #16
 800d776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d77a:	e032      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4a7e      	ldr	r2, [pc, #504]	@ (800d97c <UART_SetConfig+0x2f0>)
 800d782:	4293      	cmp	r3, r2
 800d784:	d12a      	bne.n	800d7dc <UART_SetConfig+0x150>
 800d786:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800d78a:	f7ff ff1f 	bl	800d5cc <LL_RCC_GetLPUARTClockSource>
 800d78e:	4603      	mov	r3, r0
 800d790:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d794:	d01a      	beq.n	800d7cc <UART_SetConfig+0x140>
 800d796:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d79a:	d81b      	bhi.n	800d7d4 <UART_SetConfig+0x148>
 800d79c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7a0:	d00c      	beq.n	800d7bc <UART_SetConfig+0x130>
 800d7a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d7a6:	d815      	bhi.n	800d7d4 <UART_SetConfig+0x148>
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d003      	beq.n	800d7b4 <UART_SetConfig+0x128>
 800d7ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d7b0:	d008      	beq.n	800d7c4 <UART_SetConfig+0x138>
 800d7b2:	e00f      	b.n	800d7d4 <UART_SetConfig+0x148>
 800d7b4:	2300      	movs	r3, #0
 800d7b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7ba:	e012      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d7bc:	2302      	movs	r3, #2
 800d7be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7c2:	e00e      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d7c4:	2304      	movs	r3, #4
 800d7c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7ca:	e00a      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d7cc:	2308      	movs	r3, #8
 800d7ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7d2:	e006      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d7d4:	2310      	movs	r3, #16
 800d7d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d7da:	e002      	b.n	800d7e2 <UART_SetConfig+0x156>
 800d7dc:	2310      	movs	r3, #16
 800d7de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	4a65      	ldr	r2, [pc, #404]	@ (800d97c <UART_SetConfig+0x2f0>)
 800d7e8:	4293      	cmp	r3, r2
 800d7ea:	f040 8097 	bne.w	800d91c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d7f2:	2b08      	cmp	r3, #8
 800d7f4:	d823      	bhi.n	800d83e <UART_SetConfig+0x1b2>
 800d7f6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7fc <UART_SetConfig+0x170>)
 800d7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fc:	0800d821 	.word	0x0800d821
 800d800:	0800d83f 	.word	0x0800d83f
 800d804:	0800d829 	.word	0x0800d829
 800d808:	0800d83f 	.word	0x0800d83f
 800d80c:	0800d82f 	.word	0x0800d82f
 800d810:	0800d83f 	.word	0x0800d83f
 800d814:	0800d83f 	.word	0x0800d83f
 800d818:	0800d83f 	.word	0x0800d83f
 800d81c:	0800d837 	.word	0x0800d837
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d820:	f7fe ffee 	bl	800c800 <HAL_RCC_GetPCLK1Freq>
 800d824:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d826:	e010      	b.n	800d84a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d828:	4b56      	ldr	r3, [pc, #344]	@ (800d984 <UART_SetConfig+0x2f8>)
 800d82a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d82c:	e00d      	b.n	800d84a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d82e:	f7fe ff67 	bl	800c700 <HAL_RCC_GetSysClockFreq>
 800d832:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d834:	e009      	b.n	800d84a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d836:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d83a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d83c:	e005      	b.n	800d84a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d83e:	2300      	movs	r3, #0
 800d840:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d842:	2301      	movs	r3, #1
 800d844:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d848:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	f000 812b 	beq.w	800daa8 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d852:	697b      	ldr	r3, [r7, #20]
 800d854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d856:	4a4c      	ldr	r2, [pc, #304]	@ (800d988 <UART_SetConfig+0x2fc>)
 800d858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d85c:	461a      	mov	r2, r3
 800d85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d860:	fbb3 f3f2 	udiv	r3, r3, r2
 800d864:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	4613      	mov	r3, r2
 800d86c:	005b      	lsls	r3, r3, #1
 800d86e:	4413      	add	r3, r2
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	429a      	cmp	r2, r3
 800d874:	d305      	bcc.n	800d882 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	685b      	ldr	r3, [r3, #4]
 800d87a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	429a      	cmp	r2, r3
 800d880:	d903      	bls.n	800d88a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d882:	2301      	movs	r3, #1
 800d884:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d888:	e10e      	b.n	800daa8 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88c:	2200      	movs	r2, #0
 800d88e:	60bb      	str	r3, [r7, #8]
 800d890:	60fa      	str	r2, [r7, #12]
 800d892:	697b      	ldr	r3, [r7, #20]
 800d894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d896:	4a3c      	ldr	r2, [pc, #240]	@ (800d988 <UART_SetConfig+0x2fc>)
 800d898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	2200      	movs	r2, #0
 800d8a0:	603b      	str	r3, [r7, #0]
 800d8a2:	607a      	str	r2, [r7, #4]
 800d8a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d8ac:	f7f3 f856 	bl	800095c <__aeabi_uldivmod>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	4610      	mov	r0, r2
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	f04f 0200 	mov.w	r2, #0
 800d8bc:	f04f 0300 	mov.w	r3, #0
 800d8c0:	020b      	lsls	r3, r1, #8
 800d8c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d8c6:	0202      	lsls	r2, r0, #8
 800d8c8:	6979      	ldr	r1, [r7, #20]
 800d8ca:	6849      	ldr	r1, [r1, #4]
 800d8cc:	0849      	lsrs	r1, r1, #1
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	460c      	mov	r4, r1
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	eb12 0804 	adds.w	r8, r2, r4
 800d8d8:	eb43 0905 	adc.w	r9, r3, r5
 800d8dc:	697b      	ldr	r3, [r7, #20]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	2200      	movs	r2, #0
 800d8e2:	469a      	mov	sl, r3
 800d8e4:	4693      	mov	fp, r2
 800d8e6:	4652      	mov	r2, sl
 800d8e8:	465b      	mov	r3, fp
 800d8ea:	4640      	mov	r0, r8
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	f7f3 f835 	bl	800095c <__aeabi_uldivmod>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d8fa:	6a3b      	ldr	r3, [r7, #32]
 800d8fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d900:	d308      	bcc.n	800d914 <UART_SetConfig+0x288>
 800d902:	6a3b      	ldr	r3, [r7, #32]
 800d904:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d908:	d204      	bcs.n	800d914 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6a3a      	ldr	r2, [r7, #32]
 800d910:	60da      	str	r2, [r3, #12]
 800d912:	e0c9      	b.n	800daa8 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800d914:	2301      	movs	r3, #1
 800d916:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d91a:	e0c5      	b.n	800daa8 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	69db      	ldr	r3, [r3, #28]
 800d920:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d924:	d16d      	bne.n	800da02 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d926:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d92a:	3b01      	subs	r3, #1
 800d92c:	2b07      	cmp	r3, #7
 800d92e:	d82d      	bhi.n	800d98c <UART_SetConfig+0x300>
 800d930:	a201      	add	r2, pc, #4	@ (adr r2, 800d938 <UART_SetConfig+0x2ac>)
 800d932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d936:	bf00      	nop
 800d938:	0800d959 	.word	0x0800d959
 800d93c:	0800d961 	.word	0x0800d961
 800d940:	0800d98d 	.word	0x0800d98d
 800d944:	0800d967 	.word	0x0800d967
 800d948:	0800d98d 	.word	0x0800d98d
 800d94c:	0800d98d 	.word	0x0800d98d
 800d950:	0800d98d 	.word	0x0800d98d
 800d954:	0800d96f 	.word	0x0800d96f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d958:	f7fe ff68 	bl	800c82c <HAL_RCC_GetPCLK2Freq>
 800d95c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d95e:	e01b      	b.n	800d998 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d960:	4b08      	ldr	r3, [pc, #32]	@ (800d984 <UART_SetConfig+0x2f8>)
 800d962:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d964:	e018      	b.n	800d998 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d966:	f7fe fecb 	bl	800c700 <HAL_RCC_GetSysClockFreq>
 800d96a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d96c:	e014      	b.n	800d998 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d96e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d972:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d974:	e010      	b.n	800d998 <UART_SetConfig+0x30c>
 800d976:	bf00      	nop
 800d978:	cfff69f3 	.word	0xcfff69f3
 800d97c:	40008000 	.word	0x40008000
 800d980:	40013800 	.word	0x40013800
 800d984:	00f42400 	.word	0x00f42400
 800d988:	08015820 	.word	0x08015820
      default:
        pclk = 0U;
 800d98c:	2300      	movs	r3, #0
 800d98e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d996:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 8084 	beq.w	800daa8 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d9a0:	697b      	ldr	r3, [r7, #20]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a4:	4a4b      	ldr	r2, [pc, #300]	@ (800dad4 <UART_SetConfig+0x448>)
 800d9a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800d9b2:	005a      	lsls	r2, r3, #1
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	085b      	lsrs	r3, r3, #1
 800d9ba:	441a      	add	r2, r3
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d9c6:	6a3b      	ldr	r3, [r7, #32]
 800d9c8:	2b0f      	cmp	r3, #15
 800d9ca:	d916      	bls.n	800d9fa <UART_SetConfig+0x36e>
 800d9cc:	6a3b      	ldr	r3, [r7, #32]
 800d9ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9d2:	d212      	bcs.n	800d9fa <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	f023 030f 	bic.w	r3, r3, #15
 800d9dc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d9de:	6a3b      	ldr	r3, [r7, #32]
 800d9e0:	085b      	lsrs	r3, r3, #1
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	f003 0307 	and.w	r3, r3, #7
 800d9e8:	b29a      	uxth	r2, r3
 800d9ea:	8bfb      	ldrh	r3, [r7, #30]
 800d9ec:	4313      	orrs	r3, r2
 800d9ee:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	8bfa      	ldrh	r2, [r7, #30]
 800d9f6:	60da      	str	r2, [r3, #12]
 800d9f8:	e056      	b.n	800daa8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800da00:	e052      	b.n	800daa8 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800da02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800da06:	3b01      	subs	r3, #1
 800da08:	2b07      	cmp	r3, #7
 800da0a:	d822      	bhi.n	800da52 <UART_SetConfig+0x3c6>
 800da0c:	a201      	add	r2, pc, #4	@ (adr r2, 800da14 <UART_SetConfig+0x388>)
 800da0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da12:	bf00      	nop
 800da14:	0800da35 	.word	0x0800da35
 800da18:	0800da3d 	.word	0x0800da3d
 800da1c:	0800da53 	.word	0x0800da53
 800da20:	0800da43 	.word	0x0800da43
 800da24:	0800da53 	.word	0x0800da53
 800da28:	0800da53 	.word	0x0800da53
 800da2c:	0800da53 	.word	0x0800da53
 800da30:	0800da4b 	.word	0x0800da4b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da34:	f7fe fefa 	bl	800c82c <HAL_RCC_GetPCLK2Freq>
 800da38:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da3a:	e010      	b.n	800da5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da3c:	4b26      	ldr	r3, [pc, #152]	@ (800dad8 <UART_SetConfig+0x44c>)
 800da3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800da40:	e00d      	b.n	800da5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da42:	f7fe fe5d 	bl	800c700 <HAL_RCC_GetSysClockFreq>
 800da46:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da48:	e009      	b.n	800da5e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da4e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800da50:	e005      	b.n	800da5e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800da52:	2300      	movs	r3, #0
 800da54:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800da5c:	bf00      	nop
    }

    if (pclk != 0U)
 800da5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da60:	2b00      	cmp	r3, #0
 800da62:	d021      	beq.n	800daa8 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800da64:	697b      	ldr	r3, [r7, #20]
 800da66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da68:	4a1a      	ldr	r2, [pc, #104]	@ (800dad4 <UART_SetConfig+0x448>)
 800da6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da6e:	461a      	mov	r2, r3
 800da70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da72:	fbb3 f2f2 	udiv	r2, r3, r2
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	685b      	ldr	r3, [r3, #4]
 800da7a:	085b      	lsrs	r3, r3, #1
 800da7c:	441a      	add	r2, r3
 800da7e:	697b      	ldr	r3, [r7, #20]
 800da80:	685b      	ldr	r3, [r3, #4]
 800da82:	fbb2 f3f3 	udiv	r3, r2, r3
 800da86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800da88:	6a3b      	ldr	r3, [r7, #32]
 800da8a:	2b0f      	cmp	r3, #15
 800da8c:	d909      	bls.n	800daa2 <UART_SetConfig+0x416>
 800da8e:	6a3b      	ldr	r3, [r7, #32]
 800da90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da94:	d205      	bcs.n	800daa2 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800da96:	6a3b      	ldr	r3, [r7, #32]
 800da98:	b29a      	uxth	r2, r3
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	60da      	str	r2, [r3, #12]
 800daa0:	e002      	b.n	800daa8 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800daa2:	2301      	movs	r3, #1
 800daa4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800daa8:	697b      	ldr	r3, [r7, #20]
 800daaa:	2201      	movs	r2, #1
 800daac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dab8:	697b      	ldr	r3, [r7, #20]
 800daba:	2200      	movs	r2, #0
 800dabc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2200      	movs	r2, #0
 800dac2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dac4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3730      	adds	r7, #48	@ 0x30
 800dacc:	46bd      	mov	sp, r7
 800dace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dad2:	bf00      	nop
 800dad4:	08015820 	.word	0x08015820
 800dad8:	00f42400 	.word	0x00f42400

0800dadc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dae8:	f003 0308 	and.w	r3, r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00a      	beq.n	800db06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	685b      	ldr	r3, [r3, #4]
 800daf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	430a      	orrs	r2, r1
 800db04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db0a:	f003 0301 	and.w	r3, r3, #1
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00a      	beq.n	800db28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	685b      	ldr	r3, [r3, #4]
 800db18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	430a      	orrs	r2, r1
 800db26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db2c:	f003 0302 	and.w	r3, r3, #2
 800db30:	2b00      	cmp	r3, #0
 800db32:	d00a      	beq.n	800db4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	430a      	orrs	r2, r1
 800db48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db4e:	f003 0304 	and.w	r3, r3, #4
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00a      	beq.n	800db6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	430a      	orrs	r2, r1
 800db6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db70:	f003 0310 	and.w	r3, r3, #16
 800db74:	2b00      	cmp	r3, #0
 800db76:	d00a      	beq.n	800db8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	689b      	ldr	r3, [r3, #8]
 800db7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	430a      	orrs	r2, r1
 800db8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800db92:	f003 0320 	and.w	r3, r3, #32
 800db96:	2b00      	cmp	r3, #0
 800db98:	d00a      	beq.n	800dbb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	430a      	orrs	r2, r1
 800dbae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d01a      	beq.n	800dbf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685b      	ldr	r3, [r3, #4]
 800dbc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	430a      	orrs	r2, r1
 800dbd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dbd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dbda:	d10a      	bne.n	800dbf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	430a      	orrs	r2, r1
 800dbf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d00a      	beq.n	800dc14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	685b      	ldr	r3, [r3, #4]
 800dc04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	430a      	orrs	r2, r1
 800dc12:	605a      	str	r2, [r3, #4]
  }
}
 800dc14:	bf00      	nop
 800dc16:	370c      	adds	r7, #12
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1e:	4770      	bx	lr

0800dc20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b098      	sub	sp, #96	@ 0x60
 800dc24:	af02      	add	r7, sp, #8
 800dc26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dc30:	f7fa fd3c 	bl	80086ac <HAL_GetTick>
 800dc34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b08      	cmp	r3, #8
 800dc42:	d12f      	bne.n	800dca4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dc44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dc48:	9300      	str	r3, [sp, #0]
 800dc4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f88e 	bl	800dd74 <UART_WaitOnFlagUntilTimeout>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d022      	beq.n	800dca4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	e853 3f00 	ldrex	r3, [r3]
 800dc6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dc6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dc72:	653b      	str	r3, [r7, #80]	@ 0x50
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc7c:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dc82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dc84:	e841 2300 	strex	r3, r2, [r1]
 800dc88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dc8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d1e6      	bne.n	800dc5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	2220      	movs	r2, #32
 800dc94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dca0:	2303      	movs	r3, #3
 800dca2:	e063      	b.n	800dd6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f003 0304 	and.w	r3, r3, #4
 800dcae:	2b04      	cmp	r3, #4
 800dcb0:	d149      	bne.n	800dd46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dcb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 f857 	bl	800dd74 <UART_WaitOnFlagUntilTimeout>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d03c      	beq.n	800dd46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd4:	e853 3f00 	ldrex	r3, [r3]
 800dcd8:	623b      	str	r3, [r7, #32]
   return(result);
 800dcda:	6a3b      	ldr	r3, [r7, #32]
 800dcdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	461a      	mov	r2, r3
 800dce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dcea:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dcf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dcf2:	e841 2300 	strex	r3, r2, [r1]
 800dcf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dcf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d1e6      	bne.n	800dccc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	3308      	adds	r3, #8
 800dd04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	e853 3f00 	ldrex	r3, [r3]
 800dd0c:	60fb      	str	r3, [r7, #12]
   return(result);
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f023 0301 	bic.w	r3, r3, #1
 800dd14:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	3308      	adds	r3, #8
 800dd1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd1e:	61fa      	str	r2, [r7, #28]
 800dd20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd22:	69b9      	ldr	r1, [r7, #24]
 800dd24:	69fa      	ldr	r2, [r7, #28]
 800dd26:	e841 2300 	strex	r3, r2, [r1]
 800dd2a:	617b      	str	r3, [r7, #20]
   return(result);
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1e5      	bne.n	800dcfe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	2220      	movs	r2, #32
 800dd36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dd42:	2303      	movs	r3, #3
 800dd44:	e012      	b.n	800dd6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2220      	movs	r2, #32
 800dd4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2220      	movs	r2, #32
 800dd52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	3758      	adds	r7, #88	@ 0x58
 800dd70:	46bd      	mov	sp, r7
 800dd72:	bd80      	pop	{r7, pc}

0800dd74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b084      	sub	sp, #16
 800dd78:	af00      	add	r7, sp, #0
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	603b      	str	r3, [r7, #0]
 800dd80:	4613      	mov	r3, r2
 800dd82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dd84:	e04f      	b.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dd86:	69bb      	ldr	r3, [r7, #24]
 800dd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd8c:	d04b      	beq.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dd8e:	f7fa fc8d 	bl	80086ac <HAL_GetTick>
 800dd92:	4602      	mov	r2, r0
 800dd94:	683b      	ldr	r3, [r7, #0]
 800dd96:	1ad3      	subs	r3, r2, r3
 800dd98:	69ba      	ldr	r2, [r7, #24]
 800dd9a:	429a      	cmp	r2, r3
 800dd9c:	d302      	bcc.n	800dda4 <UART_WaitOnFlagUntilTimeout+0x30>
 800dd9e:	69bb      	ldr	r3, [r7, #24]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dda4:	2303      	movs	r3, #3
 800dda6:	e04e      	b.n	800de46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	f003 0304 	and.w	r3, r3, #4
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d037      	beq.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2b80      	cmp	r3, #128	@ 0x80
 800ddba:	d034      	beq.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	2b40      	cmp	r3, #64	@ 0x40
 800ddc0:	d031      	beq.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	69db      	ldr	r3, [r3, #28]
 800ddc8:	f003 0308 	and.w	r3, r3, #8
 800ddcc:	2b08      	cmp	r3, #8
 800ddce:	d110      	bne.n	800ddf2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2208      	movs	r2, #8
 800ddd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ddd8:	68f8      	ldr	r0, [r7, #12]
 800ddda:	f000 f838 	bl	800de4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	2208      	movs	r2, #8
 800dde2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ddee:	2301      	movs	r3, #1
 800ddf0:	e029      	b.n	800de46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	69db      	ldr	r3, [r3, #28]
 800ddf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ddfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800de00:	d111      	bne.n	800de26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800de0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800de0c:	68f8      	ldr	r0, [r7, #12]
 800de0e:	f000 f81e 	bl	800de4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2220      	movs	r2, #32
 800de16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2200      	movs	r2, #0
 800de1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800de22:	2303      	movs	r3, #3
 800de24:	e00f      	b.n	800de46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	69da      	ldr	r2, [r3, #28]
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	4013      	ands	r3, r2
 800de30:	68ba      	ldr	r2, [r7, #8]
 800de32:	429a      	cmp	r2, r3
 800de34:	bf0c      	ite	eq
 800de36:	2301      	moveq	r3, #1
 800de38:	2300      	movne	r3, #0
 800de3a:	b2db      	uxtb	r3, r3
 800de3c:	461a      	mov	r2, r3
 800de3e:	79fb      	ldrb	r3, [r7, #7]
 800de40:	429a      	cmp	r2, r3
 800de42:	d0a0      	beq.n	800dd86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800de44:	2300      	movs	r3, #0
}
 800de46:	4618      	mov	r0, r3
 800de48:	3710      	adds	r7, #16
 800de4a:	46bd      	mov	sp, r7
 800de4c:	bd80      	pop	{r7, pc}

0800de4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de4e:	b480      	push	{r7}
 800de50:	b095      	sub	sp, #84	@ 0x54
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de5e:	e853 3f00 	ldrex	r3, [r3]
 800de62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800de64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800de6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	461a      	mov	r2, r3
 800de72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de74:	643b      	str	r3, [r7, #64]	@ 0x40
 800de76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800de7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800de7c:	e841 2300 	strex	r3, r2, [r1]
 800de80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800de82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de84:	2b00      	cmp	r3, #0
 800de86:	d1e6      	bne.n	800de56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3308      	adds	r3, #8
 800de8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	e853 3f00 	ldrex	r3, [r3]
 800de96:	61fb      	str	r3, [r7, #28]
   return(result);
 800de98:	69fb      	ldr	r3, [r7, #28]
 800de9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800de9e:	f023 0301 	bic.w	r3, r3, #1
 800dea2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	3308      	adds	r3, #8
 800deaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800deac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800deae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800deb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800deb4:	e841 2300 	strex	r3, r2, [r1]
 800deb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800deba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1e3      	bne.n	800de88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d118      	bne.n	800defa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	e853 3f00 	ldrex	r3, [r3]
 800ded4:	60bb      	str	r3, [r7, #8]
   return(result);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	f023 0310 	bic.w	r3, r3, #16
 800dedc:	647b      	str	r3, [r7, #68]	@ 0x44
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	461a      	mov	r2, r3
 800dee4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dee6:	61bb      	str	r3, [r7, #24]
 800dee8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800deea:	6979      	ldr	r1, [r7, #20]
 800deec:	69ba      	ldr	r2, [r7, #24]
 800deee:	e841 2300 	strex	r3, r2, [r1]
 800def2:	613b      	str	r3, [r7, #16]
   return(result);
 800def4:	693b      	ldr	r3, [r7, #16]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d1e6      	bne.n	800dec8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2220      	movs	r2, #32
 800defe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800df0e:	bf00      	nop
 800df10:	3754      	adds	r7, #84	@ 0x54
 800df12:	46bd      	mov	sp, r7
 800df14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df18:	4770      	bx	lr

0800df1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800df1a:	b480      	push	{r7}
 800df1c:	b085      	sub	sp, #20
 800df1e:	af00      	add	r7, sp, #0
 800df20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d101      	bne.n	800df30 <HAL_UARTEx_DisableFifoMode+0x16>
 800df2c:	2302      	movs	r3, #2
 800df2e:	e027      	b.n	800df80 <HAL_UARTEx_DisableFifoMode+0x66>
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2224      	movs	r2, #36	@ 0x24
 800df3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	681a      	ldr	r2, [r3, #0]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f022 0201 	bic.w	r2, r2, #1
 800df56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800df5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	68fa      	ldr	r2, [r7, #12]
 800df6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2220      	movs	r2, #32
 800df72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df7e:	2300      	movs	r3, #0
}
 800df80:	4618      	mov	r0, r3
 800df82:	3714      	adds	r7, #20
 800df84:	46bd      	mov	sp, r7
 800df86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8a:	4770      	bx	lr

0800df8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b084      	sub	sp, #16
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800df9c:	2b01      	cmp	r3, #1
 800df9e:	d101      	bne.n	800dfa4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dfa0:	2302      	movs	r3, #2
 800dfa2:	e02d      	b.n	800e000 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2201      	movs	r2, #1
 800dfa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2224      	movs	r2, #36	@ 0x24
 800dfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	681a      	ldr	r2, [r3, #0]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f022 0201 	bic.w	r2, r2, #1
 800dfca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	689b      	ldr	r3, [r3, #8]
 800dfd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f000 f84f 	bl	800e084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2220      	movs	r2, #32
 800dff2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2200      	movs	r2, #0
 800dffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3710      	adds	r7, #16
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
 800e010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d101      	bne.n	800e020 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e01c:	2302      	movs	r3, #2
 800e01e:	e02d      	b.n	800e07c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2224      	movs	r2, #36	@ 0x24
 800e02c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	681a      	ldr	r2, [r3, #0]
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f022 0201 	bic.w	r2, r2, #1
 800e046:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	689b      	ldr	r3, [r3, #8]
 800e04e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	683a      	ldr	r2, [r7, #0]
 800e058:	430a      	orrs	r2, r1
 800e05a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f000 f811 	bl	800e084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	68fa      	ldr	r2, [r7, #12]
 800e068:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	2220      	movs	r2, #32
 800e06e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2200      	movs	r2, #0
 800e076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e07a:	2300      	movs	r3, #0
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3710      	adds	r7, #16
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e084:	b480      	push	{r7}
 800e086:	b085      	sub	sp, #20
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e090:	2b00      	cmp	r3, #0
 800e092:	d108      	bne.n	800e0a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2201      	movs	r2, #1
 800e098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	2201      	movs	r2, #1
 800e0a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e0a4:	e031      	b.n	800e10a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e0a6:	2308      	movs	r3, #8
 800e0a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e0aa:	2308      	movs	r3, #8
 800e0ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	0e5b      	lsrs	r3, r3, #25
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0307 	and.w	r3, r3, #7
 800e0bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	0f5b      	lsrs	r3, r3, #29
 800e0c6:	b2db      	uxtb	r3, r3
 800e0c8:	f003 0307 	and.w	r3, r3, #7
 800e0cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0ce:	7bbb      	ldrb	r3, [r7, #14]
 800e0d0:	7b3a      	ldrb	r2, [r7, #12]
 800e0d2:	4911      	ldr	r1, [pc, #68]	@ (800e118 <UARTEx_SetNbDataToProcess+0x94>)
 800e0d4:	5c8a      	ldrb	r2, [r1, r2]
 800e0d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e0da:	7b3a      	ldrb	r2, [r7, #12]
 800e0dc:	490f      	ldr	r1, [pc, #60]	@ (800e11c <UARTEx_SetNbDataToProcess+0x98>)
 800e0de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e0e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800e0e4:	b29a      	uxth	r2, r3
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e0ec:	7bfb      	ldrb	r3, [r7, #15]
 800e0ee:	7b7a      	ldrb	r2, [r7, #13]
 800e0f0:	4909      	ldr	r1, [pc, #36]	@ (800e118 <UARTEx_SetNbDataToProcess+0x94>)
 800e0f2:	5c8a      	ldrb	r2, [r1, r2]
 800e0f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e0f8:	7b7a      	ldrb	r2, [r7, #13]
 800e0fa:	4908      	ldr	r1, [pc, #32]	@ (800e11c <UARTEx_SetNbDataToProcess+0x98>)
 800e0fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e0fe:	fb93 f3f2 	sdiv	r3, r3, r2
 800e102:	b29a      	uxth	r2, r3
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e10a:	bf00      	nop
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	08015838 	.word	0x08015838
 800e11c:	08015840 	.word	0x08015840

0800e120 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e120:	b480      	push	{r7}
 800e122:	b085      	sub	sp, #20
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e128:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e12c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e134:	b29a      	uxth	r2, r3
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	b29b      	uxth	r3, r3
 800e13a:	43db      	mvns	r3, r3
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	4013      	ands	r3, r2
 800e140:	b29a      	uxth	r2, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3714      	adds	r7, #20
 800e14e:	46bd      	mov	sp, r7
 800e150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e154:	4770      	bx	lr

0800e156 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e156:	b480      	push	{r7}
 800e158:	b085      	sub	sp, #20
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	60f8      	str	r0, [r7, #12]
 800e15e:	1d3b      	adds	r3, r7, #4
 800e160:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2201      	movs	r2, #1
 800e168:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2200      	movs	r2, #0
 800e170:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	2200      	movs	r2, #0
 800e178:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800e184:	2300      	movs	r3, #0
}
 800e186:	4618      	mov	r0, r3
 800e188:	3714      	adds	r7, #20
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e192:	b580      	push	{r7, lr}
 800e194:	b088      	sub	sp, #32
 800e196:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e198:	2300      	movs	r3, #0
 800e19a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e19c:	f107 0308 	add.w	r3, r7, #8
 800e1a0:	2218      	movs	r2, #24
 800e1a2:	2100      	movs	r1, #0
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	f001 f92d 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e1aa:	233f      	movs	r3, #63	@ 0x3f
 800e1ac:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e1ae:	2381      	movs	r3, #129	@ 0x81
 800e1b0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e1b2:	1dfb      	adds	r3, r7, #7
 800e1b4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e1ba:	f107 0308 	add.w	r3, r7, #8
 800e1be:	2100      	movs	r1, #0
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	f001 fba9 	bl	800f918 <hci_send_req>
 800e1c6:	4603      	mov	r3, r0
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	da01      	bge.n	800e1d0 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e1cc:	23ff      	movs	r3, #255	@ 0xff
 800e1ce:	e000      	b.n	800e1d2 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
}
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	3720      	adds	r7, #32
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800e1da:	b5b0      	push	{r4, r5, r7, lr}
 800e1dc:	b0ce      	sub	sp, #312	@ 0x138
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	4605      	mov	r5, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1ec:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e1f0:	462a      	mov	r2, r5
 800e1f2:	701a      	strb	r2, [r3, #0]
 800e1f4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e1f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	801a      	strh	r2, [r3, #0]
 800e200:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e204:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800e208:	4602      	mov	r2, r0
 800e20a:	801a      	strh	r2, [r3, #0]
 800e20c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e210:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e214:	460a      	mov	r2, r1
 800e216:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e218:	f107 0310 	add.w	r3, r7, #16
 800e21c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e220:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e224:	3308      	adds	r3, #8
 800e226:	f107 0210 	add.w	r2, r7, #16
 800e22a:	4413      	add	r3, r2
 800e22c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e230:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e234:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e238:	4413      	add	r3, r2
 800e23a:	3309      	adds	r3, #9
 800e23c:	f107 0210 	add.w	r2, r7, #16
 800e240:	4413      	add	r3, r2
 800e242:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e246:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e24a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e24e:	2200      	movs	r2, #0
 800e250:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e252:	2300      	movs	r3, #0
 800e254:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800e258:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e25c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e260:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800e264:	7812      	ldrb	r2, [r2, #0]
 800e266:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e268:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e26c:	3301      	adds	r3, #1
 800e26e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800e272:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e276:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e27a:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800e27e:	8812      	ldrh	r2, [r2, #0]
 800e280:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e284:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e288:	3302      	adds	r3, #2
 800e28a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800e28e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e292:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e296:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800e29a:	8812      	ldrh	r2, [r2, #0]
 800e29c:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e2a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2a4:	3302      	adds	r3, #2
 800e2a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800e2aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2ae:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e2b2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e2b6:	7812      	ldrb	r2, [r2, #0]
 800e2b8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e2ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2be:	3301      	adds	r3, #1
 800e2c0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800e2c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2c8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e2cc:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e2ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800e2d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2dc:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e2e0:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e2e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800e2ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e2f6:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	f001 f872 	bl	800f3e4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800e300:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e304:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e308:	4413      	add	r3, r2
 800e30a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800e30e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e312:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e316:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e318:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e31c:	3301      	adds	r3, #1
 800e31e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800e322:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e326:	3301      	adds	r3, #1
 800e328:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e32c:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800e330:	4618      	mov	r0, r3
 800e332:	f001 f857 	bl	800f3e4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800e336:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e33a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e33e:	4413      	add	r3, r2
 800e340:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800e344:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e348:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800e34c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e34e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e352:	3302      	adds	r3, #2
 800e354:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800e358:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e35c:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800e360:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e362:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e366:	3302      	adds	r3, #2
 800e368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e36c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e370:	2218      	movs	r2, #24
 800e372:	2100      	movs	r1, #0
 800e374:	4618      	mov	r0, r3
 800e376:	f001 f845 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e37a:	233f      	movs	r3, #63	@ 0x3f
 800e37c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800e380:	2383      	movs	r3, #131	@ 0x83
 800e382:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e386:	f107 0310 	add.w	r3, r7, #16
 800e38a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e38e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e392:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e396:	f107 030f 	add.w	r3, r7, #15
 800e39a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e39e:	2301      	movs	r3, #1
 800e3a0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e3a4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f001 fab4 	bl	800f918 <hci_send_req>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	da01      	bge.n	800e3ba <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e3b6:	23ff      	movs	r3, #255	@ 0xff
 800e3b8:	e004      	b.n	800e3c4 <aci_gap_set_discoverable+0x1ea>
  return status;
 800e3ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e3be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e3c2:	781b      	ldrb	r3, [r3, #0]
}
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bdb0      	pop	{r4, r5, r7, pc}

0800e3ce <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b0cc      	sub	sp, #304	@ 0x130
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	4602      	mov	r2, r0
 800e3d6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e3da:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e3de:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e3e0:	f107 0310 	add.w	r3, r7, #16
 800e3e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e3e8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e3ec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800e3fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e3fe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e402:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e406:	7812      	ldrb	r2, [r2, #0]
 800e408:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e40a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e40e:	3301      	adds	r3, #1
 800e410:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e414:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e418:	2218      	movs	r2, #24
 800e41a:	2100      	movs	r1, #0
 800e41c:	4618      	mov	r0, r3
 800e41e:	f000 fff1 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e422:	233f      	movs	r3, #63	@ 0x3f
 800e424:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800e428:	2385      	movs	r3, #133	@ 0x85
 800e42a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e42e:	f107 0310 	add.w	r3, r7, #16
 800e432:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e43a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e43e:	f107 030f 	add.w	r3, r7, #15
 800e442:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e446:	2301      	movs	r3, #1
 800e448:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e44c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e450:	2100      	movs	r1, #0
 800e452:	4618      	mov	r0, r3
 800e454:	f001 fa60 	bl	800f918 <hci_send_req>
 800e458:	4603      	mov	r3, r0
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	da01      	bge.n	800e462 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800e45e:	23ff      	movs	r3, #255	@ 0xff
 800e460:	e004      	b.n	800e46c <aci_gap_set_io_capability+0x9e>
  return status;
 800e462:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e466:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e46a:	781b      	ldrb	r3, [r3, #0]
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800e476:	b5b0      	push	{r4, r5, r7, lr}
 800e478:	b0cc      	sub	sp, #304	@ 0x130
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	4605      	mov	r5, r0
 800e47e:	460c      	mov	r4, r1
 800e480:	4610      	mov	r0, r2
 800e482:	4619      	mov	r1, r3
 800e484:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e488:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e48c:	462a      	mov	r2, r5
 800e48e:	701a      	strb	r2, [r3, #0]
 800e490:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e494:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e498:	4622      	mov	r2, r4
 800e49a:	701a      	strb	r2, [r3, #0]
 800e49c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4a0:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	701a      	strb	r2, [r3, #0]
 800e4a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e4b0:	460a      	mov	r2, r1
 800e4b2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800e4b4:	f107 0310 	add.w	r3, r7, #16
 800e4b8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e4bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4c0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800e4ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4d2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e4d6:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e4da:	7812      	ldrb	r2, [r2, #0]
 800e4dc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e4de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800e4e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e4ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e4f0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e4f4:	7812      	ldrb	r2, [r2, #0]
 800e4f6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e4f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800e502:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e506:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e50a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e50e:	7812      	ldrb	r2, [r2, #0]
 800e510:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e512:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e516:	3301      	adds	r3, #1
 800e518:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800e51c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e520:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e524:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e528:	7812      	ldrb	r2, [r2, #0]
 800e52a:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e52c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e530:	3301      	adds	r3, #1
 800e532:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800e536:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e53a:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800e53e:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e540:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e544:	3301      	adds	r3, #1
 800e546:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800e54a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e54e:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800e552:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e554:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e558:	3301      	adds	r3, #1
 800e55a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800e55e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e562:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e566:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e568:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e56c:	3301      	adds	r3, #1
 800e56e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800e572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e576:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800e57a:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800e57e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e582:	3304      	adds	r3, #4
 800e584:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800e588:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e58c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800e590:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e592:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e596:	3301      	adds	r3, #1
 800e598:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e59c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e5a0:	2218      	movs	r2, #24
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f000 ff2d 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e5aa:	233f      	movs	r3, #63	@ 0x3f
 800e5ac:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800e5b0:	2386      	movs	r3, #134	@ 0x86
 800e5b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e5b6:	f107 0310 	add.w	r3, r7, #16
 800e5ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e5be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e5c6:	f107 030f 	add.w	r3, r7, #15
 800e5ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e5ce:	2301      	movs	r3, #1
 800e5d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e5d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e5d8:	2100      	movs	r1, #0
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f001 f99c 	bl	800f918 <hci_send_req>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	da01      	bge.n	800e5ea <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e5e6:	23ff      	movs	r3, #255	@ 0xff
 800e5e8:	e004      	b.n	800e5f4 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800e5ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e5f2:	781b      	ldrb	r3, [r3, #0]
}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bdb0      	pop	{r4, r5, r7, pc}

0800e5fe <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800e5fe:	b580      	push	{r7, lr}
 800e600:	b0cc      	sub	sp, #304	@ 0x130
 800e602:	af00      	add	r7, sp, #0
 800e604:	4602      	mov	r2, r0
 800e606:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e60a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e60e:	6019      	str	r1, [r3, #0]
 800e610:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e614:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e618:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e61a:	f107 0310 	add.w	r3, r7, #16
 800e61e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e622:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e626:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e62a:	2200      	movs	r2, #0
 800e62c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e62e:	2300      	movs	r3, #0
 800e630:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e634:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e638:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e63c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e640:	8812      	ldrh	r2, [r2, #0]
 800e642:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e644:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e648:	3302      	adds	r3, #2
 800e64a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800e64e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e652:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e656:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e65a:	6812      	ldr	r2, [r2, #0]
 800e65c:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e664:	3304      	adds	r3, #4
 800e666:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e66a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e66e:	2218      	movs	r2, #24
 800e670:	2100      	movs	r1, #0
 800e672:	4618      	mov	r0, r3
 800e674:	f000 fec6 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e678:	233f      	movs	r3, #63	@ 0x3f
 800e67a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800e67e:	2388      	movs	r3, #136	@ 0x88
 800e680:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e684:	f107 0310 	add.w	r3, r7, #16
 800e688:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e68c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e690:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e694:	f107 030f 	add.w	r3, r7, #15
 800e698:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e69c:	2301      	movs	r3, #1
 800e69e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e6a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e6a6:	2100      	movs	r1, #0
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f001 f935 	bl	800f918 <hci_send_req>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	da01      	bge.n	800e6b8 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e6b4:	23ff      	movs	r3, #255	@ 0xff
 800e6b6:	e004      	b.n	800e6c2 <aci_gap_pass_key_resp+0xc4>
  return status;
 800e6b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e6c0:	781b      	ldrb	r3, [r3, #0]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e6c8:	46bd      	mov	sp, r7
 800e6ca:	bd80      	pop	{r7, pc}

0800e6cc <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800e6cc:	b590      	push	{r4, r7, lr}
 800e6ce:	b0cd      	sub	sp, #308	@ 0x134
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e6dc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e6e0:	6013      	str	r3, [r2, #0]
 800e6e2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6e6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	701a      	strb	r2, [r3, #0]
 800e6ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6f2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	701a      	strb	r2, [r3, #0]
 800e6fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6fe:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e702:	460a      	mov	r2, r1
 800e704:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e706:	f107 0310 	add.w	r3, r7, #16
 800e70a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e70e:	f107 0308 	add.w	r3, r7, #8
 800e712:	2207      	movs	r2, #7
 800e714:	2100      	movs	r1, #0
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fe74 	bl	800f404 <Osal_MemSet>
  int index_input = 0;
 800e71c:	2300      	movs	r3, #0
 800e71e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800e722:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e726:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e72a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e72e:	7812      	ldrb	r2, [r2, #0]
 800e730:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e732:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e736:	3301      	adds	r3, #1
 800e738:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800e73c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e740:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e744:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e748:	7812      	ldrb	r2, [r2, #0]
 800e74a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e74c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e750:	3301      	adds	r3, #1
 800e752:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800e756:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e75a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e75e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e762:	7812      	ldrb	r2, [r2, #0]
 800e764:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e766:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e76a:	3301      	adds	r3, #1
 800e76c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e770:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e774:	2218      	movs	r2, #24
 800e776:	2100      	movs	r1, #0
 800e778:	4618      	mov	r0, r3
 800e77a:	f000 fe43 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e77e:	233f      	movs	r3, #63	@ 0x3f
 800e780:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800e784:	238a      	movs	r3, #138	@ 0x8a
 800e786:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e78a:	f107 0310 	add.w	r3, r7, #16
 800e78e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e792:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e796:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800e79a:	f107 0308 	add.w	r3, r7, #8
 800e79e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800e7a2:	2307      	movs	r3, #7
 800e7a4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e7a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e7ac:	2100      	movs	r1, #0
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f001 f8b2 	bl	800f918 <hci_send_req>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	da01      	bge.n	800e7be <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e7ba:	23ff      	movs	r3, #255	@ 0xff
 800e7bc:	e02e      	b.n	800e81c <aci_gap_init+0x150>
  if ( resp.Status )
 800e7be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7c2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d005      	beq.n	800e7d8 <aci_gap_init+0x10c>
    return resp.Status;
 800e7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7d0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e7d4:	781b      	ldrb	r3, [r3, #0]
 800e7d6:	e021      	b.n	800e81c <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e7d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e7e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e7e4:	b29a      	uxth	r2, r3
 800e7e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e7f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7f6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e7fa:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e7fe:	b29a      	uxth	r2, r3
 800e800:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e804:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e80a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e80e:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e812:	b29a      	uxth	r2, r3
 800e814:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e818:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e81a:	2300      	movs	r3, #0
}
 800e81c:	4618      	mov	r0, r3
 800e81e:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e822:	46bd      	mov	sp, r7
 800e824:	bd90      	pop	{r4, r7, pc}

0800e826 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b0cc      	sub	sp, #304	@ 0x130
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	4602      	mov	r2, r0
 800e82e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e832:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e836:	6019      	str	r1, [r3, #0]
 800e838:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e83c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e840:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e842:	f107 0310 	add.w	r3, r7, #16
 800e846:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e84a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e84e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e852:	2200      	movs	r2, #0
 800e854:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e856:	2300      	movs	r3, #0
 800e858:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e85c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e860:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e864:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e868:	7812      	ldrb	r2, [r2, #0]
 800e86a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e86c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e870:	3301      	adds	r3, #1
 800e872:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e876:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e87a:	1c58      	adds	r0, r3, #1
 800e87c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e880:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e884:	781a      	ldrb	r2, [r3, #0]
 800e886:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e88a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e88e:	6819      	ldr	r1, [r3, #0]
 800e890:	f000 fda8 	bl	800f3e4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800e894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e898:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e8a2:	4413      	add	r3, r2
 800e8a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e8a8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e8ac:	2218      	movs	r2, #24
 800e8ae:	2100      	movs	r1, #0
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f000 fda7 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e8b6:	233f      	movs	r3, #63	@ 0x3f
 800e8b8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800e8bc:	238e      	movs	r3, #142	@ 0x8e
 800e8be:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e8c2:	f107 0310 	add.w	r3, r7, #16
 800e8c6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e8ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8ce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e8d2:	f107 030f 	add.w	r3, r7, #15
 800e8d6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e8da:	2301      	movs	r3, #1
 800e8dc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8e0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e8e4:	2100      	movs	r1, #0
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f001 f816 	bl	800f918 <hci_send_req>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	da01      	bge.n	800e8f6 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e8f2:	23ff      	movs	r3, #255	@ 0xff
 800e8f4:	e004      	b.n	800e900 <aci_gap_update_adv_data+0xda>
  return status;
 800e8f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8fa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e8fe:	781b      	ldrb	r3, [r3, #0]
}
 800e900:	4618      	mov	r0, r3
 800e902:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b088      	sub	sp, #32
 800e90e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e910:	2300      	movs	r3, #0
 800e912:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e914:	f107 0308 	add.w	r3, r7, #8
 800e918:	2218      	movs	r2, #24
 800e91a:	2100      	movs	r1, #0
 800e91c:	4618      	mov	r0, r3
 800e91e:	f000 fd71 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e922:	233f      	movs	r3, #63	@ 0x3f
 800e924:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e926:	2392      	movs	r3, #146	@ 0x92
 800e928:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e92a:	1dfb      	adds	r3, r7, #7
 800e92c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e92e:	2301      	movs	r3, #1
 800e930:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e932:	f107 0308 	add.w	r3, r7, #8
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f000 ffed 	bl	800f918 <hci_send_req>
 800e93e:	4603      	mov	r3, r0
 800e940:	2b00      	cmp	r3, #0
 800e942:	da01      	bge.n	800e948 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e944:	23ff      	movs	r3, #255	@ 0xff
 800e946:	e000      	b.n	800e94a <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e948:	79fb      	ldrb	r3, [r7, #7]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3720      	adds	r7, #32
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}

0800e952 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b0cc      	sub	sp, #304	@ 0x130
 800e956:	af00      	add	r7, sp, #0
 800e958:	4602      	mov	r2, r0
 800e95a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e95e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e962:	801a      	strh	r2, [r3, #0]
 800e964:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e968:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e96c:	460a      	mov	r2, r1
 800e96e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800e970:	f107 0310 	add.w	r3, r7, #16
 800e974:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e978:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e97c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e980:	2200      	movs	r2, #0
 800e982:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e984:	2300      	movs	r3, #0
 800e986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e98a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e98e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e992:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e996:	8812      	ldrh	r2, [r2, #0]
 800e998:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e99a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e99e:	3302      	adds	r3, #2
 800e9a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800e9a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9ac:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e9b0:	7812      	ldrb	r2, [r2, #0]
 800e9b2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e9b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9b8:	3301      	adds	r3, #1
 800e9ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9c2:	2218      	movs	r2, #24
 800e9c4:	2100      	movs	r1, #0
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f000 fd1c 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e9cc:	233f      	movs	r3, #63	@ 0x3f
 800e9ce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800e9d2:	23a5      	movs	r3, #165	@ 0xa5
 800e9d4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e9d8:	f107 0310 	add.w	r3, r7, #16
 800e9dc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e9e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e9e8:	f107 030f 	add.w	r3, r7, #15
 800e9ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 ff8b 	bl	800f918 <hci_send_req>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	da01      	bge.n	800ea0c <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800ea08:	23ff      	movs	r3, #255	@ 0xff
 800ea0a:	e004      	b.n	800ea16 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800ea0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea10:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea14:	781b      	ldrb	r3, [r3, #0]
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	bd80      	pop	{r7, pc}

0800ea20 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b088      	sub	sp, #32
 800ea24:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ea26:	2300      	movs	r3, #0
 800ea28:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea2a:	f107 0308 	add.w	r3, r7, #8
 800ea2e:	2218      	movs	r2, #24
 800ea30:	2100      	movs	r1, #0
 800ea32:	4618      	mov	r0, r3
 800ea34:	f000 fce6 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea38:	233f      	movs	r3, #63	@ 0x3f
 800ea3a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800ea3c:	f240 1301 	movw	r3, #257	@ 0x101
 800ea40:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ea42:	1dfb      	adds	r3, r7, #7
 800ea44:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ea46:	2301      	movs	r3, #1
 800ea48:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea4a:	f107 0308 	add.w	r3, r7, #8
 800ea4e:	2100      	movs	r1, #0
 800ea50:	4618      	mov	r0, r3
 800ea52:	f000 ff61 	bl	800f918 <hci_send_req>
 800ea56:	4603      	mov	r3, r0
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	da01      	bge.n	800ea60 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800ea5c:	23ff      	movs	r3, #255	@ 0xff
 800ea5e:	e000      	b.n	800ea62 <aci_gatt_init+0x42>
  return status;
 800ea60:	79fb      	ldrb	r3, [r7, #7]
}
 800ea62:	4618      	mov	r0, r3
 800ea64:	3720      	adds	r7, #32
 800ea66:	46bd      	mov	sp, r7
 800ea68:	bd80      	pop	{r7, pc}

0800ea6a <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800ea6a:	b590      	push	{r4, r7, lr}
 800ea6c:	b0cf      	sub	sp, #316	@ 0x13c
 800ea6e:	af00      	add	r7, sp, #0
 800ea70:	4604      	mov	r4, r0
 800ea72:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800ea76:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800ea7a:	6001      	str	r1, [r0, #0]
 800ea7c:	4610      	mov	r0, r2
 800ea7e:	4619      	mov	r1, r3
 800ea80:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea84:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ea88:	4622      	mov	r2, r4
 800ea8a:	701a      	strb	r2, [r3, #0]
 800ea8c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea90:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ea94:	4602      	mov	r2, r0
 800ea96:	701a      	strb	r2, [r3, #0]
 800ea98:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea9c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800eaa0:	460a      	mov	r2, r1
 800eaa2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800eaa4:	f107 0310 	add.w	r3, r7, #16
 800eaa8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800eaac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eab0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	2b01      	cmp	r3, #1
 800eab8:	d00a      	beq.n	800ead0 <aci_gatt_add_service+0x66>
 800eaba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eabe:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eac2:	781b      	ldrb	r3, [r3, #0]
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d101      	bne.n	800eacc <aci_gatt_add_service+0x62>
 800eac8:	2311      	movs	r3, #17
 800eaca:	e002      	b.n	800ead2 <aci_gatt_add_service+0x68>
 800eacc:	2301      	movs	r3, #1
 800eace:	e000      	b.n	800ead2 <aci_gatt_add_service+0x68>
 800ead0:	2303      	movs	r3, #3
 800ead2:	f107 0210 	add.w	r2, r7, #16
 800ead6:	4413      	add	r3, r2
 800ead8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800eadc:	f107 030c 	add.w	r3, r7, #12
 800eae0:	2203      	movs	r2, #3
 800eae2:	2100      	movs	r1, #0
 800eae4:	4618      	mov	r0, r3
 800eae6:	f000 fc8d 	bl	800f404 <Osal_MemSet>
  int index_input = 0;
 800eaea:	2300      	movs	r3, #0
 800eaec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800eaf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eaf4:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eaf8:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800eafc:	7812      	ldrb	r2, [r2, #0]
 800eafe:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eb00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb04:	3301      	adds	r3, #1
 800eb06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800eb0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eb0e:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eb12:	781b      	ldrb	r3, [r3, #0]
 800eb14:	2b01      	cmp	r3, #1
 800eb16:	d002      	beq.n	800eb1e <aci_gatt_add_service+0xb4>
 800eb18:	2b02      	cmp	r3, #2
 800eb1a:	d004      	beq.n	800eb26 <aci_gatt_add_service+0xbc>
 800eb1c:	e007      	b.n	800eb2e <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800eb1e:	2302      	movs	r3, #2
 800eb20:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800eb24:	e005      	b.n	800eb32 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800eb26:	2310      	movs	r3, #16
 800eb28:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800eb2c:	e001      	b.n	800eb32 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800eb2e:	2397      	movs	r3, #151	@ 0x97
 800eb30:	e06c      	b.n	800ec0c <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800eb32:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eb36:	1c58      	adds	r0, r3, #1
 800eb38:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800eb3c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eb40:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800eb44:	6819      	ldr	r1, [r3, #0]
 800eb46:	f000 fc4d 	bl	800f3e4 <Osal_MemCpy>
    index_input += size;
 800eb4a:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800eb4e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eb52:	4413      	add	r3, r2
 800eb54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800eb58:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb5c:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eb60:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800eb64:	7812      	ldrb	r2, [r2, #0]
 800eb66:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800eb68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800eb72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb76:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eb7a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800eb7e:	7812      	ldrb	r2, [r2, #0]
 800eb80:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800eb82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb86:	3301      	adds	r3, #1
 800eb88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb90:	2218      	movs	r2, #24
 800eb92:	2100      	movs	r1, #0
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 fc35 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb9a:	233f      	movs	r3, #63	@ 0x3f
 800eb9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800eba0:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800eba4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eba8:	f107 0310 	add.w	r3, r7, #16
 800ebac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ebb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800ebb8:	f107 030c 	add.w	r3, r7, #12
 800ebbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ebc0:	2303      	movs	r3, #3
 800ebc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ebc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebca:	2100      	movs	r1, #0
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f000 fea3 	bl	800f918 <hci_send_req>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	da01      	bge.n	800ebdc <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800ebd8:	23ff      	movs	r3, #255	@ 0xff
 800ebda:	e017      	b.n	800ec0c <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ebdc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebe0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ebe4:	781b      	ldrb	r3, [r3, #0]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d005      	beq.n	800ebf6 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ebea:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebee:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	e00a      	b.n	800ec0c <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ebf6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebfa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ebfe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ec02:	b29a      	uxth	r2, r3
 800ec04:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ec08:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ec0a:	2300      	movs	r3, #0
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd90      	pop	{r4, r7, pc}

0800ec16 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ec16:	b590      	push	{r4, r7, lr}
 800ec18:	b0d1      	sub	sp, #324	@ 0x144
 800ec1a:	af00      	add	r7, sp, #0
 800ec1c:	4604      	mov	r4, r0
 800ec1e:	4608      	mov	r0, r1
 800ec20:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ec24:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800ec28:	600a      	str	r2, [r1, #0]
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ec30:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ec34:	4622      	mov	r2, r4
 800ec36:	801a      	strh	r2, [r3, #0]
 800ec38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ec3c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ec40:	4602      	mov	r2, r0
 800ec42:	701a      	strb	r2, [r3, #0]
 800ec44:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ec48:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800ec4c:	460a      	mov	r2, r1
 800ec4e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ec50:	f107 0318 	add.w	r3, r7, #24
 800ec54:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ec58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ec5c:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b01      	cmp	r3, #1
 800ec64:	d00a      	beq.n	800ec7c <aci_gatt_add_char+0x66>
 800ec66:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ec6a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d101      	bne.n	800ec78 <aci_gatt_add_char+0x62>
 800ec74:	2313      	movs	r3, #19
 800ec76:	e002      	b.n	800ec7e <aci_gatt_add_char+0x68>
 800ec78:	2303      	movs	r3, #3
 800ec7a:	e000      	b.n	800ec7e <aci_gatt_add_char+0x68>
 800ec7c:	2305      	movs	r3, #5
 800ec7e:	f107 0218 	add.w	r2, r7, #24
 800ec82:	4413      	add	r3, r2
 800ec84:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ec88:	f107 0314 	add.w	r3, r7, #20
 800ec8c:	2203      	movs	r2, #3
 800ec8e:	2100      	movs	r1, #0
 800ec90:	4618      	mov	r0, r3
 800ec92:	f000 fbb7 	bl	800f404 <Osal_MemSet>
  int index_input = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800ec9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800eca0:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800eca4:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800eca8:	8812      	ldrh	r2, [r2, #0]
 800ecaa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ecac:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ecb0:	3302      	adds	r3, #2
 800ecb2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800ecb6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ecba:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800ecbe:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ecc2:	7812      	ldrb	r2, [r2, #0]
 800ecc4:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ecc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ecca:	3301      	adds	r3, #1
 800eccc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ecd0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ecd4:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ecd8:	781b      	ldrb	r3, [r3, #0]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d002      	beq.n	800ece4 <aci_gatt_add_char+0xce>
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d004      	beq.n	800ecec <aci_gatt_add_char+0xd6>
 800ece2:	e007      	b.n	800ecf4 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800ece4:	2302      	movs	r3, #2
 800ece6:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800ecea:	e005      	b.n	800ecf8 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800ecec:	2310      	movs	r3, #16
 800ecee:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800ecf2:	e001      	b.n	800ecf8 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ecf4:	2397      	movs	r3, #151	@ 0x97
 800ecf6:	e091      	b.n	800ee1c <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800ecf8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ecfc:	1cd8      	adds	r0, r3, #3
 800ecfe:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800ed02:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed06:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ed0a:	6819      	ldr	r1, [r3, #0]
 800ed0c:	f000 fb6a 	bl	800f3e4 <Osal_MemCpy>
    index_input += size;
 800ed10:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800ed14:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800ed18:	4413      	add	r3, r2
 800ed1a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ed1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed22:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800ed26:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800ed2a:	8812      	ldrh	r2, [r2, #0]
 800ed2c:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ed2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed32:	3302      	adds	r3, #2
 800ed34:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ed38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed3c:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ed40:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ed42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed46:	3301      	adds	r3, #1
 800ed48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ed4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed50:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ed54:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ed56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed5a:	3301      	adds	r3, #1
 800ed5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ed60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed64:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800ed68:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ed6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed6e:	3301      	adds	r3, #1
 800ed70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ed74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed78:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800ed7c:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ed7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed82:	3301      	adds	r3, #1
 800ed84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ed88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ed8c:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800ed90:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800ed92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ed96:	3301      	adds	r3, #1
 800ed98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ed9c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800eda0:	2218      	movs	r2, #24
 800eda2:	2100      	movs	r1, #0
 800eda4:	4618      	mov	r0, r3
 800eda6:	f000 fb2d 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800edaa:	233f      	movs	r3, #63	@ 0x3f
 800edac:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800edb0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800edb4:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800edb8:	f107 0318 	add.w	r3, r7, #24
 800edbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800edc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800edc4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800edc8:	f107 0314 	add.w	r3, r7, #20
 800edcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800edd0:	2303      	movs	r3, #3
 800edd2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800edd6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800edda:	2100      	movs	r1, #0
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 fd9b 	bl	800f918 <hci_send_req>
 800ede2:	4603      	mov	r3, r0
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	da01      	bge.n	800edec <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800ede8:	23ff      	movs	r3, #255	@ 0xff
 800edea:	e017      	b.n	800ee1c <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800edec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800edf0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d005      	beq.n	800ee06 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800edfa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800edfe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	e00a      	b.n	800ee1c <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800ee06:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ee0a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ee0e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ee12:	b29a      	uxth	r2, r3
 800ee14:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800ee18:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800ee22:	46bd      	mov	sp, r7
 800ee24:	bd90      	pop	{r4, r7, pc}

0800ee26 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ee26:	b5b0      	push	{r4, r5, r7, lr}
 800ee28:	b0cc      	sub	sp, #304	@ 0x130
 800ee2a:	af00      	add	r7, sp, #0
 800ee2c:	4605      	mov	r5, r0
 800ee2e:	460c      	mov	r4, r1
 800ee30:	4610      	mov	r0, r2
 800ee32:	4619      	mov	r1, r3
 800ee34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee38:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ee3c:	462a      	mov	r2, r5
 800ee3e:	801a      	strh	r2, [r3, #0]
 800ee40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee44:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ee48:	4622      	mov	r2, r4
 800ee4a:	801a      	strh	r2, [r3, #0]
 800ee4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee50:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800ee54:	4602      	mov	r2, r0
 800ee56:	701a      	strb	r2, [r3, #0]
 800ee58:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee5c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800ee60:	460a      	mov	r2, r1
 800ee62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ee64:	f107 0310 	add.w	r3, r7, #16
 800ee68:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ee6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ee74:	2200      	movs	r2, #0
 800ee76:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee78:	2300      	movs	r3, #0
 800ee7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800ee7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee82:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ee86:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ee8a:	8812      	ldrh	r2, [r2, #0]
 800ee8c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ee8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee92:	3302      	adds	r3, #2
 800ee94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800ee98:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee9c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eea0:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800eea4:	8812      	ldrh	r2, [r2, #0]
 800eea6:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800eea8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eeac:	3302      	adds	r3, #2
 800eeae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800eeb2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eeb6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eeba:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800eebe:	7812      	ldrb	r2, [r2, #0]
 800eec0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800eec2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eec6:	3301      	adds	r3, #1
 800eec8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800eecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eed0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eed4:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800eed8:	7812      	ldrb	r2, [r2, #0]
 800eeda:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eedc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eee0:	3301      	adds	r3, #1
 800eee2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800eee6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eeea:	1d98      	adds	r0, r3, #6
 800eeec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eef0:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800eef4:	781b      	ldrb	r3, [r3, #0]
 800eef6:	461a      	mov	r2, r3
 800eef8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800eefc:	f000 fa72 	bl	800f3e4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800ef00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef04:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ef0e:	4413      	add	r3, r2
 800ef10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef14:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef18:	2218      	movs	r2, #24
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	f000 fa71 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef22:	233f      	movs	r3, #63	@ 0x3f
 800ef24:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800ef28:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800ef2c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ef30:	f107 0310 	add.w	r3, r7, #16
 800ef34:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ef38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef3c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ef40:	f107 030f 	add.w	r3, r7, #15
 800ef44:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ef48:	2301      	movs	r3, #1
 800ef4a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef52:	2100      	movs	r1, #0
 800ef54:	4618      	mov	r0, r3
 800ef56:	f000 fcdf 	bl	800f918 <hci_send_req>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	da01      	bge.n	800ef64 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800ef60:	23ff      	movs	r3, #255	@ 0xff
 800ef62:	e004      	b.n	800ef6e <aci_gatt_update_char_value+0x148>
  return status;
 800ef64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef68:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ef6c:	781b      	ldrb	r3, [r3, #0]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bdb0      	pop	{r4, r5, r7, pc}

0800ef78 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b0cc      	sub	sp, #304	@ 0x130
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	4602      	mov	r2, r0
 800ef80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef84:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ef88:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800ef8a:	f107 0310 	add.w	r3, r7, #16
 800ef8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ef92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef96:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800efa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efa8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efac:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800efb0:	8812      	ldrh	r2, [r2, #0]
 800efb2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800efb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efb8:	3302      	adds	r3, #2
 800efba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800efbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efc2:	2218      	movs	r2, #24
 800efc4:	2100      	movs	r1, #0
 800efc6:	4618      	mov	r0, r3
 800efc8:	f000 fa1c 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800efcc:	233f      	movs	r3, #63	@ 0x3f
 800efce:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800efd2:	f240 1325 	movw	r3, #293	@ 0x125
 800efd6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800efda:	f107 0310 	add.w	r3, r7, #16
 800efde:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800efe2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efe6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800efea:	f107 030f 	add.w	r3, r7, #15
 800efee:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eff2:	2301      	movs	r3, #1
 800eff4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eff8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800effc:	2100      	movs	r1, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f000 fc8a 	bl	800f918 <hci_send_req>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	da01      	bge.n	800f00e <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800f00a:	23ff      	movs	r3, #255	@ 0xff
 800f00c:	e004      	b.n	800f018 <aci_gatt_confirm_indication+0xa0>
  return status;
 800f00e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f012:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f016:	781b      	ldrb	r3, [r3, #0]
}
 800f018:	4618      	mov	r0, r3
 800f01a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f01e:	46bd      	mov	sp, r7
 800f020:	bd80      	pop	{r7, pc}

0800f022 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800f022:	b580      	push	{r7, lr}
 800f024:	b0cc      	sub	sp, #304	@ 0x130
 800f026:	af00      	add	r7, sp, #0
 800f028:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f02c:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f036:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f03a:	4602      	mov	r2, r0
 800f03c:	701a      	strb	r2, [r3, #0]
 800f03e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f042:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f046:	460a      	mov	r2, r1
 800f048:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f04a:	f107 0310 	add.w	r3, r7, #16
 800f04e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f056:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f05a:	2200      	movs	r2, #0
 800f05c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f05e:	2300      	movs	r3, #0
 800f060:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800f064:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f068:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f06c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f070:	7812      	ldrb	r2, [r2, #0]
 800f072:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f074:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f078:	3301      	adds	r3, #1
 800f07a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800f07e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f082:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f086:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f08a:	7812      	ldrb	r2, [r2, #0]
 800f08c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f08e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f092:	3301      	adds	r3, #1
 800f094:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f098:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f09c:	1c98      	adds	r0, r3, #2
 800f09e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f0a6:	781a      	ldrb	r2, [r3, #0]
 800f0a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0ac:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f0b0:	6819      	ldr	r1, [r3, #0]
 800f0b2:	f000 f997 	bl	800f3e4 <Osal_MemCpy>
  index_input += Length;
 800f0b6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0ba:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f0c4:	4413      	add	r3, r2
 800f0c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f0ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f0ce:	2218      	movs	r2, #24
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f996 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f0d8:	233f      	movs	r3, #63	@ 0x3f
 800f0da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f0de:	230c      	movs	r3, #12
 800f0e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f0e4:	f107 0310 	add.w	r3, r7, #16
 800f0e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f0ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f0f4:	f107 030f 	add.w	r3, r7, #15
 800f0f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f106:	2100      	movs	r1, #0
 800f108:	4618      	mov	r0, r3
 800f10a:	f000 fc05 	bl	800f918 <hci_send_req>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	da01      	bge.n	800f118 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f114:	23ff      	movs	r3, #255	@ 0xff
 800f116:	e004      	b.n	800f122 <aci_hal_write_config_data+0x100>
  return status;
 800f118:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f11c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f120:	781b      	ldrb	r3, [r3, #0]
}
 800f122:	4618      	mov	r0, r3
 800f124:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b0cc      	sub	sp, #304	@ 0x130
 800f130:	af00      	add	r7, sp, #0
 800f132:	4602      	mov	r2, r0
 800f134:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f138:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f13c:	701a      	strb	r2, [r3, #0]
 800f13e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f142:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f146:	460a      	mov	r2, r1
 800f148:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f14a:	f107 0310 	add.w	r3, r7, #16
 800f14e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f156:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f15e:	2300      	movs	r3, #0
 800f160:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800f164:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f168:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f16c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f170:	7812      	ldrb	r2, [r2, #0]
 800f172:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f174:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f178:	3301      	adds	r3, #1
 800f17a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800f17e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f182:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f186:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f18a:	7812      	ldrb	r2, [r2, #0]
 800f18c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f18e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f192:	3301      	adds	r3, #1
 800f194:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f198:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f19c:	2218      	movs	r2, #24
 800f19e:	2100      	movs	r1, #0
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	f000 f92f 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1a6:	233f      	movs	r3, #63	@ 0x3f
 800f1a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800f1ac:	230f      	movs	r3, #15
 800f1ae:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f1b2:	f107 0310 	add.w	r3, r7, #16
 800f1b6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f1ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f1be:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f1c2:	f107 030f 	add.w	r3, r7, #15
 800f1c6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f1d0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f000 fb9e 	bl	800f918 <hci_send_req>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	da01      	bge.n	800f1e6 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f1e2:	23ff      	movs	r3, #255	@ 0xff
 800f1e4:	e004      	b.n	800f1f0 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800f1e6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1ea:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f1ee:	781b      	ldrb	r3, [r3, #0]
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	bd80      	pop	{r7, pc}

0800f1fa <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800f1fa:	b580      	push	{r7, lr}
 800f1fc:	b0cc      	sub	sp, #304	@ 0x130
 800f1fe:	af00      	add	r7, sp, #0
 800f200:	4602      	mov	r2, r0
 800f202:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f206:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f20a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800f20c:	f107 0310 	add.w	r3, r7, #16
 800f210:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f214:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f218:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f21c:	2200      	movs	r2, #0
 800f21e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f220:	2300      	movs	r3, #0
 800f222:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800f226:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f22a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f22e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f232:	8812      	ldrh	r2, [r2, #0]
 800f234:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f236:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f23a:	3302      	adds	r3, #2
 800f23c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f244:	2218      	movs	r2, #24
 800f246:	2100      	movs	r1, #0
 800f248:	4618      	mov	r0, r3
 800f24a:	f000 f8db 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f24e:	233f      	movs	r3, #63	@ 0x3f
 800f250:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800f254:	2318      	movs	r3, #24
 800f256:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f25a:	f107 0310 	add.w	r3, r7, #16
 800f25e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f262:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f266:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f26a:	f107 030f 	add.w	r3, r7, #15
 800f26e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f272:	2301      	movs	r3, #1
 800f274:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f278:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f27c:	2100      	movs	r1, #0
 800f27e:	4618      	mov	r0, r3
 800f280:	f000 fb4a 	bl	800f918 <hci_send_req>
 800f284:	4603      	mov	r3, r0
 800f286:	2b00      	cmp	r3, #0
 800f288:	da01      	bge.n	800f28e <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800f28a:	23ff      	movs	r3, #255	@ 0xff
 800f28c:	e004      	b.n	800f298 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800f28e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f292:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f296:	781b      	ldrb	r3, [r3, #0]
}
 800f298:	4618      	mov	r0, r3
 800f29a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}

0800f2a2 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800f2a2:	b580      	push	{r7, lr}
 800f2a4:	b088      	sub	sp, #32
 800f2a6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2ac:	f107 0308 	add.w	r3, r7, #8
 800f2b0:	2218      	movs	r2, #24
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 f8a5 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x03;
 800f2ba:	2303      	movs	r3, #3
 800f2bc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f2c2:	1dfb      	adds	r3, r7, #7
 800f2c4:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2ca:	f107 0308 	add.w	r3, r7, #8
 800f2ce:	2100      	movs	r1, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f000 fb21 	bl	800f918 <hci_send_req>
 800f2d6:	4603      	mov	r3, r0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	da01      	bge.n	800f2e0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f2dc:	23ff      	movs	r3, #255	@ 0xff
 800f2de:	e000      	b.n	800f2e2 <hci_reset+0x40>
  return status;
 800f2e0:	79fb      	ldrb	r3, [r7, #7]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3720      	adds	r7, #32
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}

0800f2ea <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800f2ea:	b590      	push	{r4, r7, lr}
 800f2ec:	b0cd      	sub	sp, #308	@ 0x134
 800f2ee:	af00      	add	r7, sp, #0
 800f2f0:	4604      	mov	r4, r0
 800f2f2:	4608      	mov	r0, r1
 800f2f4:	4611      	mov	r1, r2
 800f2f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f2fe:	4622      	mov	r2, r4
 800f300:	701a      	strb	r2, [r3, #0]
 800f302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f306:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f30a:	4602      	mov	r2, r0
 800f30c:	701a      	strb	r2, [r3, #0]
 800f30e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f312:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f316:	460a      	mov	r2, r1
 800f318:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800f31a:	f107 0310 	add.w	r3, r7, #16
 800f31e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f322:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f326:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f32a:	2200      	movs	r2, #0
 800f32c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800f334:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f338:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f33c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f340:	7812      	ldrb	r2, [r2, #0]
 800f342:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f344:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f348:	3301      	adds	r3, #1
 800f34a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800f34e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f352:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f356:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f35a:	7812      	ldrb	r2, [r2, #0]
 800f35c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f35e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f362:	3301      	adds	r3, #1
 800f364:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800f368:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f36c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f370:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f374:	7812      	ldrb	r2, [r2, #0]
 800f376:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f378:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f37c:	3301      	adds	r3, #1
 800f37e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f382:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f386:	2218      	movs	r2, #24
 800f388:	2100      	movs	r1, #0
 800f38a:	4618      	mov	r0, r3
 800f38c:	f000 f83a 	bl	800f404 <Osal_MemSet>
  rq.ogf = 0x08;
 800f390:	2308      	movs	r3, #8
 800f392:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800f396:	2331      	movs	r3, #49	@ 0x31
 800f398:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f39c:	f107 0310 	add.w	r3, r7, #16
 800f3a0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f3a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f3a8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f3ac:	f107 030f 	add.w	r3, r7, #15
 800f3b0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3ba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3be:	2100      	movs	r1, #0
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f000 faa9 	bl	800f918 <hci_send_req>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	da01      	bge.n	800f3d0 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800f3cc:	23ff      	movs	r3, #255	@ 0xff
 800f3ce:	e004      	b.n	800f3da <hci_le_set_default_phy+0xf0>
  return status;
 800f3d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f3d8:	781b      	ldrb	r3, [r3, #0]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	bd90      	pop	{r4, r7, pc}

0800f3e4 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b084      	sub	sp, #16
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	60f8      	str	r0, [r7, #12]
 800f3ec:	60b9      	str	r1, [r7, #8]
 800f3ee:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800f3f0:	687a      	ldr	r2, [r7, #4]
 800f3f2:	68b9      	ldr	r1, [r7, #8]
 800f3f4:	68f8      	ldr	r0, [r7, #12]
 800f3f6:	f003 fddc 	bl	8012fb2 <memcpy>
 800f3fa:	4603      	mov	r3, r0
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3710      	adds	r7, #16
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b084      	sub	sp, #16
 800f408:	af00      	add	r7, sp, #0
 800f40a:	60f8      	str	r0, [r7, #12]
 800f40c:	60b9      	str	r1, [r7, #8]
 800f40e:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	68b9      	ldr	r1, [r7, #8]
 800f414:	68f8      	ldr	r0, [r7, #12]
 800f416:	f003 fd3b 	bl	8012e90 <memset>
 800f41a:	4603      	mov	r3, r0
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3710      	adds	r7, #16
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800f424:	b480      	push	{r7}
 800f426:	af00      	add	r7, sp, #0
  return;
 800f428:	bf00      	nop
}
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr

0800f432 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800f432:	b480      	push	{r7}
 800f434:	af00      	add	r7, sp, #0
  return;
 800f436:	bf00      	nop
}
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800f440:	b480      	push	{r7}
 800f442:	af00      	add	r7, sp, #0
  return;
 800f444:	bf00      	nop
}
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr

0800f44e <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800f44e:	b480      	push	{r7}
 800f450:	af00      	add	r7, sp, #0
  return;
 800f452:	bf00      	nop
}
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
  return;
 800f460:	bf00      	nop
}
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800f46a:	b480      	push	{r7}
 800f46c:	af00      	add	r7, sp, #0
  return;
 800f46e:	bf00      	nop
}
 800f470:	46bd      	mov	sp, r7
 800f472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f476:	4770      	bx	lr

0800f478 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800f478:	b480      	push	{r7}
 800f47a:	af00      	add	r7, sp, #0
  return;
 800f47c:	bf00      	nop
}
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr

0800f486 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800f486:	b480      	push	{r7}
 800f488:	af00      	add	r7, sp, #0
  return;
 800f48a:	bf00      	nop
}
 800f48c:	46bd      	mov	sp, r7
 800f48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f492:	4770      	bx	lr

0800f494 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800f494:	b480      	push	{r7}
 800f496:	af00      	add	r7, sp, #0
  return;
 800f498:	bf00      	nop
}
 800f49a:	46bd      	mov	sp, r7
 800f49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a0:	4770      	bx	lr

0800f4a2 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	af00      	add	r7, sp, #0
  return;
 800f4a6:	bf00      	nop
}
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	af00      	add	r7, sp, #0
  return;
 800f4b4:	bf00      	nop
}
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr

0800f4be <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800f4be:	b480      	push	{r7}
 800f4c0:	af00      	add	r7, sp, #0
  return;
 800f4c2:	bf00      	nop
}
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	af00      	add	r7, sp, #0
  return;
 800f4d0:	bf00      	nop
}
 800f4d2:	46bd      	mov	sp, r7
 800f4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d8:	4770      	bx	lr

0800f4da <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800f4da:	b480      	push	{r7}
 800f4dc:	af00      	add	r7, sp, #0
  return;
 800f4de:	bf00      	nop
}
 800f4e0:	46bd      	mov	sp, r7
 800f4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e6:	4770      	bx	lr

0800f4e8 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800f4e8:	b480      	push	{r7}
 800f4ea:	af00      	add	r7, sp, #0
  return;
 800f4ec:	bf00      	nop
}
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f4:	4770      	bx	lr

0800f4f6 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800f4f6:	b480      	push	{r7}
 800f4f8:	af00      	add	r7, sp, #0
  return;
 800f4fa:	bf00      	nop
}
 800f4fc:	46bd      	mov	sp, r7
 800f4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f502:	4770      	bx	lr

0800f504 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800f504:	b480      	push	{r7}
 800f506:	af00      	add	r7, sp, #0
  return;
 800f508:	bf00      	nop
}
 800f50a:	46bd      	mov	sp, r7
 800f50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f510:	4770      	bx	lr
	...

0800f514 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800f518:	4b04      	ldr	r3, [pc, #16]	@ (800f52c <SVCCTL_Init+0x18>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800f51e:	4b04      	ldr	r3, [pc, #16]	@ (800f530 <SVCCTL_Init+0x1c>)
 800f520:	2200      	movs	r2, #0
 800f522:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800f524:	f000 f806 	bl	800f534 <SVCCTL_SvcInit>

  return;
 800f528:	bf00      	nop
}
 800f52a:	bd80      	pop	{r7, pc}
 800f52c:	2000016c 	.word	0x2000016c
 800f530:	2000018c 	.word	0x2000018c

0800f534 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	af00      	add	r7, sp, #0
  BAS_Init();
 800f538:	f7ff ff74 	bl	800f424 <BAS_Init>

  BLS_Init();
 800f53c:	f7ff ff79 	bl	800f432 <BLS_Init>

  CRS_STM_Init();
 800f540:	f7ff ff7e 	bl	800f440 <CRS_STM_Init>

  DIS_Init();
 800f544:	f7ff ff83 	bl	800f44e <DIS_Init>

  EDS_STM_Init();
 800f548:	f7ff ff88 	bl	800f45c <EDS_STM_Init>

  HIDS_Init();
 800f54c:	f7ff ff8d 	bl	800f46a <HIDS_Init>

  HRS_Init();
 800f550:	f7ff ff92 	bl	800f478 <HRS_Init>

  HTS_Init();
 800f554:	f7ff ff97 	bl	800f486 <HTS_Init>

  IAS_Init();
 800f558:	f7ff ff9c 	bl	800f494 <IAS_Init>

  LLS_Init();
 800f55c:	f7ff ffa1 	bl	800f4a2 <LLS_Init>

  TPS_Init();
 800f560:	f7ff ffa6 	bl	800f4b0 <TPS_Init>

  MOTENV_STM_Init();
 800f564:	f7ff ffab 	bl	800f4be <MOTENV_STM_Init>

  P2PS_STM_Init();
 800f568:	f7ff ffb0 	bl	800f4cc <P2PS_STM_Init>

  ZDD_STM_Init();
 800f56c:	f7ff ffb5 	bl	800f4da <ZDD_STM_Init>

  OTAS_STM_Init();
 800f570:	f7ff ffba 	bl	800f4e8 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800f574:	f7ff ffc6 	bl	800f504 <BVOPUS_STM_Init>

  MESH_Init();
 800f578:	f7ff ffbd 	bl	800f4f6 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800f57c:	f002 fb5a 	bl	8011c34 <SVCCTL_InitCustomSvc>
  
  return;
 800f580:	bf00      	nop
}
 800f582:	bd80      	pop	{r7, pc}

0800f584 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f58c:	4b09      	ldr	r3, [pc, #36]	@ (800f5b4 <SVCCTL_RegisterSvcHandler+0x30>)
 800f58e:	7f1b      	ldrb	r3, [r3, #28]
 800f590:	4619      	mov	r1, r3
 800f592:	4a08      	ldr	r2, [pc, #32]	@ (800f5b4 <SVCCTL_RegisterSvcHandler+0x30>)
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f59a:	4b06      	ldr	r3, [pc, #24]	@ (800f5b4 <SVCCTL_RegisterSvcHandler+0x30>)
 800f59c:	7f1b      	ldrb	r3, [r3, #28]
 800f59e:	3301      	adds	r3, #1
 800f5a0:	b2da      	uxtb	r2, r3
 800f5a2:	4b04      	ldr	r3, [pc, #16]	@ (800f5b4 <SVCCTL_RegisterSvcHandler+0x30>)
 800f5a4:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800f5a6:	bf00      	nop
}
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr
 800f5b2:	bf00      	nop
 800f5b4:	2000016c 	.word	0x2000016c

0800f5b8 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b086      	sub	sp, #24
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	3301      	adds	r3, #1
 800f5c4:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2bff      	cmp	r3, #255	@ 0xff
 800f5d0:	d125      	bne.n	800f61e <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	3302      	adds	r3, #2
 800f5d6:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f5e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f5e6:	d118      	bne.n	800f61a <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	757b      	strb	r3, [r7, #21]
 800f5ec:	e00d      	b.n	800f60a <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f5ee:	7d7b      	ldrb	r3, [r7, #21]
 800f5f0:	4a1a      	ldr	r2, [pc, #104]	@ (800f65c <SVCCTL_UserEvtRx+0xa4>)
 800f5f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	4798      	blx	r3
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f5fe:	7dfb      	ldrb	r3, [r7, #23]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d108      	bne.n	800f616 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f604:	7d7b      	ldrb	r3, [r7, #21]
 800f606:	3301      	adds	r3, #1
 800f608:	757b      	strb	r3, [r7, #21]
 800f60a:	4b14      	ldr	r3, [pc, #80]	@ (800f65c <SVCCTL_UserEvtRx+0xa4>)
 800f60c:	7f1b      	ldrb	r3, [r3, #28]
 800f60e:	7d7a      	ldrb	r2, [r7, #21]
 800f610:	429a      	cmp	r2, r3
 800f612:	d3ec      	bcc.n	800f5ee <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f614:	e002      	b.n	800f61c <SVCCTL_UserEvtRx+0x64>
              break;
 800f616:	bf00      	nop
          break;
 800f618:	e000      	b.n	800f61c <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f61a:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f61c:	e000      	b.n	800f620 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f61e:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f620:	7dfb      	ldrb	r3, [r7, #23]
 800f622:	2b02      	cmp	r3, #2
 800f624:	d00f      	beq.n	800f646 <SVCCTL_UserEvtRx+0x8e>
 800f626:	2b02      	cmp	r3, #2
 800f628:	dc10      	bgt.n	800f64c <SVCCTL_UserEvtRx+0x94>
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d002      	beq.n	800f634 <SVCCTL_UserEvtRx+0x7c>
 800f62e:	2b01      	cmp	r3, #1
 800f630:	d006      	beq.n	800f640 <SVCCTL_UserEvtRx+0x88>
 800f632:	e00b      	b.n	800f64c <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 fffb 	bl	8010630 <SVCCTL_App_Notification>
 800f63a:	4603      	mov	r3, r0
 800f63c:	75bb      	strb	r3, [r7, #22]
      break;
 800f63e:	e008      	b.n	800f652 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f640:	2301      	movs	r3, #1
 800f642:	75bb      	strb	r3, [r7, #22]
      break;
 800f644:	e005      	b.n	800f652 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f646:	2300      	movs	r3, #0
 800f648:	75bb      	strb	r3, [r7, #22]
      break;
 800f64a:	e002      	b.n	800f652 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f64c:	2301      	movs	r3, #1
 800f64e:	75bb      	strb	r3, [r7, #22]
      break;
 800f650:	bf00      	nop
  }

  return (return_status);
 800f652:	7dbb      	ldrb	r3, [r7, #22]
}
 800f654:	4618      	mov	r0, r3
 800f656:	3718      	adds	r7, #24
 800f658:	46bd      	mov	sp, r7
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	2000016c 	.word	0x2000016c

0800f660 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b088      	sub	sp, #32
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f668:	f107 030c 	add.w	r3, r7, #12
 800f66c:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	212e      	movs	r1, #46	@ 0x2e
 800f678:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800f67c:	f000 fae8 	bl	800fc50 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f680:	69fb      	ldr	r3, [r7, #28]
 800f682:	330b      	adds	r3, #11
 800f684:	78db      	ldrb	r3, [r3, #3]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f68e:	b580      	push	{r7, lr}
 800f690:	b088      	sub	sp, #32
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f696:	f107 030c 	add.w	r3, r7, #12
 800f69a:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f6a2:	69fb      	ldr	r3, [r7, #28]
 800f6a4:	210f      	movs	r1, #15
 800f6a6:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800f6aa:	f000 fad1 	bl	800fc50 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f6ae:	69fb      	ldr	r3, [r7, #28]
 800f6b0:	330b      	adds	r3, #11
 800f6b2:	78db      	ldrb	r3, [r3, #3]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3720      	adds	r7, #32
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b088      	sub	sp, #32
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f6c4:	f107 030c 	add.w	r3, r7, #12
 800f6c8:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f6ca:	69fb      	ldr	r3, [r7, #28]
 800f6cc:	687a      	ldr	r2, [r7, #4]
 800f6ce:	2110      	movs	r1, #16
 800f6d0:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800f6d4:	f000 fabc 	bl	800fc50 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	330b      	adds	r3, #11
 800f6dc:	78db      	ldrb	r3, [r3, #3]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3720      	adds	r7, #32
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
	...

0800f6e8 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f6e8:	b480      	push	{r7}
 800f6ea:	b08b      	sub	sp, #44	@ 0x2c
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f700:	2300      	movs	r3, #0
 800f702:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f704:	2300      	movs	r3, #0
 800f706:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f708:	2300      	movs	r3, #0
 800f70a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f70c:	2300      	movs	r3, #0
 800f70e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f710:	4b4a      	ldr	r3, [pc, #296]	@ (800f83c <SHCI_GetWirelessFwInfo+0x154>)
 800f712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f714:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f718:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	009b      	lsls	r3, r3, #2
 800f71e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800f722:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	4a44      	ldr	r2, [pc, #272]	@ (800f840 <SHCI_GetWirelessFwInfo+0x158>)
 800f730:	4293      	cmp	r3, r2
 800f732:	d10f      	bne.n	800f754 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	695b      	ldr	r3, [r3, #20]
 800f738:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f73a:	68bb      	ldr	r3, [r7, #8]
 800f73c:	699b      	ldr	r3, [r3, #24]
 800f73e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f740:	68bb      	ldr	r3, [r7, #8]
 800f742:	69db      	ldr	r3, [r3, #28]
 800f744:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f746:	68bb      	ldr	r3, [r7, #8]
 800f748:	68db      	ldr	r3, [r3, #12]
 800f74a:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f74c:	68bb      	ldr	r3, [r7, #8]
 800f74e:	691b      	ldr	r3, [r3, #16]
 800f750:	617b      	str	r3, [r7, #20]
 800f752:	e01a      	b.n	800f78a <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	009b      	lsls	r3, r3, #2
 800f758:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800f75c:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800f760:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	695b      	ldr	r3, [r3, #20]
 800f770:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	685b      	ldr	r3, [r3, #4]
 800f780:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f78a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f78c:	0e1b      	lsrs	r3, r3, #24
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f796:	0c1b      	lsrs	r3, r3, #16
 800f798:	b2da      	uxtb	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f79e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7a0:	0a1b      	lsrs	r3, r3, #8
 800f7a2:	b2da      	uxtb	r2, r3
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f7a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7aa:	091b      	lsrs	r3, r3, #4
 800f7ac:	b2db      	uxtb	r3, r3
 800f7ae:	f003 030f 	and.w	r3, r3, #15
 800f7b2:	b2da      	uxtb	r2, r3
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f7b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	f003 030f 	and.w	r3, r3, #15
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f7c6:	6a3b      	ldr	r3, [r7, #32]
 800f7c8:	0e1b      	lsrs	r3, r3, #24
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f7d0:	6a3b      	ldr	r3, [r7, #32]
 800f7d2:	0c1b      	lsrs	r3, r3, #16
 800f7d4:	b2da      	uxtb	r2, r3
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	0a1b      	lsrs	r3, r3, #8
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f7e4:	6a3b      	ldr	r3, [r7, #32]
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	b2da      	uxtb	r2, r3
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f7f4:	69bb      	ldr	r3, [r7, #24]
 800f7f6:	0e1b      	lsrs	r3, r3, #24
 800f7f8:	b2da      	uxtb	r2, r3
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f7fe:	69bb      	ldr	r3, [r7, #24]
 800f800:	0c1b      	lsrs	r3, r3, #16
 800f802:	b2da      	uxtb	r2, r3
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	0a1b      	lsrs	r3, r3, #8
 800f80c:	b2da      	uxtb	r2, r3
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f812:	697b      	ldr	r3, [r7, #20]
 800f814:	0e1b      	lsrs	r3, r3, #24
 800f816:	b2da      	uxtb	r2, r3
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	0c1b      	lsrs	r3, r3, #16
 800f820:	b2da      	uxtb	r2, r3
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	b2da      	uxtb	r2, r3
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f82e:	2300      	movs	r3, #0
}
 800f830:	4618      	mov	r0, r3
 800f832:	372c      	adds	r7, #44	@ 0x2c
 800f834:	46bd      	mov	sp, r7
 800f836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f83a:	4770      	bx	lr
 800f83c:	58004000 	.word	0x58004000
 800f840:	a94656b9 	.word	0xa94656b9

0800f844 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
 800f84c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	4a08      	ldr	r2, [pc, #32]	@ (800f874 <hci_init+0x30>)
 800f854:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f856:	4a08      	ldr	r2, [pc, #32]	@ (800f878 <hci_init+0x34>)
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f85c:	4806      	ldr	r0, [pc, #24]	@ (800f878 <hci_init+0x34>)
 800f85e:	f000 f979 	bl	800fb54 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	681b      	ldr	r3, [r3, #0]
 800f866:	4618      	mov	r0, r3
 800f868:	f000 f8da 	bl	800fa20 <TlInit>

  return;
 800f86c:	bf00      	nop
}
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}
 800f874:	200008e4 	.word	0x200008e4
 800f878:	200008bc 	.word	0x200008bc

0800f87c <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f882:	4822      	ldr	r0, [pc, #136]	@ (800f90c <hci_user_evt_proc+0x90>)
 800f884:	f000 fd5a 	bl	801033c <LST_is_empty>
 800f888:	4603      	mov	r3, r0
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d12b      	bne.n	800f8e6 <hci_user_evt_proc+0x6a>
 800f88e:	4b20      	ldr	r3, [pc, #128]	@ (800f910 <hci_user_evt_proc+0x94>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d027      	beq.n	800f8e6 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f896:	f107 030c 	add.w	r3, r7, #12
 800f89a:	4619      	mov	r1, r3
 800f89c:	481b      	ldr	r0, [pc, #108]	@ (800f90c <hci_user_evt_proc+0x90>)
 800f89e:	f000 fddc 	bl	801045a <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f8a2:	4b1c      	ldr	r3, [pc, #112]	@ (800f914 <hci_user_evt_proc+0x98>)
 800f8a4:	69db      	ldr	r3, [r3, #28]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00c      	beq.n	800f8c4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f8b2:	4b18      	ldr	r3, [pc, #96]	@ (800f914 <hci_user_evt_proc+0x98>)
 800f8b4:	69db      	ldr	r3, [r3, #28]
 800f8b6:	1d3a      	adds	r2, r7, #4
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f8bc:	793a      	ldrb	r2, [r7, #4]
 800f8be:	4b14      	ldr	r3, [pc, #80]	@ (800f910 <hci_user_evt_proc+0x94>)
 800f8c0:	701a      	strb	r2, [r3, #0]
 800f8c2:	e002      	b.n	800f8ca <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f8c4:	4b12      	ldr	r3, [pc, #72]	@ (800f910 <hci_user_evt_proc+0x94>)
 800f8c6:	2201      	movs	r2, #1
 800f8c8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f8ca:	4b11      	ldr	r3, [pc, #68]	@ (800f910 <hci_user_evt_proc+0x94>)
 800f8cc:	781b      	ldrb	r3, [r3, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d004      	beq.n	800f8dc <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f000 fc0d 	bl	80100f4 <TL_MM_EvtDone>
 800f8da:	e004      	b.n	800f8e6 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	480a      	ldr	r0, [pc, #40]	@ (800f90c <hci_user_evt_proc+0x90>)
 800f8e2:	f000 fd4d 	bl	8010380 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f8e6:	4809      	ldr	r0, [pc, #36]	@ (800f90c <hci_user_evt_proc+0x90>)
 800f8e8:	f000 fd28 	bl	801033c <LST_is_empty>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d107      	bne.n	800f902 <hci_user_evt_proc+0x86>
 800f8f2:	4b07      	ldr	r3, [pc, #28]	@ (800f910 <hci_user_evt_proc+0x94>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d003      	beq.n	800f902 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f8fa:	4804      	ldr	r0, [pc, #16]	@ (800f90c <hci_user_evt_proc+0x90>)
 800f8fc:	f001 fd58 	bl	80113b0 <hci_notify_asynch_evt>
  }


  return;
 800f900:	bf00      	nop
 800f902:	bf00      	nop
}
 800f904:	3710      	adds	r7, #16
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20000194 	.word	0x20000194
 800f910:	200001a0 	.word	0x200001a0
 800f914:	200008bc 	.word	0x200008bc

0800f918 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b088      	sub	sp, #32
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	460b      	mov	r3, r1
 800f922:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f924:	2000      	movs	r0, #0
 800f926:	f000 f8d1 	bl	800facc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f92a:	2300      	movs	r3, #0
 800f92c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	885b      	ldrh	r3, [r3, #2]
 800f932:	b21b      	sxth	r3, r3
 800f934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f938:	b21a      	sxth	r2, r3
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	881b      	ldrh	r3, [r3, #0]
 800f93e:	029b      	lsls	r3, r3, #10
 800f940:	b21b      	sxth	r3, r3
 800f942:	4313      	orrs	r3, r2
 800f944:	b21b      	sxth	r3, r3
 800f946:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f948:	4b33      	ldr	r3, [pc, #204]	@ (800fa18 <hci_send_req+0x100>)
 800f94a:	2201      	movs	r2, #1
 800f94c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	b2d9      	uxtb	r1, r3
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	689a      	ldr	r2, [r3, #8]
 800f958:	8bbb      	ldrh	r3, [r7, #28]
 800f95a:	4618      	mov	r0, r3
 800f95c:	f000 f890 	bl	800fa80 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f960:	e04e      	b.n	800fa00 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f962:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800f966:	f001 fd3a 	bl	80113de <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f96a:	e043      	b.n	800f9f4 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f96c:	f107 030c 	add.w	r3, r7, #12
 800f970:	4619      	mov	r1, r3
 800f972:	482a      	ldr	r0, [pc, #168]	@ (800fa1c <hci_send_req+0x104>)
 800f974:	f000 fd71 	bl	801045a <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	7a5b      	ldrb	r3, [r3, #9]
 800f97c:	2b0f      	cmp	r3, #15
 800f97e:	d114      	bne.n	800f9aa <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	330b      	adds	r3, #11
 800f984:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f986:	693b      	ldr	r3, [r7, #16]
 800f988:	885b      	ldrh	r3, [r3, #2]
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	8bba      	ldrh	r2, [r7, #28]
 800f98e:	429a      	cmp	r2, r3
 800f990:	d104      	bne.n	800f99c <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	691b      	ldr	r3, [r3, #16]
 800f996:	693a      	ldr	r2, [r7, #16]
 800f998:	7812      	ldrb	r2, [r2, #0]
 800f99a:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	785b      	ldrb	r3, [r3, #1]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d027      	beq.n	800f9f4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	77fb      	strb	r3, [r7, #31]
 800f9a8:	e024      	b.n	800f9f4 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	330b      	adds	r3, #11
 800f9ae:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	8bba      	ldrh	r2, [r7, #28]
 800f9ba:	429a      	cmp	r2, r3
 800f9bc:	d114      	bne.n	800f9e8 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	7a9b      	ldrb	r3, [r3, #10]
 800f9c2:	3b03      	subs	r3, #3
 800f9c4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	695a      	ldr	r2, [r3, #20]
 800f9ca:	7dfb      	ldrb	r3, [r7, #23]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	bfa8      	it	ge
 800f9d0:	461a      	movge	r2, r3
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	6918      	ldr	r0, [r3, #16]
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	1cd9      	adds	r1, r3, #3
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	695b      	ldr	r3, [r3, #20]
 800f9e2:	461a      	mov	r2, r3
 800f9e4:	f003 fae5 	bl	8012fb2 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f9e8:	69bb      	ldr	r3, [r7, #24]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d001      	beq.n	800f9f4 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f9f0:	2301      	movs	r3, #1
 800f9f2:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f9f4:	4809      	ldr	r0, [pc, #36]	@ (800fa1c <hci_send_req+0x104>)
 800f9f6:	f000 fca1 	bl	801033c <LST_is_empty>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d0b5      	beq.n	800f96c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800fa00:	7ffb      	ldrb	r3, [r7, #31]
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0ad      	beq.n	800f962 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800fa06:	2001      	movs	r0, #1
 800fa08:	f000 f860 	bl	800facc <NotifyCmdStatus>

  return 0;
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3720      	adds	r7, #32
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	200008e8 	.word	0x200008e8
 800fa1c:	200008dc 	.word	0x200008dc

0800fa20 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fa20:	b580      	push	{r7, lr}
 800fa22:	b086      	sub	sp, #24
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800fa28:	480f      	ldr	r0, [pc, #60]	@ (800fa68 <TlInit+0x48>)
 800fa2a:	f000 fc77 	bl	801031c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800fa2e:	4a0f      	ldr	r2, [pc, #60]	@ (800fa6c <TlInit+0x4c>)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800fa34:	480e      	ldr	r0, [pc, #56]	@ (800fa70 <TlInit+0x50>)
 800fa36:	f000 fc71 	bl	801031c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800fa3a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa74 <TlInit+0x54>)
 800fa3c:	2201      	movs	r2, #1
 800fa3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800fa40:	4b0d      	ldr	r3, [pc, #52]	@ (800fa78 <TlInit+0x58>)
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d00a      	beq.n	800fa5e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800fa4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fa7c <TlInit+0x5c>)
 800fa4e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800fa50:	4b09      	ldr	r3, [pc, #36]	@ (800fa78 <TlInit+0x58>)
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	f107 0208 	add.w	r2, r7, #8
 800fa58:	4610      	mov	r0, r2
 800fa5a:	4798      	blx	r3
  }

  return;
 800fa5c:	bf00      	nop
 800fa5e:	bf00      	nop
}
 800fa60:	3718      	adds	r7, #24
 800fa62:	46bd      	mov	sp, r7
 800fa64:	bd80      	pop	{r7, pc}
 800fa66:	bf00      	nop
 800fa68:	200008dc 	.word	0x200008dc
 800fa6c:	2000019c 	.word	0x2000019c
 800fa70:	20000194 	.word	0x20000194
 800fa74:	200001a0 	.word	0x200001a0
 800fa78:	200008bc 	.word	0x200008bc
 800fa7c:	0800fb0d 	.word	0x0800fb0d

0800fa80 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b082      	sub	sp, #8
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4603      	mov	r3, r0
 800fa88:	603a      	str	r2, [r7, #0]
 800fa8a:	80fb      	strh	r3, [r7, #6]
 800fa8c:	460b      	mov	r3, r1
 800fa8e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800fa90:	4b0c      	ldr	r3, [pc, #48]	@ (800fac4 <SendCmd+0x44>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	88fa      	ldrh	r2, [r7, #6]
 800fa96:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800fa9a:	4b0a      	ldr	r3, [pc, #40]	@ (800fac4 <SendCmd+0x44>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	797a      	ldrb	r2, [r7, #5]
 800faa0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800faa2:	4b08      	ldr	r3, [pc, #32]	@ (800fac4 <SendCmd+0x44>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	330c      	adds	r3, #12
 800faa8:	797a      	ldrb	r2, [r7, #5]
 800faaa:	6839      	ldr	r1, [r7, #0]
 800faac:	4618      	mov	r0, r3
 800faae:	f003 fa80 	bl	8012fb2 <memcpy>

  hciContext.io.Send(0,0);
 800fab2:	4b05      	ldr	r3, [pc, #20]	@ (800fac8 <SendCmd+0x48>)
 800fab4:	691b      	ldr	r3, [r3, #16]
 800fab6:	2100      	movs	r1, #0
 800fab8:	2000      	movs	r0, #0
 800faba:	4798      	blx	r3

  return;
 800fabc:	bf00      	nop
}
 800fabe:	3708      	adds	r7, #8
 800fac0:	46bd      	mov	sp, r7
 800fac2:	bd80      	pop	{r7, pc}
 800fac4:	2000019c 	.word	0x2000019c
 800fac8:	200008bc 	.word	0x200008bc

0800facc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	4603      	mov	r3, r0
 800fad4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800fad6:	79fb      	ldrb	r3, [r7, #7]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d108      	bne.n	800faee <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800fadc:	4b0a      	ldr	r3, [pc, #40]	@ (800fb08 <NotifyCmdStatus+0x3c>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00d      	beq.n	800fb00 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800fae4:	4b08      	ldr	r3, [pc, #32]	@ (800fb08 <NotifyCmdStatus+0x3c>)
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2000      	movs	r0, #0
 800faea:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800faec:	e008      	b.n	800fb00 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800faee:	4b06      	ldr	r3, [pc, #24]	@ (800fb08 <NotifyCmdStatus+0x3c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d004      	beq.n	800fb00 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800faf6:	4b04      	ldr	r3, [pc, #16]	@ (800fb08 <NotifyCmdStatus+0x3c>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	2001      	movs	r0, #1
 800fafc:	4798      	blx	r3
  return;
 800fafe:	bf00      	nop
 800fb00:	bf00      	nop
}
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	200008e4 	.word	0x200008e4

0800fb0c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	7a5b      	ldrb	r3, [r3, #9]
 800fb18:	2b0f      	cmp	r3, #15
 800fb1a:	d003      	beq.n	800fb24 <TlEvtReceived+0x18>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7a5b      	ldrb	r3, [r3, #9]
 800fb20:	2b0e      	cmp	r3, #14
 800fb22:	d107      	bne.n	800fb34 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800fb24:	6879      	ldr	r1, [r7, #4]
 800fb26:	4809      	ldr	r0, [pc, #36]	@ (800fb4c <TlEvtReceived+0x40>)
 800fb28:	f000 fc50 	bl	80103cc <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800fb2c:	2000      	movs	r0, #0
 800fb2e:	f001 fc4b 	bl	80113c8 <hci_cmd_resp_release>
 800fb32:	e006      	b.n	800fb42 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	4806      	ldr	r0, [pc, #24]	@ (800fb50 <TlEvtReceived+0x44>)
 800fb38:	f000 fc48 	bl	80103cc <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fb3c:	4804      	ldr	r0, [pc, #16]	@ (800fb50 <TlEvtReceived+0x44>)
 800fb3e:	f001 fc37 	bl	80113b0 <hci_notify_asynch_evt>
  }

  return;
 800fb42:	bf00      	nop
}
 800fb44:	3708      	adds	r7, #8
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
 800fb4a:	bf00      	nop
 800fb4c:	200008dc 	.word	0x200008dc
 800fb50:	20000194 	.word	0x20000194

0800fb54 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	4a05      	ldr	r2, [pc, #20]	@ (800fb74 <hci_register_io_bus+0x20>)
 800fb60:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a04      	ldr	r2, [pc, #16]	@ (800fb78 <hci_register_io_bus+0x24>)
 800fb66:	611a      	str	r2, [r3, #16]

  return;
 800fb68:	bf00      	nop
}
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr
 800fb74:	0800fe6d 	.word	0x0800fe6d
 800fb78:	0800fed5 	.word	0x0800fed5

0800fb7c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b082      	sub	sp, #8
 800fb80:	af00      	add	r7, sp, #0
 800fb82:	6078      	str	r0, [r7, #4]
 800fb84:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	685b      	ldr	r3, [r3, #4]
 800fb8a:	4a08      	ldr	r2, [pc, #32]	@ (800fbac <shci_init+0x30>)
 800fb8c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800fb8e:	4a08      	ldr	r2, [pc, #32]	@ (800fbb0 <shci_init+0x34>)
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800fb94:	4806      	ldr	r0, [pc, #24]	@ (800fbb0 <shci_init+0x34>)
 800fb96:	f000 f915 	bl	800fdc4 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f000 f898 	bl	800fcd4 <TlInit>

  return;
 800fba4:	bf00      	nop
}
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	2000090c 	.word	0x2000090c
 800fbb0:	200008ec 	.word	0x200008ec

0800fbb4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b084      	sub	sp, #16
 800fbb8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fbba:	4822      	ldr	r0, [pc, #136]	@ (800fc44 <shci_user_evt_proc+0x90>)
 800fbbc:	f000 fbbe 	bl	801033c <LST_is_empty>
 800fbc0:	4603      	mov	r3, r0
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d12b      	bne.n	800fc1e <shci_user_evt_proc+0x6a>
 800fbc6:	4b20      	ldr	r3, [pc, #128]	@ (800fc48 <shci_user_evt_proc+0x94>)
 800fbc8:	781b      	ldrb	r3, [r3, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d027      	beq.n	800fc1e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800fbce:	f107 030c 	add.w	r3, r7, #12
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	481b      	ldr	r0, [pc, #108]	@ (800fc44 <shci_user_evt_proc+0x90>)
 800fbd6:	f000 fc40 	bl	801045a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800fbda:	4b1c      	ldr	r3, [pc, #112]	@ (800fc4c <shci_user_evt_proc+0x98>)
 800fbdc:	69db      	ldr	r3, [r3, #28]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00c      	beq.n	800fbfc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800fbe6:	2301      	movs	r3, #1
 800fbe8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800fbea:	4b18      	ldr	r3, [pc, #96]	@ (800fc4c <shci_user_evt_proc+0x98>)
 800fbec:	69db      	ldr	r3, [r3, #28]
 800fbee:	1d3a      	adds	r2, r7, #4
 800fbf0:	4610      	mov	r0, r2
 800fbf2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800fbf4:	793a      	ldrb	r2, [r7, #4]
 800fbf6:	4b14      	ldr	r3, [pc, #80]	@ (800fc48 <shci_user_evt_proc+0x94>)
 800fbf8:	701a      	strb	r2, [r3, #0]
 800fbfa:	e002      	b.n	800fc02 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fbfc:	4b12      	ldr	r3, [pc, #72]	@ (800fc48 <shci_user_evt_proc+0x94>)
 800fbfe:	2201      	movs	r2, #1
 800fc00:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800fc02:	4b11      	ldr	r3, [pc, #68]	@ (800fc48 <shci_user_evt_proc+0x94>)
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d004      	beq.n	800fc14 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f000 fa71 	bl	80100f4 <TL_MM_EvtDone>
 800fc12:	e004      	b.n	800fc1e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	4619      	mov	r1, r3
 800fc18:	480a      	ldr	r0, [pc, #40]	@ (800fc44 <shci_user_evt_proc+0x90>)
 800fc1a:	f000 fbb1 	bl	8010380 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fc1e:	4809      	ldr	r0, [pc, #36]	@ (800fc44 <shci_user_evt_proc+0x90>)
 800fc20:	f000 fb8c 	bl	801033c <LST_is_empty>
 800fc24:	4603      	mov	r3, r0
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d107      	bne.n	800fc3a <shci_user_evt_proc+0x86>
 800fc2a:	4b07      	ldr	r3, [pc, #28]	@ (800fc48 <shci_user_evt_proc+0x94>)
 800fc2c:	781b      	ldrb	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d003      	beq.n	800fc3a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800fc32:	4804      	ldr	r0, [pc, #16]	@ (800fc44 <shci_user_evt_proc+0x90>)
 800fc34:	f7f2 f8a3 	bl	8001d7e <shci_notify_asynch_evt>
  }


  return;
 800fc38:	bf00      	nop
 800fc3a:	bf00      	nop
}
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}
 800fc42:	bf00      	nop
 800fc44:	200001a4 	.word	0x200001a4
 800fc48:	200001b4 	.word	0x200001b4
 800fc4c:	200008ec 	.word	0x200008ec

0800fc50 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	b084      	sub	sp, #16
 800fc54:	af00      	add	r7, sp, #0
 800fc56:	60ba      	str	r2, [r7, #8]
 800fc58:	607b      	str	r3, [r7, #4]
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	81fb      	strh	r3, [r7, #14]
 800fc5e:	460b      	mov	r3, r1
 800fc60:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800fc62:	2000      	movs	r0, #0
 800fc64:	f000 f868 	bl	800fd38 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800fc68:	4b17      	ldr	r3, [pc, #92]	@ (800fcc8 <shci_send+0x78>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	89fa      	ldrh	r2, [r7, #14]
 800fc6e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800fc72:	4b15      	ldr	r3, [pc, #84]	@ (800fcc8 <shci_send+0x78>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	7b7a      	ldrb	r2, [r7, #13]
 800fc78:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800fc7a:	4b13      	ldr	r3, [pc, #76]	@ (800fcc8 <shci_send+0x78>)
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	330c      	adds	r3, #12
 800fc80:	7b7a      	ldrb	r2, [r7, #13]
 800fc82:	68b9      	ldr	r1, [r7, #8]
 800fc84:	4618      	mov	r0, r3
 800fc86:	f003 f994 	bl	8012fb2 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800fc8a:	4b10      	ldr	r3, [pc, #64]	@ (800fccc <shci_send+0x7c>)
 800fc8c:	2201      	movs	r2, #1
 800fc8e:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800fc90:	4b0f      	ldr	r3, [pc, #60]	@ (800fcd0 <shci_send+0x80>)
 800fc92:	691b      	ldr	r3, [r3, #16]
 800fc94:	2100      	movs	r1, #0
 800fc96:	2000      	movs	r0, #0
 800fc98:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800fc9a:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800fc9e:	f7f2 f885 	bl	8001dac <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f103 0008 	add.w	r0, r3, #8
 800fca8:	4b07      	ldr	r3, [pc, #28]	@ (800fcc8 <shci_send+0x78>)
 800fcaa:	6819      	ldr	r1, [r3, #0]
 800fcac:	4b06      	ldr	r3, [pc, #24]	@ (800fcc8 <shci_send+0x78>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	789b      	ldrb	r3, [r3, #2]
 800fcb2:	3303      	adds	r3, #3
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	f003 f97c 	bl	8012fb2 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fcba:	2001      	movs	r0, #1
 800fcbc:	f000 f83c 	bl	800fd38 <Cmd_SetStatus>

  return;
 800fcc0:	bf00      	nop
}
 800fcc2:	3710      	adds	r7, #16
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	bd80      	pop	{r7, pc}
 800fcc8:	200001b0 	.word	0x200001b0
 800fccc:	20000910 	.word	0x20000910
 800fcd0:	200008ec 	.word	0x200008ec

0800fcd4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fcd4:	b580      	push	{r7, lr}
 800fcd6:	b086      	sub	sp, #24
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800fcdc:	4a10      	ldr	r2, [pc, #64]	@ (800fd20 <TlInit+0x4c>)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800fce2:	4810      	ldr	r0, [pc, #64]	@ (800fd24 <TlInit+0x50>)
 800fce4:	f000 fb1a 	bl	801031c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fce8:	2001      	movs	r0, #1
 800fcea:	f000 f825 	bl	800fd38 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fcee:	4b0e      	ldr	r3, [pc, #56]	@ (800fd28 <TlInit+0x54>)
 800fcf0:	2201      	movs	r2, #1
 800fcf2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800fcf4:	4b0d      	ldr	r3, [pc, #52]	@ (800fd2c <TlInit+0x58>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00c      	beq.n	800fd16 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800fd00:	4b0b      	ldr	r3, [pc, #44]	@ (800fd30 <TlInit+0x5c>)
 800fd02:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800fd04:	4b0b      	ldr	r3, [pc, #44]	@ (800fd34 <TlInit+0x60>)
 800fd06:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800fd08:	4b08      	ldr	r3, [pc, #32]	@ (800fd2c <TlInit+0x58>)
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	f107 020c 	add.w	r2, r7, #12
 800fd10:	4610      	mov	r0, r2
 800fd12:	4798      	blx	r3
  }

  return;
 800fd14:	bf00      	nop
 800fd16:	bf00      	nop
}
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	bd80      	pop	{r7, pc}
 800fd1e:	bf00      	nop
 800fd20:	200001b0 	.word	0x200001b0
 800fd24:	200001a4 	.word	0x200001a4
 800fd28:	200001b4 	.word	0x200001b4
 800fd2c:	200008ec 	.word	0x200008ec
 800fd30:	0800fd89 	.word	0x0800fd89
 800fd34:	0800fda1 	.word	0x0800fda1

0800fd38 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	4603      	mov	r3, r0
 800fd40:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800fd42:	79fb      	ldrb	r3, [r7, #7]
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d10b      	bne.n	800fd60 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800fd48:	4b0d      	ldr	r3, [pc, #52]	@ (800fd80 <Cmd_SetStatus+0x48>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d003      	beq.n	800fd58 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800fd50:	4b0b      	ldr	r3, [pc, #44]	@ (800fd80 <Cmd_SetStatus+0x48>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	2000      	movs	r0, #0
 800fd56:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800fd58:	4b0a      	ldr	r3, [pc, #40]	@ (800fd84 <Cmd_SetStatus+0x4c>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800fd5e:	e00b      	b.n	800fd78 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800fd60:	4b08      	ldr	r3, [pc, #32]	@ (800fd84 <Cmd_SetStatus+0x4c>)
 800fd62:	2201      	movs	r2, #1
 800fd64:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800fd66:	4b06      	ldr	r3, [pc, #24]	@ (800fd80 <Cmd_SetStatus+0x48>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d004      	beq.n	800fd78 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800fd6e:	4b04      	ldr	r3, [pc, #16]	@ (800fd80 <Cmd_SetStatus+0x48>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2001      	movs	r0, #1
 800fd74:	4798      	blx	r3
  return;
 800fd76:	bf00      	nop
 800fd78:	bf00      	nop
}
 800fd7a:	3708      	adds	r7, #8
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	bd80      	pop	{r7, pc}
 800fd80:	2000090c 	.word	0x2000090c
 800fd84:	200001ac 	.word	0x200001ac

0800fd88 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800fd90:	2000      	movs	r0, #0
 800fd92:	f7f2 f800 	bl	8001d96 <shci_cmd_resp_release>

  return;
 800fd96:	bf00      	nop
}
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}
	...

0800fda0 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800fda8:	6879      	ldr	r1, [r7, #4]
 800fdaa:	4805      	ldr	r0, [pc, #20]	@ (800fdc0 <TlUserEvtReceived+0x20>)
 800fdac:	f000 fb0e 	bl	80103cc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fdb0:	4803      	ldr	r0, [pc, #12]	@ (800fdc0 <TlUserEvtReceived+0x20>)
 800fdb2:	f7f1 ffe4 	bl	8001d7e <shci_notify_asynch_evt>

  return;
 800fdb6:	bf00      	nop
}
 800fdb8:	3708      	adds	r7, #8
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	200001a4 	.word	0x200001a4

0800fdc4 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	4a05      	ldr	r2, [pc, #20]	@ (800fde4 <shci_register_io_bus+0x20>)
 800fdd0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4a04      	ldr	r2, [pc, #16]	@ (800fde8 <shci_register_io_bus+0x24>)
 800fdd6:	611a      	str	r2, [r3, #16]

  return;
 800fdd8:	bf00      	nop
}
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	0800ff81 	.word	0x0800ff81
 800fde8:	0800ffd5 	.word	0x0800ffd5

0800fdec <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800fdf0:	f002 faee 	bl	80123d0 <HW_IPCC_Enable>

  return;
 800fdf4:	bf00      	nop
}
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <TL_Init>:


void TL_Init( void )
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800fdfc:	4b10      	ldr	r3, [pc, #64]	@ (800fe40 <TL_Init+0x48>)
 800fdfe:	4a11      	ldr	r2, [pc, #68]	@ (800fe44 <TL_Init+0x4c>)
 800fe00:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800fe02:	4b0f      	ldr	r3, [pc, #60]	@ (800fe40 <TL_Init+0x48>)
 800fe04:	4a10      	ldr	r2, [pc, #64]	@ (800fe48 <TL_Init+0x50>)
 800fe06:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800fe08:	4b0d      	ldr	r3, [pc, #52]	@ (800fe40 <TL_Init+0x48>)
 800fe0a:	4a10      	ldr	r2, [pc, #64]	@ (800fe4c <TL_Init+0x54>)
 800fe0c:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800fe0e:	4b0c      	ldr	r3, [pc, #48]	@ (800fe40 <TL_Init+0x48>)
 800fe10:	4a0f      	ldr	r2, [pc, #60]	@ (800fe50 <TL_Init+0x58>)
 800fe12:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800fe14:	4b0a      	ldr	r3, [pc, #40]	@ (800fe40 <TL_Init+0x48>)
 800fe16:	4a0f      	ldr	r2, [pc, #60]	@ (800fe54 <TL_Init+0x5c>)
 800fe18:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800fe1a:	4b09      	ldr	r3, [pc, #36]	@ (800fe40 <TL_Init+0x48>)
 800fe1c:	4a0e      	ldr	r2, [pc, #56]	@ (800fe58 <TL_Init+0x60>)
 800fe1e:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800fe20:	4b07      	ldr	r3, [pc, #28]	@ (800fe40 <TL_Init+0x48>)
 800fe22:	4a0e      	ldr	r2, [pc, #56]	@ (800fe5c <TL_Init+0x64>)
 800fe24:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800fe26:	4b06      	ldr	r3, [pc, #24]	@ (800fe40 <TL_Init+0x48>)
 800fe28:	4a0d      	ldr	r2, [pc, #52]	@ (800fe60 <TL_Init+0x68>)
 800fe2a:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800fe2c:	4b04      	ldr	r3, [pc, #16]	@ (800fe40 <TL_Init+0x48>)
 800fe2e:	4a0d      	ldr	r2, [pc, #52]	@ (800fe64 <TL_Init+0x6c>)
 800fe30:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800fe32:	4b03      	ldr	r3, [pc, #12]	@ (800fe40 <TL_Init+0x48>)
 800fe34:	4a0c      	ldr	r2, [pc, #48]	@ (800fe68 <TL_Init+0x70>)
 800fe36:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800fe38:	f002 fade 	bl	80123f8 <HW_IPCC_Init>

  return;
 800fe3c:	bf00      	nop
}
 800fe3e:	bd80      	pop	{r7, pc}
 800fe40:	20030000 	.word	0x20030000
 800fe44:	20030028 	.word	0x20030028
 800fe48:	20030048 	.word	0x20030048
 800fe4c:	20030058 	.word	0x20030058
 800fe50:	20030068 	.word	0x20030068
 800fe54:	20030070 	.word	0x20030070
 800fe58:	20030078 	.word	0x20030078
 800fe5c:	20030080 	.word	0x20030080
 800fe60:	2003009c 	.word	0x2003009c
 800fe64:	200300a0 	.word	0x200300a0
 800fe68:	200300ac 	.word	0x200300ac

0800fe6c <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b084      	sub	sp, #16
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800fe78:	4811      	ldr	r0, [pc, #68]	@ (800fec0 <TL_BLE_Init+0x54>)
 800fe7a:	f000 fa4f 	bl	801031c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800fe7e:	4b11      	ldr	r3, [pc, #68]	@ (800fec4 <TL_BLE_Init+0x58>)
 800fe80:	685b      	ldr	r3, [r3, #4]
 800fe82:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	689a      	ldr	r2, [r3, #8]
 800fe88:	68bb      	ldr	r3, [r7, #8]
 800fe8a:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	68da      	ldr	r2, [r3, #12]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	4a0c      	ldr	r2, [pc, #48]	@ (800fec8 <TL_BLE_Init+0x5c>)
 800fe98:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	4a08      	ldr	r2, [pc, #32]	@ (800fec0 <TL_BLE_Init+0x54>)
 800fe9e:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800fea0:	f002 fac0 	bl	8012424 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	4a08      	ldr	r2, [pc, #32]	@ (800fecc <TL_BLE_Init+0x60>)
 800feaa:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	4a07      	ldr	r2, [pc, #28]	@ (800fed0 <TL_BLE_Init+0x64>)
 800feb2:	6013      	str	r3, [r2, #0]

  return 0;
 800feb4:	2300      	movs	r3, #0
}
 800feb6:	4618      	mov	r0, r3
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	200300c8 	.word	0x200300c8
 800fec4:	20030000 	.word	0x20030000
 800fec8:	20030a58 	.word	0x20030a58
 800fecc:	2000091c 	.word	0x2000091c
 800fed0:	20000920 	.word	0x20000920

0800fed4 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b082      	sub	sp, #8
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	460b      	mov	r3, r1
 800fede:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800fee0:	4b09      	ldr	r3, [pc, #36]	@ (800ff08 <TL_BLE_SendCmd+0x34>)
 800fee2:	685b      	ldr	r3, [r3, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2201      	movs	r2, #1
 800fee8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800feea:	4b07      	ldr	r3, [pc, #28]	@ (800ff08 <TL_BLE_SendCmd+0x34>)
 800feec:	685b      	ldr	r3, [r3, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4619      	mov	r1, r3
 800fef2:	2001      	movs	r0, #1
 800fef4:	f000 f96c 	bl	80101d0 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800fef8:	f002 fa9e 	bl	8012438 <HW_IPCC_BLE_SendCmd>

  return 0;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3708      	adds	r7, #8
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}
 800ff06:	bf00      	nop
 800ff08:	20030000 	.word	0x20030000

0800ff0c <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b082      	sub	sp, #8
 800ff10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800ff12:	e01c      	b.n	800ff4e <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800ff14:	1d3b      	adds	r3, r7, #4
 800ff16:	4619      	mov	r1, r3
 800ff18:	4812      	ldr	r0, [pc, #72]	@ (800ff64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ff1a:	f000 fa9e 	bl	801045a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	7a5b      	ldrb	r3, [r3, #9]
 800ff22:	2b0f      	cmp	r3, #15
 800ff24:	d003      	beq.n	800ff2e <HW_IPCC_BLE_RxEvtNot+0x22>
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7a5b      	ldrb	r3, [r3, #9]
 800ff2a:	2b0e      	cmp	r3, #14
 800ff2c:	d105      	bne.n	800ff3a <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	4619      	mov	r1, r3
 800ff32:	2002      	movs	r0, #2
 800ff34:	f000 f94c 	bl	80101d0 <OutputDbgTrace>
 800ff38:	e004      	b.n	800ff44 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	4619      	mov	r1, r3
 800ff3e:	2003      	movs	r0, #3
 800ff40:	f000 f946 	bl	80101d0 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800ff44:	4b08      	ldr	r3, [pc, #32]	@ (800ff68 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	4610      	mov	r0, r2
 800ff4c:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800ff4e:	4805      	ldr	r0, [pc, #20]	@ (800ff64 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800ff50:	f000 f9f4 	bl	801033c <LST_is_empty>
 800ff54:	4603      	mov	r3, r0
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d0dc      	beq.n	800ff14 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800ff5a:	bf00      	nop
}
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	200300c8 	.word	0x200300c8
 800ff68:	2000091c 	.word	0x2000091c

0800ff6c <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800ff70:	4b02      	ldr	r3, [pc, #8]	@ (800ff7c <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	4798      	blx	r3

  return;
 800ff76:	bf00      	nop
}
 800ff78:	bd80      	pop	{r7, pc}
 800ff7a:	bf00      	nop
 800ff7c:	20000920 	.word	0x20000920

0800ff80 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800ff8c:	480d      	ldr	r0, [pc, #52]	@ (800ffc4 <TL_SYS_Init+0x44>)
 800ff8e:	f000 f9c5 	bl	801031c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800ff92:	4b0d      	ldr	r3, [pc, #52]	@ (800ffc8 <TL_SYS_Init+0x48>)
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	689a      	ldr	r2, [r3, #8]
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	4a08      	ldr	r2, [pc, #32]	@ (800ffc4 <TL_SYS_Init+0x44>)
 800ffa4:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800ffa6:	f002 fa69 	bl	801247c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	4a07      	ldr	r2, [pc, #28]	@ (800ffcc <TL_SYS_Init+0x4c>)
 800ffb0:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	685b      	ldr	r3, [r3, #4]
 800ffb6:	4a06      	ldr	r2, [pc, #24]	@ (800ffd0 <TL_SYS_Init+0x50>)
 800ffb8:	6013      	str	r3, [r2, #0]

  return 0;
 800ffba:	2300      	movs	r3, #0
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	3710      	adds	r7, #16
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	bd80      	pop	{r7, pc}
 800ffc4:	200300d0 	.word	0x200300d0
 800ffc8:	20030000 	.word	0x20030000
 800ffcc:	20000924 	.word	0x20000924
 800ffd0:	20000928 	.word	0x20000928

0800ffd4 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b082      	sub	sp, #8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
 800ffdc:	460b      	mov	r3, r1
 800ffde:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800ffe0:	4b09      	ldr	r3, [pc, #36]	@ (8010008 <TL_SYS_SendCmd+0x34>)
 800ffe2:	68db      	ldr	r3, [r3, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2210      	movs	r2, #16
 800ffe8:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800ffea:	4b07      	ldr	r3, [pc, #28]	@ (8010008 <TL_SYS_SendCmd+0x34>)
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	681b      	ldr	r3, [r3, #0]
 800fff0:	4619      	mov	r1, r3
 800fff2:	2004      	movs	r0, #4
 800fff4:	f000 f8ec 	bl	80101d0 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800fff8:	f002 fa4a 	bl	8012490 <HW_IPCC_SYS_SendCmd>

  return 0;
 800fffc:	2300      	movs	r3, #0
}
 800fffe:	4618      	mov	r0, r3
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	20030000 	.word	0x20030000

0801000c <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010010:	4b07      	ldr	r3, [pc, #28]	@ (8010030 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010012:	68db      	ldr	r3, [r3, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4619      	mov	r1, r3
 8010018:	2005      	movs	r0, #5
 801001a:	f000 f8d9 	bl	80101d0 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801001e:	4b05      	ldr	r3, [pc, #20]	@ (8010034 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a03      	ldr	r2, [pc, #12]	@ (8010030 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010024:	68d2      	ldr	r2, [r2, #12]
 8010026:	6812      	ldr	r2, [r2, #0]
 8010028:	4610      	mov	r0, r2
 801002a:	4798      	blx	r3

  return;
 801002c:	bf00      	nop
}
 801002e:	bd80      	pop	{r7, pc}
 8010030:	20030000 	.word	0x20030000
 8010034:	20000924 	.word	0x20000924

08010038 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801003e:	e00e      	b.n	801005e <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010040:	1d3b      	adds	r3, r7, #4
 8010042:	4619      	mov	r1, r3
 8010044:	480b      	ldr	r0, [pc, #44]	@ (8010074 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010046:	f000 fa08 	bl	801045a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	4619      	mov	r1, r3
 801004e:	2006      	movs	r0, #6
 8010050:	f000 f8be 	bl	80101d0 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010054:	4b08      	ldr	r3, [pc, #32]	@ (8010078 <HW_IPCC_SYS_EvtNot+0x40>)
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	4610      	mov	r0, r2
 801005c:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801005e:	4805      	ldr	r0, [pc, #20]	@ (8010074 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010060:	f000 f96c 	bl	801033c <LST_is_empty>
 8010064:	4603      	mov	r3, r0
 8010066:	2b00      	cmp	r3, #0
 8010068:	d0ea      	beq.n	8010040 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801006a:	bf00      	nop
}
 801006c:	3708      	adds	r7, #8
 801006e:	46bd      	mov	sp, r7
 8010070:	bd80      	pop	{r7, pc}
 8010072:	bf00      	nop
 8010074:	200300d0 	.word	0x200300d0
 8010078:	20000928 	.word	0x20000928

0801007c <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010084:	4817      	ldr	r0, [pc, #92]	@ (80100e4 <TL_MM_Init+0x68>)
 8010086:	f000 f949 	bl	801031c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801008a:	4817      	ldr	r0, [pc, #92]	@ (80100e8 <TL_MM_Init+0x6c>)
 801008c:	f000 f946 	bl	801031c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010090:	4b16      	ldr	r3, [pc, #88]	@ (80100ec <TL_MM_Init+0x70>)
 8010092:	691b      	ldr	r3, [r3, #16]
 8010094:	4a16      	ldr	r2, [pc, #88]	@ (80100f0 <TL_MM_Init+0x74>)
 8010096:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8010098:	4b15      	ldr	r3, [pc, #84]	@ (80100f0 <TL_MM_Init+0x74>)
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	687a      	ldr	r2, [r7, #4]
 801009e:	6892      	ldr	r2, [r2, #8]
 80100a0:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80100a2:	4b13      	ldr	r3, [pc, #76]	@ (80100f0 <TL_MM_Init+0x74>)
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	687a      	ldr	r2, [r7, #4]
 80100a8:	68d2      	ldr	r2, [r2, #12]
 80100aa:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80100ac:	4b10      	ldr	r3, [pc, #64]	@ (80100f0 <TL_MM_Init+0x74>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a0c      	ldr	r2, [pc, #48]	@ (80100e4 <TL_MM_Init+0x68>)
 80100b2:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80100b4:	4b0e      	ldr	r3, [pc, #56]	@ (80100f0 <TL_MM_Init+0x74>)
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	6812      	ldr	r2, [r2, #0]
 80100bc:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80100be:	4b0c      	ldr	r3, [pc, #48]	@ (80100f0 <TL_MM_Init+0x74>)
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	6852      	ldr	r2, [r2, #4]
 80100c6:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80100c8:	4b09      	ldr	r3, [pc, #36]	@ (80100f0 <TL_MM_Init+0x74>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	687a      	ldr	r2, [r7, #4]
 80100ce:	6912      	ldr	r2, [r2, #16]
 80100d0:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80100d2:	4b07      	ldr	r3, [pc, #28]	@ (80100f0 <TL_MM_Init+0x74>)
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	6952      	ldr	r2, [r2, #20]
 80100da:	619a      	str	r2, [r3, #24]

  return;
 80100dc:	bf00      	nop
}
 80100de:	3708      	adds	r7, #8
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}
 80100e4:	200300b8 	.word	0x200300b8
 80100e8:	20000914 	.word	0x20000914
 80100ec:	20030000 	.word	0x20030000
 80100f0:	2000092c 	.word	0x2000092c

080100f4 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80100fc:	6879      	ldr	r1, [r7, #4]
 80100fe:	4807      	ldr	r0, [pc, #28]	@ (801011c <TL_MM_EvtDone+0x28>)
 8010100:	f000 f964 	bl	80103cc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010104:	6879      	ldr	r1, [r7, #4]
 8010106:	2000      	movs	r0, #0
 8010108:	f000 f862 	bl	80101d0 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 801010c:	4804      	ldr	r0, [pc, #16]	@ (8010120 <TL_MM_EvtDone+0x2c>)
 801010e:	f002 f9e5 	bl	80124dc <HW_IPCC_MM_SendFreeBuf>

  return;
 8010112:	bf00      	nop
}
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	20000914 	.word	0x20000914
 8010120:	08010125 	.word	0x08010125

08010124 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801012a:	e00c      	b.n	8010146 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 801012c:	1d3b      	adds	r3, r7, #4
 801012e:	4619      	mov	r1, r3
 8010130:	480a      	ldr	r0, [pc, #40]	@ (801015c <SendFreeBuf+0x38>)
 8010132:	f000 f992 	bl	801045a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010136:	4b0a      	ldr	r3, [pc, #40]	@ (8010160 <SendFreeBuf+0x3c>)
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	691b      	ldr	r3, [r3, #16]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f000 f943 	bl	80103cc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010146:	4805      	ldr	r0, [pc, #20]	@ (801015c <SendFreeBuf+0x38>)
 8010148:	f000 f8f8 	bl	801033c <LST_is_empty>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d0ec      	beq.n	801012c <SendFreeBuf+0x8>
  }

  return;
 8010152:	bf00      	nop
}
 8010154:	3708      	adds	r7, #8
 8010156:	46bd      	mov	sp, r7
 8010158:	bd80      	pop	{r7, pc}
 801015a:	bf00      	nop
 801015c:	20000914 	.word	0x20000914
 8010160:	20030000 	.word	0x20030000

08010164 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010164:	b580      	push	{r7, lr}
 8010166:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010168:	4805      	ldr	r0, [pc, #20]	@ (8010180 <TL_TRACES_Init+0x1c>)
 801016a:	f000 f8d7 	bl	801031c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801016e:	4b05      	ldr	r3, [pc, #20]	@ (8010184 <TL_TRACES_Init+0x20>)
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	4a03      	ldr	r2, [pc, #12]	@ (8010180 <TL_TRACES_Init+0x1c>)
 8010174:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010176:	f002 f9e7 	bl	8012548 <HW_IPCC_TRACES_Init>

  return;
 801017a:	bf00      	nop
}
 801017c:	bd80      	pop	{r7, pc}
 801017e:	bf00      	nop
 8010180:	200300c0 	.word	0x200300c0
 8010184:	20030000 	.word	0x20030000

08010188 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801018e:	e008      	b.n	80101a2 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010190:	1d3b      	adds	r3, r7, #4
 8010192:	4619      	mov	r1, r3
 8010194:	4808      	ldr	r0, [pc, #32]	@ (80101b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 8010196:	f000 f960 	bl	801045a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4618      	mov	r0, r3
 801019e:	f000 f80d 	bl	80101bc <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80101a2:	4805      	ldr	r0, [pc, #20]	@ (80101b8 <HW_IPCC_TRACES_EvtNot+0x30>)
 80101a4:	f000 f8ca 	bl	801033c <LST_is_empty>
 80101a8:	4603      	mov	r3, r0
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d0f0      	beq.n	8010190 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80101ae:	bf00      	nop
}
 80101b0:	3708      	adds	r7, #8
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	200300c0 	.word	0x200300c0

080101bc <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
 80101c2:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80101c4:	bf00      	nop
 80101c6:	370c      	adds	r7, #12
 80101c8:	46bd      	mov	sp, r7
 80101ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ce:	4770      	bx	lr

080101d0 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	4603      	mov	r3, r0
 80101d8:	6039      	str	r1, [r7, #0]
 80101da:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	2b06      	cmp	r3, #6
 80101e0:	d845      	bhi.n	801026e <OutputDbgTrace+0x9e>
 80101e2:	a201      	add	r2, pc, #4	@ (adr r2, 80101e8 <OutputDbgTrace+0x18>)
 80101e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101e8:	08010205 	.word	0x08010205
 80101ec:	08010229 	.word	0x08010229
 80101f0:	0801022f 	.word	0x0801022f
 80101f4:	08010243 	.word	0x08010243
 80101f8:	0801024f 	.word	0x0801024f
 80101fc:	08010255 	.word	0x08010255
 8010200:	08010263 	.word	0x08010263
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010204:	683b      	ldr	r3, [r7, #0]
 8010206:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	7a5b      	ldrb	r3, [r3, #9]
 801020c:	2bff      	cmp	r3, #255	@ 0xff
 801020e:	d005      	beq.n	801021c <OutputDbgTrace+0x4c>
 8010210:	2bff      	cmp	r3, #255	@ 0xff
 8010212:	dc05      	bgt.n	8010220 <OutputDbgTrace+0x50>
 8010214:	2b0e      	cmp	r3, #14
 8010216:	d005      	beq.n	8010224 <OutputDbgTrace+0x54>
 8010218:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801021a:	e001      	b.n	8010220 <OutputDbgTrace+0x50>
          break;
 801021c:	bf00      	nop
 801021e:	e027      	b.n	8010270 <OutputDbgTrace+0xa0>
          break;
 8010220:	bf00      	nop
 8010222:	e025      	b.n	8010270 <OutputDbgTrace+0xa0>
          break;
 8010224:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010226:	e023      	b.n	8010270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801022c:	e020      	b.n	8010270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	7a5b      	ldrb	r3, [r3, #9]
 8010236:	2b0e      	cmp	r3, #14
 8010238:	d001      	beq.n	801023e <OutputDbgTrace+0x6e>
 801023a:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801023c:	e000      	b.n	8010240 <OutputDbgTrace+0x70>
          break;
 801023e:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010240:	e016      	b.n	8010270 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	7a5b      	ldrb	r3, [r3, #9]
 801024a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801024c:	e010      	b.n	8010270 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010252:	e00d      	b.n	8010270 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010254:	683b      	ldr	r3, [r7, #0]
 8010256:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	7a5b      	ldrb	r3, [r3, #9]
 801025c:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801025e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010260:	e006      	b.n	8010270 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010262:	683b      	ldr	r3, [r7, #0]
 8010264:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	7a5b      	ldrb	r3, [r3, #9]
 801026a:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801026c:	e000      	b.n	8010270 <OutputDbgTrace+0xa0>

    default:
      break;
 801026e:	bf00      	nop
  }

  return;
 8010270:	bf00      	nop
}
 8010272:	3714      	adds	r7, #20
 8010274:	46bd      	mov	sp, r7
 8010276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027a:	4770      	bx	lr

0801027c <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 801027c:	b580      	push	{r7, lr}
 801027e:	b084      	sub	sp, #16
 8010280:	af00      	add	r7, sp, #0
 8010282:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 8010288:	215c      	movs	r1, #92	@ 0x5c
 801028a:	6878      	ldr	r0, [r7, #4]
 801028c:	f002 fe08 	bl	8012ea0 <strrchr>
 8010290:	4603      	mov	r3, r0
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 8010296:	215c      	movs	r1, #92	@ 0x5c
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f002 fe01 	bl	8012ea0 <strrchr>
 801029e:	4603      	mov	r3, r0
 80102a0:	3301      	adds	r3, #1
 80102a2:	60fb      	str	r3, [r7, #12]
 80102a4:	e00d      	b.n	80102c2 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80102a6:	212f      	movs	r1, #47	@ 0x2f
 80102a8:	6878      	ldr	r0, [r7, #4]
 80102aa:	f002 fdf9 	bl	8012ea0 <strrchr>
 80102ae:	4603      	mov	r3, r0
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d006      	beq.n	80102c2 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80102b4:	212f      	movs	r1, #47	@ 0x2f
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f002 fdf2 	bl	8012ea0 <strrchr>
 80102bc:	4603      	mov	r3, r0
 80102be:	3301      	adds	r3, #1
 80102c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80102c2:	68fb      	ldr	r3, [r7, #12]
}
 80102c4:	4618      	mov	r0, r3
 80102c6:	3710      	adds	r7, #16
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bd80      	pop	{r7, pc}

080102cc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80102cc:	b480      	push	{r7}
 80102ce:	b085      	sub	sp, #20
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	4603      	mov	r3, r0
 80102d4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80102d6:	4b0f      	ldr	r3, [pc, #60]	@ (8010314 <OTP_Read+0x48>)
 80102d8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80102da:	e002      	b.n	80102e2 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	3b08      	subs	r3, #8
 80102e0:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	3307      	adds	r3, #7
 80102e6:	781b      	ldrb	r3, [r3, #0]
 80102e8:	79fa      	ldrb	r2, [r7, #7]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d003      	beq.n	80102f6 <OTP_Read+0x2a>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	4a09      	ldr	r2, [pc, #36]	@ (8010318 <OTP_Read+0x4c>)
 80102f2:	4293      	cmp	r3, r2
 80102f4:	d1f2      	bne.n	80102dc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	3307      	adds	r3, #7
 80102fa:	781b      	ldrb	r3, [r3, #0]
 80102fc:	79fa      	ldrb	r2, [r7, #7]
 80102fe:	429a      	cmp	r2, r3
 8010300:	d001      	beq.n	8010306 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010302:	2300      	movs	r3, #0
 8010304:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010306:	68fb      	ldr	r3, [r7, #12]
}
 8010308:	4618      	mov	r0, r3
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	1fff73f8 	.word	0x1fff73f8
 8010318:	1fff7000 	.word	0x1fff7000

0801031c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	687a      	ldr	r2, [r7, #4]
 8010328:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	687a      	ldr	r2, [r7, #4]
 801032e:	605a      	str	r2, [r3, #4]
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 801033c:	b480      	push	{r7}
 801033e:	b087      	sub	sp, #28
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010344:	f3ef 8310 	mrs	r3, PRIMASK
 8010348:	60fb      	str	r3, [r7, #12]
  return(result);
 801034a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801034c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801034e:	b672      	cpsid	i
}
 8010350:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	687a      	ldr	r2, [r7, #4]
 8010358:	429a      	cmp	r2, r3
 801035a:	d102      	bne.n	8010362 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 801035c:	2301      	movs	r3, #1
 801035e:	75fb      	strb	r3, [r7, #23]
 8010360:	e001      	b.n	8010366 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010362:	2300      	movs	r3, #0
 8010364:	75fb      	strb	r3, [r7, #23]
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	f383 8810 	msr	PRIMASK, r3
}
 8010370:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010372:	7dfb      	ldrb	r3, [r7, #23]
}
 8010374:	4618      	mov	r0, r3
 8010376:	371c      	adds	r7, #28
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010380:	b480      	push	{r7}
 8010382:	b087      	sub	sp, #28
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
 8010388:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801038a:	f3ef 8310 	mrs	r3, PRIMASK
 801038e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010390:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010392:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010394:	b672      	cpsid	i
}
 8010396:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	681a      	ldr	r2, [r3, #0]
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	687a      	ldr	r2, [r7, #4]
 80103a4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	683a      	ldr	r2, [r7, #0]
 80103aa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	683a      	ldr	r2, [r7, #0]
 80103b2:	605a      	str	r2, [r3, #4]
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	f383 8810 	msr	PRIMASK, r3
}
 80103be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80103c0:	bf00      	nop
 80103c2:	371c      	adds	r7, #28
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80103cc:	b480      	push	{r7}
 80103ce:	b087      	sub	sp, #28
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d6:	f3ef 8310 	mrs	r3, PRIMASK
 80103da:	60fb      	str	r3, [r7, #12]
  return(result);
 80103dc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80103de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80103e0:	b672      	cpsid	i
}
 80103e2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	687a      	ldr	r2, [r7, #4]
 80103e8:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	685a      	ldr	r2, [r3, #4]
 80103ee:	683b      	ldr	r3, [r7, #0]
 80103f0:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80103f8:	683b      	ldr	r3, [r7, #0]
 80103fa:	685b      	ldr	r3, [r3, #4]
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	601a      	str	r2, [r3, #0]
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	f383 8810 	msr	PRIMASK, r3
}
 801040a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801040c:	bf00      	nop
 801040e:	371c      	adds	r7, #28
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr

08010418 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010418:	b480      	push	{r7}
 801041a:	b087      	sub	sp, #28
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010420:	f3ef 8310 	mrs	r3, PRIMASK
 8010424:	60fb      	str	r3, [r7, #12]
  return(result);
 8010426:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010428:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801042a:	b672      	cpsid	i
}
 801042c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	687a      	ldr	r2, [r7, #4]
 8010434:	6812      	ldr	r2, [r2, #0]
 8010436:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	687a      	ldr	r2, [r7, #4]
 801043e:	6852      	ldr	r2, [r2, #4]
 8010440:	605a      	str	r2, [r3, #4]
 8010442:	697b      	ldr	r3, [r7, #20]
 8010444:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	f383 8810 	msr	PRIMASK, r3
}
 801044c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 801044e:	bf00      	nop
 8010450:	371c      	adds	r7, #28
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr

0801045a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801045a:	b580      	push	{r7, lr}
 801045c:	b086      	sub	sp, #24
 801045e:	af00      	add	r7, sp, #0
 8010460:	6078      	str	r0, [r7, #4]
 8010462:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010464:	f3ef 8310 	mrs	r3, PRIMASK
 8010468:	60fb      	str	r3, [r7, #12]
  return(result);
 801046a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801046c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801046e:	b672      	cpsid	i
}
 8010470:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681a      	ldr	r2, [r3, #0]
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4618      	mov	r0, r3
 8010480:	f7ff ffca 	bl	8010418 <LST_remove_node>
 8010484:	697b      	ldr	r3, [r7, #20]
 8010486:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010488:	693b      	ldr	r3, [r7, #16]
 801048a:	f383 8810 	msr	PRIMASK, r3
}
 801048e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010490:	bf00      	nop
 8010492:	3718      	adds	r7, #24
 8010494:	46bd      	mov	sp, r7
 8010496:	bd80      	pop	{r7, pc}

08010498 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010498:	b480      	push	{r7}
 801049a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 801049c:	4b03      	ldr	r3, [pc, #12]	@ (80104ac <LL_FLASH_GetUDN+0x14>)
 801049e:	681b      	ldr	r3, [r3, #0]
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	46bd      	mov	sp, r7
 80104a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104a8:	4770      	bx	lr
 80104aa:	bf00      	nop
 80104ac:	1fff7580 	.word	0x1fff7580

080104b0 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80104b0:	b480      	push	{r7}
 80104b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80104b4:	4b03      	ldr	r3, [pc, #12]	@ (80104c4 <LL_FLASH_GetDeviceID+0x14>)
 80104b6:	681b      	ldr	r3, [r3, #0]
 80104b8:	b2db      	uxtb	r3, r3
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr
 80104c4:	1fff7584 	.word	0x1fff7584

080104c8 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80104c8:	b480      	push	{r7}
 80104ca:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80104cc:	4b03      	ldr	r3, [pc, #12]	@ (80104dc <LL_FLASH_GetSTCompanyID+0x14>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	0a1b      	lsrs	r3, r3, #8
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr
 80104dc:	1fff7584 	.word	0x1fff7584

080104e0 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80104e0:	b5b0      	push	{r4, r5, r7, lr}
 80104e2:	b090      	sub	sp, #64	@ 0x40
 80104e4:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80104e6:	2392      	movs	r3, #146	@ 0x92
 80104e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80104ec:	4b45      	ldr	r3, [pc, #276]	@ (8010604 <APP_BLE_Init+0x124>)
 80104ee:	1d3c      	adds	r4, r7, #4
 80104f0:	461d      	mov	r5, r3
 80104f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80104fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80104fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010502:	c403      	stmia	r4!, {r0, r1}
 8010504:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8010506:	f000 fb97 	bl	8010c38 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801050a:	2101      	movs	r1, #1
 801050c:	2002      	movs	r0, #2
 801050e:	f002 f843 	bl	8012598 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010512:	4a3d      	ldr	r2, [pc, #244]	@ (8010608 <APP_BLE_Init+0x128>)
 8010514:	2100      	movs	r1, #0
 8010516:	2002      	movs	r0, #2
 8010518:	f002 f96a 	bl	80127f0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 801051c:	1d3b      	adds	r3, r7, #4
 801051e:	4618      	mov	r0, r3
 8010520:	f7ff f89e 	bl	800f660 <SHCI_C2_BLE_Init>
 8010524:	4603      	mov	r3, r0
 8010526:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 801052a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801052e:	2b00      	cmp	r3, #0
 8010530:	d012      	beq.n	8010558 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8010532:	4836      	ldr	r0, [pc, #216]	@ (801060c <APP_BLE_Init+0x12c>)
 8010534:	f7ff fea2 	bl	801027c <DbgTraceGetFileName>
 8010538:	4601      	mov	r1, r0
 801053a:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 801053e:	4a34      	ldr	r2, [pc, #208]	@ (8010610 <APP_BLE_Init+0x130>)
 8010540:	4834      	ldr	r0, [pc, #208]	@ (8010614 <APP_BLE_Init+0x134>)
 8010542:	f002 fb55 	bl	8012bf0 <iprintf>
 8010546:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801054a:	4619      	mov	r1, r3
 801054c:	4832      	ldr	r0, [pc, #200]	@ (8010618 <APP_BLE_Init+0x138>)
 801054e:	f002 fb4f 	bl	8012bf0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010552:	f7f2 fd2b 	bl	8002fac <Error_Handler>
 8010556:	e00c      	b.n	8010572 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8010558:	482c      	ldr	r0, [pc, #176]	@ (801060c <APP_BLE_Init+0x12c>)
 801055a:	f7ff fe8f 	bl	801027c <DbgTraceGetFileName>
 801055e:	4601      	mov	r1, r0
 8010560:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 8010564:	4a2a      	ldr	r2, [pc, #168]	@ (8010610 <APP_BLE_Init+0x130>)
 8010566:	482b      	ldr	r0, [pc, #172]	@ (8010614 <APP_BLE_Init+0x134>)
 8010568:	f002 fb42 	bl	8012bf0 <iprintf>
 801056c:	482b      	ldr	r0, [pc, #172]	@ (801061c <APP_BLE_Init+0x13c>)
 801056e:	f002 fb3f 	bl	8012bf0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8010572:	f000 fb77 	bl	8010c64 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010576:	f7fe ffcd 	bl	800f514 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801057a:	4b29      	ldr	r3, [pc, #164]	@ (8010620 <APP_BLE_Init+0x140>)
 801057c:	2200      	movs	r2, #0
 801057e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010582:	4b27      	ldr	r3, [pc, #156]	@ (8010620 <APP_BLE_Init+0x140>)
 8010584:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010588:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801058a:	4a26      	ldr	r2, [pc, #152]	@ (8010624 <APP_BLE_Init+0x144>)
 801058c:	2100      	movs	r1, #0
 801058e:	2001      	movs	r0, #1
 8010590:	f002 f92e 	bl	80127f0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8010594:	2006      	movs	r0, #6
 8010596:	f7fe fe30 	bl	800f1fa <aci_hal_set_radio_activity_mask>
 801059a:	4603      	mov	r3, r0
 801059c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80105a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d010      	beq.n	80105ca <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80105a8:	4818      	ldr	r0, [pc, #96]	@ (801060c <APP_BLE_Init+0x12c>)
 80105aa:	f7ff fe67 	bl	801027c <DbgTraceGetFileName>
 80105ae:	4601      	mov	r1, r0
 80105b0:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 80105b4:	4a16      	ldr	r2, [pc, #88]	@ (8010610 <APP_BLE_Init+0x130>)
 80105b6:	4817      	ldr	r0, [pc, #92]	@ (8010614 <APP_BLE_Init+0x134>)
 80105b8:	f002 fb1a 	bl	8012bf0 <iprintf>
 80105bc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80105c0:	4619      	mov	r1, r3
 80105c2:	4819      	ldr	r0, [pc, #100]	@ (8010628 <APP_BLE_Init+0x148>)
 80105c4:	f002 fb14 	bl	8012bf0 <iprintf>
 80105c8:	e00c      	b.n	80105e4 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 80105ca:	4810      	ldr	r0, [pc, #64]	@ (801060c <APP_BLE_Init+0x12c>)
 80105cc:	f7ff fe56 	bl	801027c <DbgTraceGetFileName>
 80105d0:	4601      	mov	r1, r0
 80105d2:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 80105d6:	4a0e      	ldr	r2, [pc, #56]	@ (8010610 <APP_BLE_Init+0x130>)
 80105d8:	480e      	ldr	r0, [pc, #56]	@ (8010614 <APP_BLE_Init+0x134>)
 80105da:	f002 fb09 	bl	8012bf0 <iprintf>
 80105de:	4813      	ldr	r0, [pc, #76]	@ (801062c <APP_BLE_Init+0x14c>)
 80105e0:	f002 fb06 	bl	8012bf0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80105e4:	f000 ff94 	bl	8011510 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80105e8:	4b0d      	ldr	r3, [pc, #52]	@ (8010620 <APP_BLE_Init+0x140>)
 80105ea:	2200      	movs	r2, #0
 80105ec:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80105ee:	4b0c      	ldr	r3, [pc, #48]	@ (8010620 <APP_BLE_Init+0x140>)
 80105f0:	2200      	movs	r2, #0
 80105f2:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 80105f4:	2001      	movs	r0, #1
 80105f6:	f000 fdc9 	bl	801118c <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 80105fa:	bf00      	nop
}
 80105fc:	3740      	adds	r7, #64	@ 0x40
 80105fe:	46bd      	mov	sp, r7
 8010600:	bdb0      	pop	{r4, r5, r7, pc}
 8010602:	bf00      	nop
 8010604:	0801442c 	.word	0x0801442c
 8010608:	0800f87d 	.word	0x0800f87d
 801060c:	08014320 	.word	0x08014320
 8010610:	08015870 	.word	0x08015870
 8010614:	0801433c 	.word	0x0801433c
 8010618:	08014350 	.word	0x08014350
 801061c:	08014388 	.word	0x08014388
 8010620:	20000938 	.word	0x20000938
 8010624:	08011311 	.word	0x08011311
 8010628:	080143b0 	.word	0x080143b0
 801062c:	080143f4 	.word	0x080143f4

08010630 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010630:	b5b0      	push	{r4, r5, r7, lr}
 8010632:	b08e      	sub	sp, #56	@ 0x38
 8010634:	af04      	add	r7, sp, #16
 8010636:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010638:	2392      	movs	r3, #146	@ 0x92
 801063a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	3301      	adds	r3, #1
 8010642:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010644:	6a3b      	ldr	r3, [r7, #32]
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	2bff      	cmp	r3, #255	@ 0xff
 801064a:	f000 811d 	beq.w	8010888 <SVCCTL_App_Notification+0x258>
 801064e:	2bff      	cmp	r3, #255	@ 0xff
 8010650:	f300 8286 	bgt.w	8010b60 <SVCCTL_App_Notification+0x530>
 8010654:	2b05      	cmp	r3, #5
 8010656:	d002      	beq.n	801065e <SVCCTL_App_Notification+0x2e>
 8010658:	2b3e      	cmp	r3, #62	@ 0x3e
 801065a:	d042      	beq.n	80106e2 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 801065c:	e280      	b.n	8010b60 <SVCCTL_App_Notification+0x530>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	3302      	adds	r3, #2
 8010662:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010664:	68bb      	ldr	r3, [r7, #8]
 8010666:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801066a:	b29a      	uxth	r2, r3
 801066c:	4bb6      	ldr	r3, [pc, #728]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 801066e:	8adb      	ldrh	r3, [r3, #22]
 8010670:	429a      	cmp	r2, r3
 8010672:	d128      	bne.n	80106c6 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010674:	4bb4      	ldr	r3, [pc, #720]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 8010676:	2200      	movs	r2, #0
 8010678:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801067a:	4bb3      	ldr	r3, [pc, #716]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 801067c:	2200      	movs	r2, #0
 801067e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8010682:	48b2      	ldr	r0, [pc, #712]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 8010684:	f7ff fdfa 	bl	801027c <DbgTraceGetFileName>
 8010688:	4601      	mov	r1, r0
 801068a:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 801068e:	4ab0      	ldr	r2, [pc, #704]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 8010690:	48b0      	ldr	r0, [pc, #704]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 8010692:	f002 faad 	bl	8012bf0 <iprintf>
 8010696:	48b0      	ldr	r0, [pc, #704]	@ (8010958 <SVCCTL_App_Notification+0x328>)
 8010698:	f002 fb1a 	bl	8012cd0 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 801069c:	48ab      	ldr	r0, [pc, #684]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 801069e:	f7ff fded 	bl	801027c <DbgTraceGetFileName>
 80106a2:	4601      	mov	r1, r0
 80106a4:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80106a8:	4aa9      	ldr	r2, [pc, #676]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 80106aa:	48aa      	ldr	r0, [pc, #680]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 80106ac:	f002 faa0 	bl	8012bf0 <iprintf>
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80106b6:	b29b      	uxth	r3, r3
 80106b8:	4619      	mov	r1, r3
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	78db      	ldrb	r3, [r3, #3]
 80106be:	461a      	mov	r2, r3
 80106c0:	48a6      	ldr	r0, [pc, #664]	@ (801095c <SVCCTL_App_Notification+0x32c>)
 80106c2:	f002 fa95 	bl	8012bf0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 80106c6:	2001      	movs	r0, #1
 80106c8:	f000 fd60 	bl	801118c <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80106cc:	4ba4      	ldr	r3, [pc, #656]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 80106ce:	2201      	movs	r2, #1
 80106d0:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80106d2:	4b9d      	ldr	r3, [pc, #628]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 80106d4:	8ada      	ldrh	r2, [r3, #22]
 80106d6:	4ba2      	ldr	r3, [pc, #648]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 80106d8:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80106da:	48a1      	ldr	r0, [pc, #644]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 80106dc:	f000 ff04 	bl	80114e8 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80106e0:	e241      	b.n	8010b66 <SVCCTL_App_Notification+0x536>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80106e2:	6a3b      	ldr	r3, [r7, #32]
 80106e4:	3302      	adds	r3, #2
 80106e6:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	2b01      	cmp	r3, #1
 80106ee:	d042      	beq.n	8010776 <SVCCTL_App_Notification+0x146>
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	f040 80c7 	bne.w	8010884 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	3301      	adds	r3, #1
 80106fa:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 80106fc:	4893      	ldr	r0, [pc, #588]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 80106fe:	f7ff fdbd 	bl	801027c <DbgTraceGetFileName>
 8010702:	4601      	mov	r1, r0
 8010704:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 8010708:	4a91      	ldr	r2, [pc, #580]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 801070a:	4892      	ldr	r0, [pc, #584]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 801070c:	f002 fa70 	bl	8012bf0 <iprintf>
 8010710:	4894      	ldr	r0, [pc, #592]	@ (8010964 <SVCCTL_App_Notification+0x334>)
 8010712:	f002 fadd 	bl	8012cd0 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8010716:	488d      	ldr	r0, [pc, #564]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 8010718:	f7ff fdb0 	bl	801027c <DbgTraceGetFileName>
 801071c:	4601      	mov	r1, r0
 801071e:	f240 13e3 	movw	r3, #483	@ 0x1e3
 8010722:	4a8b      	ldr	r2, [pc, #556]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 8010724:	488b      	ldr	r0, [pc, #556]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 8010726:	f002 fa63 	bl	8012bf0 <iprintf>
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010730:	b29b      	uxth	r3, r3
 8010732:	4618      	mov	r0, r3
 8010734:	f7ef fff8 	bl	8000728 <__aeabi_i2d>
 8010738:	f04f 0200 	mov.w	r2, #0
 801073c:	4b8a      	ldr	r3, [pc, #552]	@ (8010968 <SVCCTL_App_Notification+0x338>)
 801073e:	f7ef fd77 	bl	8000230 <__aeabi_dmul>
 8010742:	4602      	mov	r2, r0
 8010744:	460b      	mov	r3, r1
 8010746:	4610      	mov	r0, r2
 8010748:	4619      	mov	r1, r3
 801074a:	693b      	ldr	r3, [r7, #16]
 801074c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8010750:	b29b      	uxth	r3, r3
 8010752:	461c      	mov	r4, r3
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801075a:	b29b      	uxth	r3, r3
 801075c:	461a      	mov	r2, r3
 801075e:	4613      	mov	r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	4413      	add	r3, r2
 8010764:	005b      	lsls	r3, r3, #1
 8010766:	9301      	str	r3, [sp, #4]
 8010768:	9400      	str	r4, [sp, #0]
 801076a:	4602      	mov	r2, r0
 801076c:	460b      	mov	r3, r1
 801076e:	487f      	ldr	r0, [pc, #508]	@ (801096c <SVCCTL_App_Notification+0x33c>)
 8010770:	f002 fa3e 	bl	8012bf0 <iprintf>
          break;
 8010774:	e087      	b.n	8010886 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8010776:	697b      	ldr	r3, [r7, #20]
 8010778:	3301      	adds	r3, #1
 801077a:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 801077c:	4873      	ldr	r0, [pc, #460]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 801077e:	f7ff fd7d 	bl	801027c <DbgTraceGetFileName>
 8010782:	4601      	mov	r1, r0
 8010784:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8010788:	4a71      	ldr	r2, [pc, #452]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 801078a:	4872      	ldr	r0, [pc, #456]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 801078c:	f002 fa30 	bl	8012bf0 <iprintf>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010796:	b29b      	uxth	r3, r3
 8010798:	4619      	mov	r1, r3
 801079a:	4875      	ldr	r0, [pc, #468]	@ (8010970 <SVCCTL_App_Notification+0x340>)
 801079c:	f002 fa28 	bl	8012bf0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80107a0:	486a      	ldr	r0, [pc, #424]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 80107a2:	f7ff fd6b 	bl	801027c <DbgTraceGetFileName>
 80107a6:	4601      	mov	r1, r0
 80107a8:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80107ac:	4a68      	ldr	r2, [pc, #416]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 80107ae:	4869      	ldr	r0, [pc, #420]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 80107b0:	f002 fa1e 	bl	8012bf0 <iprintf>
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	7a9b      	ldrb	r3, [r3, #10]
 80107b8:	4618      	mov	r0, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	7a5b      	ldrb	r3, [r3, #9]
 80107be:	461c      	mov	r4, r3
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	7a1b      	ldrb	r3, [r3, #8]
 80107c4:	461d      	mov	r5, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	79db      	ldrb	r3, [r3, #7]
 80107ca:	461a      	mov	r2, r3
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	799b      	ldrb	r3, [r3, #6]
 80107d0:	4619      	mov	r1, r3
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	795b      	ldrb	r3, [r3, #5]
 80107d6:	9302      	str	r3, [sp, #8]
 80107d8:	9101      	str	r1, [sp, #4]
 80107da:	9200      	str	r2, [sp, #0]
 80107dc:	462b      	mov	r3, r5
 80107de:	4622      	mov	r2, r4
 80107e0:	4601      	mov	r1, r0
 80107e2:	4864      	ldr	r0, [pc, #400]	@ (8010974 <SVCCTL_App_Notification+0x344>)
 80107e4:	f002 fa04 	bl	8012bf0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80107e8:	4858      	ldr	r0, [pc, #352]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 80107ea:	f7ff fd47 	bl	801027c <DbgTraceGetFileName>
 80107ee:	4601      	mov	r1, r0
 80107f0:	f240 13fd 	movw	r3, #509	@ 0x1fd
 80107f4:	4a56      	ldr	r2, [pc, #344]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 80107f6:	4857      	ldr	r0, [pc, #348]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 80107f8:	f002 f9fa 	bl	8012bf0 <iprintf>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8010802:	b29b      	uxth	r3, r3
 8010804:	4618      	mov	r0, r3
 8010806:	f7ef ff8f 	bl	8000728 <__aeabi_i2d>
 801080a:	f04f 0200 	mov.w	r2, #0
 801080e:	4b56      	ldr	r3, [pc, #344]	@ (8010968 <SVCCTL_App_Notification+0x338>)
 8010810:	f7ef fd0e 	bl	8000230 <__aeabi_dmul>
 8010814:	4602      	mov	r2, r0
 8010816:	460b      	mov	r3, r1
 8010818:	4610      	mov	r0, r2
 801081a:	4619      	mov	r1, r3
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8010822:	b29b      	uxth	r3, r3
 8010824:	461c      	mov	r4, r3
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 801082c:	b29b      	uxth	r3, r3
 801082e:	461a      	mov	r2, r3
 8010830:	4613      	mov	r3, r2
 8010832:	009b      	lsls	r3, r3, #2
 8010834:	4413      	add	r3, r2
 8010836:	005b      	lsls	r3, r3, #1
 8010838:	9301      	str	r3, [sp, #4]
 801083a:	9400      	str	r4, [sp, #0]
 801083c:	4602      	mov	r2, r0
 801083e:	460b      	mov	r3, r1
 8010840:	484a      	ldr	r0, [pc, #296]	@ (801096c <SVCCTL_App_Notification+0x33c>)
 8010842:	f002 f9d5 	bl	8012bf0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010846:	4b40      	ldr	r3, [pc, #256]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 8010848:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801084c:	2b04      	cmp	r3, #4
 801084e:	d104      	bne.n	801085a <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8010850:	4b3d      	ldr	r3, [pc, #244]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 8010852:	2206      	movs	r2, #6
 8010854:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010858:	e003      	b.n	8010862 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 801085a:	4b3b      	ldr	r3, [pc, #236]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 801085c:	2205      	movs	r2, #5
 801085e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010868:	b29a      	uxth	r2, r3
 801086a:	4b37      	ldr	r3, [pc, #220]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 801086c:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 801086e:	4b3c      	ldr	r3, [pc, #240]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 8010870:	2200      	movs	r2, #0
 8010872:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010874:	4b34      	ldr	r3, [pc, #208]	@ (8010948 <SVCCTL_App_Notification+0x318>)
 8010876:	8ada      	ldrh	r2, [r3, #22]
 8010878:	4b39      	ldr	r3, [pc, #228]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 801087a:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 801087c:	4838      	ldr	r0, [pc, #224]	@ (8010960 <SVCCTL_App_Notification+0x330>)
 801087e:	f000 fe33 	bl	80114e8 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010882:	e000      	b.n	8010886 <SVCCTL_App_Notification+0x256>
          break;
 8010884:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8010886:	e16e      	b.n	8010b66 <SVCCTL_App_Notification+0x536>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8010888:	6a3b      	ldr	r3, [r7, #32]
 801088a:	3302      	adds	r3, #2
 801088c:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 801088e:	69fb      	ldr	r3, [r7, #28]
 8010890:	881b      	ldrh	r3, [r3, #0]
 8010892:	b29b      	uxth	r3, r3
 8010894:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8010898:	4293      	cmp	r3, r2
 801089a:	f000 814a 	beq.w	8010b32 <SVCCTL_App_Notification+0x502>
 801089e:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80108a2:	4293      	cmp	r3, r2
 80108a4:	f300 815e 	bgt.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108ac:	f000 8154 	beq.w	8010b58 <SVCCTL_App_Notification+0x528>
 80108b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108b4:	f300 8156 	bgt.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108b8:	2b04      	cmp	r3, #4
 80108ba:	f000 814f 	beq.w	8010b5c <SVCCTL_App_Notification+0x52c>
 80108be:	2b04      	cmp	r3, #4
 80108c0:	f2c0 8150 	blt.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108c4:	f240 420a 	movw	r2, #1034	@ 0x40a
 80108c8:	4293      	cmp	r3, r2
 80108ca:	f300 814b 	bgt.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108d2:	f340 8147 	ble.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108d6:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80108da:	2b09      	cmp	r3, #9
 80108dc:	f200 8142 	bhi.w	8010b64 <SVCCTL_App_Notification+0x534>
 80108e0:	a201      	add	r2, pc, #4	@ (adr r2, 80108e8 <SVCCTL_App_Notification+0x2b8>)
 80108e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108e6:	bf00      	nop
 80108e8:	08010aad 	.word	0x08010aad
 80108ec:	08010981 	.word	0x08010981
 80108f0:	08010b65 	.word	0x08010b65
 80108f4:	08010b65 	.word	0x08010b65
 80108f8:	08010b65 	.word	0x08010b65
 80108fc:	08010b65 	.word	0x08010b65
 8010900:	08010911 	.word	0x08010911
 8010904:	08010b65 	.word	0x08010b65
 8010908:	080109f3 	.word	0x080109f3
 801090c:	0801092d 	.word	0x0801092d
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8010910:	480e      	ldr	r0, [pc, #56]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 8010912:	f7ff fcb3 	bl	801027c <DbgTraceGetFileName>
 8010916:	4601      	mov	r1, r0
 8010918:	f240 233f 	movw	r3, #575	@ 0x23f
 801091c:	4a0c      	ldr	r2, [pc, #48]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 801091e:	480d      	ldr	r0, [pc, #52]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 8010920:	f002 f966 	bl	8012bf0 <iprintf>
 8010924:	4814      	ldr	r0, [pc, #80]	@ (8010978 <SVCCTL_App_Notification+0x348>)
 8010926:	f002 f963 	bl	8012bf0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 801092a:	e118      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 801092c:	4807      	ldr	r0, [pc, #28]	@ (801094c <SVCCTL_App_Notification+0x31c>)
 801092e:	f7ff fca5 	bl	801027c <DbgTraceGetFileName>
 8010932:	4601      	mov	r1, r0
 8010934:	f240 234f 	movw	r3, #591	@ 0x24f
 8010938:	4a05      	ldr	r2, [pc, #20]	@ (8010950 <SVCCTL_App_Notification+0x320>)
 801093a:	4806      	ldr	r0, [pc, #24]	@ (8010954 <SVCCTL_App_Notification+0x324>)
 801093c:	f002 f958 	bl	8012bf0 <iprintf>
 8010940:	480e      	ldr	r0, [pc, #56]	@ (801097c <SVCCTL_App_Notification+0x34c>)
 8010942:	f002 f9c5 	bl	8012cd0 <puts>
          break;
 8010946:	e10a      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
 8010948:	20000938 	.word	0x20000938
 801094c:	08014320 	.word	0x08014320
 8010950:	08015880 	.word	0x08015880
 8010954:	0801433c 	.word	0x0801433c
 8010958:	08014468 	.word	0x08014468
 801095c:	08014494 	.word	0x08014494
 8010960:	200009bc 	.word	0x200009bc
 8010964:	080144d0 	.word	0x080144d0
 8010968:	3ff40000 	.word	0x3ff40000
 801096c:	08014504 	.word	0x08014504
 8010970:	08014570 	.word	0x08014570
 8010974:	080145b8 	.word	0x080145b8
 8010978:	08014608 	.word	0x08014608
 801097c:	08014630 	.word	0x08014630
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8010980:	487b      	ldr	r0, [pc, #492]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010982:	f7ff fc7b 	bl	801027c <DbgTraceGetFileName>
 8010986:	4601      	mov	r1, r0
 8010988:	f240 2356 	movw	r3, #598	@ 0x256
 801098c:	4a79      	ldr	r2, [pc, #484]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 801098e:	487a      	ldr	r0, [pc, #488]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010990:	f002 f92e 	bl	8012bf0 <iprintf>
 8010994:	4879      	ldr	r0, [pc, #484]	@ (8010b7c <SVCCTL_App_Notification+0x54c>)
 8010996:	f002 f99b 	bl	8012cd0 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 801099a:	4b79      	ldr	r3, [pc, #484]	@ (8010b80 <SVCCTL_App_Notification+0x550>)
 801099c:	8adb      	ldrh	r3, [r3, #22]
 801099e:	4979      	ldr	r1, [pc, #484]	@ (8010b84 <SVCCTL_App_Notification+0x554>)
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd fe2c 	bl	800e5fe <aci_gap_pass_key_resp>
 80109a6:	4603      	mov	r3, r0
 80109a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80109ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d010      	beq.n	80109d6 <SVCCTL_App_Notification+0x3a6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 80109b4:	486e      	ldr	r0, [pc, #440]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 80109b6:	f7ff fc61 	bl	801027c <DbgTraceGetFileName>
 80109ba:	4601      	mov	r1, r0
 80109bc:	f240 235b 	movw	r3, #603	@ 0x25b
 80109c0:	4a6c      	ldr	r2, [pc, #432]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 80109c2:	486d      	ldr	r0, [pc, #436]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 80109c4:	f002 f914 	bl	8012bf0 <iprintf>
 80109c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80109cc:	4619      	mov	r1, r3
 80109ce:	486e      	ldr	r0, [pc, #440]	@ (8010b88 <SVCCTL_App_Notification+0x558>)
 80109d0:	f002 f90e 	bl	8012bf0 <iprintf>
          break;
 80109d4:	e0c3      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 80109d6:	4866      	ldr	r0, [pc, #408]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 80109d8:	f7ff fc50 	bl	801027c <DbgTraceGetFileName>
 80109dc:	4601      	mov	r1, r0
 80109de:	f240 235f 	movw	r3, #607	@ 0x25f
 80109e2:	4a64      	ldr	r2, [pc, #400]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 80109e4:	4864      	ldr	r0, [pc, #400]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 80109e6:	f002 f903 	bl	8012bf0 <iprintf>
 80109ea:	4868      	ldr	r0, [pc, #416]	@ (8010b8c <SVCCTL_App_Notification+0x55c>)
 80109ec:	f002 f970 	bl	8012cd0 <puts>
          break;
 80109f0:	e0b5      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 80109f2:	485f      	ldr	r0, [pc, #380]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 80109f4:	f7ff fc42 	bl	801027c <DbgTraceGetFileName>
 80109f8:	4601      	mov	r1, r0
 80109fa:	f240 2367 	movw	r3, #615	@ 0x267
 80109fe:	4a5d      	ldr	r2, [pc, #372]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010a00:	485d      	ldr	r0, [pc, #372]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010a02:	f002 f8f5 	bl	8012bf0 <iprintf>
 8010a06:	4862      	ldr	r0, [pc, #392]	@ (8010b90 <SVCCTL_App_Notification+0x560>)
 8010a08:	f002 f962 	bl	8012cd0 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8010a0c:	4858      	ldr	r0, [pc, #352]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010a0e:	f7ff fc35 	bl	801027c <DbgTraceGetFileName>
 8010a12:	4601      	mov	r1, r0
 8010a14:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8010a18:	4a56      	ldr	r2, [pc, #344]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010a1a:	4857      	ldr	r0, [pc, #348]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010a1c:	f002 f8e8 	bl	8012bf0 <iprintf>
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	3302      	adds	r3, #2
 8010a24:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010a28:	4619      	mov	r1, r3
 8010a2a:	485a      	ldr	r0, [pc, #360]	@ (8010b94 <SVCCTL_App_Notification+0x564>)
 8010a2c:	f002 f8e0 	bl	8012bf0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8010a30:	484f      	ldr	r0, [pc, #316]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010a32:	f7ff fc23 	bl	801027c <DbgTraceGetFileName>
 8010a36:	4601      	mov	r1, r0
 8010a38:	f240 236a 	movw	r3, #618	@ 0x26a
 8010a3c:	4a4d      	ldr	r2, [pc, #308]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010a3e:	484e      	ldr	r0, [pc, #312]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010a40:	f002 f8d6 	bl	8012bf0 <iprintf>
 8010a44:	69fb      	ldr	r3, [r7, #28]
 8010a46:	3302      	adds	r3, #2
 8010a48:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	4852      	ldr	r0, [pc, #328]	@ (8010b98 <SVCCTL_App_Notification+0x568>)
 8010a50:	f002 f8ce 	bl	8012bf0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010a54:	4b4a      	ldr	r3, [pc, #296]	@ (8010b80 <SVCCTL_App_Notification+0x550>)
 8010a56:	8adb      	ldrh	r3, [r3, #22]
 8010a58:	2101      	movs	r1, #1
 8010a5a:	4618      	mov	r0, r3
 8010a5c:	f7fd ff79 	bl	800e952 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010a60:	4603      	mov	r3, r0
 8010a62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8010a66:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d010      	beq.n	8010a90 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8010a6e:	4840      	ldr	r0, [pc, #256]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010a70:	f7ff fc04 	bl	801027c <DbgTraceGetFileName>
 8010a74:	4601      	mov	r1, r0
 8010a76:	f240 236f 	movw	r3, #623	@ 0x26f
 8010a7a:	4a3e      	ldr	r2, [pc, #248]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010a7c:	483e      	ldr	r0, [pc, #248]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010a7e:	f002 f8b7 	bl	8012bf0 <iprintf>
 8010a82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010a86:	4619      	mov	r1, r3
 8010a88:	4844      	ldr	r0, [pc, #272]	@ (8010b9c <SVCCTL_App_Notification+0x56c>)
 8010a8a:	f002 f8b1 	bl	8012bf0 <iprintf>
          break;
 8010a8e:	e066      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8010a90:	4837      	ldr	r0, [pc, #220]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010a92:	f7ff fbf3 	bl	801027c <DbgTraceGetFileName>
 8010a96:	4601      	mov	r1, r0
 8010a98:	f240 2373 	movw	r3, #627	@ 0x273
 8010a9c:	4a35      	ldr	r2, [pc, #212]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010a9e:	4836      	ldr	r0, [pc, #216]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010aa0:	f002 f8a6 	bl	8012bf0 <iprintf>
 8010aa4:	483e      	ldr	r0, [pc, #248]	@ (8010ba0 <SVCCTL_App_Notification+0x570>)
 8010aa6:	f002 f913 	bl	8012cd0 <puts>
          break;
 8010aaa:	e058      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8010aac:	69fb      	ldr	r3, [r7, #28]
 8010aae:	3302      	adds	r3, #2
 8010ab0:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8010ab2:	482f      	ldr	r0, [pc, #188]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010ab4:	f7ff fbe2 	bl	801027c <DbgTraceGetFileName>
 8010ab8:	4601      	mov	r1, r0
 8010aba:	f240 237d 	movw	r3, #637	@ 0x27d
 8010abe:	4a2d      	ldr	r2, [pc, #180]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010ac0:	482d      	ldr	r0, [pc, #180]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010ac2:	f002 f895 	bl	8012bf0 <iprintf>
 8010ac6:	4837      	ldr	r0, [pc, #220]	@ (8010ba4 <SVCCTL_App_Notification+0x574>)
 8010ac8:	f002 f902 	bl	8012cd0 <puts>
          if (p_pairing_complete->Status != 0)
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	789b      	ldrb	r3, [r3, #2]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d013      	beq.n	8010afc <SVCCTL_App_Notification+0x4cc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8010ad4:	4826      	ldr	r0, [pc, #152]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010ad6:	f7ff fbd1 	bl	801027c <DbgTraceGetFileName>
 8010ada:	4601      	mov	r1, r0
 8010adc:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8010ae0:	4a24      	ldr	r2, [pc, #144]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010ae2:	4825      	ldr	r0, [pc, #148]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010ae4:	f002 f884 	bl	8012bf0 <iprintf>
 8010ae8:	69bb      	ldr	r3, [r7, #24]
 8010aea:	789b      	ldrb	r3, [r3, #2]
 8010aec:	4619      	mov	r1, r3
 8010aee:	69bb      	ldr	r3, [r7, #24]
 8010af0:	78db      	ldrb	r3, [r3, #3]
 8010af2:	461a      	mov	r2, r3
 8010af4:	482c      	ldr	r0, [pc, #176]	@ (8010ba8 <SVCCTL_App_Notification+0x578>)
 8010af6:	f002 f87b 	bl	8012bf0 <iprintf>
 8010afa:	e00c      	b.n	8010b16 <SVCCTL_App_Notification+0x4e6>
            APP_DBG_MSG("     - Pairing Success\n");
 8010afc:	481c      	ldr	r0, [pc, #112]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010afe:	f7ff fbbd 	bl	801027c <DbgTraceGetFileName>
 8010b02:	4601      	mov	r1, r0
 8010b04:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8010b08:	4a1a      	ldr	r2, [pc, #104]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010b0a:	481b      	ldr	r0, [pc, #108]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010b0c:	f002 f870 	bl	8012bf0 <iprintf>
 8010b10:	4826      	ldr	r0, [pc, #152]	@ (8010bac <SVCCTL_App_Notification+0x57c>)
 8010b12:	f002 f8dd 	bl	8012cd0 <puts>
          APP_DBG_MSG("\n");
 8010b16:	4816      	ldr	r0, [pc, #88]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010b18:	f7ff fbb0 	bl	801027c <DbgTraceGetFileName>
 8010b1c:	4601      	mov	r1, r0
 8010b1e:	f240 2386 	movw	r3, #646	@ 0x286
 8010b22:	4a14      	ldr	r2, [pc, #80]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010b24:	4814      	ldr	r0, [pc, #80]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010b26:	f002 f863 	bl	8012bf0 <iprintf>
 8010b2a:	200a      	movs	r0, #10
 8010b2c:	f002 f872 	bl	8012c14 <putchar>
          break;
 8010b30:	e015      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8010b32:	480f      	ldr	r0, [pc, #60]	@ (8010b70 <SVCCTL_App_Notification+0x540>)
 8010b34:	f7ff fba2 	bl	801027c <DbgTraceGetFileName>
 8010b38:	4601      	mov	r1, r0
 8010b3a:	f240 238f 	movw	r3, #655	@ 0x28f
 8010b3e:	4a0d      	ldr	r2, [pc, #52]	@ (8010b74 <SVCCTL_App_Notification+0x544>)
 8010b40:	480d      	ldr	r0, [pc, #52]	@ (8010b78 <SVCCTL_App_Notification+0x548>)
 8010b42:	f002 f855 	bl	8012bf0 <iprintf>
 8010b46:	481a      	ldr	r0, [pc, #104]	@ (8010bb0 <SVCCTL_App_Notification+0x580>)
 8010b48:	f002 f852 	bl	8012bf0 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8010b80 <SVCCTL_App_Notification+0x550>)
 8010b4e:	8adb      	ldrh	r3, [r3, #22]
 8010b50:	4618      	mov	r0, r3
 8010b52:	f7fe fa11 	bl	800ef78 <aci_gatt_confirm_indication>
        break;
 8010b56:	e002      	b.n	8010b5e <SVCCTL_App_Notification+0x52e>
          break;
 8010b58:	bf00      	nop
 8010b5a:	e003      	b.n	8010b64 <SVCCTL_App_Notification+0x534>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010b5c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010b5e:	e001      	b.n	8010b64 <SVCCTL_App_Notification+0x534>
      break;
 8010b60:	bf00      	nop
 8010b62:	e000      	b.n	8010b66 <SVCCTL_App_Notification+0x536>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010b64:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010b66:	2301      	movs	r3, #1
}
 8010b68:	4618      	mov	r0, r3
 8010b6a:	3728      	adds	r7, #40	@ 0x28
 8010b6c:	46bd      	mov	sp, r7
 8010b6e:	bdb0      	pop	{r4, r5, r7, pc}
 8010b70:	08014320 	.word	0x08014320
 8010b74:	08015880 	.word	0x08015880
 8010b78:	0801433c 	.word	0x0801433c
 8010b7c:	08014660 	.word	0x08014660
 8010b80:	20000938 	.word	0x20000938
 8010b84:	0001b207 	.word	0x0001b207
 8010b88:	08014688 	.word	0x08014688
 8010b8c:	080146bc 	.word	0x080146bc
 8010b90:	080146e4 	.word	0x080146e4
 8010b94:	08014718 	.word	0x08014718
 8010b98:	08014734 	.word	0x08014734
 8010b9c:	0801474c 	.word	0x0801474c
 8010ba0:	0801479c 	.word	0x0801479c
 8010ba4:	080147e4 	.word	0x080147e4
 8010ba8:	08014810 	.word	0x08014810
 8010bac:	0801484c 	.word	0x0801484c
 8010bb0:	08014864 	.word	0x08014864

08010bb4 <MVT_REF_fin>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void MVT_REF_fin(void)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_fin();
 8010bb8:	f000 fcc8 	bl	801154c <FSVC_MVT_REF_fin>
}
 8010bbc:	bf00      	nop
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <MVT_REF_vide>:
void MVT_REF_vide(void)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_vide();
 8010bc4:	f000 fcd0 	bl	8011568 <FSVC_MVT_REF_vide>
}
 8010bc8:	bf00      	nop
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <MVT_REF_validation_succes>:

void MVT_REF_validation_succes(void)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_succes();
 8010bd0:	f000 fcd8 	bl	8011584 <FSVC_MVT_REF_validation_succes>
}
 8010bd4:	bf00      	nop
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <MVT_REF_validation_fail>:
void MVT_REF_validation_fail(void)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_fail();
 8010bdc:	f000 fce0 	bl	80115a0 <FSVC_MVT_REF_validation_fail>
}
 8010be0:	bf00      	nop
 8010be2:	bd80      	pop	{r7, pc}

08010be4 <MVT_REF_validation_vide>:
void MVT_REF_validation_vide(void)
{
 8010be4:	b580      	push	{r7, lr}
 8010be6:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_vide();
 8010be8:	f000 fce8 	bl	80115bc <FSVC_MVT_REF_validation_vide>
}
 8010bec:	bf00      	nop
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <MVT_vide>:

void MVT_vide(void)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	af00      	add	r7, sp, #0
	FSVC_MVT_vide();
 8010bf4:	f000 fcf0 	bl	80115d8 <FSVC_MVT_vide>
}
 8010bf8:	bf00      	nop
 8010bfa:	bd80      	pop	{r7, pc}

08010bfc <MVT_valide>:
void MVT_valide(void)
{
 8010bfc:	b580      	push	{r7, lr}
 8010bfe:	af00      	add	r7, sp, #0
	FSVC_MVT_valide();
 8010c00:	f000 fcf8 	bl	80115f4 <FSVC_MVT_valide>
}
 8010c04:	bf00      	nop
 8010c06:	bd80      	pop	{r7, pc}

08010c08 <MVT_non_valide>:
void MVT_non_valide(void)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	af00      	add	r7, sp, #0
	FSVC_MVT_non_valide();
 8010c0c:	f000 fd00 	bl	8011610 <FSVC_MVT_non_valide>
}
 8010c10:	bf00      	nop
 8010c12:	bd80      	pop	{r7, pc}

08010c14 <MVT_BRAS_GAUCHE>:
void MVT_BRAS_GAUCHE(void)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_GAUCHE();
 8010c18:	f000 fd08 	bl	801162c <FSVC_MVT_BRAS_GAUCHE>
}
 8010c1c:	bf00      	nop
 8010c1e:	bd80      	pop	{r7, pc}

08010c20 <MVT_BRAS_DROIT>:
void MVT_BRAS_DROIT(void)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_DROIT();
 8010c24:	f000 fd10 	bl	8011648 <FSVC_MVT_BRAS_DROIT>
}
 8010c28:	bf00      	nop
 8010c2a:	bd80      	pop	{r7, pc}

08010c2c <MVT_BRAS_CORRECT>:
void MVT_BRAS_CORRECT(void)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_CORRECT();
 8010c30:	f000 fd18 	bl	8011664 <FSVC_MVT_BRAS_CORRECT>
}
 8010c34:	bf00      	nop
 8010c36:	bd80      	pop	{r7, pc}

08010c38 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b082      	sub	sp, #8
 8010c3c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010c3e:	4b06      	ldr	r3, [pc, #24]	@ (8010c58 <Ble_Tl_Init+0x20>)
 8010c40:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8010c42:	4b06      	ldr	r3, [pc, #24]	@ (8010c5c <Ble_Tl_Init+0x24>)
 8010c44:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8010c46:	463b      	mov	r3, r7
 8010c48:	4619      	mov	r1, r3
 8010c4a:	4805      	ldr	r0, [pc, #20]	@ (8010c60 <Ble_Tl_Init+0x28>)
 8010c4c:	f7fe fdfa 	bl	800f844 <hci_init>

  return;
 8010c50:	bf00      	nop
}
 8010c52:	3708      	adds	r7, #8
 8010c54:	46bd      	mov	sp, r7
 8010c56:	bd80      	pop	{r7, pc}
 8010c58:	200300d8 	.word	0x200300d8
 8010c5c:	0801142d 	.word	0x0801142d
 8010c60:	080113f5 	.word	0x080113f5

08010c64 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8010c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c66:	b08d      	sub	sp, #52	@ 0x34
 8010c68:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010c6e:	2392      	movs	r3, #146	@ 0x92
 8010c70:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8010c72:	48a3      	ldr	r0, [pc, #652]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010c74:	f7ff fb02 	bl	801027c <DbgTraceGetFileName>
 8010c78:	4601      	mov	r1, r0
 8010c7a:	f240 23f9 	movw	r3, #761	@ 0x2f9
 8010c7e:	4aa1      	ldr	r2, [pc, #644]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010c80:	48a1      	ldr	r0, [pc, #644]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010c82:	f001 ffb5 	bl	8012bf0 <iprintf>
 8010c86:	48a1      	ldr	r0, [pc, #644]	@ (8010f0c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8010c88:	f002 f822 	bl	8012cd0 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8010c8c:	f7fe fb09 	bl	800f2a2 <hci_reset>
 8010c90:	4603      	mov	r3, r0
 8010c92:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010c94:	7dfb      	ldrb	r3, [r7, #23]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d00f      	beq.n	8010cba <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8010c9a:	4899      	ldr	r0, [pc, #612]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010c9c:	f7ff faee 	bl	801027c <DbgTraceGetFileName>
 8010ca0:	4601      	mov	r1, r0
 8010ca2:	f240 3302 	movw	r3, #770	@ 0x302
 8010ca6:	4a97      	ldr	r2, [pc, #604]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010ca8:	4897      	ldr	r0, [pc, #604]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010caa:	f001 ffa1 	bl	8012bf0 <iprintf>
 8010cae:	7dfb      	ldrb	r3, [r7, #23]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4897      	ldr	r0, [pc, #604]	@ (8010f10 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8010cb4:	f001 ff9c 	bl	8012bf0 <iprintf>
 8010cb8:	e00c      	b.n	8010cd4 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8010cba:	4891      	ldr	r0, [pc, #580]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010cbc:	f7ff fade 	bl	801027c <DbgTraceGetFileName>
 8010cc0:	4601      	mov	r1, r0
 8010cc2:	f240 3306 	movw	r3, #774	@ 0x306
 8010cc6:	4a8f      	ldr	r2, [pc, #572]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010cc8:	488f      	ldr	r0, [pc, #572]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010cca:	f001 ff91 	bl	8012bf0 <iprintf>
 8010cce:	4891      	ldr	r0, [pc, #580]	@ (8010f14 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8010cd0:	f001 fffe 	bl	8012cd0 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010cd4:	f000 fad8 	bl	8011288 <BleGetBdAddress>
 8010cd8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010cda:	693a      	ldr	r2, [r7, #16]
 8010cdc:	2106      	movs	r1, #6
 8010cde:	2000      	movs	r0, #0
 8010ce0:	f7fe f99f 	bl	800f022 <aci_hal_write_config_data>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010ce8:	7dfb      	ldrb	r3, [r7, #23]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d00f      	beq.n	8010d0e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8010cee:	4884      	ldr	r0, [pc, #528]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010cf0:	f7ff fac4 	bl	801027c <DbgTraceGetFileName>
 8010cf4:	4601      	mov	r1, r0
 8010cf6:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8010cfa:	4a82      	ldr	r2, [pc, #520]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010cfc:	4882      	ldr	r0, [pc, #520]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010cfe:	f001 ff77 	bl	8012bf0 <iprintf>
 8010d02:	7dfb      	ldrb	r3, [r7, #23]
 8010d04:	4619      	mov	r1, r3
 8010d06:	4884      	ldr	r0, [pc, #528]	@ (8010f18 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8010d08:	f001 ff72 	bl	8012bf0 <iprintf>
 8010d0c:	e035      	b.n	8010d7a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8010d0e:	487c      	ldr	r0, [pc, #496]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010d10:	f7ff fab4 	bl	801027c <DbgTraceGetFileName>
 8010d14:	4601      	mov	r1, r0
 8010d16:	f44f 7345 	mov.w	r3, #788	@ 0x314
 8010d1a:	4a7a      	ldr	r2, [pc, #488]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010d1c:	487a      	ldr	r0, [pc, #488]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010d1e:	f001 ff67 	bl	8012bf0 <iprintf>
 8010d22:	487e      	ldr	r0, [pc, #504]	@ (8010f1c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8010d24:	f001 ffd4 	bl	8012cd0 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8010d28:	4875      	ldr	r0, [pc, #468]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010d2a:	f7ff faa7 	bl	801027c <DbgTraceGetFileName>
 8010d2e:	4601      	mov	r1, r0
 8010d30:	f240 3315 	movw	r3, #789	@ 0x315
 8010d34:	4a73      	ldr	r2, [pc, #460]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010d36:	4874      	ldr	r0, [pc, #464]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010d38:	f001 ff5a 	bl	8012bf0 <iprintf>
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	3305      	adds	r3, #5
 8010d40:	781b      	ldrb	r3, [r3, #0]
 8010d42:	4618      	mov	r0, r3
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	3304      	adds	r3, #4
 8010d48:	781b      	ldrb	r3, [r3, #0]
 8010d4a:	461c      	mov	r4, r3
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	3303      	adds	r3, #3
 8010d50:	781b      	ldrb	r3, [r3, #0]
 8010d52:	461d      	mov	r5, r3
 8010d54:	693b      	ldr	r3, [r7, #16]
 8010d56:	3302      	adds	r3, #2
 8010d58:	781b      	ldrb	r3, [r3, #0]
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	693b      	ldr	r3, [r7, #16]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	4619      	mov	r1, r3
 8010d64:	693b      	ldr	r3, [r7, #16]
 8010d66:	781b      	ldrb	r3, [r3, #0]
 8010d68:	9302      	str	r3, [sp, #8]
 8010d6a:	9101      	str	r1, [sp, #4]
 8010d6c:	9200      	str	r2, [sp, #0]
 8010d6e:	462b      	mov	r3, r5
 8010d70:	4622      	mov	r2, r4
 8010d72:	4601      	mov	r1, r0
 8010d74:	486a      	ldr	r0, [pc, #424]	@ (8010f20 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8010d76:	f001 ff3b 	bl	8012bf0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010d7a:	4a6a      	ldr	r2, [pc, #424]	@ (8010f24 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8010d7c:	2110      	movs	r1, #16
 8010d7e:	2018      	movs	r0, #24
 8010d80:	f7fe f94f 	bl	800f022 <aci_hal_write_config_data>
 8010d84:	4603      	mov	r3, r0
 8010d86:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010d88:	7dfb      	ldrb	r3, [r7, #23]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d00f      	beq.n	8010dae <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8010d8e:	485c      	ldr	r0, [pc, #368]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010d90:	f7ff fa74 	bl	801027c <DbgTraceGetFileName>
 8010d94:	4601      	mov	r1, r0
 8010d96:	f240 335f 	movw	r3, #863	@ 0x35f
 8010d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010d9c:	485a      	ldr	r0, [pc, #360]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010d9e:	f001 ff27 	bl	8012bf0 <iprintf>
 8010da2:	7dfb      	ldrb	r3, [r7, #23]
 8010da4:	4619      	mov	r1, r3
 8010da6:	4860      	ldr	r0, [pc, #384]	@ (8010f28 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8010da8:	f001 ff22 	bl	8012bf0 <iprintf>
 8010dac:	e00c      	b.n	8010dc8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8010dae:	4854      	ldr	r0, [pc, #336]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010db0:	f7ff fa64 	bl	801027c <DbgTraceGetFileName>
 8010db4:	4601      	mov	r1, r0
 8010db6:	f240 3363 	movw	r3, #867	@ 0x363
 8010dba:	4a52      	ldr	r2, [pc, #328]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010dbc:	4852      	ldr	r0, [pc, #328]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010dbe:	f001 ff17 	bl	8012bf0 <iprintf>
 8010dc2:	485a      	ldr	r0, [pc, #360]	@ (8010f2c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8010dc4:	f001 ff84 	bl	8012cd0 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010dc8:	4a59      	ldr	r2, [pc, #356]	@ (8010f30 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8010dca:	2110      	movs	r1, #16
 8010dcc:	2008      	movs	r0, #8
 8010dce:	f7fe f928 	bl	800f022 <aci_hal_write_config_data>
 8010dd2:	4603      	mov	r3, r0
 8010dd4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010dd6:	7dfb      	ldrb	r3, [r7, #23]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d00f      	beq.n	8010dfc <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8010ddc:	4848      	ldr	r0, [pc, #288]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010dde:	f7ff fa4d 	bl	801027c <DbgTraceGetFileName>
 8010de2:	4601      	mov	r1, r0
 8010de4:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8010de8:	4a46      	ldr	r2, [pc, #280]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010dea:	4847      	ldr	r0, [pc, #284]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010dec:	f001 ff00 	bl	8012bf0 <iprintf>
 8010df0:	7dfb      	ldrb	r3, [r7, #23]
 8010df2:	4619      	mov	r1, r3
 8010df4:	484f      	ldr	r0, [pc, #316]	@ (8010f34 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8010df6:	f001 fefb 	bl	8012bf0 <iprintf>
 8010dfa:	e00c      	b.n	8010e16 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8010dfc:	4840      	ldr	r0, [pc, #256]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010dfe:	f7ff fa3d 	bl	801027c <DbgTraceGetFileName>
 8010e02:	4601      	mov	r1, r0
 8010e04:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8010e08:	4a3e      	ldr	r2, [pc, #248]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e0a:	483f      	ldr	r0, [pc, #252]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e0c:	f001 fef0 	bl	8012bf0 <iprintf>
 8010e10:	4849      	ldr	r0, [pc, #292]	@ (8010f38 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8010e12:	f001 ff5d 	bl	8012cd0 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8010e16:	2118      	movs	r1, #24
 8010e18:	2001      	movs	r0, #1
 8010e1a:	f7fe f987 	bl	800f12c <aci_hal_set_tx_power_level>
 8010e1e:	4603      	mov	r3, r0
 8010e20:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d00f      	beq.n	8010e48 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8010e28:	4835      	ldr	r0, [pc, #212]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e2a:	f7ff fa27 	bl	801027c <DbgTraceGetFileName>
 8010e2e:	4601      	mov	r1, r0
 8010e30:	f240 3379 	movw	r3, #889	@ 0x379
 8010e34:	4a33      	ldr	r2, [pc, #204]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e36:	4834      	ldr	r0, [pc, #208]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e38:	f001 feda 	bl	8012bf0 <iprintf>
 8010e3c:	7dfb      	ldrb	r3, [r7, #23]
 8010e3e:	4619      	mov	r1, r3
 8010e40:	483e      	ldr	r0, [pc, #248]	@ (8010f3c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8010e42:	f001 fed5 	bl	8012bf0 <iprintf>
 8010e46:	e00c      	b.n	8010e62 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8010e48:	482d      	ldr	r0, [pc, #180]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e4a:	f7ff fa17 	bl	801027c <DbgTraceGetFileName>
 8010e4e:	4601      	mov	r1, r0
 8010e50:	f240 337d 	movw	r3, #893	@ 0x37d
 8010e54:	4a2b      	ldr	r2, [pc, #172]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e56:	482c      	ldr	r0, [pc, #176]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e58:	f001 feca 	bl	8012bf0 <iprintf>
 8010e5c:	4838      	ldr	r0, [pc, #224]	@ (8010f40 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8010e5e:	f001 ff37 	bl	8012cd0 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8010e62:	f7fd fddd 	bl	800ea20 <aci_gatt_init>
 8010e66:	4603      	mov	r3, r0
 8010e68:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010e6a:	7dfb      	ldrb	r3, [r7, #23]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d00f      	beq.n	8010e90 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8010e70:	4823      	ldr	r0, [pc, #140]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e72:	f7ff fa03 	bl	801027c <DbgTraceGetFileName>
 8010e76:	4601      	mov	r1, r0
 8010e78:	f240 3386 	movw	r3, #902	@ 0x386
 8010e7c:	4a21      	ldr	r2, [pc, #132]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e7e:	4822      	ldr	r0, [pc, #136]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e80:	f001 feb6 	bl	8012bf0 <iprintf>
 8010e84:	7dfb      	ldrb	r3, [r7, #23]
 8010e86:	4619      	mov	r1, r3
 8010e88:	482e      	ldr	r0, [pc, #184]	@ (8010f44 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8010e8a:	f001 feb1 	bl	8012bf0 <iprintf>
 8010e8e:	e00c      	b.n	8010eaa <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8010e90:	481b      	ldr	r0, [pc, #108]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e92:	f7ff f9f3 	bl	801027c <DbgTraceGetFileName>
 8010e96:	4601      	mov	r1, r0
 8010e98:	f240 338a 	movw	r3, #906	@ 0x38a
 8010e9c:	4a19      	ldr	r2, [pc, #100]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e9e:	481a      	ldr	r0, [pc, #104]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010ea0:	f001 fea6 	bl	8012bf0 <iprintf>
 8010ea4:	4828      	ldr	r0, [pc, #160]	@ (8010f48 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8010ea6:	f001 ff13 	bl	8012cd0 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010eae:	7bfb      	ldrb	r3, [r7, #15]
 8010eb0:	f043 0301 	orr.w	r3, r3, #1
 8010eb4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8010eb6:	7bfb      	ldrb	r3, [r7, #15]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d069      	beq.n	8010f90 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010ebc:	4b23      	ldr	r3, [pc, #140]	@ (8010f4c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8010ebe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010ec0:	1dba      	adds	r2, r7, #6
 8010ec2:	7bf8      	ldrb	r0, [r7, #15]
 8010ec4:	1cbb      	adds	r3, r7, #2
 8010ec6:	9301      	str	r3, [sp, #4]
 8010ec8:	1d3b      	adds	r3, r7, #4
 8010eca:	9300      	str	r3, [sp, #0]
 8010ecc:	4613      	mov	r3, r2
 8010ece:	2203      	movs	r2, #3
 8010ed0:	2100      	movs	r1, #0
 8010ed2:	f7fd fbfb 	bl	800e6cc <aci_gap_init>
 8010ed6:	4603      	mov	r3, r0
 8010ed8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8010eda:	7dfb      	ldrb	r3, [r7, #23]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d039      	beq.n	8010f54 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8010ee0:	4807      	ldr	r0, [pc, #28]	@ (8010f00 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010ee2:	f7ff f9cb 	bl	801027c <DbgTraceGetFileName>
 8010ee6:	4601      	mov	r1, r0
 8010ee8:	f240 33aa 	movw	r3, #938	@ 0x3aa
 8010eec:	4a05      	ldr	r2, [pc, #20]	@ (8010f04 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010eee:	4806      	ldr	r0, [pc, #24]	@ (8010f08 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010ef0:	f001 fe7e 	bl	8012bf0 <iprintf>
 8010ef4:	7dfb      	ldrb	r3, [r7, #23]
 8010ef6:	4619      	mov	r1, r3
 8010ef8:	4815      	ldr	r0, [pc, #84]	@ (8010f50 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8010efa:	f001 fe79 	bl	8012bf0 <iprintf>
 8010efe:	e036      	b.n	8010f6e <Ble_Hci_Gap_Gatt_Init+0x30a>
 8010f00:	08014320 	.word	0x08014320
 8010f04:	08015898 	.word	0x08015898
 8010f08:	0801433c 	.word	0x0801433c
 8010f0c:	0801488c 	.word	0x0801488c
 8010f10:	080148b8 	.word	0x080148b8
 8010f14:	080148e8 	.word	0x080148e8
 8010f18:	08014908 	.word	0x08014908
 8010f1c:	08014964 	.word	0x08014964
 8010f20:	080149b0 	.word	0x080149b0
 8010f24:	08015850 	.word	0x08015850
 8010f28:	080149ec 	.word	0x080149ec
 8010f2c:	08014a44 	.word	0x08014a44
 8010f30:	08015860 	.word	0x08015860
 8010f34:	08014a8c 	.word	0x08014a8c
 8010f38:	08014ae4 	.word	0x08014ae4
 8010f3c:	08014b2c 	.word	0x08014b2c
 8010f40:	08014b6c 	.word	0x08014b6c
 8010f44:	08014b9c 	.word	0x08014b9c
 8010f48:	08014bd0 	.word	0x08014bd0
 8010f4c:	08014bf4 	.word	0x08014bf4
 8010f50:	08014bf8 	.word	0x08014bf8
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8010f54:	487e      	ldr	r0, [pc, #504]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010f56:	f7ff f991 	bl	801027c <DbgTraceGetFileName>
 8010f5a:	4601      	mov	r1, r0
 8010f5c:	f240 33ae 	movw	r3, #942	@ 0x3ae
 8010f60:	4a7c      	ldr	r2, [pc, #496]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010f62:	487d      	ldr	r0, [pc, #500]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010f64:	f001 fe44 	bl	8012bf0 <iprintf>
 8010f68:	487c      	ldr	r0, [pc, #496]	@ (801115c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8010f6a:	f001 feb1 	bl	8012cd0 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010f6e:	88fc      	ldrh	r4, [r7, #6]
 8010f70:	88bd      	ldrh	r5, [r7, #4]
 8010f72:	68b8      	ldr	r0, [r7, #8]
 8010f74:	f7ef f904 	bl	8000180 <strlen>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	b2da      	uxtb	r2, r3
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	4613      	mov	r3, r2
 8010f82:	2200      	movs	r2, #0
 8010f84:	4629      	mov	r1, r5
 8010f86:	4620      	mov	r0, r4
 8010f88:	f7fd ff4d 	bl	800ee26 <aci_gatt_update_char_value>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010f90:	88f8      	ldrh	r0, [r7, #6]
 8010f92:	8879      	ldrh	r1, [r7, #2]
 8010f94:	463b      	mov	r3, r7
 8010f96:	9300      	str	r3, [sp, #0]
 8010f98:	2302      	movs	r3, #2
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	f7fd ff43 	bl	800ee26 <aci_gatt_update_char_value>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8010fa4:	2202      	movs	r2, #2
 8010fa6:	2102      	movs	r1, #2
 8010fa8:	2000      	movs	r0, #0
 8010faa:	f7fe f99e 	bl	800f2ea <hci_le_set_default_phy>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010fb2:	7dfb      	ldrb	r3, [r7, #23]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d00f      	beq.n	8010fd8 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8010fb8:	4865      	ldr	r0, [pc, #404]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010fba:	f7ff f95f 	bl	801027c <DbgTraceGetFileName>
 8010fbe:	4601      	mov	r1, r0
 8010fc0:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 8010fc4:	4a63      	ldr	r2, [pc, #396]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010fc6:	4864      	ldr	r0, [pc, #400]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010fc8:	f001 fe12 	bl	8012bf0 <iprintf>
 8010fcc:	7dfb      	ldrb	r3, [r7, #23]
 8010fce:	4619      	mov	r1, r3
 8010fd0:	4863      	ldr	r0, [pc, #396]	@ (8011160 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 8010fd2:	f001 fe0d 	bl	8012bf0 <iprintf>
 8010fd6:	e00c      	b.n	8010ff2 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8010fd8:	485d      	ldr	r0, [pc, #372]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010fda:	f7ff f94f 	bl	801027c <DbgTraceGetFileName>
 8010fde:	4601      	mov	r1, r0
 8010fe0:	f44f 7375 	mov.w	r3, #980	@ 0x3d4
 8010fe4:	4a5b      	ldr	r2, [pc, #364]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010fe6:	485c      	ldr	r0, [pc, #368]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010fe8:	f001 fe02 	bl	8012bf0 <iprintf>
 8010fec:	485d      	ldr	r0, [pc, #372]	@ (8011164 <Ble_Hci_Gap_Gatt_Init+0x500>)
 8010fee:	f001 fe6f 	bl	8012cd0 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8010ff2:	4b5d      	ldr	r3, [pc, #372]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8010ff8:	4b5b      	ldr	r3, [pc, #364]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f7fd f9e6 	bl	800e3ce <aci_gap_set_io_capability>
 8011002:	4603      	mov	r3, r0
 8011004:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8011006:	7dfb      	ldrb	r3, [r7, #23]
 8011008:	2b00      	cmp	r3, #0
 801100a:	d00f      	beq.n	801102c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 801100c:	4850      	ldr	r0, [pc, #320]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801100e:	f7ff f935 	bl	801027c <DbgTraceGetFileName>
 8011012:	4601      	mov	r1, r0
 8011014:	f240 33de 	movw	r3, #990	@ 0x3de
 8011018:	4a4e      	ldr	r2, [pc, #312]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801101a:	484f      	ldr	r0, [pc, #316]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801101c:	f001 fde8 	bl	8012bf0 <iprintf>
 8011020:	7dfb      	ldrb	r3, [r7, #23]
 8011022:	4619      	mov	r1, r3
 8011024:	4851      	ldr	r0, [pc, #324]	@ (801116c <Ble_Hci_Gap_Gatt_Init+0x508>)
 8011026:	f001 fde3 	bl	8012bf0 <iprintf>
 801102a:	e00c      	b.n	8011046 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 801102c:	4848      	ldr	r0, [pc, #288]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801102e:	f7ff f925 	bl	801027c <DbgTraceGetFileName>
 8011032:	4601      	mov	r1, r0
 8011034:	f240 33e2 	movw	r3, #994	@ 0x3e2
 8011038:	4a46      	ldr	r2, [pc, #280]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801103a:	4847      	ldr	r0, [pc, #284]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801103c:	f001 fdd8 	bl	8012bf0 <iprintf>
 8011040:	484b      	ldr	r0, [pc, #300]	@ (8011170 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8011042:	f001 fe45 	bl	8012cd0 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011046:	4b48      	ldr	r3, [pc, #288]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011048:	2201      	movs	r2, #1
 801104a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 801104c:	4b46      	ldr	r3, [pc, #280]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801104e:	2208      	movs	r2, #8
 8011050:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011052:	4b45      	ldr	r3, [pc, #276]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011054:	2210      	movs	r2, #16
 8011056:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011058:	4b43      	ldr	r3, [pc, #268]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801105a:	2200      	movs	r2, #0
 801105c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801105e:	4b42      	ldr	r3, [pc, #264]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011060:	4a44      	ldr	r2, [pc, #272]	@ (8011174 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8011062:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011064:	4b40      	ldr	r3, [pc, #256]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011066:	2200      	movs	r2, #0
 8011068:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801106a:	4b3f      	ldr	r3, [pc, #252]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801106c:	789c      	ldrb	r4, [r3, #2]
 801106e:	4b3e      	ldr	r3, [pc, #248]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011070:	785d      	ldrb	r5, [r3, #1]
 8011072:	4b3d      	ldr	r3, [pc, #244]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011074:	791b      	ldrb	r3, [r3, #4]
 8011076:	4a3c      	ldr	r2, [pc, #240]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011078:	7952      	ldrb	r2, [r2, #5]
 801107a:	493b      	ldr	r1, [pc, #236]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801107c:	78c9      	ldrb	r1, [r1, #3]
 801107e:	483a      	ldr	r0, [pc, #232]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011080:	6880      	ldr	r0, [r0, #8]
 8011082:	2600      	movs	r6, #0
 8011084:	9604      	str	r6, [sp, #16]
 8011086:	9003      	str	r0, [sp, #12]
 8011088:	9102      	str	r1, [sp, #8]
 801108a:	9201      	str	r2, [sp, #4]
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	2300      	movs	r3, #0
 8011090:	2201      	movs	r2, #1
 8011092:	4629      	mov	r1, r5
 8011094:	4620      	mov	r0, r4
 8011096:	f7fd f9ee 	bl	800e476 <aci_gap_set_authentication_requirement>
 801109a:	4603      	mov	r3, r0
 801109c:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 801109e:	7dfb      	ldrb	r3, [r7, #23]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00f      	beq.n	80110c4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80110a4:	482a      	ldr	r0, [pc, #168]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80110a6:	f7ff f8e9 	bl	801027c <DbgTraceGetFileName>
 80110aa:	4601      	mov	r1, r0
 80110ac:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 80110b0:	4a28      	ldr	r2, [pc, #160]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80110b2:	4829      	ldr	r0, [pc, #164]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80110b4:	f001 fd9c 	bl	8012bf0 <iprintf>
 80110b8:	7dfb      	ldrb	r3, [r7, #23]
 80110ba:	4619      	mov	r1, r3
 80110bc:	482e      	ldr	r0, [pc, #184]	@ (8011178 <Ble_Hci_Gap_Gatt_Init+0x514>)
 80110be:	f001 fd97 	bl	8012bf0 <iprintf>
 80110c2:	e00c      	b.n	80110de <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80110c4:	4822      	ldr	r0, [pc, #136]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80110c6:	f7ff f8d9 	bl	801027c <DbgTraceGetFileName>
 80110ca:	4601      	mov	r1, r0
 80110cc:	f240 4301 	movw	r3, #1025	@ 0x401
 80110d0:	4a20      	ldr	r2, [pc, #128]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80110d2:	4821      	ldr	r0, [pc, #132]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80110d4:	f001 fd8c 	bl	8012bf0 <iprintf>
 80110d8:	4828      	ldr	r0, [pc, #160]	@ (801117c <Ble_Hci_Gap_Gatt_Init+0x518>)
 80110da:	f001 fdf9 	bl	8012cd0 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80110de:	4b22      	ldr	r3, [pc, #136]	@ (8011168 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80110e0:	789b      	ldrb	r3, [r3, #2]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d023      	beq.n	801112e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 80110e6:	f7fd fc10 	bl	800e90a <aci_gap_configure_filter_accept_list>
 80110ea:	4603      	mov	r3, r0
 80110ec:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 80110ee:	7dfb      	ldrb	r3, [r7, #23]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d00f      	beq.n	8011114 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 80110f4:	4816      	ldr	r0, [pc, #88]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80110f6:	f7ff f8c1 	bl	801027c <DbgTraceGetFileName>
 80110fa:	4601      	mov	r1, r0
 80110fc:	f240 430c 	movw	r3, #1036	@ 0x40c
 8011100:	4a14      	ldr	r2, [pc, #80]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011102:	4815      	ldr	r0, [pc, #84]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011104:	f001 fd74 	bl	8012bf0 <iprintf>
 8011108:	7dfb      	ldrb	r3, [r7, #23]
 801110a:	4619      	mov	r1, r3
 801110c:	481c      	ldr	r0, [pc, #112]	@ (8011180 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 801110e:	f001 fd6f 	bl	8012bf0 <iprintf>
 8011112:	e00c      	b.n	801112e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8011114:	480e      	ldr	r0, [pc, #56]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011116:	f7ff f8b1 	bl	801027c <DbgTraceGetFileName>
 801111a:	4601      	mov	r1, r0
 801111c:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8011120:	4a0c      	ldr	r2, [pc, #48]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011122:	480d      	ldr	r0, [pc, #52]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011124:	f001 fd64 	bl	8012bf0 <iprintf>
 8011128:	4816      	ldr	r0, [pc, #88]	@ (8011184 <Ble_Hci_Gap_Gatt_Init+0x520>)
 801112a:	f001 fdd1 	bl	8012cd0 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 801112e:	4808      	ldr	r0, [pc, #32]	@ (8011150 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011130:	f7ff f8a4 	bl	801027c <DbgTraceGetFileName>
 8011134:	4601      	mov	r1, r0
 8011136:	f240 4313 	movw	r3, #1043	@ 0x413
 801113a:	4a06      	ldr	r2, [pc, #24]	@ (8011154 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801113c:	4806      	ldr	r0, [pc, #24]	@ (8011158 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801113e:	f001 fd57 	bl	8012bf0 <iprintf>
 8011142:	4811      	ldr	r0, [pc, #68]	@ (8011188 <Ble_Hci_Gap_Gatt_Init+0x524>)
 8011144:	f001 fd54 	bl	8012bf0 <iprintf>
}
 8011148:	bf00      	nop
 801114a:	371c      	adds	r7, #28
 801114c:	46bd      	mov	sp, r7
 801114e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011150:	08014320 	.word	0x08014320
 8011154:	08015898 	.word	0x08015898
 8011158:	0801433c 	.word	0x0801433c
 801115c:	08014c28 	.word	0x08014c28
 8011160:	08014c48 	.word	0x08014c48
 8011164:	08014c84 	.word	0x08014c84
 8011168:	20000938 	.word	0x20000938
 801116c:	08014cb0 	.word	0x08014cb0
 8011170:	08014cf0 	.word	0x08014cf0
 8011174:	0001b207 	.word	0x0001b207
 8011178:	08014d20 	.word	0x08014d20
 801117c:	08014d6c 	.word	0x08014d6c
 8011180:	08014da8 	.word	0x08014da8
 8011184:	08014de8 	.word	0x08014de8
 8011188:	08014e18 	.word	0x08014e18

0801118c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 801118c:	b580      	push	{r7, lr}
 801118e:	b08c      	sub	sp, #48	@ 0x30
 8011190:	af08      	add	r7, sp, #32
 8011192:	4603      	mov	r3, r0
 8011194:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011196:	2392      	movs	r3, #146	@ 0x92
 8011198:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801119a:	4a32      	ldr	r2, [pc, #200]	@ (8011264 <Adv_Request+0xd8>)
 801119c:	79fb      	ldrb	r3, [r7, #7]
 801119e:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80111a2:	2300      	movs	r3, #0
 80111a4:	9306      	str	r3, [sp, #24]
 80111a6:	2300      	movs	r3, #0
 80111a8:	9305      	str	r3, [sp, #20]
 80111aa:	2300      	movs	r3, #0
 80111ac:	9304      	str	r3, [sp, #16]
 80111ae:	2300      	movs	r3, #0
 80111b0:	9303      	str	r3, [sp, #12]
 80111b2:	2300      	movs	r3, #0
 80111b4:	9302      	str	r3, [sp, #8]
 80111b6:	2300      	movs	r3, #0
 80111b8:	9301      	str	r3, [sp, #4]
 80111ba:	2300      	movs	r3, #0
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	2300      	movs	r3, #0
 80111c0:	22a0      	movs	r2, #160	@ 0xa0
 80111c2:	2180      	movs	r1, #128	@ 0x80
 80111c4:	2000      	movs	r0, #0
 80111c6:	f7fd f808 	bl	800e1da <aci_gap_set_discoverable>
 80111ca:	4603      	mov	r3, r0
 80111cc:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80111ce:	7bfb      	ldrb	r3, [r7, #15]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00f      	beq.n	80111f4 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80111d4:	4824      	ldr	r0, [pc, #144]	@ (8011268 <Adv_Request+0xdc>)
 80111d6:	f7ff f851 	bl	801027c <DbgTraceGetFileName>
 80111da:	4601      	mov	r1, r0
 80111dc:	f240 4329 	movw	r3, #1065	@ 0x429
 80111e0:	4a22      	ldr	r2, [pc, #136]	@ (801126c <Adv_Request+0xe0>)
 80111e2:	4823      	ldr	r0, [pc, #140]	@ (8011270 <Adv_Request+0xe4>)
 80111e4:	f001 fd04 	bl	8012bf0 <iprintf>
 80111e8:	7bfb      	ldrb	r3, [r7, #15]
 80111ea:	4619      	mov	r1, r3
 80111ec:	4821      	ldr	r0, [pc, #132]	@ (8011274 <Adv_Request+0xe8>)
 80111ee:	f001 fcff 	bl	8012bf0 <iprintf>
 80111f2:	e00c      	b.n	801120e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 80111f4:	481c      	ldr	r0, [pc, #112]	@ (8011268 <Adv_Request+0xdc>)
 80111f6:	f7ff f841 	bl	801027c <DbgTraceGetFileName>
 80111fa:	4601      	mov	r1, r0
 80111fc:	f240 432d 	movw	r3, #1069	@ 0x42d
 8011200:	4a1a      	ldr	r2, [pc, #104]	@ (801126c <Adv_Request+0xe0>)
 8011202:	481b      	ldr	r0, [pc, #108]	@ (8011270 <Adv_Request+0xe4>)
 8011204:	f001 fcf4 	bl	8012bf0 <iprintf>
 8011208:	481b      	ldr	r0, [pc, #108]	@ (8011278 <Adv_Request+0xec>)
 801120a:	f001 fd61 	bl	8012cd0 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 801120e:	491b      	ldr	r1, [pc, #108]	@ (801127c <Adv_Request+0xf0>)
 8011210:	201b      	movs	r0, #27
 8011212:	f7fd fb08 	bl	800e826 <aci_gap_update_adv_data>
 8011216:	4603      	mov	r3, r0
 8011218:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 801121a:	7bfb      	ldrb	r3, [r7, #15]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d00f      	beq.n	8011240 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8011220:	4811      	ldr	r0, [pc, #68]	@ (8011268 <Adv_Request+0xdc>)
 8011222:	f7ff f82b 	bl	801027c <DbgTraceGetFileName>
 8011226:	4601      	mov	r1, r0
 8011228:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 801122c:	4a0f      	ldr	r2, [pc, #60]	@ (801126c <Adv_Request+0xe0>)
 801122e:	4810      	ldr	r0, [pc, #64]	@ (8011270 <Adv_Request+0xe4>)
 8011230:	f001 fcde 	bl	8012bf0 <iprintf>
 8011234:	7bfb      	ldrb	r3, [r7, #15]
 8011236:	4619      	mov	r1, r3
 8011238:	4811      	ldr	r0, [pc, #68]	@ (8011280 <Adv_Request+0xf4>)
 801123a:	f001 fcd9 	bl	8012bf0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801123e:	e00d      	b.n	801125c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8011240:	4809      	ldr	r0, [pc, #36]	@ (8011268 <Adv_Request+0xdc>)
 8011242:	f7ff f81b 	bl	801027c <DbgTraceGetFileName>
 8011246:	4601      	mov	r1, r0
 8011248:	f240 433c 	movw	r3, #1084	@ 0x43c
 801124c:	4a07      	ldr	r2, [pc, #28]	@ (801126c <Adv_Request+0xe0>)
 801124e:	4808      	ldr	r0, [pc, #32]	@ (8011270 <Adv_Request+0xe4>)
 8011250:	f001 fcce 	bl	8012bf0 <iprintf>
 8011254:	480b      	ldr	r0, [pc, #44]	@ (8011284 <Adv_Request+0xf8>)
 8011256:	f001 fccb 	bl	8012bf0 <iprintf>
  return;
 801125a:	bf00      	nop
}
 801125c:	3710      	adds	r7, #16
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}
 8011262:	bf00      	nop
 8011264:	20000938 	.word	0x20000938
 8011268:	08014320 	.word	0x08014320
 801126c:	080158b0 	.word	0x080158b0
 8011270:	0801433c 	.word	0x0801433c
 8011274:	08014e44 	.word	0x08014e44
 8011278:	08014e7c 	.word	0x08014e7c
 801127c:	200000e8 	.word	0x200000e8
 8011280:	08014ea4 	.word	0x08014ea4
 8011284:	08014ed8 	.word	0x08014ed8

08011288 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8011288:	b580      	push	{r7, lr}
 801128a:	b086      	sub	sp, #24
 801128c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801128e:	f7ff f903 	bl	8010498 <LL_FLASH_GetUDN>
 8011292:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801129a:	d023      	beq.n	80112e4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 801129c:	f7ff f914 	bl	80104c8 <LL_FLASH_GetSTCompanyID>
 80112a0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80112a2:	f7ff f905 	bl	80104b0 <LL_FLASH_GetDeviceID>
 80112a6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	b2da      	uxtb	r2, r3
 80112ac:	4b16      	ldr	r3, [pc, #88]	@ (8011308 <BleGetBdAddress+0x80>)
 80112ae:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80112b0:	693b      	ldr	r3, [r7, #16]
 80112b2:	0a1b      	lsrs	r3, r3, #8
 80112b4:	b2da      	uxtb	r2, r3
 80112b6:	4b14      	ldr	r3, [pc, #80]	@ (8011308 <BleGetBdAddress+0x80>)
 80112b8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	b2da      	uxtb	r2, r3
 80112be:	4b12      	ldr	r3, [pc, #72]	@ (8011308 <BleGetBdAddress+0x80>)
 80112c0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	b2da      	uxtb	r2, r3
 80112c6:	4b10      	ldr	r3, [pc, #64]	@ (8011308 <BleGetBdAddress+0x80>)
 80112c8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80112ca:	68bb      	ldr	r3, [r7, #8]
 80112cc:	0a1b      	lsrs	r3, r3, #8
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	4b0d      	ldr	r3, [pc, #52]	@ (8011308 <BleGetBdAddress+0x80>)
 80112d2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	0c1b      	lsrs	r3, r3, #16
 80112d8:	b2da      	uxtb	r2, r3
 80112da:	4b0b      	ldr	r3, [pc, #44]	@ (8011308 <BleGetBdAddress+0x80>)
 80112dc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80112de:	4b0a      	ldr	r3, [pc, #40]	@ (8011308 <BleGetBdAddress+0x80>)
 80112e0:	617b      	str	r3, [r7, #20]
 80112e2:	e00b      	b.n	80112fc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80112e4:	2000      	movs	r0, #0
 80112e6:	f7fe fff1 	bl	80102cc <OTP_Read>
 80112ea:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d002      	beq.n	80112f8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	e001      	b.n	80112fc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80112f8:	4b04      	ldr	r3, [pc, #16]	@ (801130c <BleGetBdAddress+0x84>)
 80112fa:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80112fc:	697b      	ldr	r3, [r7, #20]
}
 80112fe:	4618      	mov	r0, r3
 8011300:	3718      	adds	r7, #24
 8011302:	46bd      	mov	sp, r7
 8011304:	bd80      	pop	{r7, pc}
 8011306:	bf00      	nop
 8011308:	20000930 	.word	0x20000930
 801130c:	08015848 	.word	0x08015848

08011310 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b082      	sub	sp, #8
 8011314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8011316:	4b1f      	ldr	r3, [pc, #124]	@ (8011394 <Adv_Cancel+0x84>)
 8011318:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801131c:	2b05      	cmp	r3, #5
 801131e:	d035      	beq.n	801138c <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011320:	2392      	movs	r3, #146	@ 0x92
 8011322:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8011324:	f7fc ff35 	bl	800e192 <aci_gap_set_non_discoverable>
 8011328:	4603      	mov	r3, r0
 801132a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801132c:	4b19      	ldr	r3, [pc, #100]	@ (8011394 <Adv_Cancel+0x84>)
 801132e:	2200      	movs	r2, #0
 8011330:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d00d      	beq.n	8011356 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 801133a:	4817      	ldr	r0, [pc, #92]	@ (8011398 <Adv_Cancel+0x88>)
 801133c:	f7fe ff9e 	bl	801027c <DbgTraceGetFileName>
 8011340:	4601      	mov	r1, r0
 8011342:	f240 438a 	movw	r3, #1162	@ 0x48a
 8011346:	4a15      	ldr	r2, [pc, #84]	@ (801139c <Adv_Cancel+0x8c>)
 8011348:	4815      	ldr	r0, [pc, #84]	@ (80113a0 <Adv_Cancel+0x90>)
 801134a:	f001 fc51 	bl	8012bf0 <iprintf>
 801134e:	4815      	ldr	r0, [pc, #84]	@ (80113a4 <Adv_Cancel+0x94>)
 8011350:	f001 fc4e 	bl	8012bf0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8011354:	e01a      	b.n	801138c <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8011356:	4810      	ldr	r0, [pc, #64]	@ (8011398 <Adv_Cancel+0x88>)
 8011358:	f7fe ff90 	bl	801027c <DbgTraceGetFileName>
 801135c:	4601      	mov	r1, r0
 801135e:	f240 438e 	movw	r3, #1166	@ 0x48e
 8011362:	4a0e      	ldr	r2, [pc, #56]	@ (801139c <Adv_Cancel+0x8c>)
 8011364:	480e      	ldr	r0, [pc, #56]	@ (80113a0 <Adv_Cancel+0x90>)
 8011366:	f001 fc43 	bl	8012bf0 <iprintf>
 801136a:	480f      	ldr	r0, [pc, #60]	@ (80113a8 <Adv_Cancel+0x98>)
 801136c:	f001 fc40 	bl	8012bf0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8011370:	4809      	ldr	r0, [pc, #36]	@ (8011398 <Adv_Cancel+0x88>)
 8011372:	f7fe ff83 	bl	801027c <DbgTraceGetFileName>
 8011376:	4601      	mov	r1, r0
 8011378:	f240 438f 	movw	r3, #1167	@ 0x48f
 801137c:	4a07      	ldr	r2, [pc, #28]	@ (801139c <Adv_Cancel+0x8c>)
 801137e:	4808      	ldr	r0, [pc, #32]	@ (80113a0 <Adv_Cancel+0x90>)
 8011380:	f001 fc36 	bl	8012bf0 <iprintf>
 8011384:	4809      	ldr	r0, [pc, #36]	@ (80113ac <Adv_Cancel+0x9c>)
 8011386:	f001 fc33 	bl	8012bf0 <iprintf>
  return;
 801138a:	bf00      	nop
 801138c:	bf00      	nop
}
 801138e:	3708      	adds	r7, #8
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}
 8011394:	20000938 	.word	0x20000938
 8011398:	08014320 	.word	0x08014320
 801139c:	080158bc 	.word	0x080158bc
 80113a0:	0801433c 	.word	0x0801433c
 80113a4:	08014f00 	.word	0x08014f00
 80113a8:	08014f24 	.word	0x08014f24
 80113ac:	08014f2c 	.word	0x08014f2c

080113b0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80113b8:	2100      	movs	r1, #0
 80113ba:	2002      	movs	r0, #2
 80113bc:	f001 fa3a 	bl	8012834 <UTIL_SEQ_SetTask>

  return;
 80113c0:	bf00      	nop
}
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80113d0:	2001      	movs	r0, #1
 80113d2:	f001 fa9b 	bl	801290c <UTIL_SEQ_SetEvt>

  return;
 80113d6:	bf00      	nop
}
 80113d8:	3708      	adds	r7, #8
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd80      	pop	{r7, pc}

080113de <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80113de:	b580      	push	{r7, lr}
 80113e0:	b082      	sub	sp, #8
 80113e2:	af00      	add	r7, sp, #0
 80113e4:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80113e6:	2001      	movs	r0, #1
 80113e8:	f001 fab0 	bl	801294c <UTIL_SEQ_WaitEvt>

  return;
 80113ec:	bf00      	nop
}
 80113ee:	3708      	adds	r7, #8
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b084      	sub	sp, #16
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	685b      	ldr	r3, [r3, #4]
 8011404:	3308      	adds	r3, #8
 8011406:	4618      	mov	r0, r3
 8011408:	f7fe f8d6 	bl	800f5b8 <SVCCTL_UserEvtRx>
 801140c:	4603      	mov	r3, r0
 801140e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011410:	7afb      	ldrb	r3, [r7, #11]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d003      	beq.n	801141e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	2201      	movs	r2, #1
 801141a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801141c:	e003      	b.n	8011426 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	2200      	movs	r2, #0
 8011422:	701a      	strb	r2, [r3, #0]
  return;
 8011424:	bf00      	nop
}
 8011426:	3710      	adds	r7, #16
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8011436:	79fb      	ldrb	r3, [r7, #7]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d002      	beq.n	8011442 <BLE_StatusNot+0x16>
 801143c:	2b01      	cmp	r3, #1
 801143e:	d006      	beq.n	801144e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011440:	e00b      	b.n	801145a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011442:	230f      	movs	r3, #15
 8011444:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8011446:	68f8      	ldr	r0, [r7, #12]
 8011448:	f001 fa20 	bl	801288c <UTIL_SEQ_PauseTask>
      break;
 801144c:	e005      	b.n	801145a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801144e:	230f      	movs	r3, #15
 8011450:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8011452:	68f8      	ldr	r0, [r7, #12]
 8011454:	f001 fa3a 	bl	80128cc <UTIL_SEQ_ResumeTask>
      break;
 8011458:	bf00      	nop
  }

  return;
 801145a:	bf00      	nop
}
 801145c:	3710      	adds	r7, #16
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
	...

08011464 <Custom_STM_App_Notification>:
static void Custom_Appli_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b082      	sub	sp, #8
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	2b06      	cmp	r3, #6
 8011472:	d830      	bhi.n	80114d6 <Custom_STM_App_Notification+0x72>
 8011474:	a201      	add	r2, pc, #4	@ (adr r2, 801147c <Custom_STM_App_Notification+0x18>)
 8011476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801147a:	bf00      	nop
 801147c:	08011499 	.word	0x08011499
 8011480:	080114a5 	.word	0x080114a5
 8011484:	080114d7 	.word	0x080114d7
 8011488:	080114ad 	.word	0x080114ad
 801148c:	080114c3 	.word	0x080114c3
 8011490:	080114cf 	.word	0x080114cf
 8011494:	080114d7 	.word	0x080114d7
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Mvt_def */
    case CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 1;
 8011498:	4b11      	ldr	r3, [pc, #68]	@ (80114e0 <Custom_STM_App_Notification+0x7c>)
 801149a:	2201      	movs	r2, #1
 801149c:	701a      	strb	r2, [r3, #0]
    	    	Custom_Mvt_rep_Send_Notification();
 801149e:	f000 f903 	bl	80116a8 <Custom_Mvt_rep_Send_Notification>
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
      break;
 80114a2:	e019      	b.n	80114d8 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 0;
 80114a4:	4b0e      	ldr	r3, [pc, #56]	@ (80114e0 <Custom_STM_App_Notification+0x7c>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
      break;
 80114aa:	e015      	b.n	80114d8 <Custom_STM_App_Notification+0x74>
      /* USER CODE END CUSTOM_STM_APPEL_APP_READ_EVT */
      break;

    case CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
    	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	6859      	ldr	r1, [r3, #4]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	7a1b      	ldrb	r3, [r3, #8]
 80114b4:	461a      	mov	r2, r3
 80114b6:	480b      	ldr	r0, [pc, #44]	@ (80114e4 <Custom_STM_App_Notification+0x80>)
 80114b8:	f001 fd7b 	bl	8012fb2 <memcpy>
    	Custom_Appli_Update_Char();
 80114bc:	f000 fada 	bl	8011a74 <Custom_Appli_Update_Char>
      /* USER CODE END CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
      break;
 80114c0:	e00a      	b.n	80114d8 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Force_Notification_Status = 1;
 80114c2:	4b07      	ldr	r3, [pc, #28]	@ (80114e0 <Custom_STM_App_Notification+0x7c>)
 80114c4:	2201      	movs	r2, #1
 80114c6:	705a      	strb	r2, [r3, #1]
    	Custom_Force_Send_Notification();
 80114c8:	f000 fa5a 	bl	8011980 <Custom_Force_Send_Notification>
      /* USER CODE END CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT */
      break;
 80114cc:	e004      	b.n	80114d8 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Force_Notification_Status = 0;
 80114ce:	4b04      	ldr	r3, [pc, #16]	@ (80114e0 <Custom_STM_App_Notification+0x7c>)
 80114d0:	2200      	movs	r2, #0
 80114d2:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT */
      break;
 80114d4:	e000      	b.n	80114d8 <Custom_STM_App_Notification+0x74>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80114d6:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80114d8:	bf00      	nop
}
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	200009c0 	.word	0x200009c0
 80114e4:	200009c8 	.word	0x200009c8

080114e8 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b083      	sub	sp, #12
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	781b      	ldrb	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d002      	beq.n	80114fe <Custom_APP_Notification+0x16>
 80114f8:	2b01      	cmp	r3, #1
 80114fa:	d002      	beq.n	8011502 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80114fc:	e002      	b.n	8011504 <Custom_APP_Notification+0x1c>
      break;
 80114fe:	bf00      	nop
 8011500:	e000      	b.n	8011504 <Custom_APP_Notification+0x1c>
      break;
 8011502:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8011504:	bf00      	nop
}
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.rep_status = 0;
 8011514:	4b0a      	ldr	r3, [pc, #40]	@ (8011540 <Custom_APP_Init+0x30>)
 8011516:	2200      	movs	r2, #0
 8011518:	709a      	strb	r2, [r3, #2]
	Custom_App_Context.bras_status = 0;
 801151a:	4b09      	ldr	r3, [pc, #36]	@ (8011540 <Custom_APP_Init+0x30>)
 801151c:	2200      	movs	r2, #0
 801151e:	70da      	strb	r2, [r3, #3]
		UTIL_SEQ_RegTask(1<<CFG_TASK_ACC_rep_ID, UTIL_SEQ_RFU, Custom_Mvt_rep_Send_Notification);
 8011520:	4a08      	ldr	r2, [pc, #32]	@ (8011544 <Custom_APP_Init+0x34>)
 8011522:	2100      	movs	r1, #0
 8011524:	2004      	movs	r0, #4
 8011526:	f001 f963 	bl	80127f0 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1<<CFG_TASK_ACC_bras_ID, UTIL_SEQ_RFU, Custom_Force_Send_Notification);
 801152a:	4a07      	ldr	r2, [pc, #28]	@ (8011548 <Custom_APP_Init+0x38>)
 801152c:	2100      	movs	r1, #0
 801152e:	2008      	movs	r0, #8
 8011530:	f001 f95e 	bl	80127f0 <UTIL_SEQ_RegTask>
		Custom_Mvt_rep_Update_Char();
 8011534:	f000 f8a4 	bl	8011680 <Custom_Mvt_rep_Update_Char>
		Custom_Force_Update_Char();
 8011538:	f000 fa0e 	bl	8011958 <Custom_Force_Update_Char>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 801153c:	bf00      	nop
}
 801153e:	bd80      	pop	{r7, pc}
 8011540:	200009c0 	.word	0x200009c0
 8011544:	080116a9 	.word	0x080116a9
 8011548:	08011981 	.word	0x08011981

0801154c <FSVC_MVT_REF_fin>:

/* USER CODE BEGIN FD */
void FSVC_MVT_REF_fin(void)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011550:	2100      	movs	r1, #0
 8011552:	2004      	movs	r0, #4
 8011554:	f001 f96e 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 1;
 8011558:	4b02      	ldr	r3, [pc, #8]	@ (8011564 <FSVC_MVT_REF_fin+0x18>)
 801155a:	2201      	movs	r2, #1
 801155c:	709a      	strb	r2, [r3, #2]

  return;
 801155e:	bf00      	nop
}
 8011560:	bd80      	pop	{r7, pc}
 8011562:	bf00      	nop
 8011564:	200009c0 	.word	0x200009c0

08011568 <FSVC_MVT_REF_vide>:
void FSVC_MVT_REF_vide(void)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 801156c:	2100      	movs	r1, #0
 801156e:	2004      	movs	r0, #4
 8011570:	f001 f960 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 2;
 8011574:	4b02      	ldr	r3, [pc, #8]	@ (8011580 <FSVC_MVT_REF_vide+0x18>)
 8011576:	2202      	movs	r2, #2
 8011578:	709a      	strb	r2, [r3, #2]

  return;
 801157a:	bf00      	nop
}
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop
 8011580:	200009c0 	.word	0x200009c0

08011584 <FSVC_MVT_REF_validation_succes>:
void FSVC_MVT_REF_validation_succes(void)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011588:	2100      	movs	r1, #0
 801158a:	2004      	movs	r0, #4
 801158c:	f001 f952 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 3;
 8011590:	4b02      	ldr	r3, [pc, #8]	@ (801159c <FSVC_MVT_REF_validation_succes+0x18>)
 8011592:	2203      	movs	r2, #3
 8011594:	709a      	strb	r2, [r3, #2]

  return;
 8011596:	bf00      	nop
}
 8011598:	bd80      	pop	{r7, pc}
 801159a:	bf00      	nop
 801159c:	200009c0 	.word	0x200009c0

080115a0 <FSVC_MVT_REF_validation_fail>:
void FSVC_MVT_REF_validation_fail(void)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80115a4:	2100      	movs	r1, #0
 80115a6:	2004      	movs	r0, #4
 80115a8:	f001 f944 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 4;
 80115ac:	4b02      	ldr	r3, [pc, #8]	@ (80115b8 <FSVC_MVT_REF_validation_fail+0x18>)
 80115ae:	2204      	movs	r2, #4
 80115b0:	709a      	strb	r2, [r3, #2]

  return;
 80115b2:	bf00      	nop
}
 80115b4:	bd80      	pop	{r7, pc}
 80115b6:	bf00      	nop
 80115b8:	200009c0 	.word	0x200009c0

080115bc <FSVC_MVT_REF_validation_vide>:
void FSVC_MVT_REF_validation_vide(void)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80115c0:	2100      	movs	r1, #0
 80115c2:	2004      	movs	r0, #4
 80115c4:	f001 f936 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 5;
 80115c8:	4b02      	ldr	r3, [pc, #8]	@ (80115d4 <FSVC_MVT_REF_validation_vide+0x18>)
 80115ca:	2205      	movs	r2, #5
 80115cc:	709a      	strb	r2, [r3, #2]

  return;
 80115ce:	bf00      	nop
}
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	200009c0 	.word	0x200009c0

080115d8 <FSVC_MVT_vide>:
void FSVC_MVT_vide(void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80115dc:	2100      	movs	r1, #0
 80115de:	2004      	movs	r0, #4
 80115e0:	f001 f928 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 6;
 80115e4:	4b02      	ldr	r3, [pc, #8]	@ (80115f0 <FSVC_MVT_vide+0x18>)
 80115e6:	2206      	movs	r2, #6
 80115e8:	709a      	strb	r2, [r3, #2]

  return;
 80115ea:	bf00      	nop
}
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	200009c0 	.word	0x200009c0

080115f4 <FSVC_MVT_valide>:
void FSVC_MVT_valide(void)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80115f8:	2100      	movs	r1, #0
 80115fa:	2004      	movs	r0, #4
 80115fc:	f001 f91a 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 7;
 8011600:	4b02      	ldr	r3, [pc, #8]	@ (801160c <FSVC_MVT_valide+0x18>)
 8011602:	2207      	movs	r2, #7
 8011604:	709a      	strb	r2, [r3, #2]

  return;
 8011606:	bf00      	nop
}
 8011608:	bd80      	pop	{r7, pc}
 801160a:	bf00      	nop
 801160c:	200009c0 	.word	0x200009c0

08011610 <FSVC_MVT_non_valide>:
void FSVC_MVT_non_valide(void)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011614:	2100      	movs	r1, #0
 8011616:	2004      	movs	r0, #4
 8011618:	f001 f90c 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 8;
 801161c:	4b02      	ldr	r3, [pc, #8]	@ (8011628 <FSVC_MVT_non_valide+0x18>)
 801161e:	2208      	movs	r2, #8
 8011620:	709a      	strb	r2, [r3, #2]

  return;
 8011622:	bf00      	nop
}
 8011624:	bd80      	pop	{r7, pc}
 8011626:	bf00      	nop
 8011628:	200009c0 	.word	0x200009c0

0801162c <FSVC_MVT_BRAS_GAUCHE>:
void FSVC_MVT_BRAS_GAUCHE(void)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_bras_ID, CFG_SCH_PRIO_0);
 8011630:	2100      	movs	r1, #0
 8011632:	2008      	movs	r0, #8
 8011634:	f001 f8fe 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.bras_status = 2;
 8011638:	4b02      	ldr	r3, [pc, #8]	@ (8011644 <FSVC_MVT_BRAS_GAUCHE+0x18>)
 801163a:	2202      	movs	r2, #2
 801163c:	70da      	strb	r2, [r3, #3]

  return;
 801163e:	bf00      	nop
}
 8011640:	bd80      	pop	{r7, pc}
 8011642:	bf00      	nop
 8011644:	200009c0 	.word	0x200009c0

08011648 <FSVC_MVT_BRAS_DROIT>:
void FSVC_MVT_BRAS_DROIT(void)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_bras_ID, CFG_SCH_PRIO_0);
 801164c:	2100      	movs	r1, #0
 801164e:	2008      	movs	r0, #8
 8011650:	f001 f8f0 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.bras_status = 1;
 8011654:	4b02      	ldr	r3, [pc, #8]	@ (8011660 <FSVC_MVT_BRAS_DROIT+0x18>)
 8011656:	2201      	movs	r2, #1
 8011658:	70da      	strb	r2, [r3, #3]

  return;
 801165a:	bf00      	nop
}
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	200009c0 	.word	0x200009c0

08011664 <FSVC_MVT_BRAS_CORRECT>:
void FSVC_MVT_BRAS_CORRECT(void)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_bras_ID, CFG_SCH_PRIO_0);
 8011668:	2100      	movs	r1, #0
 801166a:	2008      	movs	r0, #8
 801166c:	f001 f8e2 	bl	8012834 <UTIL_SEQ_SetTask>
  Custom_App_Context.bras_status = 3;
 8011670:	4b02      	ldr	r3, [pc, #8]	@ (801167c <FSVC_MVT_BRAS_CORRECT+0x18>)
 8011672:	2203      	movs	r2, #3
 8011674:	70da      	strb	r2, [r3, #3]

  return;
 8011676:	bf00      	nop
}
 8011678:	bd80      	pop	{r7, pc}
 801167a:	bf00      	nop
 801167c:	200009c0 	.word	0x200009c0

08011680 <Custom_Mvt_rep_Update_Char>:
 *
 *************************************************************/

/* Mvt_def */
void Custom_Mvt_rep_Update_Char(void) /* Property Read */
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mvt_rep_UC_1*/

  /* USER CODE END Mvt_rep_UC_1*/

  if (updateflag != 0)
 801168a:	79fb      	ldrb	r3, [r7, #7]
 801168c:	2b00      	cmp	r3, #0
 801168e:	d004      	beq.n	801169a <Custom_Mvt_rep_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)UpdateCharData);
 8011690:	4904      	ldr	r1, [pc, #16]	@ (80116a4 <Custom_Mvt_rep_Update_Char+0x24>)
 8011692:	2000      	movs	r0, #0
 8011694:	f000 fc54 	bl	8011f40 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mvt_rep_UC_Last*/

  /* USER CODE END Mvt_rep_UC_Last*/
  return;
 8011698:	bf00      	nop
 801169a:	bf00      	nop
}
 801169c:	3708      	adds	r7, #8
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	200009c8 	.word	0x200009c8

080116a8 <Custom_Mvt_rep_Send_Notification>:

void Custom_Mvt_rep_Send_Notification(void) /* Property Notification */
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b090      	sub	sp, #64	@ 0x40
 80116ac:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* USER CODE BEGIN Mvt_rep_NS_1*/
  if (Custom_App_Context.Mvt_rep_Notification_Status == 1)
 80116b4:	4b94      	ldr	r3, [pc, #592]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 80116b6:	781b      	ldrb	r3, [r3, #0]
 80116b8:	2b01      	cmp	r3, #1
 80116ba:	f040 810a 	bne.w	80118d2 <Custom_Mvt_rep_Send_Notification+0x22a>
  	{
  	  updateflag = 1;
 80116be:	2301      	movs	r3, #1
 80116c0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  	  if(Custom_App_Context.rep_status == 1)
 80116c4:	4b90      	ldr	r3, [pc, #576]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 80116c6:	789b      	ldrb	r3, [r3, #2]
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d11c      	bne.n	8011706 <Custom_Mvt_rep_Send_Notification+0x5e>
  	  {

  		  char rep_ref_fin[] = "finr";
 80116cc:	4a8f      	ldr	r2, [pc, #572]	@ (801190c <Custom_Mvt_rep_Send_Notification+0x264>)
 80116ce:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80116d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116d6:	6018      	str	r0, [r3, #0]
 80116d8:	3304      	adds	r3, #4
 80116da:	7019      	strb	r1, [r3, #0]
  		 		  memcpy(&NotifyCharData[0], &rep_ref_fin, sizeof(rep_ref_fin));
 80116dc:	4b8c      	ldr	r3, [pc, #560]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 80116de:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80116e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116e6:	6018      	str	r0, [r3, #0]
 80116e8:	3304      	adds	r3, #4
 80116ea:	7019      	strb	r1, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_fin good \n");
 80116ec:	4889      	ldr	r0, [pc, #548]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80116ee:	f7fe fdc5 	bl	801027c <DbgTraceGetFileName>
 80116f2:	4601      	mov	r1, r0
 80116f4:	f240 134f 	movw	r3, #335	@ 0x14f
 80116f8:	4a87      	ldr	r2, [pc, #540]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 80116fa:	4888      	ldr	r0, [pc, #544]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 80116fc:	f001 fa78 	bl	8012bf0 <iprintf>
 8011700:	4887      	ldr	r0, [pc, #540]	@ (8011920 <Custom_Mvt_rep_Send_Notification+0x278>)
 8011702:	f001 fae5 	bl	8012cd0 <puts>
  	  }
  	  if(Custom_App_Context.rep_status == 2)
 8011706:	4b80      	ldr	r3, [pc, #512]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 8011708:	789b      	ldrb	r3, [r3, #2]
 801170a:	2b02      	cmp	r3, #2
 801170c:	d11c      	bne.n	8011748 <Custom_Mvt_rep_Send_Notification+0xa0>
  		  {

  			  char rep_ref_vide[] = "refv";
 801170e:	4a85      	ldr	r2, [pc, #532]	@ (8011924 <Custom_Mvt_rep_Send_Notification+0x27c>)
 8011710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011718:	6018      	str	r0, [r3, #0]
 801171a:	3304      	adds	r3, #4
 801171c:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_ref_vide, sizeof(rep_ref_vide));
 801171e:	4b7c      	ldr	r3, [pc, #496]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 8011720:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011728:	6018      	str	r0, [r3, #0]
 801172a:	3304      	adds	r3, #4
 801172c:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 801172e:	4879      	ldr	r0, [pc, #484]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8011730:	f7fe fda4 	bl	801027c <DbgTraceGetFileName>
 8011734:	4601      	mov	r1, r0
 8011736:	f44f 73ab 	mov.w	r3, #342	@ 0x156
 801173a:	4a77      	ldr	r2, [pc, #476]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 801173c:	4877      	ldr	r0, [pc, #476]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 801173e:	f001 fa57 	bl	8012bf0 <iprintf>
 8011742:	4879      	ldr	r0, [pc, #484]	@ (8011928 <Custom_Mvt_rep_Send_Notification+0x280>)
 8011744:	f001 fac4 	bl	8012cd0 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 3)
 8011748:	4b6f      	ldr	r3, [pc, #444]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 801174a:	789b      	ldrb	r3, [r3, #2]
 801174c:	2b03      	cmp	r3, #3
 801174e:	d11c      	bne.n	801178a <Custom_Mvt_rep_Send_Notification+0xe2>
  		  {

  			  char validation_succes[] = "vals";
 8011750:	4a76      	ldr	r2, [pc, #472]	@ (801192c <Custom_Mvt_rep_Send_Notification+0x284>)
 8011752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011756:	e892 0003 	ldmia.w	r2, {r0, r1}
 801175a:	6018      	str	r0, [r3, #0]
 801175c:	3304      	adds	r3, #4
 801175e:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_succes, sizeof(validation_succes));
 8011760:	4b6b      	ldr	r3, [pc, #428]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 8011762:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011766:	e892 0003 	ldmia.w	r2, {r0, r1}
 801176a:	6018      	str	r0, [r3, #0]
 801176c:	3304      	adds	r3, #4
 801176e:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 8011770:	4868      	ldr	r0, [pc, #416]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8011772:	f7fe fd83 	bl	801027c <DbgTraceGetFileName>
 8011776:	4601      	mov	r1, r0
 8011778:	f240 135d 	movw	r3, #349	@ 0x15d
 801177c:	4a66      	ldr	r2, [pc, #408]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 801177e:	4867      	ldr	r0, [pc, #412]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 8011780:	f001 fa36 	bl	8012bf0 <iprintf>
 8011784:	486a      	ldr	r0, [pc, #424]	@ (8011930 <Custom_Mvt_rep_Send_Notification+0x288>)
 8011786:	f001 faa3 	bl	8012cd0 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 4)
 801178a:	4b5f      	ldr	r3, [pc, #380]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 801178c:	789b      	ldrb	r3, [r3, #2]
 801178e:	2b04      	cmp	r3, #4
 8011790:	d11c      	bne.n	80117cc <Custom_Mvt_rep_Send_Notification+0x124>
  		  {

  			  char validation_fail[] = "valf";
 8011792:	4a68      	ldr	r2, [pc, #416]	@ (8011934 <Custom_Mvt_rep_Send_Notification+0x28c>)
 8011794:	f107 0320 	add.w	r3, r7, #32
 8011798:	e892 0003 	ldmia.w	r2, {r0, r1}
 801179c:	6018      	str	r0, [r3, #0]
 801179e:	3304      	adds	r3, #4
 80117a0:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_fail, sizeof(validation_fail));
 80117a2:	4b5b      	ldr	r3, [pc, #364]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 80117a4:	f107 0220 	add.w	r2, r7, #32
 80117a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117ac:	6018      	str	r0, [r3, #0]
 80117ae:	3304      	adds	r3, #4
 80117b0:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_fail good \n");
 80117b2:	4858      	ldr	r0, [pc, #352]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80117b4:	f7fe fd62 	bl	801027c <DbgTraceGetFileName>
 80117b8:	4601      	mov	r1, r0
 80117ba:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 80117be:	4a56      	ldr	r2, [pc, #344]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 80117c0:	4856      	ldr	r0, [pc, #344]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 80117c2:	f001 fa15 	bl	8012bf0 <iprintf>
 80117c6:	485c      	ldr	r0, [pc, #368]	@ (8011938 <Custom_Mvt_rep_Send_Notification+0x290>)
 80117c8:	f001 fa82 	bl	8012cd0 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 5)
 80117cc:	4b4e      	ldr	r3, [pc, #312]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 80117ce:	789b      	ldrb	r3, [r3, #2]
 80117d0:	2b05      	cmp	r3, #5
 80117d2:	d11c      	bne.n	801180e <Custom_Mvt_rep_Send_Notification+0x166>
  		  {

  			  char validation_vide[] = "valv";
 80117d4:	4a59      	ldr	r2, [pc, #356]	@ (801193c <Custom_Mvt_rep_Send_Notification+0x294>)
 80117d6:	f107 0318 	add.w	r3, r7, #24
 80117da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117de:	6018      	str	r0, [r3, #0]
 80117e0:	3304      	adds	r3, #4
 80117e2:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_vide, sizeof(validation_vide));
 80117e4:	4b4a      	ldr	r3, [pc, #296]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 80117e6:	f107 0218 	add.w	r2, r7, #24
 80117ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117ee:	6018      	str	r0, [r3, #0]
 80117f0:	3304      	adds	r3, #4
 80117f2:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_vide good \n");
 80117f4:	4847      	ldr	r0, [pc, #284]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80117f6:	f7fe fd41 	bl	801027c <DbgTraceGetFileName>
 80117fa:	4601      	mov	r1, r0
 80117fc:	f240 136b 	movw	r3, #363	@ 0x16b
 8011800:	4a45      	ldr	r2, [pc, #276]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 8011802:	4846      	ldr	r0, [pc, #280]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 8011804:	f001 f9f4 	bl	8012bf0 <iprintf>
 8011808:	484d      	ldr	r0, [pc, #308]	@ (8011940 <Custom_Mvt_rep_Send_Notification+0x298>)
 801180a:	f001 fa61 	bl	8012cd0 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 6)
 801180e:	4b3e      	ldr	r3, [pc, #248]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 8011810:	789b      	ldrb	r3, [r3, #2]
 8011812:	2b06      	cmp	r3, #6
 8011814:	d11c      	bne.n	8011850 <Custom_Mvt_rep_Send_Notification+0x1a8>
  		  {

  			  char rep_vide[] = "repv";
 8011816:	4a4b      	ldr	r2, [pc, #300]	@ (8011944 <Custom_Mvt_rep_Send_Notification+0x29c>)
 8011818:	f107 0310 	add.w	r3, r7, #16
 801181c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011820:	6018      	str	r0, [r3, #0]
 8011822:	3304      	adds	r3, #4
 8011824:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_vide, sizeof(rep_vide));
 8011826:	4b3a      	ldr	r3, [pc, #232]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 8011828:	f107 0210 	add.w	r2, r7, #16
 801182c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011830:	6018      	str	r0, [r3, #0]
 8011832:	3304      	adds	r3, #4
 8011834:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_vide good \n");
 8011836:	4837      	ldr	r0, [pc, #220]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8011838:	f7fe fd20 	bl	801027c <DbgTraceGetFileName>
 801183c:	4601      	mov	r1, r0
 801183e:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8011842:	4a35      	ldr	r2, [pc, #212]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 8011844:	4835      	ldr	r0, [pc, #212]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 8011846:	f001 f9d3 	bl	8012bf0 <iprintf>
 801184a:	483f      	ldr	r0, [pc, #252]	@ (8011948 <Custom_Mvt_rep_Send_Notification+0x2a0>)
 801184c:	f001 fa40 	bl	8012cd0 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 7)
 8011850:	4b2d      	ldr	r3, [pc, #180]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 8011852:	789b      	ldrb	r3, [r3, #2]
 8011854:	2b07      	cmp	r3, #7
 8011856:	d11c      	bne.n	8011892 <Custom_Mvt_rep_Send_Notification+0x1ea>
  			  {

  				  char rep_valide[] = "ahah";
 8011858:	4a3c      	ldr	r2, [pc, #240]	@ (801194c <Custom_Mvt_rep_Send_Notification+0x2a4>)
 801185a:	f107 0308 	add.w	r3, r7, #8
 801185e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011862:	6018      	str	r0, [r3, #0]
 8011864:	3304      	adds	r3, #4
 8011866:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_valide, sizeof(rep_valide));
 8011868:	4b29      	ldr	r3, [pc, #164]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 801186a:	f107 0208 	add.w	r2, r7, #8
 801186e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011872:	6018      	str	r0, [r3, #0]
 8011874:	3304      	adds	r3, #4
 8011876:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 8011878:	4826      	ldr	r0, [pc, #152]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 801187a:	f7fe fcff 	bl	801027c <DbgTraceGetFileName>
 801187e:	4601      	mov	r1, r0
 8011880:	f240 1379 	movw	r3, #377	@ 0x179
 8011884:	4a24      	ldr	r2, [pc, #144]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 8011886:	4825      	ldr	r0, [pc, #148]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 8011888:	f001 f9b2 	bl	8012bf0 <iprintf>
 801188c:	4826      	ldr	r0, [pc, #152]	@ (8011928 <Custom_Mvt_rep_Send_Notification+0x280>)
 801188e:	f001 fa1f 	bl	8012cd0 <puts>
  			  }
  		  if(Custom_App_Context.rep_status == 8)
 8011892:	4b1d      	ldr	r3, [pc, #116]	@ (8011908 <Custom_Mvt_rep_Send_Notification+0x260>)
 8011894:	789b      	ldrb	r3, [r3, #2]
 8011896:	2b08      	cmp	r3, #8
 8011898:	d128      	bne.n	80118ec <Custom_Mvt_rep_Send_Notification+0x244>
  			  {

  				  char rep_non_valide[] = "ihih";
 801189a:	4a2d      	ldr	r2, [pc, #180]	@ (8011950 <Custom_Mvt_rep_Send_Notification+0x2a8>)
 801189c:	463b      	mov	r3, r7
 801189e:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118a2:	6018      	str	r0, [r3, #0]
 80118a4:	3304      	adds	r3, #4
 80118a6:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_non_valide, sizeof(rep_non_valide));
 80118a8:	4b19      	ldr	r3, [pc, #100]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 80118aa:	463a      	mov	r2, r7
 80118ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118b0:	6018      	str	r0, [r3, #0]
 80118b2:	3304      	adds	r3, #4
 80118b4:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 80118b6:	4817      	ldr	r0, [pc, #92]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80118b8:	f7fe fce0 	bl	801027c <DbgTraceGetFileName>
 80118bc:	4601      	mov	r1, r0
 80118be:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80118c2:	4a15      	ldr	r2, [pc, #84]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 80118c4:	4815      	ldr	r0, [pc, #84]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 80118c6:	f001 f993 	bl	8012bf0 <iprintf>
 80118ca:	4819      	ldr	r0, [pc, #100]	@ (8011930 <Custom_Mvt_rep_Send_Notification+0x288>)
 80118cc:	f001 fa00 	bl	8012cd0 <puts>
 80118d0:	e00c      	b.n	80118ec <Custom_Mvt_rep_Send_Notification+0x244>
  			  }
  	}
	else
	{
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 80118d2:	4810      	ldr	r0, [pc, #64]	@ (8011914 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80118d4:	f7fe fcd2 	bl	801027c <DbgTraceGetFileName>
 80118d8:	4601      	mov	r1, r0
 80118da:	f240 1385 	movw	r3, #389	@ 0x185
 80118de:	4a0e      	ldr	r2, [pc, #56]	@ (8011918 <Custom_Mvt_rep_Send_Notification+0x270>)
 80118e0:	480e      	ldr	r0, [pc, #56]	@ (801191c <Custom_Mvt_rep_Send_Notification+0x274>)
 80118e2:	f001 f985 	bl	8012bf0 <iprintf>
 80118e6:	481b      	ldr	r0, [pc, #108]	@ (8011954 <Custom_Mvt_rep_Send_Notification+0x2ac>)
 80118e8:	f001 f9f2 	bl	8012cd0 <puts>
	}
  /* USER CODE END Mvt_rep_NS_1*/

  if (updateflag != 0)
 80118ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d004      	beq.n	80118fe <Custom_Mvt_rep_Send_Notification+0x256>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)NotifyCharData);
 80118f4:	4906      	ldr	r1, [pc, #24]	@ (8011910 <Custom_Mvt_rep_Send_Notification+0x268>)
 80118f6:	2000      	movs	r0, #0
 80118f8:	f000 fb22 	bl	8011f40 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Mvt_rep_NS_Last*/

  /* USER CODE END Mvt_rep_NS_Last*/

  return;
 80118fc:	bf00      	nop
 80118fe:	bf00      	nop
}
 8011900:	3740      	adds	r7, #64	@ 0x40
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}
 8011906:	bf00      	nop
 8011908:	200009c0 	.word	0x200009c0
 801190c:	08015158 	.word	0x08015158
 8011910:	20000ac0 	.word	0x20000ac0
 8011914:	08014f48 	.word	0x08014f48
 8011918:	080158c8 	.word	0x080158c8
 801191c:	08014f68 	.word	0x08014f68
 8011920:	08014f7c 	.word	0x08014f7c
 8011924:	08015160 	.word	0x08015160
 8011928:	08014fbc 	.word	0x08014fbc
 801192c:	08015168 	.word	0x08015168
 8011930:	08015000 	.word	0x08015000
 8011934:	08015170 	.word	0x08015170
 8011938:	08015048 	.word	0x08015048
 801193c:	08015178 	.word	0x08015178
 8011940:	0801508c 	.word	0x0801508c
 8011944:	08015180 	.word	0x08015180
 8011948:	080150d0 	.word	0x080150d0
 801194c:	08015188 	.word	0x08015188
 8011950:	08015190 	.word	0x08015190
 8011954:	08015110 	.word	0x08015110

08011958 <Custom_Force_Update_Char>:

void Custom_Force_Update_Char(void) /* Property Read */
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 801195e:	2300      	movs	r3, #0
 8011960:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Force_UC_1*/

  /* USER CODE END Force_UC_1*/

  if (updateflag != 0)
 8011962:	79fb      	ldrb	r3, [r7, #7]
 8011964:	2b00      	cmp	r3, #0
 8011966:	d004      	beq.n	8011972 <Custom_Force_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_FORCE, (uint8_t *)UpdateCharData);
 8011968:	4904      	ldr	r1, [pc, #16]	@ (801197c <Custom_Force_Update_Char+0x24>)
 801196a:	2002      	movs	r0, #2
 801196c:	f000 fae8 	bl	8011f40 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Force_UC_Last*/

  /* USER CODE END Force_UC_Last*/
  return;
 8011970:	bf00      	nop
 8011972:	bf00      	nop
}
 8011974:	3708      	adds	r7, #8
 8011976:	46bd      	mov	sp, r7
 8011978:	bd80      	pop	{r7, pc}
 801197a:	bf00      	nop
 801197c:	200009c8 	.word	0x200009c8

08011980 <Custom_Force_Send_Notification>:

void Custom_Force_Send_Notification(void) /* Property Notification */
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8011986:	2300      	movs	r3, #0
 8011988:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Force_NS_1*/
  if (Custom_App_Context.Force_Notification_Status == 1)
 801198a:	4b31      	ldr	r3, [pc, #196]	@ (8011a50 <Custom_Force_Send_Notification+0xd0>)
 801198c:	785b      	ldrb	r3, [r3, #1]
 801198e:	2b01      	cmp	r3, #1
 8011990:	d144      	bne.n	8011a1c <Custom_Force_Send_Notification+0x9c>
  	{
  	  updateflag = 1;
 8011992:	2301      	movs	r3, #1
 8011994:	73fb      	strb	r3, [r7, #15]

  	  if(Custom_App_Context.bras_status == 1)
 8011996:	4b2e      	ldr	r3, [pc, #184]	@ (8011a50 <Custom_Force_Send_Notification+0xd0>)
 8011998:	78db      	ldrb	r3, [r3, #3]
 801199a:	2b01      	cmp	r3, #1
 801199c:	d111      	bne.n	80119c2 <Custom_Force_Send_Notification+0x42>
  	  {

  		  char bras_droit[] = "1";
 801199e:	2331      	movs	r3, #49	@ 0x31
 80119a0:	81bb      	strh	r3, [r7, #12]
  		 		  memcpy(&NotifyCharData[0], &bras_droit, sizeof(bras_droit));
 80119a2:	89ba      	ldrh	r2, [r7, #12]
 80119a4:	4b2b      	ldr	r3, [pc, #172]	@ (8011a54 <Custom_Force_Send_Notification+0xd4>)
 80119a6:	801a      	strh	r2, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_droit good \n");
 80119a8:	482b      	ldr	r0, [pc, #172]	@ (8011a58 <Custom_Force_Send_Notification+0xd8>)
 80119aa:	f7fe fc67 	bl	801027c <DbgTraceGetFileName>
 80119ae:	4601      	mov	r1, r0
 80119b0:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 80119b4:	4a29      	ldr	r2, [pc, #164]	@ (8011a5c <Custom_Force_Send_Notification+0xdc>)
 80119b6:	482a      	ldr	r0, [pc, #168]	@ (8011a60 <Custom_Force_Send_Notification+0xe0>)
 80119b8:	f001 f91a 	bl	8012bf0 <iprintf>
 80119bc:	4829      	ldr	r0, [pc, #164]	@ (8011a64 <Custom_Force_Send_Notification+0xe4>)
 80119be:	f001 f987 	bl	8012cd0 <puts>
  	  }
  	  if(Custom_App_Context.bras_status == 2)
 80119c2:	4b23      	ldr	r3, [pc, #140]	@ (8011a50 <Custom_Force_Send_Notification+0xd0>)
 80119c4:	78db      	ldrb	r3, [r3, #3]
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d111      	bne.n	80119ee <Custom_Force_Send_Notification+0x6e>
  	  {

  		  char bras_gauche[] = "2";
 80119ca:	2332      	movs	r3, #50	@ 0x32
 80119cc:	813b      	strh	r3, [r7, #8]
  		 		  memcpy(&NotifyCharData[0], &bras_gauche, sizeof(bras_gauche));
 80119ce:	893a      	ldrh	r2, [r7, #8]
 80119d0:	4b20      	ldr	r3, [pc, #128]	@ (8011a54 <Custom_Force_Send_Notification+0xd4>)
 80119d2:	801a      	strh	r2, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_gauche good \n");
 80119d4:	4820      	ldr	r0, [pc, #128]	@ (8011a58 <Custom_Force_Send_Notification+0xd8>)
 80119d6:	f7fe fc51 	bl	801027c <DbgTraceGetFileName>
 80119da:	4601      	mov	r1, r0
 80119dc:	f240 13bd 	movw	r3, #445	@ 0x1bd
 80119e0:	4a1e      	ldr	r2, [pc, #120]	@ (8011a5c <Custom_Force_Send_Notification+0xdc>)
 80119e2:	481f      	ldr	r0, [pc, #124]	@ (8011a60 <Custom_Force_Send_Notification+0xe0>)
 80119e4:	f001 f904 	bl	8012bf0 <iprintf>
 80119e8:	481f      	ldr	r0, [pc, #124]	@ (8011a68 <Custom_Force_Send_Notification+0xe8>)
 80119ea:	f001 f971 	bl	8012cd0 <puts>
  	  }
  	if(Custom_App_Context.bras_status == 3)
 80119ee:	4b18      	ldr	r3, [pc, #96]	@ (8011a50 <Custom_Force_Send_Notification+0xd0>)
 80119f0:	78db      	ldrb	r3, [r3, #3]
 80119f2:	2b03      	cmp	r3, #3
 80119f4:	d11f      	bne.n	8011a36 <Custom_Force_Send_Notification+0xb6>
  	  	  {

  	  		  char bras_correct[] = "3";
 80119f6:	2333      	movs	r3, #51	@ 0x33
 80119f8:	80bb      	strh	r3, [r7, #4]
  	  		 		  memcpy(&NotifyCharData[0], &bras_correct, sizeof(bras_correct));
 80119fa:	88ba      	ldrh	r2, [r7, #4]
 80119fc:	4b15      	ldr	r3, [pc, #84]	@ (8011a54 <Custom_Force_Send_Notification+0xd4>)
 80119fe:	801a      	strh	r2, [r3, #0]
  	  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_correct good \n");
 8011a00:	4815      	ldr	r0, [pc, #84]	@ (8011a58 <Custom_Force_Send_Notification+0xd8>)
 8011a02:	f7fe fc3b 	bl	801027c <DbgTraceGetFileName>
 8011a06:	4601      	mov	r1, r0
 8011a08:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8011a0c:	4a13      	ldr	r2, [pc, #76]	@ (8011a5c <Custom_Force_Send_Notification+0xdc>)
 8011a0e:	4814      	ldr	r0, [pc, #80]	@ (8011a60 <Custom_Force_Send_Notification+0xe0>)
 8011a10:	f001 f8ee 	bl	8012bf0 <iprintf>
 8011a14:	4815      	ldr	r0, [pc, #84]	@ (8011a6c <Custom_Force_Send_Notification+0xec>)
 8011a16:	f001 f95b 	bl	8012cd0 <puts>
 8011a1a:	e00c      	b.n	8011a36 <Custom_Force_Send_Notification+0xb6>


  	}
	else
	{
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8011a1c:	480e      	ldr	r0, [pc, #56]	@ (8011a58 <Custom_Force_Send_Notification+0xd8>)
 8011a1e:	f7fe fc2d 	bl	801027c <DbgTraceGetFileName>
 8011a22:	4601      	mov	r1, r0
 8011a24:	f240 13cb 	movw	r3, #459	@ 0x1cb
 8011a28:	4a0c      	ldr	r2, [pc, #48]	@ (8011a5c <Custom_Force_Send_Notification+0xdc>)
 8011a2a:	480d      	ldr	r0, [pc, #52]	@ (8011a60 <Custom_Force_Send_Notification+0xe0>)
 8011a2c:	f001 f8e0 	bl	8012bf0 <iprintf>
 8011a30:	480f      	ldr	r0, [pc, #60]	@ (8011a70 <Custom_Force_Send_Notification+0xf0>)
 8011a32:	f001 f94d 	bl	8012cd0 <puts>
	}
  /* USER CODE END Force_NS_1*/

  if (updateflag != 0)
 8011a36:	7bfb      	ldrb	r3, [r7, #15]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d004      	beq.n	8011a46 <Custom_Force_Send_Notification+0xc6>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_FORCE, (uint8_t *)NotifyCharData);
 8011a3c:	4905      	ldr	r1, [pc, #20]	@ (8011a54 <Custom_Force_Send_Notification+0xd4>)
 8011a3e:	2002      	movs	r0, #2
 8011a40:	f000 fa7e 	bl	8011f40 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Force_NS_Last*/

  /* USER CODE END Force_NS_Last*/

  return;
 8011a44:	bf00      	nop
 8011a46:	bf00      	nop
}
 8011a48:	3710      	adds	r7, #16
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
 8011a4e:	bf00      	nop
 8011a50:	200009c0 	.word	0x200009c0
 8011a54:	20000ac0 	.word	0x20000ac0
 8011a58:	08014f48 	.word	0x08014f48
 8011a5c:	080158ec 	.word	0x080158ec
 8011a60:	08014f68 	.word	0x08014f68
 8011a64:	08015198 	.word	0x08015198
 8011a68:	080151d8 	.word	0x080151d8
 8011a6c:	08015218 	.word	0x08015218
 8011a70:	08015110 	.word	0x08015110

08011a74 <Custom_Appli_Update_Char>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Custom_Appli_Update_Char()/* Property writed */
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	af00      	add	r7, sp, #0
	Custom_STM_App_Update_Char(CUSTOM_STM_APPEL_APP, (uint8_t *)UpdateCharData);
 8011a78:	4902      	ldr	r1, [pc, #8]	@ (8011a84 <Custom_Appli_Update_Char+0x10>)
 8011a7a:	2001      	movs	r0, #1
 8011a7c:	f000 fa60 	bl	8011f40 <Custom_STM_App_Update_Char>
	  return;
 8011a80:	bf00      	nop
}
 8011a82:	bd80      	pop	{r7, pc}
 8011a84:	200009c8 	.word	0x200009c8

08011a88 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b08c      	sub	sp, #48	@ 0x30
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8011a90:	2300      	movs	r3, #0
 8011a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8011a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011a9e:	781b      	ldrb	r3, [r3, #0]
 8011aa0:	2bff      	cmp	r3, #255	@ 0xff
 8011aa2:	f040 80be 	bne.w	8011c22 <Custom_STM_Event_Handler+0x19a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8011aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011aa8:	3302      	adds	r3, #2
 8011aaa:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8011aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011aae:	881b      	ldrh	r3, [r3, #0]
 8011ab0:	b29b      	uxth	r3, r3
 8011ab2:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8011ab6:	2b1a      	cmp	r3, #26
 8011ab8:	f200 80af 	bhi.w	8011c1a <Custom_STM_Event_Handler+0x192>
 8011abc:	a201      	add	r2, pc, #4	@ (adr r2, 8011ac4 <Custom_STM_Event_Handler+0x3c>)
 8011abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ac2:	bf00      	nop
 8011ac4:	08011b31 	.word	0x08011b31
 8011ac8:	08011c1b 	.word	0x08011c1b
 8011acc:	08011c1b 	.word	0x08011c1b
 8011ad0:	08011c1b 	.word	0x08011c1b
 8011ad4:	08011c1b 	.word	0x08011c1b
 8011ad8:	08011c1b 	.word	0x08011c1b
 8011adc:	08011c1b 	.word	0x08011c1b
 8011ae0:	08011c1b 	.word	0x08011c1b
 8011ae4:	08011c1b 	.word	0x08011c1b
 8011ae8:	08011c1b 	.word	0x08011c1b
 8011aec:	08011c1b 	.word	0x08011c1b
 8011af0:	08011c1b 	.word	0x08011c1b
 8011af4:	08011c1b 	.word	0x08011c1b
 8011af8:	08011c1b 	.word	0x08011c1b
 8011afc:	08011c1b 	.word	0x08011c1b
 8011b00:	08011c1b 	.word	0x08011c1b
 8011b04:	08011c1b 	.word	0x08011c1b
 8011b08:	08011c1b 	.word	0x08011c1b
 8011b0c:	08011c1b 	.word	0x08011c1b
 8011b10:	08011c1b 	.word	0x08011c1b
 8011b14:	08011c1b 	.word	0x08011c1b
 8011b18:	08011c1b 	.word	0x08011c1b
 8011b1c:	08011c1b 	.word	0x08011c1b
 8011b20:	08011c1b 	.word	0x08011c1b
 8011b24:	08011c1b 	.word	0x08011c1b
 8011b28:	08011c1b 	.word	0x08011c1b
 8011b2c:	08011bfd 	.word	0x08011bfd
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8011b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b32:	3302      	adds	r3, #2
 8011b34:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	885b      	ldrh	r3, [r3, #2]
 8011b3a:	b29b      	uxth	r3, r3
 8011b3c:	461a      	mov	r2, r3
 8011b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8011c30 <Custom_STM_Event_Handler+0x1a8>)
 8011b40:	885b      	ldrh	r3, [r3, #2]
 8011b42:	3302      	adds	r3, #2
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d119      	bne.n	8011b7c <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011b48:	2301      	movs	r3, #1
 8011b4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8011b4e:	69fb      	ldr	r3, [r7, #28]
 8011b50:	7a1b      	ldrb	r3, [r3, #8]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <Custom_STM_Event_Handler+0xd4>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d008      	beq.n	8011b6c <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8011b5a:	e04e      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011b60:	f107 0308 	add.w	r3, r7, #8
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fc7d 	bl	8011464 <Custom_STM_App_Notification>
                break;
 8011b6a:	e046      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011b70:	f107 0308 	add.w	r3, r7, #8
 8011b74:	4618      	mov	r0, r3
 8011b76:	f7ff fc75 	bl	8011464 <Custom_STM_App_Notification>
                break;
 8011b7a:	e03e      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomForceHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	885b      	ldrh	r3, [r3, #2]
 8011b80:	b29b      	uxth	r3, r3
 8011b82:	461a      	mov	r2, r3
 8011b84:	4b2a      	ldr	r3, [pc, #168]	@ (8011c30 <Custom_STM_Event_Handler+0x1a8>)
 8011b86:	88db      	ldrh	r3, [r3, #6]
 8011b88:	3302      	adds	r3, #2
 8011b8a:	429a      	cmp	r2, r3
 8011b8c:	d119      	bne.n	8011bc2 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011b8e:	2301      	movs	r3, #1
 8011b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */
            switch (attribute_modified->Attr_Data[0])
 8011b94:	69fb      	ldr	r3, [r7, #28]
 8011b96:	7a1b      	ldrb	r3, [r3, #8]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d002      	beq.n	8011ba2 <Custom_STM_Event_Handler+0x11a>
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d008      	beq.n	8011bb2 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
              break;
 8011ba0:	e02b      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT;
 8011ba2:	2305      	movs	r3, #5
 8011ba4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011ba6:	f107 0308 	add.w	r3, r7, #8
 8011baa:	4618      	mov	r0, r3
 8011bac:	f7ff fc5a 	bl	8011464 <Custom_STM_App_Notification>
                break;
 8011bb0:	e023      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT;
 8011bb2:	2304      	movs	r3, #4
 8011bb4:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011bb6:	f107 0308 	add.w	r3, r7, #8
 8011bba:	4618      	mov	r0, r3
 8011bbc:	f7ff fc52 	bl	8011464 <Custom_STM_App_Notification>
                break;
 8011bc0:	e01b      	b.n	8011bfa <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomForceHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	885b      	ldrh	r3, [r3, #2]
 8011bc6:	b29b      	uxth	r3, r3
 8011bc8:	461a      	mov	r2, r3
 8011bca:	4b19      	ldr	r3, [pc, #100]	@ (8011c30 <Custom_STM_Event_Handler+0x1a8>)
 8011bcc:	889b      	ldrh	r3, [r3, #4]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	429a      	cmp	r2, r3
 8011bd2:	d124      	bne.n	8011c1e <Custom_STM_Event_Handler+0x196>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT;
 8011bda:	2303      	movs	r3, #3
 8011bdc:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	88db      	ldrh	r3, [r3, #6]
 8011be2:	b29b      	uxth	r3, r3
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8011be8:	69fb      	ldr	r3, [r7, #28]
 8011bea:	3308      	adds	r3, #8
 8011bec:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8011bee:	f107 0308 	add.w	r3, r7, #8
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff fc36 	bl	8011464 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8011bf8:	e011      	b.n	8011c1e <Custom_STM_Event_Handler+0x196>
 8011bfa:	e010      	b.n	8011c1e <Custom_STM_Event_Handler+0x196>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8011bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bfe:	3302      	adds	r3, #2
 8011c00:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8011c02:	2306      	movs	r3, #6
 8011c04:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8011c06:	6a3b      	ldr	r3, [r7, #32]
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8011c0e:	f107 0308 	add.w	r3, r7, #8
 8011c12:	4618      	mov	r0, r3
 8011c14:	f7ff fc26 	bl	8011464 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8011c18:	e002      	b.n	8011c20 <Custom_STM_Event_Handler+0x198>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011c1a:	bf00      	nop
 8011c1c:	e002      	b.n	8011c24 <Custom_STM_Event_Handler+0x19c>
          break;
 8011c1e:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011c20:	e000      	b.n	8011c24 <Custom_STM_Event_Handler+0x19c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8011c22:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8011c24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3730      	adds	r7, #48	@ 0x30
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	20000bb8 	.word	0x20000bb8

08011c34 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b08c      	sub	sp, #48	@ 0x30
 8011c38:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011c3a:	2392      	movs	r3, #146	@ 0x92
 8011c3c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011c3e:	48ad      	ldr	r0, [pc, #692]	@ (8011ef4 <SVCCTL_InitCustomSvc+0x2c0>)
 8011c40:	f7fd fca0 	bl	800f584 <SVCCTL_RegisterSvcHandler>
   *                              = 9
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 9;
 8011c44:	2309      	movs	r3, #9
 8011c46:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MVT_DEF_UUID(uuid.Char_UUID_128);
 8011c48:	238f      	movs	r3, #143	@ 0x8f
 8011c4a:	713b      	strb	r3, [r7, #4]
 8011c4c:	23e5      	movs	r3, #229	@ 0xe5
 8011c4e:	717b      	strb	r3, [r7, #5]
 8011c50:	23b3      	movs	r3, #179	@ 0xb3
 8011c52:	71bb      	strb	r3, [r7, #6]
 8011c54:	23d5      	movs	r3, #213	@ 0xd5
 8011c56:	71fb      	strb	r3, [r7, #7]
 8011c58:	232e      	movs	r3, #46	@ 0x2e
 8011c5a:	723b      	strb	r3, [r7, #8]
 8011c5c:	237f      	movs	r3, #127	@ 0x7f
 8011c5e:	727b      	strb	r3, [r7, #9]
 8011c60:	234a      	movs	r3, #74	@ 0x4a
 8011c62:	72bb      	strb	r3, [r7, #10]
 8011c64:	2398      	movs	r3, #152	@ 0x98
 8011c66:	72fb      	strb	r3, [r7, #11]
 8011c68:	232a      	movs	r3, #42	@ 0x2a
 8011c6a:	733b      	strb	r3, [r7, #12]
 8011c6c:	2348      	movs	r3, #72	@ 0x48
 8011c6e:	737b      	strb	r3, [r7, #13]
 8011c70:	237a      	movs	r3, #122	@ 0x7a
 8011c72:	73bb      	strb	r3, [r7, #14]
 8011c74:	23cc      	movs	r3, #204	@ 0xcc
 8011c76:	73fb      	strb	r3, [r7, #15]
 8011c78:	2300      	movs	r3, #0
 8011c7a:	743b      	strb	r3, [r7, #16]
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	747b      	strb	r3, [r7, #17]
 8011c80:	2300      	movs	r3, #0
 8011c82:	74bb      	strb	r3, [r7, #18]
 8011c84:	2300      	movs	r3, #0
 8011c86:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8011c88:	7dbb      	ldrb	r3, [r7, #22]
 8011c8a:	1d39      	adds	r1, r7, #4
 8011c8c:	4a9a      	ldr	r2, [pc, #616]	@ (8011ef8 <SVCCTL_InitCustomSvc+0x2c4>)
 8011c8e:	9200      	str	r2, [sp, #0]
 8011c90:	2201      	movs	r2, #1
 8011c92:	2002      	movs	r0, #2
 8011c94:	f7fc fee9 	bl	800ea6a <aci_gatt_add_service>
 8011c98:	4603      	mov	r3, r0
 8011c9a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMvt_DefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011c9c:	7dfb      	ldrb	r3, [r7, #23]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00f      	beq.n	8011cc2 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: mvt_def, error code: 0x%x \n\r", ret);
 8011ca2:	4896      	ldr	r0, [pc, #600]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011ca4:	f7fe faea 	bl	801027c <DbgTraceGetFileName>
 8011ca8:	4601      	mov	r1, r0
 8011caa:	f240 1371 	movw	r3, #369	@ 0x171
 8011cae:	4a94      	ldr	r2, [pc, #592]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011cb0:	4894      	ldr	r0, [pc, #592]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011cb2:	f000 ff9d 	bl	8012bf0 <iprintf>
 8011cb6:	7dfb      	ldrb	r3, [r7, #23]
 8011cb8:	4619      	mov	r1, r3
 8011cba:	4893      	ldr	r0, [pc, #588]	@ (8011f08 <SVCCTL_InitCustomSvc+0x2d4>)
 8011cbc:	f000 ff98 	bl	8012bf0 <iprintf>
 8011cc0:	e00c      	b.n	8011cdc <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: mvt_def \n\r");
 8011cc2:	488e      	ldr	r0, [pc, #568]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011cc4:	f7fe fada 	bl	801027c <DbgTraceGetFileName>
 8011cc8:	4601      	mov	r1, r0
 8011cca:	f240 1375 	movw	r3, #373	@ 0x175
 8011cce:	4a8c      	ldr	r2, [pc, #560]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011cd0:	488c      	ldr	r0, [pc, #560]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011cd2:	f000 ff8d 	bl	8012bf0 <iprintf>
 8011cd6:	488d      	ldr	r0, [pc, #564]	@ (8011f0c <SVCCTL_InitCustomSvc+0x2d8>)
 8011cd8:	f000 ff8a 	bl	8012bf0 <iprintf>
  }

  /**
   *  Mvt_rep
   */
  COPY_MVT_REP_UUID(uuid.Char_UUID_128);
 8011cdc:	2319      	movs	r3, #25
 8011cde:	713b      	strb	r3, [r7, #4]
 8011ce0:	23ed      	movs	r3, #237	@ 0xed
 8011ce2:	717b      	strb	r3, [r7, #5]
 8011ce4:	2382      	movs	r3, #130	@ 0x82
 8011ce6:	71bb      	strb	r3, [r7, #6]
 8011ce8:	23ae      	movs	r3, #174	@ 0xae
 8011cea:	71fb      	strb	r3, [r7, #7]
 8011cec:	23ed      	movs	r3, #237	@ 0xed
 8011cee:	723b      	strb	r3, [r7, #8]
 8011cf0:	2321      	movs	r3, #33	@ 0x21
 8011cf2:	727b      	strb	r3, [r7, #9]
 8011cf4:	234c      	movs	r3, #76	@ 0x4c
 8011cf6:	72bb      	strb	r3, [r7, #10]
 8011cf8:	239d      	movs	r3, #157	@ 0x9d
 8011cfa:	72fb      	strb	r3, [r7, #11]
 8011cfc:	2341      	movs	r3, #65	@ 0x41
 8011cfe:	733b      	strb	r3, [r7, #12]
 8011d00:	2345      	movs	r3, #69	@ 0x45
 8011d02:	737b      	strb	r3, [r7, #13]
 8011d04:	2322      	movs	r3, #34	@ 0x22
 8011d06:	73bb      	strb	r3, [r7, #14]
 8011d08:	238e      	movs	r3, #142	@ 0x8e
 8011d0a:	73fb      	strb	r3, [r7, #15]
 8011d0c:	23cd      	movs	r3, #205	@ 0xcd
 8011d0e:	743b      	strb	r3, [r7, #16]
 8011d10:	23ab      	movs	r3, #171	@ 0xab
 8011d12:	747b      	strb	r3, [r7, #17]
 8011d14:	2300      	movs	r3, #0
 8011d16:	74bb      	strb	r3, [r7, #18]
 8011d18:	2300      	movs	r3, #0
 8011d1a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011d1c:	4b76      	ldr	r3, [pc, #472]	@ (8011ef8 <SVCCTL_InitCustomSvc+0x2c4>)
 8011d1e:	8818      	ldrh	r0, [r3, #0]
 8011d20:	4b7b      	ldr	r3, [pc, #492]	@ (8011f10 <SVCCTL_InitCustomSvc+0x2dc>)
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	4619      	mov	r1, r3
 8011d26:	1d3a      	adds	r2, r7, #4
 8011d28:	4b7a      	ldr	r3, [pc, #488]	@ (8011f14 <SVCCTL_InitCustomSvc+0x2e0>)
 8011d2a:	9305      	str	r3, [sp, #20]
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	9304      	str	r3, [sp, #16]
 8011d30:	2310      	movs	r3, #16
 8011d32:	9303      	str	r3, [sp, #12]
 8011d34:	2301      	movs	r3, #1
 8011d36:	9302      	str	r3, [sp, #8]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	9301      	str	r3, [sp, #4]
 8011d3c:	2310      	movs	r3, #16
 8011d3e:	9300      	str	r3, [sp, #0]
 8011d40:	460b      	mov	r3, r1
 8011d42:	2102      	movs	r1, #2
 8011d44:	f7fc ff67 	bl	800ec16 <aci_gatt_add_char>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMvt_RepHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011d4c:	7dfb      	ldrb	r3, [r7, #23]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d00f      	beq.n	8011d72 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MVT_REP, error code: 0x%x \n\r", ret);
 8011d52:	486a      	ldr	r0, [pc, #424]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011d54:	f7fe fa92 	bl	801027c <DbgTraceGetFileName>
 8011d58:	4601      	mov	r1, r0
 8011d5a:	f240 1387 	movw	r3, #391	@ 0x187
 8011d5e:	4a68      	ldr	r2, [pc, #416]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011d60:	4868      	ldr	r0, [pc, #416]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011d62:	f000 ff45 	bl	8012bf0 <iprintf>
 8011d66:	7dfb      	ldrb	r3, [r7, #23]
 8011d68:	4619      	mov	r1, r3
 8011d6a:	486b      	ldr	r0, [pc, #428]	@ (8011f18 <SVCCTL_InitCustomSvc+0x2e4>)
 8011d6c:	f000 ff40 	bl	8012bf0 <iprintf>
 8011d70:	e00c      	b.n	8011d8c <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MVT_REP \n\r");
 8011d72:	4862      	ldr	r0, [pc, #392]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011d74:	f7fe fa82 	bl	801027c <DbgTraceGetFileName>
 8011d78:	4601      	mov	r1, r0
 8011d7a:	f240 138b 	movw	r3, #395	@ 0x18b
 8011d7e:	4a60      	ldr	r2, [pc, #384]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011d80:	4860      	ldr	r0, [pc, #384]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011d82:	f000 ff35 	bl	8012bf0 <iprintf>
 8011d86:	4865      	ldr	r0, [pc, #404]	@ (8011f1c <SVCCTL_InitCustomSvc+0x2e8>)
 8011d88:	f000 ff32 	bl	8012bf0 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Appel_app
   */
  COPY_APPEL_APP_UUID(uuid.Char_UUID_128);
 8011d8c:	2319      	movs	r3, #25
 8011d8e:	713b      	strb	r3, [r7, #4]
 8011d90:	23ed      	movs	r3, #237	@ 0xed
 8011d92:	717b      	strb	r3, [r7, #5]
 8011d94:	2382      	movs	r3, #130	@ 0x82
 8011d96:	71bb      	strb	r3, [r7, #6]
 8011d98:	23ae      	movs	r3, #174	@ 0xae
 8011d9a:	71fb      	strb	r3, [r7, #7]
 8011d9c:	23ed      	movs	r3, #237	@ 0xed
 8011d9e:	723b      	strb	r3, [r7, #8]
 8011da0:	2321      	movs	r3, #33	@ 0x21
 8011da2:	727b      	strb	r3, [r7, #9]
 8011da4:	234c      	movs	r3, #76	@ 0x4c
 8011da6:	72bb      	strb	r3, [r7, #10]
 8011da8:	239d      	movs	r3, #157	@ 0x9d
 8011daa:	72fb      	strb	r3, [r7, #11]
 8011dac:	2341      	movs	r3, #65	@ 0x41
 8011dae:	733b      	strb	r3, [r7, #12]
 8011db0:	2345      	movs	r3, #69	@ 0x45
 8011db2:	737b      	strb	r3, [r7, #13]
 8011db4:	2322      	movs	r3, #34	@ 0x22
 8011db6:	73bb      	strb	r3, [r7, #14]
 8011db8:	238e      	movs	r3, #142	@ 0x8e
 8011dba:	73fb      	strb	r3, [r7, #15]
 8011dbc:	2334      	movs	r3, #52	@ 0x34
 8011dbe:	743b      	strb	r3, [r7, #16]
 8011dc0:	2312      	movs	r3, #18
 8011dc2:	747b      	strb	r3, [r7, #17]
 8011dc4:	2300      	movs	r3, #0
 8011dc6:	74bb      	strb	r3, [r7, #18]
 8011dc8:	2300      	movs	r3, #0
 8011dca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011dcc:	4b4a      	ldr	r3, [pc, #296]	@ (8011ef8 <SVCCTL_InitCustomSvc+0x2c4>)
 8011dce:	8818      	ldrh	r0, [r3, #0]
 8011dd0:	4b53      	ldr	r3, [pc, #332]	@ (8011f20 <SVCCTL_InitCustomSvc+0x2ec>)
 8011dd2:	781b      	ldrb	r3, [r3, #0]
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	1d3a      	adds	r2, r7, #4
 8011dd8:	4b52      	ldr	r3, [pc, #328]	@ (8011f24 <SVCCTL_InitCustomSvc+0x2f0>)
 8011dda:	9305      	str	r3, [sp, #20]
 8011ddc:	2301      	movs	r3, #1
 8011dde:	9304      	str	r3, [sp, #16]
 8011de0:	2310      	movs	r3, #16
 8011de2:	9303      	str	r3, [sp, #12]
 8011de4:	2301      	movs	r3, #1
 8011de6:	9302      	str	r3, [sp, #8]
 8011de8:	2300      	movs	r3, #0
 8011dea:	9301      	str	r3, [sp, #4]
 8011dec:	2306      	movs	r3, #6
 8011dee:	9300      	str	r3, [sp, #0]
 8011df0:	460b      	mov	r3, r1
 8011df2:	2102      	movs	r1, #2
 8011df4:	f7fc ff0f 	bl	800ec16 <aci_gatt_add_char>
 8011df8:	4603      	mov	r3, r0
 8011dfa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAppel_AppHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d00f      	beq.n	8011e22 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : APPEL_APP, error code: 0x%x \n\r", ret);
 8011e02:	483e      	ldr	r0, [pc, #248]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011e04:	f7fe fa3a 	bl	801027c <DbgTraceGetFileName>
 8011e08:	4601      	mov	r1, r0
 8011e0a:	f240 13a1 	movw	r3, #417	@ 0x1a1
 8011e0e:	4a3c      	ldr	r2, [pc, #240]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011e10:	483c      	ldr	r0, [pc, #240]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011e12:	f000 feed 	bl	8012bf0 <iprintf>
 8011e16:	7dfb      	ldrb	r3, [r7, #23]
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4843      	ldr	r0, [pc, #268]	@ (8011f28 <SVCCTL_InitCustomSvc+0x2f4>)
 8011e1c:	f000 fee8 	bl	8012bf0 <iprintf>
 8011e20:	e00c      	b.n	8011e3c <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : APPEL_APP \n\r");
 8011e22:	4836      	ldr	r0, [pc, #216]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011e24:	f7fe fa2a 	bl	801027c <DbgTraceGetFileName>
 8011e28:	4601      	mov	r1, r0
 8011e2a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8011e2e:	4a34      	ldr	r2, [pc, #208]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011e30:	4834      	ldr	r0, [pc, #208]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011e32:	f000 fedd 	bl	8012bf0 <iprintf>
 8011e36:	483d      	ldr	r0, [pc, #244]	@ (8011f2c <SVCCTL_InitCustomSvc+0x2f8>)
 8011e38:	f000 feda 	bl	8012bf0 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  force
   */
  COPY_FORCE_UUID(uuid.Char_UUID_128);
 8011e3c:	2319      	movs	r3, #25
 8011e3e:	713b      	strb	r3, [r7, #4]
 8011e40:	23ed      	movs	r3, #237	@ 0xed
 8011e42:	717b      	strb	r3, [r7, #5]
 8011e44:	2382      	movs	r3, #130	@ 0x82
 8011e46:	71bb      	strb	r3, [r7, #6]
 8011e48:	23ae      	movs	r3, #174	@ 0xae
 8011e4a:	71fb      	strb	r3, [r7, #7]
 8011e4c:	23ed      	movs	r3, #237	@ 0xed
 8011e4e:	723b      	strb	r3, [r7, #8]
 8011e50:	2321      	movs	r3, #33	@ 0x21
 8011e52:	727b      	strb	r3, [r7, #9]
 8011e54:	234c      	movs	r3, #76	@ 0x4c
 8011e56:	72bb      	strb	r3, [r7, #10]
 8011e58:	239d      	movs	r3, #157	@ 0x9d
 8011e5a:	72fb      	strb	r3, [r7, #11]
 8011e5c:	2341      	movs	r3, #65	@ 0x41
 8011e5e:	733b      	strb	r3, [r7, #12]
 8011e60:	2345      	movs	r3, #69	@ 0x45
 8011e62:	737b      	strb	r3, [r7, #13]
 8011e64:	2322      	movs	r3, #34	@ 0x22
 8011e66:	73bb      	strb	r3, [r7, #14]
 8011e68:	238e      	movs	r3, #142	@ 0x8e
 8011e6a:	73fb      	strb	r3, [r7, #15]
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	743b      	strb	r3, [r7, #16]
 8011e70:	2300      	movs	r3, #0
 8011e72:	747b      	strb	r3, [r7, #17]
 8011e74:	2300      	movs	r3, #0
 8011e76:	74bb      	strb	r3, [r7, #18]
 8011e78:	2300      	movs	r3, #0
 8011e7a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8011ef8 <SVCCTL_InitCustomSvc+0x2c4>)
 8011e7e:	8818      	ldrh	r0, [r3, #0]
 8011e80:	4b2b      	ldr	r3, [pc, #172]	@ (8011f30 <SVCCTL_InitCustomSvc+0x2fc>)
 8011e82:	781b      	ldrb	r3, [r3, #0]
 8011e84:	4619      	mov	r1, r3
 8011e86:	1d3a      	adds	r2, r7, #4
 8011e88:	4b2a      	ldr	r3, [pc, #168]	@ (8011f34 <SVCCTL_InitCustomSvc+0x300>)
 8011e8a:	9305      	str	r3, [sp, #20]
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	9304      	str	r3, [sp, #16]
 8011e90:	2310      	movs	r3, #16
 8011e92:	9303      	str	r3, [sp, #12]
 8011e94:	2301      	movs	r3, #1
 8011e96:	9302      	str	r3, [sp, #8]
 8011e98:	2300      	movs	r3, #0
 8011e9a:	9301      	str	r3, [sp, #4]
 8011e9c:	2310      	movs	r3, #16
 8011e9e:	9300      	str	r3, [sp, #0]
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	2102      	movs	r1, #2
 8011ea4:	f7fc feb7 	bl	800ec16 <aci_gatt_add_char>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomForceHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011eac:	7dfb      	ldrb	r3, [r7, #23]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d00f      	beq.n	8011ed2 <SVCCTL_InitCustomSvc+0x29e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : FORCE, error code: 0x%x \n\r", ret);
 8011eb2:	4812      	ldr	r0, [pc, #72]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011eb4:	f7fe f9e2 	bl	801027c <DbgTraceGetFileName>
 8011eb8:	4601      	mov	r1, r0
 8011eba:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8011ebe:	4a10      	ldr	r2, [pc, #64]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011ec0:	4810      	ldr	r0, [pc, #64]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011ec2:	f000 fe95 	bl	8012bf0 <iprintf>
 8011ec6:	7dfb      	ldrb	r3, [r7, #23]
 8011ec8:	4619      	mov	r1, r3
 8011eca:	481b      	ldr	r0, [pc, #108]	@ (8011f38 <SVCCTL_InitCustomSvc+0x304>)
 8011ecc:	f000 fe90 	bl	8012bf0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011ed0:	e00d      	b.n	8011eee <SVCCTL_InitCustomSvc+0x2ba>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : FORCE \n\r");
 8011ed2:	480a      	ldr	r0, [pc, #40]	@ (8011efc <SVCCTL_InitCustomSvc+0x2c8>)
 8011ed4:	f7fe f9d2 	bl	801027c <DbgTraceGetFileName>
 8011ed8:	4601      	mov	r1, r0
 8011eda:	f240 13bf 	movw	r3, #447	@ 0x1bf
 8011ede:	4a08      	ldr	r2, [pc, #32]	@ (8011f00 <SVCCTL_InitCustomSvc+0x2cc>)
 8011ee0:	4808      	ldr	r0, [pc, #32]	@ (8011f04 <SVCCTL_InitCustomSvc+0x2d0>)
 8011ee2:	f000 fe85 	bl	8012bf0 <iprintf>
 8011ee6:	4815      	ldr	r0, [pc, #84]	@ (8011f3c <SVCCTL_InitCustomSvc+0x308>)
 8011ee8:	f000 fe82 	bl	8012bf0 <iprintf>
  return;
 8011eec:	bf00      	nop
}
 8011eee:	3718      	adds	r7, #24
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd80      	pop	{r7, pc}
 8011ef4:	08011a89 	.word	0x08011a89
 8011ef8:	20000bb8 	.word	0x20000bb8
 8011efc:	0801525c 	.word	0x0801525c
 8011f00:	0801590c 	.word	0x0801590c
 8011f04:	0801527c 	.word	0x0801527c
 8011f08:	08015290 	.word	0x08015290
 8011f0c:	080152d8 	.word	0x080152d8
 8011f10:	20000103 	.word	0x20000103
 8011f14:	20000bba 	.word	0x20000bba
 8011f18:	0801530c 	.word	0x0801530c
 8011f1c:	08015354 	.word	0x08015354
 8011f20:	20000104 	.word	0x20000104
 8011f24:	20000bbc 	.word	0x20000bbc
 8011f28:	08015388 	.word	0x08015388
 8011f2c:	080153d0 	.word	0x080153d0
 8011f30:	20000105 	.word	0x20000105
 8011f34:	20000bbe 	.word	0x20000bbe
 8011f38:	08015408 	.word	0x08015408
 8011f3c:	0801544c 	.word	0x0801544c

08011f40 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b086      	sub	sp, #24
 8011f44:	af02      	add	r7, sp, #8
 8011f46:	4603      	mov	r3, r0
 8011f48:	6039      	str	r1, [r7, #0]
 8011f4a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011f4c:	2392      	movs	r3, #146	@ 0x92
 8011f4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8011f50:	79fb      	ldrb	r3, [r7, #7]
 8011f52:	2b02      	cmp	r3, #2
 8011f54:	d071      	beq.n	801203a <Custom_STM_App_Update_Char+0xfa>
 8011f56:	2b02      	cmp	r3, #2
 8011f58:	f300 809e 	bgt.w	8012098 <Custom_STM_App_Update_Char+0x158>
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d002      	beq.n	8011f66 <Custom_STM_App_Update_Char+0x26>
 8011f60:	2b01      	cmp	r3, #1
 8011f62:	d02f      	beq.n	8011fc4 <Custom_STM_App_Update_Char+0x84>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 8011f64:	e098      	b.n	8012098 <Custom_STM_App_Update_Char+0x158>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 8011f66:	4b4f      	ldr	r3, [pc, #316]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 8011f68:	8818      	ldrh	r0, [r3, #0]
 8011f6a:	4b4e      	ldr	r3, [pc, #312]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 8011f6c:	8859      	ldrh	r1, [r3, #2]
 8011f6e:	4b4e      	ldr	r3, [pc, #312]	@ (80120a8 <Custom_STM_App_Update_Char+0x168>)
 8011f70:	781a      	ldrb	r2, [r3, #0]
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	9300      	str	r3, [sp, #0]
 8011f76:	4613      	mov	r3, r2
 8011f78:	2200      	movs	r2, #0
 8011f7a:	f7fc ff54 	bl	800ee26 <aci_gatt_update_char_value>
 8011f7e:	4603      	mov	r3, r0
 8011f80:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8011f82:	7bfb      	ldrb	r3, [r7, #15]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d00f      	beq.n	8011fa8 <Custom_STM_App_Update_Char+0x68>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MVT_REP command, result : 0x%x \n\r", ret);
 8011f88:	4848      	ldr	r0, [pc, #288]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 8011f8a:	f7fe f977 	bl	801027c <DbgTraceGetFileName>
 8011f8e:	4601      	mov	r1, r0
 8011f90:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8011f94:	4a46      	ldr	r2, [pc, #280]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 8011f96:	4847      	ldr	r0, [pc, #284]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 8011f98:	f000 fe2a 	bl	8012bf0 <iprintf>
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	4845      	ldr	r0, [pc, #276]	@ (80120b8 <Custom_STM_App_Update_Char+0x178>)
 8011fa2:	f000 fe25 	bl	8012bf0 <iprintf>
      break;
 8011fa6:	e078      	b.n	801209a <Custom_STM_App_Update_Char+0x15a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MVT_REP command\n\r");
 8011fa8:	4840      	ldr	r0, [pc, #256]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 8011faa:	f7fe f967 	bl	801027c <DbgTraceGetFileName>
 8011fae:	4601      	mov	r1, r0
 8011fb0:	f44f 73f5 	mov.w	r3, #490	@ 0x1ea
 8011fb4:	4a3e      	ldr	r2, [pc, #248]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 8011fb6:	483f      	ldr	r0, [pc, #252]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 8011fb8:	f000 fe1a 	bl	8012bf0 <iprintf>
 8011fbc:	483f      	ldr	r0, [pc, #252]	@ (80120bc <Custom_STM_App_Update_Char+0x17c>)
 8011fbe:	f000 fe17 	bl	8012bf0 <iprintf>
      break;
 8011fc2:	e06a      	b.n	801209a <Custom_STM_App_Update_Char+0x15a>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 8011fc4:	4b37      	ldr	r3, [pc, #220]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 8011fc6:	8818      	ldrh	r0, [r3, #0]
 8011fc8:	4b36      	ldr	r3, [pc, #216]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 8011fca:	8899      	ldrh	r1, [r3, #4]
 8011fcc:	4b3c      	ldr	r3, [pc, #240]	@ (80120c0 <Custom_STM_App_Update_Char+0x180>)
 8011fce:	781a      	ldrb	r2, [r3, #0]
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	9300      	str	r3, [sp, #0]
 8011fd4:	4613      	mov	r3, r2
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	f7fc ff25 	bl	800ee26 <aci_gatt_update_char_value>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8011fe0:	7bfb      	ldrb	r3, [r7, #15]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d00f      	beq.n	8012006 <Custom_STM_App_Update_Char+0xc6>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value APPEL_APP command, result : 0x%x \n\r", ret);
 8011fe6:	4831      	ldr	r0, [pc, #196]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 8011fe8:	f7fe f948 	bl	801027c <DbgTraceGetFileName>
 8011fec:	4601      	mov	r1, r0
 8011fee:	f240 13f9 	movw	r3, #505	@ 0x1f9
 8011ff2:	4a2f      	ldr	r2, [pc, #188]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 8011ff4:	482f      	ldr	r0, [pc, #188]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 8011ff6:	f000 fdfb 	bl	8012bf0 <iprintf>
 8011ffa:	7bfb      	ldrb	r3, [r7, #15]
 8011ffc:	4619      	mov	r1, r3
 8011ffe:	4831      	ldr	r0, [pc, #196]	@ (80120c4 <Custom_STM_App_Update_Char+0x184>)
 8012000:	f000 fdf6 	bl	8012bf0 <iprintf>
 8012004:	e00c      	b.n	8012020 <Custom_STM_App_Update_Char+0xe0>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value APPEL_APP command\n\r");
 8012006:	4829      	ldr	r0, [pc, #164]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 8012008:	f7fe f938 	bl	801027c <DbgTraceGetFileName>
 801200c:	4601      	mov	r1, r0
 801200e:	f240 13fd 	movw	r3, #509	@ 0x1fd
 8012012:	4a27      	ldr	r2, [pc, #156]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 8012014:	4827      	ldr	r0, [pc, #156]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 8012016:	f000 fdeb 	bl	8012bf0 <iprintf>
 801201a:	482b      	ldr	r0, [pc, #172]	@ (80120c8 <Custom_STM_App_Update_Char+0x188>)
 801201c:	f000 fde8 	bl	8012bf0 <iprintf>
      printf("%u\n", pPayload[0]);
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	4619      	mov	r1, r3
 8012026:	4829      	ldr	r0, [pc, #164]	@ (80120cc <Custom_STM_App_Update_Char+0x18c>)
 8012028:	f000 fde2 	bl	8012bf0 <iprintf>
      global_payload_pointer = pPayload;
 801202c:	4a28      	ldr	r2, [pc, #160]	@ (80120d0 <Custom_STM_App_Update_Char+0x190>)
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	6013      	str	r3, [r2, #0]
      etat = INITIALISATION;
 8012032:	4b28      	ldr	r3, [pc, #160]	@ (80120d4 <Custom_STM_App_Update_Char+0x194>)
 8012034:	2200      	movs	r2, #0
 8012036:	701a      	strb	r2, [r3, #0]
      break;
 8012038:	e02f      	b.n	801209a <Custom_STM_App_Update_Char+0x15a>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 801203a:	4b1a      	ldr	r3, [pc, #104]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 801203c:	8818      	ldrh	r0, [r3, #0]
 801203e:	4b19      	ldr	r3, [pc, #100]	@ (80120a4 <Custom_STM_App_Update_Char+0x164>)
 8012040:	88d9      	ldrh	r1, [r3, #6]
 8012042:	4b25      	ldr	r3, [pc, #148]	@ (80120d8 <Custom_STM_App_Update_Char+0x198>)
 8012044:	781a      	ldrb	r2, [r3, #0]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	9300      	str	r3, [sp, #0]
 801204a:	4613      	mov	r3, r2
 801204c:	2200      	movs	r2, #0
 801204e:	f7fc feea 	bl	800ee26 <aci_gatt_update_char_value>
 8012052:	4603      	mov	r3, r0
 8012054:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8012056:	7bfb      	ldrb	r3, [r7, #15]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d00f      	beq.n	801207c <Custom_STM_App_Update_Char+0x13c>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value FORCE command, result : 0x%x \n\r", ret);
 801205c:	4813      	ldr	r0, [pc, #76]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 801205e:	f7fe f90d 	bl	801027c <DbgTraceGetFileName>
 8012062:	4601      	mov	r1, r0
 8012064:	f44f 7304 	mov.w	r3, #528	@ 0x210
 8012068:	4a11      	ldr	r2, [pc, #68]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 801206a:	4812      	ldr	r0, [pc, #72]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 801206c:	f000 fdc0 	bl	8012bf0 <iprintf>
 8012070:	7bfb      	ldrb	r3, [r7, #15]
 8012072:	4619      	mov	r1, r3
 8012074:	4819      	ldr	r0, [pc, #100]	@ (80120dc <Custom_STM_App_Update_Char+0x19c>)
 8012076:	f000 fdbb 	bl	8012bf0 <iprintf>
      break;
 801207a:	e00e      	b.n	801209a <Custom_STM_App_Update_Char+0x15a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value FORCE command\n\r");
 801207c:	480b      	ldr	r0, [pc, #44]	@ (80120ac <Custom_STM_App_Update_Char+0x16c>)
 801207e:	f7fe f8fd 	bl	801027c <DbgTraceGetFileName>
 8012082:	4601      	mov	r1, r0
 8012084:	f44f 7305 	mov.w	r3, #532	@ 0x214
 8012088:	4a09      	ldr	r2, [pc, #36]	@ (80120b0 <Custom_STM_App_Update_Char+0x170>)
 801208a:	480a      	ldr	r0, [pc, #40]	@ (80120b4 <Custom_STM_App_Update_Char+0x174>)
 801208c:	f000 fdb0 	bl	8012bf0 <iprintf>
 8012090:	4813      	ldr	r0, [pc, #76]	@ (80120e0 <Custom_STM_App_Update_Char+0x1a0>)
 8012092:	f000 fdad 	bl	8012bf0 <iprintf>
      break;
 8012096:	e000      	b.n	801209a <Custom_STM_App_Update_Char+0x15a>
      break;
 8012098:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801209a:	7bfb      	ldrb	r3, [r7, #15]
}
 801209c:	4618      	mov	r0, r3
 801209e:	3710      	adds	r7, #16
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}
 80120a4:	20000bb8 	.word	0x20000bb8
 80120a8:	20000103 	.word	0x20000103
 80120ac:	0801525c 	.word	0x0801525c
 80120b0:	08015924 	.word	0x08015924
 80120b4:	0801527c 	.word	0x0801527c
 80120b8:	08015480 	.word	0x08015480
 80120bc:	080154c8 	.word	0x080154c8
 80120c0:	20000104 	.word	0x20000104
 80120c4:	08015500 	.word	0x08015500
 80120c8:	0801554c 	.word	0x0801554c
 80120cc:	08015588 	.word	0x08015588
 80120d0:	20000bc0 	.word	0x20000bc0
 80120d4:	20000224 	.word	0x20000224
 80120d8:	20000105 	.word	0x20000105
 80120dc:	0801558c 	.word	0x0801558c
 80120e0:	080155d4 	.word	0x080155d4

080120e4 <LL_PWR_EnableBootC2>:
{
 80120e4:	b480      	push	{r7}
 80120e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80120e8:	4b05      	ldr	r3, [pc, #20]	@ (8012100 <LL_PWR_EnableBootC2+0x1c>)
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	4a04      	ldr	r2, [pc, #16]	@ (8012100 <LL_PWR_EnableBootC2+0x1c>)
 80120ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80120f2:	60d3      	str	r3, [r2, #12]
}
 80120f4:	bf00      	nop
 80120f6:	46bd      	mov	sp, r7
 80120f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	58000400 	.word	0x58000400

08012104 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8012104:	b480      	push	{r7}
 8012106:	b083      	sub	sp, #12
 8012108:	af00      	add	r7, sp, #0
 801210a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 801210c:	4b06      	ldr	r3, [pc, #24]	@ (8012128 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801210e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8012112:	4905      	ldr	r1, [pc, #20]	@ (8012128 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	4313      	orrs	r3, r2
 8012118:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 801211c:	bf00      	nop
 801211e:	370c      	adds	r7, #12
 8012120:	46bd      	mov	sp, r7
 8012122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012126:	4770      	bx	lr
 8012128:	58000800 	.word	0x58000800

0801212c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 801212c:	b480      	push	{r7}
 801212e:	b083      	sub	sp, #12
 8012130:	af00      	add	r7, sp, #0
 8012132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8012134:	4b05      	ldr	r3, [pc, #20]	@ (801214c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8012136:	6a1a      	ldr	r2, [r3, #32]
 8012138:	4904      	ldr	r1, [pc, #16]	@ (801214c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	4313      	orrs	r3, r2
 801213e:	620b      	str	r3, [r1, #32]
}
 8012140:	bf00      	nop
 8012142:	370c      	adds	r7, #12
 8012144:	46bd      	mov	sp, r7
 8012146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801214a:	4770      	bx	lr
 801214c:	58000800 	.word	0x58000800

08012150 <LL_AHB3_GRP1_EnableClock>:
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8012158:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801215c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801215e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012162:	687b      	ldr	r3, [r7, #4]
 8012164:	4313      	orrs	r3, r2
 8012166:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8012168:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801216c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	4013      	ands	r3, r2
 8012172:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012174:	68fb      	ldr	r3, [r7, #12]
}
 8012176:	bf00      	nop
 8012178:	3714      	adds	r7, #20
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012182:	b480      	push	{r7}
 8012184:	b085      	sub	sp, #20
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801218a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801218e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8012192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	4313      	orrs	r3, r2
 801219a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801219e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80121a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	4013      	ands	r3, r2
 80121aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80121ac:	68fb      	ldr	r3, [r7, #12]
}
 80121ae:	bf00      	nop
 80121b0:	3714      	adds	r7, #20
 80121b2:	46bd      	mov	sp, r7
 80121b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b8:	4770      	bx	lr

080121ba <LL_C1_IPCC_EnableIT_TXF>:
{
 80121ba:	b480      	push	{r7}
 80121bc:	b083      	sub	sp, #12
 80121be:	af00      	add	r7, sp, #0
 80121c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	601a      	str	r2, [r3, #0]
}
 80121ce:	bf00      	nop
 80121d0:	370c      	adds	r7, #12
 80121d2:	46bd      	mov	sp, r7
 80121d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d8:	4770      	bx	lr

080121da <LL_C1_IPCC_EnableIT_RXO>:
{
 80121da:	b480      	push	{r7}
 80121dc:	b083      	sub	sp, #12
 80121de:	af00      	add	r7, sp, #0
 80121e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	f043 0201 	orr.w	r2, r3, #1
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	601a      	str	r2, [r3, #0]
}
 80121ee:	bf00      	nop
 80121f0:	370c      	adds	r7, #12
 80121f2:	46bd      	mov	sp, r7
 80121f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121f8:	4770      	bx	lr

080121fa <LL_C1_IPCC_EnableTransmitChannel>:
{
 80121fa:	b480      	push	{r7}
 80121fc:	b083      	sub	sp, #12
 80121fe:	af00      	add	r7, sp, #0
 8012200:	6078      	str	r0, [r7, #4]
 8012202:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	683b      	ldr	r3, [r7, #0]
 801220a:	041b      	lsls	r3, r3, #16
 801220c:	43db      	mvns	r3, r3
 801220e:	401a      	ands	r2, r3
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	605a      	str	r2, [r3, #4]
}
 8012214:	bf00      	nop
 8012216:	370c      	adds	r7, #12
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8012220:	b480      	push	{r7}
 8012222:	b083      	sub	sp, #12
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
 8012228:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	685a      	ldr	r2, [r3, #4]
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	041b      	lsls	r3, r3, #16
 8012232:	431a      	orrs	r2, r3
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	605a      	str	r2, [r3, #4]
}
 8012238:	bf00      	nop
 801223a:	370c      	adds	r7, #12
 801223c:	46bd      	mov	sp, r7
 801223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012242:	4770      	bx	lr

08012244 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8012244:	b480      	push	{r7}
 8012246:	b083      	sub	sp, #12
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
 801224c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	685a      	ldr	r2, [r3, #4]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	43db      	mvns	r3, r3
 8012256:	401a      	ands	r2, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	605a      	str	r2, [r3, #4]
}
 801225c:	bf00      	nop
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
 8012270:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	683a      	ldr	r2, [r7, #0]
 8012276:	609a      	str	r2, [r3, #8]
}
 8012278:	bf00      	nop
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr

08012284 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012284:	b480      	push	{r7}
 8012286:	b083      	sub	sp, #12
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	041a      	lsls	r2, r3, #16
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	609a      	str	r2, [r3, #8]
}
 8012296:	bf00      	nop
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80122a2:	b480      	push	{r7}
 80122a4:	b083      	sub	sp, #12
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	6078      	str	r0, [r7, #4]
 80122aa:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	68da      	ldr	r2, [r3, #12]
 80122b0:	683b      	ldr	r3, [r7, #0]
 80122b2:	4013      	ands	r3, r2
 80122b4:	683a      	ldr	r2, [r7, #0]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d101      	bne.n	80122be <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80122ba:	2301      	movs	r3, #1
 80122bc:	e000      	b.n	80122c0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80122be:	2300      	movs	r3, #0
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	370c      	adds	r7, #12
 80122c4:	46bd      	mov	sp, r7
 80122c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ca:	4770      	bx	lr

080122cc <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80122cc:	b480      	push	{r7}
 80122ce:	b083      	sub	sp, #12
 80122d0:	af00      	add	r7, sp, #0
 80122d2:	6078      	str	r0, [r7, #4]
 80122d4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	69da      	ldr	r2, [r3, #28]
 80122da:	683b      	ldr	r3, [r7, #0]
 80122dc:	4013      	ands	r3, r2
 80122de:	683a      	ldr	r2, [r7, #0]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d101      	bne.n	80122e8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80122e4:	2301      	movs	r3, #1
 80122e6:	e000      	b.n	80122ea <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80122e8:	2300      	movs	r3, #0
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	370c      	adds	r7, #12
 80122ee:	46bd      	mov	sp, r7
 80122f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f4:	4770      	bx	lr
	...

080122f8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80122fc:	2102      	movs	r1, #2
 80122fe:	4818      	ldr	r0, [pc, #96]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 8012300:	f7ff ffe4 	bl	80122cc <LL_C2_IPCC_IsActiveFlag_CHx>
 8012304:	4603      	mov	r3, r0
 8012306:	2b00      	cmp	r3, #0
 8012308:	d008      	beq.n	801231c <HW_IPCC_Rx_Handler+0x24>
 801230a:	4b15      	ldr	r3, [pc, #84]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 801230c:	685b      	ldr	r3, [r3, #4]
 801230e:	f003 0302 	and.w	r3, r3, #2
 8012312:	2b00      	cmp	r3, #0
 8012314:	d102      	bne.n	801231c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8012316:	f000 f8d5 	bl	80124c4 <HW_IPCC_SYS_EvtHandler>
 801231a:	e01e      	b.n	801235a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 801231c:	2101      	movs	r1, #1
 801231e:	4810      	ldr	r0, [pc, #64]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 8012320:	f7ff ffd4 	bl	80122cc <LL_C2_IPCC_IsActiveFlag_CHx>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d008      	beq.n	801233c <HW_IPCC_Rx_Handler+0x44>
 801232a:	4b0d      	ldr	r3, [pc, #52]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 801232c:	685b      	ldr	r3, [r3, #4]
 801232e:	f003 0301 	and.w	r3, r3, #1
 8012332:	2b00      	cmp	r3, #0
 8012334:	d102      	bne.n	801233c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8012336:	f000 f889 	bl	801244c <HW_IPCC_BLE_EvtHandler>
 801233a:	e00e      	b.n	801235a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 801233c:	2108      	movs	r1, #8
 801233e:	4808      	ldr	r0, [pc, #32]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 8012340:	f7ff ffc4 	bl	80122cc <LL_C2_IPCC_IsActiveFlag_CHx>
 8012344:	4603      	mov	r3, r0
 8012346:	2b00      	cmp	r3, #0
 8012348:	d008      	beq.n	801235c <HW_IPCC_Rx_Handler+0x64>
 801234a:	4b05      	ldr	r3, [pc, #20]	@ (8012360 <HW_IPCC_Rx_Handler+0x68>)
 801234c:	685b      	ldr	r3, [r3, #4]
 801234e:	f003 0308 	and.w	r3, r3, #8
 8012352:	2b00      	cmp	r3, #0
 8012354:	d102      	bne.n	801235c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8012356:	f000 f901 	bl	801255c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801235a:	bf00      	nop
 801235c:	bf00      	nop
}
 801235e:	bd80      	pop	{r7, pc}
 8012360:	58000c00 	.word	0x58000c00

08012364 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012364:	b580      	push	{r7, lr}
 8012366:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8012368:	2102      	movs	r1, #2
 801236a:	4818      	ldr	r0, [pc, #96]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 801236c:	f7ff ff99 	bl	80122a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012370:	4603      	mov	r3, r0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d108      	bne.n	8012388 <HW_IPCC_Tx_Handler+0x24>
 8012376:	4b15      	ldr	r3, [pc, #84]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 8012378:	685b      	ldr	r3, [r3, #4]
 801237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012382:	f000 f893 	bl	80124ac <HW_IPCC_SYS_CmdEvtHandler>
 8012386:	e01e      	b.n	80123c6 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8012388:	2108      	movs	r1, #8
 801238a:	4810      	ldr	r0, [pc, #64]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 801238c:	f7ff ff89 	bl	80122a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012390:	4603      	mov	r3, r0
 8012392:	2b00      	cmp	r3, #0
 8012394:	d108      	bne.n	80123a8 <HW_IPCC_Tx_Handler+0x44>
 8012396:	4b0d      	ldr	r3, [pc, #52]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d102      	bne.n	80123a8 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80123a2:	f000 f8bd 	bl	8012520 <HW_IPCC_MM_FreeBufHandler>
 80123a6:	e00e      	b.n	80123c6 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80123a8:	2120      	movs	r1, #32
 80123aa:	4808      	ldr	r0, [pc, #32]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 80123ac:	f7ff ff79 	bl	80122a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d108      	bne.n	80123c8 <HW_IPCC_Tx_Handler+0x64>
 80123b6:	4b05      	ldr	r3, [pc, #20]	@ (80123cc <HW_IPCC_Tx_Handler+0x68>)
 80123b8:	685b      	ldr	r3, [r3, #4]
 80123ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d102      	bne.n	80123c8 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80123c2:	f000 f84f 	bl	8012464 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80123c6:	bf00      	nop
 80123c8:	bf00      	nop
}
 80123ca:	bd80      	pop	{r7, pc}
 80123cc:	58000c00 	.word	0x58000c00

080123d0 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80123d4:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80123d8:	f7ff fed3 	bl	8012182 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80123dc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80123e0:	f7ff fea4 	bl	801212c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80123e4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80123e8:	f7ff fe8c 	bl	8012104 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80123ec:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80123ee:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80123f0:	f7ff fe78 	bl	80120e4 <LL_PWR_EnableBootC2>

  return;
 80123f4:	bf00      	nop
}
 80123f6:	bd80      	pop	{r7, pc}

080123f8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80123fc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8012400:	f7ff fea6 	bl	8012150 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8012404:	4806      	ldr	r0, [pc, #24]	@ (8012420 <HW_IPCC_Init+0x28>)
 8012406:	f7ff fee8 	bl	80121da <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 801240a:	4805      	ldr	r0, [pc, #20]	@ (8012420 <HW_IPCC_Init+0x28>)
 801240c:	f7ff fed5 	bl	80121ba <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8012410:	202c      	movs	r0, #44	@ 0x2c
 8012412:	f7f7 fca4 	bl	8009d5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8012416:	202d      	movs	r0, #45	@ 0x2d
 8012418:	f7f7 fca1 	bl	8009d5e <HAL_NVIC_EnableIRQ>

  return;
 801241c:	bf00      	nop
}
 801241e:	bd80      	pop	{r7, pc}
 8012420:	58000c00 	.word	0x58000c00

08012424 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012428:	2101      	movs	r1, #1
 801242a:	4802      	ldr	r0, [pc, #8]	@ (8012434 <HW_IPCC_BLE_Init+0x10>)
 801242c:	f7ff ff0a 	bl	8012244 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012430:	bf00      	nop
}
 8012432:	bd80      	pop	{r7, pc}
 8012434:	58000c00 	.word	0x58000c00

08012438 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 801243c:	2101      	movs	r1, #1
 801243e:	4802      	ldr	r0, [pc, #8]	@ (8012448 <HW_IPCC_BLE_SendCmd+0x10>)
 8012440:	f7ff ff20 	bl	8012284 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8012444:	bf00      	nop
}
 8012446:	bd80      	pop	{r7, pc}
 8012448:	58000c00 	.word	0x58000c00

0801244c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 801244c:	b580      	push	{r7, lr}
 801244e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8012450:	f7fd fd5c 	bl	800ff0c <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8012454:	2101      	movs	r1, #1
 8012456:	4802      	ldr	r0, [pc, #8]	@ (8012460 <HW_IPCC_BLE_EvtHandler+0x14>)
 8012458:	f7ff ff06 	bl	8012268 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801245c:	bf00      	nop
}
 801245e:	bd80      	pop	{r7, pc}
 8012460:	58000c00 	.word	0x58000c00

08012464 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012464:	b580      	push	{r7, lr}
 8012466:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8012468:	2120      	movs	r1, #32
 801246a:	4803      	ldr	r0, [pc, #12]	@ (8012478 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 801246c:	f7ff fed8 	bl	8012220 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012470:	f7fd fd7c 	bl	800ff6c <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012474:	bf00      	nop
}
 8012476:	bd80      	pop	{r7, pc}
 8012478:	58000c00 	.word	0x58000c00

0801247c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 801247c:	b580      	push	{r7, lr}
 801247e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012480:	2102      	movs	r1, #2
 8012482:	4802      	ldr	r0, [pc, #8]	@ (801248c <HW_IPCC_SYS_Init+0x10>)
 8012484:	f7ff fede 	bl	8012244 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012488:	bf00      	nop
}
 801248a:	bd80      	pop	{r7, pc}
 801248c:	58000c00 	.word	0x58000c00

08012490 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012490:	b580      	push	{r7, lr}
 8012492:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012494:	2102      	movs	r1, #2
 8012496:	4804      	ldr	r0, [pc, #16]	@ (80124a8 <HW_IPCC_SYS_SendCmd+0x18>)
 8012498:	f7ff fef4 	bl	8012284 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 801249c:	2102      	movs	r1, #2
 801249e:	4802      	ldr	r0, [pc, #8]	@ (80124a8 <HW_IPCC_SYS_SendCmd+0x18>)
 80124a0:	f7ff feab 	bl	80121fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80124a4:	bf00      	nop
}
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	58000c00 	.word	0x58000c00

080124ac <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80124ac:	b580      	push	{r7, lr}
 80124ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80124b0:	2102      	movs	r1, #2
 80124b2:	4803      	ldr	r0, [pc, #12]	@ (80124c0 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80124b4:	f7ff feb4 	bl	8012220 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80124b8:	f7fd fda8 	bl	801000c <HW_IPCC_SYS_CmdEvtNot>

  return;
 80124bc:	bf00      	nop
}
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	58000c00 	.word	0x58000c00

080124c4 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 80124c8:	f7fd fdb6 	bl	8010038 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80124cc:	2102      	movs	r1, #2
 80124ce:	4802      	ldr	r0, [pc, #8]	@ (80124d8 <HW_IPCC_SYS_EvtHandler+0x14>)
 80124d0:	f7ff feca 	bl	8012268 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80124d4:	bf00      	nop
}
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	58000c00 	.word	0x58000c00

080124dc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b082      	sub	sp, #8
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80124e4:	2108      	movs	r1, #8
 80124e6:	480c      	ldr	r0, [pc, #48]	@ (8012518 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80124e8:	f7ff fedb 	bl	80122a2 <LL_C1_IPCC_IsActiveFlag_CHx>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d007      	beq.n	8012502 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80124f2:	4a0a      	ldr	r2, [pc, #40]	@ (801251c <HW_IPCC_MM_SendFreeBuf+0x40>)
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80124f8:	2108      	movs	r1, #8
 80124fa:	4807      	ldr	r0, [pc, #28]	@ (8012518 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80124fc:	f7ff fe7d 	bl	80121fa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8012500:	e006      	b.n	8012510 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012506:	2108      	movs	r1, #8
 8012508:	4803      	ldr	r0, [pc, #12]	@ (8012518 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801250a:	f7ff febb 	bl	8012284 <LL_C1_IPCC_SetFlag_CHx>
  return;
 801250e:	bf00      	nop
}
 8012510:	3708      	adds	r7, #8
 8012512:	46bd      	mov	sp, r7
 8012514:	bd80      	pop	{r7, pc}
 8012516:	bf00      	nop
 8012518:	58000c00 	.word	0x58000c00
 801251c:	20000bc4 	.word	0x20000bc4

08012520 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012524:	2108      	movs	r1, #8
 8012526:	4806      	ldr	r0, [pc, #24]	@ (8012540 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012528:	f7ff fe7a 	bl	8012220 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 801252c:	4b05      	ldr	r3, [pc, #20]	@ (8012544 <HW_IPCC_MM_FreeBufHandler+0x24>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8012532:	2108      	movs	r1, #8
 8012534:	4802      	ldr	r0, [pc, #8]	@ (8012540 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8012536:	f7ff fea5 	bl	8012284 <LL_C1_IPCC_SetFlag_CHx>

  return;
 801253a:	bf00      	nop
}
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	58000c00 	.word	0x58000c00
 8012544:	20000bc4 	.word	0x20000bc4

08012548 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 801254c:	2108      	movs	r1, #8
 801254e:	4802      	ldr	r0, [pc, #8]	@ (8012558 <HW_IPCC_TRACES_Init+0x10>)
 8012550:	f7ff fe78 	bl	8012244 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8012554:	bf00      	nop
}
 8012556:	bd80      	pop	{r7, pc}
 8012558:	58000c00 	.word	0x58000c00

0801255c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012560:	f7fd fe12 	bl	8010188 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012564:	2108      	movs	r1, #8
 8012566:	4802      	ldr	r0, [pc, #8]	@ (8012570 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8012568:	f7ff fe7e 	bl	8012268 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 801256c:	bf00      	nop
}
 801256e:	bd80      	pop	{r7, pc}
 8012570:	58000c00 	.word	0x58000c00

08012574 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012574:	b480      	push	{r7}
 8012576:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012578:	4b05      	ldr	r3, [pc, #20]	@ (8012590 <UTIL_LPM_Init+0x1c>)
 801257a:	2200      	movs	r2, #0
 801257c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801257e:	4b05      	ldr	r3, [pc, #20]	@ (8012594 <UTIL_LPM_Init+0x20>)
 8012580:	2200      	movs	r2, #0
 8012582:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012584:	bf00      	nop
 8012586:	46bd      	mov	sp, r7
 8012588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801258c:	4770      	bx	lr
 801258e:	bf00      	nop
 8012590:	20000bc8 	.word	0x20000bc8
 8012594:	20000bcc 	.word	0x20000bcc

08012598 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012598:	b480      	push	{r7}
 801259a:	b087      	sub	sp, #28
 801259c:	af00      	add	r7, sp, #0
 801259e:	6078      	str	r0, [r7, #4]
 80125a0:	460b      	mov	r3, r1
 80125a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125a4:	f3ef 8310 	mrs	r3, PRIMASK
 80125a8:	613b      	str	r3, [r7, #16]
  return(result);
 80125aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80125ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80125ae:	b672      	cpsid	i
}
 80125b0:	bf00      	nop
  
  switch(state)
 80125b2:	78fb      	ldrb	r3, [r7, #3]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d008      	beq.n	80125ca <UTIL_LPM_SetOffMode+0x32>
 80125b8:	2b01      	cmp	r3, #1
 80125ba:	d10e      	bne.n	80125da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80125bc:	4b0d      	ldr	r3, [pc, #52]	@ (80125f4 <UTIL_LPM_SetOffMode+0x5c>)
 80125be:	681a      	ldr	r2, [r3, #0]
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	4313      	orrs	r3, r2
 80125c4:	4a0b      	ldr	r2, [pc, #44]	@ (80125f4 <UTIL_LPM_SetOffMode+0x5c>)
 80125c6:	6013      	str	r3, [r2, #0]
      break;
 80125c8:	e008      	b.n	80125dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	43da      	mvns	r2, r3
 80125ce:	4b09      	ldr	r3, [pc, #36]	@ (80125f4 <UTIL_LPM_SetOffMode+0x5c>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	4013      	ands	r3, r2
 80125d4:	4a07      	ldr	r2, [pc, #28]	@ (80125f4 <UTIL_LPM_SetOffMode+0x5c>)
 80125d6:	6013      	str	r3, [r2, #0]
      break;
 80125d8:	e000      	b.n	80125dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80125da:	bf00      	nop
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	f383 8810 	msr	PRIMASK, r3
}
 80125e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80125e8:	bf00      	nop
 80125ea:	371c      	adds	r7, #28
 80125ec:	46bd      	mov	sp, r7
 80125ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f2:	4770      	bx	lr
 80125f4:	20000bcc 	.word	0x20000bcc

080125f8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b090      	sub	sp, #64	@ 0x40
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8012600:	4b73      	ldr	r3, [pc, #460]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8012606:	4b72      	ldr	r3, [pc, #456]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	4013      	ands	r3, r2
 801260e:	4a70      	ldr	r2, [pc, #448]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012610:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8012612:	4b70      	ldr	r3, [pc, #448]	@ (80127d4 <UTIL_SEQ_Run+0x1dc>)
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012618:	4b6f      	ldr	r3, [pc, #444]	@ (80127d8 <UTIL_SEQ_Run+0x1e0>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801261e:	4b6f      	ldr	r3, [pc, #444]	@ (80127dc <UTIL_SEQ_Run+0x1e4>)
 8012620:	681b      	ldr	r3, [r3, #0]
 8012622:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8012624:	4b6e      	ldr	r3, [pc, #440]	@ (80127e0 <UTIL_SEQ_Run+0x1e8>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801262a:	e08d      	b.n	8012748 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801262c:	2300      	movs	r3, #0
 801262e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012630:	e002      	b.n	8012638 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8012632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012634:	3301      	adds	r3, #1
 8012636:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012638:	4a6a      	ldr	r2, [pc, #424]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 801263a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801263c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012642:	401a      	ands	r2, r3
 8012644:	4b62      	ldr	r3, [pc, #392]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	4013      	ands	r3, r2
 801264a:	2b00      	cmp	r3, #0
 801264c:	d0f1      	beq.n	8012632 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801264e:	4a65      	ldr	r2, [pc, #404]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 8012650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012652:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012658:	401a      	ands	r2, r3
 801265a:	4b5d      	ldr	r3, [pc, #372]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	4013      	ands	r3, r2
 8012660:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012662:	4a60      	ldr	r2, [pc, #384]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 8012664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012666:	00db      	lsls	r3, r3, #3
 8012668:	4413      	add	r3, r2
 801266a:	685a      	ldr	r2, [r3, #4]
 801266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266e:	4013      	ands	r3, r2
 8012670:	2b00      	cmp	r3, #0
 8012672:	d106      	bne.n	8012682 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012674:	4a5b      	ldr	r2, [pc, #364]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 8012676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012678:	00db      	lsls	r3, r3, #3
 801267a:	4413      	add	r3, r2
 801267c:	f04f 32ff 	mov.w	r2, #4294967295
 8012680:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012682:	4a58      	ldr	r2, [pc, #352]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 8012684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012686:	00db      	lsls	r3, r3, #3
 8012688:	4413      	add	r3, r2
 801268a:	685a      	ldr	r2, [r3, #4]
 801268c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268e:	4013      	ands	r3, r2
 8012690:	4618      	mov	r0, r3
 8012692:	f000 f9b3 	bl	80129fc <SEQ_BitPosition>
 8012696:	4603      	mov	r3, r0
 8012698:	461a      	mov	r2, r3
 801269a:	4b53      	ldr	r3, [pc, #332]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 801269c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801269e:	4a51      	ldr	r2, [pc, #324]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 80126a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a2:	00db      	lsls	r3, r3, #3
 80126a4:	4413      	add	r3, r2
 80126a6:	685a      	ldr	r2, [r3, #4]
 80126a8:	4b4f      	ldr	r3, [pc, #316]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2101      	movs	r1, #1
 80126ae:	fa01 f303 	lsl.w	r3, r1, r3
 80126b2:	43db      	mvns	r3, r3
 80126b4:	401a      	ands	r2, r3
 80126b6:	494b      	ldr	r1, [pc, #300]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 80126b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ba:	00db      	lsls	r3, r3, #3
 80126bc:	440b      	add	r3, r1
 80126be:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126c0:	f3ef 8310 	mrs	r3, PRIMASK
 80126c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80126c6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80126c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80126ca:	b672      	cpsid	i
}
 80126cc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80126ce:	4b46      	ldr	r3, [pc, #280]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	2201      	movs	r2, #1
 80126d4:	fa02 f303 	lsl.w	r3, r2, r3
 80126d8:	43da      	mvns	r2, r3
 80126da:	4b3e      	ldr	r3, [pc, #248]	@ (80127d4 <UTIL_SEQ_Run+0x1dc>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	4013      	ands	r3, r2
 80126e0:	4a3c      	ldr	r2, [pc, #240]	@ (80127d4 <UTIL_SEQ_Run+0x1dc>)
 80126e2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80126e4:	2302      	movs	r3, #2
 80126e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e8:	e013      	b.n	8012712 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80126ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126ec:	3b01      	subs	r3, #1
 80126ee:	4a3d      	ldr	r2, [pc, #244]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 80126f0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80126f4:	4b3c      	ldr	r3, [pc, #240]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2201      	movs	r2, #1
 80126fa:	fa02 f303 	lsl.w	r3, r2, r3
 80126fe:	43da      	mvns	r2, r3
 8012700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012702:	3b01      	subs	r3, #1
 8012704:	400a      	ands	r2, r1
 8012706:	4937      	ldr	r1, [pc, #220]	@ (80127e4 <UTIL_SEQ_Run+0x1ec>)
 8012708:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801270c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801270e:	3b01      	subs	r3, #1
 8012710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012714:	2b00      	cmp	r3, #0
 8012716:	d1e8      	bne.n	80126ea <UTIL_SEQ_Run+0xf2>
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801271c:	697b      	ldr	r3, [r7, #20]
 801271e:	f383 8810 	msr	PRIMASK, r3
}
 8012722:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8012724:	4b30      	ldr	r3, [pc, #192]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	4a30      	ldr	r2, [pc, #192]	@ (80127ec <UTIL_SEQ_Run+0x1f4>)
 801272a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801272e:	4798      	blx	r3

    local_taskset = TaskSet;
 8012730:	4b28      	ldr	r3, [pc, #160]	@ (80127d4 <UTIL_SEQ_Run+0x1dc>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8012736:	4b28      	ldr	r3, [pc, #160]	@ (80127d8 <UTIL_SEQ_Run+0x1e0>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801273c:	4b27      	ldr	r3, [pc, #156]	@ (80127dc <UTIL_SEQ_Run+0x1e4>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8012742:	4b27      	ldr	r3, [pc, #156]	@ (80127e0 <UTIL_SEQ_Run+0x1e8>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012748:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801274a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801274c:	401a      	ands	r2, r3
 801274e:	4b20      	ldr	r3, [pc, #128]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	4013      	ands	r3, r2
 8012754:	2b00      	cmp	r3, #0
 8012756:	d005      	beq.n	8012764 <UTIL_SEQ_Run+0x16c>
 8012758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801275a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275c:	4013      	ands	r3, r2
 801275e:	2b00      	cmp	r3, #0
 8012760:	f43f af64 	beq.w	801262c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012764:	4b20      	ldr	r3, [pc, #128]	@ (80127e8 <UTIL_SEQ_Run+0x1f0>)
 8012766:	f04f 32ff 	mov.w	r2, #4294967295
 801276a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801276c:	f000 f938 	bl	80129e0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012770:	f3ef 8310 	mrs	r3, PRIMASK
 8012774:	613b      	str	r3, [r7, #16]
  return(result);
 8012776:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8012778:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801277a:	b672      	cpsid	i
}
 801277c:	bf00      	nop
  local_taskset = TaskSet;
 801277e:	4b15      	ldr	r3, [pc, #84]	@ (80127d4 <UTIL_SEQ_Run+0x1dc>)
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012784:	4b14      	ldr	r3, [pc, #80]	@ (80127d8 <UTIL_SEQ_Run+0x1e0>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801278a:	4b14      	ldr	r3, [pc, #80]	@ (80127dc <UTIL_SEQ_Run+0x1e4>)
 801278c:	681b      	ldr	r3, [r3, #0]
 801278e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012790:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012794:	401a      	ands	r2, r3
 8012796:	4b0e      	ldr	r3, [pc, #56]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	4013      	ands	r3, r2
 801279c:	2b00      	cmp	r3, #0
 801279e:	d107      	bne.n	80127b0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80127a0:	4b0f      	ldr	r3, [pc, #60]	@ (80127e0 <UTIL_SEQ_Run+0x1e8>)
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127a6:	4013      	ands	r3, r2
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d101      	bne.n	80127b0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80127ac:	f7ef fad3 	bl	8001d56 <UTIL_SEQ_Idle>
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f383 8810 	msr	PRIMASK, r3
}
 80127ba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80127bc:	f000 f917 	bl	80129ee <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80127c0:	4a03      	ldr	r2, [pc, #12]	@ (80127d0 <UTIL_SEQ_Run+0x1d8>)
 80127c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c4:	6013      	str	r3, [r2, #0]

  return;
 80127c6:	bf00      	nop
}
 80127c8:	3740      	adds	r7, #64	@ 0x40
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}
 80127ce:	bf00      	nop
 80127d0:	2000010c 	.word	0x2000010c
 80127d4:	20000bd0 	.word	0x20000bd0
 80127d8:	20000bd4 	.word	0x20000bd4
 80127dc:	20000108 	.word	0x20000108
 80127e0:	20000bd8 	.word	0x20000bd8
 80127e4:	20000c60 	.word	0x20000c60
 80127e8:	20000bdc 	.word	0x20000bdc
 80127ec:	20000be0 	.word	0x20000be0

080127f0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80127f0:	b580      	push	{r7, lr}
 80127f2:	b088      	sub	sp, #32
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	60f8      	str	r0, [r7, #12]
 80127f8:	60b9      	str	r1, [r7, #8]
 80127fa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127fc:	f3ef 8310 	mrs	r3, PRIMASK
 8012800:	617b      	str	r3, [r7, #20]
  return(result);
 8012802:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8012804:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012806:	b672      	cpsid	i
}
 8012808:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	f000 f8f6 	bl	80129fc <SEQ_BitPosition>
 8012810:	4603      	mov	r3, r0
 8012812:	4619      	mov	r1, r3
 8012814:	4a06      	ldr	r2, [pc, #24]	@ (8012830 <UTIL_SEQ_RegTask+0x40>)
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801281c:	69fb      	ldr	r3, [r7, #28]
 801281e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012820:	69bb      	ldr	r3, [r7, #24]
 8012822:	f383 8810 	msr	PRIMASK, r3
}
 8012826:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8012828:	bf00      	nop
}
 801282a:	3720      	adds	r7, #32
 801282c:	46bd      	mov	sp, r7
 801282e:	bd80      	pop	{r7, pc}
 8012830:	20000be0 	.word	0x20000be0

08012834 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012834:	b480      	push	{r7}
 8012836:	b087      	sub	sp, #28
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801283e:	f3ef 8310 	mrs	r3, PRIMASK
 8012842:	60fb      	str	r3, [r7, #12]
  return(result);
 8012844:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012846:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012848:	b672      	cpsid	i
}
 801284a:	bf00      	nop

  TaskSet |= TaskId_bm;
 801284c:	4b0d      	ldr	r3, [pc, #52]	@ (8012884 <UTIL_SEQ_SetTask+0x50>)
 801284e:	681a      	ldr	r2, [r3, #0]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	4313      	orrs	r3, r2
 8012854:	4a0b      	ldr	r2, [pc, #44]	@ (8012884 <UTIL_SEQ_SetTask+0x50>)
 8012856:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012858:	4a0b      	ldr	r2, [pc, #44]	@ (8012888 <UTIL_SEQ_SetTask+0x54>)
 801285a:	683b      	ldr	r3, [r7, #0]
 801285c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	431a      	orrs	r2, r3
 8012864:	4908      	ldr	r1, [pc, #32]	@ (8012888 <UTIL_SEQ_SetTask+0x54>)
 8012866:	683b      	ldr	r3, [r7, #0]
 8012868:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012870:	693b      	ldr	r3, [r7, #16]
 8012872:	f383 8810 	msr	PRIMASK, r3
}
 8012876:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012878:	bf00      	nop
}
 801287a:	371c      	adds	r7, #28
 801287c:	46bd      	mov	sp, r7
 801287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012882:	4770      	bx	lr
 8012884:	20000bd0 	.word	0x20000bd0
 8012888:	20000c60 	.word	0x20000c60

0801288c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 801288c:	b480      	push	{r7}
 801288e:	b087      	sub	sp, #28
 8012890:	af00      	add	r7, sp, #0
 8012892:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012894:	f3ef 8310 	mrs	r3, PRIMASK
 8012898:	60fb      	str	r3, [r7, #12]
  return(result);
 801289a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801289c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801289e:	b672      	cpsid	i
}
 80128a0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	43da      	mvns	r2, r3
 80128a6:	4b08      	ldr	r3, [pc, #32]	@ (80128c8 <UTIL_SEQ_PauseTask+0x3c>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	4013      	ands	r3, r2
 80128ac:	4a06      	ldr	r2, [pc, #24]	@ (80128c8 <UTIL_SEQ_PauseTask+0x3c>)
 80128ae:	6013      	str	r3, [r2, #0]
 80128b0:	697b      	ldr	r3, [r7, #20]
 80128b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	f383 8810 	msr	PRIMASK, r3
}
 80128ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128bc:	bf00      	nop
}
 80128be:	371c      	adds	r7, #28
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr
 80128c8:	20000108 	.word	0x20000108

080128cc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80128cc:	b480      	push	{r7}
 80128ce:	b087      	sub	sp, #28
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128d4:	f3ef 8310 	mrs	r3, PRIMASK
 80128d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80128da:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80128dc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128de:	b672      	cpsid	i
}
 80128e0:	bf00      	nop

  TaskMask |= TaskId_bm;
 80128e2:	4b09      	ldr	r3, [pc, #36]	@ (8012908 <UTIL_SEQ_ResumeTask+0x3c>)
 80128e4:	681a      	ldr	r2, [r3, #0]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	4313      	orrs	r3, r2
 80128ea:	4a07      	ldr	r2, [pc, #28]	@ (8012908 <UTIL_SEQ_ResumeTask+0x3c>)
 80128ec:	6013      	str	r3, [r2, #0]
 80128ee:	697b      	ldr	r3, [r7, #20]
 80128f0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128f2:	693b      	ldr	r3, [r7, #16]
 80128f4:	f383 8810 	msr	PRIMASK, r3
}
 80128f8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128fa:	bf00      	nop
}
 80128fc:	371c      	adds	r7, #28
 80128fe:	46bd      	mov	sp, r7
 8012900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012904:	4770      	bx	lr
 8012906:	bf00      	nop
 8012908:	20000108 	.word	0x20000108

0801290c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 801290c:	b480      	push	{r7}
 801290e:	b087      	sub	sp, #28
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012914:	f3ef 8310 	mrs	r3, PRIMASK
 8012918:	60fb      	str	r3, [r7, #12]
  return(result);
 801291a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801291c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801291e:	b672      	cpsid	i
}
 8012920:	bf00      	nop

  EvtSet |= EvtId_bm;
 8012922:	4b09      	ldr	r3, [pc, #36]	@ (8012948 <UTIL_SEQ_SetEvt+0x3c>)
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4313      	orrs	r3, r2
 801292a:	4a07      	ldr	r2, [pc, #28]	@ (8012948 <UTIL_SEQ_SetEvt+0x3c>)
 801292c:	6013      	str	r3, [r2, #0]
 801292e:	697b      	ldr	r3, [r7, #20]
 8012930:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012932:	693b      	ldr	r3, [r7, #16]
 8012934:	f383 8810 	msr	PRIMASK, r3
}
 8012938:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801293a:	bf00      	nop
}
 801293c:	371c      	adds	r7, #28
 801293e:	46bd      	mov	sp, r7
 8012940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012944:	4770      	bx	lr
 8012946:	bf00      	nop
 8012948:	20000bd4 	.word	0x20000bd4

0801294c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801294c:	b580      	push	{r7, lr}
 801294e:	b088      	sub	sp, #32
 8012950:	af00      	add	r7, sp, #0
 8012952:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012954:	4b1f      	ldr	r3, [pc, #124]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x88>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801295a:	4b1e      	ldr	r3, [pc, #120]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x88>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012962:	d102      	bne.n	801296a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012964:	2300      	movs	r3, #0
 8012966:	61fb      	str	r3, [r7, #28]
 8012968:	e005      	b.n	8012976 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801296a:	4b1a      	ldr	r3, [pc, #104]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x88>)
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	2201      	movs	r2, #1
 8012970:	fa02 f303 	lsl.w	r3, r2, r3
 8012974:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8012976:	4b18      	ldr	r3, [pc, #96]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x8c>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801297c:	4a16      	ldr	r2, [pc, #88]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x8c>)
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8012982:	e003      	b.n	801298c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012984:	6879      	ldr	r1, [r7, #4]
 8012986:	69f8      	ldr	r0, [r7, #28]
 8012988:	f7ef f9ec 	bl	8001d64 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801298c:	4b13      	ldr	r3, [pc, #76]	@ (80129dc <UTIL_SEQ_WaitEvt+0x90>)
 801298e:	681a      	ldr	r2, [r3, #0]
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	4013      	ands	r3, r2
 8012994:	2b00      	cmp	r3, #0
 8012996:	d0f5      	beq.n	8012984 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8012998:	4a0e      	ldr	r2, [pc, #56]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x88>)
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801299e:	f3ef 8310 	mrs	r3, PRIMASK
 80129a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80129a4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80129a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80129a8:	b672      	cpsid	i
}
 80129aa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	43da      	mvns	r2, r3
 80129b0:	4b0a      	ldr	r3, [pc, #40]	@ (80129dc <UTIL_SEQ_WaitEvt+0x90>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	4013      	ands	r3, r2
 80129b6:	4a09      	ldr	r2, [pc, #36]	@ (80129dc <UTIL_SEQ_WaitEvt+0x90>)
 80129b8:	6013      	str	r3, [r2, #0]
 80129ba:	693b      	ldr	r3, [r7, #16]
 80129bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f383 8810 	msr	PRIMASK, r3
}
 80129c4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80129c6:	4a04      	ldr	r2, [pc, #16]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x8c>)
 80129c8:	697b      	ldr	r3, [r7, #20]
 80129ca:	6013      	str	r3, [r2, #0]
  return;
 80129cc:	bf00      	nop
}
 80129ce:	3720      	adds	r7, #32
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}
 80129d4:	20000bdc 	.word	0x20000bdc
 80129d8:	20000bd8 	.word	0x20000bd8
 80129dc:	20000bd4 	.word	0x20000bd4

080129e0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80129e0:	b480      	push	{r7}
 80129e2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80129e4:	bf00      	nop
}
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr

080129ee <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80129ee:	b480      	push	{r7}
 80129f0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80129f2:	bf00      	nop
}
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr

080129fc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80129fc:	b480      	push	{r7}
 80129fe:	b085      	sub	sp, #20
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012a04:	2300      	movs	r3, #0
 8012a06:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a12:	d204      	bcs.n	8012a1e <SEQ_BitPosition+0x22>
 8012a14:	2310      	movs	r3, #16
 8012a16:	73fb      	strb	r3, [r7, #15]
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	041b      	lsls	r3, r3, #16
 8012a1c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012a24:	d205      	bcs.n	8012a32 <SEQ_BitPosition+0x36>
 8012a26:	7bfb      	ldrb	r3, [r7, #15]
 8012a28:	3308      	adds	r3, #8
 8012a2a:	73fb      	strb	r3, [r7, #15]
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	021b      	lsls	r3, r3, #8
 8012a30:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a38:	d205      	bcs.n	8012a46 <SEQ_BitPosition+0x4a>
 8012a3a:	7bfb      	ldrb	r3, [r7, #15]
 8012a3c:	3304      	adds	r3, #4
 8012a3e:	73fb      	strb	r3, [r7, #15]
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	011b      	lsls	r3, r3, #4
 8012a44:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	0f1b      	lsrs	r3, r3, #28
 8012a4a:	4a07      	ldr	r2, [pc, #28]	@ (8012a68 <SEQ_BitPosition+0x6c>)
 8012a4c:	5cd2      	ldrb	r2, [r2, r3]
 8012a4e:	7bfb      	ldrb	r3, [r7, #15]
 8012a50:	4413      	add	r3, r2
 8012a52:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8012a54:	7bfb      	ldrb	r3, [r7, #15]
 8012a56:	f1c3 031f 	rsb	r3, r3, #31
 8012a5a:	b2db      	uxtb	r3, r3
}
 8012a5c:	4618      	mov	r0, r3
 8012a5e:	3714      	adds	r7, #20
 8012a60:	46bd      	mov	sp, r7
 8012a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a66:	4770      	bx	lr
 8012a68:	08015940 	.word	0x08015940

08012a6c <std>:
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	b510      	push	{r4, lr}
 8012a70:	4604      	mov	r4, r0
 8012a72:	e9c0 3300 	strd	r3, r3, [r0]
 8012a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a7a:	6083      	str	r3, [r0, #8]
 8012a7c:	8181      	strh	r1, [r0, #12]
 8012a7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012a80:	81c2      	strh	r2, [r0, #14]
 8012a82:	6183      	str	r3, [r0, #24]
 8012a84:	4619      	mov	r1, r3
 8012a86:	2208      	movs	r2, #8
 8012a88:	305c      	adds	r0, #92	@ 0x5c
 8012a8a:	f000 fa01 	bl	8012e90 <memset>
 8012a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ac4 <std+0x58>)
 8012a90:	6263      	str	r3, [r4, #36]	@ 0x24
 8012a92:	4b0d      	ldr	r3, [pc, #52]	@ (8012ac8 <std+0x5c>)
 8012a94:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012a96:	4b0d      	ldr	r3, [pc, #52]	@ (8012acc <std+0x60>)
 8012a98:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad0 <std+0x64>)
 8012a9c:	6323      	str	r3, [r4, #48]	@ 0x30
 8012a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad4 <std+0x68>)
 8012aa0:	6224      	str	r4, [r4, #32]
 8012aa2:	429c      	cmp	r4, r3
 8012aa4:	d006      	beq.n	8012ab4 <std+0x48>
 8012aa6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012aaa:	4294      	cmp	r4, r2
 8012aac:	d002      	beq.n	8012ab4 <std+0x48>
 8012aae:	33d0      	adds	r3, #208	@ 0xd0
 8012ab0:	429c      	cmp	r4, r3
 8012ab2:	d105      	bne.n	8012ac0 <std+0x54>
 8012ab4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012abc:	f000 ba76 	b.w	8012fac <__retarget_lock_init_recursive>
 8012ac0:	bd10      	pop	{r4, pc}
 8012ac2:	bf00      	nop
 8012ac4:	08012ce1 	.word	0x08012ce1
 8012ac8:	08012d03 	.word	0x08012d03
 8012acc:	08012d3b 	.word	0x08012d3b
 8012ad0:	08012d5f 	.word	0x08012d5f
 8012ad4:	20000c70 	.word	0x20000c70

08012ad8 <stdio_exit_handler>:
 8012ad8:	4a02      	ldr	r2, [pc, #8]	@ (8012ae4 <stdio_exit_handler+0xc>)
 8012ada:	4903      	ldr	r1, [pc, #12]	@ (8012ae8 <stdio_exit_handler+0x10>)
 8012adc:	4803      	ldr	r0, [pc, #12]	@ (8012aec <stdio_exit_handler+0x14>)
 8012ade:	f000 b869 	b.w	8012bb4 <_fwalk_sglue>
 8012ae2:	bf00      	nop
 8012ae4:	20000110 	.word	0x20000110
 8012ae8:	08013869 	.word	0x08013869
 8012aec:	20000120 	.word	0x20000120

08012af0 <cleanup_stdio>:
 8012af0:	6841      	ldr	r1, [r0, #4]
 8012af2:	4b0c      	ldr	r3, [pc, #48]	@ (8012b24 <cleanup_stdio+0x34>)
 8012af4:	4299      	cmp	r1, r3
 8012af6:	b510      	push	{r4, lr}
 8012af8:	4604      	mov	r4, r0
 8012afa:	d001      	beq.n	8012b00 <cleanup_stdio+0x10>
 8012afc:	f000 feb4 	bl	8013868 <_fflush_r>
 8012b00:	68a1      	ldr	r1, [r4, #8]
 8012b02:	4b09      	ldr	r3, [pc, #36]	@ (8012b28 <cleanup_stdio+0x38>)
 8012b04:	4299      	cmp	r1, r3
 8012b06:	d002      	beq.n	8012b0e <cleanup_stdio+0x1e>
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 fead 	bl	8013868 <_fflush_r>
 8012b0e:	68e1      	ldr	r1, [r4, #12]
 8012b10:	4b06      	ldr	r3, [pc, #24]	@ (8012b2c <cleanup_stdio+0x3c>)
 8012b12:	4299      	cmp	r1, r3
 8012b14:	d004      	beq.n	8012b20 <cleanup_stdio+0x30>
 8012b16:	4620      	mov	r0, r4
 8012b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b1c:	f000 bea4 	b.w	8013868 <_fflush_r>
 8012b20:	bd10      	pop	{r4, pc}
 8012b22:	bf00      	nop
 8012b24:	20000c70 	.word	0x20000c70
 8012b28:	20000cd8 	.word	0x20000cd8
 8012b2c:	20000d40 	.word	0x20000d40

08012b30 <global_stdio_init.part.0>:
 8012b30:	b510      	push	{r4, lr}
 8012b32:	4b0b      	ldr	r3, [pc, #44]	@ (8012b60 <global_stdio_init.part.0+0x30>)
 8012b34:	4c0b      	ldr	r4, [pc, #44]	@ (8012b64 <global_stdio_init.part.0+0x34>)
 8012b36:	4a0c      	ldr	r2, [pc, #48]	@ (8012b68 <global_stdio_init.part.0+0x38>)
 8012b38:	601a      	str	r2, [r3, #0]
 8012b3a:	4620      	mov	r0, r4
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	2104      	movs	r1, #4
 8012b40:	f7ff ff94 	bl	8012a6c <std>
 8012b44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012b48:	2201      	movs	r2, #1
 8012b4a:	2109      	movs	r1, #9
 8012b4c:	f7ff ff8e 	bl	8012a6c <std>
 8012b50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012b54:	2202      	movs	r2, #2
 8012b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b5a:	2112      	movs	r1, #18
 8012b5c:	f7ff bf86 	b.w	8012a6c <std>
 8012b60:	20000da8 	.word	0x20000da8
 8012b64:	20000c70 	.word	0x20000c70
 8012b68:	08012ad9 	.word	0x08012ad9

08012b6c <__sfp_lock_acquire>:
 8012b6c:	4801      	ldr	r0, [pc, #4]	@ (8012b74 <__sfp_lock_acquire+0x8>)
 8012b6e:	f000 ba1e 	b.w	8012fae <__retarget_lock_acquire_recursive>
 8012b72:	bf00      	nop
 8012b74:	20000db1 	.word	0x20000db1

08012b78 <__sfp_lock_release>:
 8012b78:	4801      	ldr	r0, [pc, #4]	@ (8012b80 <__sfp_lock_release+0x8>)
 8012b7a:	f000 ba19 	b.w	8012fb0 <__retarget_lock_release_recursive>
 8012b7e:	bf00      	nop
 8012b80:	20000db1 	.word	0x20000db1

08012b84 <__sinit>:
 8012b84:	b510      	push	{r4, lr}
 8012b86:	4604      	mov	r4, r0
 8012b88:	f7ff fff0 	bl	8012b6c <__sfp_lock_acquire>
 8012b8c:	6a23      	ldr	r3, [r4, #32]
 8012b8e:	b11b      	cbz	r3, 8012b98 <__sinit+0x14>
 8012b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b94:	f7ff bff0 	b.w	8012b78 <__sfp_lock_release>
 8012b98:	4b04      	ldr	r3, [pc, #16]	@ (8012bac <__sinit+0x28>)
 8012b9a:	6223      	str	r3, [r4, #32]
 8012b9c:	4b04      	ldr	r3, [pc, #16]	@ (8012bb0 <__sinit+0x2c>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1f5      	bne.n	8012b90 <__sinit+0xc>
 8012ba4:	f7ff ffc4 	bl	8012b30 <global_stdio_init.part.0>
 8012ba8:	e7f2      	b.n	8012b90 <__sinit+0xc>
 8012baa:	bf00      	nop
 8012bac:	08012af1 	.word	0x08012af1
 8012bb0:	20000da8 	.word	0x20000da8

08012bb4 <_fwalk_sglue>:
 8012bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bb8:	4607      	mov	r7, r0
 8012bba:	4688      	mov	r8, r1
 8012bbc:	4614      	mov	r4, r2
 8012bbe:	2600      	movs	r6, #0
 8012bc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012bc4:	f1b9 0901 	subs.w	r9, r9, #1
 8012bc8:	d505      	bpl.n	8012bd6 <_fwalk_sglue+0x22>
 8012bca:	6824      	ldr	r4, [r4, #0]
 8012bcc:	2c00      	cmp	r4, #0
 8012bce:	d1f7      	bne.n	8012bc0 <_fwalk_sglue+0xc>
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bd6:	89ab      	ldrh	r3, [r5, #12]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d907      	bls.n	8012bec <_fwalk_sglue+0x38>
 8012bdc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012be0:	3301      	adds	r3, #1
 8012be2:	d003      	beq.n	8012bec <_fwalk_sglue+0x38>
 8012be4:	4629      	mov	r1, r5
 8012be6:	4638      	mov	r0, r7
 8012be8:	47c0      	blx	r8
 8012bea:	4306      	orrs	r6, r0
 8012bec:	3568      	adds	r5, #104	@ 0x68
 8012bee:	e7e9      	b.n	8012bc4 <_fwalk_sglue+0x10>

08012bf0 <iprintf>:
 8012bf0:	b40f      	push	{r0, r1, r2, r3}
 8012bf2:	b507      	push	{r0, r1, r2, lr}
 8012bf4:	4906      	ldr	r1, [pc, #24]	@ (8012c10 <iprintf+0x20>)
 8012bf6:	ab04      	add	r3, sp, #16
 8012bf8:	6808      	ldr	r0, [r1, #0]
 8012bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8012bfe:	6881      	ldr	r1, [r0, #8]
 8012c00:	9301      	str	r3, [sp, #4]
 8012c02:	f000 fb07 	bl	8013214 <_vfiprintf_r>
 8012c06:	b003      	add	sp, #12
 8012c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8012c0c:	b004      	add	sp, #16
 8012c0e:	4770      	bx	lr
 8012c10:	2000011c 	.word	0x2000011c

08012c14 <putchar>:
 8012c14:	4b02      	ldr	r3, [pc, #8]	@ (8012c20 <putchar+0xc>)
 8012c16:	4601      	mov	r1, r0
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	6882      	ldr	r2, [r0, #8]
 8012c1c:	f000 beae 	b.w	801397c <_putc_r>
 8012c20:	2000011c 	.word	0x2000011c

08012c24 <_puts_r>:
 8012c24:	6a03      	ldr	r3, [r0, #32]
 8012c26:	b570      	push	{r4, r5, r6, lr}
 8012c28:	6884      	ldr	r4, [r0, #8]
 8012c2a:	4605      	mov	r5, r0
 8012c2c:	460e      	mov	r6, r1
 8012c2e:	b90b      	cbnz	r3, 8012c34 <_puts_r+0x10>
 8012c30:	f7ff ffa8 	bl	8012b84 <__sinit>
 8012c34:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c36:	07db      	lsls	r3, r3, #31
 8012c38:	d405      	bmi.n	8012c46 <_puts_r+0x22>
 8012c3a:	89a3      	ldrh	r3, [r4, #12]
 8012c3c:	0598      	lsls	r0, r3, #22
 8012c3e:	d402      	bmi.n	8012c46 <_puts_r+0x22>
 8012c40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c42:	f000 f9b4 	bl	8012fae <__retarget_lock_acquire_recursive>
 8012c46:	89a3      	ldrh	r3, [r4, #12]
 8012c48:	0719      	lsls	r1, r3, #28
 8012c4a:	d502      	bpl.n	8012c52 <_puts_r+0x2e>
 8012c4c:	6923      	ldr	r3, [r4, #16]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d135      	bne.n	8012cbe <_puts_r+0x9a>
 8012c52:	4621      	mov	r1, r4
 8012c54:	4628      	mov	r0, r5
 8012c56:	f000 f8c5 	bl	8012de4 <__swsetup_r>
 8012c5a:	b380      	cbz	r0, 8012cbe <_puts_r+0x9a>
 8012c5c:	f04f 35ff 	mov.w	r5, #4294967295
 8012c60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c62:	07da      	lsls	r2, r3, #31
 8012c64:	d405      	bmi.n	8012c72 <_puts_r+0x4e>
 8012c66:	89a3      	ldrh	r3, [r4, #12]
 8012c68:	059b      	lsls	r3, r3, #22
 8012c6a:	d402      	bmi.n	8012c72 <_puts_r+0x4e>
 8012c6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c6e:	f000 f99f 	bl	8012fb0 <__retarget_lock_release_recursive>
 8012c72:	4628      	mov	r0, r5
 8012c74:	bd70      	pop	{r4, r5, r6, pc}
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	da04      	bge.n	8012c84 <_puts_r+0x60>
 8012c7a:	69a2      	ldr	r2, [r4, #24]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	dc17      	bgt.n	8012cb0 <_puts_r+0x8c>
 8012c80:	290a      	cmp	r1, #10
 8012c82:	d015      	beq.n	8012cb0 <_puts_r+0x8c>
 8012c84:	6823      	ldr	r3, [r4, #0]
 8012c86:	1c5a      	adds	r2, r3, #1
 8012c88:	6022      	str	r2, [r4, #0]
 8012c8a:	7019      	strb	r1, [r3, #0]
 8012c8c:	68a3      	ldr	r3, [r4, #8]
 8012c8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012c92:	3b01      	subs	r3, #1
 8012c94:	60a3      	str	r3, [r4, #8]
 8012c96:	2900      	cmp	r1, #0
 8012c98:	d1ed      	bne.n	8012c76 <_puts_r+0x52>
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	da11      	bge.n	8012cc2 <_puts_r+0x9e>
 8012c9e:	4622      	mov	r2, r4
 8012ca0:	210a      	movs	r1, #10
 8012ca2:	4628      	mov	r0, r5
 8012ca4:	f000 f85f 	bl	8012d66 <__swbuf_r>
 8012ca8:	3001      	adds	r0, #1
 8012caa:	d0d7      	beq.n	8012c5c <_puts_r+0x38>
 8012cac:	250a      	movs	r5, #10
 8012cae:	e7d7      	b.n	8012c60 <_puts_r+0x3c>
 8012cb0:	4622      	mov	r2, r4
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	f000 f857 	bl	8012d66 <__swbuf_r>
 8012cb8:	3001      	adds	r0, #1
 8012cba:	d1e7      	bne.n	8012c8c <_puts_r+0x68>
 8012cbc:	e7ce      	b.n	8012c5c <_puts_r+0x38>
 8012cbe:	3e01      	subs	r6, #1
 8012cc0:	e7e4      	b.n	8012c8c <_puts_r+0x68>
 8012cc2:	6823      	ldr	r3, [r4, #0]
 8012cc4:	1c5a      	adds	r2, r3, #1
 8012cc6:	6022      	str	r2, [r4, #0]
 8012cc8:	220a      	movs	r2, #10
 8012cca:	701a      	strb	r2, [r3, #0]
 8012ccc:	e7ee      	b.n	8012cac <_puts_r+0x88>
	...

08012cd0 <puts>:
 8012cd0:	4b02      	ldr	r3, [pc, #8]	@ (8012cdc <puts+0xc>)
 8012cd2:	4601      	mov	r1, r0
 8012cd4:	6818      	ldr	r0, [r3, #0]
 8012cd6:	f7ff bfa5 	b.w	8012c24 <_puts_r>
 8012cda:	bf00      	nop
 8012cdc:	2000011c 	.word	0x2000011c

08012ce0 <__sread>:
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	460c      	mov	r4, r1
 8012ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ce8:	f000 f912 	bl	8012f10 <_read_r>
 8012cec:	2800      	cmp	r0, #0
 8012cee:	bfab      	itete	ge
 8012cf0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8012cf4:	181b      	addge	r3, r3, r0
 8012cf6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012cfa:	bfac      	ite	ge
 8012cfc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012cfe:	81a3      	strhlt	r3, [r4, #12]
 8012d00:	bd10      	pop	{r4, pc}

08012d02 <__swrite>:
 8012d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d06:	461f      	mov	r7, r3
 8012d08:	898b      	ldrh	r3, [r1, #12]
 8012d0a:	05db      	lsls	r3, r3, #23
 8012d0c:	4605      	mov	r5, r0
 8012d0e:	460c      	mov	r4, r1
 8012d10:	4616      	mov	r6, r2
 8012d12:	d505      	bpl.n	8012d20 <__swrite+0x1e>
 8012d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d18:	2302      	movs	r3, #2
 8012d1a:	2200      	movs	r2, #0
 8012d1c:	f000 f8e6 	bl	8012eec <_lseek_r>
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012d2a:	81a3      	strh	r3, [r4, #12]
 8012d2c:	4632      	mov	r2, r6
 8012d2e:	463b      	mov	r3, r7
 8012d30:	4628      	mov	r0, r5
 8012d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d36:	f000 b8fd 	b.w	8012f34 <_write_r>

08012d3a <__sseek>:
 8012d3a:	b510      	push	{r4, lr}
 8012d3c:	460c      	mov	r4, r1
 8012d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d42:	f000 f8d3 	bl	8012eec <_lseek_r>
 8012d46:	1c43      	adds	r3, r0, #1
 8012d48:	89a3      	ldrh	r3, [r4, #12]
 8012d4a:	bf15      	itete	ne
 8012d4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012d4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012d52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012d56:	81a3      	strheq	r3, [r4, #12]
 8012d58:	bf18      	it	ne
 8012d5a:	81a3      	strhne	r3, [r4, #12]
 8012d5c:	bd10      	pop	{r4, pc}

08012d5e <__sclose>:
 8012d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d62:	f000 b8b3 	b.w	8012ecc <_close_r>

08012d66 <__swbuf_r>:
 8012d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d68:	460e      	mov	r6, r1
 8012d6a:	4614      	mov	r4, r2
 8012d6c:	4605      	mov	r5, r0
 8012d6e:	b118      	cbz	r0, 8012d78 <__swbuf_r+0x12>
 8012d70:	6a03      	ldr	r3, [r0, #32]
 8012d72:	b90b      	cbnz	r3, 8012d78 <__swbuf_r+0x12>
 8012d74:	f7ff ff06 	bl	8012b84 <__sinit>
 8012d78:	69a3      	ldr	r3, [r4, #24]
 8012d7a:	60a3      	str	r3, [r4, #8]
 8012d7c:	89a3      	ldrh	r3, [r4, #12]
 8012d7e:	071a      	lsls	r2, r3, #28
 8012d80:	d501      	bpl.n	8012d86 <__swbuf_r+0x20>
 8012d82:	6923      	ldr	r3, [r4, #16]
 8012d84:	b943      	cbnz	r3, 8012d98 <__swbuf_r+0x32>
 8012d86:	4621      	mov	r1, r4
 8012d88:	4628      	mov	r0, r5
 8012d8a:	f000 f82b 	bl	8012de4 <__swsetup_r>
 8012d8e:	b118      	cbz	r0, 8012d98 <__swbuf_r+0x32>
 8012d90:	f04f 37ff 	mov.w	r7, #4294967295
 8012d94:	4638      	mov	r0, r7
 8012d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d98:	6823      	ldr	r3, [r4, #0]
 8012d9a:	6922      	ldr	r2, [r4, #16]
 8012d9c:	1a98      	subs	r0, r3, r2
 8012d9e:	6963      	ldr	r3, [r4, #20]
 8012da0:	b2f6      	uxtb	r6, r6
 8012da2:	4283      	cmp	r3, r0
 8012da4:	4637      	mov	r7, r6
 8012da6:	dc05      	bgt.n	8012db4 <__swbuf_r+0x4e>
 8012da8:	4621      	mov	r1, r4
 8012daa:	4628      	mov	r0, r5
 8012dac:	f000 fd5c 	bl	8013868 <_fflush_r>
 8012db0:	2800      	cmp	r0, #0
 8012db2:	d1ed      	bne.n	8012d90 <__swbuf_r+0x2a>
 8012db4:	68a3      	ldr	r3, [r4, #8]
 8012db6:	3b01      	subs	r3, #1
 8012db8:	60a3      	str	r3, [r4, #8]
 8012dba:	6823      	ldr	r3, [r4, #0]
 8012dbc:	1c5a      	adds	r2, r3, #1
 8012dbe:	6022      	str	r2, [r4, #0]
 8012dc0:	701e      	strb	r6, [r3, #0]
 8012dc2:	6962      	ldr	r2, [r4, #20]
 8012dc4:	1c43      	adds	r3, r0, #1
 8012dc6:	429a      	cmp	r2, r3
 8012dc8:	d004      	beq.n	8012dd4 <__swbuf_r+0x6e>
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	07db      	lsls	r3, r3, #31
 8012dce:	d5e1      	bpl.n	8012d94 <__swbuf_r+0x2e>
 8012dd0:	2e0a      	cmp	r6, #10
 8012dd2:	d1df      	bne.n	8012d94 <__swbuf_r+0x2e>
 8012dd4:	4621      	mov	r1, r4
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f000 fd46 	bl	8013868 <_fflush_r>
 8012ddc:	2800      	cmp	r0, #0
 8012dde:	d0d9      	beq.n	8012d94 <__swbuf_r+0x2e>
 8012de0:	e7d6      	b.n	8012d90 <__swbuf_r+0x2a>
	...

08012de4 <__swsetup_r>:
 8012de4:	b538      	push	{r3, r4, r5, lr}
 8012de6:	4b29      	ldr	r3, [pc, #164]	@ (8012e8c <__swsetup_r+0xa8>)
 8012de8:	4605      	mov	r5, r0
 8012dea:	6818      	ldr	r0, [r3, #0]
 8012dec:	460c      	mov	r4, r1
 8012dee:	b118      	cbz	r0, 8012df8 <__swsetup_r+0x14>
 8012df0:	6a03      	ldr	r3, [r0, #32]
 8012df2:	b90b      	cbnz	r3, 8012df8 <__swsetup_r+0x14>
 8012df4:	f7ff fec6 	bl	8012b84 <__sinit>
 8012df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012dfc:	0719      	lsls	r1, r3, #28
 8012dfe:	d422      	bmi.n	8012e46 <__swsetup_r+0x62>
 8012e00:	06da      	lsls	r2, r3, #27
 8012e02:	d407      	bmi.n	8012e14 <__swsetup_r+0x30>
 8012e04:	2209      	movs	r2, #9
 8012e06:	602a      	str	r2, [r5, #0]
 8012e08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e0c:	81a3      	strh	r3, [r4, #12]
 8012e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e12:	e033      	b.n	8012e7c <__swsetup_r+0x98>
 8012e14:	0758      	lsls	r0, r3, #29
 8012e16:	d512      	bpl.n	8012e3e <__swsetup_r+0x5a>
 8012e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012e1a:	b141      	cbz	r1, 8012e2e <__swsetup_r+0x4a>
 8012e1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012e20:	4299      	cmp	r1, r3
 8012e22:	d002      	beq.n	8012e2a <__swsetup_r+0x46>
 8012e24:	4628      	mov	r0, r5
 8012e26:	f000 f8d3 	bl	8012fd0 <_free_r>
 8012e2a:	2300      	movs	r3, #0
 8012e2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8012e2e:	89a3      	ldrh	r3, [r4, #12]
 8012e30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012e34:	81a3      	strh	r3, [r4, #12]
 8012e36:	2300      	movs	r3, #0
 8012e38:	6063      	str	r3, [r4, #4]
 8012e3a:	6923      	ldr	r3, [r4, #16]
 8012e3c:	6023      	str	r3, [r4, #0]
 8012e3e:	89a3      	ldrh	r3, [r4, #12]
 8012e40:	f043 0308 	orr.w	r3, r3, #8
 8012e44:	81a3      	strh	r3, [r4, #12]
 8012e46:	6923      	ldr	r3, [r4, #16]
 8012e48:	b94b      	cbnz	r3, 8012e5e <__swsetup_r+0x7a>
 8012e4a:	89a3      	ldrh	r3, [r4, #12]
 8012e4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012e50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012e54:	d003      	beq.n	8012e5e <__swsetup_r+0x7a>
 8012e56:	4621      	mov	r1, r4
 8012e58:	4628      	mov	r0, r5
 8012e5a:	f000 fd53 	bl	8013904 <__smakebuf_r>
 8012e5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e62:	f013 0201 	ands.w	r2, r3, #1
 8012e66:	d00a      	beq.n	8012e7e <__swsetup_r+0x9a>
 8012e68:	2200      	movs	r2, #0
 8012e6a:	60a2      	str	r2, [r4, #8]
 8012e6c:	6962      	ldr	r2, [r4, #20]
 8012e6e:	4252      	negs	r2, r2
 8012e70:	61a2      	str	r2, [r4, #24]
 8012e72:	6922      	ldr	r2, [r4, #16]
 8012e74:	b942      	cbnz	r2, 8012e88 <__swsetup_r+0xa4>
 8012e76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012e7a:	d1c5      	bne.n	8012e08 <__swsetup_r+0x24>
 8012e7c:	bd38      	pop	{r3, r4, r5, pc}
 8012e7e:	0799      	lsls	r1, r3, #30
 8012e80:	bf58      	it	pl
 8012e82:	6962      	ldrpl	r2, [r4, #20]
 8012e84:	60a2      	str	r2, [r4, #8]
 8012e86:	e7f4      	b.n	8012e72 <__swsetup_r+0x8e>
 8012e88:	2000      	movs	r0, #0
 8012e8a:	e7f7      	b.n	8012e7c <__swsetup_r+0x98>
 8012e8c:	2000011c 	.word	0x2000011c

08012e90 <memset>:
 8012e90:	4402      	add	r2, r0
 8012e92:	4603      	mov	r3, r0
 8012e94:	4293      	cmp	r3, r2
 8012e96:	d100      	bne.n	8012e9a <memset+0xa>
 8012e98:	4770      	bx	lr
 8012e9a:	f803 1b01 	strb.w	r1, [r3], #1
 8012e9e:	e7f9      	b.n	8012e94 <memset+0x4>

08012ea0 <strrchr>:
 8012ea0:	b538      	push	{r3, r4, r5, lr}
 8012ea2:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	d10e      	bne.n	8012ec8 <strrchr+0x28>
 8012eaa:	4621      	mov	r1, r4
 8012eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eb0:	f000 bd98 	b.w	80139e4 <strchr>
 8012eb4:	1c43      	adds	r3, r0, #1
 8012eb6:	4605      	mov	r5, r0
 8012eb8:	4621      	mov	r1, r4
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f000 fd92 	bl	80139e4 <strchr>
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	d1f7      	bne.n	8012eb4 <strrchr+0x14>
 8012ec4:	4628      	mov	r0, r5
 8012ec6:	bd38      	pop	{r3, r4, r5, pc}
 8012ec8:	2500      	movs	r5, #0
 8012eca:	e7f5      	b.n	8012eb8 <strrchr+0x18>

08012ecc <_close_r>:
 8012ecc:	b538      	push	{r3, r4, r5, lr}
 8012ece:	4d06      	ldr	r5, [pc, #24]	@ (8012ee8 <_close_r+0x1c>)
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	4604      	mov	r4, r0
 8012ed4:	4608      	mov	r0, r1
 8012ed6:	602b      	str	r3, [r5, #0]
 8012ed8:	f7f0 fc43 	bl	8003762 <_close>
 8012edc:	1c43      	adds	r3, r0, #1
 8012ede:	d102      	bne.n	8012ee6 <_close_r+0x1a>
 8012ee0:	682b      	ldr	r3, [r5, #0]
 8012ee2:	b103      	cbz	r3, 8012ee6 <_close_r+0x1a>
 8012ee4:	6023      	str	r3, [r4, #0]
 8012ee6:	bd38      	pop	{r3, r4, r5, pc}
 8012ee8:	20000dac 	.word	0x20000dac

08012eec <_lseek_r>:
 8012eec:	b538      	push	{r3, r4, r5, lr}
 8012eee:	4d07      	ldr	r5, [pc, #28]	@ (8012f0c <_lseek_r+0x20>)
 8012ef0:	4604      	mov	r4, r0
 8012ef2:	4608      	mov	r0, r1
 8012ef4:	4611      	mov	r1, r2
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	602a      	str	r2, [r5, #0]
 8012efa:	461a      	mov	r2, r3
 8012efc:	f7f0 fc58 	bl	80037b0 <_lseek>
 8012f00:	1c43      	adds	r3, r0, #1
 8012f02:	d102      	bne.n	8012f0a <_lseek_r+0x1e>
 8012f04:	682b      	ldr	r3, [r5, #0]
 8012f06:	b103      	cbz	r3, 8012f0a <_lseek_r+0x1e>
 8012f08:	6023      	str	r3, [r4, #0]
 8012f0a:	bd38      	pop	{r3, r4, r5, pc}
 8012f0c:	20000dac 	.word	0x20000dac

08012f10 <_read_r>:
 8012f10:	b538      	push	{r3, r4, r5, lr}
 8012f12:	4d07      	ldr	r5, [pc, #28]	@ (8012f30 <_read_r+0x20>)
 8012f14:	4604      	mov	r4, r0
 8012f16:	4608      	mov	r0, r1
 8012f18:	4611      	mov	r1, r2
 8012f1a:	2200      	movs	r2, #0
 8012f1c:	602a      	str	r2, [r5, #0]
 8012f1e:	461a      	mov	r2, r3
 8012f20:	f7f0 fc02 	bl	8003728 <_read>
 8012f24:	1c43      	adds	r3, r0, #1
 8012f26:	d102      	bne.n	8012f2e <_read_r+0x1e>
 8012f28:	682b      	ldr	r3, [r5, #0]
 8012f2a:	b103      	cbz	r3, 8012f2e <_read_r+0x1e>
 8012f2c:	6023      	str	r3, [r4, #0]
 8012f2e:	bd38      	pop	{r3, r4, r5, pc}
 8012f30:	20000dac 	.word	0x20000dac

08012f34 <_write_r>:
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	4d07      	ldr	r5, [pc, #28]	@ (8012f54 <_write_r+0x20>)
 8012f38:	4604      	mov	r4, r0
 8012f3a:	4608      	mov	r0, r1
 8012f3c:	4611      	mov	r1, r2
 8012f3e:	2200      	movs	r2, #0
 8012f40:	602a      	str	r2, [r5, #0]
 8012f42:	461a      	mov	r2, r3
 8012f44:	f7ed fea9 	bl	8000c9a <_write>
 8012f48:	1c43      	adds	r3, r0, #1
 8012f4a:	d102      	bne.n	8012f52 <_write_r+0x1e>
 8012f4c:	682b      	ldr	r3, [r5, #0]
 8012f4e:	b103      	cbz	r3, 8012f52 <_write_r+0x1e>
 8012f50:	6023      	str	r3, [r4, #0]
 8012f52:	bd38      	pop	{r3, r4, r5, pc}
 8012f54:	20000dac 	.word	0x20000dac

08012f58 <__errno>:
 8012f58:	4b01      	ldr	r3, [pc, #4]	@ (8012f60 <__errno+0x8>)
 8012f5a:	6818      	ldr	r0, [r3, #0]
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop
 8012f60:	2000011c 	.word	0x2000011c

08012f64 <__libc_init_array>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	4d0d      	ldr	r5, [pc, #52]	@ (8012f9c <__libc_init_array+0x38>)
 8012f68:	4c0d      	ldr	r4, [pc, #52]	@ (8012fa0 <__libc_init_array+0x3c>)
 8012f6a:	1b64      	subs	r4, r4, r5
 8012f6c:	10a4      	asrs	r4, r4, #2
 8012f6e:	2600      	movs	r6, #0
 8012f70:	42a6      	cmp	r6, r4
 8012f72:	d109      	bne.n	8012f88 <__libc_init_array+0x24>
 8012f74:	4d0b      	ldr	r5, [pc, #44]	@ (8012fa4 <__libc_init_array+0x40>)
 8012f76:	4c0c      	ldr	r4, [pc, #48]	@ (8012fa8 <__libc_init_array+0x44>)
 8012f78:	f000 fdf2 	bl	8013b60 <_init>
 8012f7c:	1b64      	subs	r4, r4, r5
 8012f7e:	10a4      	asrs	r4, r4, #2
 8012f80:	2600      	movs	r6, #0
 8012f82:	42a6      	cmp	r6, r4
 8012f84:	d105      	bne.n	8012f92 <__libc_init_array+0x2e>
 8012f86:	bd70      	pop	{r4, r5, r6, pc}
 8012f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f8c:	4798      	blx	r3
 8012f8e:	3601      	adds	r6, #1
 8012f90:	e7ee      	b.n	8012f70 <__libc_init_array+0xc>
 8012f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f96:	4798      	blx	r3
 8012f98:	3601      	adds	r6, #1
 8012f9a:	e7f2      	b.n	8012f82 <__libc_init_array+0x1e>
 8012f9c:	0801598c 	.word	0x0801598c
 8012fa0:	0801598c 	.word	0x0801598c
 8012fa4:	0801598c 	.word	0x0801598c
 8012fa8:	08015990 	.word	0x08015990

08012fac <__retarget_lock_init_recursive>:
 8012fac:	4770      	bx	lr

08012fae <__retarget_lock_acquire_recursive>:
 8012fae:	4770      	bx	lr

08012fb0 <__retarget_lock_release_recursive>:
 8012fb0:	4770      	bx	lr

08012fb2 <memcpy>:
 8012fb2:	440a      	add	r2, r1
 8012fb4:	4291      	cmp	r1, r2
 8012fb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8012fba:	d100      	bne.n	8012fbe <memcpy+0xc>
 8012fbc:	4770      	bx	lr
 8012fbe:	b510      	push	{r4, lr}
 8012fc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fc8:	4291      	cmp	r1, r2
 8012fca:	d1f9      	bne.n	8012fc0 <memcpy+0xe>
 8012fcc:	bd10      	pop	{r4, pc}
	...

08012fd0 <_free_r>:
 8012fd0:	b538      	push	{r3, r4, r5, lr}
 8012fd2:	4605      	mov	r5, r0
 8012fd4:	2900      	cmp	r1, #0
 8012fd6:	d041      	beq.n	801305c <_free_r+0x8c>
 8012fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012fdc:	1f0c      	subs	r4, r1, #4
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	bfb8      	it	lt
 8012fe2:	18e4      	addlt	r4, r4, r3
 8012fe4:	f000 f8e0 	bl	80131a8 <__malloc_lock>
 8012fe8:	4a1d      	ldr	r2, [pc, #116]	@ (8013060 <_free_r+0x90>)
 8012fea:	6813      	ldr	r3, [r2, #0]
 8012fec:	b933      	cbnz	r3, 8012ffc <_free_r+0x2c>
 8012fee:	6063      	str	r3, [r4, #4]
 8012ff0:	6014      	str	r4, [r2, #0]
 8012ff2:	4628      	mov	r0, r5
 8012ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ff8:	f000 b8dc 	b.w	80131b4 <__malloc_unlock>
 8012ffc:	42a3      	cmp	r3, r4
 8012ffe:	d908      	bls.n	8013012 <_free_r+0x42>
 8013000:	6820      	ldr	r0, [r4, #0]
 8013002:	1821      	adds	r1, r4, r0
 8013004:	428b      	cmp	r3, r1
 8013006:	bf01      	itttt	eq
 8013008:	6819      	ldreq	r1, [r3, #0]
 801300a:	685b      	ldreq	r3, [r3, #4]
 801300c:	1809      	addeq	r1, r1, r0
 801300e:	6021      	streq	r1, [r4, #0]
 8013010:	e7ed      	b.n	8012fee <_free_r+0x1e>
 8013012:	461a      	mov	r2, r3
 8013014:	685b      	ldr	r3, [r3, #4]
 8013016:	b10b      	cbz	r3, 801301c <_free_r+0x4c>
 8013018:	42a3      	cmp	r3, r4
 801301a:	d9fa      	bls.n	8013012 <_free_r+0x42>
 801301c:	6811      	ldr	r1, [r2, #0]
 801301e:	1850      	adds	r0, r2, r1
 8013020:	42a0      	cmp	r0, r4
 8013022:	d10b      	bne.n	801303c <_free_r+0x6c>
 8013024:	6820      	ldr	r0, [r4, #0]
 8013026:	4401      	add	r1, r0
 8013028:	1850      	adds	r0, r2, r1
 801302a:	4283      	cmp	r3, r0
 801302c:	6011      	str	r1, [r2, #0]
 801302e:	d1e0      	bne.n	8012ff2 <_free_r+0x22>
 8013030:	6818      	ldr	r0, [r3, #0]
 8013032:	685b      	ldr	r3, [r3, #4]
 8013034:	6053      	str	r3, [r2, #4]
 8013036:	4408      	add	r0, r1
 8013038:	6010      	str	r0, [r2, #0]
 801303a:	e7da      	b.n	8012ff2 <_free_r+0x22>
 801303c:	d902      	bls.n	8013044 <_free_r+0x74>
 801303e:	230c      	movs	r3, #12
 8013040:	602b      	str	r3, [r5, #0]
 8013042:	e7d6      	b.n	8012ff2 <_free_r+0x22>
 8013044:	6820      	ldr	r0, [r4, #0]
 8013046:	1821      	adds	r1, r4, r0
 8013048:	428b      	cmp	r3, r1
 801304a:	bf04      	itt	eq
 801304c:	6819      	ldreq	r1, [r3, #0]
 801304e:	685b      	ldreq	r3, [r3, #4]
 8013050:	6063      	str	r3, [r4, #4]
 8013052:	bf04      	itt	eq
 8013054:	1809      	addeq	r1, r1, r0
 8013056:	6021      	streq	r1, [r4, #0]
 8013058:	6054      	str	r4, [r2, #4]
 801305a:	e7ca      	b.n	8012ff2 <_free_r+0x22>
 801305c:	bd38      	pop	{r3, r4, r5, pc}
 801305e:	bf00      	nop
 8013060:	20000db8 	.word	0x20000db8

08013064 <sbrk_aligned>:
 8013064:	b570      	push	{r4, r5, r6, lr}
 8013066:	4e0f      	ldr	r6, [pc, #60]	@ (80130a4 <sbrk_aligned+0x40>)
 8013068:	460c      	mov	r4, r1
 801306a:	6831      	ldr	r1, [r6, #0]
 801306c:	4605      	mov	r5, r0
 801306e:	b911      	cbnz	r1, 8013076 <sbrk_aligned+0x12>
 8013070:	f000 fce8 	bl	8013a44 <_sbrk_r>
 8013074:	6030      	str	r0, [r6, #0]
 8013076:	4621      	mov	r1, r4
 8013078:	4628      	mov	r0, r5
 801307a:	f000 fce3 	bl	8013a44 <_sbrk_r>
 801307e:	1c43      	adds	r3, r0, #1
 8013080:	d103      	bne.n	801308a <sbrk_aligned+0x26>
 8013082:	f04f 34ff 	mov.w	r4, #4294967295
 8013086:	4620      	mov	r0, r4
 8013088:	bd70      	pop	{r4, r5, r6, pc}
 801308a:	1cc4      	adds	r4, r0, #3
 801308c:	f024 0403 	bic.w	r4, r4, #3
 8013090:	42a0      	cmp	r0, r4
 8013092:	d0f8      	beq.n	8013086 <sbrk_aligned+0x22>
 8013094:	1a21      	subs	r1, r4, r0
 8013096:	4628      	mov	r0, r5
 8013098:	f000 fcd4 	bl	8013a44 <_sbrk_r>
 801309c:	3001      	adds	r0, #1
 801309e:	d1f2      	bne.n	8013086 <sbrk_aligned+0x22>
 80130a0:	e7ef      	b.n	8013082 <sbrk_aligned+0x1e>
 80130a2:	bf00      	nop
 80130a4:	20000db4 	.word	0x20000db4

080130a8 <_malloc_r>:
 80130a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130ac:	1ccd      	adds	r5, r1, #3
 80130ae:	f025 0503 	bic.w	r5, r5, #3
 80130b2:	3508      	adds	r5, #8
 80130b4:	2d0c      	cmp	r5, #12
 80130b6:	bf38      	it	cc
 80130b8:	250c      	movcc	r5, #12
 80130ba:	2d00      	cmp	r5, #0
 80130bc:	4606      	mov	r6, r0
 80130be:	db01      	blt.n	80130c4 <_malloc_r+0x1c>
 80130c0:	42a9      	cmp	r1, r5
 80130c2:	d904      	bls.n	80130ce <_malloc_r+0x26>
 80130c4:	230c      	movs	r3, #12
 80130c6:	6033      	str	r3, [r6, #0]
 80130c8:	2000      	movs	r0, #0
 80130ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80131a4 <_malloc_r+0xfc>
 80130d2:	f000 f869 	bl	80131a8 <__malloc_lock>
 80130d6:	f8d8 3000 	ldr.w	r3, [r8]
 80130da:	461c      	mov	r4, r3
 80130dc:	bb44      	cbnz	r4, 8013130 <_malloc_r+0x88>
 80130de:	4629      	mov	r1, r5
 80130e0:	4630      	mov	r0, r6
 80130e2:	f7ff ffbf 	bl	8013064 <sbrk_aligned>
 80130e6:	1c43      	adds	r3, r0, #1
 80130e8:	4604      	mov	r4, r0
 80130ea:	d158      	bne.n	801319e <_malloc_r+0xf6>
 80130ec:	f8d8 4000 	ldr.w	r4, [r8]
 80130f0:	4627      	mov	r7, r4
 80130f2:	2f00      	cmp	r7, #0
 80130f4:	d143      	bne.n	801317e <_malloc_r+0xd6>
 80130f6:	2c00      	cmp	r4, #0
 80130f8:	d04b      	beq.n	8013192 <_malloc_r+0xea>
 80130fa:	6823      	ldr	r3, [r4, #0]
 80130fc:	4639      	mov	r1, r7
 80130fe:	4630      	mov	r0, r6
 8013100:	eb04 0903 	add.w	r9, r4, r3
 8013104:	f000 fc9e 	bl	8013a44 <_sbrk_r>
 8013108:	4581      	cmp	r9, r0
 801310a:	d142      	bne.n	8013192 <_malloc_r+0xea>
 801310c:	6821      	ldr	r1, [r4, #0]
 801310e:	1a6d      	subs	r5, r5, r1
 8013110:	4629      	mov	r1, r5
 8013112:	4630      	mov	r0, r6
 8013114:	f7ff ffa6 	bl	8013064 <sbrk_aligned>
 8013118:	3001      	adds	r0, #1
 801311a:	d03a      	beq.n	8013192 <_malloc_r+0xea>
 801311c:	6823      	ldr	r3, [r4, #0]
 801311e:	442b      	add	r3, r5
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	f8d8 3000 	ldr.w	r3, [r8]
 8013126:	685a      	ldr	r2, [r3, #4]
 8013128:	bb62      	cbnz	r2, 8013184 <_malloc_r+0xdc>
 801312a:	f8c8 7000 	str.w	r7, [r8]
 801312e:	e00f      	b.n	8013150 <_malloc_r+0xa8>
 8013130:	6822      	ldr	r2, [r4, #0]
 8013132:	1b52      	subs	r2, r2, r5
 8013134:	d420      	bmi.n	8013178 <_malloc_r+0xd0>
 8013136:	2a0b      	cmp	r2, #11
 8013138:	d917      	bls.n	801316a <_malloc_r+0xc2>
 801313a:	1961      	adds	r1, r4, r5
 801313c:	42a3      	cmp	r3, r4
 801313e:	6025      	str	r5, [r4, #0]
 8013140:	bf18      	it	ne
 8013142:	6059      	strne	r1, [r3, #4]
 8013144:	6863      	ldr	r3, [r4, #4]
 8013146:	bf08      	it	eq
 8013148:	f8c8 1000 	streq.w	r1, [r8]
 801314c:	5162      	str	r2, [r4, r5]
 801314e:	604b      	str	r3, [r1, #4]
 8013150:	4630      	mov	r0, r6
 8013152:	f000 f82f 	bl	80131b4 <__malloc_unlock>
 8013156:	f104 000b 	add.w	r0, r4, #11
 801315a:	1d23      	adds	r3, r4, #4
 801315c:	f020 0007 	bic.w	r0, r0, #7
 8013160:	1ac2      	subs	r2, r0, r3
 8013162:	bf1c      	itt	ne
 8013164:	1a1b      	subne	r3, r3, r0
 8013166:	50a3      	strne	r3, [r4, r2]
 8013168:	e7af      	b.n	80130ca <_malloc_r+0x22>
 801316a:	6862      	ldr	r2, [r4, #4]
 801316c:	42a3      	cmp	r3, r4
 801316e:	bf0c      	ite	eq
 8013170:	f8c8 2000 	streq.w	r2, [r8]
 8013174:	605a      	strne	r2, [r3, #4]
 8013176:	e7eb      	b.n	8013150 <_malloc_r+0xa8>
 8013178:	4623      	mov	r3, r4
 801317a:	6864      	ldr	r4, [r4, #4]
 801317c:	e7ae      	b.n	80130dc <_malloc_r+0x34>
 801317e:	463c      	mov	r4, r7
 8013180:	687f      	ldr	r7, [r7, #4]
 8013182:	e7b6      	b.n	80130f2 <_malloc_r+0x4a>
 8013184:	461a      	mov	r2, r3
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	42a3      	cmp	r3, r4
 801318a:	d1fb      	bne.n	8013184 <_malloc_r+0xdc>
 801318c:	2300      	movs	r3, #0
 801318e:	6053      	str	r3, [r2, #4]
 8013190:	e7de      	b.n	8013150 <_malloc_r+0xa8>
 8013192:	230c      	movs	r3, #12
 8013194:	6033      	str	r3, [r6, #0]
 8013196:	4630      	mov	r0, r6
 8013198:	f000 f80c 	bl	80131b4 <__malloc_unlock>
 801319c:	e794      	b.n	80130c8 <_malloc_r+0x20>
 801319e:	6005      	str	r5, [r0, #0]
 80131a0:	e7d6      	b.n	8013150 <_malloc_r+0xa8>
 80131a2:	bf00      	nop
 80131a4:	20000db8 	.word	0x20000db8

080131a8 <__malloc_lock>:
 80131a8:	4801      	ldr	r0, [pc, #4]	@ (80131b0 <__malloc_lock+0x8>)
 80131aa:	f7ff bf00 	b.w	8012fae <__retarget_lock_acquire_recursive>
 80131ae:	bf00      	nop
 80131b0:	20000db0 	.word	0x20000db0

080131b4 <__malloc_unlock>:
 80131b4:	4801      	ldr	r0, [pc, #4]	@ (80131bc <__malloc_unlock+0x8>)
 80131b6:	f7ff befb 	b.w	8012fb0 <__retarget_lock_release_recursive>
 80131ba:	bf00      	nop
 80131bc:	20000db0 	.word	0x20000db0

080131c0 <__sfputc_r>:
 80131c0:	6893      	ldr	r3, [r2, #8]
 80131c2:	3b01      	subs	r3, #1
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	b410      	push	{r4}
 80131c8:	6093      	str	r3, [r2, #8]
 80131ca:	da08      	bge.n	80131de <__sfputc_r+0x1e>
 80131cc:	6994      	ldr	r4, [r2, #24]
 80131ce:	42a3      	cmp	r3, r4
 80131d0:	db01      	blt.n	80131d6 <__sfputc_r+0x16>
 80131d2:	290a      	cmp	r1, #10
 80131d4:	d103      	bne.n	80131de <__sfputc_r+0x1e>
 80131d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131da:	f7ff bdc4 	b.w	8012d66 <__swbuf_r>
 80131de:	6813      	ldr	r3, [r2, #0]
 80131e0:	1c58      	adds	r0, r3, #1
 80131e2:	6010      	str	r0, [r2, #0]
 80131e4:	7019      	strb	r1, [r3, #0]
 80131e6:	4608      	mov	r0, r1
 80131e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80131ec:	4770      	bx	lr

080131ee <__sfputs_r>:
 80131ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80131f0:	4606      	mov	r6, r0
 80131f2:	460f      	mov	r7, r1
 80131f4:	4614      	mov	r4, r2
 80131f6:	18d5      	adds	r5, r2, r3
 80131f8:	42ac      	cmp	r4, r5
 80131fa:	d101      	bne.n	8013200 <__sfputs_r+0x12>
 80131fc:	2000      	movs	r0, #0
 80131fe:	e007      	b.n	8013210 <__sfputs_r+0x22>
 8013200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013204:	463a      	mov	r2, r7
 8013206:	4630      	mov	r0, r6
 8013208:	f7ff ffda 	bl	80131c0 <__sfputc_r>
 801320c:	1c43      	adds	r3, r0, #1
 801320e:	d1f3      	bne.n	80131f8 <__sfputs_r+0xa>
 8013210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013214 <_vfiprintf_r>:
 8013214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013218:	460d      	mov	r5, r1
 801321a:	b09d      	sub	sp, #116	@ 0x74
 801321c:	4614      	mov	r4, r2
 801321e:	4698      	mov	r8, r3
 8013220:	4606      	mov	r6, r0
 8013222:	b118      	cbz	r0, 801322c <_vfiprintf_r+0x18>
 8013224:	6a03      	ldr	r3, [r0, #32]
 8013226:	b90b      	cbnz	r3, 801322c <_vfiprintf_r+0x18>
 8013228:	f7ff fcac 	bl	8012b84 <__sinit>
 801322c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801322e:	07d9      	lsls	r1, r3, #31
 8013230:	d405      	bmi.n	801323e <_vfiprintf_r+0x2a>
 8013232:	89ab      	ldrh	r3, [r5, #12]
 8013234:	059a      	lsls	r2, r3, #22
 8013236:	d402      	bmi.n	801323e <_vfiprintf_r+0x2a>
 8013238:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801323a:	f7ff feb8 	bl	8012fae <__retarget_lock_acquire_recursive>
 801323e:	89ab      	ldrh	r3, [r5, #12]
 8013240:	071b      	lsls	r3, r3, #28
 8013242:	d501      	bpl.n	8013248 <_vfiprintf_r+0x34>
 8013244:	692b      	ldr	r3, [r5, #16]
 8013246:	b99b      	cbnz	r3, 8013270 <_vfiprintf_r+0x5c>
 8013248:	4629      	mov	r1, r5
 801324a:	4630      	mov	r0, r6
 801324c:	f7ff fdca 	bl	8012de4 <__swsetup_r>
 8013250:	b170      	cbz	r0, 8013270 <_vfiprintf_r+0x5c>
 8013252:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013254:	07dc      	lsls	r4, r3, #31
 8013256:	d504      	bpl.n	8013262 <_vfiprintf_r+0x4e>
 8013258:	f04f 30ff 	mov.w	r0, #4294967295
 801325c:	b01d      	add	sp, #116	@ 0x74
 801325e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013262:	89ab      	ldrh	r3, [r5, #12]
 8013264:	0598      	lsls	r0, r3, #22
 8013266:	d4f7      	bmi.n	8013258 <_vfiprintf_r+0x44>
 8013268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801326a:	f7ff fea1 	bl	8012fb0 <__retarget_lock_release_recursive>
 801326e:	e7f3      	b.n	8013258 <_vfiprintf_r+0x44>
 8013270:	2300      	movs	r3, #0
 8013272:	9309      	str	r3, [sp, #36]	@ 0x24
 8013274:	2320      	movs	r3, #32
 8013276:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801327a:	f8cd 800c 	str.w	r8, [sp, #12]
 801327e:	2330      	movs	r3, #48	@ 0x30
 8013280:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8013430 <_vfiprintf_r+0x21c>
 8013284:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013288:	f04f 0901 	mov.w	r9, #1
 801328c:	4623      	mov	r3, r4
 801328e:	469a      	mov	sl, r3
 8013290:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013294:	b10a      	cbz	r2, 801329a <_vfiprintf_r+0x86>
 8013296:	2a25      	cmp	r2, #37	@ 0x25
 8013298:	d1f9      	bne.n	801328e <_vfiprintf_r+0x7a>
 801329a:	ebba 0b04 	subs.w	fp, sl, r4
 801329e:	d00b      	beq.n	80132b8 <_vfiprintf_r+0xa4>
 80132a0:	465b      	mov	r3, fp
 80132a2:	4622      	mov	r2, r4
 80132a4:	4629      	mov	r1, r5
 80132a6:	4630      	mov	r0, r6
 80132a8:	f7ff ffa1 	bl	80131ee <__sfputs_r>
 80132ac:	3001      	adds	r0, #1
 80132ae:	f000 80a7 	beq.w	8013400 <_vfiprintf_r+0x1ec>
 80132b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80132b4:	445a      	add	r2, fp
 80132b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80132b8:	f89a 3000 	ldrb.w	r3, [sl]
 80132bc:	2b00      	cmp	r3, #0
 80132be:	f000 809f 	beq.w	8013400 <_vfiprintf_r+0x1ec>
 80132c2:	2300      	movs	r3, #0
 80132c4:	f04f 32ff 	mov.w	r2, #4294967295
 80132c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80132cc:	f10a 0a01 	add.w	sl, sl, #1
 80132d0:	9304      	str	r3, [sp, #16]
 80132d2:	9307      	str	r3, [sp, #28]
 80132d4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80132d8:	931a      	str	r3, [sp, #104]	@ 0x68
 80132da:	4654      	mov	r4, sl
 80132dc:	2205      	movs	r2, #5
 80132de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80132e2:	4853      	ldr	r0, [pc, #332]	@ (8013430 <_vfiprintf_r+0x21c>)
 80132e4:	f7ec ff54 	bl	8000190 <memchr>
 80132e8:	9a04      	ldr	r2, [sp, #16]
 80132ea:	b9d8      	cbnz	r0, 8013324 <_vfiprintf_r+0x110>
 80132ec:	06d1      	lsls	r1, r2, #27
 80132ee:	bf44      	itt	mi
 80132f0:	2320      	movmi	r3, #32
 80132f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132f6:	0713      	lsls	r3, r2, #28
 80132f8:	bf44      	itt	mi
 80132fa:	232b      	movmi	r3, #43	@ 0x2b
 80132fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013300:	f89a 3000 	ldrb.w	r3, [sl]
 8013304:	2b2a      	cmp	r3, #42	@ 0x2a
 8013306:	d015      	beq.n	8013334 <_vfiprintf_r+0x120>
 8013308:	9a07      	ldr	r2, [sp, #28]
 801330a:	4654      	mov	r4, sl
 801330c:	2000      	movs	r0, #0
 801330e:	f04f 0c0a 	mov.w	ip, #10
 8013312:	4621      	mov	r1, r4
 8013314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013318:	3b30      	subs	r3, #48	@ 0x30
 801331a:	2b09      	cmp	r3, #9
 801331c:	d94b      	bls.n	80133b6 <_vfiprintf_r+0x1a2>
 801331e:	b1b0      	cbz	r0, 801334e <_vfiprintf_r+0x13a>
 8013320:	9207      	str	r2, [sp, #28]
 8013322:	e014      	b.n	801334e <_vfiprintf_r+0x13a>
 8013324:	eba0 0308 	sub.w	r3, r0, r8
 8013328:	fa09 f303 	lsl.w	r3, r9, r3
 801332c:	4313      	orrs	r3, r2
 801332e:	9304      	str	r3, [sp, #16]
 8013330:	46a2      	mov	sl, r4
 8013332:	e7d2      	b.n	80132da <_vfiprintf_r+0xc6>
 8013334:	9b03      	ldr	r3, [sp, #12]
 8013336:	1d19      	adds	r1, r3, #4
 8013338:	681b      	ldr	r3, [r3, #0]
 801333a:	9103      	str	r1, [sp, #12]
 801333c:	2b00      	cmp	r3, #0
 801333e:	bfbb      	ittet	lt
 8013340:	425b      	neglt	r3, r3
 8013342:	f042 0202 	orrlt.w	r2, r2, #2
 8013346:	9307      	strge	r3, [sp, #28]
 8013348:	9307      	strlt	r3, [sp, #28]
 801334a:	bfb8      	it	lt
 801334c:	9204      	strlt	r2, [sp, #16]
 801334e:	7823      	ldrb	r3, [r4, #0]
 8013350:	2b2e      	cmp	r3, #46	@ 0x2e
 8013352:	d10a      	bne.n	801336a <_vfiprintf_r+0x156>
 8013354:	7863      	ldrb	r3, [r4, #1]
 8013356:	2b2a      	cmp	r3, #42	@ 0x2a
 8013358:	d132      	bne.n	80133c0 <_vfiprintf_r+0x1ac>
 801335a:	9b03      	ldr	r3, [sp, #12]
 801335c:	1d1a      	adds	r2, r3, #4
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	9203      	str	r2, [sp, #12]
 8013362:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013366:	3402      	adds	r4, #2
 8013368:	9305      	str	r3, [sp, #20]
 801336a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8013440 <_vfiprintf_r+0x22c>
 801336e:	7821      	ldrb	r1, [r4, #0]
 8013370:	2203      	movs	r2, #3
 8013372:	4650      	mov	r0, sl
 8013374:	f7ec ff0c 	bl	8000190 <memchr>
 8013378:	b138      	cbz	r0, 801338a <_vfiprintf_r+0x176>
 801337a:	9b04      	ldr	r3, [sp, #16]
 801337c:	eba0 000a 	sub.w	r0, r0, sl
 8013380:	2240      	movs	r2, #64	@ 0x40
 8013382:	4082      	lsls	r2, r0
 8013384:	4313      	orrs	r3, r2
 8013386:	3401      	adds	r4, #1
 8013388:	9304      	str	r3, [sp, #16]
 801338a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801338e:	4829      	ldr	r0, [pc, #164]	@ (8013434 <_vfiprintf_r+0x220>)
 8013390:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013394:	2206      	movs	r2, #6
 8013396:	f7ec fefb 	bl	8000190 <memchr>
 801339a:	2800      	cmp	r0, #0
 801339c:	d03f      	beq.n	801341e <_vfiprintf_r+0x20a>
 801339e:	4b26      	ldr	r3, [pc, #152]	@ (8013438 <_vfiprintf_r+0x224>)
 80133a0:	bb1b      	cbnz	r3, 80133ea <_vfiprintf_r+0x1d6>
 80133a2:	9b03      	ldr	r3, [sp, #12]
 80133a4:	3307      	adds	r3, #7
 80133a6:	f023 0307 	bic.w	r3, r3, #7
 80133aa:	3308      	adds	r3, #8
 80133ac:	9303      	str	r3, [sp, #12]
 80133ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133b0:	443b      	add	r3, r7
 80133b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80133b4:	e76a      	b.n	801328c <_vfiprintf_r+0x78>
 80133b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80133ba:	460c      	mov	r4, r1
 80133bc:	2001      	movs	r0, #1
 80133be:	e7a8      	b.n	8013312 <_vfiprintf_r+0xfe>
 80133c0:	2300      	movs	r3, #0
 80133c2:	3401      	adds	r4, #1
 80133c4:	9305      	str	r3, [sp, #20]
 80133c6:	4619      	mov	r1, r3
 80133c8:	f04f 0c0a 	mov.w	ip, #10
 80133cc:	4620      	mov	r0, r4
 80133ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80133d2:	3a30      	subs	r2, #48	@ 0x30
 80133d4:	2a09      	cmp	r2, #9
 80133d6:	d903      	bls.n	80133e0 <_vfiprintf_r+0x1cc>
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d0c6      	beq.n	801336a <_vfiprintf_r+0x156>
 80133dc:	9105      	str	r1, [sp, #20]
 80133de:	e7c4      	b.n	801336a <_vfiprintf_r+0x156>
 80133e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80133e4:	4604      	mov	r4, r0
 80133e6:	2301      	movs	r3, #1
 80133e8:	e7f0      	b.n	80133cc <_vfiprintf_r+0x1b8>
 80133ea:	ab03      	add	r3, sp, #12
 80133ec:	9300      	str	r3, [sp, #0]
 80133ee:	462a      	mov	r2, r5
 80133f0:	4b12      	ldr	r3, [pc, #72]	@ (801343c <_vfiprintf_r+0x228>)
 80133f2:	a904      	add	r1, sp, #16
 80133f4:	4630      	mov	r0, r6
 80133f6:	f3af 8000 	nop.w
 80133fa:	4607      	mov	r7, r0
 80133fc:	1c78      	adds	r0, r7, #1
 80133fe:	d1d6      	bne.n	80133ae <_vfiprintf_r+0x19a>
 8013400:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013402:	07d9      	lsls	r1, r3, #31
 8013404:	d405      	bmi.n	8013412 <_vfiprintf_r+0x1fe>
 8013406:	89ab      	ldrh	r3, [r5, #12]
 8013408:	059a      	lsls	r2, r3, #22
 801340a:	d402      	bmi.n	8013412 <_vfiprintf_r+0x1fe>
 801340c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801340e:	f7ff fdcf 	bl	8012fb0 <__retarget_lock_release_recursive>
 8013412:	89ab      	ldrh	r3, [r5, #12]
 8013414:	065b      	lsls	r3, r3, #25
 8013416:	f53f af1f 	bmi.w	8013258 <_vfiprintf_r+0x44>
 801341a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801341c:	e71e      	b.n	801325c <_vfiprintf_r+0x48>
 801341e:	ab03      	add	r3, sp, #12
 8013420:	9300      	str	r3, [sp, #0]
 8013422:	462a      	mov	r2, r5
 8013424:	4b05      	ldr	r3, [pc, #20]	@ (801343c <_vfiprintf_r+0x228>)
 8013426:	a904      	add	r1, sp, #16
 8013428:	4630      	mov	r0, r6
 801342a:	f000 f879 	bl	8013520 <_printf_i>
 801342e:	e7e4      	b.n	80133fa <_vfiprintf_r+0x1e6>
 8013430:	08015950 	.word	0x08015950
 8013434:	0801595a 	.word	0x0801595a
 8013438:	00000000 	.word	0x00000000
 801343c:	080131ef 	.word	0x080131ef
 8013440:	08015956 	.word	0x08015956

08013444 <_printf_common>:
 8013444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013448:	4616      	mov	r6, r2
 801344a:	4698      	mov	r8, r3
 801344c:	688a      	ldr	r2, [r1, #8]
 801344e:	690b      	ldr	r3, [r1, #16]
 8013450:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013454:	4293      	cmp	r3, r2
 8013456:	bfb8      	it	lt
 8013458:	4613      	movlt	r3, r2
 801345a:	6033      	str	r3, [r6, #0]
 801345c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013460:	4607      	mov	r7, r0
 8013462:	460c      	mov	r4, r1
 8013464:	b10a      	cbz	r2, 801346a <_printf_common+0x26>
 8013466:	3301      	adds	r3, #1
 8013468:	6033      	str	r3, [r6, #0]
 801346a:	6823      	ldr	r3, [r4, #0]
 801346c:	0699      	lsls	r1, r3, #26
 801346e:	bf42      	ittt	mi
 8013470:	6833      	ldrmi	r3, [r6, #0]
 8013472:	3302      	addmi	r3, #2
 8013474:	6033      	strmi	r3, [r6, #0]
 8013476:	6825      	ldr	r5, [r4, #0]
 8013478:	f015 0506 	ands.w	r5, r5, #6
 801347c:	d106      	bne.n	801348c <_printf_common+0x48>
 801347e:	f104 0a19 	add.w	sl, r4, #25
 8013482:	68e3      	ldr	r3, [r4, #12]
 8013484:	6832      	ldr	r2, [r6, #0]
 8013486:	1a9b      	subs	r3, r3, r2
 8013488:	42ab      	cmp	r3, r5
 801348a:	dc26      	bgt.n	80134da <_printf_common+0x96>
 801348c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013490:	6822      	ldr	r2, [r4, #0]
 8013492:	3b00      	subs	r3, #0
 8013494:	bf18      	it	ne
 8013496:	2301      	movne	r3, #1
 8013498:	0692      	lsls	r2, r2, #26
 801349a:	d42b      	bmi.n	80134f4 <_printf_common+0xb0>
 801349c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80134a0:	4641      	mov	r1, r8
 80134a2:	4638      	mov	r0, r7
 80134a4:	47c8      	blx	r9
 80134a6:	3001      	adds	r0, #1
 80134a8:	d01e      	beq.n	80134e8 <_printf_common+0xa4>
 80134aa:	6823      	ldr	r3, [r4, #0]
 80134ac:	6922      	ldr	r2, [r4, #16]
 80134ae:	f003 0306 	and.w	r3, r3, #6
 80134b2:	2b04      	cmp	r3, #4
 80134b4:	bf02      	ittt	eq
 80134b6:	68e5      	ldreq	r5, [r4, #12]
 80134b8:	6833      	ldreq	r3, [r6, #0]
 80134ba:	1aed      	subeq	r5, r5, r3
 80134bc:	68a3      	ldr	r3, [r4, #8]
 80134be:	bf0c      	ite	eq
 80134c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80134c4:	2500      	movne	r5, #0
 80134c6:	4293      	cmp	r3, r2
 80134c8:	bfc4      	itt	gt
 80134ca:	1a9b      	subgt	r3, r3, r2
 80134cc:	18ed      	addgt	r5, r5, r3
 80134ce:	2600      	movs	r6, #0
 80134d0:	341a      	adds	r4, #26
 80134d2:	42b5      	cmp	r5, r6
 80134d4:	d11a      	bne.n	801350c <_printf_common+0xc8>
 80134d6:	2000      	movs	r0, #0
 80134d8:	e008      	b.n	80134ec <_printf_common+0xa8>
 80134da:	2301      	movs	r3, #1
 80134dc:	4652      	mov	r2, sl
 80134de:	4641      	mov	r1, r8
 80134e0:	4638      	mov	r0, r7
 80134e2:	47c8      	blx	r9
 80134e4:	3001      	adds	r0, #1
 80134e6:	d103      	bne.n	80134f0 <_printf_common+0xac>
 80134e8:	f04f 30ff 	mov.w	r0, #4294967295
 80134ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80134f0:	3501      	adds	r5, #1
 80134f2:	e7c6      	b.n	8013482 <_printf_common+0x3e>
 80134f4:	18e1      	adds	r1, r4, r3
 80134f6:	1c5a      	adds	r2, r3, #1
 80134f8:	2030      	movs	r0, #48	@ 0x30
 80134fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134fe:	4422      	add	r2, r4
 8013500:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013504:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013508:	3302      	adds	r3, #2
 801350a:	e7c7      	b.n	801349c <_printf_common+0x58>
 801350c:	2301      	movs	r3, #1
 801350e:	4622      	mov	r2, r4
 8013510:	4641      	mov	r1, r8
 8013512:	4638      	mov	r0, r7
 8013514:	47c8      	blx	r9
 8013516:	3001      	adds	r0, #1
 8013518:	d0e6      	beq.n	80134e8 <_printf_common+0xa4>
 801351a:	3601      	adds	r6, #1
 801351c:	e7d9      	b.n	80134d2 <_printf_common+0x8e>
	...

08013520 <_printf_i>:
 8013520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013524:	7e0f      	ldrb	r7, [r1, #24]
 8013526:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013528:	2f78      	cmp	r7, #120	@ 0x78
 801352a:	4691      	mov	r9, r2
 801352c:	4680      	mov	r8, r0
 801352e:	460c      	mov	r4, r1
 8013530:	469a      	mov	sl, r3
 8013532:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013536:	d807      	bhi.n	8013548 <_printf_i+0x28>
 8013538:	2f62      	cmp	r7, #98	@ 0x62
 801353a:	d80a      	bhi.n	8013552 <_printf_i+0x32>
 801353c:	2f00      	cmp	r7, #0
 801353e:	f000 80d2 	beq.w	80136e6 <_printf_i+0x1c6>
 8013542:	2f58      	cmp	r7, #88	@ 0x58
 8013544:	f000 80b9 	beq.w	80136ba <_printf_i+0x19a>
 8013548:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801354c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013550:	e03a      	b.n	80135c8 <_printf_i+0xa8>
 8013552:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013556:	2b15      	cmp	r3, #21
 8013558:	d8f6      	bhi.n	8013548 <_printf_i+0x28>
 801355a:	a101      	add	r1, pc, #4	@ (adr r1, 8013560 <_printf_i+0x40>)
 801355c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013560:	080135b9 	.word	0x080135b9
 8013564:	080135cd 	.word	0x080135cd
 8013568:	08013549 	.word	0x08013549
 801356c:	08013549 	.word	0x08013549
 8013570:	08013549 	.word	0x08013549
 8013574:	08013549 	.word	0x08013549
 8013578:	080135cd 	.word	0x080135cd
 801357c:	08013549 	.word	0x08013549
 8013580:	08013549 	.word	0x08013549
 8013584:	08013549 	.word	0x08013549
 8013588:	08013549 	.word	0x08013549
 801358c:	080136cd 	.word	0x080136cd
 8013590:	080135f7 	.word	0x080135f7
 8013594:	08013687 	.word	0x08013687
 8013598:	08013549 	.word	0x08013549
 801359c:	08013549 	.word	0x08013549
 80135a0:	080136ef 	.word	0x080136ef
 80135a4:	08013549 	.word	0x08013549
 80135a8:	080135f7 	.word	0x080135f7
 80135ac:	08013549 	.word	0x08013549
 80135b0:	08013549 	.word	0x08013549
 80135b4:	0801368f 	.word	0x0801368f
 80135b8:	6833      	ldr	r3, [r6, #0]
 80135ba:	1d1a      	adds	r2, r3, #4
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	6032      	str	r2, [r6, #0]
 80135c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80135c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80135c8:	2301      	movs	r3, #1
 80135ca:	e09d      	b.n	8013708 <_printf_i+0x1e8>
 80135cc:	6833      	ldr	r3, [r6, #0]
 80135ce:	6820      	ldr	r0, [r4, #0]
 80135d0:	1d19      	adds	r1, r3, #4
 80135d2:	6031      	str	r1, [r6, #0]
 80135d4:	0606      	lsls	r6, r0, #24
 80135d6:	d501      	bpl.n	80135dc <_printf_i+0xbc>
 80135d8:	681d      	ldr	r5, [r3, #0]
 80135da:	e003      	b.n	80135e4 <_printf_i+0xc4>
 80135dc:	0645      	lsls	r5, r0, #25
 80135de:	d5fb      	bpl.n	80135d8 <_printf_i+0xb8>
 80135e0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80135e4:	2d00      	cmp	r5, #0
 80135e6:	da03      	bge.n	80135f0 <_printf_i+0xd0>
 80135e8:	232d      	movs	r3, #45	@ 0x2d
 80135ea:	426d      	negs	r5, r5
 80135ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135f0:	4859      	ldr	r0, [pc, #356]	@ (8013758 <_printf_i+0x238>)
 80135f2:	230a      	movs	r3, #10
 80135f4:	e011      	b.n	801361a <_printf_i+0xfa>
 80135f6:	6821      	ldr	r1, [r4, #0]
 80135f8:	6833      	ldr	r3, [r6, #0]
 80135fa:	0608      	lsls	r0, r1, #24
 80135fc:	f853 5b04 	ldr.w	r5, [r3], #4
 8013600:	d402      	bmi.n	8013608 <_printf_i+0xe8>
 8013602:	0649      	lsls	r1, r1, #25
 8013604:	bf48      	it	mi
 8013606:	b2ad      	uxthmi	r5, r5
 8013608:	2f6f      	cmp	r7, #111	@ 0x6f
 801360a:	4853      	ldr	r0, [pc, #332]	@ (8013758 <_printf_i+0x238>)
 801360c:	6033      	str	r3, [r6, #0]
 801360e:	bf14      	ite	ne
 8013610:	230a      	movne	r3, #10
 8013612:	2308      	moveq	r3, #8
 8013614:	2100      	movs	r1, #0
 8013616:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801361a:	6866      	ldr	r6, [r4, #4]
 801361c:	60a6      	str	r6, [r4, #8]
 801361e:	2e00      	cmp	r6, #0
 8013620:	bfa2      	ittt	ge
 8013622:	6821      	ldrge	r1, [r4, #0]
 8013624:	f021 0104 	bicge.w	r1, r1, #4
 8013628:	6021      	strge	r1, [r4, #0]
 801362a:	b90d      	cbnz	r5, 8013630 <_printf_i+0x110>
 801362c:	2e00      	cmp	r6, #0
 801362e:	d04b      	beq.n	80136c8 <_printf_i+0x1a8>
 8013630:	4616      	mov	r6, r2
 8013632:	fbb5 f1f3 	udiv	r1, r5, r3
 8013636:	fb03 5711 	mls	r7, r3, r1, r5
 801363a:	5dc7      	ldrb	r7, [r0, r7]
 801363c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013640:	462f      	mov	r7, r5
 8013642:	42bb      	cmp	r3, r7
 8013644:	460d      	mov	r5, r1
 8013646:	d9f4      	bls.n	8013632 <_printf_i+0x112>
 8013648:	2b08      	cmp	r3, #8
 801364a:	d10b      	bne.n	8013664 <_printf_i+0x144>
 801364c:	6823      	ldr	r3, [r4, #0]
 801364e:	07df      	lsls	r7, r3, #31
 8013650:	d508      	bpl.n	8013664 <_printf_i+0x144>
 8013652:	6923      	ldr	r3, [r4, #16]
 8013654:	6861      	ldr	r1, [r4, #4]
 8013656:	4299      	cmp	r1, r3
 8013658:	bfde      	ittt	le
 801365a:	2330      	movle	r3, #48	@ 0x30
 801365c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013660:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013664:	1b92      	subs	r2, r2, r6
 8013666:	6122      	str	r2, [r4, #16]
 8013668:	f8cd a000 	str.w	sl, [sp]
 801366c:	464b      	mov	r3, r9
 801366e:	aa03      	add	r2, sp, #12
 8013670:	4621      	mov	r1, r4
 8013672:	4640      	mov	r0, r8
 8013674:	f7ff fee6 	bl	8013444 <_printf_common>
 8013678:	3001      	adds	r0, #1
 801367a:	d14a      	bne.n	8013712 <_printf_i+0x1f2>
 801367c:	f04f 30ff 	mov.w	r0, #4294967295
 8013680:	b004      	add	sp, #16
 8013682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013686:	6823      	ldr	r3, [r4, #0]
 8013688:	f043 0320 	orr.w	r3, r3, #32
 801368c:	6023      	str	r3, [r4, #0]
 801368e:	4833      	ldr	r0, [pc, #204]	@ (801375c <_printf_i+0x23c>)
 8013690:	2778      	movs	r7, #120	@ 0x78
 8013692:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013696:	6823      	ldr	r3, [r4, #0]
 8013698:	6831      	ldr	r1, [r6, #0]
 801369a:	061f      	lsls	r7, r3, #24
 801369c:	f851 5b04 	ldr.w	r5, [r1], #4
 80136a0:	d402      	bmi.n	80136a8 <_printf_i+0x188>
 80136a2:	065f      	lsls	r7, r3, #25
 80136a4:	bf48      	it	mi
 80136a6:	b2ad      	uxthmi	r5, r5
 80136a8:	6031      	str	r1, [r6, #0]
 80136aa:	07d9      	lsls	r1, r3, #31
 80136ac:	bf44      	itt	mi
 80136ae:	f043 0320 	orrmi.w	r3, r3, #32
 80136b2:	6023      	strmi	r3, [r4, #0]
 80136b4:	b11d      	cbz	r5, 80136be <_printf_i+0x19e>
 80136b6:	2310      	movs	r3, #16
 80136b8:	e7ac      	b.n	8013614 <_printf_i+0xf4>
 80136ba:	4827      	ldr	r0, [pc, #156]	@ (8013758 <_printf_i+0x238>)
 80136bc:	e7e9      	b.n	8013692 <_printf_i+0x172>
 80136be:	6823      	ldr	r3, [r4, #0]
 80136c0:	f023 0320 	bic.w	r3, r3, #32
 80136c4:	6023      	str	r3, [r4, #0]
 80136c6:	e7f6      	b.n	80136b6 <_printf_i+0x196>
 80136c8:	4616      	mov	r6, r2
 80136ca:	e7bd      	b.n	8013648 <_printf_i+0x128>
 80136cc:	6833      	ldr	r3, [r6, #0]
 80136ce:	6825      	ldr	r5, [r4, #0]
 80136d0:	6961      	ldr	r1, [r4, #20]
 80136d2:	1d18      	adds	r0, r3, #4
 80136d4:	6030      	str	r0, [r6, #0]
 80136d6:	062e      	lsls	r6, r5, #24
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	d501      	bpl.n	80136e0 <_printf_i+0x1c0>
 80136dc:	6019      	str	r1, [r3, #0]
 80136de:	e002      	b.n	80136e6 <_printf_i+0x1c6>
 80136e0:	0668      	lsls	r0, r5, #25
 80136e2:	d5fb      	bpl.n	80136dc <_printf_i+0x1bc>
 80136e4:	8019      	strh	r1, [r3, #0]
 80136e6:	2300      	movs	r3, #0
 80136e8:	6123      	str	r3, [r4, #16]
 80136ea:	4616      	mov	r6, r2
 80136ec:	e7bc      	b.n	8013668 <_printf_i+0x148>
 80136ee:	6833      	ldr	r3, [r6, #0]
 80136f0:	1d1a      	adds	r2, r3, #4
 80136f2:	6032      	str	r2, [r6, #0]
 80136f4:	681e      	ldr	r6, [r3, #0]
 80136f6:	6862      	ldr	r2, [r4, #4]
 80136f8:	2100      	movs	r1, #0
 80136fa:	4630      	mov	r0, r6
 80136fc:	f7ec fd48 	bl	8000190 <memchr>
 8013700:	b108      	cbz	r0, 8013706 <_printf_i+0x1e6>
 8013702:	1b80      	subs	r0, r0, r6
 8013704:	6060      	str	r0, [r4, #4]
 8013706:	6863      	ldr	r3, [r4, #4]
 8013708:	6123      	str	r3, [r4, #16]
 801370a:	2300      	movs	r3, #0
 801370c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013710:	e7aa      	b.n	8013668 <_printf_i+0x148>
 8013712:	6923      	ldr	r3, [r4, #16]
 8013714:	4632      	mov	r2, r6
 8013716:	4649      	mov	r1, r9
 8013718:	4640      	mov	r0, r8
 801371a:	47d0      	blx	sl
 801371c:	3001      	adds	r0, #1
 801371e:	d0ad      	beq.n	801367c <_printf_i+0x15c>
 8013720:	6823      	ldr	r3, [r4, #0]
 8013722:	079b      	lsls	r3, r3, #30
 8013724:	d413      	bmi.n	801374e <_printf_i+0x22e>
 8013726:	68e0      	ldr	r0, [r4, #12]
 8013728:	9b03      	ldr	r3, [sp, #12]
 801372a:	4298      	cmp	r0, r3
 801372c:	bfb8      	it	lt
 801372e:	4618      	movlt	r0, r3
 8013730:	e7a6      	b.n	8013680 <_printf_i+0x160>
 8013732:	2301      	movs	r3, #1
 8013734:	4632      	mov	r2, r6
 8013736:	4649      	mov	r1, r9
 8013738:	4640      	mov	r0, r8
 801373a:	47d0      	blx	sl
 801373c:	3001      	adds	r0, #1
 801373e:	d09d      	beq.n	801367c <_printf_i+0x15c>
 8013740:	3501      	adds	r5, #1
 8013742:	68e3      	ldr	r3, [r4, #12]
 8013744:	9903      	ldr	r1, [sp, #12]
 8013746:	1a5b      	subs	r3, r3, r1
 8013748:	42ab      	cmp	r3, r5
 801374a:	dcf2      	bgt.n	8013732 <_printf_i+0x212>
 801374c:	e7eb      	b.n	8013726 <_printf_i+0x206>
 801374e:	2500      	movs	r5, #0
 8013750:	f104 0619 	add.w	r6, r4, #25
 8013754:	e7f5      	b.n	8013742 <_printf_i+0x222>
 8013756:	bf00      	nop
 8013758:	08015961 	.word	0x08015961
 801375c:	08015972 	.word	0x08015972

08013760 <__sflush_r>:
 8013760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013768:	0716      	lsls	r6, r2, #28
 801376a:	4605      	mov	r5, r0
 801376c:	460c      	mov	r4, r1
 801376e:	d454      	bmi.n	801381a <__sflush_r+0xba>
 8013770:	684b      	ldr	r3, [r1, #4]
 8013772:	2b00      	cmp	r3, #0
 8013774:	dc02      	bgt.n	801377c <__sflush_r+0x1c>
 8013776:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013778:	2b00      	cmp	r3, #0
 801377a:	dd48      	ble.n	801380e <__sflush_r+0xae>
 801377c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801377e:	2e00      	cmp	r6, #0
 8013780:	d045      	beq.n	801380e <__sflush_r+0xae>
 8013782:	2300      	movs	r3, #0
 8013784:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8013788:	682f      	ldr	r7, [r5, #0]
 801378a:	6a21      	ldr	r1, [r4, #32]
 801378c:	602b      	str	r3, [r5, #0]
 801378e:	d030      	beq.n	80137f2 <__sflush_r+0x92>
 8013790:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013792:	89a3      	ldrh	r3, [r4, #12]
 8013794:	0759      	lsls	r1, r3, #29
 8013796:	d505      	bpl.n	80137a4 <__sflush_r+0x44>
 8013798:	6863      	ldr	r3, [r4, #4]
 801379a:	1ad2      	subs	r2, r2, r3
 801379c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801379e:	b10b      	cbz	r3, 80137a4 <__sflush_r+0x44>
 80137a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80137a2:	1ad2      	subs	r2, r2, r3
 80137a4:	2300      	movs	r3, #0
 80137a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80137a8:	6a21      	ldr	r1, [r4, #32]
 80137aa:	4628      	mov	r0, r5
 80137ac:	47b0      	blx	r6
 80137ae:	1c43      	adds	r3, r0, #1
 80137b0:	89a3      	ldrh	r3, [r4, #12]
 80137b2:	d106      	bne.n	80137c2 <__sflush_r+0x62>
 80137b4:	6829      	ldr	r1, [r5, #0]
 80137b6:	291d      	cmp	r1, #29
 80137b8:	d82b      	bhi.n	8013812 <__sflush_r+0xb2>
 80137ba:	4a2a      	ldr	r2, [pc, #168]	@ (8013864 <__sflush_r+0x104>)
 80137bc:	410a      	asrs	r2, r1
 80137be:	07d6      	lsls	r6, r2, #31
 80137c0:	d427      	bmi.n	8013812 <__sflush_r+0xb2>
 80137c2:	2200      	movs	r2, #0
 80137c4:	6062      	str	r2, [r4, #4]
 80137c6:	04d9      	lsls	r1, r3, #19
 80137c8:	6922      	ldr	r2, [r4, #16]
 80137ca:	6022      	str	r2, [r4, #0]
 80137cc:	d504      	bpl.n	80137d8 <__sflush_r+0x78>
 80137ce:	1c42      	adds	r2, r0, #1
 80137d0:	d101      	bne.n	80137d6 <__sflush_r+0x76>
 80137d2:	682b      	ldr	r3, [r5, #0]
 80137d4:	b903      	cbnz	r3, 80137d8 <__sflush_r+0x78>
 80137d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80137d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80137da:	602f      	str	r7, [r5, #0]
 80137dc:	b1b9      	cbz	r1, 801380e <__sflush_r+0xae>
 80137de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80137e2:	4299      	cmp	r1, r3
 80137e4:	d002      	beq.n	80137ec <__sflush_r+0x8c>
 80137e6:	4628      	mov	r0, r5
 80137e8:	f7ff fbf2 	bl	8012fd0 <_free_r>
 80137ec:	2300      	movs	r3, #0
 80137ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80137f0:	e00d      	b.n	801380e <__sflush_r+0xae>
 80137f2:	2301      	movs	r3, #1
 80137f4:	4628      	mov	r0, r5
 80137f6:	47b0      	blx	r6
 80137f8:	4602      	mov	r2, r0
 80137fa:	1c50      	adds	r0, r2, #1
 80137fc:	d1c9      	bne.n	8013792 <__sflush_r+0x32>
 80137fe:	682b      	ldr	r3, [r5, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d0c6      	beq.n	8013792 <__sflush_r+0x32>
 8013804:	2b1d      	cmp	r3, #29
 8013806:	d001      	beq.n	801380c <__sflush_r+0xac>
 8013808:	2b16      	cmp	r3, #22
 801380a:	d11e      	bne.n	801384a <__sflush_r+0xea>
 801380c:	602f      	str	r7, [r5, #0]
 801380e:	2000      	movs	r0, #0
 8013810:	e022      	b.n	8013858 <__sflush_r+0xf8>
 8013812:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013816:	b21b      	sxth	r3, r3
 8013818:	e01b      	b.n	8013852 <__sflush_r+0xf2>
 801381a:	690f      	ldr	r7, [r1, #16]
 801381c:	2f00      	cmp	r7, #0
 801381e:	d0f6      	beq.n	801380e <__sflush_r+0xae>
 8013820:	0793      	lsls	r3, r2, #30
 8013822:	680e      	ldr	r6, [r1, #0]
 8013824:	bf08      	it	eq
 8013826:	694b      	ldreq	r3, [r1, #20]
 8013828:	600f      	str	r7, [r1, #0]
 801382a:	bf18      	it	ne
 801382c:	2300      	movne	r3, #0
 801382e:	eba6 0807 	sub.w	r8, r6, r7
 8013832:	608b      	str	r3, [r1, #8]
 8013834:	f1b8 0f00 	cmp.w	r8, #0
 8013838:	dde9      	ble.n	801380e <__sflush_r+0xae>
 801383a:	6a21      	ldr	r1, [r4, #32]
 801383c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801383e:	4643      	mov	r3, r8
 8013840:	463a      	mov	r2, r7
 8013842:	4628      	mov	r0, r5
 8013844:	47b0      	blx	r6
 8013846:	2800      	cmp	r0, #0
 8013848:	dc08      	bgt.n	801385c <__sflush_r+0xfc>
 801384a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801384e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013852:	81a3      	strh	r3, [r4, #12]
 8013854:	f04f 30ff 	mov.w	r0, #4294967295
 8013858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801385c:	4407      	add	r7, r0
 801385e:	eba8 0800 	sub.w	r8, r8, r0
 8013862:	e7e7      	b.n	8013834 <__sflush_r+0xd4>
 8013864:	dfbffffe 	.word	0xdfbffffe

08013868 <_fflush_r>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	690b      	ldr	r3, [r1, #16]
 801386c:	4605      	mov	r5, r0
 801386e:	460c      	mov	r4, r1
 8013870:	b913      	cbnz	r3, 8013878 <_fflush_r+0x10>
 8013872:	2500      	movs	r5, #0
 8013874:	4628      	mov	r0, r5
 8013876:	bd38      	pop	{r3, r4, r5, pc}
 8013878:	b118      	cbz	r0, 8013882 <_fflush_r+0x1a>
 801387a:	6a03      	ldr	r3, [r0, #32]
 801387c:	b90b      	cbnz	r3, 8013882 <_fflush_r+0x1a>
 801387e:	f7ff f981 	bl	8012b84 <__sinit>
 8013882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d0f3      	beq.n	8013872 <_fflush_r+0xa>
 801388a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801388c:	07d0      	lsls	r0, r2, #31
 801388e:	d404      	bmi.n	801389a <_fflush_r+0x32>
 8013890:	0599      	lsls	r1, r3, #22
 8013892:	d402      	bmi.n	801389a <_fflush_r+0x32>
 8013894:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013896:	f7ff fb8a 	bl	8012fae <__retarget_lock_acquire_recursive>
 801389a:	4628      	mov	r0, r5
 801389c:	4621      	mov	r1, r4
 801389e:	f7ff ff5f 	bl	8013760 <__sflush_r>
 80138a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80138a4:	07da      	lsls	r2, r3, #31
 80138a6:	4605      	mov	r5, r0
 80138a8:	d4e4      	bmi.n	8013874 <_fflush_r+0xc>
 80138aa:	89a3      	ldrh	r3, [r4, #12]
 80138ac:	059b      	lsls	r3, r3, #22
 80138ae:	d4e1      	bmi.n	8013874 <_fflush_r+0xc>
 80138b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80138b2:	f7ff fb7d 	bl	8012fb0 <__retarget_lock_release_recursive>
 80138b6:	e7dd      	b.n	8013874 <_fflush_r+0xc>

080138b8 <__swhatbuf_r>:
 80138b8:	b570      	push	{r4, r5, r6, lr}
 80138ba:	460c      	mov	r4, r1
 80138bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138c0:	2900      	cmp	r1, #0
 80138c2:	b096      	sub	sp, #88	@ 0x58
 80138c4:	4615      	mov	r5, r2
 80138c6:	461e      	mov	r6, r3
 80138c8:	da0d      	bge.n	80138e6 <__swhatbuf_r+0x2e>
 80138ca:	89a3      	ldrh	r3, [r4, #12]
 80138cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80138d0:	f04f 0100 	mov.w	r1, #0
 80138d4:	bf14      	ite	ne
 80138d6:	2340      	movne	r3, #64	@ 0x40
 80138d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80138dc:	2000      	movs	r0, #0
 80138de:	6031      	str	r1, [r6, #0]
 80138e0:	602b      	str	r3, [r5, #0]
 80138e2:	b016      	add	sp, #88	@ 0x58
 80138e4:	bd70      	pop	{r4, r5, r6, pc}
 80138e6:	466a      	mov	r2, sp
 80138e8:	f000 f88a 	bl	8013a00 <_fstat_r>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	dbec      	blt.n	80138ca <__swhatbuf_r+0x12>
 80138f0:	9901      	ldr	r1, [sp, #4]
 80138f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80138f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80138fa:	4259      	negs	r1, r3
 80138fc:	4159      	adcs	r1, r3
 80138fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8013902:	e7eb      	b.n	80138dc <__swhatbuf_r+0x24>

08013904 <__smakebuf_r>:
 8013904:	898b      	ldrh	r3, [r1, #12]
 8013906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013908:	079d      	lsls	r5, r3, #30
 801390a:	4606      	mov	r6, r0
 801390c:	460c      	mov	r4, r1
 801390e:	d507      	bpl.n	8013920 <__smakebuf_r+0x1c>
 8013910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013914:	6023      	str	r3, [r4, #0]
 8013916:	6123      	str	r3, [r4, #16]
 8013918:	2301      	movs	r3, #1
 801391a:	6163      	str	r3, [r4, #20]
 801391c:	b003      	add	sp, #12
 801391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013920:	ab01      	add	r3, sp, #4
 8013922:	466a      	mov	r2, sp
 8013924:	f7ff ffc8 	bl	80138b8 <__swhatbuf_r>
 8013928:	9f00      	ldr	r7, [sp, #0]
 801392a:	4605      	mov	r5, r0
 801392c:	4639      	mov	r1, r7
 801392e:	4630      	mov	r0, r6
 8013930:	f7ff fbba 	bl	80130a8 <_malloc_r>
 8013934:	b948      	cbnz	r0, 801394a <__smakebuf_r+0x46>
 8013936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801393a:	059a      	lsls	r2, r3, #22
 801393c:	d4ee      	bmi.n	801391c <__smakebuf_r+0x18>
 801393e:	f023 0303 	bic.w	r3, r3, #3
 8013942:	f043 0302 	orr.w	r3, r3, #2
 8013946:	81a3      	strh	r3, [r4, #12]
 8013948:	e7e2      	b.n	8013910 <__smakebuf_r+0xc>
 801394a:	89a3      	ldrh	r3, [r4, #12]
 801394c:	6020      	str	r0, [r4, #0]
 801394e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013952:	81a3      	strh	r3, [r4, #12]
 8013954:	9b01      	ldr	r3, [sp, #4]
 8013956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801395a:	b15b      	cbz	r3, 8013974 <__smakebuf_r+0x70>
 801395c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013960:	4630      	mov	r0, r6
 8013962:	f000 f85f 	bl	8013a24 <_isatty_r>
 8013966:	b128      	cbz	r0, 8013974 <__smakebuf_r+0x70>
 8013968:	89a3      	ldrh	r3, [r4, #12]
 801396a:	f023 0303 	bic.w	r3, r3, #3
 801396e:	f043 0301 	orr.w	r3, r3, #1
 8013972:	81a3      	strh	r3, [r4, #12]
 8013974:	89a3      	ldrh	r3, [r4, #12]
 8013976:	431d      	orrs	r5, r3
 8013978:	81a5      	strh	r5, [r4, #12]
 801397a:	e7cf      	b.n	801391c <__smakebuf_r+0x18>

0801397c <_putc_r>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	460d      	mov	r5, r1
 8013980:	4614      	mov	r4, r2
 8013982:	4606      	mov	r6, r0
 8013984:	b118      	cbz	r0, 801398e <_putc_r+0x12>
 8013986:	6a03      	ldr	r3, [r0, #32]
 8013988:	b90b      	cbnz	r3, 801398e <_putc_r+0x12>
 801398a:	f7ff f8fb 	bl	8012b84 <__sinit>
 801398e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013990:	07d8      	lsls	r0, r3, #31
 8013992:	d405      	bmi.n	80139a0 <_putc_r+0x24>
 8013994:	89a3      	ldrh	r3, [r4, #12]
 8013996:	0599      	lsls	r1, r3, #22
 8013998:	d402      	bmi.n	80139a0 <_putc_r+0x24>
 801399a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801399c:	f7ff fb07 	bl	8012fae <__retarget_lock_acquire_recursive>
 80139a0:	68a3      	ldr	r3, [r4, #8]
 80139a2:	3b01      	subs	r3, #1
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	60a3      	str	r3, [r4, #8]
 80139a8:	da05      	bge.n	80139b6 <_putc_r+0x3a>
 80139aa:	69a2      	ldr	r2, [r4, #24]
 80139ac:	4293      	cmp	r3, r2
 80139ae:	db12      	blt.n	80139d6 <_putc_r+0x5a>
 80139b0:	b2eb      	uxtb	r3, r5
 80139b2:	2b0a      	cmp	r3, #10
 80139b4:	d00f      	beq.n	80139d6 <_putc_r+0x5a>
 80139b6:	6823      	ldr	r3, [r4, #0]
 80139b8:	1c5a      	adds	r2, r3, #1
 80139ba:	6022      	str	r2, [r4, #0]
 80139bc:	701d      	strb	r5, [r3, #0]
 80139be:	b2ed      	uxtb	r5, r5
 80139c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80139c2:	07da      	lsls	r2, r3, #31
 80139c4:	d405      	bmi.n	80139d2 <_putc_r+0x56>
 80139c6:	89a3      	ldrh	r3, [r4, #12]
 80139c8:	059b      	lsls	r3, r3, #22
 80139ca:	d402      	bmi.n	80139d2 <_putc_r+0x56>
 80139cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80139ce:	f7ff faef 	bl	8012fb0 <__retarget_lock_release_recursive>
 80139d2:	4628      	mov	r0, r5
 80139d4:	bd70      	pop	{r4, r5, r6, pc}
 80139d6:	4629      	mov	r1, r5
 80139d8:	4622      	mov	r2, r4
 80139da:	4630      	mov	r0, r6
 80139dc:	f7ff f9c3 	bl	8012d66 <__swbuf_r>
 80139e0:	4605      	mov	r5, r0
 80139e2:	e7ed      	b.n	80139c0 <_putc_r+0x44>

080139e4 <strchr>:
 80139e4:	b2c9      	uxtb	r1, r1
 80139e6:	4603      	mov	r3, r0
 80139e8:	4618      	mov	r0, r3
 80139ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80139ee:	b112      	cbz	r2, 80139f6 <strchr+0x12>
 80139f0:	428a      	cmp	r2, r1
 80139f2:	d1f9      	bne.n	80139e8 <strchr+0x4>
 80139f4:	4770      	bx	lr
 80139f6:	2900      	cmp	r1, #0
 80139f8:	bf18      	it	ne
 80139fa:	2000      	movne	r0, #0
 80139fc:	4770      	bx	lr
	...

08013a00 <_fstat_r>:
 8013a00:	b538      	push	{r3, r4, r5, lr}
 8013a02:	4d07      	ldr	r5, [pc, #28]	@ (8013a20 <_fstat_r+0x20>)
 8013a04:	2300      	movs	r3, #0
 8013a06:	4604      	mov	r4, r0
 8013a08:	4608      	mov	r0, r1
 8013a0a:	4611      	mov	r1, r2
 8013a0c:	602b      	str	r3, [r5, #0]
 8013a0e:	f7ef feb4 	bl	800377a <_fstat>
 8013a12:	1c43      	adds	r3, r0, #1
 8013a14:	d102      	bne.n	8013a1c <_fstat_r+0x1c>
 8013a16:	682b      	ldr	r3, [r5, #0]
 8013a18:	b103      	cbz	r3, 8013a1c <_fstat_r+0x1c>
 8013a1a:	6023      	str	r3, [r4, #0]
 8013a1c:	bd38      	pop	{r3, r4, r5, pc}
 8013a1e:	bf00      	nop
 8013a20:	20000dac 	.word	0x20000dac

08013a24 <_isatty_r>:
 8013a24:	b538      	push	{r3, r4, r5, lr}
 8013a26:	4d06      	ldr	r5, [pc, #24]	@ (8013a40 <_isatty_r+0x1c>)
 8013a28:	2300      	movs	r3, #0
 8013a2a:	4604      	mov	r4, r0
 8013a2c:	4608      	mov	r0, r1
 8013a2e:	602b      	str	r3, [r5, #0]
 8013a30:	f7ef feb3 	bl	800379a <_isatty>
 8013a34:	1c43      	adds	r3, r0, #1
 8013a36:	d102      	bne.n	8013a3e <_isatty_r+0x1a>
 8013a38:	682b      	ldr	r3, [r5, #0]
 8013a3a:	b103      	cbz	r3, 8013a3e <_isatty_r+0x1a>
 8013a3c:	6023      	str	r3, [r4, #0]
 8013a3e:	bd38      	pop	{r3, r4, r5, pc}
 8013a40:	20000dac 	.word	0x20000dac

08013a44 <_sbrk_r>:
 8013a44:	b538      	push	{r3, r4, r5, lr}
 8013a46:	4d06      	ldr	r5, [pc, #24]	@ (8013a60 <_sbrk_r+0x1c>)
 8013a48:	2300      	movs	r3, #0
 8013a4a:	4604      	mov	r4, r0
 8013a4c:	4608      	mov	r0, r1
 8013a4e:	602b      	str	r3, [r5, #0]
 8013a50:	f7ef febc 	bl	80037cc <_sbrk>
 8013a54:	1c43      	adds	r3, r0, #1
 8013a56:	d102      	bne.n	8013a5e <_sbrk_r+0x1a>
 8013a58:	682b      	ldr	r3, [r5, #0]
 8013a5a:	b103      	cbz	r3, 8013a5e <_sbrk_r+0x1a>
 8013a5c:	6023      	str	r3, [r4, #0]
 8013a5e:	bd38      	pop	{r3, r4, r5, pc}
 8013a60:	20000dac 	.word	0x20000dac

08013a64 <fmax>:
 8013a64:	b508      	push	{r3, lr}
 8013a66:	ed2d 8b04 	vpush	{d8-d9}
 8013a6a:	eeb0 8a40 	vmov.f32	s16, s0
 8013a6e:	eef0 8a60 	vmov.f32	s17, s1
 8013a72:	eeb0 9a41 	vmov.f32	s18, s2
 8013a76:	eef0 9a61 	vmov.f32	s19, s3
 8013a7a:	f000 f847 	bl	8013b0c <__fpclassifyd>
 8013a7e:	b950      	cbnz	r0, 8013a96 <fmax+0x32>
 8013a80:	eeb0 8a49 	vmov.f32	s16, s18
 8013a84:	eef0 8a69 	vmov.f32	s17, s19
 8013a88:	eeb0 0a48 	vmov.f32	s0, s16
 8013a8c:	eef0 0a68 	vmov.f32	s1, s17
 8013a90:	ecbd 8b04 	vpop	{d8-d9}
 8013a94:	bd08      	pop	{r3, pc}
 8013a96:	eeb0 0a49 	vmov.f32	s0, s18
 8013a9a:	eef0 0a69 	vmov.f32	s1, s19
 8013a9e:	f000 f835 	bl	8013b0c <__fpclassifyd>
 8013aa2:	2800      	cmp	r0, #0
 8013aa4:	d0f0      	beq.n	8013a88 <fmax+0x24>
 8013aa6:	ec53 2b19 	vmov	r2, r3, d9
 8013aaa:	ec51 0b18 	vmov	r0, r1, d8
 8013aae:	f7ec ff23 	bl	80008f8 <__aeabi_dcmpgt>
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	d0e4      	beq.n	8013a80 <fmax+0x1c>
 8013ab6:	e7e7      	b.n	8013a88 <fmax+0x24>

08013ab8 <fmin>:
 8013ab8:	b508      	push	{r3, lr}
 8013aba:	ed2d 8b04 	vpush	{d8-d9}
 8013abe:	eeb0 8a40 	vmov.f32	s16, s0
 8013ac2:	eef0 8a60 	vmov.f32	s17, s1
 8013ac6:	eeb0 9a41 	vmov.f32	s18, s2
 8013aca:	eef0 9a61 	vmov.f32	s19, s3
 8013ace:	f000 f81d 	bl	8013b0c <__fpclassifyd>
 8013ad2:	b950      	cbnz	r0, 8013aea <fmin+0x32>
 8013ad4:	eeb0 8a49 	vmov.f32	s16, s18
 8013ad8:	eef0 8a69 	vmov.f32	s17, s19
 8013adc:	eeb0 0a48 	vmov.f32	s0, s16
 8013ae0:	eef0 0a68 	vmov.f32	s1, s17
 8013ae4:	ecbd 8b04 	vpop	{d8-d9}
 8013ae8:	bd08      	pop	{r3, pc}
 8013aea:	eeb0 0a49 	vmov.f32	s0, s18
 8013aee:	eef0 0a69 	vmov.f32	s1, s19
 8013af2:	f000 f80b 	bl	8013b0c <__fpclassifyd>
 8013af6:	2800      	cmp	r0, #0
 8013af8:	d0f0      	beq.n	8013adc <fmin+0x24>
 8013afa:	ec53 2b19 	vmov	r2, r3, d9
 8013afe:	ec51 0b18 	vmov	r0, r1, d8
 8013b02:	f7ec fedb 	bl	80008bc <__aeabi_dcmplt>
 8013b06:	2800      	cmp	r0, #0
 8013b08:	d0e4      	beq.n	8013ad4 <fmin+0x1c>
 8013b0a:	e7e7      	b.n	8013adc <fmin+0x24>

08013b0c <__fpclassifyd>:
 8013b0c:	ec51 0b10 	vmov	r0, r1, d0
 8013b10:	b510      	push	{r4, lr}
 8013b12:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8013b16:	460b      	mov	r3, r1
 8013b18:	d019      	beq.n	8013b4e <__fpclassifyd+0x42>
 8013b1a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8013b1e:	490e      	ldr	r1, [pc, #56]	@ (8013b58 <__fpclassifyd+0x4c>)
 8013b20:	428a      	cmp	r2, r1
 8013b22:	d90e      	bls.n	8013b42 <__fpclassifyd+0x36>
 8013b24:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8013b28:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8013b2c:	428a      	cmp	r2, r1
 8013b2e:	d908      	bls.n	8013b42 <__fpclassifyd+0x36>
 8013b30:	4a0a      	ldr	r2, [pc, #40]	@ (8013b5c <__fpclassifyd+0x50>)
 8013b32:	4213      	tst	r3, r2
 8013b34:	d007      	beq.n	8013b46 <__fpclassifyd+0x3a>
 8013b36:	4294      	cmp	r4, r2
 8013b38:	d107      	bne.n	8013b4a <__fpclassifyd+0x3e>
 8013b3a:	fab0 f080 	clz	r0, r0
 8013b3e:	0940      	lsrs	r0, r0, #5
 8013b40:	bd10      	pop	{r4, pc}
 8013b42:	2004      	movs	r0, #4
 8013b44:	e7fc      	b.n	8013b40 <__fpclassifyd+0x34>
 8013b46:	2003      	movs	r0, #3
 8013b48:	e7fa      	b.n	8013b40 <__fpclassifyd+0x34>
 8013b4a:	2000      	movs	r0, #0
 8013b4c:	e7f8      	b.n	8013b40 <__fpclassifyd+0x34>
 8013b4e:	2800      	cmp	r0, #0
 8013b50:	d1ee      	bne.n	8013b30 <__fpclassifyd+0x24>
 8013b52:	2002      	movs	r0, #2
 8013b54:	e7f4      	b.n	8013b40 <__fpclassifyd+0x34>
 8013b56:	bf00      	nop
 8013b58:	7fdfffff 	.word	0x7fdfffff
 8013b5c:	7ff00000 	.word	0x7ff00000

08013b60 <_init>:
 8013b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b62:	bf00      	nop
 8013b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b66:	bc08      	pop	{r3}
 8013b68:	469e      	mov	lr, r3
 8013b6a:	4770      	bx	lr

08013b6c <_fini>:
 8013b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b6e:	bf00      	nop
 8013b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b72:	bc08      	pop	{r3}
 8013b74:	469e      	mov	lr, r3
 8013b76:	4770      	bx	lr
