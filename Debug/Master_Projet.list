
Master_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139dc  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c50  08013b1c  08013b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801576c  0801576c  0001676c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015774  08015774  00016774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015778  08015778  00016778  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  20000008  0801577c  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000016c  080158e0  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a4  08015915  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  200001b8  08015926  000171b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  08015926  00017db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00018000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08015926  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00053326  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000089ce  00000000  00000000  0006adbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004878  00000000  00000000  00073790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000037b5  00000000  00000000  00078008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032cfc  00000000  00000000  0007b7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047e32  00000000  00000000  000ae4b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e697  00000000  00000000  000f62eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00214982  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013fc8  00000000  00000000  002149c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000062  00000000  00000000  00228990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b8 	.word	0x200001b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08013b04 	.word	0x08013b04

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001bc 	.word	0x200001bc
 800017c:	08013b04 	.word	0x08013b04

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c74:	e000      	b.n	8000c78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_write>:
int invalidMovements = 0;
uint32_t zeroForceValue;
uint32_t attention = 0;
extern ADC_HandleTypeDef hadc1;

int _write(int file, char *ptr, int len) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc9 	bl	8000c4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
	}
	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	Init_Sensors();
 8000cd8:	f000 f9dc 	bl	8001094 <Init_Sensors>
	CalibrateSensors();
 8000cdc:	f000 fa28 	bl	8001130 <CalibrateSensors>
	// Initialisation des structures BenchRep
	referenceMovement.maxAmplitudeZ = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	referenceMovement.minAmplitudeZ = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	referenceMovement.duration = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

	currentMovement.maxAmplitudeZ = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	currentMovement.minAmplitudeZ = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
	currentMovement.duration = 0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000214 	.word	0x20000214

08000d10 <MX_MEMS_Process>:

void MX_MEMS_Process() {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af06      	add	r7, sp, #24
	switch (etat) {
 8000d16:	4ba6      	ldr	r3, [pc, #664]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	f200 81a6 	bhi.w	800106c <MX_MEMS_Process+0x35c>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <MX_MEMS_Process+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d65 	.word	0x08000d65
 8000d30:	08000d83 	.word	0x08000d83
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000e2d 	.word	0x08000e2d
 8000d3c:	08001047 	.word	0x08001047
	case INITIALISATION:
		// Initialisation des variables
		validMovements = 0;
 8000d40:	4b9c      	ldr	r3, [pc, #624]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
		invalidMovements = 0;
 8000d46:	4b9c      	ldr	r3, [pc, #624]	@ (8000fb8 <MX_MEMS_Process+0x2a8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
		MX_MEMS_Init();
 8000d4c:	f7ff ffc2 	bl	8000cd4 <MX_MEMS_Init>
		isExerciseStarted = false;
 8000d50:	4b9a      	ldr	r3, [pc, #616]	@ (8000fbc <MX_MEMS_Process+0x2ac>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
		exerciseEnded = false;
 8000d56:	4b9a      	ldr	r3, [pc, #616]	@ (8000fc0 <MX_MEMS_Process+0x2b0>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
		etat = ATTENTE_DEMARRAGE;
 8000d5c:	4b94      	ldr	r3, [pc, #592]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
		break;
 8000d62:	e183      	b.n	800106c <MX_MEMS_Process+0x35c>

	case ATTENTE_DEMARRAGE:
		// Attente du signal pour démarrer un nouvel exercice
		if (!isExerciseStarted) {
 8000d64:	4b95      	ldr	r3, [pc, #596]	@ (8000fbc <MX_MEMS_Process+0x2ac>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8177 	beq.w	8001062 <MX_MEMS_Process+0x352>
			printf(
 8000d74:	4893      	ldr	r0, [pc, #588]	@ (8000fc4 <MX_MEMS_Process+0x2b4>)
 8000d76:	f011 ff7d 	bl	8012c74 <puts>
					"Nouvel exercice détecté, préparation à l'enregistrement...\n");
			etat = ENREGISTREMENT_REFERENCE;
 8000d7a:	4b8d      	ldr	r3, [pc, #564]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000d80:	e16f      	b.n	8001062 <MX_MEMS_Process+0x352>

	case ENREGISTREMENT_REFERENCE:
		// Enregistrement du mouvement de référence
		printf("Enregistrement du mouvement...\n");
 8000d82:	4891      	ldr	r0, [pc, #580]	@ (8000fc8 <MX_MEMS_Process+0x2b8>)
 8000d84:	f011 ff76 	bl	8012c74 <puts>
		if (!recordBenchRep(&referenceMovement)) {
 8000d88:	4890      	ldr	r0, [pc, #576]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000d8a:	f000 fa69 	bl	8001260 <recordBenchRep>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <MX_MEMS_Process+0x9c>
			printf(
 8000d9a:	488d      	ldr	r0, [pc, #564]	@ (8000fd0 <MX_MEMS_Process+0x2c0>)
 8000d9c:	f011 ff6a 	bl	8012c74 <puts>
					"Aucun mouvement de référence détecté, fin de la tentative.\n");
			MVT_REF_vide();
 8000da0:	f00f ff98 	bl	8010cd4 <MVT_REF_vide>
			etat = INITIALISATION;
 8000da4:	4b82      	ldr	r3, [pc, #520]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
			printf(
					"Mouvement de référence enregistré. En attente de validation...\n");
			MVT_REF_fin();
			etat = VALIDATION_REFERENCE;
		}
		break;
 8000daa:	e15f      	b.n	800106c <MX_MEMS_Process+0x35c>
			printf(
 8000dac:	4889      	ldr	r0, [pc, #548]	@ (8000fd4 <MX_MEMS_Process+0x2c4>)
 8000dae:	f011 ff61 	bl	8012c74 <puts>
			MVT_REF_fin();
 8000db2:	f00f ff89 	bl	8010cc8 <MVT_REF_fin>
			etat = VALIDATION_REFERENCE;
 8000db6:	4b7e      	ldr	r3, [pc, #504]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]
		break;
 8000dbc:	e156      	b.n	800106c <MX_MEMS_Process+0x35c>

	case VALIDATION_REFERENCE:
		// Validation du mouvement de référence
		printf("Enregistrement du mouvement pour validation...\n");
 8000dbe:	4886      	ldr	r0, [pc, #536]	@ (8000fd8 <MX_MEMS_Process+0x2c8>)
 8000dc0:	f011 ff58 	bl	8012c74 <puts>
		if (!recordBenchRep(&currentMovement)) {
 8000dc4:	4885      	ldr	r0, [pc, #532]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000dc6:	f000 fa4b 	bl	8001260 <recordBenchRep>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <MX_MEMS_Process+0xd8>
			printf(
 8000dd6:	4882      	ldr	r0, [pc, #520]	@ (8000fe0 <MX_MEMS_Process+0x2d0>)
 8000dd8:	f011 ff4c 	bl	8012c74 <puts>
					"Aucun mouvement détecté pour validation, veuillez réessayer.\n");
			MVT_REF_validation_vide();
 8000ddc:	f00f ff8c 	bl	8010cf8 <MVT_REF_validation_vide>
			etat = ENREGISTREMENT_REFERENCE;
 8000de0:	4b73      	ldr	r3, [pc, #460]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
			printf(
					"Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
			MVT_REF_validation_fail();
			etat = ENREGISTREMENT_REFERENCE;
		}
		break;
 8000de6:	e141      	b.n	800106c <MX_MEMS_Process+0x35c>
		} else if (compareBenchReps(referenceMovement, currentMovement,
 8000de8:	4d78      	ldr	r5, [pc, #480]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000dea:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000dee:	9304      	str	r3, [sp, #16]
 8000df0:	4b7a      	ldr	r3, [pc, #488]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000df2:	466c      	mov	r4, sp
 8000df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dfe:	f000 fb35 	bl	800146c <compareBenchReps>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <MX_MEMS_Process+0x10a>
			printf("Validation réussie. Commencement des répétitions.\n");
 8000e08:	4876      	ldr	r0, [pc, #472]	@ (8000fe4 <MX_MEMS_Process+0x2d4>)
 8000e0a:	f011 ff33 	bl	8012c74 <puts>
			MVT_REF_validation_succes();
 8000e0e:	f00f ff67 	bl	8010ce0 <MVT_REF_validation_succes>
			etat = ENREGISTREMENT_REPETITIONS;
 8000e12:	4b67      	ldr	r3, [pc, #412]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	701a      	strb	r2, [r3, #0]
		break;
 8000e18:	e128      	b.n	800106c <MX_MEMS_Process+0x35c>
			printf(
 8000e1a:	4873      	ldr	r0, [pc, #460]	@ (8000fe8 <MX_MEMS_Process+0x2d8>)
 8000e1c:	f011 ff2a 	bl	8012c74 <puts>
			MVT_REF_validation_fail();
 8000e20:	f00f ff64 	bl	8010cec <MVT_REF_validation_fail>
			etat = ENREGISTREMENT_REFERENCE;
 8000e24:	4b62      	ldr	r3, [pc, #392]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
		break;
 8000e2a:	e11f      	b.n	800106c <MX_MEMS_Process+0x35c>

	case ENREGISTREMENT_REPETITIONS:
		// Enregistrement des répétitions jusqu'à la fin de la série
		if (!exerciseEnded) {
 8000e2c:	4b64      	ldr	r3, [pc, #400]	@ (8000fc0 <MX_MEMS_Process+0x2b0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	f000 8115 	beq.w	8001066 <MX_MEMS_Process+0x356>
			printf("Enregistrement d'une nouvelle répétition...\n");
 8000e3c:	486b      	ldr	r0, [pc, #428]	@ (8000fec <MX_MEMS_Process+0x2dc>)
 8000e3e:	f011 ff19 	bl	8012c74 <puts>
			if (!recordBenchRep(&currentMovement)) {
 8000e42:	4866      	ldr	r0, [pc, #408]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000e44:	f000 fa0c 	bl	8001260 <recordBenchRep>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	f083 0301 	eor.w	r3, r3, #1
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00b      	beq.n	8000e6c <MX_MEMS_Process+0x15c>
				printf(
 8000e54:	4866      	ldr	r0, [pc, #408]	@ (8000ff0 <MX_MEMS_Process+0x2e0>)
 8000e56:	f011 ff0d 	bl	8012c74 <puts>
						"Fin de la série détectée après une période d'inactivité.\n");
				MVT_vide();
 8000e5a:	f00f ff53 	bl	8010d04 <MVT_vide>
				exerciseEnded = true;
 8000e5e:	4b58      	ldr	r3, [pc, #352]	@ (8000fc0 <MX_MEMS_Process+0x2b0>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
				etat = ATTENTE_SERIE;
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <MX_MEMS_Process+0x2a0>)
 8000e66:	2205      	movs	r2, #5
 8000e68:	701a      	strb	r2, [r3, #0]


			}

		}
		break;
 8000e6a:	e0fc      	b.n	8001066 <MX_MEMS_Process+0x356>
			} else if (compareBenchReps(referenceMovement, currentMovement,
 8000e6c:	4d57      	ldr	r5, [pc, #348]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000e6e:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e72:	9304      	str	r3, [sp, #16]
 8000e74:	4b59      	ldr	r3, [pc, #356]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000e76:	466c      	mov	r4, sp
 8000e78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e82:	f000 faf3 	bl	800146c <compareBenchReps>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d00e      	beq.n	8000eaa <MX_MEMS_Process+0x19a>
			TOLERANCE) && attention == 1) {
 8000e8c:	4b59      	ldr	r3, [pc, #356]	@ (8000ff4 <MX_MEMS_Process+0x2e4>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d10a      	bne.n	8000eaa <MX_MEMS_Process+0x19a>
				MVT_BRAS_GAUCHE_valide();
 8000e94:	f00f ff3c 	bl	8010d10 <MVT_BRAS_GAUCHE_valide>
				validMovements++;
 8000e98:	4b46      	ldr	r3, [pc, #280]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a45      	ldr	r2, [pc, #276]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000ea0:	6013      	str	r3, [r2, #0]
				printf("Répétition valide.\n");
 8000ea2:	4855      	ldr	r0, [pc, #340]	@ (8000ff8 <MX_MEMS_Process+0x2e8>)
 8000ea4:	f011 fee6 	bl	8012c74 <puts>
 8000ea8:	e0cc      	b.n	8001044 <MX_MEMS_Process+0x334>
			} else if (compareBenchReps(referenceMovement, currentMovement,
 8000eaa:	4d48      	ldr	r5, [pc, #288]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000eac:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000eb0:	9304      	str	r3, [sp, #16]
 8000eb2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000eb4:	466c      	mov	r4, sp
 8000eb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000eb8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ec0:	f000 fad4 	bl	800146c <compareBenchReps>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00e      	beq.n	8000ee8 <MX_MEMS_Process+0x1d8>
			TOLERANCE) && attention == 2) {
 8000eca:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff4 <MX_MEMS_Process+0x2e4>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d10a      	bne.n	8000ee8 <MX_MEMS_Process+0x1d8>
				MVT_BRAS_DROIT_valide();
 8000ed2:	f00f ff23 	bl	8010d1c <MVT_BRAS_DROIT_valide>
				validMovements++;
 8000ed6:	4b37      	ldr	r3, [pc, #220]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	3301      	adds	r3, #1
 8000edc:	4a35      	ldr	r2, [pc, #212]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000ede:	6013      	str	r3, [r2, #0]
				printf("Répétition valide.\n");
 8000ee0:	4845      	ldr	r0, [pc, #276]	@ (8000ff8 <MX_MEMS_Process+0x2e8>)
 8000ee2:	f011 fec7 	bl	8012c74 <puts>
 8000ee6:	e0ad      	b.n	8001044 <MX_MEMS_Process+0x334>
			} else if (compareBenchReps(referenceMovement, currentMovement,
 8000ee8:	4d38      	ldr	r5, [pc, #224]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000eea:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000eee:	9304      	str	r3, [sp, #16]
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000ef2:	466c      	mov	r4, sp
 8000ef4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000efa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000efe:	f000 fab5 	bl	800146c <compareBenchReps>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00e      	beq.n	8000f26 <MX_MEMS_Process+0x216>
			TOLERANCE) && attention == 0) {
 8000f08:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff4 <MX_MEMS_Process+0x2e4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d10a      	bne.n	8000f26 <MX_MEMS_Process+0x216>
				MVT_BRAS_CORRECT_valide();
 8000f10:	f00f ff0a 	bl	8010d28 <MVT_BRAS_CORRECT_valide>
				validMovements++;
 8000f14:	4b27      	ldr	r3, [pc, #156]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a26      	ldr	r2, [pc, #152]	@ (8000fb4 <MX_MEMS_Process+0x2a4>)
 8000f1c:	6013      	str	r3, [r2, #0]
				printf("Répétition valide.\n");
 8000f1e:	4836      	ldr	r0, [pc, #216]	@ (8000ff8 <MX_MEMS_Process+0x2e8>)
 8000f20:	f011 fea8 	bl	8012c74 <puts>
 8000f24:	e08e      	b.n	8001044 <MX_MEMS_Process+0x334>
			else if (!compareBenchReps(referenceMovement, currentMovement,
 8000f26:	4d29      	ldr	r5, [pc, #164]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000f28:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000f2c:	9304      	str	r3, [sp, #16]
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000f30:	466c      	mov	r4, sp
 8000f32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f38:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f3c:	f000 fa96 	bl	800146c <compareBenchReps>
 8000f40:	4603      	mov	r3, r0
 8000f42:	f083 0301 	eor.w	r3, r3, #1
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d00e      	beq.n	8000f6a <MX_MEMS_Process+0x25a>
			TOLERANCE) && attention == 1) {
 8000f4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ff4 <MX_MEMS_Process+0x2e4>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d10a      	bne.n	8000f6a <MX_MEMS_Process+0x25a>
				MVT_BRAS_GAUCHE_non_valide();
 8000f54:	f00f feee 	bl	8010d34 <MVT_BRAS_GAUCHE_non_valide>
				invalidMovements++;
 8000f58:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_MEMS_Process+0x2a8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	4a16      	ldr	r2, [pc, #88]	@ (8000fb8 <MX_MEMS_Process+0x2a8>)
 8000f60:	6013      	str	r3, [r2, #0]
				printf("Répétition non valide.\n");
 8000f62:	4826      	ldr	r0, [pc, #152]	@ (8000ffc <MX_MEMS_Process+0x2ec>)
 8000f64:	f011 fe86 	bl	8012c74 <puts>
 8000f68:	e06c      	b.n	8001044 <MX_MEMS_Process+0x334>
			} else if (!compareBenchReps(referenceMovement, currentMovement,
 8000f6a:	4d18      	ldr	r5, [pc, #96]	@ (8000fcc <MX_MEMS_Process+0x2bc>)
 8000f6c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000f70:	9304      	str	r3, [sp, #16]
 8000f72:	4b1a      	ldr	r3, [pc, #104]	@ (8000fdc <MX_MEMS_Process+0x2cc>)
 8000f74:	466c      	mov	r4, sp
 8000f76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000f7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000f80:	f000 fa74 	bl	800146c <compareBenchReps>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f083 0301 	eor.w	r3, r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d037      	beq.n	8001000 <MX_MEMS_Process+0x2f0>
			TOLERANCE) && attention == 2) {
 8000f90:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <MX_MEMS_Process+0x2e4>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d133      	bne.n	8001000 <MX_MEMS_Process+0x2f0>
				MVT_BRAS_DROIT_non_valide();
 8000f98:	f00f fed2 	bl	8010d40 <MVT_BRAS_DROIT_non_valide>
				invalidMovements++;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <MX_MEMS_Process+0x2a8>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	4a05      	ldr	r2, [pc, #20]	@ (8000fb8 <MX_MEMS_Process+0x2a8>)
 8000fa4:	6013      	str	r3, [r2, #0]
				printf("Répétition non valide.\n");
 8000fa6:	4815      	ldr	r0, [pc, #84]	@ (8000ffc <MX_MEMS_Process+0x2ec>)
 8000fa8:	f011 fe64 	bl	8012c74 <puts>
 8000fac:	e04a      	b.n	8001044 <MX_MEMS_Process+0x334>
 8000fae:	bf00      	nop
 8000fb0:	20000224 	.word	0x20000224
 8000fb4:	20000228 	.word	0x20000228
 8000fb8:	2000022c 	.word	0x2000022c
 8000fbc:	20000225 	.word	0x20000225
 8000fc0:	20000226 	.word	0x20000226
 8000fc4:	08013b1c 	.word	0x08013b1c
 8000fc8:	08013b5c 	.word	0x08013b5c
 8000fcc:	20000204 	.word	0x20000204
 8000fd0:	08013b7c 	.word	0x08013b7c
 8000fd4:	08013bbc 	.word	0x08013bbc
 8000fd8:	08013c00 	.word	0x08013c00
 8000fdc:	20000214 	.word	0x20000214
 8000fe0:	08013c30 	.word	0x08013c30
 8000fe4:	08013c70 	.word	0x08013c70
 8000fe8:	08013ca8 	.word	0x08013ca8
 8000fec:	08013cf4 	.word	0x08013cf4
 8000ff0:	08013d24 	.word	0x08013d24
 8000ff4:	20000234 	.word	0x20000234
 8000ff8:	08013d64 	.word	0x08013d64
 8000ffc:	08013d7c 	.word	0x08013d7c
			else if (!compareBenchReps(referenceMovement, currentMovement,
 8001000:	4d1c      	ldr	r5, [pc, #112]	@ (8001074 <MX_MEMS_Process+0x364>)
 8001002:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8001006:	9304      	str	r3, [sp, #16]
 8001008:	4b1b      	ldr	r3, [pc, #108]	@ (8001078 <MX_MEMS_Process+0x368>)
 800100a:	466c      	mov	r4, sp
 800100c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800100e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001012:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001016:	f000 fa29 	bl	800146c <compareBenchReps>
 800101a:	4603      	mov	r3, r0
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d01f      	beq.n	8001066 <MX_MEMS_Process+0x356>
			TOLERANCE) && attention == 0) {
 8001026:	4b15      	ldr	r3, [pc, #84]	@ (800107c <MX_MEMS_Process+0x36c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d11b      	bne.n	8001066 <MX_MEMS_Process+0x356>
				MVT_BRAS_CORRECT_non_valide();
 800102e:	f00f fe8d 	bl	8010d4c <MVT_BRAS_CORRECT_non_valide>
				invalidMovements++;
 8001032:	4b13      	ldr	r3, [pc, #76]	@ (8001080 <MX_MEMS_Process+0x370>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	3301      	adds	r3, #1
 8001038:	4a11      	ldr	r2, [pc, #68]	@ (8001080 <MX_MEMS_Process+0x370>)
 800103a:	6013      	str	r3, [r2, #0]
				printf("Répétition non valide.\n");
 800103c:	4811      	ldr	r0, [pc, #68]	@ (8001084 <MX_MEMS_Process+0x374>)
 800103e:	f011 fe19 	bl	8012c74 <puts>
		break;
 8001042:	e010      	b.n	8001066 <MX_MEMS_Process+0x356>
 8001044:	e00f      	b.n	8001066 <MX_MEMS_Process+0x356>

	case ATTENTE_SERIE:
		// Attente d'une nouvelle série
		if (exerciseEnded) {
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_MEMS_Process+0x378>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d00d      	beq.n	800106a <MX_MEMS_Process+0x35a>
			printf("Prêt pour une nouvelle série.\n");
 800104e:	480f      	ldr	r0, [pc, #60]	@ (800108c <MX_MEMS_Process+0x37c>)
 8001050:	f011 fe10 	bl	8012c74 <puts>
			exerciseEnded = false;
 8001054:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <MX_MEMS_Process+0x378>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
			etat = ENREGISTREMENT_REPETITIONS;
 800105a:	4b0d      	ldr	r3, [pc, #52]	@ (8001090 <MX_MEMS_Process+0x380>)
 800105c:	2204      	movs	r2, #4
 800105e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8001060:	e003      	b.n	800106a <MX_MEMS_Process+0x35a>
		break;
 8001062:	bf00      	nop
 8001064:	e002      	b.n	800106c <MX_MEMS_Process+0x35c>
		break;
 8001066:	bf00      	nop
 8001068:	e000      	b.n	800106c <MX_MEMS_Process+0x35c>
		break;
 800106a:	bf00      	nop
	}
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bdb0      	pop	{r4, r5, r7, pc}
 8001072:	bf00      	nop
 8001074:	20000204 	.word	0x20000204
 8001078:	20000214 	.word	0x20000214
 800107c:	20000234 	.word	0x20000234
 8001080:	2000022c 	.word	0x2000022c
 8001084:	08013d7c 	.word	0x08013d7c
 8001088:	20000226 	.word	0x20000226
 800108c:	08013d98 	.word	0x08013d98
 8001090:	20000224 	.word	0x20000224

08001094 <Init_Sensors>:

void Init_Sensors(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 8001098:	f001 fd23 	bl	8002ae2 <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 800109c:	f001 fd29 	bl	8002af2 <BSP_SENSOR_GYR_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 80010a0:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80010b4 <Init_Sensors+0x20>
 80010a4:	f001 fd47 	bl	8002b36 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 80010a8:	2004      	movs	r0, #4
 80010aa:	f001 fd53 	bl	8002b54 <BSP_SENSOR_ACC_SetFullScale>
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	42480000 	.word	0x42480000

080010b8 <ReadSensorData>:

void ReadSensorData(void) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 80010bc:	4818      	ldr	r0, [pc, #96]	@ (8001120 <ReadSensorData+0x68>)
 80010be:	f001 fd20 	bl	8002b02 <BSP_SENSOR_ACC_GetAxes>
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 80010c2:	4818      	ldr	r0, [pc, #96]	@ (8001124 <ReadSensorData+0x6c>)
 80010c4:	f001 fd2a 	bl	8002b1c <BSP_SENSOR_GYR_GetAxes>

// Appliquer le décalage après la calibration
	AccValue.x -= AccOffset.x;
 80010c8:	4b15      	ldr	r3, [pc, #84]	@ (8001120 <ReadSensorData+0x68>)
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <ReadSensorData+0x70>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4a13      	ldr	r2, [pc, #76]	@ (8001120 <ReadSensorData+0x68>)
 80010d4:	6013      	str	r3, [r2, #0]
	AccValue.y -= AccOffset.y;
 80010d6:	4b12      	ldr	r3, [pc, #72]	@ (8001120 <ReadSensorData+0x68>)
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4b13      	ldr	r3, [pc, #76]	@ (8001128 <ReadSensorData+0x70>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	1ad3      	subs	r3, r2, r3
 80010e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001120 <ReadSensorData+0x68>)
 80010e2:	6053      	str	r3, [r2, #4]
	AccValue.z -= AccOffset.z;
 80010e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001120 <ReadSensorData+0x68>)
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001128 <ReadSensorData+0x70>)
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001120 <ReadSensorData+0x68>)
 80010f0:	6093      	str	r3, [r2, #8]

	GyrValue.x -= GyrOffset.x;
 80010f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <ReadSensorData+0x6c>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <ReadSensorData+0x74>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1ad3      	subs	r3, r2, r3
 80010fc:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <ReadSensorData+0x6c>)
 80010fe:	6013      	str	r3, [r2, #0]
	GyrValue.y -= GyrOffset.y;
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <ReadSensorData+0x6c>)
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4b09      	ldr	r3, [pc, #36]	@ (800112c <ReadSensorData+0x74>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	4a06      	ldr	r2, [pc, #24]	@ (8001124 <ReadSensorData+0x6c>)
 800110c:	6053      	str	r3, [r2, #4]
	GyrValue.z -= GyrOffset.z;
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <ReadSensorData+0x6c>)
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <ReadSensorData+0x74>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	4a02      	ldr	r2, [pc, #8]	@ (8001124 <ReadSensorData+0x6c>)
 800111a:	6093      	str	r3, [r2, #8]
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}
 8001120:	200001d4 	.word	0x200001d4
 8001124:	200001e0 	.word	0x200001e0
 8001128:	200001ec 	.word	0x200001ec
 800112c:	200001f8 	.word	0x200001f8

08001130 <CalibrateSensors>:
	printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long) GyrValue.x,
			(long) GyrValue.y, (long) GyrValue.z);
	HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
	CalibrateAccelerometer();
 8001134:	f000 f804 	bl	8001140 <CalibrateAccelerometer>
	CalibrateGyroscope();
 8001138:	f000 f84a 	bl	80011d0 <CalibrateGyroscope>
}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}

08001140 <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	2300      	movs	r3, #0
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	e015      	b.n	8001184 <CalibrateAccelerometer+0x44>
		BSP_SENSOR_ACC_GetAxes(&tempVal);
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fcd1 	bl	8002b02 <BSP_SENSOR_ACC_GetAxes>
		sumX += tempVal.x;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	69fa      	ldr	r2, [r7, #28]
 8001164:	4413      	add	r3, r2
 8001166:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4413      	add	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4413      	add	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f000 fe49 	bl	8001e10 <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	3301      	adds	r3, #1
 8001182:	613b      	str	r3, [r7, #16]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	2b63      	cmp	r3, #99	@ 0x63
 8001188:	dde6      	ble.n	8001158 <CalibrateAccelerometer+0x18>
	}

	AccOffset.x = sumX / CALIBRATION_SAMPLES;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4a0e      	ldr	r2, [pc, #56]	@ (80011c8 <CalibrateAccelerometer+0x88>)
 800118e:	fb82 1203 	smull	r1, r2, r2, r3
 8001192:	1152      	asrs	r2, r2, #5
 8001194:	17db      	asrs	r3, r3, #31
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	4a0c      	ldr	r2, [pc, #48]	@ (80011cc <CalibrateAccelerometer+0x8c>)
 800119a:	6013      	str	r3, [r2, #0]
	AccOffset.y = sumY / CALIBRATION_SAMPLES;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <CalibrateAccelerometer+0x88>)
 80011a0:	fb82 1203 	smull	r1, r2, r2, r3
 80011a4:	1152      	asrs	r2, r2, #5
 80011a6:	17db      	asrs	r3, r3, #31
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <CalibrateAccelerometer+0x8c>)
 80011ac:	6053      	str	r3, [r2, #4]
	AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4a05      	ldr	r2, [pc, #20]	@ (80011c8 <CalibrateAccelerometer+0x88>)
 80011b2:	fb82 1203 	smull	r1, r2, r2, r3
 80011b6:	1152      	asrs	r2, r2, #5
 80011b8:	17db      	asrs	r3, r3, #31
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	4a03      	ldr	r2, [pc, #12]	@ (80011cc <CalibrateAccelerometer+0x8c>)
 80011be:	6093      	str	r3, [r2, #8]
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	51eb851f 	.word	0x51eb851f
 80011cc:	200001ec 	.word	0x200001ec

080011d0 <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80011e2:	2300      	movs	r3, #0
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	e015      	b.n	8001214 <CalibrateGyroscope+0x44>
		BSP_SENSOR_GYR_GetAxes(&tempVal);
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4618      	mov	r0, r3
 80011ec:	f001 fc96 	bl	8002b1c <BSP_SENSOR_GYR_GetAxes>
		sumX += tempVal.x;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	4413      	add	r3, r2
 80011f6:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4413      	add	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4413      	add	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001208:	200a      	movs	r0, #10
 800120a:	f000 fe01 	bl	8001e10 <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b63      	cmp	r3, #99	@ 0x63
 8001218:	dde6      	ble.n	80011e8 <CalibrateGyroscope+0x18>
	}

	GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <CalibrateGyroscope+0x88>)
 800121e:	fb82 1203 	smull	r1, r2, r2, r3
 8001222:	1152      	asrs	r2, r2, #5
 8001224:	17db      	asrs	r3, r3, #31
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4a0c      	ldr	r2, [pc, #48]	@ (800125c <CalibrateGyroscope+0x8c>)
 800122a:	6013      	str	r3, [r2, #0]
	GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <CalibrateGyroscope+0x88>)
 8001230:	fb82 1203 	smull	r1, r2, r2, r3
 8001234:	1152      	asrs	r2, r2, #5
 8001236:	17db      	asrs	r3, r3, #31
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	4a08      	ldr	r2, [pc, #32]	@ (800125c <CalibrateGyroscope+0x8c>)
 800123c:	6053      	str	r3, [r2, #4]
	GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	4a05      	ldr	r2, [pc, #20]	@ (8001258 <CalibrateGyroscope+0x88>)
 8001242:	fb82 1203 	smull	r1, r2, r2, r3
 8001246:	1152      	asrs	r2, r2, #5
 8001248:	17db      	asrs	r3, r3, #31
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	4a03      	ldr	r2, [pc, #12]	@ (800125c <CalibrateGyroscope+0x8c>)
 800124e:	6093      	str	r3, [r2, #8]
}
 8001250:	bf00      	nop
 8001252:	3720      	adds	r7, #32
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	51eb851f 	.word	0x51eb851f
 800125c:	200001f8 	.word	0x200001f8

08001260 <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b08e      	sub	sp, #56	@ 0x38
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	int maxValueZ = INT_MIN;
 8001268:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800126c:	637b      	str	r3, [r7, #52]	@ 0x34
	int minValueZ = INT_MAX;
 800126e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t startTime = HAL_GetTick();
 8001274:	f007 faa4 	bl	80087c0 <HAL_GetTick>
 8001278:	62f8      	str	r0, [r7, #44]	@ 0x2c
	uint32_t lastMovementTime = startTime;
 800127a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint32_t currentTime;
	bool movementDetected = false;
 800127e:	2300      	movs	r3, #0
 8001280:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	bool isAscending = false; // Initialisation différée
 8001284:	2300      	movs	r3, #0
 8001286:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	int changeOfDirectionCount = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
	bool directionDetermined = false;
 800128e:	2300      	movs	r3, #0
 8001290:	77fb      	strb	r3, [r7, #31]
	uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 8001292:	f007 fa95 	bl	80087c0 <HAL_GetTick>
 8001296:	61b8      	str	r0, [r7, #24]
	zeroForceValue = Get_Calibration_Value();
 8001298:	f000 f930 	bl	80014fc <Get_Calibration_Value>
 800129c:	4603      	mov	r3, r0
 800129e:	4a6b      	ldr	r2, [pc, #428]	@ (800144c <recordBenchRep+0x1ec>)
 80012a0:	6013      	str	r3, [r2, #0]
	attention = 0;
 80012a2:	4b6b      	ldr	r3, [pc, #428]	@ (8001450 <recordBenchRep+0x1f0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

	while (true) {
		ReadSensorData();
 80012a8:	f7ff ff06 	bl	80010b8 <ReadSensorData>

		// Détecter l'inactivité initiale
		if (!movementDetected
 80012ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012b0:	f083 0301 	eor.w	r3, r3, #1
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00d      	beq.n	80012d6 <recordBenchRep+0x76>
				&& (HAL_GetTick() - inactivityStartTime > 15000)) {
 80012ba:	f007 fa81 	bl	80087c0 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d904      	bls.n	80012d6 <recordBenchRep+0x76>
			printf(
 80012cc:	4861      	ldr	r0, [pc, #388]	@ (8001454 <recordBenchRep+0x1f4>)
 80012ce:	f011 fcd1 	bl	8012c74 <puts>
					"Aucun mouvement détecté pendant plus de 15 secondes, fin de la tentative.\n");
			return false;
 80012d2:	2300      	movs	r3, #0
 80012d4:	e0b5      	b.n	8001442 <recordBenchRep+0x1e2>
		}

		// Vérifier si le mouvement dépasse le seuil
		if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 80012d6:	4b60      	ldr	r3, [pc, #384]	@ (8001458 <recordBenchRep+0x1f8>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	bfb8      	it	lt
 80012de:	425b      	neglt	r3, r3
 80012e0:	2b64      	cmp	r3, #100	@ 0x64
 80012e2:	f340 808b 	ble.w	80013fc <recordBenchRep+0x19c>
			if (!movementDetected) {
 80012e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00d      	beq.n	8001310 <recordBenchRep+0xb0>
				printf(
 80012f4:	4859      	ldr	r0, [pc, #356]	@ (800145c <recordBenchRep+0x1fc>)
 80012f6:	f011 fcbd 	bl	8012c74 <puts>
						"Mouvement détecté pour la première fois, début du suivi.\n");
				movementDetected = true;
 80012fa:	2301      	movs	r3, #1
 80012fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				startTime = HAL_GetTick();
 8001300:	f007 fa5e 	bl	80087c0 <HAL_GetTick>
 8001304:	62f8      	str	r0, [r7, #44]	@ 0x2c
				lastMovementTime = startTime;
 8001306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
				inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
 800130e:	e002      	b.n	8001316 <recordBenchRep+0xb6>
			} else {
				lastMovementTime = HAL_GetTick();
 8001310:	f007 fa56 	bl	80087c0 <HAL_GetTick>
 8001314:	62b8      	str	r0, [r7, #40]	@ 0x28
			}

			// Mise à jour des valeurs maximales et minimales
			maxValueZ = fmax(maxValueZ, AccValue.z);
 8001316:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001318:	f7ff fa06 	bl	8000728 <__aeabi_i2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b4d      	ldr	r3, [pc, #308]	@ (8001458 <recordBenchRep+0x1f8>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f9ff 	bl	8000728 <__aeabi_i2d>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	ec43 2b11 	vmov	d1, r2, r3
 8001332:	ec45 4b10 	vmov	d0, r4, r5
 8001336:	f012 fb67 	bl	8013a08 <fmax>
 800133a:	ec53 2b10 	vmov	r2, r3, d0
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fae3 	bl	800090c <__aeabi_d2iz>
 8001346:	4603      	mov	r3, r0
 8001348:	637b      	str	r3, [r7, #52]	@ 0x34
			minValueZ = fmin(minValueZ, AccValue.z);
 800134a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800134c:	f7ff f9ec 	bl	8000728 <__aeabi_i2d>
 8001350:	4604      	mov	r4, r0
 8001352:	460d      	mov	r5, r1
 8001354:	4b40      	ldr	r3, [pc, #256]	@ (8001458 <recordBenchRep+0x1f8>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f9e5 	bl	8000728 <__aeabi_i2d>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	ec43 2b11 	vmov	d1, r2, r3
 8001366:	ec45 4b10 	vmov	d0, r4, r5
 800136a:	f012 fb77 	bl	8013a5c <fmin>
 800136e:	ec53 2b10 	vmov	r2, r3, d0
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f7ff fac9 	bl	800090c <__aeabi_d2iz>
 800137a:	4603      	mov	r3, r0
 800137c:	633b      	str	r3, [r7, #48]	@ 0x30
			uint32_t adcValue = Read_ADC_Value();
 800137e:	f000 f8a3 	bl	80014c8 <Read_ADC_Value>
 8001382:	6178      	str	r0, [r7, #20]
			int32_t adjustedValue = (int32_t) adcValue
 8001384:	697b      	ldr	r3, [r7, #20]
					- (int32_t) zeroForceValue;
 8001386:	4a31      	ldr	r2, [pc, #196]	@ (800144c <recordBenchRep+0x1ec>)
 8001388:	6812      	ldr	r2, [r2, #0]
			int32_t adjustedValue = (int32_t) adcValue
 800138a:	1a9b      	subs	r3, r3, r2
 800138c:	613b      	str	r3, [r7, #16]

			if (adjustedValue >= 3) {
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b02      	cmp	r3, #2
 8001392:	dd06      	ble.n	80013a2 <recordBenchRep+0x142>
				printf("Attention bras droit!\n");
 8001394:	4832      	ldr	r0, [pc, #200]	@ (8001460 <recordBenchRep+0x200>)
 8001396:	f011 fc6d 	bl	8012c74 <puts>
				attention = 2;
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <recordBenchRep+0x1f0>)
 800139c:	2202      	movs	r2, #2
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e009      	b.n	80013b6 <recordBenchRep+0x156>
			} else if (adjustedValue <= -3) {
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	f113 0f02 	cmn.w	r3, #2
 80013a8:	da05      	bge.n	80013b6 <recordBenchRep+0x156>
				printf("Attention bras gauche!\n");
 80013aa:	482e      	ldr	r0, [pc, #184]	@ (8001464 <recordBenchRep+0x204>)
 80013ac:	f011 fc62 	bl	8012c74 <puts>
				attention = 1;
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <recordBenchRep+0x1f0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]
			}

			// Déterminer la direction du mouvement
			if (!directionDetermined) {
 80013b6:	7ffb      	ldrb	r3, [r7, #31]
 80013b8:	f083 0301 	eor.w	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d00a      	beq.n	80013d8 <recordBenchRep+0x178>
				isAscending = AccValue.z > 0;
 80013c2:	4b25      	ldr	r3, [pc, #148]	@ (8001458 <recordBenchRep+0x1f8>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	bfcc      	ite	gt
 80013ca:	2301      	movgt	r3, #1
 80013cc:	2300      	movle	r3, #0
 80013ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				directionDetermined = true;
 80013d2:	2301      	movs	r3, #1
 80013d4:	77fb      	strb	r3, [r7, #31]
 80013d6:	e011      	b.n	80013fc <recordBenchRep+0x19c>

			} else {
				bool currentAscending = AccValue.z > 0;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <recordBenchRep+0x1f8>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bfcc      	ite	gt
 80013e0:	2301      	movgt	r3, #1
 80013e2:	2300      	movle	r3, #0
 80013e4:	73fb      	strb	r3, [r7, #15]
				if (currentAscending != isAscending) {
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d005      	beq.n	80013fc <recordBenchRep+0x19c>
					changeOfDirectionCount++;
 80013f0:	6a3b      	ldr	r3, [r7, #32]
 80013f2:	3301      	adds	r3, #1
 80013f4:	623b      	str	r3, [r7, #32]
					isAscending = currentAscending;
 80013f6:	7bfb      	ldrb	r3, [r7, #15]
 80013f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				}
			}
		}

		// Vérifier le temps d'inactivité
		currentTime = HAL_GetTick();
 80013fc:	f007 f9e0 	bl	80087c0 <HAL_GetTick>
 8001400:	60b8      	str	r0, [r7, #8]
		if (movementDetected
 8001402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001406:	2b00      	cmp	r3, #0
 8001408:	f43f af4e 	beq.w	80012a8 <recordBenchRep+0x48>
				&& (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001416:	f67f af47 	bls.w	80012a8 <recordBenchRep+0x48>
			printf(
 800141a:	4813      	ldr	r0, [pc, #76]	@ (8001468 <recordBenchRep+0x208>)
 800141c:	f011 fc2a 	bl	8012c74 <puts>
					"Période d'inactivité détectée, fin de l'enregistrement du mouvement.\n");
			break;
 8001420:	bf00      	nop
		}
	}

// Enregistrer les données du mouvement
	rep->maxAmplitudeZ = maxValueZ;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001426:	601a      	str	r2, [r3, #0]
	rep->minAmplitudeZ = minValueZ;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800142c:	605a      	str	r2, [r3, #4]
	rep->duration = currentTime - startTime;
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	461a      	mov	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	609a      	str	r2, [r3, #8]
	rep->changeOfDirectionCount = changeOfDirectionCount;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a3a      	ldr	r2, [r7, #32]
 800143e:	60da      	str	r2, [r3, #12]

	return true; // Mouvement détecté et enregistré
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	3738      	adds	r7, #56	@ 0x38
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	20000230 	.word	0x20000230
 8001450:	20000234 	.word	0x20000234
 8001454:	08013e08 	.word	0x08013e08
 8001458:	200001d4 	.word	0x200001d4
 800145c:	08013e54 	.word	0x08013e54
 8001460:	08013e94 	.word	0x08013e94
 8001464:	08013eac 	.word	0x08013eac
 8001468:	08013ec4 	.word	0x08013ec4

0800146c <compareBenchReps>:

bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 800146c:	b490      	push	{r4, r7}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	463c      	mov	r4, r7
 8001474:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	bfb8      	it	lt
 8001482:	425b      	neglt	r3, r3
 8001484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001486:	429a      	cmp	r2, r3
 8001488:	db17      	blt.n	80014ba <compareBenchReps+0x4e>
			&& abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	bfb8      	it	lt
 8001494:	425b      	neglt	r3, r3
 8001496:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001498:	429a      	cmp	r2, r3
 800149a:	db0e      	blt.n	80014ba <compareBenchReps+0x4e>
			&& abs(refRep.duration - newRep.duration) <= tolerance
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	6a3b      	ldr	r3, [r7, #32]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	bfb8      	it	lt
 80014a6:	425b      	neglt	r3, r3
 80014a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014aa:	429a      	cmp	r2, r3
 80014ac:	db05      	blt.n	80014ba <compareBenchReps+0x4e>
			&& refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d101      	bne.n	80014ba <compareBenchReps+0x4e>
		return true;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e000      	b.n	80014bc <compareBenchReps+0x50>
	}
	return false;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc90      	pop	{r4, r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <Read_ADC_Value>:

uint32_t Read_ADC_Value(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 80014ce:	480a      	ldr	r0, [pc, #40]	@ (80014f8 <Read_ADC_Value+0x30>)
 80014d0:	f007 fcfc 	bl	8008ecc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	4807      	ldr	r0, [pc, #28]	@ (80014f8 <Read_ADC_Value+0x30>)
 80014da:	f007 fd7e 	bl	8008fda <HAL_ADC_PollForConversion>
	uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 80014de:	4806      	ldr	r0, [pc, #24]	@ (80014f8 <Read_ADC_Value+0x30>)
 80014e0:	f007 fe08 	bl	80090f4 <HAL_ADC_GetValue>
 80014e4:	6078      	str	r0, [r7, #4]
	HAL_ADC_Stop(&hadc1);
 80014e6:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <Read_ADC_Value+0x30>)
 80014e8:	f007 fd44 	bl	8008f74 <HAL_ADC_Stop>
	return adcValue;
 80014ec:	687b      	ldr	r3, [r7, #4]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200002d8 	.word	0x200002d8

080014fc <Get_Calibration_Value>:
uint32_t Get_Calibration_Value(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
	const int numSamples = 10;
 8001506:	230a      	movs	r3, #10
 8001508:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < numSamples; i++) {
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	e00b      	b.n	8001528 <Get_Calibration_Value+0x2c>
		sum += Read_ADC_Value();
 8001510:	f7ff ffda 	bl	80014c8 <Read_ADC_Value>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	4413      	add	r3, r2
 800151a:	60fb      	str	r3, [r7, #12]
		HAL_Delay(10);  // Delay to allow ADC to stabilize
 800151c:	200a      	movs	r0, #10
 800151e:	f000 fc77 	bl	8001e10 <HAL_Delay>
	for (int i = 0; i < numSamples; i++) {
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbef      	blt.n	8001510 <Get_Calibration_Value+0x14>
	}
	return sum / numSamples;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001540:	b5b0      	push	{r4, r5, r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001546:	4b0b      	ldr	r3, [pc, #44]	@ (8001574 <APPD_EnableCPU2+0x34>)
 8001548:	1d3c      	adds	r4, r7, #4
 800154a:	461d      	mov	r5, r3
 800154c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800154e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001550:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001554:	c403      	stmia	r4!, {r0, r1}
 8001556:	8022      	strh	r2, [r4, #0]
 8001558:	3402      	adds	r4, #2
 800155a:	0c13      	lsrs	r3, r2, #16
 800155c:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800155e:	f00e fe8b 	bl	8010278 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	4618      	mov	r0, r3
 8001566:	f00e f91c 	bl	800f7a2 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800156a:	bf00      	nop
}
 800156c:	3720      	adds	r7, #32
 800156e:	46bd      	mov	sp, r7
 8001570:	bdb0      	pop	{r4, r5, r7, pc}
 8001572:	bf00      	nop
 8001574:	08013f10 	.word	0x08013f10

08001578 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <LL_C2_PWR_SetPowerMode+0x28>)
 8001582:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4905      	ldr	r1, [pc, #20]	@ (80015a0 <LL_C2_PWR_SetPowerMode+0x28>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4313      	orrs	r3, r2
 8001590:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	58000400 	.word	0x58000400

080015a4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80015ac:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80015ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80015b2:	4905      	ldr	r1, [pc, #20]	@ (80015c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	58000800 	.word	0x58000800

080015cc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80015d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80015da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80015f2:	4313      	orrs	r3, r2
 80015f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	cafecafe 	.word	0xcafecafe

08001608 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800161a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4313      	orrs	r3, r2
 8001622:	608b      	str	r3, [r1, #8]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001634:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800163c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800165e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001662:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001666:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800167c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001680:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001684:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001688:	d101      	bne.n	800168e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800168a:	2301      	movs	r3, #1
 800168c:	e000      	b.n	8001690 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800169a:	b480      	push	{r7}
 800169c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800169e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80016ae:	d101      	bne.n	80016b4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e000      	b.n	80016b6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4013      	ands	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016e4:	68fb      	ldr	r3, [r7, #12]
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
	...

080016f4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <LL_DBGMCU_GetDeviceID+0x18>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001700:	4618      	mov	r0, r3
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e0042000 	.word	0xe0042000

08001710 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001714:	4b04      	ldr	r3, [pc, #16]	@ (8001728 <LL_DBGMCU_GetRevisionID+0x18>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	b29b      	uxth	r3, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	e0042000 	.word	0xe0042000

0800172c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	605a      	str	r2, [r3, #4]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685a      	ldr	r2, [r3, #4]
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	431a      	orrs	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	605a      	str	r2, [r3, #4]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
 800177a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	695a      	ldr	r2, [r3, #20]
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	041b      	lsls	r3, r3, #16
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	615a      	str	r2, [r3, #20]
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695a      	ldr	r2, [r3, #20]
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	431a      	orrs	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	615a      	str	r2, [r3, #20]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	609a      	str	r2, [r3, #8]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	683a      	ldr	r2, [r7, #0]
 80017e2:	619a      	str	r2, [r3, #24]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017f4:	4b05      	ldr	r3, [pc, #20]	@ (800180c <LL_LPM_EnableSleep+0x1c>)
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	4a04      	ldr	r2, [pc, #16]	@ (800180c <LL_LPM_EnableSleep+0x1c>)
 80017fa:	f023 0304 	bic.w	r3, r3, #4
 80017fe:	6113      	str	r3, [r2, #16]
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	22ff      	movs	r2, #255	@ 0xff
 800181c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	22ca      	movs	r2, #202	@ 0xca
 8001836:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2253      	movs	r2, #83	@ 0x53
 800183c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800184a:	b480      	push	{r7}
 800184c:	b083      	sub	sp, #12
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
 8001852:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f023 0207 	bic.w	r2, r3, #7
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	431a      	orrs	r2, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	609a      	str	r2, [r3, #8]
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <MX_APPE_Config+0x18>)
 8001876:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800187a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 800187c:	f000 f824 	bl	80018c8 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001880:	f000 f864 	bl	800194c <Config_HSE>

  return;
 8001884:	bf00      	nop
}
 8001886:	bd80      	pop	{r7, pc}
 8001888:	58004000 	.word	0x58004000

0800188c <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001890:	f000 f870 	bl	8001974 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001894:	f000 f888 	bl	80019a8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001898:	4903      	ldr	r1, [pc, #12]	@ (80018a8 <MX_APPE_Init+0x1c>)
 800189a:	2000      	movs	r0, #0
 800189c:	f000 ff30 	bl	8002700 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80018a0:	f000 f890 	bl	80019c4 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80018a4:	bf00      	nop
}
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	20000378 	.word	0x20000378

080018ac <Init_Smps>:

void Init_Smps(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80018b0:	bf00      	nop
}
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <Init_Exti>:

void Init_Exti(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80018be:	2050      	movs	r0, #80	@ 0x50
 80018c0:	f7ff fe70 	bl	80015a4 <LL_EXTI_EnableIT_32_63>

  return;
 80018c4:	bf00      	nop
}
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 80018cc:	f000 f804 	bl	80018d8 <Reset_BackupDomain>

  Reset_IPCC();
 80018d0:	f000 f81a 	bl	8001908 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80018d4:	bf00      	nop
}
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 80018dc:	f7ff feca 	bl	8001674 <LL_RCC_IsActiveFlag_PINRST>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d00d      	beq.n	8001902 <Reset_BackupDomain+0x2a>
 80018e6:	f7ff fed8 	bl	800169a <LL_RCC_IsActiveFlag_SFTRST>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d108      	bne.n	8001902 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80018f0:	f009 ff48 	bl	800b784 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80018f4:	f009 ff46 	bl	800b784 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80018f8:	f7ff fe9a 	bl	8001630 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80018fc:	f7ff fea9 	bl	8001652 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001900:	bf00      	nop
 8001902:	bf00      	nop
}
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800190c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8001910:	f7ff fed6 	bl	80016c0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001914:	213f      	movs	r1, #63	@ 0x3f
 8001916:	480c      	ldr	r0, [pc, #48]	@ (8001948 <Reset_IPCC+0x40>)
 8001918:	f7ff ff4e 	bl	80017b8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800191c:	213f      	movs	r1, #63	@ 0x3f
 800191e:	480a      	ldr	r0, [pc, #40]	@ (8001948 <Reset_IPCC+0x40>)
 8001920:	f7ff ff58 	bl	80017d4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001924:	213f      	movs	r1, #63	@ 0x3f
 8001926:	4808      	ldr	r0, [pc, #32]	@ (8001948 <Reset_IPCC+0x40>)
 8001928:	f7ff ff00 	bl	800172c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800192c:	213f      	movs	r1, #63	@ 0x3f
 800192e:	4806      	ldr	r0, [pc, #24]	@ (8001948 <Reset_IPCC+0x40>)
 8001930:	f7ff ff1f 	bl	8001772 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001934:	213f      	movs	r1, #63	@ 0x3f
 8001936:	4804      	ldr	r0, [pc, #16]	@ (8001948 <Reset_IPCC+0x40>)
 8001938:	f7ff ff0a 	bl	8001750 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800193c:	213f      	movs	r1, #63	@ 0x3f
 800193e:	4802      	ldr	r0, [pc, #8]	@ (8001948 <Reset_IPCC+0x40>)
 8001940:	f7ff ff29 	bl	8001796 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001944:	bf00      	nop
}
 8001946:	bd80      	pop	{r7, pc}
 8001948:	58000c00 	.word	0x58000c00

0800194c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001952:	2000      	movs	r0, #0
 8001954:	f00e fd44 	bl	80103e0 <OTP_Read>
 8001958:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d005      	beq.n	800196c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	799b      	ldrb	r3, [r3, #6]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fe31 	bl	80015cc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800196a:	bf00      	nop
 800196c:	bf00      	nop
}
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <System_Init>:

static void System_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  Init_Smps();
 8001978:	f7ff ff98 	bl	80018ac <Init_Smps>

  Init_Exti();
 800197c:	f7ff ff9d 	bl	80018ba <Init_Exti>

  Init_Rtc();
 8001980:	f000 f802 	bl	8001988 <Init_Rtc>

  return;
 8001984:	bf00      	nop
}
 8001986:	bd80      	pop	{r7, pc}

08001988 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800198c:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <Init_Rtc+0x1c>)
 800198e:	f7ff ff4c 	bl	800182a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001992:	2100      	movs	r1, #0
 8001994:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <Init_Rtc+0x1c>)
 8001996:	f7ff ff58 	bl	800184a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800199a:	4802      	ldr	r0, [pc, #8]	@ (80019a4 <Init_Rtc+0x1c>)
 800199c:	f7ff ff38 	bl	8001810 <LL_RTC_EnableWriteProtection>

  return;
 80019a0:	bf00      	nop
}
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40002800 	.word	0x40002800

080019a8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80019ac:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80019b0:	f7ff fe2a 	bl	8001608 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80019b4:	f010 fdb0 	bl	8012518 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80019b8:	2004      	movs	r0, #4
 80019ba:	f7ff fddd 	bl	8001578 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80019be:	bf00      	nop
}
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80019ca:	f00e fa9f 	bl	800ff0c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80019ce:	4a11      	ldr	r2, [pc, #68]	@ (8001a14 <appe_Tl_Init+0x50>)
 80019d0:	2100      	movs	r1, #0
 80019d2:	2008      	movs	r0, #8
 80019d4:	f010 fede 	bl	8012794 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <appe_Tl_Init+0x54>)
 80019da:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80019dc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a1c <appe_Tl_Init+0x58>)
 80019de:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	480e      	ldr	r0, [pc, #56]	@ (8001a20 <appe_Tl_Init+0x5c>)
 80019e6:	f00e f953 	bl	800fc90 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <appe_Tl_Init+0x60>)
 80019ec:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <appe_Tl_Init+0x64>)
 80019f0:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a2c <appe_Tl_Init+0x68>)
 80019f4:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80019f6:	f240 533c 	movw	r3, #1340	@ 0x53c
 80019fa:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80019fc:	f107 0308 	add.w	r3, r7, #8
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00e fbc5 	bl	8010190 <TL_MM_Init>

  TL_Enable();
 8001a06:	f00e fa7b 	bl	800ff00 <TL_Enable>

  return;
 8001a0a:	bf00      	nop
}
 8001a0c:	3720      	adds	r7, #32
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	0800fcc9 	.word	0x0800fcc9
 8001a18:	20030734 	.word	0x20030734
 8001a1c:	08001a31 	.word	0x08001a31
 8001a20:	08001a49 	.word	0x08001a49
 8001a24:	2003094c 	.word	0x2003094c
 8001a28:	20030840 	.word	0x20030840
 8001a2c:	200301f8 	.word	0x200301f8

08001a30 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001a3a:	bf00      	nop
}
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	330b      	adds	r3, #11
 8001a56:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	881b      	ldrh	r3, [r3, #0]
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 8001a62:	2b07      	cmp	r3, #7
 8001a64:	f200 80d0 	bhi.w	8001c08 <APPE_SysUserEvtRx+0x1c0>
 8001a68:	a201      	add	r2, pc, #4	@ (adr r2, 8001a70 <APPE_SysUserEvtRx+0x28>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001a91 	.word	0x08001a91
 8001a74:	08001b23 	.word	0x08001b23
 8001a78:	08001b45 	.word	0x08001b45
 8001a7c:	08001c09 	.word	0x08001c09
 8001a80:	08001b89 	.word	0x08001b89
 8001a84:	08001bad 	.word	0x08001bad
 8001a88:	08001bc9 	.word	0x08001bc9
 8001a8c:	08001bed 	.word	0x08001bed
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	4618      	mov	r0, r3
 8001a96:	f00d feb1 	bl	800f7fc <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001a9a:	485e      	ldr	r0, [pc, #376]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001a9c:	f00e fc78 	bl	8010390 <DbgTraceGetFileName>
 8001aa0:	4601      	mov	r1, r0
 8001aa2:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001aa8:	485c      	ldr	r0, [pc, #368]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001aaa:	f011 f873 	bl	8012b94 <iprintf>
 8001aae:	7b3b      	ldrb	r3, [r7, #12]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	7bbb      	ldrb	r3, [r7, #14]
 8001ab8:	4859      	ldr	r0, [pc, #356]	@ (8001c20 <APPE_SysUserEvtRx+0x1d8>)
 8001aba:	f011 f86b 	bl	8012b94 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 8001abe:	4855      	ldr	r0, [pc, #340]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001ac0:	f00e fc66 	bl	8010390 <DbgTraceGetFileName>
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	f240 136b 	movw	r3, #363	@ 0x16b
 8001aca:	4a53      	ldr	r2, [pc, #332]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001acc:	4853      	ldr	r0, [pc, #332]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001ace:	f011 f861 	bl	8012b94 <iprintf>
 8001ad2:	7c3b      	ldrb	r3, [r7, #16]
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4853      	ldr	r0, [pc, #332]	@ (8001c24 <APPE_SysUserEvtRx+0x1dc>)
 8001ad8:	f011 f85c 	bl	8012b94 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001adc:	484d      	ldr	r0, [pc, #308]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001ade:	f00e fc57 	bl	8010390 <DbgTraceGetFileName>
 8001ae2:	4601      	mov	r1, r0
 8001ae4:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 8001ae8:	4a4b      	ldr	r2, [pc, #300]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001aea:	484c      	ldr	r0, [pc, #304]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001aec:	f011 f852 	bl	8012b94 <iprintf>
 8001af0:	7dbb      	ldrb	r3, [r7, #22]
 8001af2:	4619      	mov	r1, r3
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	461a      	mov	r2, r3
 8001af8:	7e3b      	ldrb	r3, [r7, #24]
 8001afa:	484b      	ldr	r0, [pc, #300]	@ (8001c28 <APPE_SysUserEvtRx+0x1e0>)
 8001afc:	f011 f84a 	bl	8012b94 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001b00:	4844      	ldr	r0, [pc, #272]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001b02:	f00e fc45 	bl	8010390 <DbgTraceGetFileName>
 8001b06:	4601      	mov	r1, r0
 8001b08:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 8001b0c:	4a42      	ldr	r2, [pc, #264]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001b0e:	4843      	ldr	r0, [pc, #268]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001b10:	f011 f840 	bl	8012b94 <iprintf>
 8001b14:	4845      	ldr	r0, [pc, #276]	@ (8001c2c <APPE_SysUserEvtRx+0x1e4>)
 8001b16:	f011 f83d 	bl	8012b94 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8e0 	bl	8001ce0 <APPE_SysEvtReadyProcessing>
    break;
 8001b20:	e073      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001b22:	483c      	ldr	r0, [pc, #240]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001b24:	f00e fc34 	bl	8010390 <DbgTraceGetFileName>
 8001b28:	4601      	mov	r1, r0
 8001b2a:	f240 1373 	movw	r3, #371	@ 0x173
 8001b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001b30:	483a      	ldr	r0, [pc, #232]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001b32:	f011 f82f 	bl	8012b94 <iprintf>
 8001b36:	483e      	ldr	r0, [pc, #248]	@ (8001c30 <APPE_SysUserEvtRx+0x1e8>)
 8001b38:	f011 f82c 	bl	8012b94 <iprintf>
    APPE_SysEvtError(pPayload);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f885 	bl	8001c4c <APPE_SysEvtError>
    break;
 8001b42:	e062      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001b44:	4833      	ldr	r0, [pc, #204]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001b46:	f00e fc23 	bl	8010390 <DbgTraceGetFileName>
 8001b4a:	4601      	mov	r1, r0
 8001b4c:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 8001b50:	4a31      	ldr	r2, [pc, #196]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001b52:	4832      	ldr	r0, [pc, #200]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001b54:	f011 f81e 	bl	8012b94 <iprintf>
 8001b58:	4836      	ldr	r0, [pc, #216]	@ (8001c34 <APPE_SysUserEvtRx+0x1ec>)
 8001b5a:	f011 f88b 	bl	8012c74 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001b5e:	482d      	ldr	r0, [pc, #180]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001b60:	f00e fc16 	bl	8010390 <DbgTraceGetFileName>
 8001b64:	4601      	mov	r1, r0
 8001b66:	f240 1379 	movw	r3, #377	@ 0x179
 8001b6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001b6c:	482b      	ldr	r0, [pc, #172]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001b6e:	f011 f811 	bl	8012b94 <iprintf>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3302      	adds	r3, #2
 8001b76:	6819      	ldr	r1, [r3, #0]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	482d      	ldr	r0, [pc, #180]	@ (8001c38 <APPE_SysUserEvtRx+0x1f0>)
 8001b82:	f011 f807 	bl	8012b94 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001b86:	e040      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001b88:	4822      	ldr	r0, [pc, #136]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001b8a:	f00e fc01 	bl	8010390 <DbgTraceGetFileName>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	f240 137f 	movw	r3, #383	@ 0x17f
 8001b94:	4a20      	ldr	r2, [pc, #128]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001b96:	4821      	ldr	r0, [pc, #132]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001b98:	f010 fffc 	bl	8012b94 <iprintf>
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	3302      	adds	r3, #2
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4825      	ldr	r0, [pc, #148]	@ (8001c3c <APPE_SysUserEvtRx+0x1f4>)
 8001ba6:	f010 fff5 	bl	8012b94 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001baa:	e02e      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001bac:	4819      	ldr	r0, [pc, #100]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001bae:	f00e fbef 	bl	8010390 <DbgTraceGetFileName>
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001bb8:	4a17      	ldr	r2, [pc, #92]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001bba:	4818      	ldr	r0, [pc, #96]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001bbc:	f010 ffea 	bl	8012b94 <iprintf>
 8001bc0:	481f      	ldr	r0, [pc, #124]	@ (8001c40 <APPE_SysUserEvtRx+0x1f8>)
 8001bc2:	f010 ffe7 	bl	8012b94 <iprintf>
    break;
 8001bc6:	e020      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001bc8:	4812      	ldr	r0, [pc, #72]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001bca:	f00e fbe1 	bl	8010390 <DbgTraceGetFileName>
 8001bce:	4601      	mov	r1, r0
 8001bd0:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001bd4:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001bd6:	4811      	ldr	r0, [pc, #68]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001bd8:	f010 ffdc 	bl	8012b94 <iprintf>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	3302      	adds	r3, #2
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4619      	mov	r1, r3
 8001be4:	4817      	ldr	r0, [pc, #92]	@ (8001c44 <APPE_SysUserEvtRx+0x1fc>)
 8001be6:	f010 ffd5 	bl	8012b94 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 8001bea:	e00e      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001bec:	4809      	ldr	r0, [pc, #36]	@ (8001c14 <APPE_SysUserEvtRx+0x1cc>)
 8001bee:	f00e fbcf 	bl	8010390 <DbgTraceGetFileName>
 8001bf2:	4601      	mov	r1, r0
 8001bf4:	f240 138d 	movw	r3, #397	@ 0x18d
 8001bf8:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <APPE_SysUserEvtRx+0x1d0>)
 8001bfa:	4808      	ldr	r0, [pc, #32]	@ (8001c1c <APPE_SysUserEvtRx+0x1d4>)
 8001bfc:	f010 ffca 	bl	8012b94 <iprintf>
 8001c00:	4811      	ldr	r0, [pc, #68]	@ (8001c48 <APPE_SysUserEvtRx+0x200>)
 8001c02:	f010 ffc7 	bl	8012b94 <iprintf>
    break;
 8001c06:	e000      	b.n	8001c0a <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 8001c08:	bf00      	nop
  }

  return;
 8001c0a:	bf00      	nop
}
 8001c0c:	3720      	adds	r7, #32
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	08013f2c 	.word	0x08013f2c
 8001c18:	08015544 	.word	0x08015544
 8001c1c:	08013f44 	.word	0x08013f44
 8001c20:	08013f58 	.word	0x08013f58
 8001c24:	08013f7c 	.word	0x08013f7c
 8001c28:	08013f98 	.word	0x08013f98
 8001c2c:	08013fb0 	.word	0x08013fb0
 8001c30:	08013fd0 	.word	0x08013fd0
 8001c34:	08013ff4 	.word	0x08013ff4
 8001c38:	08014044 	.word	0x08014044
 8001c3c:	0801406c 	.word	0x0801406c
 8001c40:	080140a8 	.word	0x080140a8
 8001c44:	080140cc 	.word	0x080140cc
 8001c48:	08014108 	.word	0x08014108

08001c4c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	330b      	adds	r3, #11
 8001c5a:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3302      	adds	r3, #2
 8001c60:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001c62:	4819      	ldr	r0, [pc, #100]	@ (8001cc8 <APPE_SysEvtError+0x7c>)
 8001c64:	f00e fb94 	bl	8010390 <DbgTraceGetFileName>
 8001c68:	4601      	mov	r1, r0
 8001c6a:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8001c6e:	4a17      	ldr	r2, [pc, #92]	@ (8001ccc <APPE_SysEvtError+0x80>)
 8001c70:	4817      	ldr	r0, [pc, #92]	@ (8001cd0 <APPE_SysEvtError+0x84>)
 8001c72:	f010 ff8f 	bl	8012b94 <iprintf>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <APPE_SysEvtError+0x88>)
 8001c7e:	f010 ff89 	bl	8012b94 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d10d      	bne.n	8001ca6 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001c8a:	480f      	ldr	r0, [pc, #60]	@ (8001cc8 <APPE_SysEvtError+0x7c>)
 8001c8c:	f00e fb80 	bl	8010390 <DbgTraceGetFileName>
 8001c90:	4601      	mov	r1, r0
 8001c92:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001c96:	4a0d      	ldr	r2, [pc, #52]	@ (8001ccc <APPE_SysEvtError+0x80>)
 8001c98:	480d      	ldr	r0, [pc, #52]	@ (8001cd0 <APPE_SysEvtError+0x84>)
 8001c9a:	f010 ff7b 	bl	8012b94 <iprintf>
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <APPE_SysEvtError+0x8c>)
 8001ca0:	f010 ffe8 	bl	8012c74 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001ca4:	e00d      	b.n	8001cc2 <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001ca6:	4808      	ldr	r0, [pc, #32]	@ (8001cc8 <APPE_SysEvtError+0x7c>)
 8001ca8:	f00e fb72 	bl	8010390 <DbgTraceGetFileName>
 8001cac:	4601      	mov	r1, r0
 8001cae:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001cb2:	4a06      	ldr	r2, [pc, #24]	@ (8001ccc <APPE_SysEvtError+0x80>)
 8001cb4:	4806      	ldr	r0, [pc, #24]	@ (8001cd0 <APPE_SysEvtError+0x84>)
 8001cb6:	f010 ff6d 	bl	8012b94 <iprintf>
 8001cba:	4808      	ldr	r0, [pc, #32]	@ (8001cdc <APPE_SysEvtError+0x90>)
 8001cbc:	f010 ffda 	bl	8012c74 <puts>
  return;
 8001cc0:	bf00      	nop
}
 8001cc2:	3710      	adds	r7, #16
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08013f2c 	.word	0x08013f2c
 8001ccc:	08015558 	.word	0x08015558
 8001cd0:	08013f44 	.word	0x08013f44
 8001cd4:	0801412c 	.word	0x0801412c
 8001cd8:	0801415c 	.word	0x0801415c
 8001cdc:	08014198 	.word	0x08014198

08001ce0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	@ 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	330b      	adds	r3, #11
 8001d04:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3302      	adds	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d146      	bne.n	8001da2 <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001d14:	4836      	ldr	r0, [pc, #216]	@ (8001df0 <APPE_SysEvtReadyProcessing+0x110>)
 8001d16:	f00e fb3b 	bl	8010390 <DbgTraceGetFileName>
 8001d1a:	4601      	mov	r1, r0
 8001d1c:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001d20:	4a34      	ldr	r2, [pc, #208]	@ (8001df4 <APPE_SysEvtReadyProcessing+0x114>)
 8001d22:	4835      	ldr	r0, [pc, #212]	@ (8001df8 <APPE_SysEvtReadyProcessing+0x118>)
 8001d24:	f010 ff36 	bl	8012b94 <iprintf>
 8001d28:	4834      	ldr	r0, [pc, #208]	@ (8001dfc <APPE_SysEvtReadyProcessing+0x11c>)
 8001d2a:	f010 ffa3 	bl	8012c74 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001d2e:	f7ff fc07 	bl	8001540 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001d32:	230f      	movs	r3, #15
 8001d34:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001d36:	237f      	movs	r3, #127	@ 0x7f
 8001d38:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001d3a:	f7ff fce9 	bl	8001710 <LL_DBGMCU_GetRevisionID>
 8001d3e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001d40:	482b      	ldr	r0, [pc, #172]	@ (8001df0 <APPE_SysEvtReadyProcessing+0x110>)
 8001d42:	f00e fb25 	bl	8010390 <DbgTraceGetFileName>
 8001d46:	4601      	mov	r1, r0
 8001d48:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001d4c:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <APPE_SysEvtReadyProcessing+0x114>)
 8001d4e:	482a      	ldr	r0, [pc, #168]	@ (8001df8 <APPE_SysEvtReadyProcessing+0x118>)
 8001d50:	f010 ff20 	bl	8012b94 <iprintf>
 8001d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d56:	482a      	ldr	r0, [pc, #168]	@ (8001e00 <APPE_SysEvtReadyProcessing+0x120>)
 8001d58:	f010 ff1c 	bl	8012b94 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001d62:	f7ff fcc7 	bl	80016f4 <LL_DBGMCU_GetDeviceID>
 8001d66:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001d68:	4821      	ldr	r0, [pc, #132]	@ (8001df0 <APPE_SysEvtReadyProcessing+0x110>)
 8001d6a:	f00e fb11 	bl	8010390 <DbgTraceGetFileName>
 8001d6e:	4601      	mov	r1, r0
 8001d70:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <APPE_SysEvtReadyProcessing+0x114>)
 8001d76:	4820      	ldr	r0, [pc, #128]	@ (8001df8 <APPE_SysEvtReadyProcessing+0x118>)
 8001d78:	f010 ff0c 	bl	8012b94 <iprintf>
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	4821      	ldr	r0, [pc, #132]	@ (8001e04 <APPE_SysEvtReadyProcessing+0x124>)
 8001d80:	f010 ff08 	bl	8012b94 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f00d fd1e 	bl	800f7d0 <SHCI_C2_Config>

    APP_BLE_Init();
 8001d94:	f00e fc2e 	bl	80105f4 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f010 fbce 	bl	801253c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001da0:	e022      	b.n	8001de8 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d110      	bne.n	8001dcc <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001daa:	4811      	ldr	r0, [pc, #68]	@ (8001df0 <APPE_SysEvtReadyProcessing+0x110>)
 8001dac:	f00e faf0 	bl	8010390 <DbgTraceGetFileName>
 8001db0:	4601      	mov	r1, r0
 8001db2:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001db6:	4a0f      	ldr	r2, [pc, #60]	@ (8001df4 <APPE_SysEvtReadyProcessing+0x114>)
 8001db8:	480f      	ldr	r0, [pc, #60]	@ (8001df8 <APPE_SysEvtReadyProcessing+0x118>)
 8001dba:	f010 feeb 	bl	8012b94 <iprintf>
 8001dbe:	4812      	ldr	r0, [pc, #72]	@ (8001e08 <APPE_SysEvtReadyProcessing+0x128>)
 8001dc0:	f010 fee8 	bl	8012b94 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	701a      	strb	r2, [r3, #0]
  return;
 8001dca:	e00d      	b.n	8001de8 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001dcc:	4808      	ldr	r0, [pc, #32]	@ (8001df0 <APPE_SysEvtReadyProcessing+0x110>)
 8001dce:	f00e fadf 	bl	8010390 <DbgTraceGetFileName>
 8001dd2:	4601      	mov	r1, r0
 8001dd4:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <APPE_SysEvtReadyProcessing+0x114>)
 8001dda:	4807      	ldr	r0, [pc, #28]	@ (8001df8 <APPE_SysEvtReadyProcessing+0x118>)
 8001ddc:	f010 feda 	bl	8012b94 <iprintf>
 8001de0:	480a      	ldr	r0, [pc, #40]	@ (8001e0c <APPE_SysEvtReadyProcessing+0x12c>)
 8001de2:	f010 fed7 	bl	8012b94 <iprintf>
  return;
 8001de6:	bf00      	nop
}
 8001de8:	3728      	adds	r7, #40	@ 0x28
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	08013f2c 	.word	0x08013f2c
 8001df4:	0801556c 	.word	0x0801556c
 8001df8:	08013f44 	.word	0x08013f44
 8001dfc:	080141d0 	.word	0x080141d0
 8001e00:	080141ec 	.word	0x080141ec
 8001e04:	08014210 	.word	0x08014210
 8001e08:	08014230 	.word	0x08014230
 8001e0c:	08014264 	.word	0x08014264

08001e10 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e18:	f006 fcd2 	bl	80087c0 <HAL_GetTick>
 8001e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e28:	d00a      	beq.n	8001e40 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001e2a:	f006 fce1 	bl	80087f0 <HAL_GetTickFreq>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	461a      	mov	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	4413      	add	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e38:	e002      	b.n	8001e40 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001e3a:	f7ff fcd9 	bl	80017f0 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001e3e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001e40:	f006 fcbe 	bl	80087c0 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d8f4      	bhi.n	8001e3a <HAL_Delay+0x2a>
  }
}
 8001e50:	bf00      	nop
 8001e52:	bf00      	nop
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	f010 fb9b 	bl	801259c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001e6e:	bf00      	nop
}
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001e82:	f04f 30ff 	mov.w	r0, #4294967295
 8001e86:	f010 fb89 	bl	801259c <UTIL_SEQ_Run>
  return;
 8001e8a:	bf00      	nop
}
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	2008      	movs	r0, #8
 8001e9e:	f010 fc9b 	bl	80127d8 <UTIL_SEQ_SetTask>
  return;
 8001ea2:	bf00      	nop
}
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b082      	sub	sp, #8
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001eb2:	2002      	movs	r0, #2
 8001eb4:	f010 fcfc 	bl	80128b0 <UTIL_SEQ_SetEvt>
  return;
 8001eb8:	bf00      	nop
}
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ec8:	2002      	movs	r0, #2
 8001eca:	f010 fd11 	bl	80128f0 <UTIL_SEQ_WaitEvt>
  return;
 8001ece:	bf00      	nop
}
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <LL_EXTI_EnableIT_0_31>:
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ee0:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <LL_EXTI_EnableIT_0_31+0x24>)
 8001ee2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ee6:	4905      	ldr	r1, [pc, #20]	@ (8001efc <LL_EXTI_EnableIT_0_31+0x24>)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	58000800 	.word	0x58000800

08001f00 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001f08:	4b05      	ldr	r3, [pc, #20]	@ (8001f20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4904      	ldr	r1, [pc, #16]	@ (8001f20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	600b      	str	r3, [r1, #0]

}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	58000800 	.word	0x58000800

08001f24 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <ReadRtcSsrValue+0x3c>)
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001f32:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <ReadRtcSsrValue+0x3c>)
 8001f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001f3a:	e005      	b.n	8001f48 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001f40:	4b07      	ldr	r3, [pc, #28]	@ (8001f60 <ReadRtcSsrValue+0x3c>)
 8001f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d1f5      	bne.n	8001f3c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001f50:	683b      	ldr	r3, [r7, #0]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40002800 	.word	0x40002800

08001f64 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	460a      	mov	r2, r1
 8001f6e:	71fb      	strb	r3, [r7, #7]
 8001f70:	4613      	mov	r3, r2
 8001f72:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001f74:	79ba      	ldrb	r2, [r7, #6]
 8001f76:	491d      	ldr	r1, [pc, #116]	@ (8001fec <LinkTimerAfter+0x88>)
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	440b      	add	r3, r1
 8001f82:	3315      	adds	r3, #21
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d009      	beq.n	8001fa2 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001f8e:	7bfa      	ldrb	r2, [r7, #15]
 8001f90:	4916      	ldr	r1, [pc, #88]	@ (8001fec <LinkTimerAfter+0x88>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3314      	adds	r3, #20
 8001f9e:	79fa      	ldrb	r2, [r7, #7]
 8001fa0:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001fa2:	79fa      	ldrb	r2, [r7, #7]
 8001fa4:	4911      	ldr	r1, [pc, #68]	@ (8001fec <LinkTimerAfter+0x88>)
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4413      	add	r3, r2
 8001fac:	00db      	lsls	r3, r3, #3
 8001fae:	440b      	add	r3, r1
 8001fb0:	3315      	adds	r3, #21
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001fb6:	79fa      	ldrb	r2, [r7, #7]
 8001fb8:	490c      	ldr	r1, [pc, #48]	@ (8001fec <LinkTimerAfter+0x88>)
 8001fba:	4613      	mov	r3, r2
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	3314      	adds	r3, #20
 8001fc6:	79ba      	ldrb	r2, [r7, #6]
 8001fc8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001fca:	79ba      	ldrb	r2, [r7, #6]
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <LinkTimerAfter+0x88>)
 8001fce:	4613      	mov	r3, r2
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3315      	adds	r3, #21
 8001fda:	79fa      	ldrb	r2, [r7, #7]
 8001fdc:	701a      	strb	r2, [r3, #0]

  return;
 8001fde:	bf00      	nop
}
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	20000238 	.word	0x20000238

08001ff0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	460a      	mov	r2, r1
 8001ffa:	71fb      	strb	r3, [r7, #7]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002000:	4b29      	ldr	r3, [pc, #164]	@ (80020a8 <LinkTimerBefore+0xb8>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	79ba      	ldrb	r2, [r7, #6]
 8002008:	429a      	cmp	r2, r3
 800200a:	d032      	beq.n	8002072 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 800200c:	79ba      	ldrb	r2, [r7, #6]
 800200e:	4927      	ldr	r1, [pc, #156]	@ (80020ac <LinkTimerBefore+0xbc>)
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	440b      	add	r3, r1
 800201a:	3314      	adds	r3, #20
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	4922      	ldr	r1, [pc, #136]	@ (80020ac <LinkTimerBefore+0xbc>)
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	440b      	add	r3, r1
 800202e:	3315      	adds	r3, #21
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002034:	79fa      	ldrb	r2, [r7, #7]
 8002036:	491d      	ldr	r1, [pc, #116]	@ (80020ac <LinkTimerBefore+0xbc>)
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	440b      	add	r3, r1
 8002042:	3315      	adds	r3, #21
 8002044:	79ba      	ldrb	r2, [r7, #6]
 8002046:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	4918      	ldr	r1, [pc, #96]	@ (80020ac <LinkTimerBefore+0xbc>)
 800204c:	4613      	mov	r3, r2
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	4413      	add	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	440b      	add	r3, r1
 8002056:	3314      	adds	r3, #20
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800205c:	79ba      	ldrb	r2, [r7, #6]
 800205e:	4913      	ldr	r1, [pc, #76]	@ (80020ac <LinkTimerBefore+0xbc>)
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3314      	adds	r3, #20
 800206c:	79fa      	ldrb	r2, [r7, #7]
 800206e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002070:	e014      	b.n	800209c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002072:	79fa      	ldrb	r2, [r7, #7]
 8002074:	490d      	ldr	r1, [pc, #52]	@ (80020ac <LinkTimerBefore+0xbc>)
 8002076:	4613      	mov	r3, r2
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	3315      	adds	r3, #21
 8002082:	79ba      	ldrb	r2, [r7, #6]
 8002084:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002086:	79ba      	ldrb	r2, [r7, #6]
 8002088:	4908      	ldr	r1, [pc, #32]	@ (80020ac <LinkTimerBefore+0xbc>)
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	440b      	add	r3, r1
 8002094:	3314      	adds	r3, #20
 8002096:	79fa      	ldrb	r2, [r7, #7]
 8002098:	701a      	strb	r2, [r3, #0]
  return;
 800209a:	bf00      	nop
}
 800209c:	3714      	adds	r7, #20
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	200002c8 	.word	0x200002c8
 80020ac:	20000238 	.word	0x20000238

080020b0 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ba:	4b4e      	ldr	r3, [pc, #312]	@ (80021f4 <linkTimer+0x144>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d118      	bne.n	80020f6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80020c4:	4b4b      	ldr	r3, [pc, #300]	@ (80021f4 <linkTimer+0x144>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b2da      	uxtb	r2, r3
 80020ca:	4b4b      	ldr	r3, [pc, #300]	@ (80021f8 <linkTimer+0x148>)
 80020cc:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80020ce:	4a49      	ldr	r2, [pc, #292]	@ (80021f4 <linkTimer+0x144>)
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	4949      	ldr	r1, [pc, #292]	@ (80021fc <linkTimer+0x14c>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3315      	adds	r3, #21
 80020e4:	2206      	movs	r2, #6
 80020e6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020e8:	4b45      	ldr	r3, [pc, #276]	@ (8002200 <linkTimer+0x150>)
 80020ea:	f04f 32ff 	mov.w	r2, #4294967295
 80020ee:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	e078      	b.n	80021e8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80020f6:	f000 f909 	bl	800230c <ReturnTimeElapsed>
 80020fa:	4603      	mov	r3, r0
 80020fc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80020fe:	79fa      	ldrb	r2, [r7, #7]
 8002100:	493e      	ldr	r1, [pc, #248]	@ (80021fc <linkTimer+0x14c>)
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3308      	adds	r3, #8
 800210e:	6819      	ldr	r1, [r3, #0]
 8002110:	89fb      	ldrh	r3, [r7, #14]
 8002112:	79fa      	ldrb	r2, [r7, #7]
 8002114:	4419      	add	r1, r3
 8002116:	4839      	ldr	r0, [pc, #228]	@ (80021fc <linkTimer+0x14c>)
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4403      	add	r3, r0
 8002122:	3308      	adds	r3, #8
 8002124:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002126:	79fa      	ldrb	r2, [r7, #7]
 8002128:	4934      	ldr	r1, [pc, #208]	@ (80021fc <linkTimer+0x14c>)
 800212a:	4613      	mov	r3, r2
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	4413      	add	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	440b      	add	r3, r1
 8002134:	3308      	adds	r3, #8
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 800213a:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <linkTimer+0x144>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	4619      	mov	r1, r3
 8002142:	4a2e      	ldr	r2, [pc, #184]	@ (80021fc <linkTimer+0x14c>)
 8002144:	460b      	mov	r3, r1
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	440b      	add	r3, r1
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	3308      	adds	r3, #8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	429a      	cmp	r2, r3
 8002156:	d337      	bcc.n	80021c8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002158:	4b26      	ldr	r3, [pc, #152]	@ (80021f4 <linkTimer+0x144>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 800215e:	7b7a      	ldrb	r2, [r7, #13]
 8002160:	4926      	ldr	r1, [pc, #152]	@ (80021fc <linkTimer+0x14c>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	00db      	lsls	r3, r3, #3
 800216a:	440b      	add	r3, r1
 800216c:	3315      	adds	r3, #21
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002172:	e013      	b.n	800219c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002174:	7b7a      	ldrb	r2, [r7, #13]
 8002176:	4921      	ldr	r1, [pc, #132]	@ (80021fc <linkTimer+0x14c>)
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	440b      	add	r3, r1
 8002182:	3315      	adds	r3, #21
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002188:	7b7a      	ldrb	r2, [r7, #13]
 800218a:	491c      	ldr	r1, [pc, #112]	@ (80021fc <linkTimer+0x14c>)
 800218c:	4613      	mov	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3315      	adds	r3, #21
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800219c:	7b3b      	ldrb	r3, [r7, #12]
 800219e:	2b06      	cmp	r3, #6
 80021a0:	d00b      	beq.n	80021ba <linkTimer+0x10a>
 80021a2:	7b3a      	ldrb	r2, [r7, #12]
 80021a4:	4915      	ldr	r1, [pc, #84]	@ (80021fc <linkTimer+0x14c>)
 80021a6:	4613      	mov	r3, r2
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	440b      	add	r3, r1
 80021b0:	3308      	adds	r3, #8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	68ba      	ldr	r2, [r7, #8]
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d2dc      	bcs.n	8002174 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80021ba:	7b7a      	ldrb	r2, [r7, #13]
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7ff fecf 	bl	8001f64 <LinkTimerAfter>
 80021c6:	e00f      	b.n	80021e8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80021c8:	4b0a      	ldr	r3, [pc, #40]	@ (80021f4 <linkTimer+0x144>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	4611      	mov	r1, r2
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff0c 	bl	8001ff0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80021d8:	4b06      	ldr	r3, [pc, #24]	@ (80021f4 <linkTimer+0x144>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	@ (80021f8 <linkTimer+0x148>)
 80021e0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80021e2:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <linkTimer+0x144>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80021e8:	89fb      	ldrh	r3, [r7, #14]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	200002c8 	.word	0x200002c8
 80021f8:	200002c9 	.word	0x200002c9
 80021fc:	20000238 	.word	0x20000238
 8002200:	200002cc 	.word	0x200002cc

08002204 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	460a      	mov	r2, r1
 800220e:	71fb      	strb	r3, [r7, #7]
 8002210:	4613      	mov	r3, r2
 8002212:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002214:	4b39      	ldr	r3, [pc, #228]	@ (80022fc <UnlinkTimer+0xf8>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	b2db      	uxtb	r3, r3
 800221a:	79fa      	ldrb	r2, [r7, #7]
 800221c:	429a      	cmp	r2, r3
 800221e:	d111      	bne.n	8002244 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002220:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <UnlinkTimer+0xf8>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <UnlinkTimer+0xfc>)
 8002228:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800222a:	79fa      	ldrb	r2, [r7, #7]
 800222c:	4935      	ldr	r1, [pc, #212]	@ (8002304 <UnlinkTimer+0x100>)
 800222e:	4613      	mov	r3, r2
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	4413      	add	r3, r2
 8002234:	00db      	lsls	r3, r3, #3
 8002236:	440b      	add	r3, r1
 8002238:	3315      	adds	r3, #21
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b2da      	uxtb	r2, r3
 800223e:	4b2f      	ldr	r3, [pc, #188]	@ (80022fc <UnlinkTimer+0xf8>)
 8002240:	701a      	strb	r2, [r3, #0]
 8002242:	e03e      	b.n	80022c2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002244:	79fa      	ldrb	r2, [r7, #7]
 8002246:	492f      	ldr	r1, [pc, #188]	@ (8002304 <UnlinkTimer+0x100>)
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	440b      	add	r3, r1
 8002252:	3314      	adds	r3, #20
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002258:	79fa      	ldrb	r2, [r7, #7]
 800225a:	492a      	ldr	r1, [pc, #168]	@ (8002304 <UnlinkTimer+0x100>)
 800225c:	4613      	mov	r3, r2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4413      	add	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	440b      	add	r3, r1
 8002266:	3315      	adds	r3, #21
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 800226c:	79f9      	ldrb	r1, [r7, #7]
 800226e:	7bfa      	ldrb	r2, [r7, #15]
 8002270:	4824      	ldr	r0, [pc, #144]	@ (8002304 <UnlinkTimer+0x100>)
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4403      	add	r3, r0
 800227c:	3315      	adds	r3, #21
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b2d8      	uxtb	r0, r3
 8002282:	4920      	ldr	r1, [pc, #128]	@ (8002304 <UnlinkTimer+0x100>)
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	440b      	add	r3, r1
 800228e:	3315      	adds	r3, #21
 8002290:	4602      	mov	r2, r0
 8002292:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	2b06      	cmp	r3, #6
 8002298:	d013      	beq.n	80022c2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 800229a:	79f9      	ldrb	r1, [r7, #7]
 800229c:	7bba      	ldrb	r2, [r7, #14]
 800229e:	4819      	ldr	r0, [pc, #100]	@ (8002304 <UnlinkTimer+0x100>)
 80022a0:	460b      	mov	r3, r1
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	440b      	add	r3, r1
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4403      	add	r3, r0
 80022aa:	3314      	adds	r3, #20
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b2d8      	uxtb	r0, r3
 80022b0:	4914      	ldr	r1, [pc, #80]	@ (8002304 <UnlinkTimer+0x100>)
 80022b2:	4613      	mov	r3, r2
 80022b4:	005b      	lsls	r3, r3, #1
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	3314      	adds	r3, #20
 80022be:	4602      	mov	r2, r0
 80022c0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80022c2:	79fa      	ldrb	r2, [r7, #7]
 80022c4:	490f      	ldr	r1, [pc, #60]	@ (8002304 <UnlinkTimer+0x100>)
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	330c      	adds	r3, #12
 80022d2:	2201      	movs	r2, #1
 80022d4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80022d6:	4b09      	ldr	r3, [pc, #36]	@ (80022fc <UnlinkTimer+0xf8>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b06      	cmp	r3, #6
 80022de:	d107      	bne.n	80022f0 <UnlinkTimer+0xec>
 80022e0:	79bb      	ldrb	r3, [r7, #6]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d104      	bne.n	80022f0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80022e6:	4b08      	ldr	r3, [pc, #32]	@ (8002308 <UnlinkTimer+0x104>)
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	601a      	str	r2, [r3, #0]
  }

  return;
 80022ee:	bf00      	nop
 80022f0:	bf00      	nop
}
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	200002c8 	.word	0x200002c8
 8002300:	200002c9 	.word	0x200002c9
 8002304:	20000238 	.word	0x20000238
 8002308:	200002cc 	.word	0x200002cc

0800230c <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002312:	4b1a      	ldr	r3, [pc, #104]	@ (800237c <ReturnTimeElapsed+0x70>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231a:	d026      	beq.n	800236a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 800231c:	f7ff fe02 	bl	8001f24 <ReadRtcSsrValue>
 8002320:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002322:	4b16      	ldr	r3, [pc, #88]	@ (800237c <ReturnTimeElapsed+0x70>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	429a      	cmp	r2, r3
 800232a:	d805      	bhi.n	8002338 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 800232c:	4b13      	ldr	r3, [pc, #76]	@ (800237c <ReturnTimeElapsed+0x70>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e00a      	b.n	800234e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <ReturnTimeElapsed+0x74>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002344:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <ReturnTimeElapsed+0x70>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	4413      	add	r3, r2
 800234c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <ReturnTimeElapsed+0x78>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <ReturnTimeElapsed+0x7c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	40d3      	lsrs	r3, r2
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	e001      	b.n	800236e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	b29b      	uxth	r3, r3
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200002cc 	.word	0x200002cc
 8002380:	200002d4 	.word	0x200002d4
 8002384:	200002d2 	.word	0x200002d2
 8002388:	200002d1 	.word	0x200002d1

0800238c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002396:	88fb      	ldrh	r3, [r7, #6]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d108      	bne.n	80023ae <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800239c:	f7ff fdc2 	bl	8001f24 <ReadRtcSsrValue>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a21      	ldr	r2, [pc, #132]	@ (8002428 <RestartWakeupCounter+0x9c>)
 80023a4:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023a6:	2003      	movs	r0, #3
 80023a8:	f007 fd8b 	bl	8009ec2 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80023ac:	e039      	b.n	8002422 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80023ae:	88fb      	ldrh	r3, [r7, #6]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d803      	bhi.n	80023bc <RestartWakeupCounter+0x30>
 80023b4:	4b1d      	ldr	r3, [pc, #116]	@ (800242c <RestartWakeupCounter+0xa0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d002      	beq.n	80023c2 <RestartWakeupCounter+0x36>
      Value -= 1;
 80023bc:	88fb      	ldrh	r3, [r7, #6]
 80023be:	3b01      	subs	r3, #1
 80023c0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80023c2:	bf00      	nop
 80023c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002430 <RestartWakeupCounter+0xa4>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f8      	beq.n	80023c4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80023d2:	4b17      	ldr	r3, [pc, #92]	@ (8002430 <RestartWakeupCounter+0xa4>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	4b15      	ldr	r3, [pc, #84]	@ (8002430 <RestartWakeupCounter+0xa4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80023e2:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80023e4:	4b13      	ldr	r3, [pc, #76]	@ (8002434 <RestartWakeupCounter+0xa8>)
 80023e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80023ea:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80023ec:	2003      	movs	r0, #3
 80023ee:	f007 fd76 	bl	8009ede <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80023f2:	4b11      	ldr	r3, [pc, #68]	@ (8002438 <RestartWakeupCounter+0xac>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	041b      	lsls	r3, r3, #16
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	490e      	ldr	r1, [pc, #56]	@ (8002438 <RestartWakeupCounter+0xac>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002402:	f7ff fd8f 	bl	8001f24 <ReadRtcSsrValue>
 8002406:	4603      	mov	r3, r0
 8002408:	4a07      	ldr	r2, [pc, #28]	@ (8002428 <RestartWakeupCounter+0x9c>)
 800240a:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <RestartWakeupCounter+0xa4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	4b07      	ldr	r3, [pc, #28]	@ (8002430 <RestartWakeupCounter+0xa4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800241a:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 800241c:	f3af 8000 	nop.w
  return ;
 8002420:	bf00      	nop
}
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200002cc 	.word	0x200002cc
 800242c:	200002d1 	.word	0x200002d1
 8002430:	20000378 	.word	0x20000378
 8002434:	58000800 	.word	0x58000800
 8002438:	40002800 	.word	0x40002800

0800243c <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002442:	4b45      	ldr	r3, [pc, #276]	@ (8002558 <RescheduleTimerList+0x11c>)
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800244a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244e:	d107      	bne.n	8002460 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002450:	bf00      	nop
 8002452:	4b42      	ldr	r3, [pc, #264]	@ (800255c <RescheduleTimerList+0x120>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f003 0304 	and.w	r3, r3, #4
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f8      	bne.n	8002452 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002460:	4b3e      	ldr	r3, [pc, #248]	@ (800255c <RescheduleTimerList+0x120>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	4b3d      	ldr	r3, [pc, #244]	@ (800255c <RescheduleTimerList+0x120>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800246e:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002470:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <RescheduleTimerList+0x124>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	493a      	ldr	r1, [pc, #232]	@ (8002564 <RescheduleTimerList+0x128>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	3308      	adds	r3, #8
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 800248a:	f7ff ff3f 	bl	800230c <ReturnTimeElapsed>
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	68ba      	ldr	r2, [r7, #8]
 8002496:	429a      	cmp	r2, r3
 8002498:	d205      	bcs.n	80024a6 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800249e:	4b32      	ldr	r3, [pc, #200]	@ (8002568 <RescheduleTimerList+0x12c>)
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]
 80024a4:	e04d      	b.n	8002542 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80024a6:	88fb      	ldrh	r3, [r7, #6]
 80024a8:	4a30      	ldr	r2, [pc, #192]	@ (800256c <RescheduleTimerList+0x130>)
 80024aa:	8812      	ldrh	r2, [r2, #0]
 80024ac:	b292      	uxth	r2, r2
 80024ae:	4413      	add	r3, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d906      	bls.n	80024c6 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80024b8:	4b2c      	ldr	r3, [pc, #176]	@ (800256c <RescheduleTimerList+0x130>)
 80024ba:	881b      	ldrh	r3, [r3, #0]
 80024bc:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80024be:	4b2a      	ldr	r3, [pc, #168]	@ (8002568 <RescheduleTimerList+0x12c>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	701a      	strb	r2, [r3, #0]
 80024c4:	e03d      	b.n	8002542 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80024d0:	4b25      	ldr	r3, [pc, #148]	@ (8002568 <RescheduleTimerList+0x12c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80024d6:	e034      	b.n	8002542 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80024d8:	7bfa      	ldrb	r2, [r7, #15]
 80024da:	4922      	ldr	r1, [pc, #136]	@ (8002564 <RescheduleTimerList+0x128>)
 80024dc:	4613      	mov	r3, r2
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	4413      	add	r3, r2
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	440b      	add	r3, r1
 80024e6:	3308      	adds	r3, #8
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d20a      	bcs.n	8002506 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80024f0:	7bfa      	ldrb	r2, [r7, #15]
 80024f2:	491c      	ldr	r1, [pc, #112]	@ (8002564 <RescheduleTimerList+0x128>)
 80024f4:	4613      	mov	r3, r2
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	4413      	add	r3, r2
 80024fa:	00db      	lsls	r3, r3, #3
 80024fc:	440b      	add	r3, r1
 80024fe:	3308      	adds	r3, #8
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e013      	b.n	800252e <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8002506:	7bfa      	ldrb	r2, [r7, #15]
 8002508:	4916      	ldr	r1, [pc, #88]	@ (8002564 <RescheduleTimerList+0x128>)
 800250a:	4613      	mov	r3, r2
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	4413      	add	r3, r2
 8002510:	00db      	lsls	r3, r3, #3
 8002512:	440b      	add	r3, r1
 8002514:	3308      	adds	r3, #8
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	7bfa      	ldrb	r2, [r7, #15]
 800251c:	1ac9      	subs	r1, r1, r3
 800251e:	4811      	ldr	r0, [pc, #68]	@ (8002564 <RescheduleTimerList+0x128>)
 8002520:	4613      	mov	r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4413      	add	r3, r2
 8002526:	00db      	lsls	r3, r3, #3
 8002528:	4403      	add	r3, r0
 800252a:	3308      	adds	r3, #8
 800252c:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	490c      	ldr	r1, [pc, #48]	@ (8002564 <RescheduleTimerList+0x128>)
 8002532:	4613      	mov	r3, r2
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	4413      	add	r3, r2
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	440b      	add	r3, r1
 800253c:	3315      	adds	r3, #21
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d1c7      	bne.n	80024d8 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002548:	89bb      	ldrh	r3, [r7, #12]
 800254a:	4618      	mov	r0, r3
 800254c:	f7ff ff1e 	bl	800238c <RestartWakeupCounter>

  return ;
 8002550:	bf00      	nop
}
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40002800 	.word	0x40002800
 800255c:	20000378 	.word	0x20000378
 8002560:	200002c8 	.word	0x200002c8
 8002564:	20000238 	.word	0x20000238
 8002568:	200002d0 	.word	0x200002d0
 800256c:	200002d6 	.word	0x200002d6

08002570 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	@ 0x28
 8002574:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002576:	f3ef 8310 	mrs	r3, PRIMASK
 800257a:	617b      	str	r3, [r7, #20]
  return(result);
 800257c:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800257e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002580:	b672      	cpsid	i
}
 8002582:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002584:	4b59      	ldr	r3, [pc, #356]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	22ca      	movs	r2, #202	@ 0xca
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24
 800258c:	4b57      	ldr	r3, [pc, #348]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2253      	movs	r2, #83	@ 0x53
 8002592:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002594:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	4b54      	ldr	r3, [pc, #336]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025a2:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80025ac:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80025b0:	4950      	ldr	r1, [pc, #320]	@ (80026f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80025b2:	4613      	mov	r3, r2
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	4413      	add	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	440b      	add	r3, r1
 80025bc:	330c      	adds	r3, #12
 80025be:	781b      	ldrb	r3, [r3, #0]
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d16e      	bne.n	80026a4 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80025c6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80025ca:	494a      	ldr	r1, [pc, #296]	@ (80026f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80025da:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80025de:	4945      	ldr	r1, [pc, #276]	@ (80026f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80025e0:	4613      	mov	r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4413      	add	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	440b      	add	r3, r1
 80025ea:	3310      	adds	r3, #16
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80025f0:	4b41      	ldr	r3, [pc, #260]	@ (80026f8 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d04c      	beq.n	8002694 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80025fa:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80025fe:	493d      	ldr	r1, [pc, #244]	@ (80026f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	440b      	add	r3, r1
 800260a:	330d      	adds	r3, #13
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d124      	bne.n	800265e <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002614:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002618:	2101      	movs	r1, #1
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fdf2 	bl	8002204 <UnlinkTimer>
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	f383 8810 	msr	PRIMASK, r3
}
 800262a:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800262c:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002630:	4930      	ldr	r1, [pc, #192]	@ (80026f4 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	440b      	add	r3, r1
 800263c:	3304      	adds	r3, #4
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f000 f9b8 	bl	80029bc <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800264c:	4b27      	ldr	r3, [pc, #156]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	22ca      	movs	r2, #202	@ 0xca
 8002652:	625a      	str	r2, [r3, #36]	@ 0x24
 8002654:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2253      	movs	r2, #83	@ 0x53
 800265a:	625a      	str	r2, [r3, #36]	@ 0x24
 800265c:	e012      	b.n	8002684 <HW_TS_RTC_Wakeup_Handler+0x114>
 800265e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f383 8810 	msr	PRIMASK, r3
}
 8002668:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 800266a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800266e:	4618      	mov	r0, r3
 8002670:	f000 f920 	bl	80028b4 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002674:	4b1d      	ldr	r3, [pc, #116]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	22ca      	movs	r2, #202	@ 0xca
 800267a:	625a      	str	r2, [r3, #36]	@ 0x24
 800267c:	4b1b      	ldr	r3, [pc, #108]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2253      	movs	r2, #83	@ 0x53
 8002682:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002684:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002688:	69fa      	ldr	r2, [r7, #28]
 800268a:	4619      	mov	r1, r3
 800268c:	69b8      	ldr	r0, [r7, #24]
 800268e:	f000 fa1b 	bl	8002ac8 <HW_TS_RTC_Int_AppNot>
 8002692:	e022      	b.n	80026da <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002694:	f7ff fed2 	bl	800243c <RescheduleTimerList>
 8002698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	f383 8810 	msr	PRIMASK, r3
}
 80026a2:	e01a      	b.n	80026da <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026a4:	bf00      	nop
 80026a6:	4b11      	ldr	r3, [pc, #68]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f8      	beq.n	80026a6 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80026b4:	4b0d      	ldr	r3, [pc, #52]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	b2da      	uxtb	r2, r3
 80026bc:	4b0b      	ldr	r3, [pc, #44]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80026c4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80026c8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f383 8810 	msr	PRIMASK, r3
}
 80026d8:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026da:	4b04      	ldr	r3, [pc, #16]	@ (80026ec <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	22ff      	movs	r2, #255	@ 0xff
 80026e0:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 80026e2:	bf00      	nop
}
 80026e4:	3728      	adds	r7, #40	@ 0x28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000378 	.word	0x20000378
 80026f0:	200002c8 	.word	0x200002c8
 80026f4:	20000238 	.word	0x20000238
 80026f8:	200002d0 	.word	0x200002d0
 80026fc:	58000800 	.word	0x58000800

08002700 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	6039      	str	r1, [r7, #0]
 800270a:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800270c:	4b5e      	ldr	r3, [pc, #376]	@ (8002888 <HW_TS_Init+0x188>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	22ca      	movs	r2, #202	@ 0xca
 8002712:	625a      	str	r2, [r3, #36]	@ 0x24
 8002714:	4b5c      	ldr	r3, [pc, #368]	@ (8002888 <HW_TS_Init+0x188>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2253      	movs	r2, #83	@ 0x53
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800271c:	4b5b      	ldr	r3, [pc, #364]	@ (800288c <HW_TS_Init+0x18c>)
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	4a5a      	ldr	r2, [pc, #360]	@ (800288c <HW_TS_Init+0x18c>)
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8002728:	4b58      	ldr	r3, [pc, #352]	@ (800288c <HW_TS_Init+0x18c>)
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f1c3 0304 	rsb	r3, r3, #4
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b55      	ldr	r3, [pc, #340]	@ (8002890 <HW_TS_Init+0x190>)
 800273c:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800273e:	4b53      	ldr	r3, [pc, #332]	@ (800288c <HW_TS_Init+0x18c>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002746:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 800274a:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	fa92 f2a2 	rbit	r2, r2
 8002752:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002758:	697a      	ldr	r2, [r7, #20]
 800275a:	2a00      	cmp	r2, #0
 800275c:	d101      	bne.n	8002762 <HW_TS_Init+0x62>
  {
    return 32U;
 800275e:	2220      	movs	r2, #32
 8002760:	e003      	b.n	800276a <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	fab2 f282 	clz	r2, r2
 8002768:	b2d2      	uxtb	r2, r2
 800276a:	40d3      	lsrs	r3, r2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	3301      	adds	r3, #1
 8002770:	b2da      	uxtb	r2, r3
 8002772:	4b48      	ldr	r3, [pc, #288]	@ (8002894 <HW_TS_Init+0x194>)
 8002774:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002776:	4b45      	ldr	r3, [pc, #276]	@ (800288c <HW_TS_Init+0x18c>)
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	b29b      	uxth	r3, r3
 800277c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002780:	b29b      	uxth	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	4b44      	ldr	r3, [pc, #272]	@ (8002898 <HW_TS_Init+0x198>)
 8002788:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 800278a:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HW_TS_Init+0x198>)
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	3b01      	subs	r3, #1
 8002790:	4a40      	ldr	r2, [pc, #256]	@ (8002894 <HW_TS_Init+0x194>)
 8002792:	7812      	ldrb	r2, [r2, #0]
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800279c:	4a3c      	ldr	r2, [pc, #240]	@ (8002890 <HW_TS_Init+0x190>)
 800279e:	7812      	ldrb	r2, [r2, #0]
 80027a0:	40d3      	lsrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d904      	bls.n	80027b8 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80027ae:	4b3b      	ldr	r3, [pc, #236]	@ (800289c <HW_TS_Init+0x19c>)
 80027b0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80027b4:	801a      	strh	r2, [r3, #0]
 80027b6:	e003      	b.n	80027c0 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b37      	ldr	r3, [pc, #220]	@ (800289c <HW_TS_Init+0x19c>)
 80027be:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80027c0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027c4:	f7ff fb9c 	bl	8001f00 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80027c8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80027cc:	f7ff fb84 	bl	8001ed8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80027d0:	79fb      	ldrb	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d13d      	bne.n	8002852 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80027d6:	4b32      	ldr	r3, [pc, #200]	@ (80028a0 <HW_TS_Init+0x1a0>)
 80027d8:	2201      	movs	r2, #1
 80027da:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80027dc:	4b31      	ldr	r3, [pc, #196]	@ (80028a4 <HW_TS_Init+0x1a4>)
 80027de:	f04f 32ff 	mov.w	r2, #4294967295
 80027e2:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e00c      	b.n	8002804 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80027ea:	7ffa      	ldrb	r2, [r7, #31]
 80027ec:	492e      	ldr	r1, [pc, #184]	@ (80028a8 <HW_TS_Init+0x1a8>)
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	440b      	add	r3, r1
 80027f8:	330c      	adds	r3, #12
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80027fe:	7ffb      	ldrb	r3, [r7, #31]
 8002800:	3301      	adds	r3, #1
 8002802:	77fb      	strb	r3, [r7, #31]
 8002804:	7ffb      	ldrb	r3, [r7, #31]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d9ef      	bls.n	80027ea <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800280a:	4b28      	ldr	r3, [pc, #160]	@ (80028ac <HW_TS_Init+0x1ac>)
 800280c:	2206      	movs	r2, #6
 800280e:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002810:	4b1d      	ldr	r3, [pc, #116]	@ (8002888 <HW_TS_Init+0x188>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HW_TS_Init+0x188>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800281e:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002820:	4b19      	ldr	r3, [pc, #100]	@ (8002888 <HW_TS_Init+0x188>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HW_TS_Init+0x188>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002830:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002832:	4b1f      	ldr	r3, [pc, #124]	@ (80028b0 <HW_TS_Init+0x1b0>)
 8002834:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002838:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800283a:	2003      	movs	r0, #3
 800283c:	f007 fb4f 	bl	8009ede <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002840:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HW_TS_Init+0x188>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	4b10      	ldr	r3, [pc, #64]	@ (8002888 <HW_TS_Init+0x188>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800284e:	609a      	str	r2, [r3, #8]
 8002850:	e009      	b.n	8002866 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8002852:	4b0d      	ldr	r3, [pc, #52]	@ (8002888 <HW_TS_Init+0x188>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002860:	2003      	movs	r0, #3
 8002862:	f007 fb2e 	bl	8009ec2 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HW_TS_Init+0x188>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	22ff      	movs	r2, #255	@ 0xff
 800286c:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800286e:	2200      	movs	r2, #0
 8002870:	2103      	movs	r1, #3
 8002872:	2003      	movs	r0, #3
 8002874:	f007 fae3 	bl	8009e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002878:	2003      	movs	r0, #3
 800287a:	f007 fafa 	bl	8009e72 <HAL_NVIC_EnableIRQ>

  return;
 800287e:	bf00      	nop
}
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20000378 	.word	0x20000378
 800288c:	40002800 	.word	0x40002800
 8002890:	200002d1 	.word	0x200002d1
 8002894:	200002d2 	.word	0x200002d2
 8002898:	200002d4 	.word	0x200002d4
 800289c:	200002d6 	.word	0x200002d6
 80028a0:	200002d0 	.word	0x200002d0
 80028a4:	200002cc 	.word	0x200002cc
 80028a8:	20000238 	.word	0x20000238
 80028ac:	200002c8 	.word	0x200002c8
 80028b0:	58000800 	.word	0x58000800

080028b4 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028be:	f3ef 8310 	mrs	r3, PRIMASK
 80028c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80028c4:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80028c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80028c8:	b672      	cpsid	i
}
 80028ca:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80028cc:	2003      	movs	r0, #3
 80028ce:	f007 fade 	bl	8009e8e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80028d2:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HW_TS_Stop+0xf0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	22ca      	movs	r2, #202	@ 0xca
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80028da:	4b32      	ldr	r3, [pc, #200]	@ (80029a4 <HW_TS_Stop+0xf0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2253      	movs	r2, #83	@ 0x53
 80028e0:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80028e2:	79fa      	ldrb	r2, [r7, #7]
 80028e4:	4930      	ldr	r1, [pc, #192]	@ (80029a8 <HW_TS_Stop+0xf4>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	4413      	add	r3, r2
 80028ec:	00db      	lsls	r3, r3, #3
 80028ee:	440b      	add	r3, r1
 80028f0:	330c      	adds	r3, #12
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d142      	bne.n	8002980 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fc80 	bl	8002204 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002904:	4b29      	ldr	r3, [pc, #164]	@ (80029ac <HW_TS_Stop+0xf8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800290a:	7cfb      	ldrb	r3, [r7, #19]
 800290c:	2b06      	cmp	r3, #6
 800290e:	d12f      	bne.n	8002970 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002910:	4b27      	ldr	r3, [pc, #156]	@ (80029b0 <HW_TS_Stop+0xfc>)
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800291c:	d107      	bne.n	800292e <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800291e:	bf00      	nop
 8002920:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f8      	bne.n	8002920 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	4b1b      	ldr	r3, [pc, #108]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800293c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800293e:	bf00      	nop
 8002940:	4b18      	ldr	r3, [pc, #96]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	d0f8      	beq.n	8002940 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800294e:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	b2da      	uxtb	r2, r3
 8002956:	4b13      	ldr	r3, [pc, #76]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800295e:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002960:	4b14      	ldr	r3, [pc, #80]	@ (80029b4 <HW_TS_Stop+0x100>)
 8002962:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002966:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002968:	2003      	movs	r0, #3
 800296a:	f007 fab8 	bl	8009ede <HAL_NVIC_ClearPendingIRQ>
 800296e:	e007      	b.n	8002980 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <HW_TS_Stop+0x104>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	b2db      	uxtb	r3, r3
 8002976:	7cfa      	ldrb	r2, [r7, #19]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 800297c:	f7ff fd5e 	bl	800243c <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002980:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HW_TS_Stop+0xf0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	22ff      	movs	r2, #255	@ 0xff
 8002986:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002988:	2003      	movs	r0, #3
 800298a:	f007 fa72 	bl	8009e72 <HAL_NVIC_EnableIRQ>
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800299a:	bf00      	nop
}
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	20000378 	.word	0x20000378
 80029a8:	20000238 	.word	0x20000238
 80029ac:	200002c8 	.word	0x200002c8
 80029b0:	40002800 	.word	0x40002800
 80029b4:	58000800 	.word	0x58000800
 80029b8:	200002c9 	.word	0x200002c9

080029bc <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80029c8:	79fa      	ldrb	r2, [r7, #7]
 80029ca:	493b      	ldr	r1, [pc, #236]	@ (8002ab8 <HW_TS_Start+0xfc>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	440b      	add	r3, r1
 80029d6:	330c      	adds	r3, #12
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d103      	bne.n	80029e8 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80029e0:	79fb      	ldrb	r3, [r7, #7]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff ff66 	bl	80028b4 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029e8:	f3ef 8310 	mrs	r3, PRIMASK
 80029ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80029ee:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80029f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80029f2:	b672      	cpsid	i
}
 80029f4:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80029f6:	2003      	movs	r0, #3
 80029f8:	f007 fa49 	bl	8009e8e <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80029fc:	4b2f      	ldr	r3, [pc, #188]	@ (8002abc <HW_TS_Start+0x100>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	22ca      	movs	r2, #202	@ 0xca
 8002a02:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a04:	4b2d      	ldr	r3, [pc, #180]	@ (8002abc <HW_TS_Start+0x100>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2253      	movs	r2, #83	@ 0x53
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002a0c:	79fa      	ldrb	r2, [r7, #7]
 8002a0e:	492a      	ldr	r1, [pc, #168]	@ (8002ab8 <HW_TS_Start+0xfc>)
 8002a10:	4613      	mov	r3, r2
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	330c      	adds	r3, #12
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002a20:	79fa      	ldrb	r2, [r7, #7]
 8002a22:	4925      	ldr	r1, [pc, #148]	@ (8002ab8 <HW_TS_Start+0xfc>)
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	3308      	adds	r3, #8
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8002a34:	79fa      	ldrb	r2, [r7, #7]
 8002a36:	4920      	ldr	r1, [pc, #128]	@ (8002ab8 <HW_TS_Start+0xfc>)
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	3304      	adds	r3, #4
 8002a44:	683a      	ldr	r2, [r7, #0]
 8002a46:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002a48:	79fb      	ldrb	r3, [r7, #7]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7ff fb30 	bl	80020b0 <linkTimer>
 8002a50:	4603      	mov	r3, r0
 8002a52:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002a54:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac0 <HW_TS_Start+0x104>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ac4 <HW_TS_Start+0x108>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	7c7a      	ldrb	r2, [r7, #17]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d002      	beq.n	8002a6c <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002a66:	f7ff fce9 	bl	800243c <RescheduleTimerList>
 8002a6a:	e013      	b.n	8002a94 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002a6c:	79fa      	ldrb	r2, [r7, #7]
 8002a6e:	4912      	ldr	r1, [pc, #72]	@ (8002ab8 <HW_TS_Start+0xfc>)
 8002a70:	4613      	mov	r3, r2
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	4413      	add	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	440b      	add	r3, r1
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	6819      	ldr	r1, [r3, #0]
 8002a7e:	8a7b      	ldrh	r3, [r7, #18]
 8002a80:	79fa      	ldrb	r2, [r7, #7]
 8002a82:	1ac9      	subs	r1, r1, r3
 8002a84:	480c      	ldr	r0, [pc, #48]	@ (8002ab8 <HW_TS_Start+0xfc>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	4403      	add	r3, r0
 8002a90:	3308      	adds	r3, #8
 8002a92:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002a94:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HW_TS_Start+0x100>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	22ff      	movs	r2, #255	@ 0xff
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002a9c:	2003      	movs	r0, #3
 8002a9e:	f007 f9e8 	bl	8009e72 <HAL_NVIC_EnableIRQ>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	f383 8810 	msr	PRIMASK, r3
}
 8002aac:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002aae:	bf00      	nop
}
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000238 	.word	0x20000238
 8002abc:	20000378 	.word	0x20000378
 8002ac0:	200002c8 	.word	0x200002c8
 8002ac4:	200002c9 	.word	0x200002c9

08002ac8 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	607a      	str	r2, [r7, #4]
 8002ad4:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4798      	blx	r3

  return;
 8002ada:	bf00      	nop
}
 8002adc:	3710      	adds	r7, #16
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f005 fa21 	bl	8007f30 <IKS01A3_MOTION_SENSOR_Init>
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 8002af6:	2101      	movs	r1, #1
 8002af8:	2000      	movs	r0, #0
 8002afa:	f005 fa19 	bl	8007f30 <IKS01A3_MOTION_SENSOR_Init>
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	2102      	movs	r1, #2
 8002b0e:	2000      	movs	r0, #0
 8002b10:	f005 fb0a 	bl	8008128 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8002b14:	bf00      	nop
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	2101      	movs	r1, #1
 8002b28:	2000      	movs	r0, #0
 8002b2a:	f005 fafd 	bl	8008128 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 8002b40:	ed97 0a01 	vldr	s0, [r7, #4]
 8002b44:	2102      	movs	r1, #2
 8002b46:	2000      	movs	r0, #0
 8002b48:	f005 fb32 	bl	80081b0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8002b4c:	bf00      	nop
 8002b4e:	3708      	adds	r7, #8
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	2102      	movs	r1, #2
 8002b60:	2000      	movs	r0, #0
 8002b62:	f005 fb6b 	bl	800823c <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <LL_RCC_LSE_SetDriveCapability>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b7e:	f023 0218 	bic.w	r2, r3, #24
 8002b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <LL_AHB1_GRP1_EnableClock>:
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002ba2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ba6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002ba8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4013      	ands	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	bf00      	nop
 8002bc2:	3714      	adds	r7, #20
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <LL_AHB2_GRP1_EnableClock>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002bd8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002be4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002be8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4013      	ands	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
}
 8002bf2:	bf00      	nop
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
	...

08002c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c06:	f005 fd6d 	bl	80086e4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002c0a:	f7fe fe31 	bl	8001870 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c0e:	f000 f825 	bl	8002c5c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c12:	f000 f89b 	bl	8002d4c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8002c16:	f000 f933 	bl	8002e80 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c1a:	f000 fa09 	bl	8003030 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c1e:	f000 f9f5 	bl	800300c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002c22:	f000 f97d 	bl	8002f20 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 8002c26:	f000 f9c9 	bl	8002fbc <MX_USB_PCD_Init>
  MX_RTC_Init();
 8002c2a:	f000 f945 	bl	8002eb8 <MX_RTC_Init>
  MX_ADC1_Init();
 8002c2e:	f000 f8c1 	bl	8002db4 <MX_ADC1_Init>
  MX_RF_Init();
 8002c32:	f000 f939 	bl	8002ea8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 8002c36:	f7fe f84d 	bl	8000cd4 <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c3a:	f7fe fe27 	bl	800188c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c3e:	f7ff f90c 	bl	8001e5a <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t valeur_start = global_payload_pointer[0];
 8002c42:	4b05      	ldr	r3, [pc, #20]	@ (8002c58 <main+0x58>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	71fb      	strb	r3, [r7, #7]

    if(valeur_start==0x01){
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d1f6      	bne.n	8002c3e <main+0x3e>

    MX_MEMS_Process();
 8002c50:	f7fe f85e 	bl	8000d10 <MX_MEMS_Process>
  {
 8002c54:	e7f3      	b.n	8002c3e <main+0x3e>
 8002c56:	bf00      	nop
 8002c58:	20000bbc 	.word	0x20000bbc

08002c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b09a      	sub	sp, #104	@ 0x68
 8002c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c62:	f107 0320 	add.w	r3, r7, #32
 8002c66:	2248      	movs	r2, #72	@ 0x48
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f010 f8e2 	bl	8012e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c70:	1d3b      	adds	r3, r7, #4
 8002c72:	2200      	movs	r2, #0
 8002c74:	601a      	str	r2, [r3, #0]
 8002c76:	605a      	str	r2, [r3, #4]
 8002c78:	609a      	str	r2, [r3, #8]
 8002c7a:	60da      	str	r2, [r3, #12]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	615a      	str	r2, [r3, #20]
 8002c80:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002c82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c90:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002c92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	f023 0303 	bic.w	r3, r3, #3
 8002c9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ca0:	f043 0301 	orr.w	r3, r3, #1
 8002ca4:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ca6:	f008 fd6d 	bl	800b784 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7ff ff5f 	bl	8002b6e <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cb0:	4b25      	ldr	r3, [pc, #148]	@ (8002d48 <SystemClock_Config+0xec>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002cb8:	4a23      	ldr	r2, [pc, #140]	@ (8002d48 <SystemClock_Config+0xec>)
 8002cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002cbe:	6013      	str	r3, [r2, #0]
 8002cc0:	4b21      	ldr	r3, [pc, #132]	@ (8002d48 <SystemClock_Config+0xec>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002ccc:	232f      	movs	r3, #47	@ 0x2f
 8002cce:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cda:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ce4:	2340      	movs	r3, #64	@ 0x40
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002cec:	2360      	movs	r3, #96	@ 0x60
 8002cee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002cf0:	2305      	movs	r3, #5
 8002cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cf8:	f107 0320 	add.w	r3, r7, #32
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f009 f8d5 	bl	800beac <HAL_RCC_OscConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d08:	f000 f9da 	bl	80030c0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002d0c:	236f      	movs	r3, #111	@ 0x6f
 8002d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002d10:	2302      	movs	r3, #2
 8002d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f009 fc31 	bl	800c594 <HAL_RCC_ClockConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002d38:	f000 f9c2 	bl	80030c0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002d3c:	f00a f9ec 	bl	800d118 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002d40:	bf00      	nop
 8002d42:	3768      	adds	r7, #104	@ 0x68
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	58000400 	.word	0x58000400

08002d4c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b094      	sub	sp, #80	@ 0x50
 8002d50:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d52:	463b      	mov	r3, r7
 8002d54:	2250      	movs	r2, #80	@ 0x50
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f010 f86b 	bl	8012e34 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002d5e:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002d62:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002d64:	2318      	movs	r3, #24
 8002d66:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002d68:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d6c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002d6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d72:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002d74:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002d78:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002d7a:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002d7e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002d80:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002d84:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002d86:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002d8c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002d92:	2300      	movs	r3, #0
 8002d94:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9a:	463b      	mov	r3, r7
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00a f845 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002da8:	f000 f98a 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002dac:	bf00      	nop
 8002dae:	3750      	adds	r7, #80	@ 0x50
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002dba:	463b      	mov	r3, r7
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
 8002dc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002dca:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dcc:	4a29      	ldr	r2, [pc, #164]	@ (8002e74 <MX_ADC1_Init+0xc0>)
 8002dce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002dd0:	4b27      	ldr	r3, [pc, #156]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002dd6:	4b26      	ldr	r3, [pc, #152]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ddc:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002de2:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002de8:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dea:	2204      	movs	r2, #4
 8002dec:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002df4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e0e:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002e14:	4b16      	ldr	r3, [pc, #88]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e1c:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e1e:	2200      	movs	r2, #0
 8002e20:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002e22:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002e2a:	4811      	ldr	r0, [pc, #68]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e2c:	f005 ff02 	bl	8008c34 <HAL_ADC_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002e36:	f000 f943 	bl	80030c0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e78 <MX_ADC1_Init+0xc4>)
 8002e3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002e3e:	2306      	movs	r3, #6
 8002e40:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002e46:	4b0d      	ldr	r3, [pc, #52]	@ (8002e7c <MX_ADC1_Init+0xc8>)
 8002e48:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002e52:	463b      	mov	r3, r7
 8002e54:	4619      	mov	r1, r3
 8002e56:	4806      	ldr	r0, [pc, #24]	@ (8002e70 <MX_ADC1_Init+0xbc>)
 8002e58:	f006 f95a 	bl	8009110 <HAL_ADC_ConfigChannel>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002e62:	f000 f92d 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	200002d8 	.word	0x200002d8
 8002e74:	50040000 	.word	0x50040000
 8002e78:	14f00020 	.word	0x14f00020
 8002e7c:	407f0000 	.word	0x407f0000

08002e80 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <MX_IPCC_Init+0x20>)
 8002e86:	4a07      	ldr	r2, [pc, #28]	@ (8002ea4 <MX_IPCC_Init+0x24>)
 8002e88:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002e8a:	4805      	ldr	r0, [pc, #20]	@ (8002ea0 <MX_IPCC_Init+0x20>)
 8002e8c:	f008 fafc 	bl	800b488 <HAL_IPCC_Init>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002e96:	f000 f913 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000033c 	.word	0x2000033c
 8002ea4:	58000c00 	.word	0x58000c00

08002ea8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002eac:	bf00      	nop
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ebc:	4b16      	ldr	r3, [pc, #88]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ebe:	4a17      	ldr	r2, [pc, #92]	@ (8002f1c <MX_RTC_Init+0x64>)
 8002ec0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002ec8:	4b13      	ldr	r3, [pc, #76]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002eca:	220f      	movs	r2, #15
 8002ecc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002ece:	4b12      	ldr	r3, [pc, #72]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ed0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002ed4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ed6:	4b10      	ldr	r3, [pc, #64]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002eee:	480a      	ldr	r0, [pc, #40]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002ef0:	f00a fa2a 	bl	800d348 <HAL_RTC_Init>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002efa:	f000 f8e1 	bl	80030c0 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002efe:	2200      	movs	r2, #0
 8002f00:	2100      	movs	r1, #0
 8002f02:	4805      	ldr	r0, [pc, #20]	@ (8002f18 <MX_RTC_Init+0x60>)
 8002f04:	f00a fb20 	bl	800d548 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002f0e:	f000 f8d7 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000378 	.word	0x20000378
 8002f1c:	40002800 	.word	0x40002800

08002f20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f24:	4b23      	ldr	r3, [pc, #140]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f26:	4a24      	ldr	r2, [pc, #144]	@ (8002fb8 <MX_USART1_UART_Init+0x98>)
 8002f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f2a:	4b22      	ldr	r3, [pc, #136]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f32:	4b20      	ldr	r3, [pc, #128]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f38:	4b1e      	ldr	r3, [pc, #120]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f46:	220c      	movs	r2, #12
 8002f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002f50:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f52:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002f56:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f58:	4b16      	ldr	r3, [pc, #88]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002f5e:	4b15      	ldr	r3, [pc, #84]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f6a:	4812      	ldr	r0, [pc, #72]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f6c:	f00a fbc8 	bl	800d700 <HAL_UART_Init>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002f76:	f000 f8a3 	bl	80030c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	480d      	ldr	r0, [pc, #52]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f7e:	f00b f88f 	bl	800e0a0 <HAL_UARTEx_SetTxFifoThreshold>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002f88:	f000 f89a 	bl	80030c0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002f8c:	2100      	movs	r1, #0
 8002f8e:	4809      	ldr	r0, [pc, #36]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002f90:	f00b f8c4 	bl	800e11c <HAL_UARTEx_SetRxFifoThreshold>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002f9a:	f000 f891 	bl	80030c0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002f9e:	4805      	ldr	r0, [pc, #20]	@ (8002fb4 <MX_USART1_UART_Init+0x94>)
 8002fa0:	f00b f845 	bl	800e02e <HAL_UARTEx_DisableFifoMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002faa:	f000 f889 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	2000039c 	.word	0x2000039c
 8002fb8:	40013800 	.word	0x40013800

08002fbc <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002fc0:	4b10      	ldr	r3, [pc, #64]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fc2:	4a11      	ldr	r2, [pc, #68]	@ (8003008 <MX_USB_PCD_Init+0x4c>)
 8002fc4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fc8:	2208      	movs	r2, #8
 8002fca:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002fcc:	4b0d      	ldr	r3, [pc, #52]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fce:	2202      	movs	r2, #2
 8002fd0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002fd8:	4b0a      	ldr	r3, [pc, #40]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002fde:	4b09      	ldr	r3, [pc, #36]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002fe4:	4b07      	ldr	r3, [pc, #28]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002fec:	2200      	movs	r2, #0
 8002fee:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002ff0:	4804      	ldr	r0, [pc, #16]	@ (8003004 <MX_USB_PCD_Init+0x48>)
 8002ff2:	f008 facf 	bl	800b594 <HAL_PCD_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002ffc:	f000 f860 	bl	80030c0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	20000490 	.word	0x20000490
 8003008:	40006800 	.word	0x40006800

0800300c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003010:	2004      	movs	r0, #4
 8003012:	f7ff fdc2 	bl	8002b9a <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003016:	2002      	movs	r0, #2
 8003018:	f7ff fdbf 	bl	8002b9a <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 800301c:	2200      	movs	r2, #0
 800301e:	2100      	movs	r1, #0
 8003020:	203a      	movs	r0, #58	@ 0x3a
 8003022:	f006 ff0c 	bl	8009e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8003026:	203a      	movs	r0, #58	@ 0x3a
 8003028:	f006 ff23 	bl	8009e72 <HAL_NVIC_EnableIRQ>

}
 800302c:	bf00      	nop
 800302e:	bd80      	pop	{r7, pc}

08003030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003036:	1d3b      	adds	r3, r7, #4
 8003038:	2200      	movs	r2, #0
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	605a      	str	r2, [r3, #4]
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	60da      	str	r2, [r3, #12]
 8003042:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003044:	2004      	movs	r0, #4
 8003046:	f7ff fdc1 	bl	8002bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800304a:	2002      	movs	r0, #2
 800304c:	f7ff fdbe 	bl	8002bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	2001      	movs	r0, #1
 8003052:	f7ff fdbb 	bl	8002bcc <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003056:	2008      	movs	r0, #8
 8003058:	f7ff fdb8 	bl	8002bcc <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 800305c:	2200      	movs	r2, #0
 800305e:	2123      	movs	r1, #35	@ 0x23
 8003060:	4814      	ldr	r0, [pc, #80]	@ (80030b4 <MX_GPIO_Init+0x84>)
 8003062:	f007 fb55 	bl	800a710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003066:	2310      	movs	r3, #16
 8003068:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306e:	2300      	movs	r3, #0
 8003070:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003072:	1d3b      	adds	r3, r7, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4810      	ldr	r0, [pc, #64]	@ (80030b8 <MX_GPIO_Init+0x88>)
 8003078:	f007 f8fc 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 800307c:	2323      	movs	r3, #35	@ 0x23
 800307e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003080:	2301      	movs	r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800308c:	1d3b      	adds	r3, r7, #4
 800308e:	4619      	mov	r1, r3
 8003090:	4808      	ldr	r0, [pc, #32]	@ (80030b4 <MX_GPIO_Init+0x84>)
 8003092:	f007 f8ef 	bl	800a274 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8003096:	2303      	movs	r3, #3
 8003098:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <MX_GPIO_Init+0x8c>)
 80030a8:	f007 f8e4 	bl	800a274 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80030ac:	bf00      	nop
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	48000400 	.word	0x48000400
 80030b8:	48000800 	.word	0x48000800
 80030bc:	48000c00 	.word	0x48000c00

080030c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80030c4:	b672      	cpsid	i
}
 80030c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <Error_Handler+0x8>

080030cc <LL_RCC_EnableRTC>:
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80030d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80030dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80030e4:	bf00      	nop
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <LL_AHB2_GRP1_EnableClock>:
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80030f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80030fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4313      	orrs	r3, r2
 8003104:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003106:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800310a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4013      	ands	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003112:	68fb      	ldr	r3, [r7, #12]
}
 8003114:	bf00      	nop
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <LL_AHB3_GRP1_EnableClock>:
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800312c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800312e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4313      	orrs	r3, r2
 8003136:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003138:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800313c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4013      	ands	r3, r2
 8003142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003144:	68fb      	ldr	r3, [r7, #12]
}
 8003146:	bf00      	nop
 8003148:	3714      	adds	r7, #20
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003152:	b480      	push	{r7}
 8003154:	b085      	sub	sp, #20
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800315a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800315e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003160:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	4313      	orrs	r3, r2
 8003168:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800316a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800316e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4013      	ands	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003176:	68fb      	ldr	r3, [r7, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 80031ba:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80031be:	f7ff ffaf 	bl	8003120 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	202e      	movs	r0, #46	@ 0x2e
 80031c8:	f006 fe39 	bl	8009e3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80031cc:	202e      	movs	r0, #46	@ 0x2e
 80031ce:	f006 fe50 	bl	8009e72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031d2:	bf00      	nop
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	609a      	str	r2, [r3, #8]
 80031ec:	60da      	str	r2, [r3, #12]
 80031ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0d      	ldr	r2, [pc, #52]	@ (800322c <HAL_ADC_MspInit+0x54>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d113      	bne.n	8003222 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80031fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031fe:	f7ff ff76 	bl	80030ee <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003202:	2001      	movs	r0, #1
 8003204:	f7ff ff73 	bl	80030ee <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003208:	2303      	movs	r3, #3
 800320a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800320c:	2303      	movs	r3, #3
 800320e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800321e:	f007 f829 	bl	800a274 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003222:	bf00      	nop
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	50040000 	.word	0x50040000

08003230 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <HAL_IPCC_MspInit+0x44>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d113      	bne.n	800326a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8003242:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003246:	f7ff ff6b 	bl	8003120 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800324a:	2200      	movs	r2, #0
 800324c:	2100      	movs	r1, #0
 800324e:	202c      	movs	r0, #44	@ 0x2c
 8003250:	f006 fdf5 	bl	8009e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003254:	202c      	movs	r0, #44	@ 0x2c
 8003256:	f006 fe0c 	bl	8009e72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	2100      	movs	r1, #0
 800325e:	202d      	movs	r0, #45	@ 0x2d
 8003260:	f006 fded 	bl	8009e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003264:	202d      	movs	r0, #45	@ 0x2d
 8003266:	f006 fe04 	bl	8009e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800326a:	bf00      	nop
 800326c:	3708      	adds	r7, #8
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	58000c00 	.word	0x58000c00

08003278 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b096      	sub	sp, #88	@ 0x58
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	2250      	movs	r2, #80	@ 0x50
 8003286:	2100      	movs	r1, #0
 8003288:	4618      	mov	r0, r3
 800328a:	f00f fdd3 	bl	8012e34 <memset>
  if(hrtc->Instance==RTC)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a13      	ldr	r2, [pc, #76]	@ (80032e0 <HAL_RTC_MspInit+0x68>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d11f      	bne.n	80032d8 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8003298:	f008 fa74 	bl	800b784 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800329c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80032a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032a8:	f107 0308 	add.w	r3, r7, #8
 80032ac:	4618      	mov	r0, r3
 80032ae:	f009 fdbd 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80032b8:	f7ff ff02 	bl	80030c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80032bc:	f7ff ff06 	bl	80030cc <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80032c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80032c4:	f7ff ff45 	bl	8003152 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80032c8:	2200      	movs	r2, #0
 80032ca:	2100      	movs	r1, #0
 80032cc:	2003      	movs	r0, #3
 80032ce:	f006 fdb6 	bl	8009e3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80032d2:	2003      	movs	r0, #3
 80032d4:	f006 fdcd 	bl	8009e72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80032d8:	bf00      	nop
 80032da:	3758      	adds	r7, #88	@ 0x58
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}
 80032e0:	40002800 	.word	0x40002800

080032e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b09c      	sub	sp, #112	@ 0x70
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]
 80032fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032fc:	f107 030c 	add.w	r3, r7, #12
 8003300:	2250      	movs	r2, #80	@ 0x50
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f00f fd95 	bl	8012e34 <memset>
  if(huart->Instance==USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a2a      	ldr	r2, [pc, #168]	@ (80033b8 <HAL_UART_MspInit+0xd4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d14d      	bne.n	80033b0 <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003314:	2301      	movs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003318:	2300      	movs	r3, #0
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	4618      	mov	r0, r3
 8003322:	f009 fd83 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800332c:	f7ff fec8 	bl	80030c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003330:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8003334:	f7ff ff26 	bl	8003184 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003338:	2002      	movs	r0, #2
 800333a:	f7ff fed8 	bl	80030ee <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800333e:	23c0      	movs	r3, #192	@ 0xc0
 8003340:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003346:	2301      	movs	r3, #1
 8003348:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800334a:	2300      	movs	r3, #0
 800334c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800334e:	2307      	movs	r3, #7
 8003350:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003356:	4619      	mov	r1, r3
 8003358:	4818      	ldr	r0, [pc, #96]	@ (80033bc <HAL_UART_MspInit+0xd8>)
 800335a:	f006 ff8b 	bl	800a274 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800335e:	4b18      	ldr	r3, [pc, #96]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_UART_MspInit+0xe0>)
 8003362:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003364:	4b16      	ldr	r3, [pc, #88]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003366:	220f      	movs	r2, #15
 8003368:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800336a:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 800336c:	2210      	movs	r2, #16
 800336e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003370:	4b13      	ldr	r3, [pc, #76]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003372:	2200      	movs	r2, #0
 8003374:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003376:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003378:	2280      	movs	r2, #128	@ 0x80
 800337a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003382:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003388:	4b0d      	ldr	r3, [pc, #52]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800338e:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003394:	480a      	ldr	r0, [pc, #40]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 8003396:	f006 fdb1 	bl	8009efc <HAL_DMA_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 80033a0:	f7ff fe8e 	bl	80030c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a06      	ldr	r2, [pc, #24]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 80033a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80033aa:	4a05      	ldr	r2, [pc, #20]	@ (80033c0 <HAL_UART_MspInit+0xdc>)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3770      	adds	r7, #112	@ 0x70
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40013800 	.word	0x40013800
 80033bc:	48000400 	.word	0x48000400
 80033c0:	20000430 	.word	0x20000430
 80033c4:	40020444 	.word	0x40020444

080033c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b088      	sub	sp, #32
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d0:	f107 030c 	add.w	r3, r7, #12
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
 80033d8:	605a      	str	r2, [r3, #4]
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0f      	ldr	r2, [pc, #60]	@ (8003424 <HAL_PCD_MspInit+0x5c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d118      	bne.n	800341c <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ea:	2001      	movs	r0, #1
 80033ec:	f7ff fe7f 	bl	80030ee <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80033f0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80033f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f6:	2302      	movs	r3, #2
 80033f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8003402:	230a      	movs	r3, #10
 8003404:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003406:	f107 030c 	add.w	r3, r7, #12
 800340a:	4619      	mov	r1, r3
 800340c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003410:	f006 ff30 	bl	800a274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003414:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8003418:	f7ff fe9b 	bl	8003152 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 800341c:	bf00      	nop
 800341e:	3720      	adds	r7, #32
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40006800 	.word	0x40006800

08003428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <NMI_Handler+0x4>

08003430 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003430:	b480      	push	{r7}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <HardFault_Handler+0x4>

08003438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	bf00      	nop
 800343e:	e7fd      	b.n	800343c <MemManage_Handler+0x4>

08003440 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <BusFault_Handler+0x4>

08003448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800344c:	bf00      	nop
 800344e:	e7fd      	b.n	800344c <UsageFault_Handler+0x4>

08003450 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003454:	bf00      	nop
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800345e:	b480      	push	{r7}
 8003460:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003470:	bf00      	nop
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr

0800347a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800347e:	f005 f98b 	bl	8008798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}

08003486 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800348a:	f7ff f871 	bl	8002570 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}

08003492 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003496:	f00e ff01 	bl	801229c <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	bd80      	pop	{r7, pc}

0800349e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80034a2:	f00e ff31 	bl	8012308 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80034ae:	f007 f947 	bl	800a740 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80034bc:	4802      	ldr	r0, [pc, #8]	@ (80034c8 <DMA2_Channel4_IRQHandler+0x10>)
 80034be:	f006 fdc5 	bl	800a04c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000430 	.word	0x20000430

080034cc <LL_AHB2_GRP1_EnableClock>:
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80034d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80034e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80034e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4013      	ands	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <LL_APB1_GRP1_EnableClock>:
{
 80034fe:	b480      	push	{r7}
 8003500:	b085      	sub	sp, #20
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800350a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800350c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4313      	orrs	r3, r2
 8003514:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800351a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4013      	ands	r3, r2
 8003520:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003522:	68fb      	ldr	r3, [r7, #12]
}
 8003524:	bf00      	nop
 8003526:	3714      	adds	r7, #20
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <LL_APB1_GRP1_DisableClock>:
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800353c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	43db      	mvns	r3, r3
 8003542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003546:	4013      	ands	r3, r2
 8003548:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800355e:	2300      	movs	r3, #0
 8003560:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8003562:	4b19      	ldr	r3, [pc, #100]	@ (80035c8 <BSP_I2C1_Init+0x70>)
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <BSP_I2C1_Init+0x74>)
 8003566:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <BSP_I2C1_Init+0x78>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	4918      	ldr	r1, [pc, #96]	@ (80035d0 <BSP_I2C1_Init+0x78>)
 8003570:	600a      	str	r2, [r1, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d122      	bne.n	80035bc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003576:	4814      	ldr	r0, [pc, #80]	@ (80035c8 <BSP_I2C1_Init+0x70>)
 8003578:	f007 fc12 	bl	800ada0 <HAL_I2C_GetState>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d11c      	bne.n	80035bc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 8003582:	4811      	ldr	r0, [pc, #68]	@ (80035c8 <BSP_I2C1_Init+0x70>)
 8003584:	f000 f8fe 	bl	8003784 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d116      	bne.n	80035bc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800358e:	480e      	ldr	r0, [pc, #56]	@ (80035c8 <BSP_I2C1_Init+0x70>)
 8003590:	f000 f8b4 	bl	80036fc <MX_I2C1_Init>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800359a:	f06f 0307 	mvn.w	r3, #7
 800359e:	607b      	str	r3, [r7, #4]
 80035a0:	e00c      	b.n	80035bc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80035a2:	2100      	movs	r1, #0
 80035a4:	4808      	ldr	r0, [pc, #32]	@ (80035c8 <BSP_I2C1_Init+0x70>)
 80035a6:	f007 fed7 	bl	800b358 <HAL_I2CEx_ConfigAnalogFilter>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80035b0:	f06f 0307 	mvn.w	r3, #7
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	e001      	b.n	80035bc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80035b8:	2300      	movs	r3, #0
 80035ba:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80035bc:	687b      	ldr	r3, [r7, #4]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	2000076c 	.word	0x2000076c
 80035cc:	40005400 	.word	0x40005400
 80035d0:	200007c0 	.word	0x200007c0

080035d4 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80035de:	4b0f      	ldr	r3, [pc, #60]	@ (800361c <BSP_I2C1_DeInit+0x48>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d014      	beq.n	8003610 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <BSP_I2C1_DeInit+0x48>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <BSP_I2C1_DeInit+0x48>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <BSP_I2C1_DeInit+0x48>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80035f8:	4809      	ldr	r0, [pc, #36]	@ (8003620 <BSP_I2C1_DeInit+0x4c>)
 80035fa:	f000 f907 	bl	800380c <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80035fe:	4808      	ldr	r0, [pc, #32]	@ (8003620 <BSP_I2C1_DeInit+0x4c>)
 8003600:	f007 f95d 	bl	800a8be <HAL_I2C_DeInit>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d002      	beq.n	8003610 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800360a:	f06f 0307 	mvn.w	r3, #7
 800360e:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8003610:	687b      	ldr	r3, [r7, #4]
}
 8003612:	4618      	mov	r0, r3
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	200007c0 	.word	0x200007c0
 8003620:	2000076c 	.word	0x2000076c

08003624 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	@ 0x28
 8003628:	af04      	add	r7, sp, #16
 800362a:	60ba      	str	r2, [r7, #8]
 800362c:	461a      	mov	r2, r3
 800362e:	4603      	mov	r3, r0
 8003630:	81fb      	strh	r3, [r7, #14]
 8003632:	460b      	mov	r3, r1
 8003634:	81bb      	strh	r3, [r7, #12]
 8003636:	4613      	mov	r3, r2
 8003638:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800363e:	89ba      	ldrh	r2, [r7, #12]
 8003640:	89f9      	ldrh	r1, [r7, #14]
 8003642:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003646:	9302      	str	r3, [sp, #8]
 8003648:	88fb      	ldrh	r3, [r7, #6]
 800364a:	9301      	str	r3, [sp, #4]
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	9300      	str	r3, [sp, #0]
 8003650:	2301      	movs	r3, #1
 8003652:	480c      	ldr	r0, [pc, #48]	@ (8003684 <BSP_I2C1_WriteReg+0x60>)
 8003654:	f007 f976 	bl	800a944 <HAL_I2C_Mem_Write>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00c      	beq.n	8003678 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800365e:	4809      	ldr	r0, [pc, #36]	@ (8003684 <BSP_I2C1_WriteReg+0x60>)
 8003660:	f007 fbac 	bl	800adbc <HAL_I2C_GetError>
 8003664:	4603      	mov	r3, r0
 8003666:	2b04      	cmp	r3, #4
 8003668:	d103      	bne.n	8003672 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800366a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800366e:	617b      	str	r3, [r7, #20]
 8003670:	e002      	b.n	8003678 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003672:	f06f 0303 	mvn.w	r3, #3
 8003676:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003678:	697b      	ldr	r3, [r7, #20]
}
 800367a:	4618      	mov	r0, r3
 800367c:	3718      	adds	r7, #24
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	2000076c 	.word	0x2000076c

08003688 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	@ 0x28
 800368c:	af04      	add	r7, sp, #16
 800368e:	60ba      	str	r2, [r7, #8]
 8003690:	461a      	mov	r2, r3
 8003692:	4603      	mov	r3, r0
 8003694:	81fb      	strh	r3, [r7, #14]
 8003696:	460b      	mov	r3, r1
 8003698:	81bb      	strh	r3, [r7, #12]
 800369a:	4613      	mov	r3, r2
 800369c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80036a2:	89ba      	ldrh	r2, [r7, #12]
 80036a4:	89f9      	ldrh	r1, [r7, #14]
 80036a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036aa:	9302      	str	r3, [sp, #8]
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	9301      	str	r3, [sp, #4]
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2301      	movs	r3, #1
 80036b6:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <BSP_I2C1_ReadReg+0x60>)
 80036b8:	f007 fa58 	bl	800ab6c <HAL_I2C_Mem_Read>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00c      	beq.n	80036dc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80036c2:	4809      	ldr	r0, [pc, #36]	@ (80036e8 <BSP_I2C1_ReadReg+0x60>)
 80036c4:	f007 fb7a 	bl	800adbc <HAL_I2C_GetError>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d103      	bne.n	80036d6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80036ce:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	e002      	b.n	80036dc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80036d6:	f06f 0303 	mvn.w	r3, #3
 80036da:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80036dc:	697b      	ldr	r3, [r7, #20]
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000076c 	.word	0x2000076c

080036ec <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80036f0:	f005 f866 	bl	80087c0 <HAL_GetTick>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	bd80      	pop	{r7, pc}
	...

080036fc <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a1c      	ldr	r2, [pc, #112]	@ (800377c <MX_I2C1_Init+0x80>)
 800370c:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1b      	ldr	r2, [pc, #108]	@ (8003780 <MX_I2C1_Init+0x84>)
 8003712:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f007 f822 	bl	800a788 <HAL_I2C_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800374e:	2100      	movs	r1, #0
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f007 fe01 	bl	800b358 <HAL_I2CEx_ConfigAnalogFilter>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003760:	2100      	movs	r1, #0
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f007 fe43 	bl	800b3ee <HAL_I2CEx_ConfigDigitalFilter>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003772:	7bfb      	ldrb	r3, [r7, #15]
}
 8003774:	4618      	mov	r0, r3
 8003776:	3710      	adds	r7, #16
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40005400 	.word	0x40005400
 8003780:	00707cbb 	.word	0x00707cbb

08003784 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b09c      	sub	sp, #112	@ 0x70
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800378c:	f107 030c 	add.w	r3, r7, #12
 8003790:	2250      	movs	r2, #80	@ 0x50
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f00f fb4d 	bl	8012e34 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800379a:	2304      	movs	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800379e:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80037a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80037a4:	f107 030c 	add.w	r3, r7, #12
 80037a8:	4618      	mov	r0, r3
 80037aa:	f009 fb3f 	bl	800ce2c <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ae:	2002      	movs	r0, #2
 80037b0:	f7ff fe8c 	bl	80034cc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 80037b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037ba:	2312      	movs	r3, #18
 80037bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037c2:	2300      	movs	r3, #0
 80037c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80037c6:	2304      	movs	r3, #4
 80037c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80037ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80037ce:	4619      	mov	r1, r3
 80037d0:	480d      	ldr	r0, [pc, #52]	@ (8003808 <I2C1_MspInit+0x84>)
 80037d2:	f006 fd4f 	bl	800a274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80037d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037da:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037dc:	2312      	movs	r3, #18
 80037de:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e0:	2300      	movs	r3, #0
 80037e2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e4:	2300      	movs	r3, #0
 80037e6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80037e8:	2304      	movs	r3, #4
 80037ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80037ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80037f0:	4619      	mov	r1, r3
 80037f2:	4805      	ldr	r0, [pc, #20]	@ (8003808 <I2C1_MspInit+0x84>)
 80037f4:	f006 fd3e 	bl	800a274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037f8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80037fc:	f7ff fe7f 	bl	80034fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8003800:	bf00      	nop
 8003802:	3770      	adds	r7, #112	@ 0x70
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	48000400 	.word	0x48000400

0800380c <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003814:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8003818:	f7ff fe8a 	bl	8003530 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800381c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003820:	4805      	ldr	r0, [pc, #20]	@ (8003838 <I2C1_MspDeInit+0x2c>)
 8003822:	f006 fe97 	bl	800a554 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8003826:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800382a:	4803      	ldr	r0, [pc, #12]	@ (8003838 <I2C1_MspDeInit+0x2c>)
 800382c:	f006 fe92 	bl	800a554 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	48000400 	.word	0x48000400

0800383c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	e00a      	b.n	8003864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800384e:	f3af 8000 	nop.w
 8003852:	4601      	mov	r1, r0
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	1c5a      	adds	r2, r3, #1
 8003858:	60ba      	str	r2, [r7, #8]
 800385a:	b2ca      	uxtb	r2, r1
 800385c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	3301      	adds	r3, #1
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	dbf0      	blt.n	800384e <_read+0x12>
  }

  return len;
 800386c:	687b      	ldr	r3, [r7, #4]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800387e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003882:	4618      	mov	r0, r3
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800389e:	605a      	str	r2, [r3, #4]
  return 0;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <_isatty>:

int _isatty(int file)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80038b6:	2301      	movs	r3, #1
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b085      	sub	sp, #20
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
	...

080038e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038e8:	4a14      	ldr	r2, [pc, #80]	@ (800393c <_sbrk+0x5c>)
 80038ea:	4b15      	ldr	r3, [pc, #84]	@ (8003940 <_sbrk+0x60>)
 80038ec:	1ad3      	subs	r3, r2, r3
 80038ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038f4:	4b13      	ldr	r3, [pc, #76]	@ (8003944 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038fc:	4b11      	ldr	r3, [pc, #68]	@ (8003944 <_sbrk+0x64>)
 80038fe:	4a12      	ldr	r2, [pc, #72]	@ (8003948 <_sbrk+0x68>)
 8003900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003902:	4b10      	ldr	r3, [pc, #64]	@ (8003944 <_sbrk+0x64>)
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4413      	add	r3, r2
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	429a      	cmp	r2, r3
 800390e:	d207      	bcs.n	8003920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003910:	f00f faf4 	bl	8012efc <__errno>
 8003914:	4603      	mov	r3, r0
 8003916:	220c      	movs	r2, #12
 8003918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	e009      	b.n	8003934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003920:	4b08      	ldr	r3, [pc, #32]	@ (8003944 <_sbrk+0x64>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003926:	4b07      	ldr	r3, [pc, #28]	@ (8003944 <_sbrk+0x64>)
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4413      	add	r3, r2
 800392e:	4a05      	ldr	r2, [pc, #20]	@ (8003944 <_sbrk+0x64>)
 8003930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003932:	68fb      	ldr	r3, [r7, #12]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20030000 	.word	0x20030000
 8003940:	00000400 	.word	0x00000400
 8003944:	200007c4 	.word	0x200007c4
 8003948:	20000db8 	.word	0x20000db8

0800394c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003950:	4b24      	ldr	r3, [pc, #144]	@ (80039e4 <SystemInit+0x98>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	4a23      	ldr	r2, [pc, #140]	@ (80039e4 <SystemInit+0x98>)
 8003958:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800395c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003960:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003970:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003974:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003978:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800397a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003984:	4b18      	ldr	r3, [pc, #96]	@ (80039e8 <SystemInit+0x9c>)
 8003986:	4013      	ands	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800398e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003992:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003996:	f023 0305 	bic.w	r3, r3, #5
 800399a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039b6:	4a0d      	ldr	r2, [pc, #52]	@ (80039ec <SystemInit+0xa0>)
 80039b8:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80039ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039be:	4a0b      	ldr	r2, [pc, #44]	@ (80039ec <SystemInit+0xa0>)
 80039c0:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80039c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80039cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80039d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80039d6:	2200      	movs	r2, #0
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	bf00      	nop
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr
 80039e4:	e000ed00 	.word	0xe000ed00
 80039e8:	faf6fefb 	.word	0xfaf6fefb
 80039ec:	22041000 	.word	0x22041000

080039f0 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80039f0:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039f2:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039f4:	3304      	adds	r3, #4

080039f6 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039f6:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039f8:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80039fa:	d3f9      	bcc.n	80039f0 <CopyDataInit>
  bx lr
 80039fc:	4770      	bx	lr

080039fe <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80039fe:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8003a00:	3004      	adds	r0, #4

08003a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8003a02:	4288      	cmp	r0, r1
  bcc FillZerobss
 8003a04:	d3fb      	bcc.n	80039fe <FillZerobss>
  bx lr
 8003a06:	4770      	bx	lr

08003a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003a08:	480c      	ldr	r0, [pc, #48]	@ (8003a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003a0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003a0c:	f7ff ff9e 	bl	800394c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8003a10:	480b      	ldr	r0, [pc, #44]	@ (8003a40 <LoopForever+0x6>)
 8003a12:	490c      	ldr	r1, [pc, #48]	@ (8003a44 <LoopForever+0xa>)
 8003a14:	4a0c      	ldr	r2, [pc, #48]	@ (8003a48 <LoopForever+0xe>)
 8003a16:	2300      	movs	r3, #0
 8003a18:	f7ff ffed 	bl	80039f6 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003a1c:	480b      	ldr	r0, [pc, #44]	@ (8003a4c <LoopForever+0x12>)
 8003a1e:	490c      	ldr	r1, [pc, #48]	@ (8003a50 <LoopForever+0x16>)
 8003a20:	4a0c      	ldr	r2, [pc, #48]	@ (8003a54 <LoopForever+0x1a>)
 8003a22:	2300      	movs	r3, #0
 8003a24:	f7ff ffe7 	bl	80039f6 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8003a28:	480b      	ldr	r0, [pc, #44]	@ (8003a58 <LoopForever+0x1e>)
 8003a2a:	490c      	ldr	r1, [pc, #48]	@ (8003a5c <LoopForever+0x22>)
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	f7ff ffe8 	bl	8003a02 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8003a32:	f00f fa69 	bl	8012f08 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003a36:	f7ff f8e3 	bl	8002c00 <main>

08003a3a <LoopForever>:

LoopForever:
  b LoopForever
 8003a3a:	e7fe      	b.n	8003a3a <LoopForever>
  ldr   r0, =_estack
 8003a3c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003a40:	20000008 	.word	0x20000008
 8003a44:	2000016c 	.word	0x2000016c
 8003a48:	0801577c 	.word	0x0801577c
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003a4c:	200301e4 	.word	0x200301e4
 8003a50:	20030a67 	.word	0x20030a67
 8003a54:	08015926 	.word	0x08015926
  INIT_BSS _sbss, _ebss
 8003a58:	200001b8 	.word	0x200001b8
 8003a5c:	20000db8 	.word	0x20000db8

08003a60 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a60:	e7fe      	b.n	8003a60 <ADC1_IRQHandler>
	...

08003a64 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003a78:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	e051      	b.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685a      	ldr	r2, [r3, #4]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	7b1a      	ldrb	r2, [r3, #12]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	699a      	ldr	r2, [r3, #24]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a1d      	ldr	r2, [pc, #116]	@ (8003b30 <LIS2DW12_RegisterBusIO+0xcc>)
 8003abc:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <LIS2DW12_RegisterBusIO+0xd0>)
 8003ac2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	69da      	ldr	r2, [r3, #28]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d103      	bne.n	8003ae2 <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	e020      	b.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4798      	blx	r3
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d003      	beq.n	8003af6 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	e016      	b.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	2b02      	cmp	r3, #2
 8003afc:	d112      	bne.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 8003b08:	2305      	movs	r3, #5
 8003b0a:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 8003b0c:	7afb      	ldrb	r3, [r7, #11]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	2121      	movs	r1, #33	@ 0x21
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fcc1 	bl	800449a <LIS2DW12_Write_Reg>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d002      	beq.n	8003b24 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 8003b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b22:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8003b24:	68fb      	ldr	r3, [r7, #12]
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	0800482d 	.word	0x0800482d
 8003b34:	08004863 	.word	0x08004863

08003b38 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3320      	adds	r3, #32
 8003b44:	2101      	movs	r1, #1
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f9cb 	bl	8004ee2 <lis2dw12_auto_increment_set>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 8003b52:	f04f 33ff 	mov.w	r3, #4294967295
 8003b56:	e04b      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3320      	adds	r3, #32
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f001 f8e2 	bl	8004d28 <lis2dw12_block_data_update_set>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b6e:	e03f      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3320      	adds	r3, #32
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f001 f9d9 	bl	8004f2e <lis2dw12_fifo_mode_set>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e033      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	3320      	adds	r3, #32
 8003b8c:	2104      	movs	r1, #4
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 feb2 	bl	80048f8 <lis2dw12_power_mode_set>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9e:	e027      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a15      	ldr	r2, [pc, #84]	@ (8003bf8 <LIS2DW12_Init+0xc0>)
 8003ba4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3320      	adds	r3, #32
 8003bba:	2100      	movs	r1, #0
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 ffa3 	bl	8004b08 <lis2dw12_data_rate_set>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d002      	beq.n	8003bce <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003bcc:	e010      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3320      	adds	r3, #32
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f001 f8cd 	bl	8004d74 <lis2dw12_full_scale_set>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d002      	beq.n	8003be6 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003be0:	f04f 33ff 	mov.w	r3, #4294967295
 8003be4:	e004      	b.n	8003bf0 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	42c80000 	.word	0x42c80000

08003bfc <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f000 f888 	bl	8003d1a <LIS2DW12_ACC_Disable>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 8003c10:	f04f 33ff 	mov.w	r3, #4294967295
 8003c14:	e010      	b.n	8003c38 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 8003c36:	2300      	movs	r3, #0
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3320      	adds	r3, #32
 8003c4e:	6839      	ldr	r1, [r7, #0]
 8003c50:	4618      	mov	r0, r3
 8003c52:	f001 f935 	bl	8004ec0 <lis2dw12_device_id_get>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c60:	e000      	b.n	8003c64 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	2200      	movs	r2, #0
 8003c92:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	2210      	movs	r2, #16
 8003c98:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	4a06      	ldr	r2, [pc, #24]	@ (8003cc4 <LIS2DW12_GetCapabilities+0x58>)
 8003cac:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	f04f 0200 	mov.w	r2, #0
 8003cb4:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr
 8003cc4:	44c80000 	.word	0x44c80000

08003cc8 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d101      	bne.n	8003cde <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e019      	b.n	8003d12 <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fbea 	bl	80044d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	e004      	b.n	8003d12 <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b082      	sub	sp, #8
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d101      	bne.n	8003d30 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	e010      	b.n	8003d52 <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3320      	adds	r3, #32
 8003d34:	2100      	movs	r1, #0
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fee6 	bl	8004b08 <lis2dw12_data_rate_set>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	e004      	b.n	8003d52 <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
	...

08003d5c <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	3320      	adds	r3, #32
 8003d6e:	f107 020b 	add.w	r2, r7, #11
 8003d72:	4611      	mov	r1, r2
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f823 	bl	8004dc0 <lis2dw12_full_scale_get>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003d80:	f04f 33ff 	mov.w	r3, #4294967295
 8003d84:	e080      	b.n	8003e88 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3320      	adds	r3, #32
 8003d8a:	f107 020a 	add.w	r2, r7, #10
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 fdff 	bl	8004994 <lis2dw12_power_mode_get>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	e072      	b.n	8003e88 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003da2:	7abb      	ldrb	r3, [r7, #10]
 8003da4:	2b1b      	cmp	r3, #27
 8003da6:	bf8c      	ite	hi
 8003da8:	2201      	movhi	r2, #1
 8003daa:	2200      	movls	r2, #0
 8003dac:	b2d2      	uxtb	r2, r2
 8003dae:	2a00      	cmp	r2, #0
 8003db0:	d162      	bne.n	8003e78 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003db2:	2201      	movs	r2, #1
 8003db4:	409a      	lsls	r2, r3
 8003db6:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003dba:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d12f      	bne.n	8003e2c <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003dcc:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d04c      	beq.n	8003e78 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003dde:	7afb      	ldrb	r3, [r7, #11]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d81b      	bhi.n	8003e1c <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003de4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dea:	bf00      	nop
 8003dec:	08003dfd 	.word	0x08003dfd
 8003df0:	08003e05 	.word	0x08003e05
 8003df4:	08003e0d 	.word	0x08003e0d
 8003df8:	08003e15 	.word	0x08003e15
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4a24      	ldr	r2, [pc, #144]	@ (8003e90 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003e00:	601a      	str	r2, [r3, #0]
          break;
 8003e02:	e012      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4a23      	ldr	r2, [pc, #140]	@ (8003e94 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003e08:	601a      	str	r2, [r3, #0]
          break;
 8003e0a:	e00e      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4a22      	ldr	r2, [pc, #136]	@ (8003e98 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003e10:	601a      	str	r2, [r3, #0]
          break;
 8003e12:	e00a      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	4a21      	ldr	r2, [pc, #132]	@ (8003e9c <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003e18:	601a      	str	r2, [r3, #0]
          break;
 8003e1a:	e006      	b.n	8003e2a <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	4a20      	ldr	r2, [pc, #128]	@ (8003ea0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e20:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e22:	f04f 33ff 	mov.w	r3, #4294967295
 8003e26:	60fb      	str	r3, [r7, #12]
          break;
 8003e28:	bf00      	nop
      }
      break;
 8003e2a:	e02c      	b.n	8003e86 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003e2c:	7afb      	ldrb	r3, [r7, #11]
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d81a      	bhi.n	8003e68 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003e32:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e38:	08003e49 	.word	0x08003e49
 8003e3c:	08003e51 	.word	0x08003e51
 8003e40:	08003e59 	.word	0x08003e59
 8003e44:	08003e61 	.word	0x08003e61
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	4a16      	ldr	r2, [pc, #88]	@ (8003ea4 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003e4c:	601a      	str	r2, [r3, #0]
          break;
 8003e4e:	e012      	b.n	8003e76 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	4a15      	ldr	r2, [pc, #84]	@ (8003ea8 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003e54:	601a      	str	r2, [r3, #0]
          break;
 8003e56:	e00e      	b.n	8003e76 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003e5c:	601a      	str	r2, [r3, #0]
          break;
 8003e5e:	e00a      	b.n	8003e76 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	4a0c      	ldr	r2, [pc, #48]	@ (8003e94 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003e64:	601a      	str	r2, [r3, #0]
          break;
 8003e66:	e006      	b.n	8003e76 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e6c:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e72:	60fb      	str	r3, [r7, #12]
          break;
 8003e74:	bf00      	nop
      }
      break;
 8003e76:	e006      	b.n	8003e86 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ea0 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003e7c:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e82:	60fb      	str	r3, [r7, #12]
      break;
 8003e84:	bf00      	nop
  }

  return ret;
 8003e86:	68fb      	ldr	r3, [r7, #12]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	3f79db23 	.word	0x3f79db23
 8003e94:	3ff9db23 	.word	0x3ff9db23
 8003e98:	4079db23 	.word	0x4079db23
 8003e9c:	40f9db23 	.word	0x40f9db23
 8003ea0:	bf800000 	.word	0xbf800000
 8003ea4:	3e79db23 	.word	0x3e79db23
 8003ea8:	3ef9db23 	.word	0x3ef9db23

08003eac <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	3320      	adds	r3, #32
 8003ebe:	f107 020b 	add.w	r2, r7, #11
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fe65 	bl	8004b94 <lis2dw12_data_rate_get>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d002      	beq.n	8003ed6 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed4:	e14f      	b.n	8004176 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	f107 020a 	add.w	r2, r7, #10
 8003ede:	4611      	mov	r1, r2
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fd57 	bl	8004994 <lis2dw12_power_mode_get>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d002      	beq.n	8003ef2 <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	e141      	b.n	8004176 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003ef2:	7afb      	ldrb	r3, [r7, #11]
 8003ef4:	2b32      	cmp	r3, #50	@ 0x32
 8003ef6:	f200 8136 	bhi.w	8004166 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003fcd 	.word	0x08003fcd
 8003f04:	08003fd7 	.word	0x08003fd7
 8003f08:	08004031 	.word	0x08004031
 8003f0c:	08004039 	.word	0x08004039
 8003f10:	08004041 	.word	0x08004041
 8003f14:	08004049 	.word	0x08004049
 8003f18:	08004051 	.word	0x08004051
 8003f1c:	08004059 	.word	0x08004059
 8003f20:	080040b3 	.word	0x080040b3
 8003f24:	0800410d 	.word	0x0800410d
 8003f28:	08004167 	.word	0x08004167
 8003f2c:	08004167 	.word	0x08004167
 8003f30:	08004167 	.word	0x08004167
 8003f34:	08004167 	.word	0x08004167
 8003f38:	08004167 	.word	0x08004167
 8003f3c:	08004167 	.word	0x08004167
 8003f40:	08004167 	.word	0x08004167
 8003f44:	08004167 	.word	0x08004167
 8003f48:	08003fcd 	.word	0x08003fcd
 8003f4c:	08004167 	.word	0x08004167
 8003f50:	08004167 	.word	0x08004167
 8003f54:	08004167 	.word	0x08004167
 8003f58:	08004167 	.word	0x08004167
 8003f5c:	08004167 	.word	0x08004167
 8003f60:	08004167 	.word	0x08004167
 8003f64:	08004167 	.word	0x08004167
 8003f68:	08004167 	.word	0x08004167
 8003f6c:	08004167 	.word	0x08004167
 8003f70:	08004167 	.word	0x08004167
 8003f74:	08004167 	.word	0x08004167
 8003f78:	08004167 	.word	0x08004167
 8003f7c:	08004167 	.word	0x08004167
 8003f80:	08004167 	.word	0x08004167
 8003f84:	08004167 	.word	0x08004167
 8003f88:	08004167 	.word	0x08004167
 8003f8c:	08004167 	.word	0x08004167
 8003f90:	08004167 	.word	0x08004167
 8003f94:	08004167 	.word	0x08004167
 8003f98:	08004167 	.word	0x08004167
 8003f9c:	08004167 	.word	0x08004167
 8003fa0:	08004167 	.word	0x08004167
 8003fa4:	08004167 	.word	0x08004167
 8003fa8:	08004167 	.word	0x08004167
 8003fac:	08004167 	.word	0x08004167
 8003fb0:	08004167 	.word	0x08004167
 8003fb4:	08004167 	.word	0x08004167
 8003fb8:	08004167 	.word	0x08004167
 8003fbc:	08004167 	.word	0x08004167
 8003fc0:	08004167 	.word	0x08004167
 8003fc4:	08004167 	.word	0x08004167
 8003fc8:	08003fcd 	.word	0x08003fcd
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]
      break;
 8003fd4:	e0ce      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003fd6:	7abb      	ldrb	r3, [r7, #10]
 8003fd8:	2b1b      	cmp	r3, #27
 8003fda:	bf8c      	ite	hi
 8003fdc:	2201      	movhi	r2, #1
 8003fde:	2200      	movls	r2, #0
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	2a00      	cmp	r2, #0
 8003fe4:	d11c      	bne.n	8004020 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fec:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003ff0:	2a00      	cmp	r2, #0
 8003ff2:	bf14      	ite	ne
 8003ff4:	2201      	movne	r2, #1
 8003ff6:	2200      	moveq	r2, #0
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	2a00      	cmp	r2, #0
 8003ffc:	d10c      	bne.n	8004018 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003ffe:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004002:	2b00      	cmp	r3, #0
 8004004:	bf14      	ite	ne
 8004006:	2301      	movne	r3, #1
 8004008:	2300      	moveq	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b00      	cmp	r3, #0
 800400e:	d007      	beq.n	8004020 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	4a5b      	ldr	r2, [pc, #364]	@ (8004180 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8004014:	601a      	str	r2, [r3, #0]
          break;
 8004016:	e00a      	b.n	800402e <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	4a5a      	ldr	r2, [pc, #360]	@ (8004184 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 800401c:	601a      	str	r2, [r3, #0]
          break;
 800401e:	e006      	b.n	800402e <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	4a59      	ldr	r2, [pc, #356]	@ (8004188 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004024:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004026:	f04f 33ff 	mov.w	r3, #4294967295
 800402a:	60fb      	str	r3, [r7, #12]
          break;
 800402c:	bf00      	nop
      }
      break;
 800402e:	e0a1      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	4a53      	ldr	r2, [pc, #332]	@ (8004180 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8004034:	601a      	str	r2, [r3, #0]
      break;
 8004036:	e09d      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	4a54      	ldr	r2, [pc, #336]	@ (800418c <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 800403c:	601a      	str	r2, [r3, #0]
      break;
 800403e:	e099      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	4a53      	ldr	r2, [pc, #332]	@ (8004190 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8004044:	601a      	str	r2, [r3, #0]
      break;
 8004046:	e095      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	4a52      	ldr	r2, [pc, #328]	@ (8004194 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 800404c:	601a      	str	r2, [r3, #0]
      break;
 800404e:	e091      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	4a51      	ldr	r2, [pc, #324]	@ (8004198 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004054:	601a      	str	r2, [r3, #0]
      break;
 8004056:	e08d      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8004058:	7abb      	ldrb	r3, [r7, #10]
 800405a:	2b1b      	cmp	r3, #27
 800405c:	bf8c      	ite	hi
 800405e:	2201      	movhi	r2, #1
 8004060:	2200      	movls	r2, #0
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	2a00      	cmp	r2, #0
 8004066:	d11c      	bne.n	80040a2 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8004068:	2201      	movs	r2, #1
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004072:	2a00      	cmp	r2, #0
 8004074:	bf14      	ite	ne
 8004076:	2201      	movne	r2, #1
 8004078:	2200      	moveq	r2, #0
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	2a00      	cmp	r2, #0
 800407e:	d10c      	bne.n	800409a <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8004080:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	4a41      	ldr	r2, [pc, #260]	@ (800419c <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8004096:	601a      	str	r2, [r3, #0]
          break;
 8004098:	e00a      	b.n	80040b0 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	4a3e      	ldr	r2, [pc, #248]	@ (8004198 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 800409e:	601a      	str	r2, [r3, #0]
          break;
 80040a0:	e006      	b.n	80040b0 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	4a38      	ldr	r2, [pc, #224]	@ (8004188 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 80040a6:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 80040a8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ac:	60fb      	str	r3, [r7, #12]
          break;
 80040ae:	bf00      	nop
      }
      break;
 80040b0:	e060      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 80040b2:	7abb      	ldrb	r3, [r7, #10]
 80040b4:	2b1b      	cmp	r3, #27
 80040b6:	bf8c      	ite	hi
 80040b8:	2201      	movhi	r2, #1
 80040ba:	2200      	movls	r2, #0
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	2a00      	cmp	r2, #0
 80040c0:	d11c      	bne.n	80040fc <LIS2DW12_ACC_GetOutputDataRate+0x250>
 80040c2:	2201      	movs	r2, #1
 80040c4:	fa02 f303 	lsl.w	r3, r2, r3
 80040c8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 80040cc:	2a00      	cmp	r2, #0
 80040ce:	bf14      	ite	ne
 80040d0:	2201      	movne	r2, #1
 80040d2:	2200      	moveq	r2, #0
 80040d4:	b2d2      	uxtb	r2, r2
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d10c      	bne.n	80040f4 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 80040da:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 80040de:	2b00      	cmp	r3, #0
 80040e0:	bf14      	ite	ne
 80040e2:	2301      	movne	r3, #1
 80040e4:	2300      	moveq	r3, #0
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	4a2c      	ldr	r2, [pc, #176]	@ (80041a0 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 80040f0:	601a      	str	r2, [r3, #0]
          break;
 80040f2:	e00a      	b.n	800410a <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4a28      	ldr	r2, [pc, #160]	@ (8004198 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 80040f8:	601a      	str	r2, [r3, #0]
          break;
 80040fa:	e006      	b.n	800410a <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4a22      	ldr	r2, [pc, #136]	@ (8004188 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8004100:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8004102:	f04f 33ff 	mov.w	r3, #4294967295
 8004106:	60fb      	str	r3, [r7, #12]
          break;
 8004108:	bf00      	nop
      }
      break;
 800410a:	e033      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 800410c:	7abb      	ldrb	r3, [r7, #10]
 800410e:	2b1b      	cmp	r3, #27
 8004110:	bf8c      	ite	hi
 8004112:	2201      	movhi	r2, #1
 8004114:	2200      	movls	r2, #0
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	2a00      	cmp	r2, #0
 800411a:	d11c      	bne.n	8004156 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 800411c:	2201      	movs	r2, #1
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8004126:	2a00      	cmp	r2, #0
 8004128:	bf14      	ite	ne
 800412a:	2201      	movne	r2, #1
 800412c:	2200      	moveq	r2, #0
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	2a00      	cmp	r2, #0
 8004132:	d10c      	bne.n	800414e <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8004134:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf14      	ite	ne
 800413c:	2301      	movne	r3, #1
 800413e:	2300      	moveq	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d007      	beq.n	8004156 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 800414a:	601a      	str	r2, [r3, #0]
          break;
 800414c:	e00a      	b.n	8004164 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	4a11      	ldr	r2, [pc, #68]	@ (8004198 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8004152:	601a      	str	r2, [r3, #0]
          break;
 8004154:	e006      	b.n	8004164 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	4a0b      	ldr	r2, [pc, #44]	@ (8004188 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800415a:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 800415c:	f04f 33ff 	mov.w	r3, #4294967295
 8004160:	60fb      	str	r3, [r7, #12]
          break;
 8004162:	bf00      	nop
      }
      break;
 8004164:	e006      	b.n	8004174 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	4a07      	ldr	r2, [pc, #28]	@ (8004188 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 800416a:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
 8004170:	60fb      	str	r3, [r7, #12]
      break;
 8004172:	bf00      	nop
  }

  return ret;
 8004174:	68fb      	ldr	r3, [r7, #12]
}
 8004176:	4618      	mov	r0, r3
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	41480000 	.word	0x41480000
 8004184:	3fcccccd 	.word	0x3fcccccd
 8004188:	bf800000 	.word	0xbf800000
 800418c:	41c80000 	.word	0x41c80000
 8004190:	42480000 	.word	0x42480000
 8004194:	42c80000 	.word	0x42c80000
 8004198:	43480000 	.word	0x43480000
 800419c:	43c80000 	.word	0x43c80000
 80041a0:	44480000 	.word	0x44480000
 80041a4:	44c80000 	.word	0x44c80000

080041a8 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2100      	movs	r1, #0
 80041b8:	ed97 0a00 	vldr	s0, [r7]
 80041bc:	6878      	ldr	r0, [r7, #4]
 80041be:	f000 f805 	bl	80041cc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80041d8:	460b      	mov	r3, r1
 80041da:	71fb      	strb	r3, [r7, #7]
 80041dc:	4613      	mov	r3, r2
 80041de:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d109      	bne.n	80041fe <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 80041ea:	79ba      	ldrb	r2, [r7, #6]
 80041ec:	79fb      	ldrb	r3, [r7, #7]
 80041ee:	4619      	mov	r1, r3
 80041f0:	ed97 0a02 	vldr	s0, [r7, #8]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 f96b 	bl	80044d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80041fa:	4603      	mov	r3, r0
 80041fc:	e008      	b.n	8004210 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 80041fe:	79ba      	ldrb	r2, [r7, #6]
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	4619      	mov	r1, r3
 8004204:	ed97 0a02 	vldr	s0, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 fa7d 	bl	8004708 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 800420e:	4603      	mov	r3, r0
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3320      	adds	r3, #32
 800422a:	f107 020b 	add.w	r2, r7, #11
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f000 fdc5 	bl	8004dc0 <lis2dw12_full_scale_get>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 800423c:	f04f 33ff 	mov.w	r3, #4294967295
 8004240:	e027      	b.n	8004292 <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8004242:	7afb      	ldrb	r3, [r7, #11]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d81b      	bhi.n	8004280 <LIS2DW12_ACC_GetFullScale+0x68>
 8004248:	a201      	add	r2, pc, #4	@ (adr r2, 8004250 <LIS2DW12_ACC_GetFullScale+0x38>)
 800424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424e:	bf00      	nop
 8004250:	08004261 	.word	0x08004261
 8004254:	08004269 	.word	0x08004269
 8004258:	08004271 	.word	0x08004271
 800425c:	08004279 	.word	0x08004279
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2202      	movs	r2, #2
 8004264:	601a      	str	r2, [r3, #0]
      break;
 8004266:	e013      	b.n	8004290 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	2204      	movs	r2, #4
 800426c:	601a      	str	r2, [r3, #0]
      break;
 800426e:	e00f      	b.n	8004290 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2208      	movs	r2, #8
 8004274:	601a      	str	r2, [r3, #0]
      break;
 8004276:	e00b      	b.n	8004290 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	601a      	str	r2, [r3, #0]
      break;
 800427e:	e007      	b.n	8004290 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	f04f 32ff 	mov.w	r2, #4294967295
 8004286:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004288:	f04f 33ff 	mov.w	r3, #4294967295
 800428c:	60fb      	str	r3, [r7, #12]
      break;
 800428e:	bf00      	nop
  }

  return ret;
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop

0800429c <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	dd0b      	ble.n	80042c4 <LIS2DW12_ACC_SetFullScale+0x28>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	dd06      	ble.n	80042c0 <LIS2DW12_ACC_SetFullScale+0x24>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	dc01      	bgt.n	80042bc <LIS2DW12_ACC_SetFullScale+0x20>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e004      	b.n	80042c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80042bc:	2303      	movs	r3, #3
 80042be:	e002      	b.n	80042c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80042c0:	2301      	movs	r3, #1
 80042c2:	e000      	b.n	80042c6 <LIS2DW12_ACC_SetFullScale+0x2a>
 80042c4:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 80042c6:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3320      	adds	r3, #32
 80042cc:	7bfa      	ldrb	r2, [r7, #15]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f000 fd4f 	bl	8004d74 <lis2dw12_full_scale_set>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 80042dc:	f04f 33ff 	mov.w	r3, #4294967295
 80042e0:	e000      	b.n	80042e4 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80042f6:	2300      	movs	r3, #0
 80042f8:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3320      	adds	r3, #32
 80042fe:	f107 020b 	add.w	r2, r7, #11
 8004302:	4611      	mov	r1, r2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fb45 	bl	8004994 <lis2dw12_power_mode_get>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d002      	beq.n	8004316 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8004310:	f04f 33ff 	mov.w	r3, #4294967295
 8004314:	e068      	b.n	80043e8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	3320      	adds	r3, #32
 800431a:	f107 020c 	add.w	r2, r7, #12
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fd85 	bl	8004e30 <lis2dw12_acceleration_raw_get>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	e05a      	b.n	80043e8 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8004332:	7afb      	ldrb	r3, [r7, #11]
 8004334:	2b1b      	cmp	r3, #27
 8004336:	bf8c      	ite	hi
 8004338:	2201      	movhi	r2, #1
 800433a:	2200      	movls	r2, #0
 800433c:	b2d2      	uxtb	r2, r2
 800433e:	2a00      	cmp	r2, #0
 8004340:	d14d      	bne.n	80043de <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8004342:	2201      	movs	r2, #1
 8004344:	409a      	lsls	r2, r3
 8004346:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 800434a:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf14      	ite	ne
 8004352:	2301      	movne	r3, #1
 8004354:	2300      	moveq	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	d124      	bne.n	80043a6 <LIS2DW12_ACC_GetAxesRaw+0xba>
 800435c:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf14      	ite	ne
 8004364:	2301      	movne	r3, #1
 8004366:	2300      	moveq	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d037      	beq.n	80043de <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800436e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	da00      	bge.n	8004378 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004376:	330f      	adds	r3, #15
 8004378:	111b      	asrs	r3, r3, #4
 800437a:	b21a      	sxth	r2, r3
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004384:	2b00      	cmp	r3, #0
 8004386:	da00      	bge.n	800438a <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004388:	330f      	adds	r3, #15
 800438a:	111b      	asrs	r3, r3, #4
 800438c:	b21a      	sxth	r2, r3
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 8004392:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004396:	2b00      	cmp	r3, #0
 8004398:	da00      	bge.n	800439c <LIS2DW12_ACC_GetAxesRaw+0xb0>
 800439a:	330f      	adds	r3, #15
 800439c:	111b      	asrs	r3, r3, #4
 800439e:	b21a      	sxth	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	809a      	strh	r2, [r3, #4]
      break;
 80043a4:	e01f      	b.n	80043e6 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 80043a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	da00      	bge.n	80043b0 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 80043ae:	3303      	adds	r3, #3
 80043b0:	109b      	asrs	r3, r3, #2
 80043b2:	b21a      	sxth	r2, r3
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 80043b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	da00      	bge.n	80043c2 <LIS2DW12_ACC_GetAxesRaw+0xd6>
 80043c0:	3303      	adds	r3, #3
 80043c2:	109b      	asrs	r3, r3, #2
 80043c4:	b21a      	sxth	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 80043ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	da00      	bge.n	80043d4 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 80043d2:	3303      	adds	r3, #3
 80043d4:	109b      	asrs	r3, r3, #2
 80043d6:	b21a      	sxth	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	809a      	strh	r2, [r3, #4]
      break;
 80043dc:	e003      	b.n	80043e6 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 80043de:	f04f 33ff 	mov.w	r3, #4294967295
 80043e2:	617b      	str	r3, [r7, #20]
      break;
 80043e4:	bf00      	nop
  }

  return ret;
 80043e6:	697b      	ldr	r3, [r7, #20]
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3718      	adds	r7, #24
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 8004400:	f107 0310 	add.w	r3, r7, #16
 8004404:	4619      	mov	r1, r3
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f7ff ff70 	bl	80042ec <LIS2DW12_ACC_GetAxesRaw>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
 8004416:	e03c      	b.n	8004492 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 8004418:	f107 030c 	add.w	r3, r7, #12
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fc9c 	bl	8003d5c <LIS2DW12_ACC_GetSensitivity>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d002      	beq.n	8004430 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e030      	b.n	8004492 <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 8004430:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004434:	ee07 3a90 	vmov	s15, r3
 8004438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800443c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004444:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004448:	ee17 2a90 	vmov	r2, s15
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004450:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004454:	ee07 3a90 	vmov	s15, r3
 8004458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800445c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004464:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004468:	ee17 2a90 	vmov	r2, s15
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004470:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004474:	ee07 3a90 	vmov	s15, r3
 8004478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800447c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004488:	ee17 2a90 	vmov	r2, s15
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	70fb      	strb	r3, [r7, #3]
 80044a6:	4613      	mov	r3, r2
 80044a8:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f103 0020 	add.w	r0, r3, #32
 80044b0:	1cba      	adds	r2, r7, #2
 80044b2:	78f9      	ldrb	r1, [r7, #3]
 80044b4:	2301      	movs	r3, #1
 80044b6:	f000 fa07 	bl	80048c8 <lis2dw12_write_reg>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d002      	beq.n	80044c6 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 80044c0:	f04f 33ff 	mov.w	r3, #4294967295
 80044c4:	e000      	b.n	80044c8 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80044dc:	460b      	mov	r3, r1
 80044de:	71fb      	strb	r3, [r7, #7]
 80044e0:	4613      	mov	r3, r2
 80044e2:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80044e4:	79fb      	ldrb	r3, [r7, #7]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d80b      	bhi.n	8004504 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80044ec:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004531 	.word	0x08004531
 80044f8:	0800455d 	.word	0x0800455d
 80044fc:	08004589 	.word	0x08004589
 8004500:	080045b5 	.word	0x080045b5
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 8004504:	79bb      	ldrb	r3, [r7, #6]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d002      	beq.n	8004510 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 800450a:	2304      	movs	r3, #4
 800450c:	75fb      	strb	r3, [r7, #23]
          break;
 800450e:	e002      	b.n	8004516 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004510:	2314      	movs	r3, #20
 8004512:	75fb      	strb	r3, [r7, #23]
          break;
 8004514:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 8004516:	edd7 7a02 	vldr	s15, [r7, #8]
 800451a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800451e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004526:	d400      	bmi.n	800452a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 8004528:	e05a      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 800452a:	4b6f      	ldr	r3, [pc, #444]	@ (80046e8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 800452c:	60bb      	str	r3, [r7, #8]
      break;
 800452e:	e057      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 8004530:	79bb      	ldrb	r3, [r7, #6]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d002      	beq.n	800453c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 8004536:	2303      	movs	r3, #3
 8004538:	75fb      	strb	r3, [r7, #23]
          break;
 800453a:	e002      	b.n	8004542 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800453c:	2313      	movs	r3, #19
 800453e:	75fb      	strb	r3, [r7, #23]
          break;
 8004540:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004542:	edd7 7a02 	vldr	s15, [r7, #8]
 8004546:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800454a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	dc00      	bgt.n	8004556 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004554:	e044      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004556:	4b66      	ldr	r3, [pc, #408]	@ (80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004558:	60bb      	str	r3, [r7, #8]
      break;
 800455a:	e041      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 800455c:	79bb      	ldrb	r3, [r7, #6]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d002      	beq.n	8004568 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 8004562:	2302      	movs	r3, #2
 8004564:	75fb      	strb	r3, [r7, #23]
          break;
 8004566:	e002      	b.n	800456e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004568:	2312      	movs	r3, #18
 800456a:	75fb      	strb	r3, [r7, #23]
          break;
 800456c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800456e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004572:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800457a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457e:	dc00      	bgt.n	8004582 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004580:	e02e      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004582:	4b5b      	ldr	r3, [pc, #364]	@ (80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004584:	60bb      	str	r3, [r7, #8]
      break;
 8004586:	e02b      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004588:	79bb      	ldrb	r3, [r7, #6]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d002      	beq.n	8004594 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
          break;
 8004592:	e002      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004594:	2311      	movs	r3, #17
 8004596:	75fb      	strb	r3, [r7, #23]
          break;
 8004598:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800459a:	edd7 7a02 	vldr	s15, [r7, #8]
 800459e:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80045a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045aa:	dc00      	bgt.n	80045ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 80045ac:	e018      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 80045ae:	4b50      	ldr	r3, [pc, #320]	@ (80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80045b0:	60bb      	str	r3, [r7, #8]
      break;
 80045b2:	e015      	b.n	80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 80045b4:	79bb      	ldrb	r3, [r7, #6]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d002      	beq.n	80045c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 80045ba:	2300      	movs	r3, #0
 80045bc:	75fb      	strb	r3, [r7, #23]
          break;
 80045be:	e002      	b.n	80045c6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 80045c0:	2310      	movs	r3, #16
 80045c2:	75fb      	strb	r3, [r7, #23]
          break;
 80045c4:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80045c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045ca:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 80045ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d6:	dc00      	bgt.n	80045da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 80045d8:	e001      	b.n	80045de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 80045da:	4b45      	ldr	r3, [pc, #276]	@ (80046f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 80045dc:	60bb      	str	r3, [r7, #8]
      break;
 80045de:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 80045e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80045e4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80046f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80045e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f0:	d801      	bhi.n	80045f6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e04d      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80045f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80045fa:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80045fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004606:	d801      	bhi.n	800460c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 8004608:	2302      	movs	r3, #2
 800460a:	e042      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800460c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004610:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004614:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461c:	d801      	bhi.n	8004622 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 800461e:	2303      	movs	r3, #3
 8004620:	e037      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004622:	edd7 7a02 	vldr	s15, [r7, #8]
 8004626:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80046f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 800462a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800462e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004632:	d801      	bhi.n	8004638 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 8004634:	2304      	movs	r3, #4
 8004636:	e02c      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004638:	edd7 7a02 	vldr	s15, [r7, #8]
 800463c:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80046fc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 8004640:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004648:	d801      	bhi.n	800464e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 800464a:	2305      	movs	r3, #5
 800464c:	e021      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800464e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004652:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80046ec <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004656:	eef4 7ac7 	vcmpe.f32	s15, s14
 800465a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800465e:	d801      	bhi.n	8004664 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004660:	2306      	movs	r3, #6
 8004662:	e016      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004664:	edd7 7a02 	vldr	s15, [r7, #8]
 8004668:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004700 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 800466c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	d801      	bhi.n	800467a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004676:	2307      	movs	r3, #7
 8004678:	e00b      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800467a:	edd7 7a02 	vldr	s15, [r7, #8]
 800467e:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8004704 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 8004682:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468a:	d801      	bhi.n	8004690 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 800468c:	2308      	movs	r3, #8
 800468e:	e000      	b.n	8004692 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004690:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 8004692:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3320      	adds	r3, #32
 8004698:	7dba      	ldrb	r2, [r7, #22]
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fa33 	bl	8004b08 <lis2dw12_data_rate_set>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	e018      	b.n	80046e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3320      	adds	r3, #32
 80046b2:	7dfa      	ldrb	r2, [r7, #23]
 80046b4:	4611      	mov	r1, r2
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 f91e 	bl	80048f8 <lis2dw12_power_mode_set>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295
 80046c6:	e00b      	b.n	80046e0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	79fa      	ldrb	r2, [r7, #7]
 80046d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	79ba      	ldrb	r2, [r7, #6]
 80046da:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 80046de:	2300      	movs	r3, #0
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	41480000 	.word	0x41480000
 80046ec:	43480000 	.word	0x43480000
 80046f0:	43480000 	.word	0x43480000
 80046f4:	3fcccccd 	.word	0x3fcccccd
 80046f8:	42480000 	.word	0x42480000
 80046fc:	42c80000 	.word	0x42c80000
 8004700:	43c80000 	.word	0x43c80000
 8004704:	44480000 	.word	0x44480000

08004708 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	ed87 0a02 	vstr	s0, [r7, #8]
 8004714:	460b      	mov	r3, r1
 8004716:	71fb      	strb	r3, [r7, #7]
 8004718:	4613      	mov	r3, r2
 800471a:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	79fa      	ldrb	r2, [r7, #7]
 8004720:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	79ba      	ldrb	r2, [r7, #6]
 8004728:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 800472c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004730:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80047f0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8004734:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800473c:	d801      	bhi.n	8004742 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 800473e:	4b2d      	ldr	r3, [pc, #180]	@ (80047f4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 8004740:	e04d      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 8004742:	edd7 7a02 	vldr	s15, [r7, #8]
 8004746:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800474a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800474e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004752:	d801      	bhi.n	8004758 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004754:	4b28      	ldr	r3, [pc, #160]	@ (80047f8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004756:	e042      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004758:	edd7 7a02 	vldr	s15, [r7, #8]
 800475c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004760:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004768:	d801      	bhi.n	800476e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 800476a:	4b24      	ldr	r3, [pc, #144]	@ (80047fc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 800476c:	e037      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800476e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004772:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8004800 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004776:	eef4 7ac7 	vcmpe.f32	s15, s14
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d801      	bhi.n	8004784 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004780:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 8004782:	e02c      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004784:	edd7 7a02 	vldr	s15, [r7, #8]
 8004788:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8004808 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 800478c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	d801      	bhi.n	800479a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004796:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004798:	e021      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 800479a:	edd7 7a02 	vldr	s15, [r7, #8]
 800479e:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004810 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 80047a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	d801      	bhi.n	80047b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 80047ac:	4b19      	ldr	r3, [pc, #100]	@ (8004814 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 80047ae:	e016      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 80047b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80047b4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004818 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 80047b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	d801      	bhi.n	80047c6 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 80047c4:	e00b      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 80047c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80047ca:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8004820 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 80047ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d801      	bhi.n	80047dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 80047da:	e000      	b.n	80047de <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 80047dc:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	3fcccccd 	.word	0x3fcccccd
 80047f4:	3fcccccd 	.word	0x3fcccccd
 80047f8:	41480000 	.word	0x41480000
 80047fc:	41c80000 	.word	0x41c80000
 8004800:	42480000 	.word	0x42480000
 8004804:	42480000 	.word	0x42480000
 8004808:	42c80000 	.word	0x42c80000
 800480c:	42c80000 	.word	0x42c80000
 8004810:	43480000 	.word	0x43480000
 8004814:	43480000 	.word	0x43480000
 8004818:	43c80000 	.word	0x43c80000
 800481c:	43c80000 	.word	0x43c80000
 8004820:	44480000 	.word	0x44480000
 8004824:	44480000 	.word	0x44480000
 8004828:	44c80000 	.word	0x44c80000

0800482c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800482c:	b590      	push	{r4, r7, lr}
 800482e:	b087      	sub	sp, #28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	607a      	str	r2, [r7, #4]
 8004836:	461a      	mov	r2, r3
 8004838:	460b      	mov	r3, r1
 800483a:	72fb      	strb	r3, [r7, #11]
 800483c:	4613      	mov	r3, r2
 800483e:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	695c      	ldr	r4, [r3, #20]
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	7b1b      	ldrb	r3, [r3, #12]
 800484c:	4618      	mov	r0, r3
 800484e:	7afb      	ldrb	r3, [r7, #11]
 8004850:	b299      	uxth	r1, r3
 8004852:	893b      	ldrh	r3, [r7, #8]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	47a0      	blx	r4
 8004858:	4603      	mov	r3, r0
}
 800485a:	4618      	mov	r0, r3
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bd90      	pop	{r4, r7, pc}

08004862 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8004862:	b590      	push	{r4, r7, lr}
 8004864:	b087      	sub	sp, #28
 8004866:	af00      	add	r7, sp, #0
 8004868:	60f8      	str	r0, [r7, #12]
 800486a:	607a      	str	r2, [r7, #4]
 800486c:	461a      	mov	r2, r3
 800486e:	460b      	mov	r3, r1
 8004870:	72fb      	strb	r3, [r7, #11]
 8004872:	4613      	mov	r3, r2
 8004874:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	691c      	ldr	r4, [r3, #16]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	7b1b      	ldrb	r3, [r3, #12]
 8004882:	4618      	mov	r0, r3
 8004884:	7afb      	ldrb	r3, [r7, #11]
 8004886:	b299      	uxth	r1, r3
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	47a0      	blx	r4
 800488e:	4603      	mov	r3, r0
}
 8004890:	4618      	mov	r0, r3
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	bd90      	pop	{r4, r7, pc}

08004898 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b087      	sub	sp, #28
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	461a      	mov	r2, r3
 80048a4:	460b      	mov	r3, r1
 80048a6:	72fb      	strb	r3, [r7, #11]
 80048a8:	4613      	mov	r3, r2
 80048aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	685c      	ldr	r4, [r3, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	68d8      	ldr	r0, [r3, #12]
 80048b4:	893b      	ldrh	r3, [r7, #8]
 80048b6:	7af9      	ldrb	r1, [r7, #11]
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	47a0      	blx	r4
 80048bc:	6178      	str	r0, [r7, #20]

  return ret;
 80048be:	697b      	ldr	r3, [r7, #20]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	371c      	adds	r7, #28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd90      	pop	{r4, r7, pc}

080048c8 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 80048c8:	b590      	push	{r4, r7, lr}
 80048ca:	b087      	sub	sp, #28
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	607a      	str	r2, [r7, #4]
 80048d2:	461a      	mov	r2, r3
 80048d4:	460b      	mov	r3, r1
 80048d6:	72fb      	strb	r3, [r7, #11]
 80048d8:	4613      	mov	r3, r2
 80048da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681c      	ldr	r4, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	68d8      	ldr	r0, [r3, #12]
 80048e4:	893b      	ldrh	r3, [r7, #8]
 80048e6:	7af9      	ldrb	r1, [r7, #11]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	47a0      	blx	r4
 80048ec:	6178      	str	r0, [r7, #20]

  return ret;
 80048ee:	697b      	ldr	r3, [r7, #20]
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	371c      	adds	r7, #28
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd90      	pop	{r4, r7, pc}

080048f8 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004904:	f107 0210 	add.w	r2, r7, #16
 8004908:	2301      	movs	r3, #1
 800490a:	2120      	movs	r1, #32
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff ffc3 	bl	8004898 <lis2dw12_read_reg>
 8004912:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d118      	bne.n	800494c <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 800491a:	78fb      	ldrb	r3, [r7, #3]
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	b2da      	uxtb	r2, r3
 8004924:	7c3b      	ldrb	r3, [r7, #16]
 8004926:	f362 0383 	bfi	r3, r2, #2, #2
 800492a:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	b2da      	uxtb	r2, r3
 8004934:	7c3b      	ldrb	r3, [r7, #16]
 8004936:	f362 0301 	bfi	r3, r2, #0, #2
 800493a:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800493c:	f107 0210 	add.w	r2, r7, #16
 8004940:	2301      	movs	r3, #1
 8004942:	2120      	movs	r1, #32
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7ff ffbf 	bl	80048c8 <lis2dw12_write_reg>
 800494a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d107      	bne.n	8004962 <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004952:	f107 020c 	add.w	r2, r7, #12
 8004956:	2301      	movs	r3, #1
 8004958:	2125      	movs	r1, #37	@ 0x25
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f7ff ff9c 	bl	8004898 <lis2dw12_read_reg>
 8004960:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d110      	bne.n	800498a <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004968:	78fb      	ldrb	r3, [r7, #3]
 800496a:	091b      	lsrs	r3, r3, #4
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	b2da      	uxtb	r2, r3
 8004972:	7b3b      	ldrb	r3, [r7, #12]
 8004974:	f362 0382 	bfi	r3, r2, #2, #1
 8004978:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800497a:	f107 020c 	add.w	r2, r7, #12
 800497e:	2301      	movs	r3, #1
 8004980:	2125      	movs	r1, #37	@ 0x25
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ffa0 	bl	80048c8 <lis2dw12_write_reg>
 8004988:	6178      	str	r0, [r7, #20]
  }

  return ret;
 800498a:	697b      	ldr	r3, [r7, #20]
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800499e:	f107 0210 	add.w	r2, r7, #16
 80049a2:	2301      	movs	r3, #1
 80049a4:	2120      	movs	r1, #32
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff ff76 	bl	8004898 <lis2dw12_read_reg>
 80049ac:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f040 80a3 	bne.w	8004afc <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 80049b6:	f107 020c 	add.w	r2, r7, #12
 80049ba:	2301      	movs	r3, #1
 80049bc:	2125      	movs	r1, #37	@ 0x25
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7ff ff6a 	bl	8004898 <lis2dw12_read_reg>
 80049c4:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80049c6:	7b3b      	ldrb	r3, [r7, #12]
 80049c8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	011a      	lsls	r2, r3, #4
 80049d0:	7c3b      	ldrb	r3, [r7, #16]
 80049d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
             ctrl1.lp_mode))
 80049dc:	7c3a      	ldrb	r2, [r7, #16]
 80049de:	f3c2 0201 	ubfx	r2, r2, #0, #2
 80049e2:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80049e4:	4413      	add	r3, r2
 80049e6:	2b1b      	cmp	r3, #27
 80049e8:	f200 8084 	bhi.w	8004af4 <lis2dw12_power_mode_get+0x160>
 80049ec:	a201      	add	r2, pc, #4	@ (adr r2, 80049f4 <lis2dw12_power_mode_get+0x60>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a85 	.word	0x08004a85
 80049f8:	08004a7d 	.word	0x08004a7d
 80049fc:	08004a75 	.word	0x08004a75
 8004a00:	08004a6d 	.word	0x08004a6d
 8004a04:	08004a65 	.word	0x08004a65
 8004a08:	08004af5 	.word	0x08004af5
 8004a0c:	08004af5 	.word	0x08004af5
 8004a10:	08004af5 	.word	0x08004af5
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004a9d 	.word	0x08004a9d
 8004a1c:	08004a95 	.word	0x08004a95
 8004a20:	08004a8d 	.word	0x08004a8d
 8004a24:	08004af5 	.word	0x08004af5
 8004a28:	08004af5 	.word	0x08004af5
 8004a2c:	08004af5 	.word	0x08004af5
 8004a30:	08004af5 	.word	0x08004af5
 8004a34:	08004acd 	.word	0x08004acd
 8004a38:	08004ac5 	.word	0x08004ac5
 8004a3c:	08004abd 	.word	0x08004abd
 8004a40:	08004ab5 	.word	0x08004ab5
 8004a44:	08004aad 	.word	0x08004aad
 8004a48:	08004af5 	.word	0x08004af5
 8004a4c:	08004af5 	.word	0x08004af5
 8004a50:	08004af5 	.word	0x08004af5
 8004a54:	08004aed 	.word	0x08004aed
 8004a58:	08004ae5 	.word	0x08004ae5
 8004a5c:	08004add 	.word	0x08004add
 8004a60:	08004ad5 	.word	0x08004ad5
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2204      	movs	r2, #4
 8004a68:	701a      	strb	r2, [r3, #0]
        break;
 8004a6a:	e047      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2203      	movs	r2, #3
 8004a70:	701a      	strb	r2, [r3, #0]
        break;
 8004a72:	e043      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2202      	movs	r2, #2
 8004a78:	701a      	strb	r2, [r3, #0]
        break;
 8004a7a:	e03f      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	701a      	strb	r2, [r3, #0]
        break;
 8004a82:	e03b      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	2200      	movs	r2, #0
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	e037      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	220b      	movs	r2, #11
 8004a90:	701a      	strb	r2, [r3, #0]
        break;
 8004a92:	e033      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	220a      	movs	r2, #10
 8004a98:	701a      	strb	r2, [r3, #0]
        break;
 8004a9a:	e02f      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2209      	movs	r2, #9
 8004aa0:	701a      	strb	r2, [r3, #0]
        break;
 8004aa2:	e02b      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	701a      	strb	r2, [r3, #0]
        break;
 8004aaa:	e027      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2214      	movs	r2, #20
 8004ab0:	701a      	strb	r2, [r3, #0]
        break;
 8004ab2:	e023      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2213      	movs	r2, #19
 8004ab8:	701a      	strb	r2, [r3, #0]
        break;
 8004aba:	e01f      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2212      	movs	r2, #18
 8004ac0:	701a      	strb	r2, [r3, #0]
        break;
 8004ac2:	e01b      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2211      	movs	r2, #17
 8004ac8:	701a      	strb	r2, [r3, #0]
        break;
 8004aca:	e017      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2210      	movs	r2, #16
 8004ad0:	701a      	strb	r2, [r3, #0]
        break;
 8004ad2:	e013      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	221b      	movs	r2, #27
 8004ad8:	701a      	strb	r2, [r3, #0]
        break;
 8004ada:	e00f      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	221a      	movs	r2, #26
 8004ae0:	701a      	strb	r2, [r3, #0]
        break;
 8004ae2:	e00b      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	2219      	movs	r2, #25
 8004ae8:	701a      	strb	r2, [r3, #0]
        break;
 8004aea:	e007      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2218      	movs	r2, #24
 8004af0:	701a      	strb	r2, [r3, #0]
        break;
 8004af2:	e003      	b.n	8004afc <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2204      	movs	r2, #4
 8004af8:	701a      	strb	r2, [r3, #0]
        break;
 8004afa:	bf00      	nop
    }
  }

  return ret;
 8004afc:	697b      	ldr	r3, [r7, #20]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop

08004b08 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b086      	sub	sp, #24
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b14:	f107 0210 	add.w	r2, r7, #16
 8004b18:	2301      	movs	r3, #1
 8004b1a:	2120      	movs	r1, #32
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f7ff febb 	bl	8004898 <lis2dw12_read_reg>
 8004b22:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10f      	bne.n	8004b4a <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	7c3b      	ldrb	r3, [r7, #16]
 8004b34:	f362 1307 	bfi	r3, r2, #4, #4
 8004b38:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b3a:	f107 0210 	add.w	r2, r7, #16
 8004b3e:	2301      	movs	r3, #1
 8004b40:	2120      	movs	r1, #32
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f7ff fec0 	bl	80048c8 <lis2dw12_write_reg>
 8004b48:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d107      	bne.n	8004b60 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b50:	f107 020c 	add.w	r2, r7, #12
 8004b54:	2301      	movs	r3, #1
 8004b56:	2122      	movs	r1, #34	@ 0x22
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fe9d 	bl	8004898 <lis2dw12_read_reg>
 8004b5e:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d110      	bne.n	8004b88 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004b66:	78fb      	ldrb	r3, [r7, #3]
 8004b68:	091b      	lsrs	r3, r3, #4
 8004b6a:	f003 0303 	and.w	r3, r3, #3
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	7b3b      	ldrb	r3, [r7, #12]
 8004b72:	f362 0301 	bfi	r3, r2, #0, #2
 8004b76:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004b78:	f107 020c 	add.w	r2, r7, #12
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	2122      	movs	r1, #34	@ 0x22
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fea1 	bl	80048c8 <lis2dw12_write_reg>
 8004b86:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004b88:	697b      	ldr	r3, [r7, #20]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004b9e:	f107 0210 	add.w	r2, r7, #16
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	2120      	movs	r1, #32
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7ff fe76 	bl	8004898 <lis2dw12_read_reg>
 8004bac:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f040 80b3 	bne.w	8004d1c <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004bb6:	f107 020c 	add.w	r2, r7, #12
 8004bba:	2301      	movs	r3, #1
 8004bbc:	2122      	movs	r1, #34	@ 0x22
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fe6a 	bl	8004898 <lis2dw12_read_reg>
 8004bc4:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004bc6:	7b3b      	ldrb	r3, [r7, #12]
 8004bc8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	7c3a      	ldrb	r2, [r7, #16]
 8004bd2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004bd6:	b2d2      	uxtb	r2, r2
 8004bd8:	4413      	add	r3, r2
 8004bda:	2b32      	cmp	r3, #50	@ 0x32
 8004bdc:	f200 809a 	bhi.w	8004d14 <lis2dw12_data_rate_get+0x180>
 8004be0:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <lis2dw12_data_rate_get+0x54>)
 8004be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be6:	bf00      	nop
 8004be8:	08004cb5 	.word	0x08004cb5
 8004bec:	08004cbd 	.word	0x08004cbd
 8004bf0:	08004cc5 	.word	0x08004cc5
 8004bf4:	08004ccd 	.word	0x08004ccd
 8004bf8:	08004cd5 	.word	0x08004cd5
 8004bfc:	08004cdd 	.word	0x08004cdd
 8004c00:	08004ce5 	.word	0x08004ce5
 8004c04:	08004ced 	.word	0x08004ced
 8004c08:	08004cf5 	.word	0x08004cf5
 8004c0c:	08004cfd 	.word	0x08004cfd
 8004c10:	08004d15 	.word	0x08004d15
 8004c14:	08004d15 	.word	0x08004d15
 8004c18:	08004d15 	.word	0x08004d15
 8004c1c:	08004d15 	.word	0x08004d15
 8004c20:	08004d15 	.word	0x08004d15
 8004c24:	08004d15 	.word	0x08004d15
 8004c28:	08004d15 	.word	0x08004d15
 8004c2c:	08004d15 	.word	0x08004d15
 8004c30:	08004d0d 	.word	0x08004d0d
 8004c34:	08004d15 	.word	0x08004d15
 8004c38:	08004d15 	.word	0x08004d15
 8004c3c:	08004d15 	.word	0x08004d15
 8004c40:	08004d15 	.word	0x08004d15
 8004c44:	08004d15 	.word	0x08004d15
 8004c48:	08004d15 	.word	0x08004d15
 8004c4c:	08004d15 	.word	0x08004d15
 8004c50:	08004d15 	.word	0x08004d15
 8004c54:	08004d15 	.word	0x08004d15
 8004c58:	08004d15 	.word	0x08004d15
 8004c5c:	08004d15 	.word	0x08004d15
 8004c60:	08004d15 	.word	0x08004d15
 8004c64:	08004d15 	.word	0x08004d15
 8004c68:	08004d15 	.word	0x08004d15
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d15 	.word	0x08004d15
 8004c74:	08004d15 	.word	0x08004d15
 8004c78:	08004d15 	.word	0x08004d15
 8004c7c:	08004d15 	.word	0x08004d15
 8004c80:	08004d15 	.word	0x08004d15
 8004c84:	08004d15 	.word	0x08004d15
 8004c88:	08004d15 	.word	0x08004d15
 8004c8c:	08004d15 	.word	0x08004d15
 8004c90:	08004d15 	.word	0x08004d15
 8004c94:	08004d15 	.word	0x08004d15
 8004c98:	08004d15 	.word	0x08004d15
 8004c9c:	08004d15 	.word	0x08004d15
 8004ca0:	08004d15 	.word	0x08004d15
 8004ca4:	08004d15 	.word	0x08004d15
 8004ca8:	08004d15 	.word	0x08004d15
 8004cac:	08004d15 	.word	0x08004d15
 8004cb0:	08004d05 	.word	0x08004d05
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	701a      	strb	r2, [r3, #0]
        break;
 8004cba:	e02f      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	701a      	strb	r2, [r3, #0]
        break;
 8004cc2:	e02b      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]
        break;
 8004cca:	e027      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2203      	movs	r2, #3
 8004cd0:	701a      	strb	r2, [r3, #0]
        break;
 8004cd2:	e023      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2204      	movs	r2, #4
 8004cd8:	701a      	strb	r2, [r3, #0]
        break;
 8004cda:	e01f      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	2205      	movs	r2, #5
 8004ce0:	701a      	strb	r2, [r3, #0]
        break;
 8004ce2:	e01b      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	2206      	movs	r2, #6
 8004ce8:	701a      	strb	r2, [r3, #0]
        break;
 8004cea:	e017      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	2207      	movs	r2, #7
 8004cf0:	701a      	strb	r2, [r3, #0]
        break;
 8004cf2:	e013      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	2208      	movs	r2, #8
 8004cf8:	701a      	strb	r2, [r3, #0]
        break;
 8004cfa:	e00f      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2209      	movs	r2, #9
 8004d00:	701a      	strb	r2, [r3, #0]
        break;
 8004d02:	e00b      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2232      	movs	r2, #50	@ 0x32
 8004d08:	701a      	strb	r2, [r3, #0]
        break;
 8004d0a:	e007      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	2212      	movs	r2, #18
 8004d10:	701a      	strb	r2, [r3, #0]
        break;
 8004d12:	e003      	b.n	8004d1c <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	701a      	strb	r2, [r3, #0]
        break;
 8004d1a:	bf00      	nop
    }
  }

  return ret;
 8004d1c:	697b      	ldr	r3, [r7, #20]
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop

08004d28 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	460b      	mov	r3, r1
 8004d32:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d34:	f107 0208 	add.w	r2, r7, #8
 8004d38:	2301      	movs	r3, #1
 8004d3a:	2121      	movs	r1, #33	@ 0x21
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7ff fdab 	bl	8004898 <lis2dw12_read_reg>
 8004d42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10f      	bne.n	8004d6a <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004d4a:	78fb      	ldrb	r3, [r7, #3]
 8004d4c:	f003 0301 	and.w	r3, r3, #1
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	7a3b      	ldrb	r3, [r7, #8]
 8004d54:	f362 03c3 	bfi	r3, r2, #3, #1
 8004d58:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004d5a:	f107 0208 	add.w	r2, r7, #8
 8004d5e:	2301      	movs	r3, #1
 8004d60:	2121      	movs	r1, #33	@ 0x21
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff fdb0 	bl	80048c8 <lis2dw12_write_reg>
 8004d68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004d80:	f107 0208 	add.w	r2, r7, #8
 8004d84:	2301      	movs	r3, #1
 8004d86:	2125      	movs	r1, #37	@ 0x25
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7ff fd85 	bl	8004898 <lis2dw12_read_reg>
 8004d8e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004d96:	78fb      	ldrb	r3, [r7, #3]
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	7a3b      	ldrb	r3, [r7, #8]
 8004da0:	f362 1305 	bfi	r3, r2, #4, #2
 8004da4:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004da6:	f107 0208 	add.w	r2, r7, #8
 8004daa:	2301      	movs	r3, #1
 8004dac:	2125      	movs	r1, #37	@ 0x25
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fd8a 	bl	80048c8 <lis2dw12_write_reg>
 8004db4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004db6:	68fb      	ldr	r3, [r7, #12]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3710      	adds	r7, #16
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}

08004dc0 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004dca:	f107 0208 	add.w	r2, r7, #8
 8004dce:	2301      	movs	r3, #1
 8004dd0:	2125      	movs	r1, #37	@ 0x25
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f7ff fd60 	bl	8004898 <lis2dw12_read_reg>
 8004dd8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004dda:	7a3b      	ldrb	r3, [r7, #8]
 8004ddc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d81a      	bhi.n	8004e1c <lis2dw12_full_scale_get+0x5c>
 8004de6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dec <lis2dw12_full_scale_get+0x2c>)
 8004de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004e05 	.word	0x08004e05
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	701a      	strb	r2, [r3, #0]
      break;
 8004e02:	e00f      	b.n	8004e24 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2201      	movs	r2, #1
 8004e08:	701a      	strb	r2, [r3, #0]
      break;
 8004e0a:	e00b      	b.n	8004e24 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	701a      	strb	r2, [r3, #0]
      break;
 8004e12:	e007      	b.n	8004e24 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	2203      	movs	r2, #3
 8004e18:	701a      	strb	r2, [r3, #0]
      break;
 8004e1a:	e003      	b.n	8004e24 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
      break;
 8004e22:	bf00      	nop
  }

  return ret;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop

08004e30 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004e3a:	f107 020c 	add.w	r2, r7, #12
 8004e3e:	2306      	movs	r3, #6
 8004e40:	2128      	movs	r1, #40	@ 0x28
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fd28 	bl	8004898 <lis2dw12_read_reg>
 8004e48:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004e4a:	7b7b      	ldrb	r3, [r7, #13]
 8004e4c:	b21a      	sxth	r2, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	7b3a      	ldrb	r2, [r7, #12]
 8004e60:	4413      	add	r3, r2
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	b21a      	sxth	r2, r3
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004e6a:	7bfa      	ldrb	r2, [r7, #15]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	3302      	adds	r3, #2
 8004e70:	b212      	sxth	r2, r2
 8004e72:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	3302      	adds	r3, #2
 8004e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	021b      	lsls	r3, r3, #8
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	7bba      	ldrb	r2, [r7, #14]
 8004e84:	4413      	add	r3, r2
 8004e86:	b29a      	uxth	r2, r3
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	b212      	sxth	r2, r2
 8004e8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004e90:	7c7a      	ldrb	r2, [r7, #17]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	3304      	adds	r3, #4
 8004e96:	b212      	sxth	r2, r2
 8004e98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	021b      	lsls	r3, r3, #8
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	7c3a      	ldrb	r2, [r7, #16]
 8004eaa:	4413      	add	r3, r2
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	3304      	adds	r3, #4
 8004eb2:	b212      	sxth	r2, r2
 8004eb4:	801a      	strh	r2, [r3, #0]

  return ret;
 8004eb6:	697b      	ldr	r3, [r7, #20]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004eca:	2301      	movs	r3, #1
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	210f      	movs	r1, #15
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fce1 	bl	8004898 <lis2dw12_read_reg>
 8004ed6:	60f8      	str	r0, [r7, #12]

  return ret;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b084      	sub	sp, #16
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
 8004eea:	460b      	mov	r3, r1
 8004eec:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004eee:	f107 0208 	add.w	r2, r7, #8
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	2121      	movs	r1, #33	@ 0x21
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f7ff fcce 	bl	8004898 <lis2dw12_read_reg>
 8004efc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10f      	bne.n	8004f24 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	b2da      	uxtb	r2, r3
 8004f0c:	7a3b      	ldrb	r3, [r7, #8]
 8004f0e:	f362 0382 	bfi	r3, r2, #2, #1
 8004f12:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004f14:	f107 0208 	add.w	r2, r7, #8
 8004f18:	2301      	movs	r3, #1
 8004f1a:	2121      	movs	r1, #33	@ 0x21
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7ff fcd3 	bl	80048c8 <lis2dw12_write_reg>
 8004f22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f24:	68fb      	ldr	r3, [r7, #12]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b084      	sub	sp, #16
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
 8004f36:	460b      	mov	r3, r1
 8004f38:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f3a:	f107 0208 	add.w	r2, r7, #8
 8004f3e:	2301      	movs	r3, #1
 8004f40:	212e      	movs	r1, #46	@ 0x2e
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7ff fca8 	bl	8004898 <lis2dw12_read_reg>
 8004f48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10f      	bne.n	8004f70 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004f50:	78fb      	ldrb	r3, [r7, #3]
 8004f52:	f003 0307 	and.w	r3, r3, #7
 8004f56:	b2da      	uxtb	r2, r3
 8004f58:	7a3b      	ldrb	r3, [r7, #8]
 8004f5a:	f362 1347 	bfi	r3, r2, #5, #3
 8004f5e:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004f60:	f107 0208 	add.w	r2, r7, #8
 8004f64:	2301      	movs	r3, #1
 8004f66:	212e      	movs	r1, #46	@ 0x2e
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f7ff fcad 	bl	80048c8 <lis2dw12_write_reg>
 8004f6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004f70:	68fb      	ldr	r3, [r7, #12]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3710      	adds	r7, #16
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004f90:	f04f 33ff 	mov.w	r3, #4294967295
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	e067      	b.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685a      	ldr	r2, [r3, #4]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	689a      	ldr	r2, [r3, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	7b1a      	ldrb	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	691a      	ldr	r2, [r3, #16]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	695a      	ldr	r2, [r3, #20]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	699a      	ldr	r2, [r3, #24]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a28      	ldr	r2, [pc, #160]	@ (8005074 <LIS2MDL_RegisterBusIO+0xf8>)
 8004fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a27      	ldr	r2, [pc, #156]	@ (8005078 <LIS2MDL_RegisterBusIO+0xfc>)
 8004fda:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e036      	b.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4798      	blx	r3
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	e02c      	b.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d028      	beq.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d123      	bne.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d10d      	bne.n	8005044 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8005028:	2334      	movs	r3, #52	@ 0x34
 800502a:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 800502c:	7afb      	ldrb	r3, [r7, #11]
 800502e:	461a      	mov	r2, r3
 8005030:	2162      	movs	r1, #98	@ 0x62
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fb18 	bl	8005668 <LIS2MDL_Write_Reg>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d014      	beq.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 800503e:	f04f 33ff 	mov.w	r3, #4294967295
 8005042:	e012      	b.n	800506a <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d101      	bne.n	8005050 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	e00c      	b.n	800506a <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3320      	adds	r3, #32
 8005054:	2101      	movs	r1, #1
 8005056:	4618      	mov	r0, r3
 8005058:	f000 ff69 	bl	8005f2e <lis2mdl_i2c_interface_set>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8005062:	f04f 33ff 	mov.w	r3, #4294967295
 8005066:	e000      	b.n	800506a <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8005068:	68fb      	ldr	r3, [r7, #12]
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	080056bf 	.word	0x080056bf
 8005078:	08005741 	.word	0x08005741

0800507c <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	2b03      	cmp	r3, #3
 800508a:	d144      	bne.n	8005116 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 800508c:	f107 0208 	add.w	r2, r7, #8
 8005090:	2301      	movs	r3, #1
 8005092:	2162      	movs	r1, #98	@ 0x62
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fb94 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 80050a0:	f04f 33ff 	mov.w	r3, #4294967295
 80050a4:	e06c      	b.n	8005180 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050a6:	f107 020c 	add.w	r2, r7, #12
 80050aa:	2301      	movs	r3, #1
 80050ac:	2160      	movs	r1, #96	@ 0x60
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fb87 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d002      	beq.n	80050c0 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 80050ba:	f04f 33ff 	mov.w	r3, #4294967295
 80050be:	e05f      	b.n	8005180 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 80050c0:	7a3b      	ldrb	r3, [r7, #8]
 80050c2:	f043 0310 	orr.w	r3, r3, #16
 80050c6:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 80050c8:	7a3b      	ldrb	r3, [r7, #8]
 80050ca:	f36f 0341 	bfc	r3, #1, #1
 80050ce:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80050d0:	7b3b      	ldrb	r3, [r7, #12]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f362 0301 	bfi	r3, r2, #0, #2
 80050d8:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 80050da:	7b3b      	ldrb	r3, [r7, #12]
 80050dc:	f043 030c 	orr.w	r3, r3, #12
 80050e0:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 80050e2:	f107 0208 	add.w	r2, r7, #8
 80050e6:	2301      	movs	r3, #1
 80050e8:	2162      	movs	r1, #98	@ 0x62
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fca8 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 80050f6:	f04f 33ff 	mov.w	r3, #4294967295
 80050fa:	e041      	b.n	8005180 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050fc:	f107 020c 	add.w	r2, r7, #12
 8005100:	2301      	movs	r3, #1
 8005102:	2160      	movs	r1, #96	@ 0x60
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 fc9b 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d032      	beq.n	8005176 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	e034      	b.n	8005180 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3320      	adds	r3, #32
 800511a:	2101      	movs	r1, #1
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fe61 	bl	8005de4 <lis2mdl_block_data_update_set>
 8005122:	4603      	mov	r3, r0
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8005128:	f04f 33ff 	mov.w	r3, #4294967295
 800512c:	e028      	b.n	8005180 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	3320      	adds	r3, #32
 8005132:	2102      	movs	r1, #2
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fdd1 	bl	8005cdc <lis2mdl_operating_mode_set>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8005140:	f04f 33ff 	mov.w	r3, #4294967295
 8005144:	e01c      	b.n	8005180 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	3320      	adds	r3, #32
 800514a:	2103      	movs	r1, #3
 800514c:	4618      	mov	r0, r3
 800514e:	f000 fdeb 	bl	8005d28 <lis2mdl_data_rate_set>
 8005152:	4603      	mov	r3, r0
 8005154:	2b00      	cmp	r3, #0
 8005156:	d002      	beq.n	800515e <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8005158:	f04f 33ff 	mov.w	r3, #4294967295
 800515c:	e010      	b.n	8005180 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	3320      	adds	r3, #32
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f000 febc 	bl	8005ee2 <lis2mdl_self_test_set>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d002      	beq.n	8005176 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8005170:	f04f 33ff 	mov.w	r3, #4294967295
 8005174:	e004      	b.n	8005180 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2201      	movs	r2, #1
 800517a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	4618      	mov	r0, r3
 8005182:	3710      	adds	r7, #16
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f8a5 	bl	80052e0 <LIS2MDL_MAG_Disable>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 800519c:	f04f 33ff 	mov.w	r3, #4294967295
 80051a0:	e004      	b.n	80051ac <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d10b      	bne.n	80051de <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 80051c6:	2301      	movs	r3, #1
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	214f      	movs	r1, #79	@ 0x4f
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 faf8 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00e      	beq.n	80051f6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80051d8:	f04f 33ff 	mov.w	r3, #4294967295
 80051dc:	e00c      	b.n	80051f8 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	3320      	adds	r3, #32
 80051e2:	6839      	ldr	r1, [r7, #0]
 80051e4:	4618      	mov	r0, r3
 80051e6:	f000 fe6b 	bl	8005ec0 <lis2mdl_device_id_get>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
 80051f4:	e000      	b.n	80051f8 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2200      	movs	r2, #0
 800520e:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	2200      	movs	r2, #0
 8005214:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2201      	movs	r2, #1
 800521a:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2200      	movs	r2, #0
 8005220:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2200      	movs	r2, #0
 8005226:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2232      	movs	r2, #50	@ 0x32
 8005232:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	f04f 0200 	mov.w	r2, #0
 800523a:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	4a04      	ldr	r2, [pc, #16]	@ (8005258 <LIS2MDL_GetCapabilities+0x58>)
 8005248:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	42c80000 	.word	0x42c80000

0800525c <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800526e:	2300      	movs	r3, #0
 8005270:	e032      	b.n	80052d8 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	2b03      	cmp	r3, #3
 8005278:	d11d      	bne.n	80052b6 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800527a:	f107 020c 	add.w	r2, r7, #12
 800527e:	2301      	movs	r3, #1
 8005280:	2160      	movs	r1, #96	@ 0x60
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fa9d 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d002      	beq.n	8005294 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800528e:	f04f 33ff 	mov.w	r3, #4294967295
 8005292:	e021      	b.n	80052d8 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005294:	7b3b      	ldrb	r3, [r7, #12]
 8005296:	f36f 0301 	bfc	r3, #0, #2
 800529a:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800529c:	f107 020c 	add.w	r2, r7, #12
 80052a0:	2301      	movs	r3, #1
 80052a2:	2160      	movs	r1, #96	@ 0x60
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 fbcb 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80052b0:	f04f 33ff 	mov.w	r3, #4294967295
 80052b4:	e010      	b.n	80052d8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	3320      	adds	r3, #32
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f000 fd0d 	bl	8005cdc <lis2mdl_operating_mode_set>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 80052c8:	f04f 33ff 	mov.w	r3, #4294967295
 80052cc:	e004      	b.n	80052d8 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2201      	movs	r2, #1
 80052d2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	e033      	b.n	800535e <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	2b03      	cmp	r3, #3
 80052fc:	d11e      	bne.n	800533c <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80052fe:	f107 020c 	add.w	r2, r7, #12
 8005302:	2301      	movs	r3, #1
 8005304:	2160      	movs	r1, #96	@ 0x60
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa5b 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	e022      	b.n	800535e <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8005318:	7b3b      	ldrb	r3, [r7, #12]
 800531a:	2202      	movs	r2, #2
 800531c:	f362 0301 	bfi	r3, r2, #0, #2
 8005320:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005322:	f107 020c 	add.w	r2, r7, #12
 8005326:	2301      	movs	r3, #1
 8005328:	2160      	movs	r1, #96	@ 0x60
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f000 fb88 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00e      	beq.n	8005354 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005336:	f04f 33ff 	mov.w	r3, #4294967295
 800533a:	e010      	b.n	800535e <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3320      	adds	r3, #32
 8005340:	2102      	movs	r1, #2
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fcca 	bl	8005cdc <lis2mdl_operating_mode_set>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	e004      	b.n	800535e <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8005366:	b480      	push	{r7}
 8005368:	b083      	sub	sp, #12
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005376:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b084      	sub	sp, #16
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8005392:	2300      	movs	r3, #0
 8005394:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3320      	adds	r3, #32
 800539a:	f107 020b 	add.w	r2, r7, #11
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fce7 	bl	8005d74 <lis2mdl_data_rate_get>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d002      	beq.n	80053b2 <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 80053ac:	f04f 33ff 	mov.w	r3, #4294967295
 80053b0:	e023      	b.n	80053fa <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	2b03      	cmp	r3, #3
 80053b6:	d81b      	bhi.n	80053f0 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 80053b8:	a201      	add	r2, pc, #4	@ (adr r2, 80053c0 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053d1 	.word	0x080053d1
 80053c4:	080053d9 	.word	0x080053d9
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053e9 	.word	0x080053e9
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005404 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 80053d4:	601a      	str	r2, [r3, #0]
      break;
 80053d6:	e00f      	b.n	80053f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	4a0b      	ldr	r2, [pc, #44]	@ (8005408 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 80053dc:	601a      	str	r2, [r3, #0]
      break;
 80053de:	e00b      	b.n	80053f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	4a0a      	ldr	r2, [pc, #40]	@ (800540c <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80053e4:	601a      	str	r2, [r3, #0]
      break;
 80053e6:	e007      	b.n	80053f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	4a09      	ldr	r2, [pc, #36]	@ (8005410 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80053ec:	601a      	str	r2, [r3, #0]
      break;
 80053ee:	e003      	b.n	80053f8 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80053f0:	f04f 33ff 	mov.w	r3, #4294967295
 80053f4:	60fb      	str	r3, [r7, #12]
      break;
 80053f6:	bf00      	nop
  }

  return ret;
 80053f8:	68fb      	ldr	r3, [r7, #12]
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	41200000 	.word	0x41200000
 8005408:	41a00000 	.word	0x41a00000
 800540c:	42480000 	.word	0x42480000
 8005410:	42c80000 	.word	0x42c80000

08005414 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 8005420:	edd7 7a00 	vldr	s15, [r7]
 8005424:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8005428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d801      	bhi.n	8005436 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 8005432:	2300      	movs	r3, #0
 8005434:	e016      	b.n	8005464 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005436:	edd7 7a00 	vldr	s15, [r7]
 800543a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800543e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005446:	d801      	bhi.n	800544c <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005448:	2301      	movs	r3, #1
 800544a:	e00b      	b.n	8005464 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800544c:	edd7 7a00 	vldr	s15, [r7]
 8005450:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80054d8 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005454:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800545c:	d801      	bhi.n	8005462 <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800545e:	2302      	movs	r3, #2
 8005460:	e000      	b.n	8005464 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005462:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005464:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d121      	bne.n	80054b2 <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800546e:	f107 020c 	add.w	r2, r7, #12
 8005472:	2301      	movs	r3, #1
 8005474:	2160      	movs	r1, #96	@ 0x60
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f9a3 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	e022      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	f003 0303 	and.w	r3, r3, #3
 800548e:	b2da      	uxtb	r2, r3
 8005490:	7b3b      	ldrb	r3, [r7, #12]
 8005492:	f362 0383 	bfi	r3, r2, #2, #2
 8005496:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005498:	f107 020c 	add.w	r2, r7, #12
 800549c:	2301      	movs	r3, #1
 800549e:	2160      	movs	r1, #96	@ 0x60
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 facd 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00f      	beq.n	80054cc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80054ac:	f04f 33ff 	mov.w	r3, #4294967295
 80054b0:	e00d      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3320      	adds	r3, #32
 80054b6:	7bfa      	ldrb	r2, [r7, #15]
 80054b8:	4611      	mov	r1, r2
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fc34 	bl	8005d28 <lis2mdl_data_rate_set>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 80054c6:	f04f 33ff 	mov.w	r3, #4294967295
 80054ca:	e000      	b.n	80054ce <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	42480000 	.word	0x42480000

080054dc <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2232      	movs	r2, #50	@ 0x32
 80054ea:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	370c      	adds	r7, #12
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
 8005502:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	3320      	adds	r3, #32
 8005520:	f107 0208 	add.w	r2, r7, #8
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f000 fc82 	bl	8005e30 <lis2mdl_magnetic_raw_get>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 8005532:	f04f 33ff 	mov.w	r3, #4294967295
 8005536:	e00c      	b.n	8005552 <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8005538:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8005540:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005548:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}

0800555a <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b088      	sub	sp, #32
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
 8005562:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b03      	cmp	r3, #3
 800556a:	d134      	bne.n	80055d6 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 800556c:	f107 0218 	add.w	r2, r7, #24
 8005570:	2306      	movs	r3, #6
 8005572:	2168      	movs	r1, #104	@ 0x68
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f924 	bl	80057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 800557a:	4603      	mov	r3, r0
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005580:	f04f 33ff 	mov.w	r3, #4294967295
 8005584:	e06c      	b.n	8005660 <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005586:	7e7b      	ldrb	r3, [r7, #25]
 8005588:	b21b      	sxth	r3, r3
 800558a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 800558c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005590:	b29b      	uxth	r3, r3
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	b29b      	uxth	r3, r3
 8005596:	7e3a      	ldrb	r2, [r7, #24]
 8005598:	4413      	add	r3, r2
 800559a:	b29b      	uxth	r3, r3
 800559c:	b21b      	sxth	r3, r3
 800559e:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 80055a0:	7efb      	ldrb	r3, [r7, #27]
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 80055a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	7eba      	ldrb	r2, [r7, #26]
 80055b2:	4413      	add	r3, r2
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	b21b      	sxth	r3, r3
 80055b8:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 80055ba:	7f7b      	ldrb	r3, [r7, #29]
 80055bc:	b21b      	sxth	r3, r3
 80055be:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 80055c0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	7f3a      	ldrb	r2, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	82bb      	strh	r3, [r7, #20]
 80055d4:	e00d      	b.n	80055f2 <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3320      	adds	r3, #32
 80055da:	f107 0210 	add.w	r2, r7, #16
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fc25 	bl	8005e30 <lis2mdl_magnetic_raw_get>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80055ec:	f04f 33ff 	mov.w	r3, #4294967295
 80055f0:	e036      	b.n	8005660 <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80055f2:	f107 030c 	add.w	r3, r7, #12
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff feb4 	bl	8005366 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80055fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005602:	ee07 3a90 	vmov	s15, r3
 8005606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800560a:	edd7 7a03 	vldr	s15, [r7, #12]
 800560e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005612:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005616:	ee17 2a90 	vmov	r2, s15
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 800561e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800562a:	edd7 7a03 	vldr	s15, [r7, #12]
 800562e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005632:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005636:	ee17 2a90 	vmov	r2, s15
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 800563e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005642:	ee07 3a90 	vmov	s15, r3
 8005646:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800564a:	edd7 7a03 	vldr	s15, [r7, #12]
 800564e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005652:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005656:	ee17 2a90 	vmov	r2, s15
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3720      	adds	r7, #32
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	460b      	mov	r3, r1
 8005672:	70fb      	strb	r3, [r7, #3]
 8005674:	4613      	mov	r3, r2
 8005676:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b03      	cmp	r3, #3
 800567e:	d10b      	bne.n	8005698 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005680:	1cba      	adds	r2, r7, #2
 8005682:	78f9      	ldrb	r1, [r7, #3]
 8005684:	2301      	movs	r3, #1
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9da 	bl	8005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d010      	beq.n	80056b4 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005692:	f04f 33ff 	mov.w	r3, #4294967295
 8005696:	e00e      	b.n	80056b6 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f103 0020 	add.w	r0, r3, #32
 800569e:	1cba      	adds	r2, r7, #2
 80056a0:	78f9      	ldrb	r1, [r7, #3]
 80056a2:	2301      	movs	r3, #1
 80056a4:	f000 fb02 	bl	8005cac <lis2mdl_write_reg>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d002      	beq.n	80056b4 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 80056ae:	f04f 33ff 	mov.w	r3, #4294967295
 80056b2:	e000      	b.n	80056b6 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}

080056be <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80056be:	b590      	push	{r4, r7, lr}
 80056c0:	b087      	sub	sp, #28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	461a      	mov	r2, r3
 80056ca:	460b      	mov	r3, r1
 80056cc:	72fb      	strb	r3, [r7, #11]
 80056ce:	4613      	mov	r3, r2
 80056d0:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10e      	bne.n	80056fc <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	695c      	ldr	r4, [r3, #20]
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	7b1b      	ldrb	r3, [r3, #12]
 80056e6:	4618      	mov	r0, r3
 80056e8:	7afb      	ldrb	r3, [r7, #11]
 80056ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	893b      	ldrh	r3, [r7, #8]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	47a0      	blx	r4
 80056f8:	4603      	mov	r3, r0
 80056fa:	e01d      	b.n	8005738 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	2b03      	cmp	r3, #3
 8005702:	d10b      	bne.n	800571c <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	695c      	ldr	r4, [r3, #20]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	7b1b      	ldrb	r3, [r3, #12]
 800570c:	4618      	mov	r0, r3
 800570e:	7afb      	ldrb	r3, [r7, #11]
 8005710:	b299      	uxth	r1, r3
 8005712:	893b      	ldrh	r3, [r7, #8]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	47a0      	blx	r4
 8005718:	4603      	mov	r3, r0
 800571a:	e00d      	b.n	8005738 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	695c      	ldr	r4, [r3, #20]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	7b1b      	ldrb	r3, [r3, #12]
 8005724:	4618      	mov	r0, r3
 8005726:	7afb      	ldrb	r3, [r7, #11]
 8005728:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800572c:	b2db      	uxtb	r3, r3
 800572e:	4619      	mov	r1, r3
 8005730:	893b      	ldrh	r3, [r7, #8]
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	47a0      	blx	r4
 8005736:	4603      	mov	r3, r0
  }
}
 8005738:	4618      	mov	r0, r3
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd90      	pop	{r4, r7, pc}

08005740 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005740:	b590      	push	{r4, r7, lr}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	607a      	str	r2, [r7, #4]
 800574a:	461a      	mov	r2, r3
 800574c:	460b      	mov	r3, r1
 800574e:	72fb      	strb	r3, [r7, #11]
 8005750:	4613      	mov	r3, r2
 8005752:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d10e      	bne.n	800577e <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	691c      	ldr	r4, [r3, #16]
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	7b1b      	ldrb	r3, [r3, #12]
 8005768:	4618      	mov	r0, r3
 800576a:	7afb      	ldrb	r3, [r7, #11]
 800576c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	47a0      	blx	r4
 800577a:	4603      	mov	r3, r0
 800577c:	e01d      	b.n	80057ba <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b03      	cmp	r3, #3
 8005784:	d10b      	bne.n	800579e <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	691c      	ldr	r4, [r3, #16]
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	7b1b      	ldrb	r3, [r3, #12]
 800578e:	4618      	mov	r0, r3
 8005790:	7afb      	ldrb	r3, [r7, #11]
 8005792:	b299      	uxth	r1, r3
 8005794:	893b      	ldrh	r3, [r7, #8]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	47a0      	blx	r4
 800579a:	4603      	mov	r3, r0
 800579c:	e00d      	b.n	80057ba <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	691c      	ldr	r4, [r3, #16]
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	7b1b      	ldrb	r3, [r3, #12]
 80057a6:	4618      	mov	r0, r3
 80057a8:	7afb      	ldrb	r3, [r7, #11]
 80057aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	4619      	mov	r1, r3
 80057b2:	893b      	ldrh	r3, [r7, #8]
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	47a0      	blx	r4
 80057b8:	4603      	mov	r3, r0
  }
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	371c      	adds	r7, #28
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd90      	pop	{r4, r7, pc}

080057c2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b08c      	sub	sp, #48	@ 0x30
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	461a      	mov	r2, r3
 80057ce:	460b      	mov	r3, r1
 80057d0:	72fb      	strb	r3, [r7, #11]
 80057d2:	4613      	mov	r3, r2
 80057d4:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 80057d6:	2301      	movs	r3, #1
 80057d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 80057dc:	2340      	movs	r3, #64	@ 0x40
 80057de:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 80057e2:	2300      	movs	r3, #0
 80057e4:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80057e8:	233d      	movs	r3, #61	@ 0x3d
 80057ea:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80057ec:	2315      	movs	r3, #21
 80057ee:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80057f2:	2316      	movs	r3, #22
 80057f4:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80057f8:	2317      	movs	r3, #23
 80057fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80057fe:	2314      	movs	r3, #20
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005804:	2344      	movs	r3, #68	@ 0x44
 8005806:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 8005808:	2302      	movs	r3, #2
 800580a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 800580e:	2339      	movs	r3, #57	@ 0x39
 8005810:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800581a:	2329      	movs	r3, #41	@ 0x29
 800581c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005820:	231e      	movs	r3, #30
 8005822:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 8005826:	2301      	movs	r3, #1
 8005828:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 800582c:	893b      	ldrh	r3, [r7, #8]
 800582e:	b2db      	uxtb	r3, r3
 8005830:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005832:	2310      	movs	r3, #16
 8005834:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800583e:	2340      	movs	r3, #64	@ 0x40
 8005840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f103 0020 	add.w	r0, r3, #32
 800584a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800584e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005852:	2301      	movs	r3, #1
 8005854:	f000 fa2a 	bl	8005cac <lis2mdl_write_reg>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	e0e9      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f103 0020 	add.w	r0, r3, #32
 800586a:	f107 021f 	add.w	r2, r7, #31
 800586e:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005872:	2301      	movs	r3, #1
 8005874:	f000 fa1a 	bl	8005cac <lis2mdl_write_reg>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e0d9      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f103 0020 	add.w	r0, r3, #32
 800588a:	f107 020b 	add.w	r2, r7, #11
 800588e:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005892:	2301      	movs	r3, #1
 8005894:	f000 fa0a 	bl	8005cac <lis2mdl_write_reg>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d002      	beq.n	80058a4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	e0c9      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f103 0020 	add.w	r0, r3, #32
 80058aa:	f107 021d 	add.w	r2, r7, #29
 80058ae:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80058b2:	2301      	movs	r3, #1
 80058b4:	f000 f9fa 	bl	8005cac <lis2mdl_write_reg>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 80058be:	f04f 33ff 	mov.w	r3, #4294967295
 80058c2:	e0b9      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f103 0020 	add.w	r0, r3, #32
 80058ca:	f107 021e 	add.w	r2, r7, #30
 80058ce:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 80058d2:	2301      	movs	r3, #1
 80058d4:	f000 f9ea 	bl	8005cac <lis2mdl_write_reg>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d002      	beq.n	80058e4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e0a9      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f103 0020 	add.w	r0, r3, #32
 80058ea:	f107 0220 	add.w	r2, r7, #32
 80058ee:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80058f2:	2301      	movs	r3, #1
 80058f4:	f000 f9da 	bl	8005cac <lis2mdl_write_reg>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d002      	beq.n	8005904 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	e099      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f103 0020 	add.w	r0, r3, #32
 800590a:	f107 021c 	add.w	r2, r7, #28
 800590e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005912:	2301      	movs	r3, #1
 8005914:	f000 f9b2 	bl	8005c7c <lis2mdl_read_reg>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d002      	beq.n	8005924 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 800591e:	f04f 33ff 	mov.w	r3, #4294967295
 8005922:	e089      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005924:	7f3b      	ldrb	r3, [r7, #28]
 8005926:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800592a:	429a      	cmp	r2, r3
 800592c:	d102      	bne.n	8005934 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 800592e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005932:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f103 0020 	add.w	r0, r3, #32
 800593a:	f107 021c 	add.w	r2, r7, #28
 800593e:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 8005942:	2301      	movs	r3, #1
 8005944:	f000 f9b2 	bl	8005cac <lis2mdl_write_reg>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e071      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f103 0020 	add.w	r0, r3, #32
 800595a:	f107 0214 	add.w	r2, r7, #20
 800595e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005962:	2306      	movs	r3, #6
 8005964:	f000 f98a 	bl	8005c7c <lis2mdl_read_reg>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800596e:	f04f 33ff 	mov.w	r3, #4294967295
 8005972:	e061      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f103 0020 	add.w	r0, r3, #32
 800597a:	f107 021b 	add.w	r2, r7, #27
 800597e:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 8005982:	2301      	movs	r3, #1
 8005984:	f000 f97a 	bl	8005c7c <lis2mdl_read_reg>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800598e:	f04f 33ff 	mov.w	r3, #4294967295
 8005992:	e051      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005994:	7efa      	ldrb	r2, [r7, #27]
 8005996:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800599a:	4013      	ands	r3, r2
 800599c:	b2db      	uxtb	r3, r3
 800599e:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d1e6      	bne.n	8005974 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f103 0020 	add.w	r0, r3, #32
 80059ac:	f107 021b 	add.w	r2, r7, #27
 80059b0:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 80059b4:	2301      	movs	r3, #1
 80059b6:	f000 f961 	bl	8005c7c <lis2mdl_read_reg>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	e038      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 80059c6:	7efa      	ldrb	r2, [r7, #27]
 80059c8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059cc:	4013      	ands	r3, r2
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d1e6      	bne.n	80059a6 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f103 0020 	add.w	r0, r3, #32
 80059de:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 80059e2:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80059e6:	2301      	movs	r3, #1
 80059e8:	f000 f960 	bl	8005cac <lis2mdl_write_reg>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d002      	beq.n	80059f8 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80059f2:	f04f 33ff 	mov.w	r3, #4294967295
 80059f6:	e01f      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f103 0020 	add.w	r0, r3, #32
 80059fe:	893b      	ldrh	r3, [r7, #8]
 8005a00:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	f000 f939 	bl	8005c7c <lis2mdl_read_reg>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 8005a10:	f04f 33ff 	mov.w	r3, #4294967295
 8005a14:	e010      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f103 0020 	add.w	r0, r3, #32
 8005a1c:	f107 0220 	add.w	r2, r7, #32
 8005a20:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005a24:	2301      	movs	r3, #1
 8005a26:	f000 f941 	bl	8005cac <lis2mdl_write_reg>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 8005a30:	f04f 33ff 	mov.w	r3, #4294967295
 8005a34:	e000      	b.n	8005a38 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3730      	adds	r7, #48	@ 0x30
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	@ 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	607a      	str	r2, [r7, #4]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	72fb      	strb	r3, [r7, #11]
 8005a50:	4613      	mov	r3, r2
 8005a52:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005a54:	2301      	movs	r3, #1
 8005a56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005a5a:	2340      	movs	r3, #64	@ 0x40
 8005a5c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005a66:	233c      	movs	r3, #60	@ 0x3c
 8005a68:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005a6a:	2315      	movs	r3, #21
 8005a6c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005a70:	2316      	movs	r3, #22
 8005a72:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005a76:	2317      	movs	r3, #23
 8005a78:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005a80:	2314      	movs	r3, #20
 8005a82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005a86:	2344      	movs	r3, #68	@ 0x44
 8005a88:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005a8a:	2339      	movs	r3, #57	@ 0x39
 8005a8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005a90:	2380      	movs	r3, #128	@ 0x80
 8005a92:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005a96:	2329      	movs	r3, #41	@ 0x29
 8005a98:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005a9c:	231e      	movs	r3, #30
 8005a9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005aa8:	2310      	movs	r3, #16
 8005aaa:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005ab4:	2340      	movs	r3, #64	@ 0x40
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005aba:	230e      	movs	r3, #14
 8005abc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f103 0020 	add.w	r0, r3, #32
 8005ac6:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005aca:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f000 f8ec 	bl	8005cac <lis2mdl_write_reg>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005ada:	f04f 33ff 	mov.w	r3, #4294967295
 8005ade:	e0c9      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f103 0020 	add.w	r0, r3, #32
 8005ae6:	f107 021f 	add.w	r2, r7, #31
 8005aea:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8005aee:	2301      	movs	r3, #1
 8005af0:	f000 f8dc 	bl	8005cac <lis2mdl_write_reg>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d002      	beq.n	8005b00 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	e0b9      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f103 0020 	add.w	r0, r3, #32
 8005b06:	f107 020b 	add.w	r2, r7, #11
 8005b0a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8005b0e:	2301      	movs	r3, #1
 8005b10:	f000 f8cc 	bl	8005cac <lis2mdl_write_reg>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 8005b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1e:	e0a9      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f103 0020 	add.w	r0, r3, #32
 8005b26:	f107 021e 	add.w	r2, r7, #30
 8005b2a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8005b2e:	2301      	movs	r3, #1
 8005b30:	f000 f8bc 	bl	8005cac <lis2mdl_write_reg>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d002      	beq.n	8005b40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 8005b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3e:	e099      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f103 0020 	add.w	r0, r3, #32
 8005b46:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	f000 f8ad 	bl	8005cac <lis2mdl_write_reg>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005b58:	f04f 33ff 	mov.w	r3, #4294967295
 8005b5c:	e08a      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f103 0020 	add.w	r0, r3, #32
 8005b64:	f107 021d 	add.w	r2, r7, #29
 8005b68:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f000 f89d 	bl	8005cac <lis2mdl_write_reg>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005b78:	f04f 33ff 	mov.w	r3, #4294967295
 8005b7c:	e07a      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f103 0020 	add.w	r0, r3, #32
 8005b84:	f107 0220 	add.w	r2, r7, #32
 8005b88:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f000 f88d 	bl	8005cac <lis2mdl_write_reg>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005b98:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9c:	e06a      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f103 0020 	add.w	r0, r3, #32
 8005ba4:	f107 021c 	add.w	r2, r7, #28
 8005ba8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005bac:	2301      	movs	r3, #1
 8005bae:	f000 f865 	bl	8005c7c <lis2mdl_read_reg>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bbc:	e05a      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005bbe:	7f3b      	ldrb	r3, [r7, #28]
 8005bc0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d102      	bne.n	8005bce <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005bcc:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f103 0020 	add.w	r0, r3, #32
 8005bd4:	f107 021c 	add.w	r2, r7, #28
 8005bd8:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f000 f865 	bl	8005cac <lis2mdl_write_reg>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 8005be8:	f04f 33ff 	mov.w	r3, #4294967295
 8005bec:	e042      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f103 0020 	add.w	r0, r3, #32
 8005bf4:	f107 0214 	add.w	r2, r7, #20
 8005bf8:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8005bfc:	2306      	movs	r3, #6
 8005bfe:	f000 f83d 	bl	8005c7c <lis2mdl_read_reg>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	e032      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f103 0020 	add.w	r0, r3, #32
 8005c14:	f107 021b 	add.w	r2, r7, #27
 8005c18:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f000 f82d 	bl	8005c7c <lis2mdl_read_reg>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d002      	beq.n	8005c2e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 8005c28:	f04f 33ff 	mov.w	r3, #4294967295
 8005c2c:	e022      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 8005c2e:	7efa      	ldrb	r2, [r7, #27]
 8005c30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005c34:	4013      	ands	r3, r2
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d1e6      	bne.n	8005c0e <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f103 0020 	add.w	r0, r3, #32
 8005c46:	f107 021b 	add.w	r2, r7, #27
 8005c4a:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f000 f814 	bl	8005c7c <lis2mdl_read_reg>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5e:	e009      	b.n	8005c74 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005c60:	7efa      	ldrb	r2, [r7, #27]
 8005c62:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005c66:	4013      	ands	r3, r2
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d1e6      	bne.n	8005c40 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3730      	adds	r7, #48	@ 0x30
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005c7c:	b590      	push	{r4, r7, lr}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	607a      	str	r2, [r7, #4]
 8005c86:	461a      	mov	r2, r3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	72fb      	strb	r3, [r7, #11]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	685c      	ldr	r4, [r3, #4]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	68d8      	ldr	r0, [r3, #12]
 8005c98:	893b      	ldrh	r3, [r7, #8]
 8005c9a:	7af9      	ldrb	r1, [r7, #11]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	47a0      	blx	r4
 8005ca0:	6178      	str	r0, [r7, #20]

  return ret;
 8005ca2:	697b      	ldr	r3, [r7, #20]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd90      	pop	{r4, r7, pc}

08005cac <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	460b      	mov	r3, r1
 8005cba:	72fb      	strb	r3, [r7, #11]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681c      	ldr	r4, [r3, #0]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68d8      	ldr	r0, [r3, #12]
 8005cc8:	893b      	ldrh	r3, [r7, #8]
 8005cca:	7af9      	ldrb	r1, [r7, #11]
 8005ccc:	687a      	ldr	r2, [r7, #4]
 8005cce:	47a0      	blx	r4
 8005cd0:	6178      	str	r0, [r7, #20]

  return ret;
 8005cd2:	697b      	ldr	r3, [r7, #20]
}
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd90      	pop	{r4, r7, pc}

08005cdc <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005ce8:	f107 0208 	add.w	r2, r7, #8
 8005cec:	2301      	movs	r3, #1
 8005cee:	2160      	movs	r1, #96	@ 0x60
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ffc3 	bl	8005c7c <lis2mdl_read_reg>
 8005cf6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10f      	bne.n	8005d1e <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005cfe:	78fb      	ldrb	r3, [r7, #3]
 8005d00:	f003 0303 	and.w	r3, r3, #3
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	7a3b      	ldrb	r3, [r7, #8]
 8005d08:	f362 0301 	bfi	r3, r2, #0, #2
 8005d0c:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d0e:	f107 0208 	add.w	r2, r7, #8
 8005d12:	2301      	movs	r3, #1
 8005d14:	2160      	movs	r1, #96	@ 0x60
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f7ff ffc8 	bl	8005cac <lis2mdl_write_reg>
 8005d1c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3710      	adds	r7, #16
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b084      	sub	sp, #16
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	460b      	mov	r3, r1
 8005d32:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d34:	f107 0208 	add.w	r2, r7, #8
 8005d38:	2301      	movs	r3, #1
 8005d3a:	2160      	movs	r1, #96	@ 0x60
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff9d 	bl	8005c7c <lis2mdl_read_reg>
 8005d42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10f      	bne.n	8005d6a <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	b2da      	uxtb	r2, r3
 8005d52:	7a3b      	ldrb	r3, [r7, #8]
 8005d54:	f362 0383 	bfi	r3, r2, #2, #2
 8005d58:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d5a:	f107 0208 	add.w	r2, r7, #8
 8005d5e:	2301      	movs	r3, #1
 8005d60:	2160      	movs	r1, #96	@ 0x60
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7ff ffa2 	bl	8005cac <lis2mdl_write_reg>
 8005d68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005d7e:	f107 0208 	add.w	r2, r7, #8
 8005d82:	2301      	movs	r3, #1
 8005d84:	2160      	movs	r1, #96	@ 0x60
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7ff ff78 	bl	8005c7c <lis2mdl_read_reg>
 8005d8c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005d8e:	7a3b      	ldrb	r3, [r7, #8]
 8005d90:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005d94:	b2db      	uxtb	r3, r3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d81a      	bhi.n	8005dd0 <lis2mdl_data_rate_get+0x5c>
 8005d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005da0 <lis2mdl_data_rate_get+0x2c>)
 8005d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da0:	08005db1 	.word	0x08005db1
 8005da4:	08005db9 	.word	0x08005db9
 8005da8:	08005dc1 	.word	0x08005dc1
 8005dac:	08005dc9 	.word	0x08005dc9
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	2200      	movs	r2, #0
 8005db4:	701a      	strb	r2, [r3, #0]
      break;
 8005db6:	e00f      	b.n	8005dd8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
      break;
 8005dbe:	e00b      	b.n	8005dd8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	701a      	strb	r2, [r3, #0]
      break;
 8005dc6:	e007      	b.n	8005dd8 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2203      	movs	r2, #3
 8005dcc:	701a      	strb	r2, [r3, #0]
      break;
 8005dce:	e003      	b.n	8005dd8 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
      break;
 8005dd6:	bf00      	nop
  }

  return ret;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop

08005de4 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b084      	sub	sp, #16
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	460b      	mov	r3, r1
 8005dee:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005df0:	f107 0208 	add.w	r2, r7, #8
 8005df4:	2301      	movs	r3, #1
 8005df6:	2162      	movs	r1, #98	@ 0x62
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7ff ff3f 	bl	8005c7c <lis2mdl_read_reg>
 8005dfe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	b2da      	uxtb	r2, r3
 8005e0e:	7a3b      	ldrb	r3, [r7, #8]
 8005e10:	f362 1304 	bfi	r3, r2, #4, #1
 8005e14:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005e16:	f107 0208 	add.w	r2, r7, #8
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	2162      	movs	r1, #98	@ 0x62
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff ff44 	bl	8005cac <lis2mdl_write_reg>
 8005e24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005e26:	68fb      	ldr	r3, [r7, #12]
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005e3a:	f107 020c 	add.w	r2, r7, #12
 8005e3e:	2306      	movs	r3, #6
 8005e40:	2168      	movs	r1, #104	@ 0x68
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f7ff ff1a 	bl	8005c7c <lis2mdl_read_reg>
 8005e48:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005e4a:	7b7b      	ldrb	r3, [r7, #13]
 8005e4c:	b21a      	sxth	r2, r3
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	021b      	lsls	r3, r3, #8
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	7b3a      	ldrb	r2, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	b21a      	sxth	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005e6a:	7bfa      	ldrb	r2, [r7, #15]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3302      	adds	r3, #2
 8005e70:	b212      	sxth	r2, r2
 8005e72:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	3302      	adds	r3, #2
 8005e78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	021b      	lsls	r3, r3, #8
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	7bba      	ldrb	r2, [r7, #14]
 8005e84:	4413      	add	r3, r2
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	b212      	sxth	r2, r2
 8005e8e:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005e90:	7c7a      	ldrb	r2, [r7, #17]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	3304      	adds	r3, #4
 8005e96:	b212      	sxth	r2, r2
 8005e98:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	021b      	lsls	r3, r3, #8
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	7c3a      	ldrb	r2, [r7, #16]
 8005eaa:	4413      	add	r3, r2
 8005eac:	b29a      	uxth	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	3304      	adds	r3, #4
 8005eb2:	b212      	sxth	r2, r2
 8005eb4:	801a      	strh	r2, [r3, #0]

  return ret;
 8005eb6:	697b      	ldr	r3, [r7, #20]
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3718      	adds	r7, #24
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
 8005ec8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005eca:	2301      	movs	r3, #1
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	214f      	movs	r1, #79	@ 0x4f
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f7ff fed3 	bl	8005c7c <lis2mdl_read_reg>
 8005ed6:	60f8      	str	r0, [r7, #12]

  return ret;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005eee:	f107 0208 	add.w	r2, r7, #8
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	2162      	movs	r1, #98	@ 0x62
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fec0 	bl	8005c7c <lis2mdl_read_reg>
 8005efc:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d10f      	bne.n	8005f24 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	7a3b      	ldrb	r3, [r7, #8]
 8005f0e:	f362 0341 	bfi	r3, r2, #1, #1
 8005f12:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f14:	f107 0208 	add.w	r2, r7, #8
 8005f18:	2301      	movs	r3, #1
 8005f1a:	2162      	movs	r1, #98	@ 0x62
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f7ff fec5 	bl	8005cac <lis2mdl_write_reg>
 8005f22:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f24:	68fb      	ldr	r3, [r7, #12]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f3a:	f107 0208 	add.w	r2, r7, #8
 8005f3e:	2301      	movs	r3, #1
 8005f40:	2162      	movs	r1, #98	@ 0x62
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7ff fe9a 	bl	8005c7c <lis2mdl_read_reg>
 8005f48:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10f      	bne.n	8005f70 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005f50:	78fb      	ldrb	r3, [r7, #3]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	7a3b      	ldrb	r3, [r7, #8]
 8005f5a:	f362 1345 	bfi	r3, r2, #5, #1
 8005f5e:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005f60:	f107 0208 	add.w	r2, r7, #8
 8005f64:	2301      	movs	r3, #1
 8005f66:	2162      	movs	r1, #98	@ 0x62
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe9f 	bl	8005cac <lis2mdl_write_reg>
 8005f6e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e051      	b.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	7b1a      	ldrb	r2, [r3, #12]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	699a      	ldr	r2, [r3, #24]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4a1d      	ldr	r2, [pc, #116]	@ (8006048 <LSM6DSO_RegisterBusIO+0xcc>)
 8005fd4:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1c      	ldr	r2, [pc, #112]	@ (800604c <LSM6DSO_RegisterBusIO+0xd0>)
 8005fda:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	69da      	ldr	r2, [r3, #28]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d103      	bne.n	8005ffa <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	e020      	b.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4798      	blx	r3
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8006006:	f04f 33ff 	mov.w	r3, #4294967295
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	e016      	b.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d112      	bne.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800601c:	2b00      	cmp	r3, #0
 800601e:	d10d      	bne.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8006020:	230c      	movs	r3, #12
 8006022:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8006024:	7afb      	ldrb	r3, [r7, #11]
 8006026:	461a      	mov	r2, r3
 8006028:	2112      	movs	r1, #18
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 ff5d 	bl	8006eea <LSM6DSO_Write_Reg>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8006036:	f04f 33ff 	mov.w	r3, #4294967295
 800603a:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 800603c:	68fb      	ldr	r3, [r7, #12]
}
 800603e:	4618      	mov	r0, r3
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	0800738d 	.word	0x0800738d
 800604c:	080073c3 	.word	0x080073c3

08006050 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	2b03      	cmp	r3, #3
 800605e:	d00b      	beq.n	8006078 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3320      	adds	r3, #32
 8006064:	2180      	movs	r1, #128	@ 0x80
 8006066:	4618      	mov	r0, r3
 8006068:	f001 fe84 	bl	8007d74 <lsm6dso_i3c_disable_set>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d002      	beq.n	8006078 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8006072:	f04f 33ff 	mov.w	r3, #4294967295
 8006076:	e060      	b.n	800613a <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	3320      	adds	r3, #32
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f001 fe52 	bl	8007d28 <lsm6dso_auto_increment_set>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d002      	beq.n	8006090 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 800608a:	f04f 33ff 	mov.w	r3, #4294967295
 800608e:	e054      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	3320      	adds	r3, #32
 8006094:	2101      	movs	r1, #1
 8006096:	4618      	mov	r0, r3
 8006098:	f001 fd62 	bl	8007b60 <lsm6dso_block_data_update_set>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 80060a2:	f04f 33ff 	mov.w	r3, #4294967295
 80060a6:	e048      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3320      	adds	r3, #32
 80060ac:	2100      	movs	r1, #0
 80060ae:	4618      	mov	r0, r3
 80060b0:	f001 fea8 	bl	8007e04 <lsm6dso_fifo_mode_set>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d002      	beq.n	80060c0 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 80060ba:	f04f 33ff 	mov.w	r3, #4294967295
 80060be:	e03c      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2204      	movs	r2, #4
 80060c4:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	3320      	adds	r3, #32
 80060cc:	2100      	movs	r1, #0
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa20 	bl	8007514 <lsm6dso_xl_data_rate_set>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 80060da:	f04f 33ff 	mov.w	r3, #4294967295
 80060de:	e02c      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	3320      	adds	r3, #32
 80060e4:	2100      	movs	r1, #0
 80060e6:	4618      	mov	r0, r3
 80060e8:	f001 f9b6 	bl	8007458 <lsm6dso_xl_full_scale_set>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d002      	beq.n	80060f8 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 80060f2:	f04f 33ff 	mov.w	r3, #4294967295
 80060f6:	e020      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2204      	movs	r2, #4
 80060fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3320      	adds	r3, #32
 8006104:	2100      	movs	r1, #0
 8006106:	4618      	mov	r0, r3
 8006108:	f001 fbce 	bl	80078a8 <lsm6dso_gy_data_rate_set>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d002      	beq.n	8006118 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
 8006116:	e010      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3320      	adds	r3, #32
 800611c:	2106      	movs	r1, #6
 800611e:	4618      	mov	r0, r3
 8006120:	f001 fb5a 	bl	80077d8 <lsm6dso_gy_full_scale_set>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 800612a:	f04f 33ff 	mov.w	r3, #4294967295
 800612e:	e004      	b.n	800613a <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b082      	sub	sp, #8
 8006146:	af00      	add	r7, sp, #0
 8006148:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f888 	bl	8006260 <LSM6DSO_ACC_Disable>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8006156:	f04f 33ff 	mov.w	r3, #4294967295
 800615a:	e015      	b.n	8006188 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fc2e 	bl	80069be <LSM6DSO_GYRO_Disable>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d002      	beq.n	800616e <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8006168:	f04f 33ff 	mov.w	r3, #4294967295
 800616c:	e00c      	b.n	8006188 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2200      	movs	r2, #0
 800617a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	3320      	adds	r3, #32
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 fdb0 	bl	8007d06 <lsm6dso_device_id_get>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295
 80061b0:	e000      	b.n	80061b4 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80061b2:	2300      	movs	r3, #0
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2201      	movs	r2, #1
 80061ca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	2201      	movs	r2, #1
 80061d0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	2200      	movs	r2, #0
 80061d6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	2200      	movs	r2, #0
 80061dc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80061e4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2210      	movs	r2, #16
 80061ea:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2200      	movs	r2, #0
 80061f0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	4a07      	ldr	r2, [pc, #28]	@ (8006214 <LSM6DSO_GetCapabilities+0x58>)
 80061f6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	4a06      	ldr	r2, [pc, #24]	@ (8006214 <LSM6DSO_GetCapabilities+0x58>)
 80061fc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	f04f 0200 	mov.w	r2, #0
 8006204:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8006206:	2300      	movs	r3, #0
}
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	45d02000 	.word	0x45d02000

08006218 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006226:	2b01      	cmp	r3, #1
 8006228:	d101      	bne.n	800622e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	e014      	b.n	8006258 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f103 0220 	add.w	r2, r3, #32
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800623a:	4619      	mov	r1, r3
 800623c:	4610      	mov	r0, r2
 800623e:	f001 f969 	bl	8007514 <lsm6dso_xl_data_rate_set>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d002      	beq.n	800624e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006248:	f04f 33ff 	mov.w	r3, #4294967295
 800624c:	e004      	b.n	8006258 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006256:	2300      	movs	r3, #0
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}

08006260 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	e01f      	b.n	80062b6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f103 0220 	add.w	r2, r3, #32
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3333      	adds	r3, #51	@ 0x33
 8006280:	4619      	mov	r1, r3
 8006282:	4610      	mov	r0, r2
 8006284:	f001 fa40 	bl	8007708 <lsm6dso_xl_data_rate_get>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	e010      	b.n	80062b6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	3320      	adds	r3, #32
 8006298:	2100      	movs	r1, #0
 800629a:	4618      	mov	r0, r3
 800629c:	f001 f93a 	bl	8007514 <lsm6dso_xl_data_rate_set>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80062a6:	f04f 33ff 	mov.w	r3, #4294967295
 80062aa:	e004      	b.n	80062b6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	3320      	adds	r3, #32
 80062d2:	f107 020b 	add.w	r2, r7, #11
 80062d6:	4611      	mov	r1, r2
 80062d8:	4618      	mov	r0, r3
 80062da:	f001 f8e3 	bl	80074a4 <lsm6dso_xl_full_scale_get>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80062e4:	f04f 33ff 	mov.w	r3, #4294967295
 80062e8:	e023      	b.n	8006332 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80062ea:	7afb      	ldrb	r3, [r7, #11]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d81b      	bhi.n	8006328 <LSM6DSO_ACC_GetSensitivity+0x68>
 80062f0:	a201      	add	r2, pc, #4	@ (adr r2, 80062f8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80062f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f6:	bf00      	nop
 80062f8:	08006309 	.word	0x08006309
 80062fc:	08006321 	.word	0x08006321
 8006300:	08006311 	.word	0x08006311
 8006304:	08006319 	.word	0x08006319
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	4a0c      	ldr	r2, [pc, #48]	@ (800633c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 800630c:	601a      	str	r2, [r3, #0]
      break;
 800630e:	e00f      	b.n	8006330 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4a0b      	ldr	r2, [pc, #44]	@ (8006340 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8006314:	601a      	str	r2, [r3, #0]
      break;
 8006316:	e00b      	b.n	8006330 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	4a0a      	ldr	r2, [pc, #40]	@ (8006344 <LSM6DSO_ACC_GetSensitivity+0x84>)
 800631c:	601a      	str	r2, [r3, #0]
      break;
 800631e:	e007      	b.n	8006330 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	4a09      	ldr	r2, [pc, #36]	@ (8006348 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8006324:	601a      	str	r2, [r3, #0]
      break;
 8006326:	e003      	b.n	8006330 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8006328:	f04f 33ff 	mov.w	r3, #4294967295
 800632c:	60fb      	str	r3, [r7, #12]
      break;
 800632e:	bf00      	nop
  }

  return ret;
 8006330:	68fb      	ldr	r3, [r7, #12]
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	3d79db23 	.word	0x3d79db23
 8006340:	3df9db23 	.word	0x3df9db23
 8006344:	3e79db23 	.word	0x3e79db23
 8006348:	3ef9db23 	.word	0x3ef9db23

0800634c <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3320      	adds	r3, #32
 800635e:	f107 020b 	add.w	r2, r7, #11
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f001 f9cf 	bl	8007708 <lsm6dso_xl_data_rate_get>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006370:	f04f 33ff 	mov.w	r3, #4294967295
 8006374:	e054      	b.n	8006420 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006376:	7afb      	ldrb	r3, [r7, #11]
 8006378:	2b0b      	cmp	r3, #11
 800637a:	d84c      	bhi.n	8006416 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 800637c:	a201      	add	r2, pc, #4	@ (adr r2, 8006384 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	080063b5 	.word	0x080063b5
 8006388:	080063c7 	.word	0x080063c7
 800638c:	080063cf 	.word	0x080063cf
 8006390:	080063d7 	.word	0x080063d7
 8006394:	080063df 	.word	0x080063df
 8006398:	080063e7 	.word	0x080063e7
 800639c:	080063ef 	.word	0x080063ef
 80063a0:	080063f7 	.word	0x080063f7
 80063a4:	080063ff 	.word	0x080063ff
 80063a8:	08006407 	.word	0x08006407
 80063ac:	0800640f 	.word	0x0800640f
 80063b0:	080063bf 	.word	0x080063bf
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	f04f 0200 	mov.w	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]
      break;
 80063bc:	e02f      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	4a19      	ldr	r2, [pc, #100]	@ (8006428 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80063c2:	601a      	str	r2, [r3, #0]
      break;
 80063c4:	e02b      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	4a18      	ldr	r2, [pc, #96]	@ (800642c <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80063ca:	601a      	str	r2, [r3, #0]
      break;
 80063cc:	e027      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	4a17      	ldr	r2, [pc, #92]	@ (8006430 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80063d2:	601a      	str	r2, [r3, #0]
      break;
 80063d4:	e023      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	4a16      	ldr	r2, [pc, #88]	@ (8006434 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80063da:	601a      	str	r2, [r3, #0]
      break;
 80063dc:	e01f      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	4a15      	ldr	r2, [pc, #84]	@ (8006438 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80063e2:	601a      	str	r2, [r3, #0]
      break;
 80063e4:	e01b      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	4a14      	ldr	r2, [pc, #80]	@ (800643c <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80063ea:	601a      	str	r2, [r3, #0]
      break;
 80063ec:	e017      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	4a13      	ldr	r2, [pc, #76]	@ (8006440 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80063f2:	601a      	str	r2, [r3, #0]
      break;
 80063f4:	e013      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	4a12      	ldr	r2, [pc, #72]	@ (8006444 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80063fa:	601a      	str	r2, [r3, #0]
      break;
 80063fc:	e00f      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	4a11      	ldr	r2, [pc, #68]	@ (8006448 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 8006402:	601a      	str	r2, [r3, #0]
      break;
 8006404:	e00b      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	4a10      	ldr	r2, [pc, #64]	@ (800644c <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 800640a:	601a      	str	r2, [r3, #0]
      break;
 800640c:	e007      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	4a0f      	ldr	r2, [pc, #60]	@ (8006450 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8006412:	601a      	str	r2, [r3, #0]
      break;
 8006414:	e003      	b.n	800641e <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8006416:	f04f 33ff 	mov.w	r3, #4294967295
 800641a:	60fb      	str	r3, [r7, #12]
      break;
 800641c:	bf00      	nop
  }

  return ret;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	3fcccccd 	.word	0x3fcccccd
 800642c:	41480000 	.word	0x41480000
 8006430:	41d00000 	.word	0x41d00000
 8006434:	42500000 	.word	0x42500000
 8006438:	42d00000 	.word	0x42d00000
 800643c:	43500000 	.word	0x43500000
 8006440:	43d08000 	.word	0x43d08000
 8006444:	44504000 	.word	0x44504000
 8006448:	44d06000 	.word	0x44d06000
 800644c:	45505000 	.word	0x45505000
 8006450:	45d05800 	.word	0x45d05800

08006454 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006460:	2100      	movs	r1, #0
 8006462:	ed97 0a00 	vldr	s0, [r7]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f806 	bl	8006478 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 800646c:	4603      	mov	r3, r0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
	...

08006478 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b08c      	sub	sp, #48	@ 0x30
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	ed87 0a02 	vstr	s0, [r7, #8]
 8006484:	460b      	mov	r3, r1
 8006486:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8006490:	79fb      	ldrb	r3, [r7, #7]
 8006492:	2b02      	cmp	r3, #2
 8006494:	f000 80ea 	beq.w	800666c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006498:	2b02      	cmp	r3, #2
 800649a:	f300 8163 	bgt.w	8006764 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d074      	beq.n	8006590 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 80064a6:	e15d      	b.n	8006764 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f103 0020 	add.w	r0, r3, #32
 80064ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80064b2:	2301      	movs	r3, #1
 80064b4:	2114      	movs	r1, #20
 80064b6:	f000 ff9f 	bl	80073f8 <lsm6dso_read_reg>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 80064c0:	f04f 33ff 	mov.w	r3, #4294967295
 80064c4:	e16c      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80064c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d025      	beq.n	8006520 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d10b      	bne.n	80064f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	3320      	adds	r3, #32
 80064e2:	2100      	movs	r1, #0
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 f815 	bl	8007514 <lsm6dso_xl_data_rate_set>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80064f0:	f04f 33ff 	mov.w	r3, #4294967295
 80064f4:	e154      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80064f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80064fa:	f36f 13c7 	bfc	r3, #7, #1
 80064fe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f103 0020 	add.w	r0, r3, #32
 8006508:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800650c:	2301      	movs	r3, #1
 800650e:	2114      	movs	r1, #20
 8006510:	f000 ff8a 	bl	8007428 <lsm6dso_write_reg>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 800651a:	f04f 33ff 	mov.w	r3, #4294967295
 800651e:	e13f      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f103 0020 	add.w	r0, r3, #32
 8006526:	f107 0220 	add.w	r2, r7, #32
 800652a:	2301      	movs	r3, #1
 800652c:	2115      	movs	r1, #21
 800652e:	f000 ff63 	bl	80073f8 <lsm6dso_read_reg>
 8006532:	4603      	mov	r3, r0
 8006534:	2b00      	cmp	r3, #0
 8006536:	d002      	beq.n	800653e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 8006538:	f04f 33ff 	mov.w	r3, #4294967295
 800653c:	e130      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800653e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	b2db      	uxtb	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d014      	beq.n	8006576 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 800654c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006550:	f36f 1304 	bfc	r3, #4, #1
 8006554:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f103 0020 	add.w	r0, r3, #32
 800655e:	f107 0220 	add.w	r2, r7, #32
 8006562:	2301      	movs	r3, #1
 8006564:	2115      	movs	r1, #21
 8006566:	f000 ff5f 	bl	8007428 <lsm6dso_write_reg>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d002      	beq.n	8006576 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006570:	f04f 33ff 	mov.w	r3, #4294967295
 8006574:	e114      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006576:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800657a:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800657e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006586:	d400      	bmi.n	800658a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006588:	e0f0      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 800658a:	4b87      	ldr	r3, [pc, #540]	@ (80067a8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 800658c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800658e:	e0ed      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f103 0020 	add.w	r0, r3, #32
 8006596:	f107 021c 	add.w	r2, r7, #28
 800659a:	2301      	movs	r3, #1
 800659c:	2114      	movs	r1, #20
 800659e:	f000 ff2b 	bl	80073f8 <lsm6dso_read_reg>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	e0f8      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 80065ae:	7f3b      	ldrb	r3, [r7, #28]
 80065b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d023      	beq.n	8006602 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d10b      	bne.n	80065dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	3320      	adds	r3, #32
 80065c8:	2100      	movs	r1, #0
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 ffa2 	bl	8007514 <lsm6dso_xl_data_rate_set>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 80065d6:	f04f 33ff 	mov.w	r3, #4294967295
 80065da:	e0e1      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80065dc:	7f3b      	ldrb	r3, [r7, #28]
 80065de:	f36f 13c7 	bfc	r3, #7, #1
 80065e2:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f103 0020 	add.w	r0, r3, #32
 80065ea:	f107 021c 	add.w	r2, r7, #28
 80065ee:	2301      	movs	r3, #1
 80065f0:	2114      	movs	r1, #20
 80065f2:	f000 ff19 	bl	8007428 <lsm6dso_write_reg>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80065fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006600:	e0ce      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f103 0020 	add.w	r0, r3, #32
 8006608:	f107 0218 	add.w	r2, r7, #24
 800660c:	2301      	movs	r3, #1
 800660e:	2115      	movs	r1, #21
 8006610:	f000 fef2 	bl	80073f8 <lsm6dso_read_reg>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d002      	beq.n	8006620 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 800661a:	f04f 33ff 	mov.w	r3, #4294967295
 800661e:	e0bf      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 8006620:	7e3b      	ldrb	r3, [r7, #24]
 8006622:	f003 0310 	and.w	r3, r3, #16
 8006626:	b2db      	uxtb	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	d112      	bne.n	8006652 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 800662c:	7e3b      	ldrb	r3, [r7, #24]
 800662e:	f043 0310 	orr.w	r3, r3, #16
 8006632:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f103 0020 	add.w	r0, r3, #32
 800663a:	f107 0218 	add.w	r2, r7, #24
 800663e:	2301      	movs	r3, #1
 8006640:	2115      	movs	r1, #21
 8006642:	f000 fef1 	bl	8007428 <lsm6dso_write_reg>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d002      	beq.n	8006652 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295
 8006650:	e0a6      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006652:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006656:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80067ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800665a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800665e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006662:	dc00      	bgt.n	8006666 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006664:	e082      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006666:	4b52      	ldr	r3, [pc, #328]	@ (80067b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800666a:	e07f      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f103 0020 	add.w	r0, r3, #32
 8006672:	f107 0210 	add.w	r2, r7, #16
 8006676:	2301      	movs	r3, #1
 8006678:	2115      	movs	r1, #21
 800667a:	f000 febd 	bl	80073f8 <lsm6dso_read_reg>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006684:	f04f 33ff 	mov.w	r3, #4294967295
 8006688:	e08a      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 800668a:	7c3b      	ldrb	r3, [r7, #16]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d012      	beq.n	80066bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006696:	7c3b      	ldrb	r3, [r7, #16]
 8006698:	f36f 1304 	bfc	r3, #4, #1
 800669c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	f103 0020 	add.w	r0, r3, #32
 80066a4:	f107 0210 	add.w	r2, r7, #16
 80066a8:	2301      	movs	r3, #1
 80066aa:	2115      	movs	r1, #21
 80066ac:	f000 febc 	bl	8007428 <lsm6dso_write_reg>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d002      	beq.n	80066bc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	e071      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d108      	bne.n	80066d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f979 	bl	80069be <LSM6DSO_GYRO_Disable>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 80066d2:	f04f 33ff 	mov.w	r3, #4294967295
 80066d6:	e063      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f103 0020 	add.w	r0, r3, #32
 80066de:	f107 0214 	add.w	r2, r7, #20
 80066e2:	2301      	movs	r3, #1
 80066e4:	2114      	movs	r1, #20
 80066e6:	f000 fe87 	bl	80073f8 <lsm6dso_read_reg>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80066f0:	f04f 33ff 	mov.w	r3, #4294967295
 80066f4:	e054      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80066f6:	7d3b      	ldrb	r3, [r7, #20]
 80066f8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d123      	bne.n	800674a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006708:	2b01      	cmp	r3, #1
 800670a:	d10b      	bne.n	8006724 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3320      	adds	r3, #32
 8006710:	2100      	movs	r1, #0
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fefe 	bl	8007514 <lsm6dso_xl_data_rate_set>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 800671e:	f04f 33ff 	mov.w	r3, #4294967295
 8006722:	e03d      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 8006724:	7d3b      	ldrb	r3, [r7, #20]
 8006726:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800672a:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f103 0020 	add.w	r0, r3, #32
 8006732:	f107 0214 	add.w	r2, r7, #20
 8006736:	2301      	movs	r3, #1
 8006738:	2114      	movs	r1, #20
 800673a:	f000 fe75 	bl	8007428 <lsm6dso_write_reg>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	e02a      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800674a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800674e:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80067ac <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800675a:	dc00      	bgt.n	800675e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 800675c:	e006      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800675e:	4b14      	ldr	r3, [pc, #80]	@ (80067b0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006760:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006762:	e003      	b.n	800676c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006764:	f04f 33ff 	mov.w	r3, #4294967295
 8006768:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 800676a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800676c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800676e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006772:	d102      	bne.n	800677a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006774:	f04f 33ff 	mov.w	r3, #4294967295
 8006778:	e012      	b.n	80067a0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006780:	2b01      	cmp	r3, #1
 8006782:	d106      	bne.n	8006792 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006784:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f000 fbc9 	bl	8006f20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800678e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006790:	e005      	b.n	800679e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006792:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f000 fc5a 	bl	8007050 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 800679c:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800679e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3730      	adds	r7, #48	@ 0x30
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	41480000 	.word	0x41480000
 80067ac:	43500000 	.word	0x43500000
 80067b0:	43500000 	.word	0x43500000

080067b4 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	3320      	adds	r3, #32
 80067c6:	f107 020b 	add.w	r2, r7, #11
 80067ca:	4611      	mov	r1, r2
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fe69 	bl	80074a4 <lsm6dso_xl_full_scale_get>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80067d8:	f04f 33ff 	mov.w	r3, #4294967295
 80067dc:	e023      	b.n	8006826 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	2b03      	cmp	r3, #3
 80067e2:	d81b      	bhi.n	800681c <LSM6DSO_ACC_GetFullScale+0x68>
 80067e4:	a201      	add	r2, pc, #4	@ (adr r2, 80067ec <LSM6DSO_ACC_GetFullScale+0x38>)
 80067e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ea:	bf00      	nop
 80067ec:	080067fd 	.word	0x080067fd
 80067f0:	08006815 	.word	0x08006815
 80067f4:	08006805 	.word	0x08006805
 80067f8:	0800680d 	.word	0x0800680d
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2202      	movs	r2, #2
 8006800:	601a      	str	r2, [r3, #0]
      break;
 8006802:	e00f      	b.n	8006824 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	2204      	movs	r2, #4
 8006808:	601a      	str	r2, [r3, #0]
      break;
 800680a:	e00b      	b.n	8006824 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	2208      	movs	r2, #8
 8006810:	601a      	str	r2, [r3, #0]
      break;
 8006812:	e007      	b.n	8006824 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	2210      	movs	r2, #16
 8006818:	601a      	str	r2, [r3, #0]
      break;
 800681a:	e003      	b.n	8006824 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800681c:	f04f 33ff 	mov.w	r3, #4294967295
 8006820:	60fb      	str	r3, [r7, #12]
      break;
 8006822:	bf00      	nop
  }

  return ret;
 8006824:	68fb      	ldr	r3, [r7, #12]
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop

08006830 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	2b02      	cmp	r3, #2
 800683e:	dd0b      	ble.n	8006858 <LSM6DSO_ACC_SetFullScale+0x28>
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	2b04      	cmp	r3, #4
 8006844:	dd06      	ble.n	8006854 <LSM6DSO_ACC_SetFullScale+0x24>
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	2b08      	cmp	r3, #8
 800684a:	dc01      	bgt.n	8006850 <LSM6DSO_ACC_SetFullScale+0x20>
 800684c:	2303      	movs	r3, #3
 800684e:	e004      	b.n	800685a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006850:	2301      	movs	r3, #1
 8006852:	e002      	b.n	800685a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006854:	2302      	movs	r3, #2
 8006856:	e000      	b.n	800685a <LSM6DSO_ACC_SetFullScale+0x2a>
 8006858:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 800685a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3320      	adds	r3, #32
 8006860:	7bfa      	ldrb	r2, [r7, #15]
 8006862:	4611      	mov	r1, r2
 8006864:	4618      	mov	r0, r3
 8006866:	f000 fdf7 	bl	8007458 <lsm6dso_xl_full_scale_set>
 800686a:	4603      	mov	r3, r0
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006870:	f04f 33ff 	mov.w	r3, #4294967295
 8006874:	e000      	b.n	8006878 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3710      	adds	r7, #16
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3320      	adds	r3, #32
 800688e:	f107 0208 	add.w	r2, r7, #8
 8006892:	4611      	mov	r1, r2
 8006894:	4618      	mov	r0, r3
 8006896:	f001 f9d1 	bl	8007c3c <lsm6dso_acceleration_raw_get>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	e00c      	b.n	80068c0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80068a6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80068ae:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 80068b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 80068d2:	f04f 0300 	mov.w	r3, #0
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3320      	adds	r3, #32
 80068dc:	f107 0210 	add.w	r2, r7, #16
 80068e0:	4611      	mov	r1, r2
 80068e2:	4618      	mov	r0, r3
 80068e4:	f001 f9aa 	bl	8007c3c <lsm6dso_acceleration_raw_get>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d002      	beq.n	80068f4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295
 80068f2:	e03c      	b.n	800696e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80068f4:	f107 030c 	add.w	r3, r7, #12
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fce0 	bl	80062c0 <LSM6DSO_ACC_GetSensitivity>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d002      	beq.n	800690c <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8006906:	f04f 33ff 	mov.w	r3, #4294967295
 800690a:	e030      	b.n	800696e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 800690c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006910:	ee07 3a90 	vmov	s15, r3
 8006914:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006918:	edd7 7a03 	vldr	s15, [r7, #12]
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006924:	ee17 2a90 	vmov	r2, s15
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 800692c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006930:	ee07 3a90 	vmov	s15, r3
 8006934:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006938:	edd7 7a03 	vldr	s15, [r7, #12]
 800693c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006940:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006944:	ee17 2a90 	vmov	r2, s15
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 800694c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006950:	ee07 3a90 	vmov	s15, r3
 8006954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006958:	edd7 7a03 	vldr	s15, [r7, #12]
 800695c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006960:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006964:	ee17 2a90 	vmov	r2, s15
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006984:	2b01      	cmp	r3, #1
 8006986:	d101      	bne.n	800698c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006988:	2300      	movs	r3, #0
 800698a:	e014      	b.n	80069b6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f103 0220 	add.w	r2, r3, #32
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006998:	4619      	mov	r1, r3
 800699a:	4610      	mov	r0, r2
 800699c:	f000 ff84 	bl	80078a8 <lsm6dso_gy_data_rate_set>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d002      	beq.n	80069ac <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80069a6:	f04f 33ff 	mov.w	r3, #4294967295
 80069aa:	e004      	b.n	80069b6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b082      	sub	sp, #8
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 80069d0:	2300      	movs	r3, #0
 80069d2:	e01f      	b.n	8006a14 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f103 0220 	add.w	r2, r3, #32
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	3334      	adds	r3, #52	@ 0x34
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f001 f85b 	bl	8007a9c <lsm6dso_gy_data_rate_get>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d002      	beq.n	80069f2 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295
 80069f0:	e010      	b.n	8006a14 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3320      	adds	r3, #32
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 ff55 	bl	80078a8 <lsm6dso_gy_data_rate_set>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d002      	beq.n	8006a0a <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006a04:	f04f 33ff 	mov.w	r3, #4294967295
 8006a08:	e004      	b.n	8006a14 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}

08006a1c <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3320      	adds	r3, #32
 8006a2e:	f107 020b 	add.w	r2, r7, #11
 8006a32:	4611      	mov	r1, r2
 8006a34:	4618      	mov	r0, r3
 8006a36:	f000 fef5 	bl	8007824 <lsm6dso_gy_full_scale_get>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8006a40:	f04f 33ff 	mov.w	r3, #4294967295
 8006a44:	e02d      	b.n	8006aa2 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	2b06      	cmp	r3, #6
 8006a4a:	d825      	bhi.n	8006a98 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a54 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8006a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a52:	bf00      	nop
 8006a54:	08006a79 	.word	0x08006a79
 8006a58:	08006a71 	.word	0x08006a71
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a99 	.word	0x08006a99
 8006a64:	08006a89 	.word	0x08006a89
 8006a68:	08006a99 	.word	0x08006a99
 8006a6c:	08006a91 	.word	0x08006a91
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	4a0e      	ldr	r2, [pc, #56]	@ (8006aac <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006a74:	601a      	str	r2, [r3, #0]
      break;
 8006a76:	e013      	b.n	8006aa0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4a0d      	ldr	r2, [pc, #52]	@ (8006ab0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006a7c:	601a      	str	r2, [r3, #0]
      break;
 8006a7e:	e00f      	b.n	8006aa0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	4a0c      	ldr	r2, [pc, #48]	@ (8006ab4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006a84:	601a      	str	r2, [r3, #0]
      break;
 8006a86:	e00b      	b.n	8006aa0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	4a0b      	ldr	r2, [pc, #44]	@ (8006ab8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006a8c:	601a      	str	r2, [r3, #0]
      break;
 8006a8e:	e007      	b.n	8006aa0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4a0a      	ldr	r2, [pc, #40]	@ (8006abc <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006a94:	601a      	str	r2, [r3, #0]
      break;
 8006a96:	e003      	b.n	8006aa0 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006a98:	f04f 33ff 	mov.w	r3, #4294967295
 8006a9c:	60fb      	str	r3, [r7, #12]
      break;
 8006a9e:	bf00      	nop
  }

  return ret;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	408c0000 	.word	0x408c0000
 8006ab0:	410c0000 	.word	0x410c0000
 8006ab4:	418c0000 	.word	0x418c0000
 8006ab8:	420c0000 	.word	0x420c0000
 8006abc:	428c0000 	.word	0x428c0000

08006ac0 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3320      	adds	r3, #32
 8006ad2:	f107 020b 	add.w	r2, r7, #11
 8006ad6:	4611      	mov	r1, r2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 ffdf 	bl	8007a9c <lsm6dso_gy_data_rate_get>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae8:	e04e      	b.n	8006b88 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	2b0a      	cmp	r3, #10
 8006aee:	d846      	bhi.n	8006b7e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 8006af0:	a201      	add	r2, pc, #4	@ (adr r2, 8006af8 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 8006af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af6:	bf00      	nop
 8006af8:	08006b25 	.word	0x08006b25
 8006afc:	08006b2f 	.word	0x08006b2f
 8006b00:	08006b37 	.word	0x08006b37
 8006b04:	08006b3f 	.word	0x08006b3f
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b4f 	.word	0x08006b4f
 8006b10:	08006b57 	.word	0x08006b57
 8006b14:	08006b5f 	.word	0x08006b5f
 8006b18:	08006b67 	.word	0x08006b67
 8006b1c:	08006b6f 	.word	0x08006b6f
 8006b20:	08006b77 	.word	0x08006b77
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	f04f 0200 	mov.w	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
      break;
 8006b2c:	e02b      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	4a17      	ldr	r2, [pc, #92]	@ (8006b90 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8006b32:	601a      	str	r2, [r3, #0]
      break;
 8006b34:	e027      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	4a16      	ldr	r2, [pc, #88]	@ (8006b94 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 8006b3a:	601a      	str	r2, [r3, #0]
      break;
 8006b3c:	e023      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	4a15      	ldr	r2, [pc, #84]	@ (8006b98 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8006b42:	601a      	str	r2, [r3, #0]
      break;
 8006b44:	e01f      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	4a14      	ldr	r2, [pc, #80]	@ (8006b9c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006b4a:	601a      	str	r2, [r3, #0]
      break;
 8006b4c:	e01b      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	4a13      	ldr	r2, [pc, #76]	@ (8006ba0 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8006b52:	601a      	str	r2, [r3, #0]
      break;
 8006b54:	e017      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	4a12      	ldr	r2, [pc, #72]	@ (8006ba4 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006b5a:	601a      	str	r2, [r3, #0]
      break;
 8006b5c:	e013      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	4a11      	ldr	r2, [pc, #68]	@ (8006ba8 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8006b62:	601a      	str	r2, [r3, #0]
      break;
 8006b64:	e00f      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	4a10      	ldr	r2, [pc, #64]	@ (8006bac <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006b6a:	601a      	str	r2, [r3, #0]
      break;
 8006b6c:	e00b      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	4a0f      	ldr	r2, [pc, #60]	@ (8006bb0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8006b72:	601a      	str	r2, [r3, #0]
      break;
 8006b74:	e007      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	4a0e      	ldr	r2, [pc, #56]	@ (8006bb4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006b7a:	601a      	str	r2, [r3, #0]
      break;
 8006b7c:	e003      	b.n	8006b86 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8006b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b82:	60fb      	str	r3, [r7, #12]
      break;
 8006b84:	bf00      	nop
  }

  return ret;
 8006b86:	68fb      	ldr	r3, [r7, #12]
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	41480000 	.word	0x41480000
 8006b94:	41d00000 	.word	0x41d00000
 8006b98:	42500000 	.word	0x42500000
 8006b9c:	42d00000 	.word	0x42d00000
 8006ba0:	43500000 	.word	0x43500000
 8006ba4:	43d08000 	.word	0x43d08000
 8006ba8:	44504000 	.word	0x44504000
 8006bac:	44d06000 	.word	0x44d06000
 8006bb0:	45505000 	.word	0x45505000
 8006bb4:	45d05800 	.word	0x45d05800

08006bb8 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	ed97 0a00 	vldr	s0, [r7]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f806 	bl	8006bdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006bd0:	4603      	mov	r3, r0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
	...

08006bdc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b088      	sub	sp, #32
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	60f8      	str	r0, [r7, #12]
 8006be4:	ed87 0a02 	vstr	s0, [r7, #8]
 8006be8:	460b      	mov	r3, r1
 8006bea:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 8006bf4:	79fb      	ldrb	r3, [r7, #7]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d002      	beq.n	8006c00 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d028      	beq.n	8006c50 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 8006bfe:	e05c      	b.n	8006cba <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f103 0020 	add.w	r0, r3, #32
 8006c06:	f107 0214 	add.w	r2, r7, #20
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	2116      	movs	r1, #22
 8006c0e:	f000 fbf3 	bl	80073f8 <lsm6dso_read_reg>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8006c18:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1c:	e06c      	b.n	8006cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 8006c1e:	7d3b      	ldrb	r3, [r7, #20]
 8006c20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d04b      	beq.n	8006cc2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 8006c2a:	7d3b      	ldrb	r3, [r7, #20]
 8006c2c:	f36f 13c7 	bfc	r3, #7, #1
 8006c30:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	f103 0020 	add.w	r0, r3, #32
 8006c38:	f107 0214 	add.w	r2, r7, #20
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	2116      	movs	r1, #22
 8006c40:	f000 fbf2 	bl	8007428 <lsm6dso_write_reg>
 8006c44:	4603      	mov	r3, r0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d03b      	beq.n	8006cc2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c4e:	e053      	b.n	8006cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f103 0020 	add.w	r0, r3, #32
 8006c56:	f107 0210 	add.w	r2, r7, #16
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	2116      	movs	r1, #22
 8006c5e:	f000 fbcb 	bl	80073f8 <lsm6dso_read_reg>
 8006c62:	4603      	mov	r3, r0
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d002      	beq.n	8006c6e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006c68:	f04f 33ff 	mov.w	r3, #4294967295
 8006c6c:	e044      	b.n	8006cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006c6e:	7c3b      	ldrb	r3, [r7, #16]
 8006c70:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006c7a:	7c3b      	ldrb	r3, [r7, #16]
 8006c7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c80:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f103 0020 	add.w	r0, r3, #32
 8006c88:	f107 0210 	add.w	r2, r7, #16
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	2116      	movs	r1, #22
 8006c90:	f000 fbca 	bl	8007428 <lsm6dso_write_reg>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c9e:	e02b      	b.n	8006cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006ca0:	edd7 7a06 	vldr	s15, [r7, #24]
 8006ca4:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006d00 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006ca8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cb0:	dc00      	bgt.n	8006cb4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006cb2:	e007      	b.n	8006cc4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006cb4:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e004      	b.n	8006cc4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006cba:	f04f 33ff 	mov.w	r3, #4294967295
 8006cbe:	61fb      	str	r3, [r7, #28]
      break;
 8006cc0:	e000      	b.n	8006cc4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006cc2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cca:	d102      	bne.n	8006cd2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	e012      	b.n	8006cf8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d106      	bne.n	8006cea <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006cdc:	ed97 0a06 	vldr	s0, [r7, #24]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fa45 	bl	8007170 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006ce6:	61f8      	str	r0, [r7, #28]
 8006ce8:	e005      	b.n	8006cf6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006cea:	ed97 0a06 	vldr	s0, [r7, #24]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 faca 	bl	8007288 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006cf4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006cf6:	69fb      	ldr	r3, [r7, #28]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3720      	adds	r7, #32
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	43500000 	.word	0x43500000
 8006d04:	43500000 	.word	0x43500000

08006d08 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3320      	adds	r3, #32
 8006d1a:	f107 020b 	add.w	r2, r7, #11
 8006d1e:	4611      	mov	r1, r2
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 fd7f 	bl	8007824 <lsm6dso_gy_full_scale_get>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d30:	e030      	b.n	8006d94 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006d32:	7afb      	ldrb	r3, [r7, #11]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d828      	bhi.n	8006d8a <LSM6DSO_GYRO_GetFullScale+0x82>
 8006d38:	a201      	add	r2, pc, #4	@ (adr r2, 8006d40 <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d65 	.word	0x08006d65
 8006d44:	08006d5d 	.word	0x08006d5d
 8006d48:	08006d6d 	.word	0x08006d6d
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d77 	.word	0x08006d77
 8006d54:	08006d8b 	.word	0x08006d8b
 8006d58:	08006d81 	.word	0x08006d81
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	227d      	movs	r2, #125	@ 0x7d
 8006d60:	601a      	str	r2, [r3, #0]
      break;
 8006d62:	e016      	b.n	8006d92 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	22fa      	movs	r2, #250	@ 0xfa
 8006d68:	601a      	str	r2, [r3, #0]
      break;
 8006d6a:	e012      	b.n	8006d92 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006d72:	601a      	str	r2, [r3, #0]
      break;
 8006d74:	e00d      	b.n	8006d92 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006d7c:	601a      	str	r2, [r3, #0]
      break;
 8006d7e:	e008      	b.n	8006d92 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006d86:	601a      	str	r2, [r3, #0]
      break;
 8006d88:	e003      	b.n	8006d92 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d8e:	60fb      	str	r3, [r7, #12]
      break;
 8006d90:	bf00      	nop
  }

  return ret;
 8006d92:	68fb      	ldr	r3, [r7, #12]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	2b7d      	cmp	r3, #125	@ 0x7d
 8006daa:	dd12      	ble.n	8006dd2 <LSM6DSO_GYRO_SetFullScale+0x36>
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	2bfa      	cmp	r3, #250	@ 0xfa
 8006db0:	dd0d      	ble.n	8006dce <LSM6DSO_GYRO_SetFullScale+0x32>
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006db8:	dd07      	ble.n	8006dca <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006dc0:	dc01      	bgt.n	8006dc6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006dc2:	2304      	movs	r3, #4
 8006dc4:	e006      	b.n	8006dd4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006dc6:	2306      	movs	r3, #6
 8006dc8:	e004      	b.n	8006dd4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e002      	b.n	8006dd4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e000      	b.n	8006dd4 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006dd2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006dd4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	3320      	adds	r3, #32
 8006dda:	7bfa      	ldrb	r2, [r7, #15]
 8006ddc:	4611      	mov	r1, r2
 8006dde:	4618      	mov	r0, r3
 8006de0:	f000 fcfa 	bl	80077d8 <lsm6dso_gy_full_scale_set>
 8006de4:	4603      	mov	r3, r0
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d002      	beq.n	8006df0 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006dea:	f04f 33ff 	mov.w	r3, #4294967295
 8006dee:	e000      	b.n	8006df2 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b084      	sub	sp, #16
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	3320      	adds	r3, #32
 8006e08:	f107 0208 	add.w	r2, r7, #8
 8006e0c:	4611      	mov	r1, r2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fecc 	bl	8007bac <lsm6dso_angular_rate_raw_get>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	e00c      	b.n	8006e3a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006e20:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006e28:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006e30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b086      	sub	sp, #24
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3320      	adds	r3, #32
 8006e50:	f107 0210 	add.w	r2, r7, #16
 8006e54:	4611      	mov	r1, r2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fea8 	bl	8007bac <lsm6dso_angular_rate_raw_get>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d002      	beq.n	8006e68 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295
 8006e66:	e03c      	b.n	8006ee2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006e68:	f107 030c 	add.w	r3, r7, #12
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff fdd4 	bl	8006a1c <LSM6DSO_GYRO_GetSensitivity>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d002      	beq.n	8006e80 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e7e:	e030      	b.n	8006ee2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006e80:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006e84:	ee07 3a90 	vmov	s15, r3
 8006e88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006e98:	ee17 2a90 	vmov	r2, s15
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006ea0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006ea4:	ee07 3a90 	vmov	s15, r3
 8006ea8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8006eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006eb8:	ee17 2a90 	vmov	r2, s15
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006ec0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8006ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ed8:	ee17 2a90 	vmov	r2, s15
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3718      	adds	r7, #24
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}

08006eea <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006eea:	b580      	push	{r7, lr}
 8006eec:	b082      	sub	sp, #8
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	70fb      	strb	r3, [r7, #3]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f103 0020 	add.w	r0, r3, #32
 8006f00:	1cba      	adds	r2, r7, #2
 8006f02:	78f9      	ldrb	r1, [r7, #3]
 8006f04:	2301      	movs	r3, #1
 8006f06:	f000 fa8f 	bl	8007428 <lsm6dso_write_reg>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006f10:	f04f 33ff 	mov.w	r3, #4294967295
 8006f14:	e000      	b.n	8006f18 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3708      	adds	r7, #8
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006f2c:	edd7 7a00 	vldr	s15, [r7]
 8006f30:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8007030 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006f34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3c:	d801      	bhi.n	8006f42 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006f3e:	230b      	movs	r3, #11
 8006f40:	e063      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f42:	edd7 7a00 	vldr	s15, [r7]
 8006f46:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f52:	d801      	bhi.n	8006f58 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006f54:	2301      	movs	r3, #1
 8006f56:	e058      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f58:	edd7 7a00 	vldr	s15, [r7]
 8006f5c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f68:	d801      	bhi.n	8006f6e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	e04d      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f6e:	edd7 7a00 	vldr	s15, [r7]
 8006f72:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8007034 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006f76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	d801      	bhi.n	8006f84 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006f80:	2303      	movs	r3, #3
 8006f82:	e042      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f84:	edd7 7a00 	vldr	s15, [r7]
 8006f88:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007038 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006f8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f94:	d801      	bhi.n	8006f9a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006f96:	2304      	movs	r3, #4
 8006f98:	e037      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006f9a:	edd7 7a00 	vldr	s15, [r7]
 8006f9e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 800703c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006faa:	d801      	bhi.n	8006fb0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006fac:	2305      	movs	r3, #5
 8006fae:	e02c      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006fb0:	edd7 7a00 	vldr	s15, [r7]
 8006fb4:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007040 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006fb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc0:	d801      	bhi.n	8006fc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006fc2:	2306      	movs	r3, #6
 8006fc4:	e021      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006fc6:	edd7 7a00 	vldr	s15, [r7]
 8006fca:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8007044 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006fce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd6:	d801      	bhi.n	8006fdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006fd8:	2307      	movs	r3, #7
 8006fda:	e016      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006fdc:	edd7 7a00 	vldr	s15, [r7]
 8006fe0:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007048 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006fe4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fec:	d801      	bhi.n	8006ff2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006fee:	2308      	movs	r3, #8
 8006ff0:	e00b      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006ff2:	edd7 7a00 	vldr	s15, [r7]
 8006ff6:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800704c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006ffa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007002:	d801      	bhi.n	8007008 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8007004:	2309      	movs	r3, #9
 8007006:	e000      	b.n	800700a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8007008:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800700a:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3320      	adds	r3, #32
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fa7d 	bl	8007514 <lsm6dso_xl_data_rate_set>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8007020:	f04f 33ff 	mov.w	r3, #4294967295
 8007024:	e000      	b.n	8007028 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8007026:	2300      	movs	r3, #0
}
 8007028:	4618      	mov	r0, r3
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	3fcccccd 	.word	0x3fcccccd
 8007034:	42500000 	.word	0x42500000
 8007038:	42d00000 	.word	0x42d00000
 800703c:	43500000 	.word	0x43500000
 8007040:	43d08000 	.word	0x43d08000
 8007044:	44504000 	.word	0x44504000
 8007048:	44d06000 	.word	0x44d06000
 800704c:	45505000 	.word	0x45505000

08007050 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800705c:	edd7 7a00 	vldr	s15, [r7]
 8007060:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8007150 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8007064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706c:	d801      	bhi.n	8007072 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800706e:	230b      	movs	r3, #11
 8007070:	e063      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007072:	edd7 7a00 	vldr	s15, [r7]
 8007076:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800707a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	d801      	bhi.n	8007088 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8007084:	2301      	movs	r3, #1
 8007086:	e058      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007088:	edd7 7a00 	vldr	s15, [r7]
 800708c:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8007090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	d801      	bhi.n	800709e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 800709a:	2302      	movs	r3, #2
 800709c:	e04d      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800709e:	edd7 7a00 	vldr	s15, [r7]
 80070a2:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8007154 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80070a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	d801      	bhi.n	80070b4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80070b0:	2303      	movs	r3, #3
 80070b2:	e042      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070b4:	edd7 7a00 	vldr	s15, [r7]
 80070b8:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8007158 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80070bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070c4:	d801      	bhi.n	80070ca <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80070c6:	2304      	movs	r3, #4
 80070c8:	e037      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070ca:	edd7 7a00 	vldr	s15, [r7]
 80070ce:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 800715c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80070d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070da:	d801      	bhi.n	80070e0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80070dc:	2305      	movs	r3, #5
 80070de:	e02c      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070e0:	edd7 7a00 	vldr	s15, [r7]
 80070e4:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8007160 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 80070e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070f0:	d801      	bhi.n	80070f6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 80070f2:	2306      	movs	r3, #6
 80070f4:	e021      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80070f6:	edd7 7a00 	vldr	s15, [r7]
 80070fa:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8007164 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 80070fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007106:	d801      	bhi.n	800710c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8007108:	2307      	movs	r3, #7
 800710a:	e016      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800710c:	edd7 7a00 	vldr	s15, [r7]
 8007110:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8007168 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8007114:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711c:	d801      	bhi.n	8007122 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800711e:	2308      	movs	r3, #8
 8007120:	e00b      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007122:	edd7 7a00 	vldr	s15, [r7]
 8007126:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800716c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800712a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	d801      	bhi.n	8007138 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8007134:	2309      	movs	r3, #9
 8007136:	e000      	b.n	800713a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8007138:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	3fcccccd 	.word	0x3fcccccd
 8007154:	42500000 	.word	0x42500000
 8007158:	42d00000 	.word	0x42d00000
 800715c:	43500000 	.word	0x43500000
 8007160:	43d08000 	.word	0x43d08000
 8007164:	44504000 	.word	0x44504000
 8007168:	44d06000 	.word	0x44d06000
 800716c:	45505000 	.word	0x45505000

08007170 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800717c:	edd7 7a00 	vldr	s15, [r7]
 8007180:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718c:	d801      	bhi.n	8007192 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 800718e:	2301      	movs	r3, #1
 8007190:	e058      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007192:	edd7 7a00 	vldr	s15, [r7]
 8007196:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800719a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071a2:	d801      	bhi.n	80071a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80071a4:	2302      	movs	r3, #2
 80071a6:	e04d      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071a8:	edd7 7a00 	vldr	s15, [r7]
 80071ac:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800726c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80071b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	d801      	bhi.n	80071be <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80071ba:	2303      	movs	r3, #3
 80071bc:	e042      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071be:	edd7 7a00 	vldr	s15, [r7]
 80071c2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8007270 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80071c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ce:	d801      	bhi.n	80071d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80071d0:	2304      	movs	r3, #4
 80071d2:	e037      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071d4:	edd7 7a00 	vldr	s15, [r7]
 80071d8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007274 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80071dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071e4:	d801      	bhi.n	80071ea <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 80071e6:	2305      	movs	r3, #5
 80071e8:	e02c      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80071ea:	edd7 7a00 	vldr	s15, [r7]
 80071ee:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007278 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 80071f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80071f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fa:	d801      	bhi.n	8007200 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 80071fc:	2306      	movs	r3, #6
 80071fe:	e021      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007200:	edd7 7a00 	vldr	s15, [r7]
 8007204:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800727c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8007208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800720c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007210:	d801      	bhi.n	8007216 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8007212:	2307      	movs	r3, #7
 8007214:	e016      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007216:	edd7 7a00 	vldr	s15, [r7]
 800721a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007280 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800721e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007226:	d801      	bhi.n	800722c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8007228:	2308      	movs	r3, #8
 800722a:	e00b      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800722c:	edd7 7a00 	vldr	s15, [r7]
 8007230:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007284 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8007234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723c:	d801      	bhi.n	8007242 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800723e:	2309      	movs	r3, #9
 8007240:	e000      	b.n	8007244 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8007242:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007244:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3320      	adds	r3, #32
 800724a:	7bfa      	ldrb	r2, [r7, #15]
 800724c:	4611      	mov	r1, r2
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fb2a 	bl	80078a8 <lsm6dso_gy_data_rate_set>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	e000      	b.n	8007262 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	42500000 	.word	0x42500000
 8007270:	42d00000 	.word	0x42d00000
 8007274:	43500000 	.word	0x43500000
 8007278:	43d08000 	.word	0x43d08000
 800727c:	44504000 	.word	0x44504000
 8007280:	44d06000 	.word	0x44d06000
 8007284:	45505000 	.word	0x45505000

08007288 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007294:	edd7 7a00 	vldr	s15, [r7]
 8007298:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800729c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a4:	d801      	bhi.n	80072aa <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80072a6:	2301      	movs	r3, #1
 80072a8:	e058      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072aa:	edd7 7a00 	vldr	s15, [r7]
 80072ae:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 80072b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ba:	d801      	bhi.n	80072c0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80072bc:	2302      	movs	r3, #2
 80072be:	e04d      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072c0:	edd7 7a00 	vldr	s15, [r7]
 80072c4:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007370 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80072c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072d0:	d801      	bhi.n	80072d6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80072d2:	2303      	movs	r3, #3
 80072d4:	e042      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072d6:	edd7 7a00 	vldr	s15, [r7]
 80072da:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007374 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80072de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072e6:	d801      	bhi.n	80072ec <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80072e8:	2304      	movs	r3, #4
 80072ea:	e037      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80072ec:	edd7 7a00 	vldr	s15, [r7]
 80072f0:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007378 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80072f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80072f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fc:	d801      	bhi.n	8007302 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80072fe:	2305      	movs	r3, #5
 8007300:	e02c      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007302:	edd7 7a00 	vldr	s15, [r7]
 8007306:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800737c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 800730a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800730e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007312:	d801      	bhi.n	8007318 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8007314:	2306      	movs	r3, #6
 8007316:	e021      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007318:	edd7 7a00 	vldr	s15, [r7]
 800731c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007380 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8007320:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007328:	d801      	bhi.n	800732e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 800732a:	2307      	movs	r3, #7
 800732c:	e016      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800732e:	edd7 7a00 	vldr	s15, [r7]
 8007332:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007384 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8007336:	eef4 7ac7 	vcmpe.f32	s15, s14
 800733a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800733e:	d801      	bhi.n	8007344 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8007340:	2308      	movs	r3, #8
 8007342:	e00b      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007344:	edd7 7a00 	vldr	s15, [r7]
 8007348:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007388 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 800734c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007354:	d801      	bhi.n	800735a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007356:	2309      	movs	r3, #9
 8007358:	e000      	b.n	800735c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800735a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8007362:	2300      	movs	r3, #0
}
 8007364:	4618      	mov	r0, r3
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	42500000 	.word	0x42500000
 8007374:	42d00000 	.word	0x42d00000
 8007378:	43500000 	.word	0x43500000
 800737c:	43d08000 	.word	0x43d08000
 8007380:	44504000 	.word	0x44504000
 8007384:	44d06000 	.word	0x44d06000
 8007388:	45505000 	.word	0x45505000

0800738c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800738c:	b590      	push	{r4, r7, lr}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	607a      	str	r2, [r7, #4]
 8007396:	461a      	mov	r2, r3
 8007398:	460b      	mov	r3, r1
 800739a:	72fb      	strb	r3, [r7, #11]
 800739c:	4613      	mov	r3, r2
 800739e:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	695c      	ldr	r4, [r3, #20]
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	7b1b      	ldrb	r3, [r3, #12]
 80073ac:	4618      	mov	r0, r3
 80073ae:	7afb      	ldrb	r3, [r7, #11]
 80073b0:	b299      	uxth	r1, r3
 80073b2:	893b      	ldrh	r3, [r7, #8]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	47a0      	blx	r4
 80073b8:	4603      	mov	r3, r0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd90      	pop	{r4, r7, pc}

080073c2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80073c2:	b590      	push	{r4, r7, lr}
 80073c4:	b087      	sub	sp, #28
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	461a      	mov	r2, r3
 80073ce:	460b      	mov	r3, r1
 80073d0:	72fb      	strb	r3, [r7, #11]
 80073d2:	4613      	mov	r3, r2
 80073d4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	691c      	ldr	r4, [r3, #16]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	7b1b      	ldrb	r3, [r3, #12]
 80073e2:	4618      	mov	r0, r3
 80073e4:	7afb      	ldrb	r3, [r7, #11]
 80073e6:	b299      	uxth	r1, r3
 80073e8:	893b      	ldrh	r3, [r7, #8]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	47a0      	blx	r4
 80073ee:	4603      	mov	r3, r0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	371c      	adds	r7, #28
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd90      	pop	{r4, r7, pc}

080073f8 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80073f8:	b590      	push	{r4, r7, lr}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	607a      	str	r2, [r7, #4]
 8007402:	461a      	mov	r2, r3
 8007404:	460b      	mov	r3, r1
 8007406:	72fb      	strb	r3, [r7, #11]
 8007408:	4613      	mov	r3, r2
 800740a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685c      	ldr	r4, [r3, #4]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68d8      	ldr	r0, [r3, #12]
 8007414:	893b      	ldrh	r3, [r7, #8]
 8007416:	7af9      	ldrb	r1, [r7, #11]
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	47a0      	blx	r4
 800741c:	6178      	str	r0, [r7, #20]

  return ret;
 800741e:	697b      	ldr	r3, [r7, #20]
}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	461a      	mov	r2, r3
 8007434:	460b      	mov	r3, r1
 8007436:	72fb      	strb	r3, [r7, #11]
 8007438:	4613      	mov	r3, r2
 800743a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681c      	ldr	r4, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	68d8      	ldr	r0, [r3, #12]
 8007444:	893b      	ldrh	r3, [r7, #8]
 8007446:	7af9      	ldrb	r1, [r7, #11]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	47a0      	blx	r4
 800744c:	6178      	str	r0, [r7, #20]

  return ret;
 800744e:	697b      	ldr	r3, [r7, #20]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd90      	pop	{r4, r7, pc}

08007458 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	460b      	mov	r3, r1
 8007462:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007464:	f107 0208 	add.w	r2, r7, #8
 8007468:	2301      	movs	r3, #1
 800746a:	2110      	movs	r1, #16
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ffc3 	bl	80073f8 <lsm6dso_read_reg>
 8007472:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10f      	bne.n	800749a <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	f003 0303 	and.w	r3, r3, #3
 8007480:	b2da      	uxtb	r2, r3
 8007482:	7a3b      	ldrb	r3, [r7, #8]
 8007484:	f362 0383 	bfi	r3, r2, #2, #2
 8007488:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800748a:	f107 0208 	add.w	r2, r7, #8
 800748e:	2301      	movs	r3, #1
 8007490:	2110      	movs	r1, #16
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f7ff ffc8 	bl	8007428 <lsm6dso_write_reg>
 8007498:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800749a:	68fb      	ldr	r3, [r7, #12]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074ae:	f107 0208 	add.w	r2, r7, #8
 80074b2:	2301      	movs	r3, #1
 80074b4:	2110      	movs	r1, #16
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff ff9e 	bl	80073f8 <lsm6dso_read_reg>
 80074bc:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80074be:	7a3b      	ldrb	r3, [r7, #8]
 80074c0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d81a      	bhi.n	8007500 <lsm6dso_xl_full_scale_get+0x5c>
 80074ca:	a201      	add	r2, pc, #4	@ (adr r2, 80074d0 <lsm6dso_xl_full_scale_get+0x2c>)
 80074cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d0:	080074e1 	.word	0x080074e1
 80074d4:	080074e9 	.word	0x080074e9
 80074d8:	080074f1 	.word	0x080074f1
 80074dc:	080074f9 	.word	0x080074f9
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	2200      	movs	r2, #0
 80074e4:	701a      	strb	r2, [r3, #0]
      break;
 80074e6:	e00f      	b.n	8007508 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	2201      	movs	r2, #1
 80074ec:	701a      	strb	r2, [r3, #0]
      break;
 80074ee:	e00b      	b.n	8007508 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	2202      	movs	r2, #2
 80074f4:	701a      	strb	r2, [r3, #0]
      break;
 80074f6:	e007      	b.n	8007508 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	2203      	movs	r2, #3
 80074fc:	701a      	strb	r2, [r3, #0]
      break;
 80074fe:	e003      	b.n	8007508 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
      break;
 8007506:	bf00      	nop
  }

  return ret;
 8007508:	68fb      	ldr	r3, [r7, #12]
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8007520:	78fb      	ldrb	r3, [r7, #3]
 8007522:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007524:	f107 030c 	add.w	r3, r7, #12
 8007528:	4619      	mov	r1, r3
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 fc90 	bl	8007e50 <lsm6dso_fsm_enable_get>
 8007530:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <lsm6dso_xl_data_rate_set+0x28>
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	e0e0      	b.n	80076fe <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800753c:	7b3b      	ldrb	r3, [r7, #12]
 800753e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007542:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007544:	7b3b      	ldrb	r3, [r7, #12]
 8007546:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800754a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800754c:	4313      	orrs	r3, r2
 800754e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007550:	7b3b      	ldrb	r3, [r7, #12]
 8007552:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007556:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007558:	4313      	orrs	r3, r2
 800755a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800755c:	7b3b      	ldrb	r3, [r7, #12]
 800755e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007562:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007564:	4313      	orrs	r3, r2
 8007566:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007568:	7b3b      	ldrb	r3, [r7, #12]
 800756a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800756e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007570:	4313      	orrs	r3, r2
 8007572:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007574:	7b3b      	ldrb	r3, [r7, #12]
 8007576:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800757a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 800757c:	4313      	orrs	r3, r2
 800757e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007580:	7b3b      	ldrb	r3, [r7, #12]
 8007582:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007586:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007588:	4313      	orrs	r3, r2
 800758a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800758c:	7b3b      	ldrb	r3, [r7, #12]
 800758e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007592:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007594:	4313      	orrs	r3, r2
 8007596:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007598:	7b7b      	ldrb	r3, [r7, #13]
 800759a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800759e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80075a0:	4313      	orrs	r3, r2
 80075a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80075a4:	7b7b      	ldrb	r3, [r7, #13]
 80075a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80075ac:	4313      	orrs	r3, r2
 80075ae:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80075b0:	7b7b      	ldrb	r3, [r7, #13]
 80075b2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80075b6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80075b8:	4313      	orrs	r3, r2
 80075ba:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80075bc:	7b7b      	ldrb	r3, [r7, #13]
 80075be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075c2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80075c8:	7b7b      	ldrb	r3, [r7, #13]
 80075ca:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80075ce:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 80075d0:	4313      	orrs	r3, r2
 80075d2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80075d4:	7b7b      	ldrb	r3, [r7, #13]
 80075d6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80075da:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 80075dc:	4313      	orrs	r3, r2
 80075de:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80075e0:	7b7b      	ldrb	r3, [r7, #13]
 80075e2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80075e6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80075ec:	7b7b      	ldrb	r3, [r7, #13]
 80075ee:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80075f2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80075f4:	4313      	orrs	r3, r2
 80075f6:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d164      	bne.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80075fc:	f107 030b 	add.w	r3, r7, #11
 8007600:	4619      	mov	r1, r3
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 fc46 	bl	8007e94 <lsm6dso_fsm_data_rate_get>
 8007608:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d001      	beq.n	8007614 <lsm6dso_xl_data_rate_set+0x100>
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	e074      	b.n	80076fe <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007614:	7afb      	ldrb	r3, [r7, #11]
 8007616:	2b03      	cmp	r3, #3
 8007618:	d852      	bhi.n	80076c0 <lsm6dso_xl_data_rate_set+0x1ac>
 800761a:	a201      	add	r2, pc, #4	@ (adr r2, 8007620 <lsm6dso_xl_data_rate_set+0x10c>)
 800761c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007620:	08007631 	.word	0x08007631
 8007624:	08007643 	.word	0x08007643
 8007628:	08007661 	.word	0x08007661
 800762c:	0800768b 	.word	0x0800768b
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007630:	78fb      	ldrb	r3, [r7, #3]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d102      	bne.n	800763c <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800763a:	e044      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	75fb      	strb	r3, [r7, #23]
        break;
 8007640:	e041      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007642:	78fb      	ldrb	r3, [r7, #3]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d102      	bne.n	800764e <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007648:	2302      	movs	r3, #2
 800764a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800764c:	e03b      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800764e:	78fb      	ldrb	r3, [r7, #3]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d102      	bne.n	800765a <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007654:	2302      	movs	r3, #2
 8007656:	75fb      	strb	r3, [r7, #23]
        break;
 8007658:	e035      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	75fb      	strb	r3, [r7, #23]
        break;
 800765e:	e032      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007660:	78fb      	ldrb	r3, [r7, #3]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007666:	2303      	movs	r3, #3
 8007668:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800766a:	e02c      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d102      	bne.n	8007678 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007672:	2303      	movs	r3, #3
 8007674:	75fb      	strb	r3, [r7, #23]
        break;
 8007676:	e026      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	2b02      	cmp	r3, #2
 800767c:	d102      	bne.n	8007684 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800767e:	2303      	movs	r3, #3
 8007680:	75fb      	strb	r3, [r7, #23]
        break;
 8007682:	e020      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007684:	78fb      	ldrb	r3, [r7, #3]
 8007686:	75fb      	strb	r3, [r7, #23]
        break;
 8007688:	e01d      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d102      	bne.n	8007696 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007690:	2304      	movs	r3, #4
 8007692:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007694:	e017      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007696:	78fb      	ldrb	r3, [r7, #3]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d102      	bne.n	80076a2 <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800769c:	2304      	movs	r3, #4
 800769e:	75fb      	strb	r3, [r7, #23]
        break;
 80076a0:	e011      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 80076a2:	78fb      	ldrb	r3, [r7, #3]
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d102      	bne.n	80076ae <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80076a8:	2304      	movs	r3, #4
 80076aa:	75fb      	strb	r3, [r7, #23]
        break;
 80076ac:	e00b      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	2b03      	cmp	r3, #3
 80076b2:	d102      	bne.n	80076ba <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 80076b4:	2304      	movs	r3, #4
 80076b6:	75fb      	strb	r3, [r7, #23]
        break;
 80076b8:	e005      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	75fb      	strb	r3, [r7, #23]
        break;
 80076be:	e002      	b.n	80076c6 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	75fb      	strb	r3, [r7, #23]
        break;
 80076c4:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80076c6:	f107 0208 	add.w	r2, r7, #8
 80076ca:	2301      	movs	r3, #1
 80076cc:	2110      	movs	r1, #16
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff fe92 	bl	80073f8 <lsm6dso_read_reg>
 80076d4:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
 80076d8:	f003 030f 	and.w	r3, r3, #15
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	7a3b      	ldrb	r3, [r7, #8]
 80076e0:	f362 1307 	bfi	r3, r2, #4, #4
 80076e4:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80076e6:	f107 0208 	add.w	r2, r7, #8
 80076ea:	2301      	movs	r3, #1
 80076ec:	2110      	movs	r1, #16
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fe9a 	bl	8007428 <lsm6dso_write_reg>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	4413      	add	r3, r2
 80076fa:	613b      	str	r3, [r7, #16]

  return ret;
 80076fc:	693b      	ldr	r3, [r7, #16]
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3718      	adds	r7, #24
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007712:	f107 0208 	add.w	r2, r7, #8
 8007716:	2301      	movs	r3, #1
 8007718:	2110      	movs	r1, #16
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fe6c 	bl	80073f8 <lsm6dso_read_reg>
 8007720:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8007722:	7a3b      	ldrb	r3, [r7, #8]
 8007724:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b0b      	cmp	r3, #11
 800772c:	d84a      	bhi.n	80077c4 <lsm6dso_xl_data_rate_get+0xbc>
 800772e:	a201      	add	r2, pc, #4	@ (adr r2, 8007734 <lsm6dso_xl_data_rate_get+0x2c>)
 8007730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007734:	08007765 	.word	0x08007765
 8007738:	0800776d 	.word	0x0800776d
 800773c:	08007775 	.word	0x08007775
 8007740:	0800777d 	.word	0x0800777d
 8007744:	08007785 	.word	0x08007785
 8007748:	0800778d 	.word	0x0800778d
 800774c:	08007795 	.word	0x08007795
 8007750:	0800779d 	.word	0x0800779d
 8007754:	080077a5 	.word	0x080077a5
 8007758:	080077ad 	.word	0x080077ad
 800775c:	080077b5 	.word	0x080077b5
 8007760:	080077bd 	.word	0x080077bd
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	701a      	strb	r2, [r3, #0]
      break;
 800776a:	e02f      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	2201      	movs	r2, #1
 8007770:	701a      	strb	r2, [r3, #0]
      break;
 8007772:	e02b      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	2202      	movs	r2, #2
 8007778:	701a      	strb	r2, [r3, #0]
      break;
 800777a:	e027      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2203      	movs	r2, #3
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e023      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	2204      	movs	r2, #4
 8007788:	701a      	strb	r2, [r3, #0]
      break;
 800778a:	e01f      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	2205      	movs	r2, #5
 8007790:	701a      	strb	r2, [r3, #0]
      break;
 8007792:	e01b      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2206      	movs	r2, #6
 8007798:	701a      	strb	r2, [r3, #0]
      break;
 800779a:	e017      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2207      	movs	r2, #7
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e013      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2208      	movs	r2, #8
 80077a8:	701a      	strb	r2, [r3, #0]
      break;
 80077aa:	e00f      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2209      	movs	r2, #9
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e00b      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	220a      	movs	r2, #10
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e007      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	220b      	movs	r2, #11
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e003      	b.n	80077cc <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	bf00      	nop
  }

  return ret;
 80077cc:	68fb      	ldr	r3, [r7, #12]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop

080077d8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	460b      	mov	r3, r1
 80077e2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80077e4:	f107 0208 	add.w	r2, r7, #8
 80077e8:	2301      	movs	r3, #1
 80077ea:	2111      	movs	r1, #17
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fe03 	bl	80073f8 <lsm6dso_read_reg>
 80077f2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10f      	bne.n	800781a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80077fa:	78fb      	ldrb	r3, [r7, #3]
 80077fc:	f003 0307 	and.w	r3, r3, #7
 8007800:	b2da      	uxtb	r2, r3
 8007802:	7a3b      	ldrb	r3, [r7, #8]
 8007804:	f362 0343 	bfi	r3, r2, #1, #3
 8007808:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800780a:	f107 0208 	add.w	r2, r7, #8
 800780e:	2301      	movs	r3, #1
 8007810:	2111      	movs	r1, #17
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f7ff fe08 	bl	8007428 <lsm6dso_write_reg>
 8007818:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800781a:	68fb      	ldr	r3, [r7, #12]
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800782e:	f107 0208 	add.w	r2, r7, #8
 8007832:	2301      	movs	r3, #1
 8007834:	2111      	movs	r1, #17
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f7ff fdde 	bl	80073f8 <lsm6dso_read_reg>
 800783c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800783e:	7a3b      	ldrb	r3, [r7, #8]
 8007840:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b06      	cmp	r3, #6
 8007848:	d824      	bhi.n	8007894 <lsm6dso_gy_full_scale_get+0x70>
 800784a:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <lsm6dso_gy_full_scale_get+0x2c>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	0800786d 	.word	0x0800786d
 8007854:	08007875 	.word	0x08007875
 8007858:	0800787d 	.word	0x0800787d
 800785c:	08007895 	.word	0x08007895
 8007860:	08007885 	.word	0x08007885
 8007864:	08007895 	.word	0x08007895
 8007868:	0800788d 	.word	0x0800788d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2200      	movs	r2, #0
 8007870:	701a      	strb	r2, [r3, #0]
      break;
 8007872:	e013      	b.n	800789c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
      break;
 800787a:	e00f      	b.n	800789c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	2202      	movs	r2, #2
 8007880:	701a      	strb	r2, [r3, #0]
      break;
 8007882:	e00b      	b.n	800789c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	2204      	movs	r2, #4
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e007      	b.n	800789c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2206      	movs	r2, #6
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e003      	b.n	800789c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	2200      	movs	r2, #0
 8007898:	701a      	strb	r2, [r3, #0]
      break;
 800789a:	bf00      	nop
  }

  return ret;
 800789c:	68fb      	ldr	r3, [r7, #12]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3710      	adds	r7, #16
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop

080078a8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80078b8:	f107 030c 	add.w	r3, r7, #12
 80078bc:	4619      	mov	r1, r3
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 fac6 	bl	8007e50 <lsm6dso_fsm_enable_get>
 80078c4:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <lsm6dso_gy_data_rate_set+0x28>
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	e0e0      	b.n	8007a92 <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80078d0:	7b3b      	ldrb	r3, [r7, #12]
 80078d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80078d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80078d8:	7b3b      	ldrb	r3, [r7, #12]
 80078da:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80078de:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80078e0:	4313      	orrs	r3, r2
 80078e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80078e4:	7b3b      	ldrb	r3, [r7, #12]
 80078e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80078ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80078ec:	4313      	orrs	r3, r2
 80078ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80078f0:	7b3b      	ldrb	r3, [r7, #12]
 80078f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80078f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80078f8:	4313      	orrs	r3, r2
 80078fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80078fc:	7b3b      	ldrb	r3, [r7, #12]
 80078fe:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007902:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007904:	4313      	orrs	r3, r2
 8007906:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007908:	7b3b      	ldrb	r3, [r7, #12]
 800790a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800790e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007910:	4313      	orrs	r3, r2
 8007912:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007914:	7b3b      	ldrb	r3, [r7, #12]
 8007916:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800791a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800791c:	4313      	orrs	r3, r2
 800791e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007920:	7b3b      	ldrb	r3, [r7, #12]
 8007922:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007926:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007928:	4313      	orrs	r3, r2
 800792a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 800792c:	7b7b      	ldrb	r3, [r7, #13]
 800792e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007932:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007934:	4313      	orrs	r3, r2
 8007936:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007938:	7b7b      	ldrb	r3, [r7, #13]
 800793a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800793e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007940:	4313      	orrs	r3, r2
 8007942:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007944:	7b7b      	ldrb	r3, [r7, #13]
 8007946:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800794a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800794c:	4313      	orrs	r3, r2
 800794e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007950:	7b7b      	ldrb	r3, [r7, #13]
 8007952:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007956:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007958:	4313      	orrs	r3, r2
 800795a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800795c:	7b7b      	ldrb	r3, [r7, #13]
 800795e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007962:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007964:	4313      	orrs	r3, r2
 8007966:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007968:	7b7b      	ldrb	r3, [r7, #13]
 800796a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800796e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007970:	4313      	orrs	r3, r2
 8007972:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007974:	7b7b      	ldrb	r3, [r7, #13]
 8007976:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800797a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800797c:	4313      	orrs	r3, r2
 800797e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007980:	7b7b      	ldrb	r3, [r7, #13]
 8007982:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007986:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007988:	4313      	orrs	r3, r2
 800798a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800798c:	2b01      	cmp	r3, #1
 800798e:	d164      	bne.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007990:	f107 030b 	add.w	r3, r7, #11
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa7c 	bl	8007e94 <lsm6dso_fsm_data_rate_get>
 800799c:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <lsm6dso_gy_data_rate_set+0x100>
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	e074      	b.n	8007a92 <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 80079a8:	7afb      	ldrb	r3, [r7, #11]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d852      	bhi.n	8007a54 <lsm6dso_gy_data_rate_set+0x1ac>
 80079ae:	a201      	add	r2, pc, #4	@ (adr r2, 80079b4 <lsm6dso_gy_data_rate_set+0x10c>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079c5 	.word	0x080079c5
 80079b8:	080079d7 	.word	0x080079d7
 80079bc:	080079f5 	.word	0x080079f5
 80079c0:	08007a1f 	.word	0x08007a1f
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80079ca:	2301      	movs	r3, #1
 80079cc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80079ce:	e044      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	75fb      	strb	r3, [r7, #23]
        break;
 80079d4:	e041      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d102      	bne.n	80079e2 <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80079dc:	2302      	movs	r3, #2
 80079de:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80079e0:	e03b      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d102      	bne.n	80079ee <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80079e8:	2302      	movs	r3, #2
 80079ea:	75fb      	strb	r3, [r7, #23]
        break;
 80079ec:	e035      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80079ee:	78fb      	ldrb	r3, [r7, #3]
 80079f0:	75fb      	strb	r3, [r7, #23]
        break;
 80079f2:	e032      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80079f4:	78fb      	ldrb	r3, [r7, #3]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d102      	bne.n	8007a00 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80079fa:	2303      	movs	r3, #3
 80079fc:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80079fe:	e02c      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	2b01      	cmp	r3, #1
 8007a04:	d102      	bne.n	8007a0c <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007a06:	2303      	movs	r3, #3
 8007a08:	75fb      	strb	r3, [r7, #23]
        break;
 8007a0a:	e026      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007a0c:	78fb      	ldrb	r3, [r7, #3]
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d102      	bne.n	8007a18 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 8007a12:	2303      	movs	r3, #3
 8007a14:	75fb      	strb	r3, [r7, #23]
        break;
 8007a16:	e020      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	75fb      	strb	r3, [r7, #23]
        break;
 8007a1c:	e01d      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007a1e:	78fb      	ldrb	r3, [r7, #3]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d102      	bne.n	8007a2a <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007a24:	2304      	movs	r3, #4
 8007a26:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007a28:	e017      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d102      	bne.n	8007a36 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007a30:	2304      	movs	r3, #4
 8007a32:	75fb      	strb	r3, [r7, #23]
        break;
 8007a34:	e011      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 8007a36:	78fb      	ldrb	r3, [r7, #3]
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d102      	bne.n	8007a42 <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007a3c:	2304      	movs	r3, #4
 8007a3e:	75fb      	strb	r3, [r7, #23]
        break;
 8007a40:	e00b      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 8007a42:	78fb      	ldrb	r3, [r7, #3]
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d102      	bne.n	8007a4e <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007a48:	2304      	movs	r3, #4
 8007a4a:	75fb      	strb	r3, [r7, #23]
        break;
 8007a4c:	e005      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007a4e:	78fb      	ldrb	r3, [r7, #3]
 8007a50:	75fb      	strb	r3, [r7, #23]
        break;
 8007a52:	e002      	b.n	8007a5a <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8007a54:	78fb      	ldrb	r3, [r7, #3]
 8007a56:	75fb      	strb	r3, [r7, #23]
        break;
 8007a58:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007a5a:	f107 0208 	add.w	r2, r7, #8
 8007a5e:	2301      	movs	r3, #1
 8007a60:	2111      	movs	r1, #17
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f7ff fcc8 	bl	80073f8 <lsm6dso_read_reg>
 8007a68:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8007a6a:	7dfb      	ldrb	r3, [r7, #23]
 8007a6c:	f003 030f 	and.w	r3, r3, #15
 8007a70:	b2da      	uxtb	r2, r3
 8007a72:	7a3b      	ldrb	r3, [r7, #8]
 8007a74:	f362 1307 	bfi	r3, r2, #4, #4
 8007a78:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007a7a:	f107 0208 	add.w	r2, r7, #8
 8007a7e:	2301      	movs	r3, #1
 8007a80:	2111      	movs	r1, #17
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f7ff fcd0 	bl	8007428 <lsm6dso_write_reg>
 8007a88:	4602      	mov	r2, r0
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	613b      	str	r3, [r7, #16]

  return ret;
 8007a90:	693b      	ldr	r3, [r7, #16]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007aa6:	f107 0208 	add.w	r2, r7, #8
 8007aaa:	2301      	movs	r3, #1
 8007aac:	2111      	movs	r1, #17
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fca2 	bl	80073f8 <lsm6dso_read_reg>
 8007ab4:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007ab6:	7a3b      	ldrb	r3, [r7, #8]
 8007ab8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b0a      	cmp	r3, #10
 8007ac0:	d844      	bhi.n	8007b4c <lsm6dso_gy_data_rate_get+0xb0>
 8007ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac8 <lsm6dso_gy_data_rate_get+0x2c>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007af5 	.word	0x08007af5
 8007acc:	08007afd 	.word	0x08007afd
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b0d 	.word	0x08007b0d
 8007ad8:	08007b15 	.word	0x08007b15
 8007adc:	08007b1d 	.word	0x08007b1d
 8007ae0:	08007b25 	.word	0x08007b25
 8007ae4:	08007b2d 	.word	0x08007b2d
 8007ae8:	08007b35 	.word	0x08007b35
 8007aec:	08007b3d 	.word	0x08007b3d
 8007af0:	08007b45 	.word	0x08007b45
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
      break;
 8007afa:	e02b      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2201      	movs	r2, #1
 8007b00:	701a      	strb	r2, [r3, #0]
      break;
 8007b02:	e027      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	2202      	movs	r2, #2
 8007b08:	701a      	strb	r2, [r3, #0]
      break;
 8007b0a:	e023      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	2203      	movs	r2, #3
 8007b10:	701a      	strb	r2, [r3, #0]
      break;
 8007b12:	e01f      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	2204      	movs	r2, #4
 8007b18:	701a      	strb	r2, [r3, #0]
      break;
 8007b1a:	e01b      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	2205      	movs	r2, #5
 8007b20:	701a      	strb	r2, [r3, #0]
      break;
 8007b22:	e017      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2206      	movs	r2, #6
 8007b28:	701a      	strb	r2, [r3, #0]
      break;
 8007b2a:	e013      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2207      	movs	r2, #7
 8007b30:	701a      	strb	r2, [r3, #0]
      break;
 8007b32:	e00f      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2208      	movs	r2, #8
 8007b38:	701a      	strb	r2, [r3, #0]
      break;
 8007b3a:	e00b      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2209      	movs	r2, #9
 8007b40:	701a      	strb	r2, [r3, #0]
      break;
 8007b42:	e007      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	220a      	movs	r2, #10
 8007b48:	701a      	strb	r2, [r3, #0]
      break;
 8007b4a:	e003      	b.n	8007b54 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	701a      	strb	r2, [r3, #0]
      break;
 8007b52:	bf00      	nop
  }

  return ret;
 8007b54:	68fb      	ldr	r3, [r7, #12]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop

08007b60 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b6c:	f107 0208 	add.w	r2, r7, #8
 8007b70:	2301      	movs	r3, #1
 8007b72:	2112      	movs	r1, #18
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f7ff fc3f 	bl	80073f8 <lsm6dso_read_reg>
 8007b7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10f      	bne.n	8007ba2 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8007b82:	78fb      	ldrb	r3, [r7, #3]
 8007b84:	f003 0301 	and.w	r3, r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	7a3b      	ldrb	r3, [r7, #8]
 8007b8c:	f362 1386 	bfi	r3, r2, #6, #1
 8007b90:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b92:	f107 0208 	add.w	r2, r7, #8
 8007b96:	2301      	movs	r3, #1
 8007b98:	2112      	movs	r1, #18
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fc44 	bl	8007428 <lsm6dso_write_reg>
 8007ba0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007bb6:	f107 020c 	add.w	r2, r7, #12
 8007bba:	2306      	movs	r3, #6
 8007bbc:	2122      	movs	r1, #34	@ 0x22
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fc1a 	bl	80073f8 <lsm6dso_read_reg>
 8007bc4:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007bc6:	7b7b      	ldrb	r3, [r7, #13]
 8007bc8:	b21a      	sxth	r2, r3
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	021b      	lsls	r3, r3, #8
 8007bd8:	b29b      	uxth	r3, r3
 8007bda:	7b3a      	ldrb	r2, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	b29b      	uxth	r3, r3
 8007be0:	b21a      	sxth	r2, r3
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007be6:	7bfa      	ldrb	r2, [r7, #15]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	3302      	adds	r3, #2
 8007bec:	b212      	sxth	r2, r2
 8007bee:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	3302      	adds	r3, #2
 8007bf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	021b      	lsls	r3, r3, #8
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	7bba      	ldrb	r2, [r7, #14]
 8007c00:	4413      	add	r3, r2
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	3302      	adds	r3, #2
 8007c08:	b212      	sxth	r2, r2
 8007c0a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007c0c:	7c7a      	ldrb	r2, [r7, #17]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	3304      	adds	r3, #4
 8007c12:	b212      	sxth	r2, r2
 8007c14:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	3304      	adds	r3, #4
 8007c1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	021b      	lsls	r3, r3, #8
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	7c3a      	ldrb	r2, [r7, #16]
 8007c26:	4413      	add	r3, r2
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	3304      	adds	r3, #4
 8007c2e:	b212      	sxth	r2, r2
 8007c30:	801a      	strh	r2, [r3, #0]

  return ret;
 8007c32:	697b      	ldr	r3, [r7, #20]
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}

08007c3c <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b086      	sub	sp, #24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007c46:	f107 020c 	add.w	r2, r7, #12
 8007c4a:	2306      	movs	r3, #6
 8007c4c:	2128      	movs	r1, #40	@ 0x28
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff fbd2 	bl	80073f8 <lsm6dso_read_reg>
 8007c54:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007c56:	7b7b      	ldrb	r3, [r7, #13]
 8007c58:	b21a      	sxth	r2, r3
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	7b3a      	ldrb	r2, [r7, #12]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	b21a      	sxth	r2, r3
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007c76:	7bfa      	ldrb	r2, [r7, #15]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	3302      	adds	r3, #2
 8007c7c:	b212      	sxth	r2, r2
 8007c7e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	3302      	adds	r3, #2
 8007c84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	7bba      	ldrb	r2, [r7, #14]
 8007c90:	4413      	add	r3, r2
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	3302      	adds	r3, #2
 8007c98:	b212      	sxth	r2, r2
 8007c9a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007c9c:	7c7a      	ldrb	r2, [r7, #17]
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	b212      	sxth	r2, r2
 8007ca4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	3304      	adds	r3, #4
 8007caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	021b      	lsls	r3, r3, #8
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	7c3a      	ldrb	r2, [r7, #16]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	3304      	adds	r3, #4
 8007cbe:	b212      	sxth	r2, r2
 8007cc0:	801a      	strh	r2, [r3, #0]

  return ret;
 8007cc2:	697b      	ldr	r3, [r7, #20]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3718      	adds	r7, #24
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007cd8:	2300      	movs	r3, #0
 8007cda:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	f003 0303 	and.w	r3, r3, #3
 8007ce2:	b2da      	uxtb	r2, r3
 8007ce4:	7a3b      	ldrb	r3, [r7, #8]
 8007ce6:	f362 1387 	bfi	r3, r2, #6, #2
 8007cea:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007cec:	f107 0208 	add.w	r2, r7, #8
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fb97 	bl	8007428 <lsm6dso_write_reg>
 8007cfa:	60f8      	str	r0, [r7, #12]

  return ret;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
 8007d0e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007d10:	2301      	movs	r3, #1
 8007d12:	683a      	ldr	r2, [r7, #0]
 8007d14:	210f      	movs	r1, #15
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff fb6e 	bl	80073f8 <lsm6dso_read_reg>
 8007d1c:	60f8      	str	r0, [r7, #12]

  return ret;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3710      	adds	r7, #16
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}

08007d28 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b084      	sub	sp, #16
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007d34:	f107 0208 	add.w	r2, r7, #8
 8007d38:	2301      	movs	r3, #1
 8007d3a:	2112      	movs	r1, #18
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f7ff fb5b 	bl	80073f8 <lsm6dso_read_reg>
 8007d42:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d10f      	bne.n	8007d6a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	f003 0301 	and.w	r3, r3, #1
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	7a3b      	ldrb	r3, [r7, #8]
 8007d54:	f362 0382 	bfi	r3, r2, #2, #1
 8007d58:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007d5a:	f107 0208 	add.w	r2, r7, #8
 8007d5e:	2301      	movs	r3, #1
 8007d60:	2112      	movs	r1, #18
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f7ff fb60 	bl	8007428 <lsm6dso_write_reg>
 8007d68:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007d80:	f107 020c 	add.w	r2, r7, #12
 8007d84:	2301      	movs	r3, #1
 8007d86:	2118      	movs	r1, #24
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fb35 	bl	80073f8 <lsm6dso_read_reg>
 8007d8e:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	09db      	lsrs	r3, r3, #7
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	b2da      	uxtb	r2, r3
 8007d9c:	7b3b      	ldrb	r3, [r7, #12]
 8007d9e:	f362 0341 	bfi	r3, r2, #1, #1
 8007da2:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007da4:	f107 020c 	add.w	r2, r7, #12
 8007da8:	2301      	movs	r3, #1
 8007daa:	2118      	movs	r1, #24
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f7ff fb3b 	bl	8007428 <lsm6dso_write_reg>
 8007db2:	4602      	mov	r2, r0
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	4413      	add	r3, r2
 8007db8:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <lsm6dso_i3c_disable_set+0x50>
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	e01b      	b.n	8007dfc <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007dc4:	f107 0210 	add.w	r2, r7, #16
 8007dc8:	2301      	movs	r3, #1
 8007dca:	2162      	movs	r1, #98	@ 0x62
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7ff fb13 	bl	80073f8 <lsm6dso_read_reg>
 8007dd2:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007dd4:	78fb      	ldrb	r3, [r7, #3]
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	7c3b      	ldrb	r3, [r7, #16]
 8007dde:	f362 03c4 	bfi	r3, r2, #3, #2
 8007de2:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007de4:	f107 0210 	add.w	r2, r7, #16
 8007de8:	2301      	movs	r3, #1
 8007dea:	2162      	movs	r1, #98	@ 0x62
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fb1b 	bl	8007428 <lsm6dso_write_reg>
 8007df2:	4602      	mov	r2, r0
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	4413      	add	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  return ret;
 8007dfa:	697b      	ldr	r3, [r7, #20]
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3718      	adds	r7, #24
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007e10:	f107 0208 	add.w	r2, r7, #8
 8007e14:	2301      	movs	r3, #1
 8007e16:	210a      	movs	r1, #10
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f7ff faed 	bl	80073f8 <lsm6dso_read_reg>
 8007e1e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10f      	bne.n	8007e46 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	b2da      	uxtb	r2, r3
 8007e2e:	7a3b      	ldrb	r3, [r7, #8]
 8007e30:	f362 0302 	bfi	r3, r2, #0, #3
 8007e34:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007e36:	f107 0208 	add.w	r2, r7, #8
 8007e3a:	2301      	movs	r3, #1
 8007e3c:	210a      	movs	r1, #10
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7ff faf2 	bl	8007428 <lsm6dso_write_reg>
 8007e44:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007e46:	68fb      	ldr	r3, [r7, #12]
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007e5a:	2102      	movs	r1, #2
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff ff35 	bl	8007ccc <lsm6dso_mem_bank_set>
 8007e62:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007e64:	2302      	movs	r3, #2
 8007e66:	683a      	ldr	r2, [r7, #0]
 8007e68:	2146      	movs	r1, #70	@ 0x46
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f7ff fac4 	bl	80073f8 <lsm6dso_read_reg>
 8007e70:	4602      	mov	r2, r0
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007e78:	2100      	movs	r1, #0
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff ff26 	bl	8007ccc <lsm6dso_mem_bank_set>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	4413      	add	r3, r2
 8007e86:	60fb      	str	r3, [r7, #12]

  return ret;
 8007e88:	68fb      	ldr	r3, [r7, #12]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007e9e:	2102      	movs	r1, #2
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff ff13 	bl	8007ccc <lsm6dso_mem_bank_set>
 8007ea6:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d001      	beq.n	8007eb2 <lsm6dso_fsm_data_rate_get+0x1e>
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	e03a      	b.n	8007f28 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007eb2:	f107 0208 	add.w	r2, r7, #8
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	215f      	movs	r1, #95	@ 0x5f
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fa9c 	bl	80073f8 <lsm6dso_read_reg>
 8007ec0:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d125      	bne.n	8007f14 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007ec8:	7a3b      	ldrb	r3, [r7, #8]
 8007eca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b03      	cmp	r3, #3
 8007ed2:	d81b      	bhi.n	8007f0c <lsm6dso_fsm_data_rate_get+0x78>
 8007ed4:	a201      	add	r2, pc, #4	@ (adr r2, 8007edc <lsm6dso_fsm_data_rate_get+0x48>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007eed 	.word	0x08007eed
 8007ee0:	08007ef5 	.word	0x08007ef5
 8007ee4:	08007efd 	.word	0x08007efd
 8007ee8:	08007f05 	.word	0x08007f05
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	701a      	strb	r2, [r3, #0]
      break;
 8007ef2:	e010      	b.n	8007f16 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	701a      	strb	r2, [r3, #0]
      break;
 8007efa:	e00c      	b.n	8007f16 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2202      	movs	r2, #2
 8007f00:	701a      	strb	r2, [r3, #0]
      break;
 8007f02:	e008      	b.n	8007f16 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2203      	movs	r2, #3
 8007f08:	701a      	strb	r2, [r3, #0]
      break;
 8007f0a:	e004      	b.n	8007f16 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	701a      	strb	r2, [r3, #0]
      break;
 8007f12:	e000      	b.n	8007f16 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007f14:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007f16:	2100      	movs	r1, #0
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f7ff fed7 	bl	8007ccc <lsm6dso_mem_bank_set>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	60fb      	str	r3, [r7, #12]

  return ret;
 8007f26:	68fb      	ldr	r3, [r7, #12]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b08e      	sub	sp, #56	@ 0x38
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007f42:	2300      	movs	r3, #0
 8007f44:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d06e      	beq.n	800802a <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b02      	cmp	r3, #2
 8007f50:	f200 809d 	bhi.w	800808e <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d003      	beq.n	8007f62 <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d032      	beq.n	8007fc6 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007f60:	e095      	b.n	800808e <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007f62:	6838      	ldr	r0, [r7, #0]
 8007f64:	f000 f9ae 	bl	80082c4 <LSM6DSO_0_Probe>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d002      	beq.n	8007f74 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007f72:	e0cc      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007f74:	4a68      	ldr	r2, [pc, #416]	@ (8008118 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f7c:	68db      	ldr	r3, [r3, #12]
 8007f7e:	4967      	ldr	r1, [pc, #412]	@ (800811c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f86:	f107 010c 	add.w	r1, r7, #12
 8007f8a:	4610      	mov	r0, r2
 8007f8c:	4798      	blx	r3
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007f94:	f06f 0306 	mvn.w	r3, #6
 8007f98:	e0b9      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007f9a:	7b3b      	ldrb	r3, [r7, #12]
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d103      	bne.n	8007fa8 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007fa8:	7b7b      	ldrb	r3, [r7, #13]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d103      	bne.n	8007fb6 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb0:	f043 0301 	orr.w	r3, r3, #1
 8007fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007fb6:	7bbb      	ldrb	r3, [r7, #14]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d16c      	bne.n	8008096 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	f043 0304 	orr.w	r3, r3, #4
 8007fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007fc4:	e067      	b.n	8008096 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007fc6:	6838      	ldr	r0, [r7, #0]
 8007fc8:	f000 fa3c 	bl	8008444 <LIS2DW12_0_Probe>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	e09a      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007fd8:	4a4f      	ldr	r2, [pc, #316]	@ (8008118 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	494e      	ldr	r1, [pc, #312]	@ (800811c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fea:	f107 010c 	add.w	r1, r7, #12
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4798      	blx	r3
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d002      	beq.n	8007ffe <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007ff8:	f06f 0306 	mvn.w	r3, #6
 8007ffc:	e087      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007ffe:	7b3b      	ldrb	r3, [r7, #12]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d103      	bne.n	800800c <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	f043 0302 	orr.w	r3, r3, #2
 800800a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 800800c:	7b7b      	ldrb	r3, [r7, #13]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d103      	bne.n	800801a <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8008012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800801a:	7bbb      	ldrb	r3, [r7, #14]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d13c      	bne.n	800809a <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8008020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008022:	f043 0304 	orr.w	r3, r3, #4
 8008026:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8008028:	e037      	b.n	800809a <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 fab2 	bl	8008594 <LIS2MDL_0_Probe>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8008036:	f04f 33ff 	mov.w	r3, #4294967295
 800803a:	e068      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 800803c:	4a36      	ldr	r2, [pc, #216]	@ (8008118 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	4935      	ldr	r1, [pc, #212]	@ (800811c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800804e:	f107 010c 	add.w	r1, r7, #12
 8008052:	4610      	mov	r0, r2
 8008054:	4798      	blx	r3
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d002      	beq.n	8008062 <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 800805c:	f06f 0306 	mvn.w	r3, #6
 8008060:	e055      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8008062:	7b3b      	ldrb	r3, [r7, #12]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d103      	bne.n	8008070 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8008068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800806a:	f043 0302 	orr.w	r3, r3, #2
 800806e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8008070:	7b7b      	ldrb	r3, [r7, #13]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d103      	bne.n	800807e <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	f043 0301 	orr.w	r3, r3, #1
 800807c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 800807e:	7bbb      	ldrb	r3, [r7, #14]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10c      	bne.n	800809e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	f043 0304 	orr.w	r3, r3, #4
 800808a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 800808c:	e007      	b.n	800809e <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800808e:	f06f 0301 	mvn.w	r3, #1
 8008092:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8008094:	e004      	b.n	80080a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8008096:	bf00      	nop
 8008098:	e002      	b.n	80080a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800809a:	bf00      	nop
 800809c:	e000      	b.n	80080a0 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 800809e:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 80080a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 80080a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080a8:	e031      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 80080aa:	2300      	movs	r3, #0
 80080ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ae:	e02a      	b.n	8008106 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	4013      	ands	r3, r2
 80080b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d11e      	bne.n	80080fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 80080bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c0:	4013      	ands	r3, r2
 80080c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d118      	bne.n	80080fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 80080c8:	4a15      	ldr	r2, [pc, #84]	@ (8008120 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80080d0:	4814      	ldr	r0, [pc, #80]	@ (8008124 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	4613      	mov	r3, r2
 80080d6:	005b      	lsls	r3, r3, #1
 80080d8:	4413      	add	r3, r2
 80080da:	440b      	add	r3, r1
 80080dc:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	490e      	ldr	r1, [pc, #56]	@ (800811c <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80080ea:	4610      	mov	r0, r2
 80080ec:	4798      	blx	r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 80080f4:	f06f 0304 	mvn.w	r3, #4
 80080f8:	e009      	b.n	800810e <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 80080fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8008100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008102:	3301      	adds	r3, #1
 8008104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008108:	2b02      	cmp	r3, #2
 800810a:	d9d1      	bls.n	80080b0 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 800810c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800810e:	4618      	mov	r0, r3
 8008110:	3738      	adds	r7, #56	@ 0x38
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	200007f8 	.word	0x200007f8
 800811c:	200007c8 	.word	0x200007c8
 8008120:	200000cc 	.word	0x200000cc
 8008124:	200007d4 	.word	0x200007d4

08008128 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2b02      	cmp	r3, #2
 8008138:	d903      	bls.n	8008142 <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800813a:	f06f 0301 	mvn.w	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	e029      	b.n	8008196 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008142:	4a17      	ldr	r2, [pc, #92]	@ (80081a0 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	4013      	ands	r3, r2
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	429a      	cmp	r2, r3
 8008152:	d11d      	bne.n	8008190 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8008154:	4a13      	ldr	r2, [pc, #76]	@ (80081a4 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800815c:	4812      	ldr	r0, [pc, #72]	@ (80081a8 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 800815e:	68fa      	ldr	r2, [r7, #12]
 8008160:	4613      	mov	r3, r2
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	4413      	add	r3, r2
 8008166:	440b      	add	r3, r1
 8008168:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	490f      	ldr	r1, [pc, #60]	@ (80081ac <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008176:	6879      	ldr	r1, [r7, #4]
 8008178:	4610      	mov	r0, r2
 800817a:	4798      	blx	r3
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008182:	f06f 0304 	mvn.w	r3, #4
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	e005      	b.n	8008196 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
 800818e:	e002      	b.n	8008196 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008190:	f06f 0301 	mvn.w	r3, #1
 8008194:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008196:	697b      	ldr	r3, [r7, #20]
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	20000804 	.word	0x20000804
 80081a4:	200000cc 	.word	0x200000cc
 80081a8:	200007d4 	.word	0x200007d4
 80081ac:	200007c8 	.word	0x200007c8

080081b0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b086      	sub	sp, #24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	60b9      	str	r1, [r7, #8]
 80081ba:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2b02      	cmp	r3, #2
 80081c2:	d903      	bls.n	80081cc <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80081c4:	f06f 0301 	mvn.w	r3, #1
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e02a      	b.n	8008222 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 80081cc:	4a17      	ldr	r2, [pc, #92]	@ (800822c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4013      	ands	r3, r2
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d11e      	bne.n	800821c <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 80081de:	4a14      	ldr	r2, [pc, #80]	@ (8008230 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80081e6:	4813      	ldr	r0, [pc, #76]	@ (8008234 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	440b      	add	r3, r1
 80081f2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	490f      	ldr	r1, [pc, #60]	@ (8008238 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008200:	ed97 0a01 	vldr	s0, [r7, #4]
 8008204:	4610      	mov	r0, r2
 8008206:	4798      	blx	r3
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800820e:	f06f 0304 	mvn.w	r3, #4
 8008212:	617b      	str	r3, [r7, #20]
 8008214:	e005      	b.n	8008222 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008216:	2300      	movs	r3, #0
 8008218:	617b      	str	r3, [r7, #20]
 800821a:	e002      	b.n	8008222 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 800821c:	f06f 0301 	mvn.w	r3, #1
 8008220:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008222:	697b      	ldr	r3, [r7, #20]
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000804 	.word	0x20000804
 8008230:	200000cc 	.word	0x200000cc
 8008234:	200007d4 	.word	0x200007d4
 8008238:	200007c8 	.word	0x200007c8

0800823c <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	b086      	sub	sp, #24
 8008240:	af00      	add	r7, sp, #0
 8008242:	60f8      	str	r0, [r7, #12]
 8008244:	60b9      	str	r1, [r7, #8]
 8008246:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d903      	bls.n	8008256 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800824e:	f06f 0301 	mvn.w	r3, #1
 8008252:	617b      	str	r3, [r7, #20]
 8008254:	e029      	b.n	80082aa <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008256:	4a17      	ldr	r2, [pc, #92]	@ (80082b4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	4013      	ands	r3, r2
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	d11d      	bne.n	80082a4 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8008268:	4a13      	ldr	r2, [pc, #76]	@ (80082b8 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008270:	4812      	ldr	r0, [pc, #72]	@ (80082bc <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4613      	mov	r3, r2
 8008276:	005b      	lsls	r3, r3, #1
 8008278:	4413      	add	r3, r2
 800827a:	440b      	add	r3, r1
 800827c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	490f      	ldr	r1, [pc, #60]	@ (80082c0 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8008284:	68fa      	ldr	r2, [r7, #12]
 8008286:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800828a:	6879      	ldr	r1, [r7, #4]
 800828c:	4610      	mov	r0, r2
 800828e:	4798      	blx	r3
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008296:	f06f 0304 	mvn.w	r3, #4
 800829a:	617b      	str	r3, [r7, #20]
 800829c:	e005      	b.n	80082aa <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800829e:	2300      	movs	r3, #0
 80082a0:	617b      	str	r3, [r7, #20]
 80082a2:	e002      	b.n	80082aa <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 80082a4:	f06f 0301 	mvn.w	r3, #1
 80082a8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 80082aa:	697b      	ldr	r3, [r7, #20]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	20000804 	.word	0x20000804
 80082b8:	200000cc 	.word	0x200000cc
 80082bc:	200007d4 	.word	0x200007d4
 80082c0:	200007c8 	.word	0x200007c8

080082c4 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b094      	sub	sp, #80	@ 0x50
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 80082cc:	2300      	movs	r3, #0
 80082ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 80082d0:	2300      	movs	r3, #0
 80082d2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 80082d4:	23d7      	movs	r3, #215	@ 0xd7
 80082d6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80082da:	4b4b      	ldr	r3, [pc, #300]	@ (8008408 <LSM6DSO_0_Probe+0x144>)
 80082dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80082de:	4b4b      	ldr	r3, [pc, #300]	@ (800840c <LSM6DSO_0_Probe+0x148>)
 80082e0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80082e2:	4b4b      	ldr	r3, [pc, #300]	@ (8008410 <LSM6DSO_0_Probe+0x14c>)
 80082e4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80082e6:	4b4b      	ldr	r3, [pc, #300]	@ (8008414 <LSM6DSO_0_Probe+0x150>)
 80082e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80082ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <LSM6DSO_0_Probe+0x154>)
 80082ec:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80082ee:	4b4b      	ldr	r3, [pc, #300]	@ (800841c <LSM6DSO_0_Probe+0x158>)
 80082f0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80082f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80082f6:	4619      	mov	r1, r3
 80082f8:	4849      	ldr	r0, [pc, #292]	@ (8008420 <LSM6DSO_0_Probe+0x15c>)
 80082fa:	f7fd fe3f 	bl	8005f7c <LSM6DSO_RegisterBusIO>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d003      	beq.n	800830c <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008304:	f06f 0306 	mvn.w	r3, #6
 8008308:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800830a:	e077      	b.n	80083fc <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 800830c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008310:	4619      	mov	r1, r3
 8008312:	4843      	ldr	r0, [pc, #268]	@ (8008420 <LSM6DSO_0_Probe+0x15c>)
 8008314:	f7fd ff3c 	bl	8006190 <LSM6DSO_ReadID>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800831e:	f06f 0306 	mvn.w	r3, #6
 8008322:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008324:	e06a      	b.n	80083fc <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8008326:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800832a:	2b6c      	cmp	r3, #108	@ 0x6c
 800832c:	d003      	beq.n	8008336 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800832e:	f06f 0306 	mvn.w	r3, #6
 8008332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008334:	e062      	b.n	80083fc <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8008336:	f107 030c 	add.w	r3, r7, #12
 800833a:	4619      	mov	r1, r3
 800833c:	4838      	ldr	r0, [pc, #224]	@ (8008420 <LSM6DSO_0_Probe+0x15c>)
 800833e:	f7fd ff3d 	bl	80061bc <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008342:	7b7b      	ldrb	r3, [r7, #13]
 8008344:	461a      	mov	r2, r3
 8008346:	7b3b      	ldrb	r3, [r7, #12]
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	431a      	orrs	r2, r3
 800834c:	7bbb      	ldrb	r3, [r7, #14]
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4313      	orrs	r3, r2
 8008352:	4a34      	ldr	r2, [pc, #208]	@ (8008424 <LSM6DSO_0_Probe+0x160>)
 8008354:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8008356:	4b34      	ldr	r3, [pc, #208]	@ (8008428 <LSM6DSO_0_Probe+0x164>)
 8008358:	4a31      	ldr	r2, [pc, #196]	@ (8008420 <LSM6DSO_0_Probe+0x15c>)
 800835a:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 800835c:	4b33      	ldr	r3, [pc, #204]	@ (800842c <LSM6DSO_0_Probe+0x168>)
 800835e:	4a34      	ldr	r2, [pc, #208]	@ (8008430 <LSM6DSO_0_Probe+0x16c>)
 8008360:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8008362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11d      	bne.n	80083a4 <LSM6DSO_0_Probe+0xe0>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f003 0301 	and.w	r3, r3, #1
 800836e:	2b00      	cmp	r3, #0
 8008370:	d018      	beq.n	80083a4 <LSM6DSO_0_Probe+0xe0>
 8008372:	7b7b      	ldrb	r3, [r7, #13]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d115      	bne.n	80083a4 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008378:	4b2e      	ldr	r3, [pc, #184]	@ (8008434 <LSM6DSO_0_Probe+0x170>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4a2e      	ldr	r2, [pc, #184]	@ (8008438 <LSM6DSO_0_Probe+0x174>)
 800837e:	492f      	ldr	r1, [pc, #188]	@ (800843c <LSM6DSO_0_Probe+0x178>)
 8008380:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008384:	4b29      	ldr	r3, [pc, #164]	@ (800842c <LSM6DSO_0_Probe+0x168>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a27      	ldr	r2, [pc, #156]	@ (8008428 <LSM6DSO_0_Probe+0x164>)
 800838c:	6812      	ldr	r2, [r2, #0]
 800838e:	4610      	mov	r0, r2
 8008390:	4798      	blx	r3
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008398:	f06f 0304 	mvn.w	r3, #4
 800839c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800839e:	e001      	b.n	80083a4 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083a0:	2300      	movs	r3, #0
 80083a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80083a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d11d      	bne.n	80083e6 <LSM6DSO_0_Probe+0x122>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d018      	beq.n	80083e6 <LSM6DSO_0_Probe+0x122>
 80083b4:	7b3b      	ldrb	r3, [r7, #12]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d115      	bne.n	80083e6 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80083ba:	4b1e      	ldr	r3, [pc, #120]	@ (8008434 <LSM6DSO_0_Probe+0x170>)
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	4a1e      	ldr	r2, [pc, #120]	@ (8008438 <LSM6DSO_0_Probe+0x174>)
 80083c0:	491f      	ldr	r1, [pc, #124]	@ (8008440 <LSM6DSO_0_Probe+0x17c>)
 80083c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 80083c6:	4b19      	ldr	r3, [pc, #100]	@ (800842c <LSM6DSO_0_Probe+0x168>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a16      	ldr	r2, [pc, #88]	@ (8008428 <LSM6DSO_0_Probe+0x164>)
 80083ce:	6812      	ldr	r2, [r2, #0]
 80083d0:	4610      	mov	r0, r2
 80083d2:	4798      	blx	r3
 80083d4:	4603      	mov	r3, r0
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d003      	beq.n	80083e2 <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80083da:	f06f 0304 	mvn.w	r3, #4
 80083de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083e0:	e001      	b.n	80083e6 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80083e2:	2300      	movs	r3, #0
 80083e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80083e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d107      	bne.n	80083fc <LSM6DSO_0_Probe+0x138>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f003 0304 	and.w	r3, r3, #4
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80083f6:	f06f 0304 	mvn.w	r3, #4
 80083fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80083fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3750      	adds	r7, #80	@ 0x50
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
 8008406:	bf00      	nop
 8008408:	08003559 	.word	0x08003559
 800840c:	080035d5 	.word	0x080035d5
 8008410:	08003689 	.word	0x08003689
 8008414:	08003625 	.word	0x08003625
 8008418:	080036ed 	.word	0x080036ed
 800841c:	08001e11 	.word	0x08001e11
 8008420:	20000810 	.word	0x20000810
 8008424:	20000804 	.word	0x20000804
 8008428:	200007c8 	.word	0x200007c8
 800842c:	200007f8 	.word	0x200007f8
 8008430:	20000074 	.word	0x20000074
 8008434:	200000cc 	.word	0x200000cc
 8008438:	200007d4 	.word	0x200007d4
 800843c:	200000a8 	.word	0x200000a8
 8008440:	20000084 	.word	0x20000084

08008444 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b094      	sub	sp, #80	@ 0x50
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 800844c:	2300      	movs	r3, #0
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008450:	2300      	movs	r3, #0
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008454:	2333      	movs	r3, #51	@ 0x33
 8008456:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 800845a:	4b40      	ldr	r3, [pc, #256]	@ (800855c <LIS2DW12_0_Probe+0x118>)
 800845c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800845e:	4b40      	ldr	r3, [pc, #256]	@ (8008560 <LIS2DW12_0_Probe+0x11c>)
 8008460:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8008462:	4b40      	ldr	r3, [pc, #256]	@ (8008564 <LIS2DW12_0_Probe+0x120>)
 8008464:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008466:	4b40      	ldr	r3, [pc, #256]	@ (8008568 <LIS2DW12_0_Probe+0x124>)
 8008468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 800846a:	4b40      	ldr	r3, [pc, #256]	@ (800856c <LIS2DW12_0_Probe+0x128>)
 800846c:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800846e:	4b40      	ldr	r3, [pc, #256]	@ (8008570 <LIS2DW12_0_Probe+0x12c>)
 8008470:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 8008472:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008476:	4619      	mov	r1, r3
 8008478:	483e      	ldr	r0, [pc, #248]	@ (8008574 <LIS2DW12_0_Probe+0x130>)
 800847a:	f7fb faf3 	bl	8003a64 <LIS2DW12_RegisterBusIO>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d003      	beq.n	800848c <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008484:	f06f 0306 	mvn.w	r3, #6
 8008488:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800848a:	e062      	b.n	8008552 <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 800848c:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008490:	4619      	mov	r1, r3
 8008492:	4838      	ldr	r0, [pc, #224]	@ (8008574 <LIS2DW12_0_Probe+0x130>)
 8008494:	f7fb fbd4 	bl	8003c40 <LIS2DW12_ReadID>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d003      	beq.n	80084a6 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800849e:	f06f 0306 	mvn.w	r3, #6
 80084a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084a4:	e055      	b.n	8008552 <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 80084a6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80084aa:	2b44      	cmp	r3, #68	@ 0x44
 80084ac:	d003      	beq.n	80084b6 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80084ae:	f06f 0306 	mvn.w	r3, #6
 80084b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b4:	e04d      	b.n	8008552 <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	4619      	mov	r1, r3
 80084bc:	482d      	ldr	r0, [pc, #180]	@ (8008574 <LIS2DW12_0_Probe+0x130>)
 80084be:	f7fb fbd5 	bl	8003c6c <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80084c2:	7b7b      	ldrb	r3, [r7, #13]
 80084c4:	461a      	mov	r2, r3
 80084c6:	7b3b      	ldrb	r3, [r7, #12]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	431a      	orrs	r2, r3
 80084cc:	7bbb      	ldrb	r3, [r7, #14]
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4313      	orrs	r3, r2
 80084d2:	4a29      	ldr	r2, [pc, #164]	@ (8008578 <LIS2DW12_0_Probe+0x134>)
 80084d4:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 80084d6:	4b29      	ldr	r3, [pc, #164]	@ (800857c <LIS2DW12_0_Probe+0x138>)
 80084d8:	4a26      	ldr	r2, [pc, #152]	@ (8008574 <LIS2DW12_0_Probe+0x130>)
 80084da:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 80084dc:	4b28      	ldr	r3, [pc, #160]	@ (8008580 <LIS2DW12_0_Probe+0x13c>)
 80084de:	4a29      	ldr	r2, [pc, #164]	@ (8008584 <LIS2DW12_0_Probe+0x140>)
 80084e0:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 80084e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d11e      	bne.n	8008526 <LIS2DW12_0_Probe+0xe2>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f003 0302 	and.w	r3, r3, #2
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d019      	beq.n	8008526 <LIS2DW12_0_Probe+0xe2>
 80084f2:	7b3b      	ldrb	r3, [r7, #12]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	d116      	bne.n	8008526 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80084f8:	4b23      	ldr	r3, [pc, #140]	@ (8008588 <LIS2DW12_0_Probe+0x144>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	4a23      	ldr	r2, [pc, #140]	@ (800858c <LIS2DW12_0_Probe+0x148>)
 80084fe:	3303      	adds	r3, #3
 8008500:	4923      	ldr	r1, [pc, #140]	@ (8008590 <LIS2DW12_0_Probe+0x14c>)
 8008502:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 8008506:	4b1e      	ldr	r3, [pc, #120]	@ (8008580 <LIS2DW12_0_Probe+0x13c>)
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1b      	ldr	r2, [pc, #108]	@ (800857c <LIS2DW12_0_Probe+0x138>)
 800850e:	6852      	ldr	r2, [r2, #4]
 8008510:	4610      	mov	r0, r2
 8008512:	4798      	blx	r3
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d003      	beq.n	8008522 <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800851a:	f06f 0304 	mvn.w	r3, #4
 800851e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008520:	e001      	b.n	8008526 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008522:	2300      	movs	r3, #0
 8008524:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008526:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008528:	2b00      	cmp	r3, #0
 800852a:	d107      	bne.n	800853c <LIS2DW12_0_Probe+0xf8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008536:	f06f 0304 	mvn.w	r3, #4
 800853a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800853c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800853e:	2b00      	cmp	r3, #0
 8008540:	d107      	bne.n	8008552 <LIS2DW12_0_Probe+0x10e>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d002      	beq.n	8008552 <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800854c:	f06f 0304 	mvn.w	r3, #4
 8008550:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 8008552:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008554:	4618      	mov	r0, r3
 8008556:	3750      	adds	r7, #80	@ 0x50
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	08003559 	.word	0x08003559
 8008560:	080035d5 	.word	0x080035d5
 8008564:	08003689 	.word	0x08003689
 8008568:	08003625 	.word	0x08003625
 800856c:	080036ed 	.word	0x080036ed
 8008570:	08001e11 	.word	0x08001e11
 8008574:	20000848 	.word	0x20000848
 8008578:	20000804 	.word	0x20000804
 800857c:	200007c8 	.word	0x200007c8
 8008580:	200007f8 	.word	0x200007f8
 8008584:	2000000c 	.word	0x2000000c
 8008588:	200000cc 	.word	0x200000cc
 800858c:	200007d4 	.word	0x200007d4
 8008590:	2000001c 	.word	0x2000001c

08008594 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b094      	sub	sp, #80	@ 0x50
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 800859c:	2300      	movs	r3, #0
 800859e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 80085a0:	2300      	movs	r3, #0
 80085a2:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 80085a4:	233d      	movs	r3, #61	@ 0x3d
 80085a6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 80085aa:	4b40      	ldr	r3, [pc, #256]	@ (80086ac <LIS2MDL_0_Probe+0x118>)
 80085ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 80085ae:	4b40      	ldr	r3, [pc, #256]	@ (80086b0 <LIS2MDL_0_Probe+0x11c>)
 80085b0:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 80085b2:	4b40      	ldr	r3, [pc, #256]	@ (80086b4 <LIS2MDL_0_Probe+0x120>)
 80085b4:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80085b6:	4b40      	ldr	r3, [pc, #256]	@ (80086b8 <LIS2MDL_0_Probe+0x124>)
 80085b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80085ba:	4b40      	ldr	r3, [pc, #256]	@ (80086bc <LIS2MDL_0_Probe+0x128>)
 80085bc:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80085be:	4b40      	ldr	r3, [pc, #256]	@ (80086c0 <LIS2MDL_0_Probe+0x12c>)
 80085c0:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 80085c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80085c6:	4619      	mov	r1, r3
 80085c8:	483e      	ldr	r0, [pc, #248]	@ (80086c4 <LIS2MDL_0_Probe+0x130>)
 80085ca:	f7fc fcd7 	bl	8004f7c <LIS2MDL_RegisterBusIO>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d003      	beq.n	80085dc <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085d4:	f06f 0306 	mvn.w	r3, #6
 80085d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085da:	e062      	b.n	80086a2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 80085dc:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80085e0:	4619      	mov	r1, r3
 80085e2:	4838      	ldr	r0, [pc, #224]	@ (80086c4 <LIS2MDL_0_Probe+0x130>)
 80085e4:	f7fc fde6 	bl	80051b4 <LIS2MDL_ReadID>
 80085e8:	4603      	mov	r3, r0
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085ee:	f06f 0306 	mvn.w	r3, #6
 80085f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80085f4:	e055      	b.n	80086a2 <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80085f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085fa:	2b40      	cmp	r3, #64	@ 0x40
 80085fc:	d003      	beq.n	8008606 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80085fe:	f06f 0306 	mvn.w	r3, #6
 8008602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008604:	e04d      	b.n	80086a2 <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 8008606:	f107 030c 	add.w	r3, r7, #12
 800860a:	4619      	mov	r1, r3
 800860c:	482d      	ldr	r0, [pc, #180]	@ (80086c4 <LIS2MDL_0_Probe+0x130>)
 800860e:	f7fc fdf7 	bl	8005200 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8008612:	7b7b      	ldrb	r3, [r7, #13]
 8008614:	461a      	mov	r2, r3
 8008616:	7b3b      	ldrb	r3, [r7, #12]
 8008618:	005b      	lsls	r3, r3, #1
 800861a:	431a      	orrs	r2, r3
 800861c:	7bbb      	ldrb	r3, [r7, #14]
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4313      	orrs	r3, r2
 8008622:	4a29      	ldr	r2, [pc, #164]	@ (80086c8 <LIS2MDL_0_Probe+0x134>)
 8008624:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 8008626:	4b29      	ldr	r3, [pc, #164]	@ (80086cc <LIS2MDL_0_Probe+0x138>)
 8008628:	4a26      	ldr	r2, [pc, #152]	@ (80086c4 <LIS2MDL_0_Probe+0x130>)
 800862a:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 800862c:	4b28      	ldr	r3, [pc, #160]	@ (80086d0 <LIS2MDL_0_Probe+0x13c>)
 800862e:	4a29      	ldr	r2, [pc, #164]	@ (80086d4 <LIS2MDL_0_Probe+0x140>)
 8008630:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 8008632:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008634:	2b00      	cmp	r3, #0
 8008636:	d11e      	bne.n	8008676 <LIS2MDL_0_Probe+0xe2>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d019      	beq.n	8008676 <LIS2MDL_0_Probe+0xe2>
 8008642:	7bbb      	ldrb	r3, [r7, #14]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d116      	bne.n	8008676 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008648:	4b23      	ldr	r3, [pc, #140]	@ (80086d8 <LIS2MDL_0_Probe+0x144>)
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	4a23      	ldr	r2, [pc, #140]	@ (80086dc <LIS2MDL_0_Probe+0x148>)
 800864e:	3306      	adds	r3, #6
 8008650:	4923      	ldr	r1, [pc, #140]	@ (80086e0 <LIS2MDL_0_Probe+0x14c>)
 8008652:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008656:	4b1e      	ldr	r3, [pc, #120]	@ (80086d0 <LIS2MDL_0_Probe+0x13c>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a1b      	ldr	r2, [pc, #108]	@ (80086cc <LIS2MDL_0_Probe+0x138>)
 800865e:	6892      	ldr	r2, [r2, #8]
 8008660:	4610      	mov	r0, r2
 8008662:	4798      	blx	r3
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800866a:	f06f 0304 	mvn.w	r3, #4
 800866e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008670:	e001      	b.n	8008676 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008672:	2300      	movs	r3, #0
 8008674:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d107      	bne.n	800868c <LIS2MDL_0_Probe+0xf8>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d002      	beq.n	800868c <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008686:	f06f 0304 	mvn.w	r3, #4
 800868a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 800868c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d107      	bne.n	80086a2 <LIS2MDL_0_Probe+0x10e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d002      	beq.n	80086a2 <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800869c:	f06f 0304 	mvn.w	r3, #4
 80086a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80086a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3750      	adds	r7, #80	@ 0x50
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	08003559 	.word	0x08003559
 80086b0:	080035d5 	.word	0x080035d5
 80086b4:	08003689 	.word	0x08003689
 80086b8:	08003625 	.word	0x08003625
 80086bc:	080036ed 	.word	0x080036ed
 80086c0:	08001e11 	.word	0x08001e11
 80086c4:	20000884 	.word	0x20000884
 80086c8:	20000804 	.word	0x20000804
 80086cc:	200007c8 	.word	0x200007c8
 80086d0:	200007f8 	.word	0x200007f8
 80086d4:	20000040 	.word	0x20000040
 80086d8:	200000cc 	.word	0x200000cc
 80086dc:	200007d4 	.word	0x200007d4
 80086e0:	20000050 	.word	0x20000050

080086e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80086ea:	2300      	movs	r3, #0
 80086ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80086ee:	4b0c      	ldr	r3, [pc, #48]	@ (8008720 <HAL_Init+0x3c>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a0b      	ldr	r2, [pc, #44]	@ (8008720 <HAL_Init+0x3c>)
 80086f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80086f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80086fa:	2003      	movs	r0, #3
 80086fc:	f001 fb94 	bl	8009e28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008700:	2000      	movs	r0, #0
 8008702:	f000 f80f 	bl	8008724 <HAL_InitTick>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d002      	beq.n	8008712 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800870c:	2301      	movs	r3, #1
 800870e:	71fb      	strb	r3, [r7, #7]
 8008710:	e001      	b.n	8008716 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008712:	f7fa fd50 	bl	80031b6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008716:	79fb      	ldrb	r3, [r7, #7]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3708      	adds	r7, #8
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	58004000 	.word	0x58004000

08008724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8008730:	4b17      	ldr	r3, [pc, #92]	@ (8008790 <HAL_InitTick+0x6c>)
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d024      	beq.n	8008782 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008738:	f004 f8d8 	bl	800c8ec <HAL_RCC_GetHCLKFreq>
 800873c:	4602      	mov	r2, r0
 800873e:	4b14      	ldr	r3, [pc, #80]	@ (8008790 <HAL_InitTick+0x6c>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008748:	fbb3 f3f1 	udiv	r3, r3, r1
 800874c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008750:	4618      	mov	r0, r3
 8008752:	f001 fbaa 	bl	8009eaa <HAL_SYSTICK_Config>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10f      	bne.n	800877c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2b0f      	cmp	r3, #15
 8008760:	d809      	bhi.n	8008776 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008762:	2200      	movs	r2, #0
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	f04f 30ff 	mov.w	r0, #4294967295
 800876a:	f001 fb68 	bl	8009e3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800876e:	4a09      	ldr	r2, [pc, #36]	@ (8008794 <HAL_InitTick+0x70>)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	e007      	b.n	8008786 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	73fb      	strb	r3, [r7, #15]
 800877a:	e004      	b.n	8008786 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	73fb      	strb	r3, [r7, #15]
 8008780:	e001      	b.n	8008786 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008782:	2301      	movs	r3, #1
 8008784:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	200000e4 	.word	0x200000e4
 8008794:	200000e0 	.word	0x200000e0

08008798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800879c:	4b06      	ldr	r3, [pc, #24]	@ (80087b8 <HAL_IncTick+0x20>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b06      	ldr	r3, [pc, #24]	@ (80087bc <HAL_IncTick+0x24>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4413      	add	r3, r2
 80087a8:	4a04      	ldr	r2, [pc, #16]	@ (80087bc <HAL_IncTick+0x24>)
 80087aa:	6013      	str	r3, [r2, #0]
}
 80087ac:	bf00      	nop
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	200000e4 	.word	0x200000e4
 80087bc:	200008b8 	.word	0x200008b8

080087c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  return uwTick;
 80087c4:	4b03      	ldr	r3, [pc, #12]	@ (80087d4 <HAL_GetTick+0x14>)
 80087c6:	681b      	ldr	r3, [r3, #0]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200008b8 	.word	0x200008b8

080087d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80087d8:	b480      	push	{r7}
 80087da:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80087dc:	4b03      	ldr	r3, [pc, #12]	@ (80087ec <HAL_GetTickPrio+0x14>)
 80087de:	681b      	ldr	r3, [r3, #0]
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	200000e0 	.word	0x200000e0

080087f0 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80087f4:	4b03      	ldr	r3, [pc, #12]	@ (8008804 <HAL_GetTickFreq+0x14>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop
 8008804:	200000e4 	.word	0x200000e4

08008808 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	431a      	orrs	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008822:	bf00      	nop
 8008824:	370c      	adds	r7, #12
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr

0800882e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800882e:	b480      	push	{r7}
 8008830:	b083      	sub	sp, #12
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
 8008836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	431a      	orrs	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	609a      	str	r2, [r3, #8]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008864:	4618      	mov	r0, r3
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008870:	b480      	push	{r7}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
 800887c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3360      	adds	r3, #96	@ 0x60
 8008882:	461a      	mov	r2, r3
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	009b      	lsls	r3, r3, #2
 8008888:	4413      	add	r3, r2
 800888a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	4b08      	ldr	r3, [pc, #32]	@ (80088b4 <LL_ADC_SetOffset+0x44>)
 8008892:	4013      	ands	r3, r2
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800889a:	683a      	ldr	r2, [r7, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	4313      	orrs	r3, r2
 80088a0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80088a8:	bf00      	nop
 80088aa:	371c      	adds	r7, #28
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr
 80088b4:	03fff000 	.word	0x03fff000

080088b8 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	3360      	adds	r3, #96	@ 0x60
 80088c6:	461a      	mov	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	4413      	add	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b087      	sub	sp, #28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3360      	adds	r3, #96	@ 0x60
 80088f4:	461a      	mov	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	431a      	orrs	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800890e:	bf00      	nop
 8008910:	371c      	adds	r7, #28
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800891a:	b480      	push	{r7}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800892e:	2301      	movs	r3, #1
 8008930:	e000      	b.n	8008934 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008932:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008934:	4618      	mov	r0, r3
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3330      	adds	r3, #48	@ 0x30
 8008950:	461a      	mov	r2, r3
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	0a1b      	lsrs	r3, r3, #8
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	f003 030c 	and.w	r3, r3, #12
 800895c:	4413      	add	r3, r2
 800895e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	f003 031f 	and.w	r3, r3, #31
 800896a:	211f      	movs	r1, #31
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	0e9b      	lsrs	r3, r3, #26
 8008978:	f003 011f 	and.w	r1, r3, #31
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	f003 031f 	and.w	r3, r3, #31
 8008982:	fa01 f303 	lsl.w	r3, r1, r3
 8008986:	431a      	orrs	r2, r3
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	60b9      	str	r1, [r7, #8]
 80089a2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	3314      	adds	r3, #20
 80089a8:	461a      	mov	r2, r3
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	0e5b      	lsrs	r3, r3, #25
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	f003 0304 	and.w	r3, r3, #4
 80089b4:	4413      	add	r3, r2
 80089b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	0d1b      	lsrs	r3, r3, #20
 80089c0:	f003 031f 	and.w	r3, r3, #31
 80089c4:	2107      	movs	r1, #7
 80089c6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	401a      	ands	r2, r3
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	0d1b      	lsrs	r3, r3, #20
 80089d2:	f003 031f 	and.w	r3, r3, #31
 80089d6:	6879      	ldr	r1, [r7, #4]
 80089d8:	fa01 f303 	lsl.w	r3, r1, r3
 80089dc:	431a      	orrs	r2, r3
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80089e2:	bf00      	nop
 80089e4:	371c      	adds	r7, #28
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr
	...

080089f0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a08:	43db      	mvns	r3, r3
 8008a0a:	401a      	ands	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f003 0318 	and.w	r3, r3, #24
 8008a12:	4908      	ldr	r1, [pc, #32]	@ (8008a34 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008a14:	40d9      	lsrs	r1, r3
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	400b      	ands	r3, r1
 8008a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008a26:	bf00      	nop
 8008a28:	3714      	adds	r7, #20
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr
 8008a32:	bf00      	nop
 8008a34:	0007ffff 	.word	0x0007ffff

08008a38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	689b      	ldr	r3, [r3, #8]
 8008a44:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8008a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	6093      	str	r3, [r2, #8]
}
 8008a50:	bf00      	nop
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a70:	d101      	bne.n	8008a76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr

08008a84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008a94:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008a98:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008aa0:	bf00      	nop
 8008aa2:	370c      	adds	r7, #12
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008aac:	b480      	push	{r7}
 8008aae:	b083      	sub	sp, #12
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008abc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ac0:	d101      	bne.n	8008ac6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ae4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008ae8:	f043 0201 	orr.w	r2, r3, #1
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008af0:	bf00      	nop
 8008af2:	370c      	adds	r7, #12
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b0c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b10:	f043 0202 	orr.w	r2, r3, #2
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8008b18:	bf00      	nop
 8008b1a:	370c      	adds	r7, #12
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr

08008b24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008b24:	b480      	push	{r7}
 8008b26:	b083      	sub	sp, #12
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	f003 0301 	and.w	r3, r3, #1
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <LL_ADC_IsEnabled+0x18>
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e000      	b.n	8008b3e <LL_ADC_IsEnabled+0x1a>
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	370c      	adds	r7, #12
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b083      	sub	sp, #12
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b02      	cmp	r3, #2
 8008b5c:	d101      	bne.n	8008b62 <LL_ADC_IsDisableOngoing+0x18>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e000      	b.n	8008b64 <LL_ADC_IsDisableOngoing+0x1a>
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008b84:	f043 0204 	orr.w	r2, r3, #4
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8008b8c:	bf00      	nop
 8008b8e:	370c      	adds	r7, #12
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b083      	sub	sp, #12
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008ba8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008bac:	f043 0210 	orr.w	r2, r3, #16
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	f003 0304 	and.w	r3, r3, #4
 8008bd0:	2b04      	cmp	r3, #4
 8008bd2:	d101      	bne.n	8008bd8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e000      	b.n	8008bda <LL_ADC_REG_IsConversionOngoing+0x1a>
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	370c      	adds	r7, #12
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8008be6:	b480      	push	{r7}
 8008be8:	b083      	sub	sp, #12
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	689b      	ldr	r3, [r3, #8]
 8008bf2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008bf6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008bfa:	f043 0220 	orr.w	r2, r3, #32
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8008c02:	bf00      	nop
 8008c04:	370c      	adds	r7, #12
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr

08008c0e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b083      	sub	sp, #12
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	f003 0308 	and.w	r3, r3, #8
 8008c1e:	2b08      	cmp	r3, #8
 8008c20:	d101      	bne.n	8008c26 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008c22:	2301      	movs	r3, #1
 8008c24:	e000      	b.n	8008c28 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b088      	sub	sp, #32
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d101      	bne.n	8008c52 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e12e      	b.n	8008eb0 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	691b      	ldr	r3, [r3, #16]
 8008c56:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d109      	bne.n	8008c74 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7fa fab9 	bl	80031d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff feef 	bl	8008a5c <LL_ADC_IsDeepPowerDownEnabled>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d004      	beq.n	8008c8e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4618      	mov	r0, r3
 8008c8a:	f7ff fed5 	bl	8008a38 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff ff0a 	bl	8008aac <LL_ADC_IsInternalRegulatorEnabled>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d115      	bne.n	8008cca <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7ff feee 	bl	8008a84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008ca8:	4b83      	ldr	r3, [pc, #524]	@ (8008eb8 <HAL_ADC_Init+0x284>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	099b      	lsrs	r3, r3, #6
 8008cae:	4a83      	ldr	r2, [pc, #524]	@ (8008ebc <HAL_ADC_Init+0x288>)
 8008cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cb4:	099b      	lsrs	r3, r3, #6
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008cbc:	e002      	b.n	8008cc4 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d1f9      	bne.n	8008cbe <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7ff feec 	bl	8008aac <LL_ADC_IsInternalRegulatorEnabled>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10d      	bne.n	8008cf6 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cde:	f043 0210 	orr.w	r2, r3, #16
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cea:	f043 0201 	orr.w	r2, r3, #1
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8008cf2:	2301      	movs	r3, #1
 8008cf4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	f7ff ff60 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8008d00:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d06:	f003 0310 	and.w	r3, r3, #16
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f040 80c7 	bne.w	8008e9e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 80c3 	bne.w	8008e9e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d1c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8008d20:	f043 0202 	orr.w	r2, r3, #2
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f7ff fef9 	bl	8008b24 <LL_ADC_IsEnabled>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10b      	bne.n	8008d50 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008d38:	4861      	ldr	r0, [pc, #388]	@ (8008ec0 <HAL_ADC_Init+0x28c>)
 8008d3a:	f7ff fef3 	bl	8008b24 <LL_ADC_IsEnabled>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d105      	bne.n	8008d50 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	4619      	mov	r1, r3
 8008d4a:	485e      	ldr	r0, [pc, #376]	@ (8008ec4 <HAL_ADC_Init+0x290>)
 8008d4c:	f7ff fd5c 	bl	8008808 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7e5b      	ldrb	r3, [r3, #25]
 8008d54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008d60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008d66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d6e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008d70:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d106      	bne.n	8008d90 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d86:	3b01      	subs	r3, #1
 8008d88:	045b      	lsls	r3, r3, #17
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d009      	beq.n	8008dac <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d9c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008da4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008da6:	69ba      	ldr	r2, [r7, #24]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	4b45      	ldr	r3, [pc, #276]	@ (8008ec8 <HAL_ADC_Init+0x294>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	6812      	ldr	r2, [r2, #0]
 8008dba:	69b9      	ldr	r1, [r7, #24]
 8008dbc:	430b      	orrs	r3, r1
 8008dbe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7ff fefb 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8008dca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff ff1c 	bl	8008c0e <LL_ADC_INJ_IsConversionOngoing>
 8008dd6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d13d      	bne.n	8008e5a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d13a      	bne.n	8008e5a <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008de8:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008df0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008df2:	4313      	orrs	r3, r2
 8008df4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	68db      	ldr	r3, [r3, #12]
 8008dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008e00:	f023 0302 	bic.w	r3, r3, #2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	69b9      	ldr	r1, [r7, #24]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d118      	bne.n	8008e4a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008e22:	f023 0304 	bic.w	r3, r3, #4
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008e2e:	4311      	orrs	r1, r2
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008e34:	4311      	orrs	r1, r2
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f042 0201 	orr.w	r2, r2, #1
 8008e46:	611a      	str	r2, [r3, #16]
 8008e48:	e007      	b.n	8008e5a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	691a      	ldr	r2, [r3, #16]
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f022 0201 	bic.w	r2, r2, #1
 8008e58:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	691b      	ldr	r3, [r3, #16]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d10c      	bne.n	8008e7c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e68:	f023 010f 	bic.w	r1, r3, #15
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	1e5a      	subs	r2, r3, #1
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	631a      	str	r2, [r3, #48]	@ 0x30
 8008e7a:	e007      	b.n	8008e8c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f022 020f 	bic.w	r2, r2, #15
 8008e8a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e90:	f023 0303 	bic.w	r3, r3, #3
 8008e94:	f043 0201 	orr.w	r2, r3, #1
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	655a      	str	r2, [r3, #84]	@ 0x54
 8008e9c:	e007      	b.n	8008eae <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ea2:	f043 0210 	orr.w	r2, r3, #16
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008eae:	7ffb      	ldrb	r3, [r7, #31]
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	3720      	adds	r7, #32
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}
 8008eb8:	20000008 	.word	0x20000008
 8008ebc:	053e2d63 	.word	0x053e2d63
 8008ec0:	50040000 	.word	0x50040000
 8008ec4:	50040300 	.word	0x50040300
 8008ec8:	fff0c007 	.word	0xfff0c007

08008ecc <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7ff fe71 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d140      	bne.n	8008f66 <HAL_ADC_Start+0x9a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d101      	bne.n	8008ef2 <HAL_ADC_Start+0x26>
 8008eee:	2302      	movs	r3, #2
 8008ef0:	e03c      	b.n	8008f6c <HAL_ADC_Start+0xa0>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f000 fd8a 	bl	8009a14 <ADC_Enable>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d128      	bne.n	8008f5c <HAL_ADC_Start+0x90>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008f12:	f023 0301 	bic.w	r3, r3, #1
 8008f16:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
#else
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f2a:	d106      	bne.n	8008f3a <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f30:	f023 0206 	bic.w	r2, r3, #6
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	659a      	str	r2, [r3, #88]	@ 0x58
 8008f38:	e002      	b.n	8008f40 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_SUPPORT_2_5_MSPS */

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	221c      	movs	r2, #28
 8008f46:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4618      	mov	r0, r3
 8008f56:	f7ff fe0b 	bl	8008b70 <LL_ADC_REG_StartConversion>
 8008f5a:	e006      	b.n	8008f6a <HAL_ADC_Start+0x9e>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8008f64:	e001      	b.n	8008f6a <HAL_ADC_Start+0x9e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008f66:	2302      	movs	r3, #2
 8008f68:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3710      	adds	r7, #16
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d101      	bne.n	8008f8a <HAL_ADC_Stop+0x16>
 8008f86:	2302      	movs	r3, #2
 8008f88:	e023      	b.n	8008fd2 <HAL_ADC_Stop+0x5e>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
#else
  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8008f92:	2103      	movs	r1, #3
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fc81 	bl	800989c <ADC_ConversionStop>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73fb      	strb	r3, [r7, #15]
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8008f9e:	7bfb      	ldrb	r3, [r7, #15]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d111      	bne.n	8008fc8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fdaf 	bl	8009b08 <ADC_Disable>
 8008faa:	4603      	mov	r3, r0
 8008fac:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d109      	bne.n	8008fc8 <HAL_ADC_Stop+0x54>
#if defined(ADC_SUPPORT_2_5_MSPS)
      ADC_STATE_CLR_SET(hadc->State,
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
#else
      ADC_STATE_CLR_SET(hadc->State,
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fb8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8008fbc:	f023 0301 	bic.w	r3, r3, #1
 8008fc0:	f043 0201 	orr.w	r2, r3, #1
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	655a      	str	r2, [r3, #84]	@ 0x54
#endif /* ADC_SUPPORT_2_5_MSPS */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b084      	sub	sp, #16
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
 8008fe2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	2b08      	cmp	r3, #8
 8008fea:	d102      	bne.n	8008ff2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8008fec:	2308      	movs	r3, #8
 8008fee:	60fb      	str	r3, [r7, #12]
 8008ff0:	e010      	b.n	8009014 <HAL_ADC_PollForConversion+0x3a>
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if(READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN) != 0UL)
#else
    if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <HAL_ADC_PollForConversion+0x36>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009004:	f043 0220 	orr.w	r2, r3, #32
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	655a      	str	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e06d      	b.n	80090ec <HAL_ADC_PollForConversion+0x112>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8009010:	2304      	movs	r3, #4
 8009012:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8009014:	f7ff fbd4 	bl	80087c0 <HAL_GetTick>
 8009018:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800901a:	e021      	b.n	8009060 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009022:	d01d      	beq.n	8009060 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8009024:	f7ff fbcc 	bl	80087c0 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	429a      	cmp	r2, r3
 8009032:	d302      	bcc.n	800903a <HAL_ADC_PollForConversion+0x60>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d112      	bne.n	8009060 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	4013      	ands	r3, r2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10b      	bne.n	8009060 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800904c:	f043 0204 	orr.w	r2, r3, #4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e045      	b.n	80090ec <HAL_ADC_PollForConversion+0x112>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	4013      	ands	r3, r2
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0d6      	beq.n	800901c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009072:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f7ff fc4b 	bl	800891a <LL_ADC_REG_IsTriggerSourceSWStart>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d01c      	beq.n	80090c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	7e5b      	ldrb	r3, [r3, #25]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d118      	bne.n	80090c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b08      	cmp	r3, #8
 800909e:	d111      	bne.n	80090c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090bc:	f043 0201 	orr.w	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2b08      	cmp	r3, #8
 80090c8:	d104      	bne.n	80090d4 <HAL_ADC_PollForConversion+0xfa>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2208      	movs	r2, #8
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e00a      	b.n	80090ea <HAL_ADC_PollForConversion+0x110>
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if (READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_WAIT) == 0UL)
#else
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY) == 0UL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d103      	bne.n	80090ea <HAL_ADC_PollForConversion+0x110>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	220c      	movs	r2, #12
 80090e8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
	...

08009110 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b0b6      	sub	sp, #216	@ 0xd8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009120:	2300      	movs	r3, #0
 8009122:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_ADC_ConfigChannel+0x22>
 800912e:	2302      	movs	r3, #2
 8009130:	e39f      	b.n	8009872 <HAL_ADC_ConfigChannel+0x762>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f7ff fd3e 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	f040 8384 	bne.w	8009854 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	6859      	ldr	r1, [r3, #4]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	f7ff fbf1 	bl	8008940 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff fd2c 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8009168:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4618      	mov	r0, r3
 8009172:	f7ff fd4c 	bl	8008c0e <LL_ADC_INJ_IsConversionOngoing>
 8009176:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800917a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800917e:	2b00      	cmp	r3, #0
 8009180:	f040 81a6 	bne.w	80094d0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009188:	2b00      	cmp	r3, #0
 800918a:	f040 81a1 	bne.w	80094d0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6819      	ldr	r1, [r3, #0]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	689b      	ldr	r3, [r3, #8]
 800919a:	461a      	mov	r2, r3
 800919c:	f7ff fbfc 	bl	8008998 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	695a      	ldr	r2, [r3, #20]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	08db      	lsrs	r3, r3, #3
 80091ac:	f003 0303 	and.w	r3, r3, #3
 80091b0:	005b      	lsls	r3, r3, #1
 80091b2:	fa02 f303 	lsl.w	r3, r2, r3
 80091b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	2b04      	cmp	r3, #4
 80091c0:	d00a      	beq.n	80091d8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6818      	ldr	r0, [r3, #0]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	6919      	ldr	r1, [r3, #16]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091d2:	f7ff fb4d 	bl	8008870 <LL_ADC_SetOffset>
 80091d6:	e17b      	b.n	80094d0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f7ff fb6a 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 80091e4:	4603      	mov	r3, r0
 80091e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <HAL_ADC_ConfigChannel+0xf4>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2100      	movs	r1, #0
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7ff fb5f 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 80091fa:	4603      	mov	r3, r0
 80091fc:	0e9b      	lsrs	r3, r3, #26
 80091fe:	f003 021f 	and.w	r2, r3, #31
 8009202:	e01e      	b.n	8009242 <HAL_ADC_ConfigChannel+0x132>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2100      	movs	r1, #0
 800920a:	4618      	mov	r0, r3
 800920c:	f7ff fb54 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 8009210:	4603      	mov	r3, r0
 8009212:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009216:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800921a:	fa93 f3a3 	rbit	r3, r3
 800921e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8009222:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009226:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 800922a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8009232:	2320      	movs	r3, #32
 8009234:	e004      	b.n	8009240 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8009236:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800923a:	fab3 f383 	clz	r3, r3
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800924a:	2b00      	cmp	r3, #0
 800924c:	d105      	bne.n	800925a <HAL_ADC_ConfigChannel+0x14a>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	0e9b      	lsrs	r3, r3, #26
 8009254:	f003 031f 	and.w	r3, r3, #31
 8009258:	e018      	b.n	800928c <HAL_ADC_ConfigChannel+0x17c>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009266:	fa93 f3a3 	rbit	r3, r3
 800926a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800926e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009272:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8009276:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800927a:	2b00      	cmp	r3, #0
 800927c:	d101      	bne.n	8009282 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800927e:	2320      	movs	r3, #32
 8009280:	e004      	b.n	800928c <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8009282:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009286:	fab3 f383 	clz	r3, r3
 800928a:	b2db      	uxtb	r3, r3
 800928c:	429a      	cmp	r2, r3
 800928e:	d106      	bne.n	800929e <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2200      	movs	r2, #0
 8009296:	2100      	movs	r1, #0
 8009298:	4618      	mov	r0, r3
 800929a:	f7ff fb23 	bl	80088e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2101      	movs	r1, #1
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fb07 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d10a      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x1ba>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2101      	movs	r1, #1
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff fafc 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 80092c0:	4603      	mov	r3, r0
 80092c2:	0e9b      	lsrs	r3, r3, #26
 80092c4:	f003 021f 	and.w	r2, r3, #31
 80092c8:	e01e      	b.n	8009308 <HAL_ADC_ConfigChannel+0x1f8>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	2101      	movs	r1, #1
 80092d0:	4618      	mov	r0, r3
 80092d2:	f7ff faf1 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 80092d6:	4603      	mov	r3, r0
 80092d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80092dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80092e0:	fa93 f3a3 	rbit	r3, r3
 80092e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80092e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80092ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80092f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d101      	bne.n	80092fc <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 80092f8:	2320      	movs	r3, #32
 80092fa:	e004      	b.n	8009306 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 80092fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009300:	fab3 f383 	clz	r3, r3
 8009304:	b2db      	uxtb	r3, r3
 8009306:	461a      	mov	r2, r3
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <HAL_ADC_ConfigChannel+0x210>
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	0e9b      	lsrs	r3, r3, #26
 800931a:	f003 031f 	and.w	r3, r3, #31
 800931e:	e018      	b.n	8009352 <HAL_ADC_ConfigChannel+0x242>
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009328:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800932c:	fa93 f3a3 	rbit	r3, r3
 8009330:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8009334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009338:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800933c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8009344:	2320      	movs	r3, #32
 8009346:	e004      	b.n	8009352 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8009348:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800934c:	fab3 f383 	clz	r3, r3
 8009350:	b2db      	uxtb	r3, r3
 8009352:	429a      	cmp	r2, r3
 8009354:	d106      	bne.n	8009364 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2200      	movs	r2, #0
 800935c:	2101      	movs	r1, #1
 800935e:	4618      	mov	r0, r3
 8009360:	f7ff fac0 	bl	80088e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2102      	movs	r1, #2
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff faa4 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 8009370:	4603      	mov	r3, r0
 8009372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009376:	2b00      	cmp	r3, #0
 8009378:	d10a      	bne.n	8009390 <HAL_ADC_ConfigChannel+0x280>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2102      	movs	r1, #2
 8009380:	4618      	mov	r0, r3
 8009382:	f7ff fa99 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 8009386:	4603      	mov	r3, r0
 8009388:	0e9b      	lsrs	r3, r3, #26
 800938a:	f003 021f 	and.w	r2, r3, #31
 800938e:	e01e      	b.n	80093ce <HAL_ADC_ConfigChannel+0x2be>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2102      	movs	r1, #2
 8009396:	4618      	mov	r0, r3
 8009398:	f7ff fa8e 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 800939c:	4603      	mov	r3, r0
 800939e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80093a6:	fa93 f3a3 	rbit	r3, r3
 80093aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80093ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80093b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80093b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d101      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80093be:	2320      	movs	r3, #32
 80093c0:	e004      	b.n	80093cc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80093c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093c6:	fab3 f383 	clz	r3, r3
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	461a      	mov	r2, r3
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d105      	bne.n	80093e6 <HAL_ADC_ConfigChannel+0x2d6>
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	0e9b      	lsrs	r3, r3, #26
 80093e0:	f003 031f 	and.w	r3, r3, #31
 80093e4:	e016      	b.n	8009414 <HAL_ADC_ConfigChannel+0x304>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80093f2:	fa93 f3a3 	rbit	r3, r3
 80093f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80093f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80093fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80093fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009402:	2b00      	cmp	r3, #0
 8009404:	d101      	bne.n	800940a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8009406:	2320      	movs	r3, #32
 8009408:	e004      	b.n	8009414 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800940a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800940e:	fab3 f383 	clz	r3, r3
 8009412:	b2db      	uxtb	r3, r3
 8009414:	429a      	cmp	r2, r3
 8009416:	d106      	bne.n	8009426 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2200      	movs	r2, #0
 800941e:	2102      	movs	r1, #2
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fa5f 	bl	80088e4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2103      	movs	r1, #3
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff fa43 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 8009432:	4603      	mov	r3, r0
 8009434:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <HAL_ADC_ConfigChannel+0x342>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	2103      	movs	r1, #3
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff fa38 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 8009448:	4603      	mov	r3, r0
 800944a:	0e9b      	lsrs	r3, r3, #26
 800944c:	f003 021f 	and.w	r2, r3, #31
 8009450:	e017      	b.n	8009482 <HAL_ADC_ConfigChannel+0x372>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2103      	movs	r1, #3
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff fa2d 	bl	80088b8 <LL_ADC_GetOffsetChannel>
 800945e:	4603      	mov	r3, r0
 8009460:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009462:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009464:	fa93 f3a3 	rbit	r3, r3
 8009468:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800946a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800946c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800946e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8009474:	2320      	movs	r3, #32
 8009476:	e003      	b.n	8009480 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8009478:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800947a:	fab3 f383 	clz	r3, r3
 800947e:	b2db      	uxtb	r3, r3
 8009480:	461a      	mov	r2, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800948a:	2b00      	cmp	r3, #0
 800948c:	d105      	bne.n	800949a <HAL_ADC_ConfigChannel+0x38a>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	0e9b      	lsrs	r3, r3, #26
 8009494:	f003 031f 	and.w	r3, r3, #31
 8009498:	e011      	b.n	80094be <HAL_ADC_ConfigChannel+0x3ae>
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80094a2:	fa93 f3a3 	rbit	r3, r3
 80094a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80094a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80094ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d101      	bne.n	80094b6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80094b2:	2320      	movs	r3, #32
 80094b4:	e003      	b.n	80094be <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80094b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80094b8:	fab3 f383 	clz	r3, r3
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	429a      	cmp	r2, r3
 80094c0:	d106      	bne.n	80094d0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2200      	movs	r2, #0
 80094c8:	2103      	movs	r1, #3
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fa0a 	bl	80088e4 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff fb25 	bl	8008b24 <LL_ADC_IsEnabled>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	f040 81c2 	bne.w	8009866 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6819      	ldr	r1, [r3, #0]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f7ff fa7e 	bl	80089f0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	4a8e      	ldr	r2, [pc, #568]	@ (8009734 <HAL_ADC_ConfigChannel+0x624>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	f040 8130 	bne.w	8009760 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800950c:	2b00      	cmp	r3, #0
 800950e:	d10b      	bne.n	8009528 <HAL_ADC_ConfigChannel+0x418>
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	0e9b      	lsrs	r3, r3, #26
 8009516:	3301      	adds	r3, #1
 8009518:	f003 031f 	and.w	r3, r3, #31
 800951c:	2b09      	cmp	r3, #9
 800951e:	bf94      	ite	ls
 8009520:	2301      	movls	r3, #1
 8009522:	2300      	movhi	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	e019      	b.n	800955c <HAL_ADC_ConfigChannel+0x44c>
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800952e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009530:	fa93 f3a3 	rbit	r3, r3
 8009534:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8009536:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009538:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800953a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800953c:	2b00      	cmp	r3, #0
 800953e:	d101      	bne.n	8009544 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8009540:	2320      	movs	r3, #32
 8009542:	e003      	b.n	800954c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8009544:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009546:	fab3 f383 	clz	r3, r3
 800954a:	b2db      	uxtb	r3, r3
 800954c:	3301      	adds	r3, #1
 800954e:	f003 031f 	and.w	r3, r3, #31
 8009552:	2b09      	cmp	r3, #9
 8009554:	bf94      	ite	ls
 8009556:	2301      	movls	r3, #1
 8009558:	2300      	movhi	r3, #0
 800955a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800955c:	2b00      	cmp	r3, #0
 800955e:	d079      	beq.n	8009654 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009568:	2b00      	cmp	r3, #0
 800956a:	d107      	bne.n	800957c <HAL_ADC_ConfigChannel+0x46c>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	0e9b      	lsrs	r3, r3, #26
 8009572:	3301      	adds	r3, #1
 8009574:	069b      	lsls	r3, r3, #26
 8009576:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800957a:	e015      	b.n	80095a8 <HAL_ADC_ConfigChannel+0x498>
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009582:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009584:	fa93 f3a3 	rbit	r3, r3
 8009588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800958a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800958c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800958e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8009594:	2320      	movs	r3, #32
 8009596:	e003      	b.n	80095a0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8009598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800959a:	fab3 f383 	clz	r3, r3
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	3301      	adds	r3, #1
 80095a2:	069b      	lsls	r3, r3, #26
 80095a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <HAL_ADC_ConfigChannel+0x4b8>
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	0e9b      	lsrs	r3, r3, #26
 80095ba:	3301      	adds	r3, #1
 80095bc:	f003 031f 	and.w	r3, r3, #31
 80095c0:	2101      	movs	r1, #1
 80095c2:	fa01 f303 	lsl.w	r3, r1, r3
 80095c6:	e017      	b.n	80095f8 <HAL_ADC_ConfigChannel+0x4e8>
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095d0:	fa93 f3a3 	rbit	r3, r3
 80095d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80095d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80095da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d101      	bne.n	80095e4 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 80095e0:	2320      	movs	r3, #32
 80095e2:	e003      	b.n	80095ec <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 80095e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80095e6:	fab3 f383 	clz	r3, r3
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	3301      	adds	r3, #1
 80095ee:	f003 031f 	and.w	r3, r3, #31
 80095f2:	2101      	movs	r1, #1
 80095f4:	fa01 f303 	lsl.w	r3, r1, r3
 80095f8:	ea42 0103 	orr.w	r1, r2, r3
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10a      	bne.n	800961e <HAL_ADC_ConfigChannel+0x50e>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	0e9b      	lsrs	r3, r3, #26
 800960e:	3301      	adds	r3, #1
 8009610:	f003 021f 	and.w	r2, r3, #31
 8009614:	4613      	mov	r3, r2
 8009616:	005b      	lsls	r3, r3, #1
 8009618:	4413      	add	r3, r2
 800961a:	051b      	lsls	r3, r3, #20
 800961c:	e018      	b.n	8009650 <HAL_ADC_ConfigChannel+0x540>
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	fa93 f3a3 	rbit	r3, r3
 800962a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800962c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8009636:	2320      	movs	r3, #32
 8009638:	e003      	b.n	8009642 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800963a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800963c:	fab3 f383 	clz	r3, r3
 8009640:	b2db      	uxtb	r3, r3
 8009642:	3301      	adds	r3, #1
 8009644:	f003 021f 	and.w	r2, r3, #31
 8009648:	4613      	mov	r3, r2
 800964a:	005b      	lsls	r3, r3, #1
 800964c:	4413      	add	r3, r2
 800964e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009650:	430b      	orrs	r3, r1
 8009652:	e080      	b.n	8009756 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800965c:	2b00      	cmp	r3, #0
 800965e:	d107      	bne.n	8009670 <HAL_ADC_ConfigChannel+0x560>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	0e9b      	lsrs	r3, r3, #26
 8009666:	3301      	adds	r3, #1
 8009668:	069b      	lsls	r3, r3, #26
 800966a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800966e:	e015      	b.n	800969c <HAL_ADC_ConfigChannel+0x58c>
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009678:	fa93 f3a3 	rbit	r3, r3
 800967c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800967e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009680:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8009682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009684:	2b00      	cmp	r3, #0
 8009686:	d101      	bne.n	800968c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8009688:	2320      	movs	r3, #32
 800968a:	e003      	b.n	8009694 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 800968c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800968e:	fab3 f383 	clz	r3, r3
 8009692:	b2db      	uxtb	r3, r3
 8009694:	3301      	adds	r3, #1
 8009696:	069b      	lsls	r3, r3, #26
 8009698:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d109      	bne.n	80096bc <HAL_ADC_ConfigChannel+0x5ac>
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	0e9b      	lsrs	r3, r3, #26
 80096ae:	3301      	adds	r3, #1
 80096b0:	f003 031f 	and.w	r3, r3, #31
 80096b4:	2101      	movs	r1, #1
 80096b6:	fa01 f303 	lsl.w	r3, r1, r3
 80096ba:	e017      	b.n	80096ec <HAL_ADC_ConfigChannel+0x5dc>
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	fa93 f3a3 	rbit	r3, r3
 80096c8:	61fb      	str	r3, [r7, #28]
  return result;
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80096ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80096d4:	2320      	movs	r3, #32
 80096d6:	e003      	b.n	80096e0 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	fab3 f383 	clz	r3, r3
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	3301      	adds	r3, #1
 80096e2:	f003 031f 	and.w	r3, r3, #31
 80096e6:	2101      	movs	r1, #1
 80096e8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ec:	ea42 0103 	orr.w	r1, r2, r3
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10d      	bne.n	8009718 <HAL_ADC_ConfigChannel+0x608>
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	0e9b      	lsrs	r3, r3, #26
 8009702:	3301      	adds	r3, #1
 8009704:	f003 021f 	and.w	r2, r3, #31
 8009708:	4613      	mov	r3, r2
 800970a:	005b      	lsls	r3, r3, #1
 800970c:	4413      	add	r3, r2
 800970e:	3b1e      	subs	r3, #30
 8009710:	051b      	lsls	r3, r3, #20
 8009712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009716:	e01d      	b.n	8009754 <HAL_ADC_ConfigChannel+0x644>
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	fa93 f3a3 	rbit	r3, r3
 8009724:	613b      	str	r3, [r7, #16]
  return result;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d103      	bne.n	8009738 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009730:	2320      	movs	r3, #32
 8009732:	e005      	b.n	8009740 <HAL_ADC_ConfigChannel+0x630>
 8009734:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8009738:	69bb      	ldr	r3, [r7, #24]
 800973a:	fab3 f383 	clz	r3, r3
 800973e:	b2db      	uxtb	r3, r3
 8009740:	3301      	adds	r3, #1
 8009742:	f003 021f 	and.w	r2, r3, #31
 8009746:	4613      	mov	r3, r2
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	4413      	add	r3, r2
 800974c:	3b1e      	subs	r3, #30
 800974e:	051b      	lsls	r3, r3, #20
 8009750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009754:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8009756:	683a      	ldr	r2, [r7, #0]
 8009758:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800975a:	4619      	mov	r1, r3
 800975c:	f7ff f91c 	bl	8008998 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	4b45      	ldr	r3, [pc, #276]	@ (800987c <HAL_ADC_ConfigChannel+0x76c>)
 8009766:	4013      	ands	r3, r2
 8009768:	2b00      	cmp	r3, #0
 800976a:	d07c      	beq.n	8009866 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800976c:	4844      	ldr	r0, [pc, #272]	@ (8009880 <HAL_ADC_ConfigChannel+0x770>)
 800976e:	f7ff f871 	bl	8008854 <LL_ADC_GetCommonPathInternalCh>
 8009772:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009776:	4843      	ldr	r0, [pc, #268]	@ (8009884 <HAL_ADC_ConfigChannel+0x774>)
 8009778:	f7ff f9d4 	bl	8008b24 <LL_ADC_IsEnabled>
 800977c:	4603      	mov	r3, r0
 800977e:	2b00      	cmp	r3, #0
 8009780:	d15e      	bne.n	8009840 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a40      	ldr	r2, [pc, #256]	@ (8009888 <HAL_ADC_ConfigChannel+0x778>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d127      	bne.n	80097dc <HAL_ADC_ConfigChannel+0x6cc>
 800978c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009790:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009794:	2b00      	cmp	r3, #0
 8009796:	d121      	bne.n	80097dc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a39      	ldr	r2, [pc, #228]	@ (8009884 <HAL_ADC_ConfigChannel+0x774>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d161      	bne.n	8009866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80097a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80097aa:	4619      	mov	r1, r3
 80097ac:	4834      	ldr	r0, [pc, #208]	@ (8009880 <HAL_ADC_ConfigChannel+0x770>)
 80097ae:	f7ff f83e 	bl	800882e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80097b2:	4b36      	ldr	r3, [pc, #216]	@ (800988c <HAL_ADC_ConfigChannel+0x77c>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	099b      	lsrs	r3, r3, #6
 80097b8:	4a35      	ldr	r2, [pc, #212]	@ (8009890 <HAL_ADC_ConfigChannel+0x780>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	099b      	lsrs	r3, r3, #6
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	4613      	mov	r3, r2
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	4413      	add	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80097cc:	e002      	b.n	80097d4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3b01      	subs	r3, #1
 80097d2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f9      	bne.n	80097ce <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80097da:	e044      	b.n	8009866 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a2c      	ldr	r2, [pc, #176]	@ (8009894 <HAL_ADC_ConfigChannel+0x784>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d113      	bne.n	800980e <HAL_ADC_ConfigChannel+0x6fe>
 80097e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80097ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10d      	bne.n	800980e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a23      	ldr	r2, [pc, #140]	@ (8009884 <HAL_ADC_ConfigChannel+0x774>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d134      	bne.n	8009866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80097fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009804:	4619      	mov	r1, r3
 8009806:	481e      	ldr	r0, [pc, #120]	@ (8009880 <HAL_ADC_ConfigChannel+0x770>)
 8009808:	f7ff f811 	bl	800882e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800980c:	e02b      	b.n	8009866 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a21      	ldr	r2, [pc, #132]	@ (8009898 <HAL_ADC_ConfigChannel+0x788>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d126      	bne.n	8009866 <HAL_ADC_ConfigChannel+0x756>
 8009818:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800981c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d120      	bne.n	8009866 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a16      	ldr	r2, [pc, #88]	@ (8009884 <HAL_ADC_ConfigChannel+0x774>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d11b      	bne.n	8009866 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800982e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009832:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009836:	4619      	mov	r1, r3
 8009838:	4811      	ldr	r0, [pc, #68]	@ (8009880 <HAL_ADC_ConfigChannel+0x770>)
 800983a:	f7fe fff8 	bl	800882e <LL_ADC_SetCommonPathInternalCh>
 800983e:	e012      	b.n	8009866 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009844:	f043 0220 	orr.w	r2, r3, #32
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8009852:	e008      	b.n	8009866 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009858:	f043 0220 	orr.w	r2, r3, #32
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800986e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8009872:	4618      	mov	r0, r3
 8009874:	37d8      	adds	r7, #216	@ 0xd8
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}
 800987a:	bf00      	nop
 800987c:	80080000 	.word	0x80080000
 8009880:	50040300 	.word	0x50040300
 8009884:	50040000 	.word	0x50040000
 8009888:	c7520000 	.word	0xc7520000
 800988c:	20000008 	.word	0x20000008
 8009890:	053e2d63 	.word	0x053e2d63
 8009894:	cb840000 	.word	0xcb840000
 8009898:	80000001 	.word	0x80000001

0800989c <ADC_ConversionStop>:
  *
  *         (1) On STM32WB series, parameter not available on devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	6039      	str	r1, [r7, #0]
    }
    
  }
#else
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4618      	mov	r0, r3
 80098b4:	f7ff f984 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 80098b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	4618      	mov	r0, r3
 80098c0:	f7ff f9a5 	bl	8008c0e <LL_ADC_INJ_IsConversionOngoing>
 80098c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f000 8098 	beq.w	8009a04 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68db      	ldr	r3, [r3, #12]
 80098da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d02a      	beq.n	8009938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	7e5b      	ldrb	r3, [r3, #25]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d126      	bne.n	8009938 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	7e1b      	ldrb	r3, [r3, #24]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d122      	bne.n	8009938 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80098f2:	2301      	movs	r3, #1
 80098f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80098f6:	e014      	b.n	8009922 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80098f8:	69fb      	ldr	r3, [r7, #28]
 80098fa:	4a45      	ldr	r2, [pc, #276]	@ (8009a10 <ADC_ConversionStop+0x174>)
 80098fc:	4293      	cmp	r3, r2
 80098fe:	d90d      	bls.n	800991c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009904:	f043 0210 	orr.w	r2, r3, #16
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009910:	f043 0201 	orr.w	r2, r3, #1
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e074      	b.n	8009a06 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	3301      	adds	r3, #1
 8009920:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800992c:	2b40      	cmp	r3, #64	@ 0x40
 800992e:	d1e3      	bne.n	80098f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2240      	movs	r2, #64	@ 0x40
 8009936:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b02      	cmp	r3, #2
 800993c:	d014      	beq.n	8009968 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff f93c 	bl	8008bc0 <LL_ADC_REG_IsConversionOngoing>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d00c      	beq.n	8009968 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff f8f9 	bl	8008b4a <LL_ADC_IsDisableOngoing>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4618      	mov	r0, r3
 8009964:	f7ff f918 	bl	8008b98 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009968:	69bb      	ldr	r3, [r7, #24]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d014      	beq.n	8009998 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f7ff f94b 	bl	8008c0e <LL_ADC_INJ_IsConversionOngoing>
 8009978:	4603      	mov	r3, r0
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00c      	beq.n	8009998 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4618      	mov	r0, r3
 8009984:	f7ff f8e1 	bl	8008b4a <LL_ADC_IsDisableOngoing>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d104      	bne.n	8009998 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f927 	bl	8008be6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b02      	cmp	r3, #2
 800999c:	d005      	beq.n	80099aa <ADC_ConversionStop+0x10e>
 800999e:	69bb      	ldr	r3, [r7, #24]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d105      	bne.n	80099b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80099a4:	230c      	movs	r3, #12
 80099a6:	617b      	str	r3, [r7, #20]
        break;
 80099a8:	e005      	b.n	80099b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80099aa:	2308      	movs	r3, #8
 80099ac:	617b      	str	r3, [r7, #20]
        break;
 80099ae:	e002      	b.n	80099b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80099b0:	2304      	movs	r3, #4
 80099b2:	617b      	str	r3, [r7, #20]
        break;
 80099b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80099b6:	f7fe ff03 	bl	80087c0 <HAL_GetTick>
 80099ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80099bc:	e01b      	b.n	80099f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80099be:	f7fe feff 	bl	80087c0 <HAL_GetTick>
 80099c2:	4602      	mov	r2, r0
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	1ad3      	subs	r3, r2, r3
 80099c8:	2b05      	cmp	r3, #5
 80099ca:	d914      	bls.n	80099f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689a      	ldr	r2, [r3, #8]
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	4013      	ands	r3, r2
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00d      	beq.n	80099f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099de:	f043 0210 	orr.w	r2, r3, #16
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099ea:	f043 0201 	orr.w	r2, r3, #1
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e007      	b.n	8009a06 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689a      	ldr	r2, [r3, #8]
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	4013      	ands	r3, r2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1dc      	bne.n	80099be <ADC_ConversionStop+0x122>

  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return HAL status */
  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3720      	adds	r7, #32
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	a33fffff 	.word	0xa33fffff

08009a14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4618      	mov	r0, r3
 8009a26:	f7ff f87d 	bl	8008b24 <LL_ADC_IsEnabled>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d15e      	bne.n	8009aee <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	689a      	ldr	r2, [r3, #8]
 8009a36:	4b30      	ldr	r3, [pc, #192]	@ (8009af8 <ADC_Enable+0xe4>)
 8009a38:	4013      	ands	r3, r2
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d00d      	beq.n	8009a5a <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a42:	f043 0210 	orr.w	r2, r3, #16
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4e:	f043 0201 	orr.w	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e04a      	b.n	8009af0 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7ff f838 	bl	8008ad4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8009a64:	4825      	ldr	r0, [pc, #148]	@ (8009afc <ADC_Enable+0xe8>)
 8009a66:	f7fe fef5 	bl	8008854 <LL_ADC_GetCommonPathInternalCh>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d00f      	beq.n	8009a94 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009a74:	4b22      	ldr	r3, [pc, #136]	@ (8009b00 <ADC_Enable+0xec>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	099b      	lsrs	r3, r3, #6
 8009a7a:	4a22      	ldr	r2, [pc, #136]	@ (8009b04 <ADC_Enable+0xf0>)
 8009a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009a80:	099b      	lsrs	r3, r3, #6
 8009a82:	3301      	adds	r3, #1
 8009a84:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009a86:	e002      	b.n	8009a8e <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d1f9      	bne.n	8009a88 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8009a94:	f7fe fe94 	bl	80087c0 <HAL_GetTick>
 8009a98:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009a9a:	e021      	b.n	8009ae0 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7ff f83f 	bl	8008b24 <LL_ADC_IsEnabled>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d104      	bne.n	8009ab6 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f7ff f80f 	bl	8008ad4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8009ab6:	f7fe fe83 	bl	80087c0 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d90d      	bls.n	8009ae0 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	f043 0210 	orr.w	r2, r3, #16
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad4:	f043 0201 	orr.w	r2, r3, #1
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	e007      	b.n	8009af0 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	2b01      	cmp	r3, #1
 8009aec:	d1d6      	bne.n	8009a9c <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	8000003f 	.word	0x8000003f
 8009afc:	50040300 	.word	0x50040300
 8009b00:	20000008 	.word	0x20000008
 8009b04:	053e2d63 	.word	0x053e2d63

08009b08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7ff f818 	bl	8008b4a <LL_ADC_IsDisableOngoing>
 8009b1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe ffff 	bl	8008b24 <LL_ADC_IsEnabled>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d047      	beq.n	8009bbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d144      	bne.n	8009bbc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
#else
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f003 030d 	and.w	r3, r3, #13
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d10c      	bne.n	8009b5a <ADC_Disable+0x52>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe ffd9 	bl	8008afc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2203      	movs	r2, #3
 8009b50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009b52:	f7fe fe35 	bl	80087c0 <HAL_GetTick>
 8009b56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009b58:	e029      	b.n	8009bae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5e:	f043 0210 	orr.w	r2, r3, #16
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b6a:	f043 0201 	orr.w	r2, r3, #1
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e023      	b.n	8009bbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009b76:	f7fe fe23 	bl	80087c0 <HAL_GetTick>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b02      	cmp	r3, #2
 8009b82:	d914      	bls.n	8009bae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00d      	beq.n	8009bae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b96:	f043 0210 	orr.w	r2, r3, #16
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ba2:	f043 0201 	orr.w	r2, r3, #1
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8009baa:	2301      	movs	r3, #1
 8009bac:	e007      	b.n	8009bbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	f003 0301 	and.w	r3, r3, #1
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d1dc      	bne.n	8009b76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
	...

08009bc8 <__NVIC_SetPriorityGrouping>:
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b085      	sub	sp, #20
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f003 0307 	and.w	r3, r3, #7
 8009bd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bd8:	4b0c      	ldr	r3, [pc, #48]	@ (8009c0c <__NVIC_SetPriorityGrouping+0x44>)
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009be4:	4013      	ands	r3, r2
 8009be6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bf0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009bf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009bfa:	4a04      	ldr	r2, [pc, #16]	@ (8009c0c <__NVIC_SetPriorityGrouping+0x44>)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	60d3      	str	r3, [r2, #12]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	e000ed00 	.word	0xe000ed00

08009c10 <__NVIC_GetPriorityGrouping>:
{
 8009c10:	b480      	push	{r7}
 8009c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c14:	4b04      	ldr	r3, [pc, #16]	@ (8009c28 <__NVIC_GetPriorityGrouping+0x18>)
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	0a1b      	lsrs	r3, r3, #8
 8009c1a:	f003 0307 	and.w	r3, r3, #7
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	e000ed00 	.word	0xe000ed00

08009c2c <__NVIC_EnableIRQ>:
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	4603      	mov	r3, r0
 8009c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	db0b      	blt.n	8009c56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c3e:	79fb      	ldrb	r3, [r7, #7]
 8009c40:	f003 021f 	and.w	r2, r3, #31
 8009c44:	4907      	ldr	r1, [pc, #28]	@ (8009c64 <__NVIC_EnableIRQ+0x38>)
 8009c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c4a:	095b      	lsrs	r3, r3, #5
 8009c4c:	2001      	movs	r0, #1
 8009c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8009c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c56:	bf00      	nop
 8009c58:	370c      	adds	r7, #12
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	e000e100 	.word	0xe000e100

08009c68 <__NVIC_DisableIRQ>:
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	4603      	mov	r3, r0
 8009c70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	db12      	blt.n	8009ca0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c7a:	79fb      	ldrb	r3, [r7, #7]
 8009c7c:	f003 021f 	and.w	r2, r3, #31
 8009c80:	490a      	ldr	r1, [pc, #40]	@ (8009cac <__NVIC_DisableIRQ+0x44>)
 8009c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	2001      	movs	r0, #1
 8009c8a:	fa00 f202 	lsl.w	r2, r0, r2
 8009c8e:	3320      	adds	r3, #32
 8009c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8009c94:	f3bf 8f4f 	dsb	sy
}
 8009c98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c9a:	f3bf 8f6f 	isb	sy
}
 8009c9e:	bf00      	nop
}
 8009ca0:	bf00      	nop
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	e000e100 	.word	0xe000e100

08009cb0 <__NVIC_SetPendingIRQ>:
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	db0c      	blt.n	8009cdc <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cc2:	79fb      	ldrb	r3, [r7, #7]
 8009cc4:	f003 021f 	and.w	r2, r3, #31
 8009cc8:	4907      	ldr	r1, [pc, #28]	@ (8009ce8 <__NVIC_SetPendingIRQ+0x38>)
 8009cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cce:	095b      	lsrs	r3, r3, #5
 8009cd0:	2001      	movs	r0, #1
 8009cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8009cd6:	3340      	adds	r3, #64	@ 0x40
 8009cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009cdc:	bf00      	nop
 8009cde:	370c      	adds	r7, #12
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	e000e100 	.word	0xe000e100

08009cec <__NVIC_ClearPendingIRQ>:
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	db0c      	blt.n	8009d18 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009cfe:	79fb      	ldrb	r3, [r7, #7]
 8009d00:	f003 021f 	and.w	r2, r3, #31
 8009d04:	4907      	ldr	r1, [pc, #28]	@ (8009d24 <__NVIC_ClearPendingIRQ+0x38>)
 8009d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	2001      	movs	r0, #1
 8009d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8009d12:	3360      	adds	r3, #96	@ 0x60
 8009d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr
 8009d24:	e000e100 	.word	0xe000e100

08009d28 <__NVIC_SetPriority>:
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	4603      	mov	r3, r0
 8009d30:	6039      	str	r1, [r7, #0]
 8009d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	db0a      	blt.n	8009d52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	490c      	ldr	r1, [pc, #48]	@ (8009d74 <__NVIC_SetPriority+0x4c>)
 8009d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d46:	0112      	lsls	r2, r2, #4
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	440b      	add	r3, r1
 8009d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d50:	e00a      	b.n	8009d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	4908      	ldr	r1, [pc, #32]	@ (8009d78 <__NVIC_SetPriority+0x50>)
 8009d58:	79fb      	ldrb	r3, [r7, #7]
 8009d5a:	f003 030f 	and.w	r3, r3, #15
 8009d5e:	3b04      	subs	r3, #4
 8009d60:	0112      	lsls	r2, r2, #4
 8009d62:	b2d2      	uxtb	r2, r2
 8009d64:	440b      	add	r3, r1
 8009d66:	761a      	strb	r2, [r3, #24]
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr
 8009d74:	e000e100 	.word	0xe000e100
 8009d78:	e000ed00 	.word	0xe000ed00

08009d7c <NVIC_EncodePriority>:
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b089      	sub	sp, #36	@ 0x24
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	60f8      	str	r0, [r7, #12]
 8009d84:	60b9      	str	r1, [r7, #8]
 8009d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	f1c3 0307 	rsb	r3, r3, #7
 8009d96:	2b04      	cmp	r3, #4
 8009d98:	bf28      	it	cs
 8009d9a:	2304      	movcs	r3, #4
 8009d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009d9e:	69fb      	ldr	r3, [r7, #28]
 8009da0:	3304      	adds	r3, #4
 8009da2:	2b06      	cmp	r3, #6
 8009da4:	d902      	bls.n	8009dac <NVIC_EncodePriority+0x30>
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	3b03      	subs	r3, #3
 8009daa:	e000      	b.n	8009dae <NVIC_EncodePriority+0x32>
 8009dac:	2300      	movs	r3, #0
 8009dae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009db0:	f04f 32ff 	mov.w	r2, #4294967295
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dba:	43da      	mvns	r2, r3
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	401a      	ands	r2, r3
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8009dc8:	697b      	ldr	r3, [r7, #20]
 8009dca:	fa01 f303 	lsl.w	r3, r1, r3
 8009dce:	43d9      	mvns	r1, r3
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009dd4:	4313      	orrs	r3, r2
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3724      	adds	r7, #36	@ 0x24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de0:	4770      	bx	lr
	...

08009de4 <SysTick_Config>:
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	3b01      	subs	r3, #1
 8009df0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009df4:	d301      	bcc.n	8009dfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009df6:	2301      	movs	r3, #1
 8009df8:	e00f      	b.n	8009e1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8009e24 <SysTick_Config+0x40>)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	3b01      	subs	r3, #1
 8009e00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e02:	210f      	movs	r1, #15
 8009e04:	f04f 30ff 	mov.w	r0, #4294967295
 8009e08:	f7ff ff8e 	bl	8009d28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e0c:	4b05      	ldr	r3, [pc, #20]	@ (8009e24 <SysTick_Config+0x40>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009e12:	4b04      	ldr	r3, [pc, #16]	@ (8009e24 <SysTick_Config+0x40>)
 8009e14:	2207      	movs	r2, #7
 8009e16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3708      	adds	r7, #8
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	e000e010 	.word	0xe000e010

08009e28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f7ff fec9 	bl	8009bc8 <__NVIC_SetPriorityGrouping>
}
 8009e36:	bf00      	nop
 8009e38:	3708      	adds	r7, #8
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b086      	sub	sp, #24
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	4603      	mov	r3, r0
 8009e46:	60b9      	str	r1, [r7, #8]
 8009e48:	607a      	str	r2, [r7, #4]
 8009e4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009e4c:	f7ff fee0 	bl	8009c10 <__NVIC_GetPriorityGrouping>
 8009e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	68b9      	ldr	r1, [r7, #8]
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f7ff ff90 	bl	8009d7c <NVIC_EncodePriority>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f7ff ff5f 	bl	8009d28 <__NVIC_SetPriority>
}
 8009e6a:	bf00      	nop
 8009e6c:	3718      	adds	r7, #24
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b082      	sub	sp, #8
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	4603      	mov	r3, r0
 8009e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e80:	4618      	mov	r0, r3
 8009e82:	f7ff fed3 	bl	8009c2c <__NVIC_EnableIRQ>
}
 8009e86:	bf00      	nop
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}

08009e8e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009e8e:	b580      	push	{r7, lr}
 8009e90:	b082      	sub	sp, #8
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	4603      	mov	r3, r0
 8009e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	f7ff fee3 	bl	8009c68 <__NVIC_DisableIRQ>
}
 8009ea2:	bf00      	nop
 8009ea4:	3708      	adds	r7, #8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7ff ff96 	bl	8009de4 <SysTick_Config>
 8009eb8:	4603      	mov	r3, r0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	4603      	mov	r3, r0
 8009eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8009ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7ff feed 	bl	8009cb0 <__NVIC_SetPendingIRQ>
}
 8009ed6:	bf00      	nop
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b082      	sub	sp, #8
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eec:	4618      	mov	r0, r3
 8009eee:	f7ff fefd 	bl	8009cec <__NVIC_ClearPendingIRQ>
}
 8009ef2:	bf00      	nop
 8009ef4:	3708      	adds	r7, #8
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
	...

08009efc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d101      	bne.n	8009f0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e08e      	b.n	800a02c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	461a      	mov	r2, r3
 8009f14:	4b47      	ldr	r3, [pc, #284]	@ (800a034 <HAL_DMA_Init+0x138>)
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d80f      	bhi.n	8009f3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	461a      	mov	r2, r3
 8009f20:	4b45      	ldr	r3, [pc, #276]	@ (800a038 <HAL_DMA_Init+0x13c>)
 8009f22:	4413      	add	r3, r2
 8009f24:	4a45      	ldr	r2, [pc, #276]	@ (800a03c <HAL_DMA_Init+0x140>)
 8009f26:	fba2 2303 	umull	r2, r3, r2, r3
 8009f2a:	091b      	lsrs	r3, r3, #4
 8009f2c:	009a      	lsls	r2, r3, #2
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	4a42      	ldr	r2, [pc, #264]	@ (800a040 <HAL_DMA_Init+0x144>)
 8009f36:	641a      	str	r2, [r3, #64]	@ 0x40
 8009f38:	e00e      	b.n	8009f58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	4b40      	ldr	r3, [pc, #256]	@ (800a044 <HAL_DMA_Init+0x148>)
 8009f42:	4413      	add	r3, r2
 8009f44:	4a3d      	ldr	r2, [pc, #244]	@ (800a03c <HAL_DMA_Init+0x140>)
 8009f46:	fba2 2303 	umull	r2, r3, r2, r3
 8009f4a:	091b      	lsrs	r3, r3, #4
 8009f4c:	009a      	lsls	r2, r3, #2
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	4a3c      	ldr	r2, [pc, #240]	@ (800a048 <HAL_DMA_Init+0x14c>)
 8009f56:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009f7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	691b      	ldr	r3, [r3, #16]
 8009f82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	699b      	ldr	r3, [r3, #24]
 8009f8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009f94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68fa      	ldr	r2, [r7, #12]
 8009fa8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f8fe 	bl	800a1ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009fb8:	d102      	bne.n	8009fc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685a      	ldr	r2, [r3, #4]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fc8:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009fcc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009fd6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d010      	beq.n	800a002 <HAL_DMA_Init+0x106>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	2b04      	cmp	r3, #4
 8009fe6:	d80c      	bhi.n	800a002 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 f91d 	bl	800a228 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009ffe:	605a      	str	r2, [r3, #4]
 800a000:	e008      	b.n	800a014 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2200      	movs	r2, #0
 800a00c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2200      	movs	r2, #0
 800a012:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2201      	movs	r2, #1
 800a01e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}
 800a034:	40020407 	.word	0x40020407
 800a038:	bffdfff8 	.word	0xbffdfff8
 800a03c:	cccccccd 	.word	0xcccccccd
 800a040:	40020000 	.word	0x40020000
 800a044:	bffdfbf8 	.word	0xbffdfbf8
 800a048:	40020400 	.word	0x40020400

0800a04c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a068:	f003 031c 	and.w	r3, r3, #28
 800a06c:	2204      	movs	r2, #4
 800a06e:	409a      	lsls	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	4013      	ands	r3, r2
 800a074:	2b00      	cmp	r3, #0
 800a076:	d026      	beq.n	800a0c6 <HAL_DMA_IRQHandler+0x7a>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d021      	beq.n	800a0c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0320 	and.w	r3, r3, #32
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d107      	bne.n	800a0a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f022 0204 	bic.w	r2, r2, #4
 800a09e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0a4:	f003 021c 	and.w	r2, r3, #28
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0ac:	2104      	movs	r1, #4
 800a0ae:	fa01 f202 	lsl.w	r2, r1, r2
 800a0b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d071      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a0c4:	e06c      	b.n	800a1a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ca:	f003 031c 	and.w	r3, r3, #28
 800a0ce:	2202      	movs	r2, #2
 800a0d0:	409a      	lsls	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d02e      	beq.n	800a138 <HAL_DMA_IRQHandler+0xec>
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f003 0302 	and.w	r3, r3, #2
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d029      	beq.n	800a138 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0320 	and.w	r3, r3, #32
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d10b      	bne.n	800a10a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 020a 	bic.w	r2, r2, #10
 800a100:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a10e:	f003 021c 	and.w	r2, r3, #28
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a116:	2102      	movs	r1, #2
 800a118:	fa01 f202 	lsl.w	r2, r1, r2
 800a11c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d038      	beq.n	800a1a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a136:	e033      	b.n	800a1a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a13c:	f003 031c 	and.w	r3, r3, #28
 800a140:	2208      	movs	r2, #8
 800a142:	409a      	lsls	r2, r3
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4013      	ands	r3, r2
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d02a      	beq.n	800a1a2 <HAL_DMA_IRQHandler+0x156>
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	f003 0308 	and.w	r3, r3, #8
 800a152:	2b00      	cmp	r3, #0
 800a154:	d025      	beq.n	800a1a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681a      	ldr	r2, [r3, #0]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f022 020e 	bic.w	r2, r2, #14
 800a164:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a16a:	f003 021c 	and.w	r2, r3, #28
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a172:	2101      	movs	r1, #1
 800a174:	fa01 f202 	lsl.w	r2, r1, r2
 800a178:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2201      	movs	r2, #1
 800a17e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a194:	2b00      	cmp	r3, #0
 800a196:	d004      	beq.n	800a1a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
}
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
	...

0800a1ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4b17      	ldr	r3, [pc, #92]	@ (800a218 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d80a      	bhi.n	800a1d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1c4:	089b      	lsrs	r3, r3, #2
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800a1cc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800a1d0:	687a      	ldr	r2, [r7, #4]
 800a1d2:	6493      	str	r3, [r2, #72]	@ 0x48
 800a1d4:	e007      	b.n	800a1e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a1da:	089b      	lsrs	r3, r3, #2
 800a1dc:	009a      	lsls	r2, r3, #2
 800a1de:	4b0f      	ldr	r3, [pc, #60]	@ (800a21c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800a1e0:	4413      	add	r3, r2
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	b2db      	uxtb	r3, r3
 800a1ec:	3b08      	subs	r3, #8
 800a1ee:	4a0c      	ldr	r2, [pc, #48]	@ (800a220 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800a1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a1f4:	091b      	lsrs	r3, r3, #4
 800a1f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a0a      	ldr	r2, [pc, #40]	@ (800a224 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800a1fc:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f003 031f 	and.w	r3, r3, #31
 800a204:	2201      	movs	r2, #1
 800a206:	409a      	lsls	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800a20c:	bf00      	nop
 800a20e:	3714      	adds	r7, #20
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40020407 	.word	0x40020407
 800a21c:	4002081c 	.word	0x4002081c
 800a220:	cccccccd 	.word	0xcccccccd
 800a224:	40020880 	.word	0x40020880

0800a228 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a228:	b480      	push	{r7}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a238:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	4b0b      	ldr	r3, [pc, #44]	@ (800a26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	461a      	mov	r2, r3
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a09      	ldr	r2, [pc, #36]	@ (800a270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800a24c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3b01      	subs	r3, #1
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	2201      	movs	r2, #1
 800a258:	409a      	lsls	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a25e:	bf00      	nop
 800a260:	3714      	adds	r7, #20
 800a262:	46bd      	mov	sp, r7
 800a264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	1000823f 	.word	0x1000823f
 800a270:	40020940 	.word	0x40020940

0800a274 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a282:	e14c      	b.n	800a51e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	2101      	movs	r1, #1
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	fa01 f303 	lsl.w	r3, r1, r3
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	2b00      	cmp	r3, #0
 800a298:	f000 813e 	beq.w	800a518 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	f003 0303 	and.w	r3, r3, #3
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d005      	beq.n	800a2b4 <HAL_GPIO_Init+0x40>
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	685b      	ldr	r3, [r3, #4]
 800a2ac:	f003 0303 	and.w	r3, r3, #3
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d130      	bne.n	800a316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	689b      	ldr	r3, [r3, #8]
 800a2b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	005b      	lsls	r3, r3, #1
 800a2be:	2203      	movs	r2, #3
 800a2c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2c4:	43db      	mvns	r3, r3
 800a2c6:	693a      	ldr	r2, [r7, #16]
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a2cc:	683b      	ldr	r3, [r7, #0]
 800a2ce:	68da      	ldr	r2, [r3, #12]
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	005b      	lsls	r3, r3, #1
 800a2d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d8:	693a      	ldr	r2, [r7, #16]
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a2f2:	43db      	mvns	r3, r3
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	4013      	ands	r3, r2
 800a2f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685b      	ldr	r3, [r3, #4]
 800a2fe:	091b      	lsrs	r3, r3, #4
 800a300:	f003 0201 	and.w	r2, r3, #1
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	fa02 f303 	lsl.w	r3, r2, r3
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	4313      	orrs	r3, r2
 800a30e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	693a      	ldr	r2, [r7, #16]
 800a314:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a316:	683b      	ldr	r3, [r7, #0]
 800a318:	685b      	ldr	r3, [r3, #4]
 800a31a:	f003 0303 	and.w	r3, r3, #3
 800a31e:	2b03      	cmp	r3, #3
 800a320:	d017      	beq.n	800a352 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	005b      	lsls	r3, r3, #1
 800a32c:	2203      	movs	r2, #3
 800a32e:	fa02 f303 	lsl.w	r3, r2, r3
 800a332:	43db      	mvns	r3, r3
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	4013      	ands	r3, r2
 800a338:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	689a      	ldr	r2, [r3, #8]
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	005b      	lsls	r3, r3, #1
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d123      	bne.n	800a3a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	08da      	lsrs	r2, r3, #3
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	3208      	adds	r2, #8
 800a366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	f003 0307 	and.w	r3, r3, #7
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	220f      	movs	r2, #15
 800a376:	fa02 f303 	lsl.w	r3, r2, r3
 800a37a:	43db      	mvns	r3, r3
 800a37c:	693a      	ldr	r2, [r7, #16]
 800a37e:	4013      	ands	r3, r2
 800a380:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	691a      	ldr	r2, [r3, #16]
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f003 0307 	and.w	r3, r3, #7
 800a38c:	009b      	lsls	r3, r3, #2
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	693a      	ldr	r2, [r7, #16]
 800a394:	4313      	orrs	r3, r2
 800a396:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	08da      	lsrs	r2, r3, #3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3208      	adds	r2, #8
 800a3a0:	6939      	ldr	r1, [r7, #16]
 800a3a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	005b      	lsls	r3, r3, #1
 800a3b0:	2203      	movs	r2, #3
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	f003 0203 	and.w	r2, r3, #3
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	005b      	lsls	r3, r3, #1
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 8098 	beq.w	800a518 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800a3e8:	4a54      	ldr	r2, [pc, #336]	@ (800a53c <HAL_GPIO_Init+0x2c8>)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	089b      	lsrs	r3, r3, #2
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	f003 0303 	and.w	r3, r3, #3
 800a3fc:	009b      	lsls	r3, r3, #2
 800a3fe:	220f      	movs	r2, #15
 800a400:	fa02 f303 	lsl.w	r3, r2, r3
 800a404:	43db      	mvns	r3, r3
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	4013      	ands	r3, r2
 800a40a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a412:	d019      	beq.n	800a448 <HAL_GPIO_Init+0x1d4>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	4a4a      	ldr	r2, [pc, #296]	@ (800a540 <HAL_GPIO_Init+0x2cc>)
 800a418:	4293      	cmp	r3, r2
 800a41a:	d013      	beq.n	800a444 <HAL_GPIO_Init+0x1d0>
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	4a49      	ldr	r2, [pc, #292]	@ (800a544 <HAL_GPIO_Init+0x2d0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00d      	beq.n	800a440 <HAL_GPIO_Init+0x1cc>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	4a48      	ldr	r2, [pc, #288]	@ (800a548 <HAL_GPIO_Init+0x2d4>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d007      	beq.n	800a43c <HAL_GPIO_Init+0x1c8>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	4a47      	ldr	r2, [pc, #284]	@ (800a54c <HAL_GPIO_Init+0x2d8>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d101      	bne.n	800a438 <HAL_GPIO_Init+0x1c4>
 800a434:	2304      	movs	r3, #4
 800a436:	e008      	b.n	800a44a <HAL_GPIO_Init+0x1d6>
 800a438:	2307      	movs	r3, #7
 800a43a:	e006      	b.n	800a44a <HAL_GPIO_Init+0x1d6>
 800a43c:	2303      	movs	r3, #3
 800a43e:	e004      	b.n	800a44a <HAL_GPIO_Init+0x1d6>
 800a440:	2302      	movs	r3, #2
 800a442:	e002      	b.n	800a44a <HAL_GPIO_Init+0x1d6>
 800a444:	2301      	movs	r3, #1
 800a446:	e000      	b.n	800a44a <HAL_GPIO_Init+0x1d6>
 800a448:	2300      	movs	r3, #0
 800a44a:	697a      	ldr	r2, [r7, #20]
 800a44c:	f002 0203 	and.w	r2, r2, #3
 800a450:	0092      	lsls	r2, r2, #2
 800a452:	4093      	lsls	r3, r2
 800a454:	693a      	ldr	r2, [r7, #16]
 800a456:	4313      	orrs	r3, r2
 800a458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a45a:	4938      	ldr	r1, [pc, #224]	@ (800a53c <HAL_GPIO_Init+0x2c8>)
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	089b      	lsrs	r3, r3, #2
 800a460:	3302      	adds	r3, #2
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a468:	4b39      	ldr	r3, [pc, #228]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	43db      	mvns	r3, r3
 800a472:	693a      	ldr	r2, [r7, #16]
 800a474:	4013      	ands	r3, r2
 800a476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a480:	2b00      	cmp	r3, #0
 800a482:	d003      	beq.n	800a48c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a484:	693a      	ldr	r2, [r7, #16]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	4313      	orrs	r3, r2
 800a48a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a48c:	4a30      	ldr	r2, [pc, #192]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a492:	4b2f      	ldr	r3, [pc, #188]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	43db      	mvns	r3, r3
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	4013      	ands	r3, r2
 800a4a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d003      	beq.n	800a4b6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a4b6:	4a26      	ldr	r2, [pc, #152]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a4bc:	4b24      	ldr	r3, [pc, #144]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a4be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a4c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	43db      	mvns	r3, r3
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	4013      	ands	r3, r2
 800a4cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685b      	ldr	r3, [r3, #4]
 800a4d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d003      	beq.n	800a4e2 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800a4da:	693a      	ldr	r2, [r7, #16]
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a4e2:	4a1b      	ldr	r2, [pc, #108]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800a4ea:	4b19      	ldr	r3, [pc, #100]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a4ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a4f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	43db      	mvns	r3, r3
 800a4f6:	693a      	ldr	r2, [r7, #16]
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d003      	beq.n	800a510 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a510:	4a0f      	ldr	r2, [pc, #60]	@ (800a550 <HAL_GPIO_Init+0x2dc>)
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	3301      	adds	r3, #1
 800a51c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	f47f aeab 	bne.w	800a284 <HAL_GPIO_Init+0x10>
  }
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	371c      	adds	r7, #28
 800a534:	46bd      	mov	sp, r7
 800a536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53a:	4770      	bx	lr
 800a53c:	40010000 	.word	0x40010000
 800a540:	48000400 	.word	0x48000400
 800a544:	48000800 	.word	0x48000800
 800a548:	48000c00 	.word	0x48000c00
 800a54c:	48001000 	.word	0x48001000
 800a550:	58000800 	.word	0x58000800

0800a554 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a55e:	2300      	movs	r3, #0
 800a560:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800a562:	e0bb      	b.n	800a6dc <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800a564:	2201      	movs	r2, #1
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	fa02 f303 	lsl.w	r3, r2, r3
 800a56c:	683a      	ldr	r2, [r7, #0]
 800a56e:	4013      	ands	r3, r2
 800a570:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	f000 80ae 	beq.w	800a6d6 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800a57a:	4a5f      	ldr	r2, [pc, #380]	@ (800a6f8 <HAL_GPIO_DeInit+0x1a4>)
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	089b      	lsrs	r3, r3, #2
 800a580:	3302      	adds	r3, #2
 800a582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a586:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	f003 0303 	and.w	r3, r3, #3
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	220f      	movs	r2, #15
 800a592:	fa02 f303 	lsl.w	r3, r2, r3
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4013      	ands	r3, r2
 800a59a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a5a2:	d019      	beq.n	800a5d8 <HAL_GPIO_DeInit+0x84>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	4a55      	ldr	r2, [pc, #340]	@ (800a6fc <HAL_GPIO_DeInit+0x1a8>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d013      	beq.n	800a5d4 <HAL_GPIO_DeInit+0x80>
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	4a54      	ldr	r2, [pc, #336]	@ (800a700 <HAL_GPIO_DeInit+0x1ac>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d00d      	beq.n	800a5d0 <HAL_GPIO_DeInit+0x7c>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	4a53      	ldr	r2, [pc, #332]	@ (800a704 <HAL_GPIO_DeInit+0x1b0>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d007      	beq.n	800a5cc <HAL_GPIO_DeInit+0x78>
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	4a52      	ldr	r2, [pc, #328]	@ (800a708 <HAL_GPIO_DeInit+0x1b4>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d101      	bne.n	800a5c8 <HAL_GPIO_DeInit+0x74>
 800a5c4:	2304      	movs	r3, #4
 800a5c6:	e008      	b.n	800a5da <HAL_GPIO_DeInit+0x86>
 800a5c8:	2307      	movs	r3, #7
 800a5ca:	e006      	b.n	800a5da <HAL_GPIO_DeInit+0x86>
 800a5cc:	2303      	movs	r3, #3
 800a5ce:	e004      	b.n	800a5da <HAL_GPIO_DeInit+0x86>
 800a5d0:	2302      	movs	r3, #2
 800a5d2:	e002      	b.n	800a5da <HAL_GPIO_DeInit+0x86>
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	e000      	b.n	800a5da <HAL_GPIO_DeInit+0x86>
 800a5d8:	2300      	movs	r3, #0
 800a5da:	697a      	ldr	r2, [r7, #20]
 800a5dc:	f002 0203 	and.w	r2, r2, #3
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	4093      	lsls	r3, r2
 800a5e4:	68fa      	ldr	r2, [r7, #12]
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d136      	bne.n	800a658 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a5ea:	4b48      	ldr	r3, [pc, #288]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a5ec:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	43db      	mvns	r3, r3
 800a5f4:	4945      	ldr	r1, [pc, #276]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800a5fc:	4b43      	ldr	r3, [pc, #268]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a5fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	43db      	mvns	r3, r3
 800a606:	4941      	ldr	r1, [pc, #260]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a608:	4013      	ands	r3, r2
 800a60a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800a60e:	4b3f      	ldr	r3, [pc, #252]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	43db      	mvns	r3, r3
 800a616:	493d      	ldr	r1, [pc, #244]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a618:	4013      	ands	r3, r2
 800a61a:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800a61c:	4b3b      	ldr	r3, [pc, #236]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a61e:	685a      	ldr	r2, [r3, #4]
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	43db      	mvns	r3, r3
 800a624:	4939      	ldr	r1, [pc, #228]	@ (800a70c <HAL_GPIO_DeInit+0x1b8>)
 800a626:	4013      	ands	r3, r2
 800a628:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f003 0303 	and.w	r3, r3, #3
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	220f      	movs	r2, #15
 800a634:	fa02 f303 	lsl.w	r3, r2, r3
 800a638:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800a63a:	4a2f      	ldr	r2, [pc, #188]	@ (800a6f8 <HAL_GPIO_DeInit+0x1a4>)
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	089b      	lsrs	r3, r3, #2
 800a640:	3302      	adds	r3, #2
 800a642:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	43da      	mvns	r2, r3
 800a64a:	482b      	ldr	r0, [pc, #172]	@ (800a6f8 <HAL_GPIO_DeInit+0x1a4>)
 800a64c:	697b      	ldr	r3, [r7, #20]
 800a64e:	089b      	lsrs	r3, r3, #2
 800a650:	400a      	ands	r2, r1
 800a652:	3302      	adds	r3, #2
 800a654:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	697b      	ldr	r3, [r7, #20]
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	2103      	movs	r1, #3
 800a662:	fa01 f303 	lsl.w	r3, r1, r3
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	08da      	lsrs	r2, r3, #3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	3208      	adds	r2, #8
 800a674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	009b      	lsls	r3, r3, #2
 800a680:	220f      	movs	r2, #15
 800a682:	fa02 f303 	lsl.w	r3, r2, r3
 800a686:	43db      	mvns	r3, r3
 800a688:	697a      	ldr	r2, [r7, #20]
 800a68a:	08d2      	lsrs	r2, r2, #3
 800a68c:	4019      	ands	r1, r3
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	3208      	adds	r2, #8
 800a692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68da      	ldr	r2, [r3, #12]
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	005b      	lsls	r3, r3, #1
 800a69e:	2103      	movs	r1, #3
 800a6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6a4:	43db      	mvns	r3, r3
 800a6a6:	401a      	ands	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	685a      	ldr	r2, [r3, #4]
 800a6b0:	2101      	movs	r1, #1
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	401a      	ands	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	689a      	ldr	r2, [r3, #8]
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	005b      	lsls	r3, r3, #1
 800a6c8:	2103      	movs	r1, #3
 800a6ca:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ce:	43db      	mvns	r3, r3
 800a6d0:	401a      	ands	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a6d6:	697b      	ldr	r3, [r7, #20]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f47f af3d 	bne.w	800a564 <HAL_GPIO_DeInit+0x10>
  }
}
 800a6ea:	bf00      	nop
 800a6ec:	bf00      	nop
 800a6ee:	371c      	adds	r7, #28
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	40010000 	.word	0x40010000
 800a6fc:	48000400 	.word	0x48000400
 800a700:	48000800 	.word	0x48000800
 800a704:	48000c00 	.word	0x48000c00
 800a708:	48001000 	.word	0x48001000
 800a70c:	58000800 	.word	0x58000800

0800a710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	807b      	strh	r3, [r7, #2]
 800a71c:	4613      	mov	r3, r2
 800a71e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a720:	787b      	ldrb	r3, [r7, #1]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d003      	beq.n	800a72e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a726:	887a      	ldrh	r2, [r7, #2]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a72c:	e002      	b.n	800a734 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a72e:	887a      	ldrh	r2, [r7, #2]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a734:	bf00      	nop
 800a736:	370c      	adds	r7, #12
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr

0800a740 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800a746:	4b0a      	ldr	r3, [pc, #40]	@ (800a770 <HAL_HSEM_IRQHandler+0x30>)
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800a74c:	4b08      	ldr	r3, [pc, #32]	@ (800a770 <HAL_HSEM_IRQHandler+0x30>)
 800a74e:	681a      	ldr	r2, [r3, #0]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	43db      	mvns	r3, r3
 800a754:	4906      	ldr	r1, [pc, #24]	@ (800a770 <HAL_HSEM_IRQHandler+0x30>)
 800a756:	4013      	ands	r3, r2
 800a758:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800a75a:	4a05      	ldr	r2, [pc, #20]	@ (800a770 <HAL_HSEM_IRQHandler+0x30>)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f807 	bl	800a774 <HAL_HSEM_FreeCallback>
}
 800a766:	bf00      	nop
 800a768:	3708      	adds	r7, #8
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	58001500 	.word	0x58001500

0800a774 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800a774:	b480      	push	{r7}
 800a776:	b083      	sub	sp, #12
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800a77c:	bf00      	nop
 800a77e:	370c      	adds	r7, #12
 800a780:	46bd      	mov	sp, r7
 800a782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a786:	4770      	bx	lr

0800a788 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b082      	sub	sp, #8
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e08d      	b.n	800a8b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d106      	bne.n	800a7b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	f000 f8b4 	bl	800a91c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2224      	movs	r2, #36	@ 0x24
 800a7b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	681a      	ldr	r2, [r3, #0]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0201 	bic.w	r2, r2, #1
 800a7ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685a      	ldr	r2, [r3, #4]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a7d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	2b01      	cmp	r3, #1
 800a7f0:	d107      	bne.n	800a802 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	689a      	ldr	r2, [r3, #8]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a7fe:	609a      	str	r2, [r3, #8]
 800a800:	e006      	b.n	800a810 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a80e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	68db      	ldr	r3, [r3, #12]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d108      	bne.n	800a82a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685a      	ldr	r2, [r3, #4]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a826:	605a      	str	r2, [r3, #4]
 800a828:	e007      	b.n	800a83a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	685a      	ldr	r2, [r3, #4]
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a838:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	6812      	ldr	r2, [r2, #0]
 800a844:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a84c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	68da      	ldr	r2, [r3, #12]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a85c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691a      	ldr	r2, [r3, #16]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	695b      	ldr	r3, [r3, #20]
 800a866:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	699b      	ldr	r3, [r3, #24]
 800a86e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	69d9      	ldr	r1, [r3, #28]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	6a1a      	ldr	r2, [r3, #32]
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	430a      	orrs	r2, r1
 800a886:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f042 0201 	orr.w	r2, r2, #1
 800a896:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2200      	movs	r2, #0
 800a89c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2220      	movs	r2, #32
 800a8a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a8b4:	2300      	movs	r3, #0
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3708      	adds	r7, #8
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e021      	b.n	800a914 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2224      	movs	r2, #36	@ 0x24
 800a8d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f022 0201 	bic.w	r2, r2, #1
 800a8e6:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f821 	bl	800a930 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2200      	movs	r2, #0
 800a906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a912:	2300      	movs	r3, #0
}
 800a914:	4618      	mov	r0, r3
 800a916:	3708      	adds	r7, #8
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b083      	sub	sp, #12
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a924:	bf00      	nop
 800a926:	370c      	adds	r7, #12
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr

0800a930 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a930:	b480      	push	{r7}
 800a932:	b083      	sub	sp, #12
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a938:	bf00      	nop
 800a93a:	370c      	adds	r7, #12
 800a93c:	46bd      	mov	sp, r7
 800a93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a942:	4770      	bx	lr

0800a944 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b088      	sub	sp, #32
 800a948:	af02      	add	r7, sp, #8
 800a94a:	60f8      	str	r0, [r7, #12]
 800a94c:	4608      	mov	r0, r1
 800a94e:	4611      	mov	r1, r2
 800a950:	461a      	mov	r2, r3
 800a952:	4603      	mov	r3, r0
 800a954:	817b      	strh	r3, [r7, #10]
 800a956:	460b      	mov	r3, r1
 800a958:	813b      	strh	r3, [r7, #8]
 800a95a:	4613      	mov	r3, r2
 800a95c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a964:	b2db      	uxtb	r3, r3
 800a966:	2b20      	cmp	r3, #32
 800a968:	f040 80f9 	bne.w	800ab5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d002      	beq.n	800a978 <HAL_I2C_Mem_Write+0x34>
 800a972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a974:	2b00      	cmp	r3, #0
 800a976:	d105      	bne.n	800a984 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a97e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e0ed      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d101      	bne.n	800a992 <HAL_I2C_Mem_Write+0x4e>
 800a98e:	2302      	movs	r3, #2
 800a990:	e0e6      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2201      	movs	r2, #1
 800a996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a99a:	f7fd ff11 	bl	80087c0 <HAL_GetTick>
 800a99e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	9300      	str	r3, [sp, #0]
 800a9a4:	2319      	movs	r3, #25
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a9ac:	68f8      	ldr	r0, [r7, #12]
 800a9ae:	f000 fadd 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d001      	beq.n	800a9bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e0d1      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2221      	movs	r2, #33	@ 0x21
 800a9c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2240      	movs	r2, #64	@ 0x40
 800a9c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	6a3a      	ldr	r2, [r7, #32]
 800a9d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9e4:	88f8      	ldrh	r0, [r7, #6]
 800a9e6:	893a      	ldrh	r2, [r7, #8]
 800a9e8:	8979      	ldrh	r1, [r7, #10]
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 f9ed 	bl	800add4 <I2C_RequestMemoryWrite>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	e0a9      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	2bff      	cmp	r3, #255	@ 0xff
 800aa14:	d90e      	bls.n	800aa34 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	22ff      	movs	r2, #255	@ 0xff
 800aa1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa20:	b2da      	uxtb	r2, r3
 800aa22:	8979      	ldrh	r1, [r7, #10]
 800aa24:	2300      	movs	r3, #0
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 fc61 	bl	800b2f4 <I2C_TransferConfig>
 800aa32:	e00f      	b.n	800aa54 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa38:	b29a      	uxth	r2, r3
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa42:	b2da      	uxtb	r2, r3
 800aa44:	8979      	ldrh	r1, [r7, #10]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f000 fc50 	bl	800b2f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa54:	697a      	ldr	r2, [r7, #20]
 800aa56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 fae0 	bl	800b01e <I2C_WaitOnTXISFlagUntilTimeout>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d001      	beq.n	800aa68 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	e07b      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa6c:	781a      	ldrb	r2, [r3, #0]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	3b01      	subs	r3, #1
 800aa86:	b29a      	uxth	r2, r3
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa90:	3b01      	subs	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d034      	beq.n	800ab0c <HAL_I2C_Mem_Write+0x1c8>
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d130      	bne.n	800ab0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	9300      	str	r3, [sp, #0]
 800aaae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab0:	2200      	movs	r2, #0
 800aab2:	2180      	movs	r1, #128	@ 0x80
 800aab4:	68f8      	ldr	r0, [r7, #12]
 800aab6:	f000 fa59 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800aaba:	4603      	mov	r3, r0
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d001      	beq.n	800aac4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e04d      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2bff      	cmp	r3, #255	@ 0xff
 800aacc:	d90e      	bls.n	800aaec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	22ff      	movs	r2, #255	@ 0xff
 800aad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad8:	b2da      	uxtb	r2, r3
 800aada:	8979      	ldrh	r1, [r7, #10]
 800aadc:	2300      	movs	r3, #0
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fc05 	bl	800b2f4 <I2C_TransferConfig>
 800aaea:	e00f      	b.n	800ab0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafa:	b2da      	uxtb	r2, r3
 800aafc:	8979      	ldrh	r1, [r7, #10]
 800aafe:	2300      	movs	r3, #0
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 fbf4 	bl	800b2f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d19e      	bne.n	800aa54 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab16:	697a      	ldr	r2, [r7, #20]
 800ab18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	f000 fac6 	bl	800b0ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab20:	4603      	mov	r3, r0
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d001      	beq.n	800ab2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ab26:	2301      	movs	r3, #1
 800ab28:	e01a      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2220      	movs	r2, #32
 800ab30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	6859      	ldr	r1, [r3, #4]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	4b0a      	ldr	r3, [pc, #40]	@ (800ab68 <HAL_I2C_Mem_Write+0x224>)
 800ab3e:	400b      	ands	r3, r1
 800ab40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2220      	movs	r2, #32
 800ab46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2200      	movs	r2, #0
 800ab56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	e000      	b.n	800ab60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ab5e:	2302      	movs	r3, #2
  }
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3718      	adds	r7, #24
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	fe00e800 	.word	0xfe00e800

0800ab6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af02      	add	r7, sp, #8
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	4608      	mov	r0, r1
 800ab76:	4611      	mov	r1, r2
 800ab78:	461a      	mov	r2, r3
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	817b      	strh	r3, [r7, #10]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	813b      	strh	r3, [r7, #8]
 800ab82:	4613      	mov	r3, r2
 800ab84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b20      	cmp	r3, #32
 800ab90:	f040 80fd 	bne.w	800ad8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab94:	6a3b      	ldr	r3, [r7, #32]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d002      	beq.n	800aba0 <HAL_I2C_Mem_Read+0x34>
 800ab9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d105      	bne.n	800abac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aba6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e0f1      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abb2:	2b01      	cmp	r3, #1
 800abb4:	d101      	bne.n	800abba <HAL_I2C_Mem_Read+0x4e>
 800abb6:	2302      	movs	r3, #2
 800abb8:	e0ea      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abc2:	f7fd fdfd 	bl	80087c0 <HAL_GetTick>
 800abc6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	2319      	movs	r3, #25
 800abce:	2201      	movs	r2, #1
 800abd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f9c9 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800abda:	4603      	mov	r3, r0
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d001      	beq.n	800abe4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800abe0:	2301      	movs	r3, #1
 800abe2:	e0d5      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2222      	movs	r2, #34	@ 0x22
 800abe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2240      	movs	r2, #64	@ 0x40
 800abf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2200      	movs	r2, #0
 800abf8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6a3a      	ldr	r2, [r7, #32]
 800abfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ac04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac0c:	88f8      	ldrh	r0, [r7, #6]
 800ac0e:	893a      	ldrh	r2, [r7, #8]
 800ac10:	8979      	ldrh	r1, [r7, #10]
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f000 f92d 	bl	800ae7c <I2C_RequestMemoryRead>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d005      	beq.n	800ac34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	e0ad      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	2bff      	cmp	r3, #255	@ 0xff
 800ac3c:	d90e      	bls.n	800ac5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	22ff      	movs	r2, #255	@ 0xff
 800ac42:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac48:	b2da      	uxtb	r2, r3
 800ac4a:	8979      	ldrh	r1, [r7, #10]
 800ac4c:	4b52      	ldr	r3, [pc, #328]	@ (800ad98 <HAL_I2C_Mem_Read+0x22c>)
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac54:	68f8      	ldr	r0, [r7, #12]
 800ac56:	f000 fb4d 	bl	800b2f4 <I2C_TransferConfig>
 800ac5a:	e00f      	b.n	800ac7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac60:	b29a      	uxth	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac6a:	b2da      	uxtb	r2, r3
 800ac6c:	8979      	ldrh	r1, [r7, #10]
 800ac6e:	4b4a      	ldr	r3, [pc, #296]	@ (800ad98 <HAL_I2C_Mem_Read+0x22c>)
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fb3c 	bl	800b2f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	9300      	str	r3, [sp, #0]
 800ac80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac82:	2200      	movs	r2, #0
 800ac84:	2104      	movs	r1, #4
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f000 f970 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e07c      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca0:	b2d2      	uxtb	r2, r2
 800aca2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca8:	1c5a      	adds	r2, r3, #1
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acb2:	3b01      	subs	r3, #1
 800acb4:	b29a      	uxth	r2, r3
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	3b01      	subs	r3, #1
 800acc2:	b29a      	uxth	r2, r3
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800accc:	b29b      	uxth	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d034      	beq.n	800ad3c <HAL_I2C_Mem_Read+0x1d0>
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d130      	bne.n	800ad3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	9300      	str	r3, [sp, #0]
 800acde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace0:	2200      	movs	r2, #0
 800ace2:	2180      	movs	r1, #128	@ 0x80
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	f000 f941 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800acea:	4603      	mov	r3, r0
 800acec:	2b00      	cmp	r3, #0
 800acee:	d001      	beq.n	800acf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e04d      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	2bff      	cmp	r3, #255	@ 0xff
 800acfc:	d90e      	bls.n	800ad1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	22ff      	movs	r2, #255	@ 0xff
 800ad02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad08:	b2da      	uxtb	r2, r3
 800ad0a:	8979      	ldrh	r1, [r7, #10]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 faed 	bl	800b2f4 <I2C_TransferConfig>
 800ad1a:	e00f      	b.n	800ad3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad2a:	b2da      	uxtb	r2, r3
 800ad2c:	8979      	ldrh	r1, [r7, #10]
 800ad2e:	2300      	movs	r3, #0
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f000 fadc 	bl	800b2f4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d19a      	bne.n	800ac7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad46:	697a      	ldr	r2, [r7, #20]
 800ad48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 f9ae 	bl	800b0ac <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e01a      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2220      	movs	r2, #32
 800ad60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	6859      	ldr	r1, [r3, #4]
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad9c <HAL_I2C_Mem_Read+0x230>)
 800ad6e:	400b      	ands	r3, r1
 800ad70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2220      	movs	r2, #32
 800ad76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2200      	movs	r2, #0
 800ad86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	e000      	b.n	800ad90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ad8e:	2302      	movs	r3, #2
  }
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3718      	adds	r7, #24
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	80002400 	.word	0x80002400
 800ad9c:	fe00e800 	.word	0xfe00e800

0800ada0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b083      	sub	sp, #12
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800adae:	b2db      	uxtb	r3, r3
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800adc8:	4618      	mov	r0, r3
 800adca:	370c      	adds	r7, #12
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af02      	add	r7, sp, #8
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	4608      	mov	r0, r1
 800adde:	4611      	mov	r1, r2
 800ade0:	461a      	mov	r2, r3
 800ade2:	4603      	mov	r3, r0
 800ade4:	817b      	strh	r3, [r7, #10]
 800ade6:	460b      	mov	r3, r1
 800ade8:	813b      	strh	r3, [r7, #8]
 800adea:	4613      	mov	r3, r2
 800adec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800adee:	88fb      	ldrh	r3, [r7, #6]
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	8979      	ldrh	r1, [r7, #10]
 800adf4:	4b20      	ldr	r3, [pc, #128]	@ (800ae78 <I2C_RequestMemoryWrite+0xa4>)
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 fa79 	bl	800b2f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae02:	69fa      	ldr	r2, [r7, #28]
 800ae04:	69b9      	ldr	r1, [r7, #24]
 800ae06:	68f8      	ldr	r0, [r7, #12]
 800ae08:	f000 f909 	bl	800b01e <I2C_WaitOnTXISFlagUntilTimeout>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d001      	beq.n	800ae16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ae12:	2301      	movs	r3, #1
 800ae14:	e02c      	b.n	800ae70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae16:	88fb      	ldrh	r3, [r7, #6]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d105      	bne.n	800ae28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae1c:	893b      	ldrh	r3, [r7, #8]
 800ae1e:	b2da      	uxtb	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae26:	e015      	b.n	800ae54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae28:	893b      	ldrh	r3, [r7, #8]
 800ae2a:	0a1b      	lsrs	r3, r3, #8
 800ae2c:	b29b      	uxth	r3, r3
 800ae2e:	b2da      	uxtb	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae36:	69fa      	ldr	r2, [r7, #28]
 800ae38:	69b9      	ldr	r1, [r7, #24]
 800ae3a:	68f8      	ldr	r0, [r7, #12]
 800ae3c:	f000 f8ef 	bl	800b01e <I2C_WaitOnTXISFlagUntilTimeout>
 800ae40:	4603      	mov	r3, r0
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e012      	b.n	800ae70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae4a:	893b      	ldrh	r3, [r7, #8]
 800ae4c:	b2da      	uxtb	r2, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	2180      	movs	r1, #128	@ 0x80
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f000 f884 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800ae64:	4603      	mov	r3, r0
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	e000      	b.n	800ae70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae6e:	2300      	movs	r3, #0
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	80002000 	.word	0x80002000

0800ae7c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b086      	sub	sp, #24
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	4608      	mov	r0, r1
 800ae86:	4611      	mov	r1, r2
 800ae88:	461a      	mov	r2, r3
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	817b      	strh	r3, [r7, #10]
 800ae8e:	460b      	mov	r3, r1
 800ae90:	813b      	strh	r3, [r7, #8]
 800ae92:	4613      	mov	r3, r2
 800ae94:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae96:	88fb      	ldrh	r3, [r7, #6]
 800ae98:	b2da      	uxtb	r2, r3
 800ae9a:	8979      	ldrh	r1, [r7, #10]
 800ae9c:	4b20      	ldr	r3, [pc, #128]	@ (800af20 <I2C_RequestMemoryRead+0xa4>)
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	2300      	movs	r3, #0
 800aea2:	68f8      	ldr	r0, [r7, #12]
 800aea4:	f000 fa26 	bl	800b2f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aea8:	69fa      	ldr	r2, [r7, #28]
 800aeaa:	69b9      	ldr	r1, [r7, #24]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f000 f8b6 	bl	800b01e <I2C_WaitOnTXISFlagUntilTimeout>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e02c      	b.n	800af16 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aebc:	88fb      	ldrh	r3, [r7, #6]
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d105      	bne.n	800aece <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aec2:	893b      	ldrh	r3, [r7, #8]
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	629a      	str	r2, [r3, #40]	@ 0x28
 800aecc:	e015      	b.n	800aefa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aece:	893b      	ldrh	r3, [r7, #8]
 800aed0:	0a1b      	lsrs	r3, r3, #8
 800aed2:	b29b      	uxth	r3, r3
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aedc:	69fa      	ldr	r2, [r7, #28]
 800aede:	69b9      	ldr	r1, [r7, #24]
 800aee0:	68f8      	ldr	r0, [r7, #12]
 800aee2:	f000 f89c 	bl	800b01e <I2C_WaitOnTXISFlagUntilTimeout>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d001      	beq.n	800aef0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aeec:	2301      	movs	r3, #1
 800aeee:	e012      	b.n	800af16 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aef0:	893b      	ldrh	r3, [r7, #8]
 800aef2:	b2da      	uxtb	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	9300      	str	r3, [sp, #0]
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	2200      	movs	r2, #0
 800af02:	2140      	movs	r1, #64	@ 0x40
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 f831 	bl	800af6c <I2C_WaitOnFlagUntilTimeout>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	e000      	b.n	800af16 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop
 800af20:	80002000 	.word	0x80002000

0800af24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	699b      	ldr	r3, [r3, #24]
 800af32:	f003 0302 	and.w	r3, r3, #2
 800af36:	2b02      	cmp	r3, #2
 800af38:	d103      	bne.n	800af42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2200      	movs	r2, #0
 800af40:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	f003 0301 	and.w	r3, r3, #1
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d007      	beq.n	800af60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	699a      	ldr	r2, [r3, #24]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	f042 0201 	orr.w	r2, r2, #1
 800af5e:	619a      	str	r2, [r3, #24]
  }
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b084      	sub	sp, #16
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	603b      	str	r3, [r7, #0]
 800af78:	4613      	mov	r3, r2
 800af7a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af7c:	e03b      	b.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af7e:	69ba      	ldr	r2, [r7, #24]
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	68f8      	ldr	r0, [r7, #12]
 800af84:	f000 f8d6 	bl	800b134 <I2C_IsErrorOccurred>
 800af88:	4603      	mov	r3, r0
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d001      	beq.n	800af92 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800af8e:	2301      	movs	r3, #1
 800af90:	e041      	b.n	800b016 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af98:	d02d      	beq.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af9a:	f7fd fc11 	bl	80087c0 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	69bb      	ldr	r3, [r7, #24]
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	683a      	ldr	r2, [r7, #0]
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d302      	bcc.n	800afb0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d122      	bne.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	699a      	ldr	r2, [r3, #24]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4013      	ands	r3, r2
 800afba:	68ba      	ldr	r2, [r7, #8]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	bf0c      	ite	eq
 800afc0:	2301      	moveq	r3, #1
 800afc2:	2300      	movne	r3, #0
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	461a      	mov	r2, r3
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d113      	bne.n	800aff6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afd2:	f043 0220 	orr.w	r2, r3, #32
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2220      	movs	r2, #32
 800afde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	2200      	movs	r2, #0
 800afee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800aff2:	2301      	movs	r3, #1
 800aff4:	e00f      	b.n	800b016 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	699a      	ldr	r2, [r3, #24]
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	4013      	ands	r3, r2
 800b000:	68ba      	ldr	r2, [r7, #8]
 800b002:	429a      	cmp	r2, r3
 800b004:	bf0c      	ite	eq
 800b006:	2301      	moveq	r3, #1
 800b008:	2300      	movne	r3, #0
 800b00a:	b2db      	uxtb	r3, r3
 800b00c:	461a      	mov	r2, r3
 800b00e:	79fb      	ldrb	r3, [r7, #7]
 800b010:	429a      	cmp	r2, r3
 800b012:	d0b4      	beq.n	800af7e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b014:	2300      	movs	r3, #0
}
 800b016:	4618      	mov	r0, r3
 800b018:	3710      	adds	r7, #16
 800b01a:	46bd      	mov	sp, r7
 800b01c:	bd80      	pop	{r7, pc}

0800b01e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b01e:	b580      	push	{r7, lr}
 800b020:	b084      	sub	sp, #16
 800b022:	af00      	add	r7, sp, #0
 800b024:	60f8      	str	r0, [r7, #12]
 800b026:	60b9      	str	r1, [r7, #8]
 800b028:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b02a:	e033      	b.n	800b094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	f000 f87f 	bl	800b134 <I2C_IsErrorOccurred>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d001      	beq.n	800b040 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b03c:	2301      	movs	r3, #1
 800b03e:	e031      	b.n	800b0a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b046:	d025      	beq.n	800b094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b048:	f7fd fbba 	bl	80087c0 <HAL_GetTick>
 800b04c:	4602      	mov	r2, r0
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	1ad3      	subs	r3, r2, r3
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	429a      	cmp	r2, r3
 800b056:	d302      	bcc.n	800b05e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d11a      	bne.n	800b094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	699b      	ldr	r3, [r3, #24]
 800b064:	f003 0302 	and.w	r3, r3, #2
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d013      	beq.n	800b094 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b070:	f043 0220 	orr.w	r2, r3, #32
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2220      	movs	r2, #32
 800b07c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e007      	b.n	800b0a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f003 0302 	and.w	r3, r3, #2
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d1c4      	bne.n	800b02c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0b8:	e02f      	b.n	800b11a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0ba:	687a      	ldr	r2, [r7, #4]
 800b0bc:	68b9      	ldr	r1, [r7, #8]
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f838 	bl	800b134 <I2C_IsErrorOccurred>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d001      	beq.n	800b0ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	e02d      	b.n	800b12a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ce:	f7fd fb77 	bl	80087c0 <HAL_GetTick>
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	1ad3      	subs	r3, r2, r3
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d302      	bcc.n	800b0e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d11a      	bne.n	800b11a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	699b      	ldr	r3, [r3, #24]
 800b0ea:	f003 0320 	and.w	r3, r3, #32
 800b0ee:	2b20      	cmp	r3, #32
 800b0f0:	d013      	beq.n	800b11a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0f6:	f043 0220 	orr.w	r2, r3, #32
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2220      	movs	r2, #32
 800b102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	e007      	b.n	800b12a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	f003 0320 	and.w	r3, r3, #32
 800b124:	2b20      	cmp	r3, #32
 800b126:	d1c8      	bne.n	800b0ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
	...

0800b134 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b08a      	sub	sp, #40	@ 0x28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	699b      	ldr	r3, [r3, #24]
 800b14c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b156:	69bb      	ldr	r3, [r7, #24]
 800b158:	f003 0310 	and.w	r3, r3, #16
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d068      	beq.n	800b232 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2210      	movs	r2, #16
 800b166:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b168:	e049      	b.n	800b1fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b170:	d045      	beq.n	800b1fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b172:	f7fd fb25 	bl	80087c0 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	69fb      	ldr	r3, [r7, #28]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	68ba      	ldr	r2, [r7, #8]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d302      	bcc.n	800b188 <I2C_IsErrorOccurred+0x54>
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d13a      	bne.n	800b1fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b192:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b19a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	699b      	ldr	r3, [r3, #24]
 800b1a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b1a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1aa:	d121      	bne.n	800b1f0 <I2C_IsErrorOccurred+0xbc>
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1b2:	d01d      	beq.n	800b1f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b1b4:	7cfb      	ldrb	r3, [r7, #19]
 800b1b6:	2b20      	cmp	r3, #32
 800b1b8:	d01a      	beq.n	800b1f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	685a      	ldr	r2, [r3, #4]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b1ca:	f7fd faf9 	bl	80087c0 <HAL_GetTick>
 800b1ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1d0:	e00e      	b.n	800b1f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1d2:	f7fd faf5 	bl	80087c0 <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	2b19      	cmp	r3, #25
 800b1de:	d907      	bls.n	800b1f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	f043 0320 	orr.w	r3, r3, #32
 800b1e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b1ee:	e006      	b.n	800b1fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	699b      	ldr	r3, [r3, #24]
 800b1f6:	f003 0320 	and.w	r3, r3, #32
 800b1fa:	2b20      	cmp	r3, #32
 800b1fc:	d1e9      	bne.n	800b1d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	f003 0320 	and.w	r3, r3, #32
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d003      	beq.n	800b214 <I2C_IsErrorOccurred+0xe0>
 800b20c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b210:	2b00      	cmp	r3, #0
 800b212:	d0aa      	beq.n	800b16a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d103      	bne.n	800b224 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2220      	movs	r2, #32
 800b222:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	f043 0304 	orr.w	r3, r3, #4
 800b22a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	699b      	ldr	r3, [r3, #24]
 800b238:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b240:	2b00      	cmp	r3, #0
 800b242:	d00b      	beq.n	800b25c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	f043 0301 	orr.w	r3, r3, #1
 800b24a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b254:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b256:	2301      	movs	r3, #1
 800b258:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b25c:	69bb      	ldr	r3, [r7, #24]
 800b25e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b262:	2b00      	cmp	r3, #0
 800b264:	d00b      	beq.n	800b27e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b266:	6a3b      	ldr	r3, [r7, #32]
 800b268:	f043 0308 	orr.w	r3, r3, #8
 800b26c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b276:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b284:	2b00      	cmp	r3, #0
 800b286:	d00b      	beq.n	800b2a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b288:	6a3b      	ldr	r3, [r7, #32]
 800b28a:	f043 0302 	orr.w	r3, r3, #2
 800b28e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b298:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b2a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d01c      	beq.n	800b2e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	f7ff fe3b 	bl	800af24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	6859      	ldr	r1, [r3, #4]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	4b0d      	ldr	r3, [pc, #52]	@ (800b2f0 <I2C_IsErrorOccurred+0x1bc>)
 800b2ba:	400b      	ands	r3, r1
 800b2bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2c2:	6a3b      	ldr	r3, [r7, #32]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b2e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3728      	adds	r7, #40	@ 0x28
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	fe00e800 	.word	0xfe00e800

0800b2f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b087      	sub	sp, #28
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	607b      	str	r3, [r7, #4]
 800b2fe:	460b      	mov	r3, r1
 800b300:	817b      	strh	r3, [r7, #10]
 800b302:	4613      	mov	r3, r2
 800b304:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b306:	897b      	ldrh	r3, [r7, #10]
 800b308:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b30c:	7a7b      	ldrb	r3, [r7, #9]
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b314:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b31a:	6a3b      	ldr	r3, [r7, #32]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b322:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	685a      	ldr	r2, [r3, #4]
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	0d5b      	lsrs	r3, r3, #21
 800b32e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b332:	4b08      	ldr	r3, [pc, #32]	@ (800b354 <I2C_TransferConfig+0x60>)
 800b334:	430b      	orrs	r3, r1
 800b336:	43db      	mvns	r3, r3
 800b338:	ea02 0103 	and.w	r1, r2, r3
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	697a      	ldr	r2, [r7, #20]
 800b342:	430a      	orrs	r2, r1
 800b344:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b346:	bf00      	nop
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	03ff63ff 	.word	0x03ff63ff

0800b358 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
 800b360:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	2b20      	cmp	r3, #32
 800b36c:	d138      	bne.n	800b3e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b374:	2b01      	cmp	r3, #1
 800b376:	d101      	bne.n	800b37c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b378:	2302      	movs	r3, #2
 800b37a:	e032      	b.n	800b3e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2224      	movs	r2, #36	@ 0x24
 800b388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f022 0201 	bic.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b3aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6819      	ldr	r1, [r3, #0]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	683a      	ldr	r2, [r7, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f042 0201 	orr.w	r2, r2, #1
 800b3ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2220      	movs	r2, #32
 800b3d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	e000      	b.n	800b3e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3e0:	2302      	movs	r3, #2
  }
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr

0800b3ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3ee:	b480      	push	{r7}
 800b3f0:	b085      	sub	sp, #20
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	2b20      	cmp	r3, #32
 800b402:	d139      	bne.n	800b478 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d101      	bne.n	800b412 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b40e:	2302      	movs	r3, #2
 800b410:	e033      	b.n	800b47a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2201      	movs	r2, #1
 800b416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	2224      	movs	r2, #36	@ 0x24
 800b41e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f022 0201 	bic.w	r2, r2, #1
 800b430:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b440:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	021b      	lsls	r3, r3, #8
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	4313      	orrs	r3, r2
 800b44a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	68fa      	ldr	r2, [r7, #12]
 800b452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	681a      	ldr	r2, [r3, #0]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f042 0201 	orr.w	r2, r2, #1
 800b462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2220      	movs	r2, #32
 800b468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2200      	movs	r2, #0
 800b470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b474:	2300      	movs	r3, #0
 800b476:	e000      	b.n	800b47a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b478:	2302      	movs	r3, #2
  }
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3714      	adds	r7, #20
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr
	...

0800b488 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800b490:	2300      	movs	r3, #0
 800b492:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d01e      	beq.n	800b4d8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800b49a:	4b13      	ldr	r3, [pc, #76]	@ (800b4e8 <HAL_IPCC_Init+0x60>)
 800b49c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f7f7 fec0 	bl	8003230 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800b4b0:	68b8      	ldr	r0, [r7, #8]
 800b4b2:	f000 f85b 	bl	800b56c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800b4be:	68bb      	ldr	r3, [r7, #8]
 800b4c0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f82c 	bl	800b520 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2201      	movs	r2, #1
 800b4d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b4d6:	e001      	b.n	800b4dc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800b4dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3710      	adds	r7, #16
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	58000c00 	.word	0x58000c00

0800b4ec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800b506:	b480      	push	{r7}
 800b508:	b085      	sub	sp, #20
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	60f8      	str	r0, [r7, #12]
 800b50e:	60b9      	str	r1, [r7, #8]
 800b510:	4613      	mov	r3, r2
 800b512:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800b514:	bf00      	nop
 800b516:	3714      	adds	r7, #20
 800b518:	46bd      	mov	sp, r7
 800b51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51e:	4770      	bx	lr

0800b520 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b528:	2300      	movs	r3, #0
 800b52a:	60fb      	str	r3, [r7, #12]
 800b52c:	e00f      	b.n	800b54e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800b52e:	687a      	ldr	r2, [r7, #4]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	009b      	lsls	r3, r3, #2
 800b534:	4413      	add	r3, r2
 800b536:	4a0b      	ldr	r2, [pc, #44]	@ (800b564 <IPCC_SetDefaultCallbacks+0x44>)
 800b538:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	3306      	adds	r3, #6
 800b540:	009b      	lsls	r3, r3, #2
 800b542:	4413      	add	r3, r2
 800b544:	4a08      	ldr	r2, [pc, #32]	@ (800b568 <IPCC_SetDefaultCallbacks+0x48>)
 800b546:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2b05      	cmp	r3, #5
 800b552:	d9ec      	bls.n	800b52e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800b554:	bf00      	nop
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	0800b4ed 	.word	0x0800b4ed
 800b568:	0800b507 	.word	0x0800b507

0800b56c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2200      	movs	r2, #0
 800b578:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800b580:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	223f      	movs	r2, #63	@ 0x3f
 800b586:	609a      	str	r2, [r3, #8]
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e0c0      	b.n	800b728 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d106      	bne.n	800b5c0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7f7 ff04 	bl	80033c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f002 fe31 	bl	800e234 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	73fb      	strb	r3, [r7, #15]
 800b5d6:	e03e      	b.n	800b656 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b5d8:	7bfa      	ldrb	r2, [r7, #15]
 800b5da:	6879      	ldr	r1, [r7, #4]
 800b5dc:	4613      	mov	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	4413      	add	r3, r2
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	440b      	add	r3, r1
 800b5e6:	3311      	adds	r3, #17
 800b5e8:	2201      	movs	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b5ec:	7bfa      	ldrb	r2, [r7, #15]
 800b5ee:	6879      	ldr	r1, [r7, #4]
 800b5f0:	4613      	mov	r3, r2
 800b5f2:	009b      	lsls	r3, r3, #2
 800b5f4:	4413      	add	r3, r2
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	440b      	add	r3, r1
 800b5fa:	3310      	adds	r3, #16
 800b5fc:	7bfa      	ldrb	r2, [r7, #15]
 800b5fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b600:	7bfa      	ldrb	r2, [r7, #15]
 800b602:	6879      	ldr	r1, [r7, #4]
 800b604:	4613      	mov	r3, r2
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	4413      	add	r3, r2
 800b60a:	00db      	lsls	r3, r3, #3
 800b60c:	440b      	add	r3, r1
 800b60e:	3313      	adds	r3, #19
 800b610:	2200      	movs	r2, #0
 800b612:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b614:	7bfa      	ldrb	r2, [r7, #15]
 800b616:	6879      	ldr	r1, [r7, #4]
 800b618:	4613      	mov	r3, r2
 800b61a:	009b      	lsls	r3, r3, #2
 800b61c:	4413      	add	r3, r2
 800b61e:	00db      	lsls	r3, r3, #3
 800b620:	440b      	add	r3, r1
 800b622:	3320      	adds	r3, #32
 800b624:	2200      	movs	r2, #0
 800b626:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b628:	7bfa      	ldrb	r2, [r7, #15]
 800b62a:	6879      	ldr	r1, [r7, #4]
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	00db      	lsls	r3, r3, #3
 800b634:	440b      	add	r3, r1
 800b636:	3324      	adds	r3, #36	@ 0x24
 800b638:	2200      	movs	r2, #0
 800b63a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	6879      	ldr	r1, [r7, #4]
 800b640:	1c5a      	adds	r2, r3, #1
 800b642:	4613      	mov	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4413      	add	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	440b      	add	r3, r1
 800b64c:	2200      	movs	r2, #0
 800b64e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	3301      	adds	r3, #1
 800b654:	73fb      	strb	r3, [r7, #15]
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	791b      	ldrb	r3, [r3, #4]
 800b65a:	7bfa      	ldrb	r2, [r7, #15]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d3bb      	bcc.n	800b5d8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b660:	2300      	movs	r3, #0
 800b662:	73fb      	strb	r3, [r7, #15]
 800b664:	e044      	b.n	800b6f0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b666:	7bfa      	ldrb	r2, [r7, #15]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	009b      	lsls	r3, r3, #2
 800b66e:	4413      	add	r3, r2
 800b670:	00db      	lsls	r3, r3, #3
 800b672:	440b      	add	r3, r1
 800b674:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800b678:	2200      	movs	r2, #0
 800b67a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b67c:	7bfa      	ldrb	r2, [r7, #15]
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4613      	mov	r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	4413      	add	r3, r2
 800b686:	00db      	lsls	r3, r3, #3
 800b688:	440b      	add	r3, r1
 800b68a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b68e:	7bfa      	ldrb	r2, [r7, #15]
 800b690:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b692:	7bfa      	ldrb	r2, [r7, #15]
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	4613      	mov	r3, r2
 800b698:	009b      	lsls	r3, r3, #2
 800b69a:	4413      	add	r3, r2
 800b69c:	00db      	lsls	r3, r3, #3
 800b69e:	440b      	add	r3, r1
 800b6a0:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b6a8:	7bfa      	ldrb	r2, [r7, #15]
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	440b      	add	r3, r1
 800b6b6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b6be:	7bfa      	ldrb	r2, [r7, #15]
 800b6c0:	6879      	ldr	r1, [r7, #4]
 800b6c2:	4613      	mov	r3, r2
 800b6c4:	009b      	lsls	r3, r3, #2
 800b6c6:	4413      	add	r3, r2
 800b6c8:	00db      	lsls	r3, r3, #3
 800b6ca:	440b      	add	r3, r1
 800b6cc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b6d4:	7bfa      	ldrb	r2, [r7, #15]
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	4613      	mov	r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	4413      	add	r3, r2
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	440b      	add	r3, r1
 800b6e2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	73fb      	strb	r3, [r7, #15]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	791b      	ldrb	r3, [r3, #4]
 800b6f4:	7bfa      	ldrb	r2, [r7, #15]
 800b6f6:	429a      	cmp	r2, r3
 800b6f8:	d3b5      	bcc.n	800b666 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6818      	ldr	r0, [r3, #0]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	3304      	adds	r3, #4
 800b702:	e893 0006 	ldmia.w	r3, {r1, r2}
 800b706:	f002 fdb0 	bl	800e26a <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2200      	movs	r2, #0
 800b70e:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2201      	movs	r2, #1
 800b714:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	7a9b      	ldrb	r3, [r3, #10]
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d102      	bne.n	800b726 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 f805 	bl	800b730 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b730:	b480      	push	{r7}
 800b732:	b085      	sub	sp, #20
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2201      	movs	r2, #1
 800b742:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b754:	b29b      	uxth	r3, r3
 800b756:	f043 0301 	orr.w	r3, r3, #1
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800b768:	b29b      	uxth	r3, r3
 800b76a:	f043 0302 	orr.w	r3, r3, #2
 800b76e:	b29a      	uxth	r2, r3
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800b776:	2300      	movs	r3, #0
}
 800b778:	4618      	mov	r0, r3
 800b77a:	3714      	adds	r7, #20
 800b77c:	46bd      	mov	sp, r7
 800b77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b782:	4770      	bx	lr

0800b784 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800b784:	b480      	push	{r7}
 800b786:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b788:	4b05      	ldr	r3, [pc, #20]	@ (800b7a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a04      	ldr	r2, [pc, #16]	@ (800b7a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800b78e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b792:	6013      	str	r3, [r2, #0]
}
 800b794:	bf00      	nop
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr
 800b79e:	bf00      	nop
 800b7a0:	58000400 	.word	0x58000400

0800b7a4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800b7a8:	4b04      	ldr	r3, [pc, #16]	@ (800b7bc <HAL_PWREx_GetVoltageRange+0x18>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	58000400 	.word	0x58000400

0800b7c0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800b7c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b7ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7d2:	d101      	bne.n	800b7d8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	e000      	b.n	800b7da <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800b7d8:	2300      	movs	r3, #0
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <LL_RCC_HSE_Enable>:
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800b7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b7f6:	6013      	str	r3, [r2, #0]
}
 800b7f8:	bf00      	nop
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr

0800b802 <LL_RCC_HSE_Disable>:
{
 800b802:	b480      	push	{r7}
 800b804:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800b806:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b810:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b814:	6013      	str	r3, [r2, #0]
}
 800b816:	bf00      	nop
 800b818:	46bd      	mov	sp, r7
 800b81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81e:	4770      	bx	lr

0800b820 <LL_RCC_HSE_IsReady>:
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800b824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b82e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b832:	d101      	bne.n	800b838 <LL_RCC_HSE_IsReady+0x18>
 800b834:	2301      	movs	r3, #1
 800b836:	e000      	b.n	800b83a <LL_RCC_HSE_IsReady+0x1a>
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	46bd      	mov	sp, r7
 800b83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b842:	4770      	bx	lr

0800b844 <LL_RCC_HSI_Enable>:
{
 800b844:	b480      	push	{r7}
 800b846:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800b848:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b856:	6013      	str	r3, [r2, #0]
}
 800b858:	bf00      	nop
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr

0800b862 <LL_RCC_HSI_Disable>:
{
 800b862:	b480      	push	{r7}
 800b864:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800b866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b874:	6013      	str	r3, [r2, #0]
}
 800b876:	bf00      	nop
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <LL_RCC_HSI_IsReady>:
{
 800b880:	b480      	push	{r7}
 800b882:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800b884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b88e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b892:	d101      	bne.n	800b898 <LL_RCC_HSI_IsReady+0x18>
 800b894:	2301      	movs	r3, #1
 800b896:	e000      	b.n	800b89a <LL_RCC_HSI_IsReady+0x1a>
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <LL_RCC_HSI_SetCalibTrimming>:
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b083      	sub	sp, #12
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800b8ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8b0:	685b      	ldr	r3, [r3, #4]
 800b8b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	061b      	lsls	r3, r3, #24
 800b8ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	604b      	str	r3, [r1, #4]
}
 800b8c2:	bf00      	nop
 800b8c4:	370c      	adds	r7, #12
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8cc:	4770      	bx	lr

0800b8ce <LL_RCC_HSI48_Enable>:
{
 800b8ce:	b480      	push	{r7}
 800b8d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b8d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8de:	f043 0301 	orr.w	r3, r3, #1
 800b8e2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b8e6:	bf00      	nop
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <LL_RCC_HSI48_Disable>:
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b8f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b8fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b900:	f023 0301 	bic.w	r3, r3, #1
 800b904:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b908:	bf00      	nop
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <LL_RCC_HSI48_IsReady>:
{
 800b912:	b480      	push	{r7}
 800b914:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b916:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b91a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b91e:	f003 0302 	and.w	r3, r3, #2
 800b922:	2b02      	cmp	r3, #2
 800b924:	d101      	bne.n	800b92a <LL_RCC_HSI48_IsReady+0x18>
 800b926:	2301      	movs	r3, #1
 800b928:	e000      	b.n	800b92c <LL_RCC_HSI48_IsReady+0x1a>
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr

0800b936 <LL_RCC_LSE_Enable>:
{
 800b936:	b480      	push	{r7}
 800b938:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b93a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b93e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b942:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b94e:	bf00      	nop
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <LL_RCC_LSE_Disable>:
{
 800b958:	b480      	push	{r7}
 800b95a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b95c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b960:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b964:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b968:	f023 0301 	bic.w	r3, r3, #1
 800b96c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b970:	bf00      	nop
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <LL_RCC_LSE_EnableBypass>:
{
 800b97a:	b480      	push	{r7}
 800b97c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b97e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b986:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b98a:	f043 0304 	orr.w	r3, r3, #4
 800b98e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b992:	bf00      	nop
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <LL_RCC_LSE_DisableBypass>:
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b9a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9ac:	f023 0304 	bic.w	r3, r3, #4
 800b9b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b9b4:	bf00      	nop
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <LL_RCC_LSE_IsReady>:
{
 800b9be:	b480      	push	{r7}
 800b9c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b9c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ca:	f003 0302 	and.w	r3, r3, #2
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d101      	bne.n	800b9d6 <LL_RCC_LSE_IsReady+0x18>
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e000      	b.n	800b9d8 <LL_RCC_LSE_IsReady+0x1a>
 800b9d6:	2300      	movs	r3, #0
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <LL_RCC_LSI1_Enable>:
{
 800b9e2:	b480      	push	{r7}
 800b9e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b9e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b9ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9f2:	f043 0301 	orr.w	r3, r3, #1
 800b9f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b9fa:	bf00      	nop
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr

0800ba04 <LL_RCC_LSI1_Disable>:
{
 800ba04:	b480      	push	{r7}
 800ba06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800ba08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba10:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba14:	f023 0301 	bic.w	r3, r3, #1
 800ba18:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ba1c:	bf00      	nop
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <LL_RCC_LSI1_IsReady>:
{
 800ba26:	b480      	push	{r7}
 800ba28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800ba2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba32:	f003 0302 	and.w	r3, r3, #2
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d101      	bne.n	800ba3e <LL_RCC_LSI1_IsReady+0x18>
 800ba3a:	2301      	movs	r3, #1
 800ba3c:	e000      	b.n	800ba40 <LL_RCC_LSI1_IsReady+0x1a>
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	46bd      	mov	sp, r7
 800ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba48:	4770      	bx	lr

0800ba4a <LL_RCC_LSI2_Enable>:
{
 800ba4a:	b480      	push	{r7}
 800ba4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ba4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba56:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba5a:	f043 0304 	orr.w	r3, r3, #4
 800ba5e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ba62:	bf00      	nop
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <LL_RCC_LSI2_Disable>:
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800ba70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ba7c:	f023 0304 	bic.w	r3, r3, #4
 800ba80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800ba84:	bf00      	nop
 800ba86:	46bd      	mov	sp, r7
 800ba88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8c:	4770      	bx	lr

0800ba8e <LL_RCC_LSI2_IsReady>:
{
 800ba8e:	b480      	push	{r7}
 800ba90:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800ba92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba9a:	f003 0308 	and.w	r3, r3, #8
 800ba9e:	2b08      	cmp	r3, #8
 800baa0:	d101      	bne.n	800baa6 <LL_RCC_LSI2_IsReady+0x18>
 800baa2:	2301      	movs	r3, #1
 800baa4:	e000      	b.n	800baa8 <LL_RCC_LSI2_IsReady+0x1a>
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	46bd      	mov	sp, r7
 800baac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab0:	4770      	bx	lr

0800bab2 <LL_RCC_LSI2_SetTrimming>:
{
 800bab2:	b480      	push	{r7}
 800bab4:	b083      	sub	sp, #12
 800bab6:	af00      	add	r7, sp, #0
 800bab8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800baba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800babe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bac2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bace:	4313      	orrs	r3, r2
 800bad0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800bad4:	bf00      	nop
 800bad6:	370c      	adds	r7, #12
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <LL_RCC_MSI_Enable>:
{
 800bae0:	b480      	push	{r7}
 800bae2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800bae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800baee:	f043 0301 	orr.w	r3, r3, #1
 800baf2:	6013      	str	r3, [r2, #0]
}
 800baf4:	bf00      	nop
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <LL_RCC_MSI_Disable>:
{
 800bafe:	b480      	push	{r7}
 800bb00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800bb02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bb0c:	f023 0301 	bic.w	r3, r3, #1
 800bb10:	6013      	str	r3, [r2, #0]
}
 800bb12:	bf00      	nop
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <LL_RCC_MSI_IsReady>:
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800bb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 0302 	and.w	r3, r3, #2
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d101      	bne.n	800bb32 <LL_RCC_MSI_IsReady+0x16>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e000      	b.n	800bb34 <LL_RCC_MSI_IsReady+0x18>
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr

0800bb3e <LL_RCC_MSI_SetRange>:
{
 800bb3e:	b480      	push	{r7}
 800bb40:	b083      	sub	sp, #12
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800bb46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bb50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	4313      	orrs	r3, r2
 800bb58:	600b      	str	r3, [r1, #0]
}
 800bb5a:	bf00      	nop
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <LL_RCC_MSI_GetRange>:
{
 800bb66:	b480      	push	{r7}
 800bb68:	b083      	sub	sp, #12
 800bb6a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800bb6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bb76:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	2bb0      	cmp	r3, #176	@ 0xb0
 800bb7c:	d901      	bls.n	800bb82 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800bb7e:	23b0      	movs	r3, #176	@ 0xb0
 800bb80:	607b      	str	r3, [r7, #4]
  return msiRange;
 800bb82:	687b      	ldr	r3, [r7, #4]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	370c      	adds	r7, #12
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <LL_RCC_MSI_SetCalibTrimming>:
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	021b      	lsls	r3, r3, #8
 800bba6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	604b      	str	r3, [r1, #4]
}
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <LL_RCC_SetSysClkSource>:
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b083      	sub	sp, #12
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800bbc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc6:	689b      	ldr	r3, [r3, #8]
 800bbc8:	f023 0203 	bic.w	r2, r3, #3
 800bbcc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	608b      	str	r3, [r1, #8]
}
 800bbd6:	bf00      	nop
 800bbd8:	370c      	adds	r7, #12
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr

0800bbe2 <LL_RCC_GetSysClkSource>:
{
 800bbe2:	b480      	push	{r7}
 800bbe4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800bbe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbea:	689b      	ldr	r3, [r3, #8]
 800bbec:	f003 030c 	and.w	r3, r3, #12
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf8:	4770      	bx	lr

0800bbfa <LL_RCC_SetAHBPrescaler>:
{
 800bbfa:	b480      	push	{r7}
 800bbfc:	b083      	sub	sp, #12
 800bbfe:	af00      	add	r7, sp, #0
 800bc00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800bc02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc06:	689b      	ldr	r3, [r3, #8]
 800bc08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	4313      	orrs	r3, r2
 800bc14:	608b      	str	r3, [r1, #8]
}
 800bc16:	bf00      	nop
 800bc18:	370c      	adds	r7, #12
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc20:	4770      	bx	lr

0800bc22 <LL_C2_RCC_SetAHBPrescaler>:
{
 800bc22:	b480      	push	{r7}
 800bc24:	b083      	sub	sp, #12
 800bc26:	af00      	add	r7, sp, #0
 800bc28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800bc2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bc32:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bc36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bc42:	bf00      	nop
 800bc44:	370c      	adds	r7, #12
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <LL_RCC_SetAHB4Prescaler>:
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800bc56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bc5e:	f023 020f 	bic.w	r2, r3, #15
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	091b      	lsrs	r3, r3, #4
 800bc66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800bc70:	bf00      	nop
 800bc72:	370c      	adds	r7, #12
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr

0800bc7c <LL_RCC_SetAPB1Prescaler>:
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b083      	sub	sp, #12
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800bc84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4313      	orrs	r3, r2
 800bc96:	608b      	str	r3, [r1, #8]
}
 800bc98:	bf00      	nop
 800bc9a:	370c      	adds	r7, #12
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr

0800bca4 <LL_RCC_SetAPB2Prescaler>:
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800bcac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800bcb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	608b      	str	r3, [r1, #8]
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <LL_RCC_GetAHBPrescaler>:
{
 800bccc:	b480      	push	{r7}
 800bcce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800bcd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcd4:	689b      	ldr	r3, [r3, #8]
 800bcd6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr

0800bce4 <LL_RCC_GetAHB4Prescaler>:
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800bce8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcec:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800bcf0:	011b      	lsls	r3, r3, #4
 800bcf2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <LL_RCC_GetAPB1Prescaler>:
{
 800bd00:	b480      	push	{r7}
 800bd02:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800bd04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <LL_RCC_GetAPB2Prescaler>:
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800bd1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd20:	689b      	ldr	r3, [r3, #8]
 800bd22:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <LL_RCC_PLL_Enable>:
{
 800bd30:	b480      	push	{r7}
 800bd32:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800bd34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bd42:	6013      	str	r3, [r2, #0]
}
 800bd44:	bf00      	nop
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <LL_RCC_PLL_Disable>:
{
 800bd4e:	b480      	push	{r7}
 800bd50:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800bd52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd5c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bd60:	6013      	str	r3, [r2, #0]
}
 800bd62:	bf00      	nop
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <LL_RCC_PLL_IsReady>:
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800bd70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd7e:	d101      	bne.n	800bd84 <LL_RCC_PLL_IsReady+0x18>
 800bd80:	2301      	movs	r3, #1
 800bd82:	e000      	b.n	800bd86 <LL_RCC_PLL_IsReady+0x1a>
 800bd84:	2300      	movs	r3, #0
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <LL_RCC_PLL_GetN>:
{
 800bd90:	b480      	push	{r7}
 800bd92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd98:	68db      	ldr	r3, [r3, #12]
 800bd9a:	0a1b      	lsrs	r3, r3, #8
 800bd9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800bda0:	4618      	mov	r0, r3
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <LL_RCC_PLL_GetR>:
{
 800bdaa:	b480      	push	{r7}
 800bdac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800bdae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdb2:	68db      	ldr	r3, [r3, #12]
 800bdb4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc0:	4770      	bx	lr

0800bdc2 <LL_RCC_PLL_GetDivider>:
{
 800bdc2:	b480      	push	{r7}
 800bdc4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800bdc6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdca:	68db      	ldr	r3, [r3, #12]
 800bdcc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd8:	4770      	bx	lr

0800bdda <LL_RCC_PLL_GetMainSource>:
{
 800bdda:	b480      	push	{r7}
 800bddc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800bdde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f003 0303 	and.w	r3, r3, #3
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <LL_RCC_IsActiveFlag_HPRE>:
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800bdf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdfa:	689b      	ldr	r3, [r3, #8]
 800bdfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be04:	d101      	bne.n	800be0a <LL_RCC_IsActiveFlag_HPRE+0x18>
 800be06:	2301      	movs	r3, #1
 800be08:	e000      	b.n	800be0c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800be0a:	2300      	movs	r3, #0
}
 800be0c:	4618      	mov	r0, r3
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800be16:	b480      	push	{r7}
 800be18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800be1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be1e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800be22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be2a:	d101      	bne.n	800be30 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e000      	b.n	800be32 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800be30:	2300      	movs	r3, #0
}
 800be32:	4618      	mov	r0, r3
 800be34:	46bd      	mov	sp, r7
 800be36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be3a:	4770      	bx	lr

0800be3c <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800be3c:	b480      	push	{r7}
 800be3e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800be40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be44:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800be48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800be4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be50:	d101      	bne.n	800be56 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800be52:	2301      	movs	r3, #1
 800be54:	e000      	b.n	800be58 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800be56:	2300      	movs	r3, #0
}
 800be58:	4618      	mov	r0, r3
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr

0800be62 <LL_RCC_IsActiveFlag_PPRE1>:
{
 800be62:	b480      	push	{r7}
 800be64:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800be66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be6a:	689b      	ldr	r3, [r3, #8]
 800be6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be70:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800be74:	d101      	bne.n	800be7a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800be76:	2301      	movs	r3, #1
 800be78:	e000      	b.n	800be7c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800be7a:	2300      	movs	r3, #0
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr

0800be86 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800be86:	b480      	push	{r7}
 800be88:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800be8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800be94:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800be98:	d101      	bne.n	800be9e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800be9a:	2301      	movs	r3, #1
 800be9c:	e000      	b.n	800bea0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr
	...

0800beac <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800beac:	b590      	push	{r4, r7, lr}
 800beae:	b08d      	sub	sp, #52	@ 0x34
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800beba:	2301      	movs	r3, #1
 800bebc:	e363      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 0320 	and.w	r3, r3, #32
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	f000 808d 	beq.w	800bfe6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800becc:	f7ff fe89 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800bed0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bed2:	f7ff ff82 	bl	800bdda <LL_RCC_PLL_GetMainSource>
 800bed6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800bed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d005      	beq.n	800beea <HAL_RCC_OscConfig+0x3e>
 800bede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bee0:	2b0c      	cmp	r3, #12
 800bee2:	d147      	bne.n	800bf74 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800bee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bee6:	2b01      	cmp	r3, #1
 800bee8:	d144      	bne.n	800bf74 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	69db      	ldr	r3, [r3, #28]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d101      	bne.n	800bef6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e347      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800befa:	f7ff fe34 	bl	800bb66 <LL_RCC_MSI_GetRange>
 800befe:	4603      	mov	r3, r0
 800bf00:	429c      	cmp	r4, r3
 800bf02:	d914      	bls.n	800bf2e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf08:	4618      	mov	r0, r3
 800bf0a:	f000 fd2f 	bl	800c96c <RCC_SetFlashLatencyFromMSIRange>
 800bf0e:	4603      	mov	r3, r0
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d001      	beq.n	800bf18 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e336      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f7ff fe0e 	bl	800bb3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6a1b      	ldr	r3, [r3, #32]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f7ff fe32 	bl	800bb90 <LL_RCC_MSI_SetCalibTrimming>
 800bf2c:	e013      	b.n	800bf56 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7ff fe03 	bl	800bb3e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a1b      	ldr	r3, [r3, #32]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f7ff fe27 	bl	800bb90 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf46:	4618      	mov	r0, r3
 800bf48:	f000 fd10 	bl	800c96c <RCC_SetFlashLatencyFromMSIRange>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d001      	beq.n	800bf56 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800bf52:	2301      	movs	r3, #1
 800bf54:	e317      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bf56:	f000 fcc9 	bl	800c8ec <HAL_RCC_GetHCLKFreq>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4aa4      	ldr	r2, [pc, #656]	@ (800c1f0 <HAL_RCC_OscConfig+0x344>)
 800bf5e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800bf60:	4ba4      	ldr	r3, [pc, #656]	@ (800c1f4 <HAL_RCC_OscConfig+0x348>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4618      	mov	r0, r3
 800bf66:	f7fc fbdd 	bl	8008724 <HAL_InitTick>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d039      	beq.n	800bfe4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e308      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	69db      	ldr	r3, [r3, #28]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d01e      	beq.n	800bfba <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bf7c:	f7ff fdb0 	bl	800bae0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bf80:	f7fc fc1e 	bl	80087c0 <HAL_GetTick>
 800bf84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf86:	e008      	b.n	800bf9a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bf88:	f7fc fc1a 	bl	80087c0 <HAL_GetTick>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf90:	1ad3      	subs	r3, r2, r3
 800bf92:	2b02      	cmp	r3, #2
 800bf94:	d901      	bls.n	800bf9a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800bf96:	2303      	movs	r3, #3
 800bf98:	e2f5      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800bf9a:	f7ff fdbf 	bl	800bb1c <LL_RCC_MSI_IsReady>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d0f1      	beq.n	800bf88 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f7ff fdc8 	bl	800bb3e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6a1b      	ldr	r3, [r3, #32]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fdec 	bl	800bb90 <LL_RCC_MSI_SetCalibTrimming>
 800bfb8:	e015      	b.n	800bfe6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bfba:	f7ff fda0 	bl	800bafe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800bfbe:	f7fc fbff 	bl	80087c0 <HAL_GetTick>
 800bfc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800bfc4:	e008      	b.n	800bfd8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bfc6:	f7fc fbfb 	bl	80087c0 <HAL_GetTick>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfce:	1ad3      	subs	r3, r2, r3
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	d901      	bls.n	800bfd8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	e2d6      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800bfd8:	f7ff fda0 	bl	800bb1c <LL_RCC_MSI_IsReady>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d1f1      	bne.n	800bfc6 <HAL_RCC_OscConfig+0x11a>
 800bfe2:	e000      	b.n	800bfe6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800bfe4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d047      	beq.n	800c082 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bff2:	f7ff fdf6 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800bff6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800bff8:	f7ff feef 	bl	800bdda <LL_RCC_PLL_GetMainSource>
 800bffc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800bffe:	6a3b      	ldr	r3, [r7, #32]
 800c000:	2b08      	cmp	r3, #8
 800c002:	d005      	beq.n	800c010 <HAL_RCC_OscConfig+0x164>
 800c004:	6a3b      	ldr	r3, [r7, #32]
 800c006:	2b0c      	cmp	r3, #12
 800c008:	d108      	bne.n	800c01c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d105      	bne.n	800c01c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	685b      	ldr	r3, [r3, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d134      	bne.n	800c082 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800c018:	2301      	movs	r3, #1
 800c01a:	e2b4      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	685b      	ldr	r3, [r3, #4]
 800c020:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c024:	d102      	bne.n	800c02c <HAL_RCC_OscConfig+0x180>
 800c026:	f7ff fbdd 	bl	800b7e4 <LL_RCC_HSE_Enable>
 800c02a:	e001      	b.n	800c030 <HAL_RCC_OscConfig+0x184>
 800c02c:	f7ff fbe9 	bl	800b802 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d012      	beq.n	800c05e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c038:	f7fc fbc2 	bl	80087c0 <HAL_GetTick>
 800c03c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800c03e:	e008      	b.n	800c052 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c040:	f7fc fbbe 	bl	80087c0 <HAL_GetTick>
 800c044:	4602      	mov	r2, r0
 800c046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	2b64      	cmp	r3, #100	@ 0x64
 800c04c:	d901      	bls.n	800c052 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800c04e:	2303      	movs	r3, #3
 800c050:	e299      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800c052:	f7ff fbe5 	bl	800b820 <LL_RCC_HSE_IsReady>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d0f1      	beq.n	800c040 <HAL_RCC_OscConfig+0x194>
 800c05c:	e011      	b.n	800c082 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c05e:	f7fc fbaf 	bl	80087c0 <HAL_GetTick>
 800c062:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800c064:	e008      	b.n	800c078 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c066:	f7fc fbab 	bl	80087c0 <HAL_GetTick>
 800c06a:	4602      	mov	r2, r0
 800c06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c06e:	1ad3      	subs	r3, r2, r3
 800c070:	2b64      	cmp	r3, #100	@ 0x64
 800c072:	d901      	bls.n	800c078 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c074:	2303      	movs	r3, #3
 800c076:	e286      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800c078:	f7ff fbd2 	bl	800b820 <LL_RCC_HSE_IsReady>
 800c07c:	4603      	mov	r3, r0
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d1f1      	bne.n	800c066 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	f003 0302 	and.w	r3, r3, #2
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d04c      	beq.n	800c128 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c08e:	f7ff fda8 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800c092:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c094:	f7ff fea1 	bl	800bdda <LL_RCC_PLL_GetMainSource>
 800c098:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	2b04      	cmp	r3, #4
 800c09e:	d005      	beq.n	800c0ac <HAL_RCC_OscConfig+0x200>
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	2b0c      	cmp	r3, #12
 800c0a4:	d10e      	bne.n	800c0c4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d10b      	bne.n	800c0c4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	68db      	ldr	r3, [r3, #12]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d101      	bne.n	800c0b8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	e266      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	691b      	ldr	r3, [r3, #16]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7ff fbf1 	bl	800b8a4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800c0c2:	e031      	b.n	800c128 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d019      	beq.n	800c100 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c0cc:	f7ff fbba 	bl	800b844 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0d0:	f7fc fb76 	bl	80087c0 <HAL_GetTick>
 800c0d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800c0d6:	e008      	b.n	800c0ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c0d8:	f7fc fb72 	bl	80087c0 <HAL_GetTick>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0e0:	1ad3      	subs	r3, r2, r3
 800c0e2:	2b02      	cmp	r3, #2
 800c0e4:	d901      	bls.n	800c0ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c0e6:	2303      	movs	r3, #3
 800c0e8:	e24d      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800c0ea:	f7ff fbc9 	bl	800b880 <LL_RCC_HSI_IsReady>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d0f1      	beq.n	800c0d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	691b      	ldr	r3, [r3, #16]
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7ff fbd3 	bl	800b8a4 <LL_RCC_HSI_SetCalibTrimming>
 800c0fe:	e013      	b.n	800c128 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c100:	f7ff fbaf 	bl	800b862 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c104:	f7fc fb5c 	bl	80087c0 <HAL_GetTick>
 800c108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800c10a:	e008      	b.n	800c11e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c10c:	f7fc fb58 	bl	80087c0 <HAL_GetTick>
 800c110:	4602      	mov	r2, r0
 800c112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c114:	1ad3      	subs	r3, r2, r3
 800c116:	2b02      	cmp	r3, #2
 800c118:	d901      	bls.n	800c11e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e233      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800c11e:	f7ff fbaf 	bl	800b880 <LL_RCC_HSI_IsReady>
 800c122:	4603      	mov	r3, r0
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1f1      	bne.n	800c10c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f003 0308 	and.w	r3, r3, #8
 800c130:	2b00      	cmp	r3, #0
 800c132:	d106      	bne.n	800c142 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f000 80a3 	beq.w	800c288 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	695b      	ldr	r3, [r3, #20]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d076      	beq.n	800c238 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 0310 	and.w	r3, r3, #16
 800c152:	2b00      	cmp	r3, #0
 800c154:	d046      	beq.n	800c1e4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800c156:	f7ff fc66 	bl	800ba26 <LL_RCC_LSI1_IsReady>
 800c15a:	4603      	mov	r3, r0
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d113      	bne.n	800c188 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800c160:	f7ff fc3f 	bl	800b9e2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c164:	f7fc fb2c 	bl	80087c0 <HAL_GetTick>
 800c168:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c16a:	e008      	b.n	800c17e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c16c:	f7fc fb28 	bl	80087c0 <HAL_GetTick>
 800c170:	4602      	mov	r2, r0
 800c172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c174:	1ad3      	subs	r3, r2, r3
 800c176:	2b02      	cmp	r3, #2
 800c178:	d901      	bls.n	800c17e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800c17a:	2303      	movs	r3, #3
 800c17c:	e203      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800c17e:	f7ff fc52 	bl	800ba26 <LL_RCC_LSI1_IsReady>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d0f1      	beq.n	800c16c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800c188:	f7ff fc5f 	bl	800ba4a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c18c:	f7fc fb18 	bl	80087c0 <HAL_GetTick>
 800c190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c192:	e008      	b.n	800c1a6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c194:	f7fc fb14 	bl	80087c0 <HAL_GetTick>
 800c198:	4602      	mov	r2, r0
 800c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c19c:	1ad3      	subs	r3, r2, r3
 800c19e:	2b03      	cmp	r3, #3
 800c1a0:	d901      	bls.n	800c1a6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e1ef      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800c1a6:	f7ff fc72 	bl	800ba8e <LL_RCC_LSI2_IsReady>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d0f1      	beq.n	800c194 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	699b      	ldr	r3, [r3, #24]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f7ff fc7c 	bl	800bab2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800c1ba:	f7ff fc23 	bl	800ba04 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1be:	f7fc faff 	bl	80087c0 <HAL_GetTick>
 800c1c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c1c4:	e008      	b.n	800c1d8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c1c6:	f7fc fafb 	bl	80087c0 <HAL_GetTick>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ce:	1ad3      	subs	r3, r2, r3
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d901      	bls.n	800c1d8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	e1d6      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800c1d8:	f7ff fc25 	bl	800ba26 <LL_RCC_LSI1_IsReady>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d1f1      	bne.n	800c1c6 <HAL_RCC_OscConfig+0x31a>
 800c1e2:	e051      	b.n	800c288 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800c1e4:	f7ff fbfd 	bl	800b9e2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c1e8:	f7fc faea 	bl	80087c0 <HAL_GetTick>
 800c1ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c1ee:	e00c      	b.n	800c20a <HAL_RCC_OscConfig+0x35e>
 800c1f0:	20000008 	.word	0x20000008
 800c1f4:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c1f8:	f7fc fae2 	bl	80087c0 <HAL_GetTick>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c200:	1ad3      	subs	r3, r2, r3
 800c202:	2b02      	cmp	r3, #2
 800c204:	d901      	bls.n	800c20a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800c206:	2303      	movs	r3, #3
 800c208:	e1bd      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800c20a:	f7ff fc0c 	bl	800ba26 <LL_RCC_LSI1_IsReady>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d0f1      	beq.n	800c1f8 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800c214:	f7ff fc2a 	bl	800ba6c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c218:	e008      	b.n	800c22c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c21a:	f7fc fad1 	bl	80087c0 <HAL_GetTick>
 800c21e:	4602      	mov	r2, r0
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	2b03      	cmp	r3, #3
 800c226:	d901      	bls.n	800c22c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800c228:	2303      	movs	r3, #3
 800c22a:	e1ac      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800c22c:	f7ff fc2f 	bl	800ba8e <LL_RCC_LSI2_IsReady>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d1f1      	bne.n	800c21a <HAL_RCC_OscConfig+0x36e>
 800c236:	e027      	b.n	800c288 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800c238:	f7ff fc18 	bl	800ba6c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c23c:	f7fc fac0 	bl	80087c0 <HAL_GetTick>
 800c240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c242:	e008      	b.n	800c256 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800c244:	f7fc fabc 	bl	80087c0 <HAL_GetTick>
 800c248:	4602      	mov	r2, r0
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d901      	bls.n	800c256 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	e197      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800c256:	f7ff fc1a 	bl	800ba8e <LL_RCC_LSI2_IsReady>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d1f1      	bne.n	800c244 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800c260:	f7ff fbd0 	bl	800ba04 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c264:	f7fc faac 	bl	80087c0 <HAL_GetTick>
 800c268:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c26a:	e008      	b.n	800c27e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800c26c:	f7fc faa8 	bl	80087c0 <HAL_GetTick>
 800c270:	4602      	mov	r2, r0
 800c272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c274:	1ad3      	subs	r3, r2, r3
 800c276:	2b02      	cmp	r3, #2
 800c278:	d901      	bls.n	800c27e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800c27a:	2303      	movs	r3, #3
 800c27c:	e183      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800c27e:	f7ff fbd2 	bl	800ba26 <LL_RCC_LSI1_IsReady>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1f1      	bne.n	800c26c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f003 0304 	and.w	r3, r3, #4
 800c290:	2b00      	cmp	r3, #0
 800c292:	d05b      	beq.n	800c34c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c294:	4ba7      	ldr	r3, [pc, #668]	@ (800c534 <HAL_RCC_OscConfig+0x688>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d114      	bne.n	800c2ca <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c2a0:	f7ff fa70 	bl	800b784 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c2a4:	f7fc fa8c 	bl	80087c0 <HAL_GetTick>
 800c2a8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2aa:	e008      	b.n	800c2be <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2ac:	f7fc fa88 	bl	80087c0 <HAL_GetTick>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	1ad3      	subs	r3, r2, r3
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d901      	bls.n	800c2be <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	e163      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c2be:	4b9d      	ldr	r3, [pc, #628]	@ (800c534 <HAL_RCC_OscConfig+0x688>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d0f0      	beq.n	800c2ac <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d102      	bne.n	800c2d8 <HAL_RCC_OscConfig+0x42c>
 800c2d2:	f7ff fb30 	bl	800b936 <LL_RCC_LSE_Enable>
 800c2d6:	e00c      	b.n	800c2f2 <HAL_RCC_OscConfig+0x446>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	2b05      	cmp	r3, #5
 800c2de:	d104      	bne.n	800c2ea <HAL_RCC_OscConfig+0x43e>
 800c2e0:	f7ff fb4b 	bl	800b97a <LL_RCC_LSE_EnableBypass>
 800c2e4:	f7ff fb27 	bl	800b936 <LL_RCC_LSE_Enable>
 800c2e8:	e003      	b.n	800c2f2 <HAL_RCC_OscConfig+0x446>
 800c2ea:	f7ff fb35 	bl	800b958 <LL_RCC_LSE_Disable>
 800c2ee:	f7ff fb55 	bl	800b99c <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	689b      	ldr	r3, [r3, #8]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d014      	beq.n	800c324 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c2fa:	f7fc fa61 	bl	80087c0 <HAL_GetTick>
 800c2fe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800c300:	e00a      	b.n	800c318 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c302:	f7fc fa5d 	bl	80087c0 <HAL_GetTick>
 800c306:	4602      	mov	r2, r0
 800c308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c30a:	1ad3      	subs	r3, r2, r3
 800c30c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c310:	4293      	cmp	r3, r2
 800c312:	d901      	bls.n	800c318 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800c314:	2303      	movs	r3, #3
 800c316:	e136      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800c318:	f7ff fb51 	bl	800b9be <LL_RCC_LSE_IsReady>
 800c31c:	4603      	mov	r3, r0
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d0ef      	beq.n	800c302 <HAL_RCC_OscConfig+0x456>
 800c322:	e013      	b.n	800c34c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c324:	f7fc fa4c 	bl	80087c0 <HAL_GetTick>
 800c328:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800c32a:	e00a      	b.n	800c342 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c32c:	f7fc fa48 	bl	80087c0 <HAL_GetTick>
 800c330:	4602      	mov	r2, r0
 800c332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c33a:	4293      	cmp	r3, r2
 800c33c:	d901      	bls.n	800c342 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800c33e:	2303      	movs	r3, #3
 800c340:	e121      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800c342:	f7ff fb3c 	bl	800b9be <LL_RCC_LSE_IsReady>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1ef      	bne.n	800c32c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c354:	2b00      	cmp	r3, #0
 800c356:	d02c      	beq.n	800c3b2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d014      	beq.n	800c38a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c360:	f7ff fab5 	bl	800b8ce <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c364:	f7fc fa2c 	bl	80087c0 <HAL_GetTick>
 800c368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c36a:	e008      	b.n	800c37e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c36c:	f7fc fa28 	bl	80087c0 <HAL_GetTick>
 800c370:	4602      	mov	r2, r0
 800c372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c374:	1ad3      	subs	r3, r2, r3
 800c376:	2b02      	cmp	r3, #2
 800c378:	d901      	bls.n	800c37e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800c37a:	2303      	movs	r3, #3
 800c37c:	e103      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800c37e:	f7ff fac8 	bl	800b912 <LL_RCC_HSI48_IsReady>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d0f1      	beq.n	800c36c <HAL_RCC_OscConfig+0x4c0>
 800c388:	e013      	b.n	800c3b2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c38a:	f7ff fab1 	bl	800b8f0 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c38e:	f7fc fa17 	bl	80087c0 <HAL_GetTick>
 800c392:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c394:	e008      	b.n	800c3a8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c396:	f7fc fa13 	bl	80087c0 <HAL_GetTick>
 800c39a:	4602      	mov	r2, r0
 800c39c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c39e:	1ad3      	subs	r3, r2, r3
 800c3a0:	2b02      	cmp	r3, #2
 800c3a2:	d901      	bls.n	800c3a8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800c3a4:	2303      	movs	r3, #3
 800c3a6:	e0ee      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800c3a8:	f7ff fab3 	bl	800b912 <LL_RCC_HSI48_IsReady>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d1f1      	bne.n	800c396 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	f000 80e4 	beq.w	800c584 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c3bc:	f7ff fc11 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800c3c0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800c3c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	f040 80b4 	bne.w	800c53c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	f003 0203 	and.w	r2, r3, #3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d123      	bne.n	800c42a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d11c      	bne.n	800c42a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	0a1b      	lsrs	r3, r3, #8
 800c3f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800c3fc:	429a      	cmp	r2, r3
 800c3fe:	d114      	bne.n	800c42a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d10d      	bne.n	800c42a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800c418:	429a      	cmp	r2, r3
 800c41a:	d106      	bne.n	800c42a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800c426:	429a      	cmp	r2, r3
 800c428:	d05d      	beq.n	800c4e6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	2b0c      	cmp	r3, #12
 800c42e:	d058      	beq.n	800c4e2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800c430:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800c43e:	2301      	movs	r3, #1
 800c440:	e0a1      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800c442:	f7ff fc84 	bl	800bd4e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c446:	f7fc f9bb 	bl	80087c0 <HAL_GetTick>
 800c44a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c44c:	e008      	b.n	800c460 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c44e:	f7fc f9b7 	bl	80087c0 <HAL_GetTick>
 800c452:	4602      	mov	r2, r0
 800c454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c456:	1ad3      	subs	r3, r2, r3
 800c458:	2b02      	cmp	r3, #2
 800c45a:	d901      	bls.n	800c460 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e092      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d1ef      	bne.n	800c44e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c46e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	4b30      	ldr	r3, [pc, #192]	@ (800c538 <HAL_RCC_OscConfig+0x68c>)
 800c476:	4013      	ands	r3, r2
 800c478:	687a      	ldr	r2, [r7, #4]
 800c47a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800c47c:	687a      	ldr	r2, [r7, #4]
 800c47e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800c480:	4311      	orrs	r1, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800c486:	0212      	lsls	r2, r2, #8
 800c488:	4311      	orrs	r1, r2
 800c48a:	687a      	ldr	r2, [r7, #4]
 800c48c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c48e:	4311      	orrs	r1, r2
 800c490:	687a      	ldr	r2, [r7, #4]
 800c492:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800c494:	4311      	orrs	r1, r2
 800c496:	687a      	ldr	r2, [r7, #4]
 800c498:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800c49a:	430a      	orrs	r2, r1
 800c49c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800c4a4:	f7ff fc44 	bl	800bd30 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c4a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800c4b8:	f7fc f982 	bl	80087c0 <HAL_GetTick>
 800c4bc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4be:	e008      	b.n	800c4d2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c4c0:	f7fc f97e 	bl	80087c0 <HAL_GetTick>
 800c4c4:	4602      	mov	r2, r0
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	1ad3      	subs	r3, r2, r3
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d901      	bls.n	800c4d2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800c4ce:	2303      	movs	r3, #3
 800c4d0:	e059      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d0ef      	beq.n	800c4c0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c4e0:	e050      	b.n	800c584 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	e04f      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c4e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d147      	bne.n	800c584 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800c4f4:	f7ff fc1c 	bl	800bd30 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c4f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4fc:	68db      	ldr	r3, [r3, #12]
 800c4fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c506:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c508:	f7fc f95a 	bl	80087c0 <HAL_GetTick>
 800c50c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c50e:	e008      	b.n	800c522 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c510:	f7fc f956 	bl	80087c0 <HAL_GetTick>
 800c514:	4602      	mov	r2, r0
 800c516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c518:	1ad3      	subs	r3, r2, r3
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d901      	bls.n	800c522 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	e031      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d0ef      	beq.n	800c510 <HAL_RCC_OscConfig+0x664>
 800c530:	e028      	b.n	800c584 <HAL_RCC_OscConfig+0x6d8>
 800c532:	bf00      	nop
 800c534:	58000400 	.word	0x58000400
 800c538:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c53c:	693b      	ldr	r3, [r7, #16]
 800c53e:	2b0c      	cmp	r3, #12
 800c540:	d01e      	beq.n	800c580 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c542:	f7ff fc04 	bl	800bd4e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c546:	f7fc f93b 	bl	80087c0 <HAL_GetTick>
 800c54a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c54c:	e008      	b.n	800c560 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c54e:	f7fc f937 	bl	80087c0 <HAL_GetTick>
 800c552:	4602      	mov	r2, r0
 800c554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	2b02      	cmp	r3, #2
 800c55a:	d901      	bls.n	800c560 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e012      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d1ef      	bne.n	800c54e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800c56e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c578:	4b05      	ldr	r3, [pc, #20]	@ (800c590 <HAL_RCC_OscConfig+0x6e4>)
 800c57a:	4013      	ands	r3, r2
 800c57c:	60cb      	str	r3, [r1, #12]
 800c57e:	e001      	b.n	800c584 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800c580:	2301      	movs	r3, #1
 800c582:	e000      	b.n	800c586 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3734      	adds	r7, #52	@ 0x34
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd90      	pop	{r4, r7, pc}
 800c58e:	bf00      	nop
 800c590:	eefefffc 	.word	0xeefefffc

0800c594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d101      	bne.n	800c5a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e12d      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c5a8:	4b98      	ldr	r3, [pc, #608]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0307 	and.w	r3, r3, #7
 800c5b0:	683a      	ldr	r2, [r7, #0]
 800c5b2:	429a      	cmp	r2, r3
 800c5b4:	d91b      	bls.n	800c5ee <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c5b6:	4b95      	ldr	r3, [pc, #596]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f023 0207 	bic.w	r2, r3, #7
 800c5be:	4993      	ldr	r1, [pc, #588]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5c6:	f7fc f8fb 	bl	80087c0 <HAL_GetTick>
 800c5ca:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5cc:	e008      	b.n	800c5e0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c5ce:	f7fc f8f7 	bl	80087c0 <HAL_GetTick>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	1ad3      	subs	r3, r2, r3
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d901      	bls.n	800c5e0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e111      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c5e0:	4b8a      	ldr	r3, [pc, #552]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0307 	and.w	r3, r3, #7
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d1ef      	bne.n	800c5ce <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f003 0302 	and.w	r3, r3, #2
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d016      	beq.n	800c628 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	689b      	ldr	r3, [r3, #8]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7ff fafb 	bl	800bbfa <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c604:	f7fc f8dc 	bl	80087c0 <HAL_GetTick>
 800c608:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c60a:	e008      	b.n	800c61e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c60c:	f7fc f8d8 	bl	80087c0 <HAL_GetTick>
 800c610:	4602      	mov	r2, r0
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	1ad3      	subs	r3, r2, r3
 800c616:	2b02      	cmp	r3, #2
 800c618:	d901      	bls.n	800c61e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	e0f2      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800c61e:	f7ff fbe8 	bl	800bdf2 <LL_RCC_IsActiveFlag_HPRE>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0f1      	beq.n	800c60c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	f003 0320 	and.w	r3, r3, #32
 800c630:	2b00      	cmp	r3, #0
 800c632:	d016      	beq.n	800c662 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	695b      	ldr	r3, [r3, #20]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff faf2 	bl	800bc22 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c63e:	f7fc f8bf 	bl	80087c0 <HAL_GetTick>
 800c642:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c644:	e008      	b.n	800c658 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c646:	f7fc f8bb 	bl	80087c0 <HAL_GetTick>
 800c64a:	4602      	mov	r2, r0
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	1ad3      	subs	r3, r2, r3
 800c650:	2b02      	cmp	r3, #2
 800c652:	d901      	bls.n	800c658 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800c654:	2303      	movs	r3, #3
 800c656:	e0d5      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800c658:	f7ff fbdd 	bl	800be16 <LL_RCC_IsActiveFlag_C2HPRE>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d0f1      	beq.n	800c646 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d016      	beq.n	800c69c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	4618      	mov	r0, r3
 800c674:	f7ff faeb 	bl	800bc4e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c678:	f7fc f8a2 	bl	80087c0 <HAL_GetTick>
 800c67c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c67e:	e008      	b.n	800c692 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c680:	f7fc f89e 	bl	80087c0 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2b02      	cmp	r3, #2
 800c68c:	d901      	bls.n	800c692 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e0b8      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800c692:	f7ff fbd3 	bl	800be3c <LL_RCC_IsActiveFlag_SHDHPRE>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d0f1      	beq.n	800c680 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0304 	and.w	r3, r3, #4
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d016      	beq.n	800c6d6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f7ff fae5 	bl	800bc7c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c6b2:	f7fc f885 	bl	80087c0 <HAL_GetTick>
 800c6b6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c6b8:	e008      	b.n	800c6cc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c6ba:	f7fc f881 	bl	80087c0 <HAL_GetTick>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	2b02      	cmp	r3, #2
 800c6c6:	d901      	bls.n	800c6cc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800c6c8:	2303      	movs	r3, #3
 800c6ca:	e09b      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800c6cc:	f7ff fbc9 	bl	800be62 <LL_RCC_IsActiveFlag_PPRE1>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d0f1      	beq.n	800c6ba <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f003 0308 	and.w	r3, r3, #8
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d017      	beq.n	800c712 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	00db      	lsls	r3, r3, #3
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7ff fadb 	bl	800bca4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800c6ee:	f7fc f867 	bl	80087c0 <HAL_GetTick>
 800c6f2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c6f4:	e008      	b.n	800c708 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800c6f6:	f7fc f863 	bl	80087c0 <HAL_GetTick>
 800c6fa:	4602      	mov	r2, r0
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	2b02      	cmp	r3, #2
 800c702:	d901      	bls.n	800c708 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800c704:	2303      	movs	r3, #3
 800c706:	e07d      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800c708:	f7ff fbbd 	bl	800be86 <LL_RCC_IsActiveFlag_PPRE2>
 800c70c:	4603      	mov	r3, r0
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0f1      	beq.n	800c6f6 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d043      	beq.n	800c7a6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	2b02      	cmp	r3, #2
 800c724:	d106      	bne.n	800c734 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800c726:	f7ff f87b 	bl	800b820 <LL_RCC_HSE_IsReady>
 800c72a:	4603      	mov	r3, r0
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d11e      	bne.n	800c76e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e067      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d106      	bne.n	800c74a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800c73c:	f7ff fb16 	bl	800bd6c <LL_RCC_PLL_IsReady>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d113      	bne.n	800c76e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c746:	2301      	movs	r3, #1
 800c748:	e05c      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	685b      	ldr	r3, [r3, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d106      	bne.n	800c760 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800c752:	f7ff f9e3 	bl	800bb1c <LL_RCC_MSI_IsReady>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d108      	bne.n	800c76e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c75c:	2301      	movs	r3, #1
 800c75e:	e051      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800c760:	f7ff f88e 	bl	800b880 <LL_RCC_HSI_IsReady>
 800c764:	4603      	mov	r3, r0
 800c766:	2b00      	cmp	r3, #0
 800c768:	d101      	bne.n	800c76e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800c76a:	2301      	movs	r3, #1
 800c76c:	e04a      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff fa21 	bl	800bbba <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c778:	f7fc f822 	bl	80087c0 <HAL_GetTick>
 800c77c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c77e:	e00a      	b.n	800c796 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c780:	f7fc f81e 	bl	80087c0 <HAL_GetTick>
 800c784:	4602      	mov	r2, r0
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	1ad3      	subs	r3, r2, r3
 800c78a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c78e:	4293      	cmp	r3, r2
 800c790:	d901      	bls.n	800c796 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800c792:	2303      	movs	r3, #3
 800c794:	e036      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c796:	f7ff fa24 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800c79a:	4602      	mov	r2, r0
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	685b      	ldr	r3, [r3, #4]
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d1ec      	bne.n	800c780 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c7a6:	4b19      	ldr	r3, [pc, #100]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f003 0307 	and.w	r3, r3, #7
 800c7ae:	683a      	ldr	r2, [r7, #0]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d21b      	bcs.n	800c7ec <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c7b4:	4b15      	ldr	r3, [pc, #84]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f023 0207 	bic.w	r2, r3, #7
 800c7bc:	4913      	ldr	r1, [pc, #76]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	4313      	orrs	r3, r2
 800c7c2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c7c4:	f7fb fffc 	bl	80087c0 <HAL_GetTick>
 800c7c8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7ca:	e008      	b.n	800c7de <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c7cc:	f7fb fff8 	bl	80087c0 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d901      	bls.n	800c7de <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e012      	b.n	800c804 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c7de:	4b0b      	ldr	r3, [pc, #44]	@ (800c80c <HAL_RCC_ClockConfig+0x278>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 0307 	and.w	r3, r3, #7
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	d1ef      	bne.n	800c7cc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800c7ec:	f000 f87e 	bl	800c8ec <HAL_RCC_GetHCLKFreq>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	4a07      	ldr	r2, [pc, #28]	@ (800c810 <HAL_RCC_ClockConfig+0x27c>)
 800c7f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800c7f6:	f7fb ffef 	bl	80087d8 <HAL_GetTickPrio>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fb ff91 	bl	8008724 <HAL_InitTick>
 800c802:	4603      	mov	r3, r0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}
 800c80c:	58004000 	.word	0x58004000
 800c810:	20000008 	.word	0x20000008

0800c814 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c814:	b590      	push	{r4, r7, lr}
 800c816:	b085      	sub	sp, #20
 800c818:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c81a:	f7ff f9e2 	bl	800bbe2 <LL_RCC_GetSysClkSource>
 800c81e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d10a      	bne.n	800c83c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c826:	f7ff f99e 	bl	800bb66 <LL_RCC_MSI_GetRange>
 800c82a:	4603      	mov	r3, r0
 800c82c:	091b      	lsrs	r3, r3, #4
 800c82e:	f003 030f 	and.w	r3, r3, #15
 800c832:	4a2b      	ldr	r2, [pc, #172]	@ (800c8e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	e04b      	b.n	800c8d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2b04      	cmp	r3, #4
 800c840:	d102      	bne.n	800c848 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c842:	4b28      	ldr	r3, [pc, #160]	@ (800c8e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c844:	60fb      	str	r3, [r7, #12]
 800c846:	e045      	b.n	800c8d4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2b08      	cmp	r3, #8
 800c84c:	d10a      	bne.n	800c864 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c84e:	f7fe ffb7 	bl	800b7c0 <LL_RCC_HSE_IsEnabledDiv2>
 800c852:	4603      	mov	r3, r0
 800c854:	2b01      	cmp	r3, #1
 800c856:	d102      	bne.n	800c85e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800c858:	4b22      	ldr	r3, [pc, #136]	@ (800c8e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c85a:	60fb      	str	r3, [r7, #12]
 800c85c:	e03a      	b.n	800c8d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800c85e:	4b22      	ldr	r3, [pc, #136]	@ (800c8e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c860:	60fb      	str	r3, [r7, #12]
 800c862:	e037      	b.n	800c8d4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800c864:	f7ff fab9 	bl	800bdda <LL_RCC_PLL_GetMainSource>
 800c868:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	2b02      	cmp	r3, #2
 800c86e:	d003      	beq.n	800c878 <HAL_RCC_GetSysClockFreq+0x64>
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	2b03      	cmp	r3, #3
 800c874:	d003      	beq.n	800c87e <HAL_RCC_GetSysClockFreq+0x6a>
 800c876:	e00d      	b.n	800c894 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800c878:	4b1a      	ldr	r3, [pc, #104]	@ (800c8e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c87a:	60bb      	str	r3, [r7, #8]
        break;
 800c87c:	e015      	b.n	800c8aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800c87e:	f7fe ff9f 	bl	800b7c0 <LL_RCC_HSE_IsEnabledDiv2>
 800c882:	4603      	mov	r3, r0
 800c884:	2b01      	cmp	r3, #1
 800c886:	d102      	bne.n	800c88e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800c888:	4b16      	ldr	r3, [pc, #88]	@ (800c8e4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800c88a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800c88c:	e00d      	b.n	800c8aa <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800c88e:	4b16      	ldr	r3, [pc, #88]	@ (800c8e8 <HAL_RCC_GetSysClockFreq+0xd4>)
 800c890:	60bb      	str	r3, [r7, #8]
        break;
 800c892:	e00a      	b.n	800c8aa <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800c894:	f7ff f967 	bl	800bb66 <LL_RCC_MSI_GetRange>
 800c898:	4603      	mov	r3, r0
 800c89a:	091b      	lsrs	r3, r3, #4
 800c89c:	f003 030f 	and.w	r3, r3, #15
 800c8a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c8e0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800c8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8a6:	60bb      	str	r3, [r7, #8]
        break;
 800c8a8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800c8aa:	f7ff fa71 	bl	800bd90 <LL_RCC_PLL_GetN>
 800c8ae:	4602      	mov	r2, r0
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	fb03 f402 	mul.w	r4, r3, r2
 800c8b6:	f7ff fa84 	bl	800bdc2 <LL_RCC_PLL_GetDivider>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	091b      	lsrs	r3, r3, #4
 800c8be:	3301      	adds	r3, #1
 800c8c0:	fbb4 f4f3 	udiv	r4, r4, r3
 800c8c4:	f7ff fa71 	bl	800bdaa <LL_RCC_PLL_GetR>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	0f5b      	lsrs	r3, r3, #29
 800c8cc:	3301      	adds	r3, #1
 800c8ce:	fbb4 f3f3 	udiv	r3, r4, r3
 800c8d2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3714      	adds	r7, #20
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd90      	pop	{r4, r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	080155e8 	.word	0x080155e8
 800c8e4:	00f42400 	.word	0x00f42400
 800c8e8:	01e84800 	.word	0x01e84800

0800c8ec <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c8ec:	b598      	push	{r3, r4, r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c8f0:	f7ff ff90 	bl	800c814 <HAL_RCC_GetSysClockFreq>
 800c8f4:	4604      	mov	r4, r0
 800c8f6:	f7ff f9e9 	bl	800bccc <LL_RCC_GetAHBPrescaler>
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	091b      	lsrs	r3, r3, #4
 800c8fe:	f003 030f 	and.w	r3, r3, #15
 800c902:	4a03      	ldr	r2, [pc, #12]	@ (800c910 <HAL_RCC_GetHCLKFreq+0x24>)
 800c904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c908:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	bd98      	pop	{r3, r4, r7, pc}
 800c910:	08015588 	.word	0x08015588

0800c914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c914:	b598      	push	{r3, r4, r7, lr}
 800c916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c918:	f7ff ffe8 	bl	800c8ec <HAL_RCC_GetHCLKFreq>
 800c91c:	4604      	mov	r4, r0
 800c91e:	f7ff f9ef 	bl	800bd00 <LL_RCC_GetAPB1Prescaler>
 800c922:	4603      	mov	r3, r0
 800c924:	0a1b      	lsrs	r3, r3, #8
 800c926:	f003 0307 	and.w	r3, r3, #7
 800c92a:	4a04      	ldr	r2, [pc, #16]	@ (800c93c <HAL_RCC_GetPCLK1Freq+0x28>)
 800c92c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c930:	f003 031f 	and.w	r3, r3, #31
 800c934:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c938:	4618      	mov	r0, r3
 800c93a:	bd98      	pop	{r3, r4, r7, pc}
 800c93c:	080155c8 	.word	0x080155c8

0800c940 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c940:	b598      	push	{r3, r4, r7, lr}
 800c942:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c944:	f7ff ffd2 	bl	800c8ec <HAL_RCC_GetHCLKFreq>
 800c948:	4604      	mov	r4, r0
 800c94a:	f7ff f9e5 	bl	800bd18 <LL_RCC_GetAPB2Prescaler>
 800c94e:	4603      	mov	r3, r0
 800c950:	0adb      	lsrs	r3, r3, #11
 800c952:	f003 0307 	and.w	r3, r3, #7
 800c956:	4a04      	ldr	r2, [pc, #16]	@ (800c968 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c95c:	f003 031f 	and.w	r3, r3, #31
 800c960:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c964:	4618      	mov	r0, r3
 800c966:	bd98      	pop	{r3, r4, r7, pc}
 800c968:	080155c8 	.word	0x080155c8

0800c96c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c96c:	b590      	push	{r4, r7, lr}
 800c96e:	b085      	sub	sp, #20
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2bb0      	cmp	r3, #176	@ 0xb0
 800c978:	d903      	bls.n	800c982 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c97a:	4b15      	ldr	r3, [pc, #84]	@ (800c9d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c97c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e007      	b.n	800c992 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	091b      	lsrs	r3, r3, #4
 800c986:	f003 030f 	and.w	r3, r3, #15
 800c98a:	4a11      	ldr	r2, [pc, #68]	@ (800c9d0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c98c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c990:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c992:	f7ff f9a7 	bl	800bce4 <LL_RCC_GetAHB4Prescaler>
 800c996:	4603      	mov	r3, r0
 800c998:	091b      	lsrs	r3, r3, #4
 800c99a:	f003 030f 	and.w	r3, r3, #15
 800c99e:	4a0d      	ldr	r2, [pc, #52]	@ (800c9d4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c9a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9aa:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	4a0a      	ldr	r2, [pc, #40]	@ (800c9d8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c9b0:	fba2 2303 	umull	r2, r3, r2, r3
 800c9b4:	0c9c      	lsrs	r4, r3, #18
 800c9b6:	f7fe fef5 	bl	800b7a4 <HAL_PWREx_GetVoltageRange>
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	4619      	mov	r1, r3
 800c9be:	4620      	mov	r0, r4
 800c9c0:	f000 f80c 	bl	800c9dc <RCC_SetFlashLatency>
 800c9c4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3714      	adds	r7, #20
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd90      	pop	{r4, r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	080155e8 	.word	0x080155e8
 800c9d4:	08015588 	.word	0x08015588
 800c9d8:	431bde83 	.word	0x431bde83

0800c9dc <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c9dc:	b590      	push	{r4, r7, lr}
 800c9de:	b093      	sub	sp, #76	@ 0x4c
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	6078      	str	r0, [r7, #4]
 800c9e4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c9e6:	4b37      	ldr	r3, [pc, #220]	@ (800cac4 <RCC_SetFlashLatency+0xe8>)
 800c9e8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c9ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c9ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c9f2:	4a35      	ldr	r2, [pc, #212]	@ (800cac8 <RCC_SetFlashLatency+0xec>)
 800c9f4:	f107 031c 	add.w	r3, r7, #28
 800c9f8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c9fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c9fe:	4b33      	ldr	r3, [pc, #204]	@ (800cacc <RCC_SetFlashLatency+0xf0>)
 800ca00:	f107 040c 	add.w	r4, r7, #12
 800ca04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ca06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ca14:	d11a      	bne.n	800ca4c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ca16:	2300      	movs	r3, #0
 800ca18:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca1a:	e013      	b.n	800ca44 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800ca1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca1e:	009b      	lsls	r3, r3, #2
 800ca20:	3348      	adds	r3, #72	@ 0x48
 800ca22:	443b      	add	r3, r7
 800ca24:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d807      	bhi.n	800ca3e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ca2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	3348      	adds	r3, #72	@ 0x48
 800ca34:	443b      	add	r3, r7
 800ca36:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ca3a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ca3c:	e020      	b.n	800ca80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800ca3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca40:	3301      	adds	r3, #1
 800ca42:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ca46:	2b03      	cmp	r3, #3
 800ca48:	d9e8      	bls.n	800ca1c <RCC_SetFlashLatency+0x40>
 800ca4a:	e019      	b.n	800ca80 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca50:	e013      	b.n	800ca7a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800ca52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca54:	009b      	lsls	r3, r3, #2
 800ca56:	3348      	adds	r3, #72	@ 0x48
 800ca58:	443b      	add	r3, r7
 800ca5a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	429a      	cmp	r2, r3
 800ca62:	d807      	bhi.n	800ca74 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800ca64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca66:	009b      	lsls	r3, r3, #2
 800ca68:	3348      	adds	r3, #72	@ 0x48
 800ca6a:	443b      	add	r3, r7
 800ca6c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800ca70:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800ca72:	e005      	b.n	800ca80 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800ca74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca76:	3301      	adds	r3, #1
 800ca78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	d9e8      	bls.n	800ca52 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800ca80:	4b13      	ldr	r3, [pc, #76]	@ (800cad0 <RCC_SetFlashLatency+0xf4>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	f023 0207 	bic.w	r2, r3, #7
 800ca88:	4911      	ldr	r1, [pc, #68]	@ (800cad0 <RCC_SetFlashLatency+0xf4>)
 800ca8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ca90:	f7fb fe96 	bl	80087c0 <HAL_GetTick>
 800ca94:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800ca96:	e008      	b.n	800caaa <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800ca98:	f7fb fe92 	bl	80087c0 <HAL_GetTick>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caa0:	1ad3      	subs	r3, r2, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d901      	bls.n	800caaa <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e007      	b.n	800caba <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800caaa:	4b09      	ldr	r3, [pc, #36]	@ (800cad0 <RCC_SetFlashLatency+0xf4>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	f003 0307 	and.w	r3, r3, #7
 800cab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d1ef      	bne.n	800ca98 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	374c      	adds	r7, #76	@ 0x4c
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd90      	pop	{r4, r7, pc}
 800cac2:	bf00      	nop
 800cac4:	08014298 	.word	0x08014298
 800cac8:	080142a8 	.word	0x080142a8
 800cacc:	080142b4 	.word	0x080142b4
 800cad0:	58004000 	.word	0x58004000

0800cad4 <LL_RCC_LSE_IsEnabled>:
{
 800cad4:	b480      	push	{r7}
 800cad6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800cad8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cadc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cae0:	f003 0301 	and.w	r3, r3, #1
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <LL_RCC_LSE_IsEnabled+0x18>
 800cae8:	2301      	movs	r3, #1
 800caea:	e000      	b.n	800caee <LL_RCC_LSE_IsEnabled+0x1a>
 800caec:	2300      	movs	r3, #0
}
 800caee:	4618      	mov	r0, r3
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <LL_RCC_LSE_IsReady>:
{
 800caf8:	b480      	push	{r7}
 800cafa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800cafc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cb04:	f003 0302 	and.w	r3, r3, #2
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d101      	bne.n	800cb10 <LL_RCC_LSE_IsReady+0x18>
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	e000      	b.n	800cb12 <LL_RCC_LSE_IsReady+0x1a>
 800cb10:	2300      	movs	r3, #0
}
 800cb12:	4618      	mov	r0, r3
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <LL_RCC_MSI_EnablePLLMode>:
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800cb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cb2a:	f043 0304 	orr.w	r3, r3, #4
 800cb2e:	6013      	str	r3, [r2, #0]
}
 800cb30:	bf00      	nop
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <LL_RCC_SetRFWKPClockSource>:
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b083      	sub	sp, #12
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800cb42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cb4a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800cb4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	4313      	orrs	r3, r2
 800cb56:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800cb5a:	bf00      	nop
 800cb5c:	370c      	adds	r7, #12
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <LL_RCC_SetSMPSClockSource>:
{
 800cb66:	b480      	push	{r7}
 800cb68:	b083      	sub	sp, #12
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800cb6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb74:	f023 0203 	bic.w	r2, r3, #3
 800cb78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4313      	orrs	r3, r2
 800cb80:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cb82:	bf00      	nop
 800cb84:	370c      	adds	r7, #12
 800cb86:	46bd      	mov	sp, r7
 800cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8c:	4770      	bx	lr

0800cb8e <LL_RCC_SetSMPSPrescaler>:
{
 800cb8e:	b480      	push	{r7}
 800cb90:	b083      	sub	sp, #12
 800cb92:	af00      	add	r7, sp, #0
 800cb94:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800cb96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cb9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800cba0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4313      	orrs	r3, r2
 800cba8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800cbaa:	bf00      	nop
 800cbac:	370c      	adds	r7, #12
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <LL_RCC_SetUSARTClockSource>:
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b083      	sub	sp, #12
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800cbbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbc6:	f023 0203 	bic.w	r2, r3, #3
 800cbca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4313      	orrs	r3, r2
 800cbd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cbd6:	bf00      	nop
 800cbd8:	370c      	adds	r7, #12
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe0:	4770      	bx	lr

0800cbe2 <LL_RCC_SetLPUARTClockSource>:
{
 800cbe2:	b480      	push	{r7}
 800cbe4:	b083      	sub	sp, #12
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800cbea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cbee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cbf2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800cbf6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4313      	orrs	r3, r2
 800cbfe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc02:	bf00      	nop
 800cc04:	370c      	adds	r7, #12
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr

0800cc0e <LL_RCC_SetI2CClockSource>:
{
 800cc0e:	b480      	push	{r7}
 800cc10:	b083      	sub	sp, #12
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800cc16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	091b      	lsrs	r3, r3, #4
 800cc22:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cc26:	43db      	mvns	r3, r3
 800cc28:	401a      	ands	r2, r3
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	011b      	lsls	r3, r3, #4
 800cc2e:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800cc32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc36:	4313      	orrs	r3, r2
 800cc38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc3c:	bf00      	nop
 800cc3e:	370c      	adds	r7, #12
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <LL_RCC_SetLPTIMClockSource>:
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b083      	sub	sp, #12
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800cc50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc54:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	0c1b      	lsrs	r3, r3, #16
 800cc5c:	041b      	lsls	r3, r3, #16
 800cc5e:	43db      	mvns	r3, r3
 800cc60:	401a      	ands	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	041b      	lsls	r3, r3, #16
 800cc66:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc70:	bf00      	nop
 800cc72:	370c      	adds	r7, #12
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr

0800cc7c <LL_RCC_SetSAIClockSource>:
{
 800cc7c:	b480      	push	{r7}
 800cc7e:	b083      	sub	sp, #12
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800cc84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cc88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800cc90:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <LL_RCC_SetRNGClockSource>:
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800ccb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ccb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccb8:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800ccbc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ccc8:	bf00      	nop
 800ccca:	370c      	adds	r7, #12
 800cccc:	46bd      	mov	sp, r7
 800ccce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd2:	4770      	bx	lr

0800ccd4 <LL_RCC_SetCLK48ClockSource>:
{
 800ccd4:	b480      	push	{r7}
 800ccd6:	b083      	sub	sp, #12
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800ccdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cce4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800cce8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4313      	orrs	r3, r2
 800ccf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800ccf4:	bf00      	nop
 800ccf6:	370c      	adds	r7, #12
 800ccf8:	46bd      	mov	sp, r7
 800ccfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfe:	4770      	bx	lr

0800cd00 <LL_RCC_SetUSBClockSource>:
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b082      	sub	sp, #8
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff ffe3 	bl	800ccd4 <LL_RCC_SetCLK48ClockSource>
}
 800cd0e:	bf00      	nop
 800cd10:	3708      	adds	r7, #8
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <LL_RCC_SetADCClockSource>:
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800cd1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cd26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800cd2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	4313      	orrs	r3, r2
 800cd32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800cd36:	bf00      	nop
 800cd38:	370c      	adds	r7, #12
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd40:	4770      	bx	lr

0800cd42 <LL_RCC_SetRTCClockSource>:
{
 800cd42:	b480      	push	{r7}
 800cd44:	b083      	sub	sp, #12
 800cd46:	af00      	add	r7, sp, #0
 800cd48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800cd4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd52:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cd56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4313      	orrs	r3, r2
 800cd5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <LL_RCC_GetRTCClockSource>:
{
 800cd6e:	b480      	push	{r7}
 800cd70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800cd72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <LL_RCC_ForceBackupDomainReset>:
{
 800cd88:	b480      	push	{r7}
 800cd8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cd8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cd90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cd98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cda0:	bf00      	nop
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr

0800cdaa <LL_RCC_ReleaseBackupDomainReset>:
{
 800cdaa:	b480      	push	{r7}
 800cdac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800cdae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800cdc2:	bf00      	nop
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <LL_RCC_PLLSAI1_Enable>:
{
 800cdcc:	b480      	push	{r7}
 800cdce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cdd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800cdde:	6013      	str	r3, [r2, #0]
}
 800cde0:	bf00      	nop
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <LL_RCC_PLLSAI1_Disable>:
{
 800cdea:	b480      	push	{r7}
 800cdec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800cdee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cdf8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800cdfc:	6013      	str	r3, [r2, #0]
}
 800cdfe:	bf00      	nop
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr

0800ce08 <LL_RCC_PLLSAI1_IsReady>:
{
 800ce08:	b480      	push	{r7}
 800ce0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800ce0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce1a:	d101      	bne.n	800ce20 <LL_RCC_PLLSAI1_IsReady+0x18>
 800ce1c:	2301      	movs	r3, #1
 800ce1e:	e000      	b.n	800ce22 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800ce20:	2300      	movs	r3, #0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	46bd      	mov	sp, r7
 800ce26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2a:	4770      	bx	lr

0800ce2c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b088      	sub	sp, #32
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800ce34:	2300      	movs	r3, #0
 800ce36:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800ce38:	2300      	movs	r3, #0
 800ce3a:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d034      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce4c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ce50:	d021      	beq.n	800ce96 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800ce52:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800ce56:	d81b      	bhi.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ce58:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce5c:	d01d      	beq.n	800ce9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800ce5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce62:	d815      	bhi.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800ce68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce6c:	d110      	bne.n	800ce90 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800ce6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ce78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ce7c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800ce7e:	e00d      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	3304      	adds	r3, #4
 800ce84:	4618      	mov	r0, r3
 800ce86:	f000 f94d 	bl	800d124 <RCCEx_PLLSAI1_ConfigNP>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800ce8e:	e005      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	77fb      	strb	r3, [r7, #31]
        break;
 800ce94:	e002      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800ce9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce9c:	7ffb      	ldrb	r3, [r7, #31]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d105      	bne.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7ff fee8 	bl	800cc7c <LL_RCC_SetSAIClockSource>
 800ceac:	e001      	b.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ceae:	7ffb      	ldrb	r3, [r7, #31]
 800ceb0:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d046      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800cebe:	f7ff ff56 	bl	800cd6e <LL_RCC_GetRTCClockSource>
 800cec2:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cec8:	69ba      	ldr	r2, [r7, #24]
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d03c      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800cece:	f7fe fc59 	bl	800b784 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d105      	bne.n	800cee4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cedc:	4618      	mov	r0, r3
 800cede:	f7ff ff30 	bl	800cd42 <LL_RCC_SetRTCClockSource>
 800cee2:	e02e      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800cee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ceec:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800ceee:	f7ff ff4b 	bl	800cd88 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800cef2:	f7ff ff5a 	bl	800cdaa <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf00:	4313      	orrs	r3, r2
 800cf02:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800cf04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800cf0e:	f7ff fde1 	bl	800cad4 <LL_RCC_LSE_IsEnabled>
 800cf12:	4603      	mov	r3, r0
 800cf14:	2b01      	cmp	r3, #1
 800cf16:	d114      	bne.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800cf18:	f7fb fc52 	bl	80087c0 <HAL_GetTick>
 800cf1c:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800cf1e:	e00b      	b.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cf20:	f7fb fc4e 	bl	80087c0 <HAL_GetTick>
 800cf24:	4602      	mov	r2, r0
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cf2e:	4293      	cmp	r3, r2
 800cf30:	d902      	bls.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800cf32:	2303      	movs	r3, #3
 800cf34:	77fb      	strb	r3, [r7, #31]
              break;
 800cf36:	e004      	b.n	800cf42 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800cf38:	f7ff fdde 	bl	800caf8 <LL_RCC_LSE_IsReady>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	2b01      	cmp	r3, #1
 800cf40:	d1ee      	bne.n	800cf20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800cf42:	7ffb      	ldrb	r3, [r7, #31]
 800cf44:	77bb      	strb	r3, [r7, #30]
 800cf46:	e001      	b.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf48:	7ffb      	ldrb	r3, [r7, #31]
 800cf4a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f003 0301 	and.w	r3, r3, #1
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d004      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	699b      	ldr	r3, [r3, #24]
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7ff fe2a 	bl	800cbb6 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d004      	beq.n	800cf78 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7ff fe35 	bl	800cbe2 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	f003 0310 	and.w	r3, r3, #16
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d004      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7ff fe5d 	bl	800cc48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f003 0320 	and.w	r3, r3, #32
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d004      	beq.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f7ff fe52 	bl	800cc48 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f003 0304 	and.w	r3, r3, #4
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d004      	beq.n	800cfba <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6a1b      	ldr	r3, [r3, #32]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7ff fe2a 	bl	800cc0e <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f003 0308 	and.w	r3, r3, #8
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d004      	beq.n	800cfd0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7ff fe1f 	bl	800cc0e <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d022      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fe8d 	bl	800cd00 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cfea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfee:	d107      	bne.n	800d000 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800cff0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800cffa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800cffe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d004:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d008:	d10b      	bne.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	3304      	adds	r3, #4
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 f8e3 	bl	800d1da <RCCEx_PLLSAI1_ConfigNQ>
 800d014:	4603      	mov	r3, r0
 800d016:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d018:	7ffb      	ldrb	r3, [r7, #31]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d001      	beq.n	800d022 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800d01e:	7ffb      	ldrb	r3, [r7, #31]
 800d020:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d02b      	beq.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d032:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d036:	d008      	beq.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d040:	d003      	beq.n	800d04a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d046:	2b00      	cmp	r3, #0
 800d048:	d105      	bne.n	800d056 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d04e:	4618      	mov	r0, r3
 800d050:	f7ff fe2a 	bl	800cca8 <LL_RCC_SetRNGClockSource>
 800d054:	e00a      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x240>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d05a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	2000      	movs	r0, #0
 800d062:	f7ff fe21 	bl	800cca8 <LL_RCC_SetRNGClockSource>
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f7ff fe34 	bl	800ccd4 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d070:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800d074:	d107      	bne.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800d076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d07a:	68db      	ldr	r3, [r3, #12]
 800d07c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d084:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d022      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff fe3d 	bl	800cd16 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0a4:	d107      	bne.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d0a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d0b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d0b4:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d0ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d0be:	d10b      	bne.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	3304      	adds	r3, #4
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f000 f8e3 	bl	800d290 <RCCEx_PLLSAI1_ConfigNR>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800d0ce:	7ffb      	ldrb	r3, [r7, #31]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d001      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800d0d4:	7ffb      	ldrb	r3, [r7, #31]
 800d0d6:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d004      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7ff fd26 	bl	800cb3a <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d009      	beq.n	800d10e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fd45 	bl	800cb8e <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d108:	4618      	mov	r0, r3
 800d10a:	f7ff fd2c 	bl	800cb66 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800d10e:	7fbb      	ldrb	r3, [r7, #30]
}
 800d110:	4618      	mov	r0, r3
 800d112:	3720      	adds	r7, #32
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800d11c:	f7ff fcfe 	bl	800cb1c <LL_RCC_MSI_EnablePLLMode>
}
 800d120:	bf00      	nop
 800d122:	bd80      	pop	{r7, pc}

0800d124 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d12c:	2300      	movs	r3, #0
 800d12e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d130:	f7ff fe5b 	bl	800cdea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d134:	f7fb fb44 	bl	80087c0 <HAL_GetTick>
 800d138:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d13a:	e009      	b.n	800d150 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d13c:	f7fb fb40 	bl	80087c0 <HAL_GetTick>
 800d140:	4602      	mov	r2, r0
 800d142:	68bb      	ldr	r3, [r7, #8]
 800d144:	1ad3      	subs	r3, r2, r3
 800d146:	2b02      	cmp	r3, #2
 800d148:	d902      	bls.n	800d150 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	73fb      	strb	r3, [r7, #15]
      break;
 800d14e:	e004      	b.n	800d15a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d150:	f7ff fe5a 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d1f0      	bne.n	800d13c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800d15a:	7bfb      	ldrb	r3, [r7, #15]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d137      	bne.n	800d1d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	021b      	lsls	r3, r3, #8
 800d170:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d174:	4313      	orrs	r3, r2
 800d176:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800d178:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d17c:	691b      	ldr	r3, [r3, #16]
 800d17e:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	685b      	ldr	r3, [r3, #4]
 800d186:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d18a:	4313      	orrs	r3, r2
 800d18c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d18e:	f7ff fe1d 	bl	800cdcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d192:	f7fb fb15 	bl	80087c0 <HAL_GetTick>
 800d196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d198:	e009      	b.n	800d1ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d19a:	f7fb fb11 	bl	80087c0 <HAL_GetTick>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	68bb      	ldr	r3, [r7, #8]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	d902      	bls.n	800d1ae <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	73fb      	strb	r3, [r7, #15]
        break;
 800d1ac:	e004      	b.n	800d1b8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d1ae:	f7ff fe2b 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d1f0      	bne.n	800d19a <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800d1b8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d108      	bne.n	800d1d0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d1be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c2:	691a      	ldr	r2, [r3, #16]
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	691b      	ldr	r3, [r3, #16]
 800d1c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d1cc:	4313      	orrs	r3, r2
 800d1ce:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b084      	sub	sp, #16
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d1e6:	f7ff fe00 	bl	800cdea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d1ea:	f7fb fae9 	bl	80087c0 <HAL_GetTick>
 800d1ee:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d1f0:	e009      	b.n	800d206 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d1f2:	f7fb fae5 	bl	80087c0 <HAL_GetTick>
 800d1f6:	4602      	mov	r2, r0
 800d1f8:	68bb      	ldr	r3, [r7, #8]
 800d1fa:	1ad3      	subs	r3, r2, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d902      	bls.n	800d206 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	73fb      	strb	r3, [r7, #15]
      break;
 800d204:	e004      	b.n	800d210 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d206:	f7ff fdff 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d1f0      	bne.n	800d1f2 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800d210:	7bfb      	ldrb	r3, [r7, #15]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d137      	bne.n	800d286 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	021b      	lsls	r3, r3, #8
 800d226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d22a:	4313      	orrs	r3, r2
 800d22c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800d22e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d240:	4313      	orrs	r3, r2
 800d242:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d244:	f7ff fdc2 	bl	800cdcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d248:	f7fb faba 	bl	80087c0 <HAL_GetTick>
 800d24c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d24e:	e009      	b.n	800d264 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d250:	f7fb fab6 	bl	80087c0 <HAL_GetTick>
 800d254:	4602      	mov	r2, r0
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	1ad3      	subs	r3, r2, r3
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d902      	bls.n	800d264 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800d25e:	2303      	movs	r3, #3
 800d260:	73fb      	strb	r3, [r7, #15]
        break;
 800d262:	e004      	b.n	800d26e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d264:	f7ff fdd0 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b01      	cmp	r3, #1
 800d26c:	d1f0      	bne.n	800d250 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800d26e:	7bfb      	ldrb	r3, [r7, #15]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d108      	bne.n	800d286 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d278:	691a      	ldr	r2, [r3, #16]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	691b      	ldr	r3, [r3, #16]
 800d27e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d282:	4313      	orrs	r3, r2
 800d284:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d286:	7bfb      	ldrb	r3, [r7, #15]
}
 800d288:	4618      	mov	r0, r3
 800d28a:	3710      	adds	r7, #16
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b084      	sub	sp, #16
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d298:	2300      	movs	r3, #0
 800d29a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800d29c:	f7ff fda5 	bl	800cdea <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800d2a0:	f7fb fa8e 	bl	80087c0 <HAL_GetTick>
 800d2a4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d2a6:	e009      	b.n	800d2bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d2a8:	f7fb fa8a 	bl	80087c0 <HAL_GetTick>
 800d2ac:	4602      	mov	r2, r0
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	1ad3      	subs	r3, r2, r3
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d902      	bls.n	800d2bc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800d2b6:	2303      	movs	r3, #3
 800d2b8:	73fb      	strb	r3, [r7, #15]
      break;
 800d2ba:	e004      	b.n	800d2c6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800d2bc:	f7ff fda4 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d1f0      	bne.n	800d2a8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800d2c6:	7bfb      	ldrb	r3, [r7, #15]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d137      	bne.n	800d33c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800d2cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2d0:	691b      	ldr	r3, [r3, #16]
 800d2d2:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	021b      	lsls	r3, r3, #8
 800d2dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d2e0:	4313      	orrs	r3, r2
 800d2e2:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800d2e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d2f6:	4313      	orrs	r3, r2
 800d2f8:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800d2fa:	f7ff fd67 	bl	800cdcc <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d2fe:	f7fb fa5f 	bl	80087c0 <HAL_GetTick>
 800d302:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d304:	e009      	b.n	800d31a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800d306:	f7fb fa5b 	bl	80087c0 <HAL_GetTick>
 800d30a:	4602      	mov	r2, r0
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	1ad3      	subs	r3, r2, r3
 800d310:	2b02      	cmp	r3, #2
 800d312:	d902      	bls.n	800d31a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800d314:	2303      	movs	r3, #3
 800d316:	73fb      	strb	r3, [r7, #15]
        break;
 800d318:	e004      	b.n	800d324 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800d31a:	f7ff fd75 	bl	800ce08 <LL_RCC_PLLSAI1_IsReady>
 800d31e:	4603      	mov	r3, r0
 800d320:	2b01      	cmp	r3, #1
 800d322:	d1f0      	bne.n	800d306 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800d324:	7bfb      	ldrb	r3, [r7, #15]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d108      	bne.n	800d33c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800d32a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d32e:	691a      	ldr	r2, [r3, #16]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	691b      	ldr	r3, [r3, #16]
 800d334:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d338:	4313      	orrs	r3, r2
 800d33a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800d33c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}
	...

0800d348 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b084      	sub	sp, #16
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d101      	bne.n	800d35a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800d356:	2301      	movs	r3, #1
 800d358:	e09f      	b.n	800d49a <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800d360:	b2db      	uxtb	r3, r3
 800d362:	2b00      	cmp	r3, #0
 800d364:	d106      	bne.n	800d374 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2200      	movs	r2, #0
 800d36a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f7f5 ff82 	bl	8003278 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2202      	movs	r2, #2
 800d378:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d37c:	4b49      	ldr	r3, [pc, #292]	@ (800d4a4 <HAL_RTC_Init+0x15c>)
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	f003 0310 	and.w	r3, r3, #16
 800d384:	2b10      	cmp	r3, #16
 800d386:	d07e      	beq.n	800d486 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	22ca      	movs	r2, #202	@ 0xca
 800d38e:	625a      	str	r2, [r3, #36]	@ 0x24
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	2253      	movs	r2, #83	@ 0x53
 800d396:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f8ab 	bl	800d4f4 <RTC_EnterInitMode>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d00a      	beq.n	800d3ba <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	22ff      	movs	r2, #255	@ 0xff
 800d3aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2204      	movs	r2, #4
 800d3b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	73fb      	strb	r3, [r7, #15]
 800d3b8:	e067      	b.n	800d48a <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6812      	ldr	r2, [r2, #0]
 800d3c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d3c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3cc:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6899      	ldr	r1, [r3, #8]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	685a      	ldr	r2, [r3, #4]
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	691b      	ldr	r3, [r3, #16]
 800d3dc:	431a      	orrs	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	699b      	ldr	r3, [r3, #24]
 800d3e2:	431a      	orrs	r2, r3
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	687a      	ldr	r2, [r7, #4]
 800d3f2:	68d2      	ldr	r2, [r2, #12]
 800d3f4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	6919      	ldr	r1, [r3, #16]
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	041a      	lsls	r2, r3, #16
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	430a      	orrs	r2, r1
 800d408:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	68da      	ldr	r2, [r3, #12]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800d418:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f022 0203 	bic.w	r2, r2, #3
 800d428:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	69da      	ldr	r2, [r3, #28]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	695b      	ldr	r3, [r3, #20]
 800d438:	431a      	orrs	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	430a      	orrs	r2, r1
 800d440:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	f003 0320 	and.w	r3, r3, #32
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d113      	bne.n	800d478 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f829 	bl	800d4a8 <HAL_RTC_WaitForSynchro>
 800d456:	4603      	mov	r3, r0
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d00d      	beq.n	800d478 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	22ff      	movs	r2, #255	@ 0xff
 800d462:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2204      	movs	r2, #4
 800d468:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800d474:	2301      	movs	r3, #1
 800d476:	e010      	b.n	800d49a <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	22ff      	movs	r2, #255	@ 0xff
 800d47e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800d480:	2300      	movs	r3, #0
 800d482:	73fb      	strb	r3, [r7, #15]
 800d484:	e001      	b.n	800d48a <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800d48a:	7bfb      	ldrb	r3, [r7, #15]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d103      	bne.n	800d498 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2201      	movs	r2, #1
 800d494:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	40002800 	.word	0x40002800

0800d4a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	68da      	ldr	r2, [r3, #12]
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800d4be:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d4c0:	f7fb f97e 	bl	80087c0 <HAL_GetTick>
 800d4c4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d4c6:	e009      	b.n	800d4dc <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d4c8:	f7fb f97a 	bl	80087c0 <HAL_GetTick>
 800d4cc:	4602      	mov	r2, r0
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	1ad3      	subs	r3, r2, r3
 800d4d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d4d6:	d901      	bls.n	800d4dc <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800d4d8:	2303      	movs	r3, #3
 800d4da:	e007      	b.n	800d4ec <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	68db      	ldr	r3, [r3, #12]
 800d4e2:	f003 0320 	and.w	r3, r3, #32
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0ee      	beq.n	800d4c8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800d4ea:	2300      	movs	r3, #0
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3710      	adds	r7, #16
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	68db      	ldr	r3, [r3, #12]
 800d502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d506:	2b00      	cmp	r3, #0
 800d508:	d119      	bne.n	800d53e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	f04f 32ff 	mov.w	r2, #4294967295
 800d512:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d514:	f7fb f954 	bl	80087c0 <HAL_GetTick>
 800d518:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d51a:	e009      	b.n	800d530 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d51c:	f7fb f950 	bl	80087c0 <HAL_GetTick>
 800d520:	4602      	mov	r2, r0
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d52a:	d901      	bls.n	800d530 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800d52c:	2303      	movs	r3, #3
 800d52e:	e007      	b.n	800d540 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	68db      	ldr	r3, [r3, #12]
 800d536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d0ee      	beq.n	800d51c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	60f8      	str	r0, [r7, #12]
 800d550:	60b9      	str	r1, [r7, #8]
 800d552:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d55a:	2b01      	cmp	r3, #1
 800d55c:	d101      	bne.n	800d562 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800d55e:	2302      	movs	r3, #2
 800d560:	e0a8      	b.n	800d6b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2202      	movs	r2, #2
 800d56e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	22ca      	movs	r2, #202	@ 0xca
 800d578:	625a      	str	r2, [r3, #36]	@ 0x24
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	2253      	movs	r2, #83	@ 0x53
 800d580:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	689b      	ldr	r3, [r3, #8]
 800d588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d020      	beq.n	800d5d2 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800d590:	f7fb f916 	bl	80087c0 <HAL_GetTick>
 800d594:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d596:	e015      	b.n	800d5c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d598:	f7fb f912 	bl	80087c0 <HAL_GetTick>
 800d59c:	4602      	mov	r2, r0
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	1ad3      	subs	r3, r2, r3
 800d5a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d5a6:	d90d      	bls.n	800d5c4 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	22ff      	movs	r2, #255	@ 0xff
 800d5ae:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2203      	movs	r2, #3
 800d5b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800d5c0:	2303      	movs	r3, #3
 800d5c2:	e077      	b.n	800d6b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	68db      	ldr	r3, [r3, #12]
 800d5ca:	f003 0304 	and.w	r3, r3, #4
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d1e2      	bne.n	800d598 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689a      	ldr	r2, [r3, #8]
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d5e0:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	68db      	ldr	r3, [r3, #12]
 800d5e8:	b2da      	uxtb	r2, r3
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800d5f2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800d5f4:	f7fb f8e4 	bl	80087c0 <HAL_GetTick>
 800d5f8:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d5fa:	e015      	b.n	800d628 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d5fc:	f7fb f8e0 	bl	80087c0 <HAL_GetTick>
 800d600:	4602      	mov	r2, r0
 800d602:	697b      	ldr	r3, [r7, #20]
 800d604:	1ad3      	subs	r3, r2, r3
 800d606:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d60a:	d90d      	bls.n	800d628 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	22ff      	movs	r2, #255	@ 0xff
 800d612:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2203      	movs	r2, #3
 800d618:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2200      	movs	r2, #0
 800d620:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800d624:	2303      	movs	r3, #3
 800d626:	e045      	b.n	800d6b4 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	f003 0304 	and.w	r3, r3, #4
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0e2      	beq.n	800d5fc <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68ba      	ldr	r2, [r7, #8]
 800d63c:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	689a      	ldr	r2, [r3, #8]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	f022 0207 	bic.w	r2, r2, #7
 800d64c:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	6899      	ldr	r1, [r3, #8]
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	687a      	ldr	r2, [r7, #4]
 800d65a:	430a      	orrs	r2, r1
 800d65c:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800d65e:	4b17      	ldr	r3, [pc, #92]	@ (800d6bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d660:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d664:	4a15      	ldr	r2, [pc, #84]	@ (800d6bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d666:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d66a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800d66e:	4b13      	ldr	r3, [pc, #76]	@ (800d6bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	4a12      	ldr	r2, [pc, #72]	@ (800d6bc <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800d674:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d678:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	689a      	ldr	r2, [r3, #8]
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d688:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	689a      	ldr	r2, [r3, #8]
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800d698:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	22ff      	movs	r2, #255	@ 0xff
 800d6a0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800d6b2:	2300      	movs	r3, #0
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}
 800d6bc:	58000800 	.word	0x58000800

0800d6c0 <LL_RCC_GetUSARTClockSource>:
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800d6c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6cc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	4013      	ands	r3, r2
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	370c      	adds	r7, #12
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6de:	4770      	bx	lr

0800d6e0 <LL_RCC_GetLPUARTClockSource>:
{
 800d6e0:	b480      	push	{r7}
 800d6e2:	b083      	sub	sp, #12
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800d6e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6ec:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4013      	ands	r3, r2
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	370c      	adds	r7, #12
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fe:	4770      	bx	lr

0800d700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d101      	bne.n	800d712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d70e:	2301      	movs	r3, #1
 800d710:	e042      	b.n	800d798 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d106      	bne.n	800d72a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2200      	movs	r2, #0
 800d720:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d724:	6878      	ldr	r0, [r7, #4]
 800d726:	f7f5 fddd 	bl	80032e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2224      	movs	r2, #36	@ 0x24
 800d72e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f022 0201 	bic.w	r2, r2, #1
 800d740:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f000 fa50 	bl	800dbf0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d750:	6878      	ldr	r0, [r7, #4]
 800d752:	f000 f825 	bl	800d7a0 <UART_SetConfig>
 800d756:	4603      	mov	r3, r0
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d101      	bne.n	800d760 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d75c:	2301      	movs	r3, #1
 800d75e:	e01b      	b.n	800d798 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	685a      	ldr	r2, [r3, #4]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d76e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	689a      	ldr	r2, [r3, #8]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d77e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	681a      	ldr	r2, [r3, #0]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	f042 0201 	orr.w	r2, r2, #1
 800d78e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 facf 	bl	800dd34 <UART_CheckIdleState>
 800d796:	4603      	mov	r3, r0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d7a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7a4:	b08c      	sub	sp, #48	@ 0x30
 800d7a6:	af00      	add	r7, sp, #0
 800d7a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	689a      	ldr	r2, [r3, #8]
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	691b      	ldr	r3, [r3, #16]
 800d7b8:	431a      	orrs	r2, r3
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	695b      	ldr	r3, [r3, #20]
 800d7be:	431a      	orrs	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	69db      	ldr	r3, [r3, #28]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d7c8:	697b      	ldr	r3, [r7, #20]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	681a      	ldr	r2, [r3, #0]
 800d7ce:	4baf      	ldr	r3, [pc, #700]	@ (800da8c <UART_SetConfig+0x2ec>)
 800d7d0:	4013      	ands	r3, r2
 800d7d2:	697a      	ldr	r2, [r7, #20]
 800d7d4:	6812      	ldr	r2, [r2, #0]
 800d7d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7d8:	430b      	orrs	r3, r1
 800d7da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d7dc:	697b      	ldr	r3, [r7, #20]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	685b      	ldr	r3, [r3, #4]
 800d7e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	430a      	orrs	r2, r1
 800d7f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	699b      	ldr	r3, [r3, #24]
 800d7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d7f8:	697b      	ldr	r3, [r7, #20]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4aa4      	ldr	r2, [pc, #656]	@ (800da90 <UART_SetConfig+0x2f0>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d004      	beq.n	800d80c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d802:	697b      	ldr	r3, [r7, #20]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d808:	4313      	orrs	r3, r2
 800d80a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d80c:	697b      	ldr	r3, [r7, #20]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	689b      	ldr	r3, [r3, #8]
 800d812:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800d816:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800d81a:	697a      	ldr	r2, [r7, #20]
 800d81c:	6812      	ldr	r2, [r2, #0]
 800d81e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d820:	430b      	orrs	r3, r1
 800d822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d82a:	f023 010f 	bic.w	r1, r3, #15
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d832:	697b      	ldr	r3, [r7, #20]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	430a      	orrs	r2, r1
 800d838:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	4a95      	ldr	r2, [pc, #596]	@ (800da94 <UART_SetConfig+0x2f4>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d125      	bne.n	800d890 <UART_SetConfig+0xf0>
 800d844:	2003      	movs	r0, #3
 800d846:	f7ff ff3b 	bl	800d6c0 <LL_RCC_GetUSARTClockSource>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b03      	cmp	r3, #3
 800d84e:	d81b      	bhi.n	800d888 <UART_SetConfig+0xe8>
 800d850:	a201      	add	r2, pc, #4	@ (adr r2, 800d858 <UART_SetConfig+0xb8>)
 800d852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d856:	bf00      	nop
 800d858:	0800d869 	.word	0x0800d869
 800d85c:	0800d879 	.word	0x0800d879
 800d860:	0800d871 	.word	0x0800d871
 800d864:	0800d881 	.word	0x0800d881
 800d868:	2301      	movs	r3, #1
 800d86a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d86e:	e042      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d870:	2302      	movs	r3, #2
 800d872:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d876:	e03e      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d878:	2304      	movs	r3, #4
 800d87a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d87e:	e03a      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d880:	2308      	movs	r3, #8
 800d882:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d886:	e036      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d888:	2310      	movs	r3, #16
 800d88a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d88e:	e032      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d890:	697b      	ldr	r3, [r7, #20]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a7e      	ldr	r2, [pc, #504]	@ (800da90 <UART_SetConfig+0x2f0>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d12a      	bne.n	800d8f0 <UART_SetConfig+0x150>
 800d89a:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800d89e:	f7ff ff1f 	bl	800d6e0 <LL_RCC_GetLPUARTClockSource>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d8a8:	d01a      	beq.n	800d8e0 <UART_SetConfig+0x140>
 800d8aa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d8ae:	d81b      	bhi.n	800d8e8 <UART_SetConfig+0x148>
 800d8b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8b4:	d00c      	beq.n	800d8d0 <UART_SetConfig+0x130>
 800d8b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d8ba:	d815      	bhi.n	800d8e8 <UART_SetConfig+0x148>
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <UART_SetConfig+0x128>
 800d8c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d8c4:	d008      	beq.n	800d8d8 <UART_SetConfig+0x138>
 800d8c6:	e00f      	b.n	800d8e8 <UART_SetConfig+0x148>
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8ce:	e012      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d8d0:	2302      	movs	r3, #2
 800d8d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8d6:	e00e      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d8d8:	2304      	movs	r3, #4
 800d8da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8de:	e00a      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d8e0:	2308      	movs	r3, #8
 800d8e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8e6:	e006      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d8e8:	2310      	movs	r3, #16
 800d8ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d8ee:	e002      	b.n	800d8f6 <UART_SetConfig+0x156>
 800d8f0:	2310      	movs	r3, #16
 800d8f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a65      	ldr	r2, [pc, #404]	@ (800da90 <UART_SetConfig+0x2f0>)
 800d8fc:	4293      	cmp	r3, r2
 800d8fe:	f040 8097 	bne.w	800da30 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d902:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d906:	2b08      	cmp	r3, #8
 800d908:	d823      	bhi.n	800d952 <UART_SetConfig+0x1b2>
 800d90a:	a201      	add	r2, pc, #4	@ (adr r2, 800d910 <UART_SetConfig+0x170>)
 800d90c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d910:	0800d935 	.word	0x0800d935
 800d914:	0800d953 	.word	0x0800d953
 800d918:	0800d93d 	.word	0x0800d93d
 800d91c:	0800d953 	.word	0x0800d953
 800d920:	0800d943 	.word	0x0800d943
 800d924:	0800d953 	.word	0x0800d953
 800d928:	0800d953 	.word	0x0800d953
 800d92c:	0800d953 	.word	0x0800d953
 800d930:	0800d94b 	.word	0x0800d94b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d934:	f7fe ffee 	bl	800c914 <HAL_RCC_GetPCLK1Freq>
 800d938:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d93a:	e010      	b.n	800d95e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d93c:	4b56      	ldr	r3, [pc, #344]	@ (800da98 <UART_SetConfig+0x2f8>)
 800d93e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d940:	e00d      	b.n	800d95e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d942:	f7fe ff67 	bl	800c814 <HAL_RCC_GetSysClockFreq>
 800d946:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d948:	e009      	b.n	800d95e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d94a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d94e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d950:	e005      	b.n	800d95e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d952:	2300      	movs	r3, #0
 800d954:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d956:	2301      	movs	r3, #1
 800d958:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d95c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d960:	2b00      	cmp	r3, #0
 800d962:	f000 812b 	beq.w	800dbbc <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d966:	697b      	ldr	r3, [r7, #20]
 800d968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96a:	4a4c      	ldr	r2, [pc, #304]	@ (800da9c <UART_SetConfig+0x2fc>)
 800d96c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d970:	461a      	mov	r2, r3
 800d972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d974:	fbb3 f3f2 	udiv	r3, r3, r2
 800d978:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	685a      	ldr	r2, [r3, #4]
 800d97e:	4613      	mov	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	4413      	add	r3, r2
 800d984:	69ba      	ldr	r2, [r7, #24]
 800d986:	429a      	cmp	r2, r3
 800d988:	d305      	bcc.n	800d996 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	685b      	ldr	r3, [r3, #4]
 800d98e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d990:	69ba      	ldr	r2, [r7, #24]
 800d992:	429a      	cmp	r2, r3
 800d994:	d903      	bls.n	800d99e <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d996:	2301      	movs	r3, #1
 800d998:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d99c:	e10e      	b.n	800dbbc <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d99e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	60bb      	str	r3, [r7, #8]
 800d9a4:	60fa      	str	r2, [r7, #12]
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9aa:	4a3c      	ldr	r2, [pc, #240]	@ (800da9c <UART_SetConfig+0x2fc>)
 800d9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	603b      	str	r3, [r7, #0]
 800d9b6:	607a      	str	r2, [r7, #4]
 800d9b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d9c0:	f7f2 ffcc 	bl	800095c <__aeabi_uldivmod>
 800d9c4:	4602      	mov	r2, r0
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	4610      	mov	r0, r2
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	f04f 0200 	mov.w	r2, #0
 800d9d0:	f04f 0300 	mov.w	r3, #0
 800d9d4:	020b      	lsls	r3, r1, #8
 800d9d6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d9da:	0202      	lsls	r2, r0, #8
 800d9dc:	6979      	ldr	r1, [r7, #20]
 800d9de:	6849      	ldr	r1, [r1, #4]
 800d9e0:	0849      	lsrs	r1, r1, #1
 800d9e2:	2000      	movs	r0, #0
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	4605      	mov	r5, r0
 800d9e8:	eb12 0804 	adds.w	r8, r2, r4
 800d9ec:	eb43 0905 	adc.w	r9, r3, r5
 800d9f0:	697b      	ldr	r3, [r7, #20]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	469a      	mov	sl, r3
 800d9f8:	4693      	mov	fp, r2
 800d9fa:	4652      	mov	r2, sl
 800d9fc:	465b      	mov	r3, fp
 800d9fe:	4640      	mov	r0, r8
 800da00:	4649      	mov	r1, r9
 800da02:	f7f2 ffab 	bl	800095c <__aeabi_uldivmod>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	4613      	mov	r3, r2
 800da0c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800da14:	d308      	bcc.n	800da28 <UART_SetConfig+0x288>
 800da16:	6a3b      	ldr	r3, [r7, #32]
 800da18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800da1c:	d204      	bcs.n	800da28 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	6a3a      	ldr	r2, [r7, #32]
 800da24:	60da      	str	r2, [r3, #12]
 800da26:	e0c9      	b.n	800dbbc <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800da2e:	e0c5      	b.n	800dbbc <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800da30:	697b      	ldr	r3, [r7, #20]
 800da32:	69db      	ldr	r3, [r3, #28]
 800da34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da38:	d16d      	bne.n	800db16 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800da3a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800da3e:	3b01      	subs	r3, #1
 800da40:	2b07      	cmp	r3, #7
 800da42:	d82d      	bhi.n	800daa0 <UART_SetConfig+0x300>
 800da44:	a201      	add	r2, pc, #4	@ (adr r2, 800da4c <UART_SetConfig+0x2ac>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800da6d 	.word	0x0800da6d
 800da50:	0800da75 	.word	0x0800da75
 800da54:	0800daa1 	.word	0x0800daa1
 800da58:	0800da7b 	.word	0x0800da7b
 800da5c:	0800daa1 	.word	0x0800daa1
 800da60:	0800daa1 	.word	0x0800daa1
 800da64:	0800daa1 	.word	0x0800daa1
 800da68:	0800da83 	.word	0x0800da83
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da6c:	f7fe ff68 	bl	800c940 <HAL_RCC_GetPCLK2Freq>
 800da70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da72:	e01b      	b.n	800daac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800da74:	4b08      	ldr	r3, [pc, #32]	@ (800da98 <UART_SetConfig+0x2f8>)
 800da76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800da78:	e018      	b.n	800daac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800da7a:	f7fe fecb 	bl	800c814 <HAL_RCC_GetSysClockFreq>
 800da7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800da80:	e014      	b.n	800daac <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800da82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800da86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800da88:	e010      	b.n	800daac <UART_SetConfig+0x30c>
 800da8a:	bf00      	nop
 800da8c:	cfff69f3 	.word	0xcfff69f3
 800da90:	40008000 	.word	0x40008000
 800da94:	40013800 	.word	0x40013800
 800da98:	00f42400 	.word	0x00f42400
 800da9c:	08015628 	.word	0x08015628
      default:
        pclk = 0U;
 800daa0:	2300      	movs	r3, #0
 800daa2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800daa4:	2301      	movs	r3, #1
 800daa6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800daaa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 8084 	beq.w	800dbbc <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dab8:	4a4b      	ldr	r2, [pc, #300]	@ (800dbe8 <UART_SetConfig+0x448>)
 800daba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dabe:	461a      	mov	r2, r3
 800dac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dac6:	005a      	lsls	r2, r3, #1
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	685b      	ldr	r3, [r3, #4]
 800dacc:	085b      	lsrs	r3, r3, #1
 800dace:	441a      	add	r2, r3
 800dad0:	697b      	ldr	r3, [r7, #20]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800dad8:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dada:	6a3b      	ldr	r3, [r7, #32]
 800dadc:	2b0f      	cmp	r3, #15
 800dade:	d916      	bls.n	800db0e <UART_SetConfig+0x36e>
 800dae0:	6a3b      	ldr	r3, [r7, #32]
 800dae2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dae6:	d212      	bcs.n	800db0e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dae8:	6a3b      	ldr	r3, [r7, #32]
 800daea:	b29b      	uxth	r3, r3
 800daec:	f023 030f 	bic.w	r3, r3, #15
 800daf0:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800daf2:	6a3b      	ldr	r3, [r7, #32]
 800daf4:	085b      	lsrs	r3, r3, #1
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	f003 0307 	and.w	r3, r3, #7
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	8bfb      	ldrh	r3, [r7, #30]
 800db00:	4313      	orrs	r3, r2
 800db02:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	8bfa      	ldrh	r2, [r7, #30]
 800db0a:	60da      	str	r2, [r3, #12]
 800db0c:	e056      	b.n	800dbbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800db0e:	2301      	movs	r3, #1
 800db10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800db14:	e052      	b.n	800dbbc <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800db16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800db1a:	3b01      	subs	r3, #1
 800db1c:	2b07      	cmp	r3, #7
 800db1e:	d822      	bhi.n	800db66 <UART_SetConfig+0x3c6>
 800db20:	a201      	add	r2, pc, #4	@ (adr r2, 800db28 <UART_SetConfig+0x388>)
 800db22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db26:	bf00      	nop
 800db28:	0800db49 	.word	0x0800db49
 800db2c:	0800db51 	.word	0x0800db51
 800db30:	0800db67 	.word	0x0800db67
 800db34:	0800db57 	.word	0x0800db57
 800db38:	0800db67 	.word	0x0800db67
 800db3c:	0800db67 	.word	0x0800db67
 800db40:	0800db67 	.word	0x0800db67
 800db44:	0800db5f 	.word	0x0800db5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800db48:	f7fe fefa 	bl	800c940 <HAL_RCC_GetPCLK2Freq>
 800db4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800db4e:	e010      	b.n	800db72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800db50:	4b26      	ldr	r3, [pc, #152]	@ (800dbec <UART_SetConfig+0x44c>)
 800db52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800db54:	e00d      	b.n	800db72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800db56:	f7fe fe5d 	bl	800c814 <HAL_RCC_GetSysClockFreq>
 800db5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800db5c:	e009      	b.n	800db72 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800db5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800db62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800db64:	e005      	b.n	800db72 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800db66:	2300      	movs	r3, #0
 800db68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800db6a:	2301      	movs	r3, #1
 800db6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800db70:	bf00      	nop
    }

    if (pclk != 0U)
 800db72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db74:	2b00      	cmp	r3, #0
 800db76:	d021      	beq.n	800dbbc <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800db7c:	4a1a      	ldr	r2, [pc, #104]	@ (800dbe8 <UART_SetConfig+0x448>)
 800db7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db82:	461a      	mov	r2, r3
 800db84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db86:	fbb3 f2f2 	udiv	r2, r3, r2
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	085b      	lsrs	r3, r3, #1
 800db90:	441a      	add	r2, r3
 800db92:	697b      	ldr	r3, [r7, #20]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	fbb2 f3f3 	udiv	r3, r2, r3
 800db9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db9c:	6a3b      	ldr	r3, [r7, #32]
 800db9e:	2b0f      	cmp	r3, #15
 800dba0:	d909      	bls.n	800dbb6 <UART_SetConfig+0x416>
 800dba2:	6a3b      	ldr	r3, [r7, #32]
 800dba4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dba8:	d205      	bcs.n	800dbb6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dbaa:	6a3b      	ldr	r3, [r7, #32]
 800dbac:	b29a      	uxth	r2, r3
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	60da      	str	r2, [r3, #12]
 800dbb4:	e002      	b.n	800dbbc <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dbd8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800dbdc:	4618      	mov	r0, r3
 800dbde:	3730      	adds	r7, #48	@ 0x30
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dbe6:	bf00      	nop
 800dbe8:	08015628 	.word	0x08015628
 800dbec:	00f42400 	.word	0x00f42400

0800dbf0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b083      	sub	sp, #12
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbfc:	f003 0308 	and.w	r3, r3, #8
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d00a      	beq.n	800dc1a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	685b      	ldr	r3, [r3, #4]
 800dc0a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	430a      	orrs	r2, r1
 800dc18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc1e:	f003 0301 	and.w	r3, r3, #1
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00a      	beq.n	800dc3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	430a      	orrs	r2, r1
 800dc3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc40:	f003 0302 	and.w	r3, r3, #2
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00a      	beq.n	800dc5e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	430a      	orrs	r2, r1
 800dc5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc62:	f003 0304 	and.w	r3, r3, #4
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d00a      	beq.n	800dc80 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	430a      	orrs	r2, r1
 800dc7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc84:	f003 0310 	and.w	r3, r3, #16
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d00a      	beq.n	800dca2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	430a      	orrs	r2, r1
 800dca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dca6:	f003 0320 	and.w	r3, r3, #32
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d00a      	beq.n	800dcc4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d01a      	beq.n	800dd06 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	430a      	orrs	r2, r1
 800dce4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dcea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dcee:	d10a      	bne.n	800dd06 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	685b      	ldr	r3, [r3, #4]
 800dcf6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	430a      	orrs	r2, r1
 800dd04:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d00a      	beq.n	800dd28 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	430a      	orrs	r2, r1
 800dd26:	605a      	str	r2, [r3, #4]
  }
}
 800dd28:	bf00      	nop
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b098      	sub	sp, #96	@ 0x60
 800dd38:	af02      	add	r7, sp, #8
 800dd3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2200      	movs	r2, #0
 800dd40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800dd44:	f7fa fd3c 	bl	80087c0 <HAL_GetTick>
 800dd48:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	f003 0308 	and.w	r3, r3, #8
 800dd54:	2b08      	cmp	r3, #8
 800dd56:	d12f      	bne.n	800ddb8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dd58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dd60:	2200      	movs	r2, #0
 800dd62:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 f88e 	bl	800de88 <UART_WaitOnFlagUntilTimeout>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d022      	beq.n	800ddb8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	e853 3f00 	ldrex	r3, [r3]
 800dd7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800dd80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800dd86:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd90:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd92:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dd96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd98:	e841 2300 	strex	r3, r2, [r1]
 800dd9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dd9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d1e6      	bne.n	800dd72 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2220      	movs	r2, #32
 800dda8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ddb4:	2303      	movs	r3, #3
 800ddb6:	e063      	b.n	800de80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f003 0304 	and.w	r3, r3, #4
 800ddc2:	2b04      	cmp	r3, #4
 800ddc4:	d149      	bne.n	800de5a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ddc6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ddca:	9300      	str	r3, [sp, #0]
 800ddcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ddce:	2200      	movs	r2, #0
 800ddd0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ddd4:	6878      	ldr	r0, [r7, #4]
 800ddd6:	f000 f857 	bl	800de88 <UART_WaitOnFlagUntilTimeout>
 800ddda:	4603      	mov	r3, r0
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d03c      	beq.n	800de5a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dde8:	e853 3f00 	ldrex	r3, [r3]
 800ddec:	623b      	str	r3, [r7, #32]
   return(result);
 800ddee:	6a3b      	ldr	r3, [r7, #32]
 800ddf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ddf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddfe:	633b      	str	r3, [r7, #48]	@ 0x30
 800de00:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800de04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de06:	e841 2300 	strex	r3, r2, [r1]
 800de0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800de0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1e6      	bne.n	800dde0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3308      	adds	r3, #8
 800de18:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de1a:	693b      	ldr	r3, [r7, #16]
 800de1c:	e853 3f00 	ldrex	r3, [r3]
 800de20:	60fb      	str	r3, [r7, #12]
   return(result);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	f023 0301 	bic.w	r3, r3, #1
 800de28:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	3308      	adds	r3, #8
 800de30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800de32:	61fa      	str	r2, [r7, #28]
 800de34:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de36:	69b9      	ldr	r1, [r7, #24]
 800de38:	69fa      	ldr	r2, [r7, #28]
 800de3a:	e841 2300 	strex	r3, r2, [r1]
 800de3e:	617b      	str	r3, [r7, #20]
   return(result);
 800de40:	697b      	ldr	r3, [r7, #20]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1e5      	bne.n	800de12 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2220      	movs	r2, #32
 800de4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2200      	movs	r2, #0
 800de52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800de56:	2303      	movs	r3, #3
 800de58:	e012      	b.n	800de80 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2220      	movs	r2, #32
 800de5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	2220      	movs	r2, #32
 800de66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	2200      	movs	r2, #0
 800de6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	2200      	movs	r2, #0
 800de74:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800de7e:	2300      	movs	r3, #0
}
 800de80:	4618      	mov	r0, r3
 800de82:	3758      	adds	r7, #88	@ 0x58
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}

0800de88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	60f8      	str	r0, [r7, #12]
 800de90:	60b9      	str	r1, [r7, #8]
 800de92:	603b      	str	r3, [r7, #0]
 800de94:	4613      	mov	r3, r2
 800de96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800de98:	e04f      	b.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800de9a:	69bb      	ldr	r3, [r7, #24]
 800de9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dea0:	d04b      	beq.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dea2:	f7fa fc8d 	bl	80087c0 <HAL_GetTick>
 800dea6:	4602      	mov	r2, r0
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	69ba      	ldr	r2, [r7, #24]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d302      	bcc.n	800deb8 <UART_WaitOnFlagUntilTimeout+0x30>
 800deb2:	69bb      	ldr	r3, [r7, #24]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d101      	bne.n	800debc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800deb8:	2303      	movs	r3, #3
 800deba:	e04e      	b.n	800df5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f003 0304 	and.w	r3, r3, #4
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d037      	beq.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	2b80      	cmp	r3, #128	@ 0x80
 800dece:	d034      	beq.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	2b40      	cmp	r3, #64	@ 0x40
 800ded4:	d031      	beq.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	69db      	ldr	r3, [r3, #28]
 800dedc:	f003 0308 	and.w	r3, r3, #8
 800dee0:	2b08      	cmp	r3, #8
 800dee2:	d110      	bne.n	800df06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2208      	movs	r2, #8
 800deea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f000 f838 	bl	800df62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	2208      	movs	r2, #8
 800def6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	2200      	movs	r2, #0
 800defe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800df02:	2301      	movs	r3, #1
 800df04:	e029      	b.n	800df5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800df14:	d111      	bne.n	800df3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800df1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800df20:	68f8      	ldr	r0, [r7, #12]
 800df22:	f000 f81e 	bl	800df62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	2220      	movs	r2, #32
 800df2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	2200      	movs	r2, #0
 800df32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800df36:	2303      	movs	r3, #3
 800df38:	e00f      	b.n	800df5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	69da      	ldr	r2, [r3, #28]
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	4013      	ands	r3, r2
 800df44:	68ba      	ldr	r2, [r7, #8]
 800df46:	429a      	cmp	r2, r3
 800df48:	bf0c      	ite	eq
 800df4a:	2301      	moveq	r3, #1
 800df4c:	2300      	movne	r3, #0
 800df4e:	b2db      	uxtb	r3, r3
 800df50:	461a      	mov	r2, r3
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	429a      	cmp	r2, r3
 800df56:	d0a0      	beq.n	800de9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3710      	adds	r7, #16
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}

0800df62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800df62:	b480      	push	{r7}
 800df64:	b095      	sub	sp, #84	@ 0x54
 800df66:	af00      	add	r7, sp, #0
 800df68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df72:	e853 3f00 	ldrex	r3, [r3]
 800df76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800df78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	461a      	mov	r2, r3
 800df86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df88:	643b      	str	r3, [r7, #64]	@ 0x40
 800df8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800df8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800df90:	e841 2300 	strex	r3, r2, [r1]
 800df94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800df96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e6      	bne.n	800df6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	3308      	adds	r3, #8
 800dfa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfa4:	6a3b      	ldr	r3, [r7, #32]
 800dfa6:	e853 3f00 	ldrex	r3, [r3]
 800dfaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfb2:	f023 0301 	bic.w	r3, r3, #1
 800dfb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dfc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dfc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dfc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dfc8:	e841 2300 	strex	r3, r2, [r1]
 800dfcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dfce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d1e3      	bne.n	800df9c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dfd8:	2b01      	cmp	r3, #1
 800dfda:	d118      	bne.n	800e00e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	e853 3f00 	ldrex	r3, [r3]
 800dfe8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	f023 0310 	bic.w	r3, r3, #16
 800dff0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	461a      	mov	r2, r3
 800dff8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dffa:	61bb      	str	r3, [r7, #24]
 800dffc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dffe:	6979      	ldr	r1, [r7, #20]
 800e000:	69ba      	ldr	r2, [r7, #24]
 800e002:	e841 2300 	strex	r3, r2, [r1]
 800e006:	613b      	str	r3, [r7, #16]
   return(result);
 800e008:	693b      	ldr	r3, [r7, #16]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d1e6      	bne.n	800dfdc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	2220      	movs	r2, #32
 800e012:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e022:	bf00      	nop
 800e024:	3754      	adds	r7, #84	@ 0x54
 800e026:	46bd      	mov	sp, r7
 800e028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e02c:	4770      	bx	lr

0800e02e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e02e:	b480      	push	{r7}
 800e030:	b085      	sub	sp, #20
 800e032:	af00      	add	r7, sp, #0
 800e034:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d101      	bne.n	800e044 <HAL_UARTEx_DisableFifoMode+0x16>
 800e040:	2302      	movs	r3, #2
 800e042:	e027      	b.n	800e094 <HAL_UARTEx_DisableFifoMode+0x66>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2224      	movs	r2, #36	@ 0x24
 800e050:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f022 0201 	bic.w	r2, r2, #1
 800e06a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800e072:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68fa      	ldr	r2, [r7, #12]
 800e080:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2220      	movs	r2, #32
 800e086:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e092:	2300      	movs	r3, #0
}
 800e094:	4618      	mov	r0, r3
 800e096:	3714      	adds	r7, #20
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr

0800e0a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b084      	sub	sp, #16
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e0b0:	2b01      	cmp	r3, #1
 800e0b2:	d101      	bne.n	800e0b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e0b4:	2302      	movs	r3, #2
 800e0b6:	e02d      	b.n	800e114 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	2224      	movs	r2, #36	@ 0x24
 800e0c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	681a      	ldr	r2, [r3, #0]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	f022 0201 	bic.w	r2, r2, #1
 800e0de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	689b      	ldr	r3, [r3, #8]
 800e0e6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	683a      	ldr	r2, [r7, #0]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e0f4:	6878      	ldr	r0, [r7, #4]
 800e0f6:	f000 f84f 	bl	800e198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	2220      	movs	r2, #32
 800e106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b084      	sub	sp, #16
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d101      	bne.n	800e134 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e130:	2302      	movs	r3, #2
 800e132:	e02d      	b.n	800e190 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2224      	movs	r2, #36	@ 0x24
 800e140:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	681a      	ldr	r2, [r3, #0]
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	f022 0201 	bic.w	r2, r2, #1
 800e15a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	689b      	ldr	r3, [r3, #8]
 800e162:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	683a      	ldr	r2, [r7, #0]
 800e16c:	430a      	orrs	r2, r1
 800e16e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e170:	6878      	ldr	r0, [r7, #4]
 800e172:	f000 f811 	bl	800e198 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	68fa      	ldr	r2, [r7, #12]
 800e17c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2220      	movs	r2, #32
 800e182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	2200      	movs	r2, #0
 800e18a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800e18e:	2300      	movs	r3, #0
}
 800e190:	4618      	mov	r0, r3
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e198:	b480      	push	{r7}
 800e19a:	b085      	sub	sp, #20
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d108      	bne.n	800e1ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2201      	movs	r2, #1
 800e1ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e1b8:	e031      	b.n	800e21e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e1ba:	2308      	movs	r3, #8
 800e1bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e1be:	2308      	movs	r3, #8
 800e1c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	689b      	ldr	r3, [r3, #8]
 800e1c8:	0e5b      	lsrs	r3, r3, #25
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	f003 0307 	and.w	r3, r3, #7
 800e1d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	0f5b      	lsrs	r3, r3, #29
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	f003 0307 	and.w	r3, r3, #7
 800e1e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1e2:	7bbb      	ldrb	r3, [r7, #14]
 800e1e4:	7b3a      	ldrb	r2, [r7, #12]
 800e1e6:	4911      	ldr	r1, [pc, #68]	@ (800e22c <UARTEx_SetNbDataToProcess+0x94>)
 800e1e8:	5c8a      	ldrb	r2, [r1, r2]
 800e1ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e1ee:	7b3a      	ldrb	r2, [r7, #12]
 800e1f0:	490f      	ldr	r1, [pc, #60]	@ (800e230 <UARTEx_SetNbDataToProcess+0x98>)
 800e1f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e1f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800e1f8:	b29a      	uxth	r2, r3
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e200:	7bfb      	ldrb	r3, [r7, #15]
 800e202:	7b7a      	ldrb	r2, [r7, #13]
 800e204:	4909      	ldr	r1, [pc, #36]	@ (800e22c <UARTEx_SetNbDataToProcess+0x94>)
 800e206:	5c8a      	ldrb	r2, [r1, r2]
 800e208:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e20c:	7b7a      	ldrb	r2, [r7, #13]
 800e20e:	4908      	ldr	r1, [pc, #32]	@ (800e230 <UARTEx_SetNbDataToProcess+0x98>)
 800e210:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e212:	fb93 f3f2 	sdiv	r3, r3, r2
 800e216:	b29a      	uxth	r2, r3
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800e21e:	bf00      	nop
 800e220:	3714      	adds	r7, #20
 800e222:	46bd      	mov	sp, r7
 800e224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e228:	4770      	bx	lr
 800e22a:	bf00      	nop
 800e22c:	08015640 	.word	0x08015640
 800e230:	08015648 	.word	0x08015648

0800e234 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e234:	b480      	push	{r7}
 800e236:	b085      	sub	sp, #20
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e23c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800e240:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800e248:	b29a      	uxth	r2, r3
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	43db      	mvns	r3, r3
 800e250:	b29b      	uxth	r3, r3
 800e252:	4013      	ands	r3, r2
 800e254:	b29a      	uxth	r2, r3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e25c:	2300      	movs	r3, #0
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3714      	adds	r7, #20
 800e262:	46bd      	mov	sp, r7
 800e264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e268:	4770      	bx	lr

0800e26a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e26a:	b480      	push	{r7}
 800e26c:	b085      	sub	sp, #20
 800e26e:	af00      	add	r7, sp, #0
 800e270:	60f8      	str	r0, [r7, #12]
 800e272:	1d3b      	adds	r3, r7, #4
 800e274:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	2201      	movs	r2, #1
 800e27c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	2200      	movs	r2, #0
 800e284:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2200      	movs	r2, #0
 800e28c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2200      	movs	r2, #0
 800e294:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800e298:	2300      	movs	r3, #0
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3714      	adds	r7, #20
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a4:	4770      	bx	lr

0800e2a6 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b088      	sub	sp, #32
 800e2aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e2b0:	f107 0308 	add.w	r3, r7, #8
 800e2b4:	2218      	movs	r2, #24
 800e2b6:	2100      	movs	r1, #0
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f001 f92d 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e2be:	233f      	movs	r3, #63	@ 0x3f
 800e2c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e2c2:	2381      	movs	r3, #129	@ 0x81
 800e2c4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e2c6:	1dfb      	adds	r3, r7, #7
 800e2c8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e2ce:	f107 0308 	add.w	r3, r7, #8
 800e2d2:	2100      	movs	r1, #0
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 fba9 	bl	800fa2c <hci_send_req>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	da01      	bge.n	800e2e4 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e2e0:	23ff      	movs	r3, #255	@ 0xff
 800e2e2:	e000      	b.n	800e2e6 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e2e4:	79fb      	ldrb	r3, [r7, #7]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3720      	adds	r7, #32
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800e2ee:	b5b0      	push	{r4, r5, r7, lr}
 800e2f0:	b0ce      	sub	sp, #312	@ 0x138
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	4605      	mov	r5, r0
 800e2f6:	460c      	mov	r4, r1
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4619      	mov	r1, r3
 800e2fc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e300:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e304:	462a      	mov	r2, r5
 800e306:	701a      	strb	r2, [r3, #0]
 800e308:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e30c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800e310:	4622      	mov	r2, r4
 800e312:	801a      	strh	r2, [r3, #0]
 800e314:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e318:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800e31c:	4602      	mov	r2, r0
 800e31e:	801a      	strh	r2, [r3, #0]
 800e320:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e324:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e328:	460a      	mov	r2, r1
 800e32a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800e32c:	f107 0310 	add.w	r3, r7, #16
 800e330:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800e334:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e338:	3308      	adds	r3, #8
 800e33a:	f107 0210 	add.w	r2, r7, #16
 800e33e:	4413      	add	r3, r2
 800e340:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800e344:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e348:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e34c:	4413      	add	r3, r2
 800e34e:	3309      	adds	r3, #9
 800e350:	f107 0210 	add.w	r2, r7, #16
 800e354:	4413      	add	r3, r2
 800e356:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e35a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e35e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e362:	2200      	movs	r2, #0
 800e364:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e366:	2300      	movs	r3, #0
 800e368:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800e36c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e370:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e374:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800e378:	7812      	ldrb	r2, [r2, #0]
 800e37a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e37c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e380:	3301      	adds	r3, #1
 800e382:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800e386:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e38a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e38e:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800e392:	8812      	ldrh	r2, [r2, #0]
 800e394:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800e398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e39c:	3302      	adds	r3, #2
 800e39e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800e3a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e3a6:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e3aa:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800e3ae:	8812      	ldrh	r2, [r2, #0]
 800e3b0:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800e3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3b8:	3302      	adds	r3, #2
 800e3ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800e3be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e3c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e3c6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e3ca:	7812      	ldrb	r2, [r2, #0]
 800e3cc:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e3ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800e3d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e3dc:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e3e0:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e3e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3e6:	3301      	adds	r3, #1
 800e3e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800e3ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e3f0:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e3f4:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800e3f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3fa:	3301      	adds	r3, #1
 800e3fc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800e400:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e404:	3308      	adds	r3, #8
 800e406:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800e40a:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800e40e:	4618      	mov	r0, r3
 800e410:	f001 f872 	bl	800f4f8 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800e414:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800e418:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e41c:	4413      	add	r3, r2
 800e41e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800e422:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e426:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e42a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e42c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e430:	3301      	adds	r3, #1
 800e432:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800e436:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e43a:	3301      	adds	r3, #1
 800e43c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e440:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800e444:	4618      	mov	r0, r3
 800e446:	f001 f857 	bl	800f4f8 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800e44a:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800e44e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e452:	4413      	add	r3, r2
 800e454:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800e458:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e45c:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800e460:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e466:	3302      	adds	r3, #2
 800e468:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800e46c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e470:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800e474:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800e476:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e47a:	3302      	adds	r3, #2
 800e47c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e480:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e484:	2218      	movs	r2, #24
 800e486:	2100      	movs	r1, #0
 800e488:	4618      	mov	r0, r3
 800e48a:	f001 f845 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e48e:	233f      	movs	r3, #63	@ 0x3f
 800e490:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800e494:	2383      	movs	r3, #131	@ 0x83
 800e496:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e49a:	f107 0310 	add.w	r3, r7, #16
 800e49e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e4a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4a6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e4aa:	f107 030f 	add.w	r3, r7, #15
 800e4ae:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e4b8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e4bc:	2100      	movs	r1, #0
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f001 fab4 	bl	800fa2c <hci_send_req>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	da01      	bge.n	800e4ce <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800e4ca:	23ff      	movs	r3, #255	@ 0xff
 800e4cc:	e004      	b.n	800e4d8 <aci_gap_set_discoverable+0x1ea>
  return status;
 800e4ce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e4d2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e4d6:	781b      	ldrb	r3, [r3, #0]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bdb0      	pop	{r4, r5, r7, pc}

0800e4e2 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b0cc      	sub	sp, #304	@ 0x130
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	4602      	mov	r2, r0
 800e4ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e4ee:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e4f2:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800e4f4:	f107 0310 	add.w	r3, r7, #16
 800e4f8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e4fc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e500:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e504:	2200      	movs	r2, #0
 800e506:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e508:	2300      	movs	r3, #0
 800e50a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800e50e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e512:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e516:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e51a:	7812      	ldrb	r2, [r2, #0]
 800e51c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e51e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e522:	3301      	adds	r3, #1
 800e524:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e528:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e52c:	2218      	movs	r2, #24
 800e52e:	2100      	movs	r1, #0
 800e530:	4618      	mov	r0, r3
 800e532:	f000 fff1 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e536:	233f      	movs	r3, #63	@ 0x3f
 800e538:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800e53c:	2385      	movs	r3, #133	@ 0x85
 800e53e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e542:	f107 0310 	add.w	r3, r7, #16
 800e546:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e54a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e54e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e552:	f107 030f 	add.w	r3, r7, #15
 800e556:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e55a:	2301      	movs	r3, #1
 800e55c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e560:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e564:	2100      	movs	r1, #0
 800e566:	4618      	mov	r0, r3
 800e568:	f001 fa60 	bl	800fa2c <hci_send_req>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	da01      	bge.n	800e576 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800e572:	23ff      	movs	r3, #255	@ 0xff
 800e574:	e004      	b.n	800e580 <aci_gap_set_io_capability+0x9e>
  return status;
 800e576:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e57a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e57e:	781b      	ldrb	r3, [r3, #0]
}
 800e580:	4618      	mov	r0, r3
 800e582:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800e58a:	b5b0      	push	{r4, r5, r7, lr}
 800e58c:	b0cc      	sub	sp, #304	@ 0x130
 800e58e:	af00      	add	r7, sp, #0
 800e590:	4605      	mov	r5, r0
 800e592:	460c      	mov	r4, r1
 800e594:	4610      	mov	r0, r2
 800e596:	4619      	mov	r1, r3
 800e598:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e59c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e5a0:	462a      	mov	r2, r5
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5a8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e5ac:	4622      	mov	r2, r4
 800e5ae:	701a      	strb	r2, [r3, #0]
 800e5b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5b4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	701a      	strb	r2, [r3, #0]
 800e5bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5c0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e5c4:	460a      	mov	r2, r1
 800e5c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800e5c8:	f107 0310 	add.w	r3, r7, #16
 800e5cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e5d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e5d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e5d8:	2200      	movs	r2, #0
 800e5da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800e5e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e5e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e5ea:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e5ee:	7812      	ldrb	r2, [r2, #0]
 800e5f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e5f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800e5fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e600:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e604:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e608:	7812      	ldrb	r2, [r2, #0]
 800e60a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e60c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e610:	3301      	adds	r3, #1
 800e612:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800e616:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e61a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e61e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e622:	7812      	ldrb	r2, [r2, #0]
 800e624:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e626:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e62a:	3301      	adds	r3, #1
 800e62c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800e630:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e634:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e638:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e63c:	7812      	ldrb	r2, [r2, #0]
 800e63e:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800e640:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e644:	3301      	adds	r3, #1
 800e646:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800e64a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e64e:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800e652:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e654:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e658:	3301      	adds	r3, #1
 800e65a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800e65e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e662:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800e666:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e66c:	3301      	adds	r3, #1
 800e66e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800e672:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e676:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800e67a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800e67c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e680:	3301      	adds	r3, #1
 800e682:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800e686:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e68a:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800e68e:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800e692:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e696:	3304      	adds	r3, #4
 800e698:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800e69c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e6a0:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800e6a4:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800e6a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6aa:	3301      	adds	r3, #1
 800e6ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e6b0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e6b4:	2218      	movs	r2, #24
 800e6b6:	2100      	movs	r1, #0
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f000 ff2d 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e6be:	233f      	movs	r3, #63	@ 0x3f
 800e6c0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800e6c4:	2386      	movs	r3, #134	@ 0x86
 800e6c6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e6ca:	f107 0310 	add.w	r3, r7, #16
 800e6ce:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e6d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6d6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e6da:	f107 030f 	add.w	r3, r7, #15
 800e6de:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e6e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f001 f99c 	bl	800fa2c <hci_send_req>
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	da01      	bge.n	800e6fe <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800e6fa:	23ff      	movs	r3, #255	@ 0xff
 800e6fc:	e004      	b.n	800e708 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800e6fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e702:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e706:	781b      	ldrb	r3, [r3, #0]
}
 800e708:	4618      	mov	r0, r3
 800e70a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e70e:	46bd      	mov	sp, r7
 800e710:	bdb0      	pop	{r4, r5, r7, pc}

0800e712 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800e712:	b580      	push	{r7, lr}
 800e714:	b0cc      	sub	sp, #304	@ 0x130
 800e716:	af00      	add	r7, sp, #0
 800e718:	4602      	mov	r2, r0
 800e71a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e71e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e722:	6019      	str	r1, [r3, #0]
 800e724:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e728:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e72c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800e72e:	f107 0310 	add.w	r3, r7, #16
 800e732:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e736:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e73a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e73e:	2200      	movs	r2, #0
 800e740:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e742:	2300      	movs	r3, #0
 800e744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e748:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e74c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e750:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e754:	8812      	ldrh	r2, [r2, #0]
 800e756:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e758:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e75c:	3302      	adds	r3, #2
 800e75e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800e762:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e766:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e76a:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e76e:	6812      	ldr	r2, [r2, #0]
 800e770:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800e774:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e778:	3304      	adds	r3, #4
 800e77a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e77e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e782:	2218      	movs	r2, #24
 800e784:	2100      	movs	r1, #0
 800e786:	4618      	mov	r0, r3
 800e788:	f000 fec6 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e78c:	233f      	movs	r3, #63	@ 0x3f
 800e78e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800e792:	2388      	movs	r3, #136	@ 0x88
 800e794:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e798:	f107 0310 	add.w	r3, r7, #16
 800e79c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e7a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e7a4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e7a8:	f107 030f 	add.w	r3, r7, #15
 800e7ac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e7b0:	2301      	movs	r3, #1
 800e7b2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e7b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e7ba:	2100      	movs	r1, #0
 800e7bc:	4618      	mov	r0, r3
 800e7be:	f001 f935 	bl	800fa2c <hci_send_req>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	da01      	bge.n	800e7cc <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800e7c8:	23ff      	movs	r3, #255	@ 0xff
 800e7ca:	e004      	b.n	800e7d6 <aci_gap_pass_key_resp+0xc4>
  return status;
 800e7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7d0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e7d4:	781b      	ldrb	r3, [r3, #0]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800e7e0:	b590      	push	{r4, r7, lr}
 800e7e2:	b0cd      	sub	sp, #308	@ 0x134
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	4608      	mov	r0, r1
 800e7ea:	4611      	mov	r1, r2
 800e7ec:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e7f0:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800e7f4:	6013      	str	r3, [r2, #0]
 800e7f6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7fa:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e7fe:	4622      	mov	r2, r4
 800e800:	701a      	strb	r2, [r3, #0]
 800e802:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e806:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e80a:	4602      	mov	r2, r0
 800e80c:	701a      	strb	r2, [r3, #0]
 800e80e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e812:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e816:	460a      	mov	r2, r1
 800e818:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800e81a:	f107 0310 	add.w	r3, r7, #16
 800e81e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e822:	f107 0308 	add.w	r3, r7, #8
 800e826:	2207      	movs	r2, #7
 800e828:	2100      	movs	r1, #0
 800e82a:	4618      	mov	r0, r3
 800e82c:	f000 fe74 	bl	800f518 <Osal_MemSet>
  int index_input = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800e836:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e83a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e83e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e842:	7812      	ldrb	r2, [r2, #0]
 800e844:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e846:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e84a:	3301      	adds	r3, #1
 800e84c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800e850:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e854:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e858:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e85c:	7812      	ldrb	r2, [r2, #0]
 800e85e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e860:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e864:	3301      	adds	r3, #1
 800e866:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800e86a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e86e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e872:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e876:	7812      	ldrb	r2, [r2, #0]
 800e878:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e87a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e87e:	3301      	adds	r3, #1
 800e880:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e884:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e888:	2218      	movs	r2, #24
 800e88a:	2100      	movs	r1, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f000 fe43 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e892:	233f      	movs	r3, #63	@ 0x3f
 800e894:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800e898:	238a      	movs	r3, #138	@ 0x8a
 800e89a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e89e:	f107 0310 	add.w	r3, r7, #16
 800e8a2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e8a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800e8ae:	f107 0308 	add.w	r3, r7, #8
 800e8b2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800e8b6:	2307      	movs	r3, #7
 800e8b8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e8bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e8c0:	2100      	movs	r1, #0
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f001 f8b2 	bl	800fa2c <hci_send_req>
 800e8c8:	4603      	mov	r3, r0
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	da01      	bge.n	800e8d2 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e8ce:	23ff      	movs	r3, #255	@ 0xff
 800e8d0:	e02e      	b.n	800e930 <aci_gap_init+0x150>
  if ( resp.Status )
 800e8d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8d6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d005      	beq.n	800e8ec <aci_gap_init+0x10c>
    return resp.Status;
 800e8e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8e4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e8e8:	781b      	ldrb	r3, [r3, #0]
 800e8ea:	e021      	b.n	800e930 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e8ec:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8f0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e8f4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8fe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e906:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e90a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e90e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e912:	b29a      	uxth	r2, r3
 800e914:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e918:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e91a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e91e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e922:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e926:	b29a      	uxth	r2, r3
 800e928:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e92c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e92e:	2300      	movs	r3, #0
}
 800e930:	4618      	mov	r0, r3
 800e932:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e936:	46bd      	mov	sp, r7
 800e938:	bd90      	pop	{r4, r7, pc}

0800e93a <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b0cc      	sub	sp, #304	@ 0x130
 800e93e:	af00      	add	r7, sp, #0
 800e940:	4602      	mov	r2, r0
 800e942:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e946:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e94a:	6019      	str	r1, [r3, #0]
 800e94c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e950:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e954:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e956:	f107 0310 	add.w	r3, r7, #16
 800e95a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e95e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e962:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e966:	2200      	movs	r2, #0
 800e968:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e970:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e974:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e978:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e97c:	7812      	ldrb	r2, [r2, #0]
 800e97e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e980:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e984:	3301      	adds	r3, #1
 800e986:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e98a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e98e:	1c58      	adds	r0, r3, #1
 800e990:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e994:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e998:	781a      	ldrb	r2, [r3, #0]
 800e99a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e99e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e9a2:	6819      	ldr	r1, [r3, #0]
 800e9a4:	f000 fda8 	bl	800f4f8 <Osal_MemCpy>
  index_input += AdvDataLen;
 800e9a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e9ac:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e9b0:	781b      	ldrb	r3, [r3, #0]
 800e9b2:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e9b6:	4413      	add	r3, r2
 800e9b8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9bc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9c0:	2218      	movs	r2, #24
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f000 fda7 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e9ca:	233f      	movs	r3, #63	@ 0x3f
 800e9cc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800e9d0:	238e      	movs	r3, #142	@ 0x8e
 800e9d2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e9d6:	f107 0310 	add.w	r3, r7, #16
 800e9da:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e9de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9e2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e9e6:	f107 030f 	add.w	r3, r7, #15
 800e9ea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f001 f816 	bl	800fa2c <hci_send_req>
 800ea00:	4603      	mov	r3, r0
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	da01      	bge.n	800ea0a <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800ea06:	23ff      	movs	r3, #255	@ 0xff
 800ea08:	e004      	b.n	800ea14 <aci_gap_update_adv_data+0xda>
  return status;
 800ea0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea0e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea12:	781b      	ldrb	r3, [r3, #0]
}
 800ea14:	4618      	mov	r0, r3
 800ea16:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}

0800ea1e <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800ea1e:	b580      	push	{r7, lr}
 800ea20:	b088      	sub	sp, #32
 800ea22:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ea24:	2300      	movs	r3, #0
 800ea26:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea28:	f107 0308 	add.w	r3, r7, #8
 800ea2c:	2218      	movs	r2, #24
 800ea2e:	2100      	movs	r1, #0
 800ea30:	4618      	mov	r0, r3
 800ea32:	f000 fd71 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea36:	233f      	movs	r3, #63	@ 0x3f
 800ea38:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800ea3a:	2392      	movs	r3, #146	@ 0x92
 800ea3c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ea3e:	1dfb      	adds	r3, r7, #7
 800ea40:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ea42:	2301      	movs	r3, #1
 800ea44:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea46:	f107 0308 	add.w	r3, r7, #8
 800ea4a:	2100      	movs	r1, #0
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f000 ffed 	bl	800fa2c <hci_send_req>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	da01      	bge.n	800ea5c <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ea58:	23ff      	movs	r3, #255	@ 0xff
 800ea5a:	e000      	b.n	800ea5e <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800ea5c:	79fb      	ldrb	r3, [r7, #7]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3720      	adds	r7, #32
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b0cc      	sub	sp, #304	@ 0x130
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	4602      	mov	r2, r0
 800ea6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea72:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ea76:	801a      	strh	r2, [r3, #0]
 800ea78:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea7c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ea80:	460a      	mov	r2, r1
 800ea82:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800ea84:	f107 0310 	add.w	r3, r7, #16
 800ea88:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ea8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea90:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea94:	2200      	movs	r2, #0
 800ea96:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ea98:	2300      	movs	r3, #0
 800ea9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ea9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eaa2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eaa6:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800eaaa:	8812      	ldrh	r2, [r2, #0]
 800eaac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eaae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eab2:	3302      	adds	r3, #2
 800eab4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800eab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eabc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eac0:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800eac4:	7812      	ldrb	r2, [r2, #0]
 800eac6:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800eac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eacc:	3301      	adds	r3, #1
 800eace:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ead2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ead6:	2218      	movs	r2, #24
 800ead8:	2100      	movs	r1, #0
 800eada:	4618      	mov	r0, r3
 800eadc:	f000 fd1c 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eae0:	233f      	movs	r3, #63	@ 0x3f
 800eae2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800eae6:	23a5      	movs	r3, #165	@ 0xa5
 800eae8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eaec:	f107 0310 	add.w	r3, r7, #16
 800eaf0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eaf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaf8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eafc:	f107 030f 	add.w	r3, r7, #15
 800eb00:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eb04:	2301      	movs	r3, #1
 800eb06:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eb0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb0e:	2100      	movs	r1, #0
 800eb10:	4618      	mov	r0, r3
 800eb12:	f000 ff8b 	bl	800fa2c <hci_send_req>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	da01      	bge.n	800eb20 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800eb1c:	23ff      	movs	r3, #255	@ 0xff
 800eb1e:	e004      	b.n	800eb2a <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800eb20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eb28:	781b      	ldrb	r3, [r3, #0]
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b088      	sub	sp, #32
 800eb38:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb3e:	f107 0308 	add.w	r3, r7, #8
 800eb42:	2218      	movs	r2, #24
 800eb44:	2100      	movs	r1, #0
 800eb46:	4618      	mov	r0, r3
 800eb48:	f000 fce6 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb4c:	233f      	movs	r3, #63	@ 0x3f
 800eb4e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800eb50:	f240 1301 	movw	r3, #257	@ 0x101
 800eb54:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800eb56:	1dfb      	adds	r3, r7, #7
 800eb58:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eb5e:	f107 0308 	add.w	r3, r7, #8
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f000 ff61 	bl	800fa2c <hci_send_req>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	da01      	bge.n	800eb74 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800eb70:	23ff      	movs	r3, #255	@ 0xff
 800eb72:	e000      	b.n	800eb76 <aci_gatt_init+0x42>
  return status;
 800eb74:	79fb      	ldrb	r3, [r7, #7]
}
 800eb76:	4618      	mov	r0, r3
 800eb78:	3720      	adds	r7, #32
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}

0800eb7e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800eb7e:	b590      	push	{r4, r7, lr}
 800eb80:	b0cf      	sub	sp, #316	@ 0x13c
 800eb82:	af00      	add	r7, sp, #0
 800eb84:	4604      	mov	r4, r0
 800eb86:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800eb8a:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800eb8e:	6001      	str	r1, [r0, #0]
 800eb90:	4610      	mov	r0, r2
 800eb92:	4619      	mov	r1, r3
 800eb94:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eb98:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800eb9c:	4622      	mov	r2, r4
 800eb9e:	701a      	strb	r2, [r3, #0]
 800eba0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800eba4:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800eba8:	4602      	mov	r2, r0
 800ebaa:	701a      	strb	r2, [r3, #0]
 800ebac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebb0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ebb4:	460a      	mov	r2, r1
 800ebb6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800ebb8:	f107 0310 	add.w	r3, r7, #16
 800ebbc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800ebc0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebc4:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ebc8:	781b      	ldrb	r3, [r3, #0]
 800ebca:	2b01      	cmp	r3, #1
 800ebcc:	d00a      	beq.n	800ebe4 <aci_gatt_add_service+0x66>
 800ebce:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebd2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	2b02      	cmp	r3, #2
 800ebda:	d101      	bne.n	800ebe0 <aci_gatt_add_service+0x62>
 800ebdc:	2311      	movs	r3, #17
 800ebde:	e002      	b.n	800ebe6 <aci_gatt_add_service+0x68>
 800ebe0:	2301      	movs	r3, #1
 800ebe2:	e000      	b.n	800ebe6 <aci_gatt_add_service+0x68>
 800ebe4:	2303      	movs	r3, #3
 800ebe6:	f107 0210 	add.w	r2, r7, #16
 800ebea:	4413      	add	r3, r2
 800ebec:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ebf0:	f107 030c 	add.w	r3, r7, #12
 800ebf4:	2203      	movs	r2, #3
 800ebf6:	2100      	movs	r1, #0
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f000 fc8d 	bl	800f518 <Osal_MemSet>
  int index_input = 0;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800ec04:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ec08:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec0c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ec10:	7812      	ldrb	r2, [r2, #0]
 800ec12:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ec14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec18:	3301      	adds	r3, #1
 800ec1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800ec1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec22:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b01      	cmp	r3, #1
 800ec2a:	d002      	beq.n	800ec32 <aci_gatt_add_service+0xb4>
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d004      	beq.n	800ec3a <aci_gatt_add_service+0xbc>
 800ec30:	e007      	b.n	800ec42 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800ec32:	2302      	movs	r3, #2
 800ec34:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ec38:	e005      	b.n	800ec46 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800ec3a:	2310      	movs	r3, #16
 800ec3c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800ec40:	e001      	b.n	800ec46 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800ec42:	2397      	movs	r3, #151	@ 0x97
 800ec44:	e06c      	b.n	800ed20 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800ec46:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ec4a:	1c58      	adds	r0, r3, #1
 800ec4c:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800ec50:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec54:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	f000 fc4d 	bl	800f4f8 <Osal_MemCpy>
    index_input += size;
 800ec5e:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800ec62:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ec66:	4413      	add	r3, r2
 800ec68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800ec6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec70:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec74:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ec78:	7812      	ldrb	r2, [r2, #0]
 800ec7a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800ec7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec80:	3301      	adds	r3, #1
 800ec82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800ec86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec8a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ec8e:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800ec92:	7812      	ldrb	r2, [r2, #0]
 800ec94:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800ec96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eca0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eca4:	2218      	movs	r2, #24
 800eca6:	2100      	movs	r1, #0
 800eca8:	4618      	mov	r0, r3
 800ecaa:	f000 fc35 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ecae:	233f      	movs	r3, #63	@ 0x3f
 800ecb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800ecb4:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800ecb8:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ecbc:	f107 0310 	add.w	r3, r7, #16
 800ecc0:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ecc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecc8:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800eccc:	f107 030c 	add.w	r3, r7, #12
 800ecd0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800ecd4:	2303      	movs	r3, #3
 800ecd6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ecda:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ecde:	2100      	movs	r1, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f000 fea3 	bl	800fa2c <hci_send_req>
 800ece6:	4603      	mov	r3, r0
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	da01      	bge.n	800ecf0 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800ecec:	23ff      	movs	r3, #255	@ 0xff
 800ecee:	e017      	b.n	800ed20 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800ecf0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ecf4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d005      	beq.n	800ed0a <aci_gatt_add_service+0x18c>
    return resp.Status;
 800ecfe:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed02:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	e00a      	b.n	800ed20 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800ed0a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ed0e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ed12:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800ed1c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800ed26:	46bd      	mov	sp, r7
 800ed28:	bd90      	pop	{r4, r7, pc}

0800ed2a <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800ed2a:	b590      	push	{r4, r7, lr}
 800ed2c:	b0d1      	sub	sp, #324	@ 0x144
 800ed2e:	af00      	add	r7, sp, #0
 800ed30:	4604      	mov	r4, r0
 800ed32:	4608      	mov	r0, r1
 800ed34:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800ed38:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800ed3c:	600a      	str	r2, [r1, #0]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed44:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ed48:	4622      	mov	r2, r4
 800ed4a:	801a      	strh	r2, [r3, #0]
 800ed4c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed50:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ed54:	4602      	mov	r2, r0
 800ed56:	701a      	strb	r2, [r3, #0]
 800ed58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed5c:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800ed60:	460a      	mov	r2, r1
 800ed62:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800ed64:	f107 0318 	add.w	r3, r7, #24
 800ed68:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800ed6c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed70:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ed74:	781b      	ldrb	r3, [r3, #0]
 800ed76:	2b01      	cmp	r3, #1
 800ed78:	d00a      	beq.n	800ed90 <aci_gatt_add_char+0x66>
 800ed7a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ed7e:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800ed82:	781b      	ldrb	r3, [r3, #0]
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d101      	bne.n	800ed8c <aci_gatt_add_char+0x62>
 800ed88:	2313      	movs	r3, #19
 800ed8a:	e002      	b.n	800ed92 <aci_gatt_add_char+0x68>
 800ed8c:	2303      	movs	r3, #3
 800ed8e:	e000      	b.n	800ed92 <aci_gatt_add_char+0x68>
 800ed90:	2305      	movs	r3, #5
 800ed92:	f107 0218 	add.w	r2, r7, #24
 800ed96:	4413      	add	r3, r2
 800ed98:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ed9c:	f107 0314 	add.w	r3, r7, #20
 800eda0:	2203      	movs	r2, #3
 800eda2:	2100      	movs	r1, #0
 800eda4:	4618      	mov	r0, r3
 800eda6:	f000 fbb7 	bl	800f518 <Osal_MemSet>
  int index_input = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800edb0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800edb4:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800edb8:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800edbc:	8812      	ldrh	r2, [r2, #0]
 800edbe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800edc0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800edc4:	3302      	adds	r3, #2
 800edc6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800edca:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800edce:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800edd2:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800edd6:	7812      	ldrb	r2, [r2, #0]
 800edd8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800edda:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800edde:	3301      	adds	r3, #1
 800ede0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800ede4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ede8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800edec:	781b      	ldrb	r3, [r3, #0]
 800edee:	2b01      	cmp	r3, #1
 800edf0:	d002      	beq.n	800edf8 <aci_gatt_add_char+0xce>
 800edf2:	2b02      	cmp	r3, #2
 800edf4:	d004      	beq.n	800ee00 <aci_gatt_add_char+0xd6>
 800edf6:	e007      	b.n	800ee08 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800edf8:	2302      	movs	r3, #2
 800edfa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800edfe:	e005      	b.n	800ee0c <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800ee00:	2310      	movs	r3, #16
 800ee02:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800ee06:	e001      	b.n	800ee0c <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800ee08:	2397      	movs	r3, #151	@ 0x97
 800ee0a:	e091      	b.n	800ef30 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800ee0c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800ee10:	1cd8      	adds	r0, r3, #3
 800ee12:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800ee16:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ee1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800ee1e:	6819      	ldr	r1, [r3, #0]
 800ee20:	f000 fb6a 	bl	800f4f8 <Osal_MemCpy>
    index_input += size;
 800ee24:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800ee28:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800ee2c:	4413      	add	r3, r2
 800ee2e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800ee32:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee36:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800ee3a:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800ee3e:	8812      	ldrh	r2, [r2, #0]
 800ee40:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ee42:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ee46:	3302      	adds	r3, #2
 800ee48:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800ee4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee50:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ee54:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800ee56:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800ee60:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee64:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ee68:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800ee6a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ee6e:	3301      	adds	r3, #1
 800ee70:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800ee74:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee78:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800ee7c:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800ee7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ee82:	3301      	adds	r3, #1
 800ee84:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800ee88:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ee8c:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800ee90:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800ee92:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ee96:	3301      	adds	r3, #1
 800ee98:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800ee9c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eea0:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800eea4:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800eea6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eeaa:	3301      	adds	r3, #1
 800eeac:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eeb0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800eeb4:	2218      	movs	r2, #24
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f000 fb2d 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eebe:	233f      	movs	r3, #63	@ 0x3f
 800eec0:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800eec4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800eec8:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800eecc:	f107 0318 	add.w	r3, r7, #24
 800eed0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800eed4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eed8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800eedc:	f107 0314 	add.w	r3, r7, #20
 800eee0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800eee4:	2303      	movs	r3, #3
 800eee6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eeea:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800eeee:	2100      	movs	r1, #0
 800eef0:	4618      	mov	r0, r3
 800eef2:	f000 fd9b 	bl	800fa2c <hci_send_req>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	da01      	bge.n	800ef00 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800eefc:	23ff      	movs	r3, #255	@ 0xff
 800eefe:	e017      	b.n	800ef30 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800ef00:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ef04:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ef08:	781b      	ldrb	r3, [r3, #0]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d005      	beq.n	800ef1a <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800ef0e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ef12:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ef16:	781b      	ldrb	r3, [r3, #0]
 800ef18:	e00a      	b.n	800ef30 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800ef1a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800ef1e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ef22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800ef2c:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd90      	pop	{r4, r7, pc}

0800ef3a <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800ef3a:	b5b0      	push	{r4, r5, r7, lr}
 800ef3c:	b0cc      	sub	sp, #304	@ 0x130
 800ef3e:	af00      	add	r7, sp, #0
 800ef40:	4605      	mov	r5, r0
 800ef42:	460c      	mov	r4, r1
 800ef44:	4610      	mov	r0, r2
 800ef46:	4619      	mov	r1, r3
 800ef48:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef4c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ef50:	462a      	mov	r2, r5
 800ef52:	801a      	strh	r2, [r3, #0]
 800ef54:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef58:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	801a      	strh	r2, [r3, #0]
 800ef60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef64:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800ef68:	4602      	mov	r2, r0
 800ef6a:	701a      	strb	r2, [r3, #0]
 800ef6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef70:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800ef74:	460a      	mov	r2, r1
 800ef76:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800ef78:	f107 0310 	add.w	r3, r7, #16
 800ef7c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ef80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ef88:	2200      	movs	r2, #0
 800ef8a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ef8c:	2300      	movs	r3, #0
 800ef8e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800ef92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef96:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef9a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ef9e:	8812      	ldrh	r2, [r2, #0]
 800efa0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800efa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efa6:	3302      	adds	r3, #2
 800efa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800efac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efb0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efb4:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800efb8:	8812      	ldrh	r2, [r2, #0]
 800efba:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800efbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efc0:	3302      	adds	r3, #2
 800efc2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800efc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efca:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efce:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800efd2:	7812      	ldrb	r2, [r2, #0]
 800efd4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800efd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efda:	3301      	adds	r3, #1
 800efdc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800efe0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efe4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efe8:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800efec:	7812      	ldrb	r2, [r2, #0]
 800efee:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eff0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eff4:	3301      	adds	r3, #1
 800eff6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800effa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800effe:	1d98      	adds	r0, r3, #6
 800f000:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f004:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	461a      	mov	r2, r3
 800f00c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f010:	f000 fa72 	bl	800f4f8 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f014:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f018:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f01c:	781b      	ldrb	r3, [r3, #0]
 800f01e:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f022:	4413      	add	r3, r2
 800f024:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f028:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f02c:	2218      	movs	r2, #24
 800f02e:	2100      	movs	r1, #0
 800f030:	4618      	mov	r0, r3
 800f032:	f000 fa71 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f036:	233f      	movs	r3, #63	@ 0x3f
 800f038:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f03c:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f040:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f044:	f107 0310 	add.w	r3, r7, #16
 800f048:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f050:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f054:	f107 030f 	add.w	r3, r7, #15
 800f058:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f05c:	2301      	movs	r3, #1
 800f05e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f062:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f066:	2100      	movs	r1, #0
 800f068:	4618      	mov	r0, r3
 800f06a:	f000 fcdf 	bl	800fa2c <hci_send_req>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b00      	cmp	r3, #0
 800f072:	da01      	bge.n	800f078 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f074:	23ff      	movs	r3, #255	@ 0xff
 800f076:	e004      	b.n	800f082 <aci_gatt_update_char_value+0x148>
  return status;
 800f078:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f07c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f080:	781b      	ldrb	r3, [r3, #0]
}
 800f082:	4618      	mov	r0, r3
 800f084:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f088:	46bd      	mov	sp, r7
 800f08a:	bdb0      	pop	{r4, r5, r7, pc}

0800f08c <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b0cc      	sub	sp, #304	@ 0x130
 800f090:	af00      	add	r7, sp, #0
 800f092:	4602      	mov	r2, r0
 800f094:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f098:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f09c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800f09e:	f107 0310 	add.w	r3, r7, #16
 800f0a2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f0a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0aa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0b2:	2300      	movs	r3, #0
 800f0b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f0b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0bc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0c0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f0c4:	8812      	ldrh	r2, [r2, #0]
 800f0c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f0c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0cc:	3302      	adds	r3, #2
 800f0ce:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f0d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f0d6:	2218      	movs	r2, #24
 800f0d8:	2100      	movs	r1, #0
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 fa1c 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f0e0:	233f      	movs	r3, #63	@ 0x3f
 800f0e2:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800f0e6:	f240 1325 	movw	r3, #293	@ 0x125
 800f0ea:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f0ee:	f107 0310 	add.w	r3, r7, #16
 800f0f2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f0f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0fa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f0fe:	f107 030f 	add.w	r3, r7, #15
 800f102:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f106:	2301      	movs	r3, #1
 800f108:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f10c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f110:	2100      	movs	r1, #0
 800f112:	4618      	mov	r0, r3
 800f114:	f000 fc8a 	bl	800fa2c <hci_send_req>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	da01      	bge.n	800f122 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800f11e:	23ff      	movs	r3, #255	@ 0xff
 800f120:	e004      	b.n	800f12c <aci_gatt_confirm_indication+0xa0>
  return status;
 800f122:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f126:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f12a:	781b      	ldrb	r3, [r3, #0]
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f132:	46bd      	mov	sp, r7
 800f134:	bd80      	pop	{r7, pc}

0800f136 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800f136:	b580      	push	{r7, lr}
 800f138:	b0cc      	sub	sp, #304	@ 0x130
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f140:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f144:	601a      	str	r2, [r3, #0]
 800f146:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f14a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f14e:	4602      	mov	r2, r0
 800f150:	701a      	strb	r2, [r3, #0]
 800f152:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f156:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f15a:	460a      	mov	r2, r1
 800f15c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f15e:	f107 0310 	add.w	r3, r7, #16
 800f162:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f166:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f16a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f16e:	2200      	movs	r2, #0
 800f170:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800f178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f17c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f180:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f184:	7812      	ldrb	r2, [r2, #0]
 800f186:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f18c:	3301      	adds	r3, #1
 800f18e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800f192:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f196:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f19a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f19e:	7812      	ldrb	r2, [r2, #0]
 800f1a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f1a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f1ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f1b0:	1c98      	adds	r0, r3, #2
 800f1b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1b6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f1ba:	781a      	ldrb	r2, [r3, #0]
 800f1bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1c0:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f1c4:	6819      	ldr	r1, [r3, #0]
 800f1c6:	f000 f997 	bl	800f4f8 <Osal_MemCpy>
  index_input += Length;
 800f1ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1ce:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f1d8:	4413      	add	r3, r2
 800f1da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f1e2:	2218      	movs	r2, #24
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f000 f996 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1ec:	233f      	movs	r3, #63	@ 0x3f
 800f1ee:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f1f2:	230c      	movs	r3, #12
 800f1f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f1f8:	f107 0310 	add.w	r3, r7, #16
 800f1fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f200:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f204:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f208:	f107 030f 	add.w	r3, r7, #15
 800f20c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f210:	2301      	movs	r3, #1
 800f212:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f216:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f21a:	2100      	movs	r1, #0
 800f21c:	4618      	mov	r0, r3
 800f21e:	f000 fc05 	bl	800fa2c <hci_send_req>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	da01      	bge.n	800f22c <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f228:	23ff      	movs	r3, #255	@ 0xff
 800f22a:	e004      	b.n	800f236 <aci_hal_write_config_data+0x100>
  return status;
 800f22c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f230:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f234:	781b      	ldrb	r3, [r3, #0]
}
 800f236:	4618      	mov	r0, r3
 800f238:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f23c:	46bd      	mov	sp, r7
 800f23e:	bd80      	pop	{r7, pc}

0800f240 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f240:	b580      	push	{r7, lr}
 800f242:	b0cc      	sub	sp, #304	@ 0x130
 800f244:	af00      	add	r7, sp, #0
 800f246:	4602      	mov	r2, r0
 800f248:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f24c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f250:	701a      	strb	r2, [r3, #0]
 800f252:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f256:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f25a:	460a      	mov	r2, r1
 800f25c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f25e:	f107 0310 	add.w	r3, r7, #16
 800f262:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f266:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f26a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f26e:	2200      	movs	r2, #0
 800f270:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800f278:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f27c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f280:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f284:	7812      	ldrb	r2, [r2, #0]
 800f286:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f288:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f28c:	3301      	adds	r3, #1
 800f28e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800f292:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f296:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f29a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f29e:	7812      	ldrb	r2, [r2, #0]
 800f2a0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f2a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2ac:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f2b0:	2218      	movs	r2, #24
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 f92f 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f2ba:	233f      	movs	r3, #63	@ 0x3f
 800f2bc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800f2c0:	230f      	movs	r3, #15
 800f2c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f2c6:	f107 0310 	add.w	r3, r7, #16
 800f2ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f2ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f2d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f2d6:	f107 030f 	add.w	r3, r7, #15
 800f2da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f2de:	2301      	movs	r3, #1
 800f2e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f2e8:	2100      	movs	r1, #0
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f000 fb9e 	bl	800fa2c <hci_send_req>
 800f2f0:	4603      	mov	r3, r0
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	da01      	bge.n	800f2fa <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800f2f6:	23ff      	movs	r3, #255	@ 0xff
 800f2f8:	e004      	b.n	800f304 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800f2fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f2fe:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f302:	781b      	ldrb	r3, [r3, #0]
}
 800f304:	4618      	mov	r0, r3
 800f306:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b0cc      	sub	sp, #304	@ 0x130
 800f312:	af00      	add	r7, sp, #0
 800f314:	4602      	mov	r2, r0
 800f316:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f31a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f31e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800f320:	f107 0310 	add.w	r3, r7, #16
 800f324:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f328:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f32c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f330:	2200      	movs	r2, #0
 800f332:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f334:	2300      	movs	r3, #0
 800f336:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800f33a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f33e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f342:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f346:	8812      	ldrh	r2, [r2, #0]
 800f348:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f34a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f34e:	3302      	adds	r3, #2
 800f350:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f354:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f358:	2218      	movs	r2, #24
 800f35a:	2100      	movs	r1, #0
 800f35c:	4618      	mov	r0, r3
 800f35e:	f000 f8db 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f362:	233f      	movs	r3, #63	@ 0x3f
 800f364:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800f368:	2318      	movs	r3, #24
 800f36a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f36e:	f107 0310 	add.w	r3, r7, #16
 800f372:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f376:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f37a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f37e:	f107 030f 	add.w	r3, r7, #15
 800f382:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f386:	2301      	movs	r3, #1
 800f388:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f38c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f390:	2100      	movs	r1, #0
 800f392:	4618      	mov	r0, r3
 800f394:	f000 fb4a 	bl	800fa2c <hci_send_req>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	da01      	bge.n	800f3a2 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800f39e:	23ff      	movs	r3, #255	@ 0xff
 800f3a0:	e004      	b.n	800f3ac <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800f3a2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f3a6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f3aa:	781b      	ldrb	r3, [r3, #0]
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f3b2:	46bd      	mov	sp, r7
 800f3b4:	bd80      	pop	{r7, pc}

0800f3b6 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800f3b6:	b580      	push	{r7, lr}
 800f3b8:	b088      	sub	sp, #32
 800f3ba:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f3bc:	2300      	movs	r3, #0
 800f3be:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f3c0:	f107 0308 	add.w	r3, r7, #8
 800f3c4:	2218      	movs	r2, #24
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 f8a5 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x03;
 800f3ce:	2303      	movs	r3, #3
 800f3d0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800f3d2:	2303      	movs	r3, #3
 800f3d4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f3d6:	1dfb      	adds	r3, r7, #7
 800f3d8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3de:	f107 0308 	add.w	r3, r7, #8
 800f3e2:	2100      	movs	r1, #0
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f000 fb21 	bl	800fa2c <hci_send_req>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	da01      	bge.n	800f3f4 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f3f0:	23ff      	movs	r3, #255	@ 0xff
 800f3f2:	e000      	b.n	800f3f6 <hci_reset+0x40>
  return status;
 800f3f4:	79fb      	ldrb	r3, [r7, #7]
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3720      	adds	r7, #32
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800f3fe:	b590      	push	{r4, r7, lr}
 800f400:	b0cd      	sub	sp, #308	@ 0x134
 800f402:	af00      	add	r7, sp, #0
 800f404:	4604      	mov	r4, r0
 800f406:	4608      	mov	r0, r1
 800f408:	4611      	mov	r1, r2
 800f40a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f40e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f412:	4622      	mov	r2, r4
 800f414:	701a      	strb	r2, [r3, #0]
 800f416:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f41a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f41e:	4602      	mov	r2, r0
 800f420:	701a      	strb	r2, [r3, #0]
 800f422:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f426:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f42a:	460a      	mov	r2, r1
 800f42c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800f42e:	f107 0310 	add.w	r3, r7, #16
 800f432:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f436:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f43a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f43e:	2200      	movs	r2, #0
 800f440:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f442:	2300      	movs	r3, #0
 800f444:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800f448:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f44c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f450:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f454:	7812      	ldrb	r2, [r2, #0]
 800f456:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f458:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f45c:	3301      	adds	r3, #1
 800f45e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800f462:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f466:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f46a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f46e:	7812      	ldrb	r2, [r2, #0]
 800f470:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f472:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f476:	3301      	adds	r3, #1
 800f478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800f47c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f480:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f484:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f488:	7812      	ldrb	r2, [r2, #0]
 800f48a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f48c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f490:	3301      	adds	r3, #1
 800f492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f496:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f49a:	2218      	movs	r2, #24
 800f49c:	2100      	movs	r1, #0
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f000 f83a 	bl	800f518 <Osal_MemSet>
  rq.ogf = 0x08;
 800f4a4:	2308      	movs	r3, #8
 800f4a6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800f4aa:	2331      	movs	r3, #49	@ 0x31
 800f4ac:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f4b0:	f107 0310 	add.w	r3, r7, #16
 800f4b4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f4b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f4bc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f4c0:	f107 030f 	add.w	r3, r7, #15
 800f4c4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f4c8:	2301      	movs	r3, #1
 800f4ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f4ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f4d2:	2100      	movs	r1, #0
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f000 faa9 	bl	800fa2c <hci_send_req>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	da01      	bge.n	800f4e4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800f4e0:	23ff      	movs	r3, #255	@ 0xff
 800f4e2:	e004      	b.n	800f4ee <hci_le_set_default_phy+0xf0>
  return status;
 800f4e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f4e8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f4ec:	781b      	ldrb	r3, [r3, #0]
}
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd90      	pop	{r4, r7, pc}

0800f4f8 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800f504:	687a      	ldr	r2, [r7, #4]
 800f506:	68b9      	ldr	r1, [r7, #8]
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	f003 fd24 	bl	8012f56 <memcpy>
 800f50e:	4603      	mov	r3, r0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	68b9      	ldr	r1, [r7, #8]
 800f528:	68f8      	ldr	r0, [r7, #12]
 800f52a:	f003 fc83 	bl	8012e34 <memset>
 800f52e:	4603      	mov	r3, r0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3710      	adds	r7, #16
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800f538:	b480      	push	{r7}
 800f53a:	af00      	add	r7, sp, #0
  return;
 800f53c:	bf00      	nop
}
 800f53e:	46bd      	mov	sp, r7
 800f540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f544:	4770      	bx	lr

0800f546 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800f546:	b480      	push	{r7}
 800f548:	af00      	add	r7, sp, #0
  return;
 800f54a:	bf00      	nop
}
 800f54c:	46bd      	mov	sp, r7
 800f54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f552:	4770      	bx	lr

0800f554 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800f554:	b480      	push	{r7}
 800f556:	af00      	add	r7, sp, #0
  return;
 800f558:	bf00      	nop
}
 800f55a:	46bd      	mov	sp, r7
 800f55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f560:	4770      	bx	lr

0800f562 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800f562:	b480      	push	{r7}
 800f564:	af00      	add	r7, sp, #0
  return;
 800f566:	bf00      	nop
}
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800f570:	b480      	push	{r7}
 800f572:	af00      	add	r7, sp, #0
  return;
 800f574:	bf00      	nop
}
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr

0800f57e <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800f57e:	b480      	push	{r7}
 800f580:	af00      	add	r7, sp, #0
  return;
 800f582:	bf00      	nop
}
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr

0800f58c <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800f58c:	b480      	push	{r7}
 800f58e:	af00      	add	r7, sp, #0
  return;
 800f590:	bf00      	nop
}
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800f59a:	b480      	push	{r7}
 800f59c:	af00      	add	r7, sp, #0
  return;
 800f59e:	bf00      	nop
}
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800f5a8:	b480      	push	{r7}
 800f5aa:	af00      	add	r7, sp, #0
  return;
 800f5ac:	bf00      	nop
}
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b4:	4770      	bx	lr

0800f5b6 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800f5b6:	b480      	push	{r7}
 800f5b8:	af00      	add	r7, sp, #0
  return;
 800f5ba:	bf00      	nop
}
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c2:	4770      	bx	lr

0800f5c4 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800f5c4:	b480      	push	{r7}
 800f5c6:	af00      	add	r7, sp, #0
  return;
 800f5c8:	bf00      	nop
}
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr

0800f5d2 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800f5d2:	b480      	push	{r7}
 800f5d4:	af00      	add	r7, sp, #0
  return;
 800f5d6:	bf00      	nop
}
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5de:	4770      	bx	lr

0800f5e0 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	af00      	add	r7, sp, #0
  return;
 800f5e4:	bf00      	nop
}
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ec:	4770      	bx	lr

0800f5ee <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800f5ee:	b480      	push	{r7}
 800f5f0:	af00      	add	r7, sp, #0
  return;
 800f5f2:	bf00      	nop
}
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fa:	4770      	bx	lr

0800f5fc <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	af00      	add	r7, sp, #0
  return;
 800f600:	bf00      	nop
}
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800f60a:	b480      	push	{r7}
 800f60c:	af00      	add	r7, sp, #0
  return;
 800f60e:	bf00      	nop
}
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800f618:	b480      	push	{r7}
 800f61a:	af00      	add	r7, sp, #0
  return;
 800f61c:	bf00      	nop
}
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
	...

0800f628 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800f62c:	4b04      	ldr	r3, [pc, #16]	@ (800f640 <SVCCTL_Init+0x18>)
 800f62e:	2200      	movs	r2, #0
 800f630:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800f632:	4b04      	ldr	r3, [pc, #16]	@ (800f644 <SVCCTL_Init+0x1c>)
 800f634:	2200      	movs	r2, #0
 800f636:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800f638:	f000 f806 	bl	800f648 <SVCCTL_SvcInit>

  return;
 800f63c:	bf00      	nop
}
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	2000016c 	.word	0x2000016c
 800f644:	2000018c 	.word	0x2000018c

0800f648 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	af00      	add	r7, sp, #0
  BAS_Init();
 800f64c:	f7ff ff74 	bl	800f538 <BAS_Init>

  BLS_Init();
 800f650:	f7ff ff79 	bl	800f546 <BLS_Init>

  CRS_STM_Init();
 800f654:	f7ff ff7e 	bl	800f554 <CRS_STM_Init>

  DIS_Init();
 800f658:	f7ff ff83 	bl	800f562 <DIS_Init>

  EDS_STM_Init();
 800f65c:	f7ff ff88 	bl	800f570 <EDS_STM_Init>

  HIDS_Init();
 800f660:	f7ff ff8d 	bl	800f57e <HIDS_Init>

  HRS_Init();
 800f664:	f7ff ff92 	bl	800f58c <HRS_Init>

  HTS_Init();
 800f668:	f7ff ff97 	bl	800f59a <HTS_Init>

  IAS_Init();
 800f66c:	f7ff ff9c 	bl	800f5a8 <IAS_Init>

  LLS_Init();
 800f670:	f7ff ffa1 	bl	800f5b6 <LLS_Init>

  TPS_Init();
 800f674:	f7ff ffa6 	bl	800f5c4 <TPS_Init>

  MOTENV_STM_Init();
 800f678:	f7ff ffab 	bl	800f5d2 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800f67c:	f7ff ffb0 	bl	800f5e0 <P2PS_STM_Init>

  ZDD_STM_Init();
 800f680:	f7ff ffb5 	bl	800f5ee <ZDD_STM_Init>

  OTAS_STM_Init();
 800f684:	f7ff ffba 	bl	800f5fc <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800f688:	f7ff ffc6 	bl	800f618 <BVOPUS_STM_Init>

  MESH_Init();
 800f68c:	f7ff ffbd 	bl	800f60a <MESH_Init>

  SVCCTL_InitCustomSvc();
 800f690:	f002 fb3c 	bl	8011d0c <SVCCTL_InitCustomSvc>
  
  return;
 800f694:	bf00      	nop
}
 800f696:	bd80      	pop	{r7, pc}

0800f698 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800f6a0:	4b09      	ldr	r3, [pc, #36]	@ (800f6c8 <SVCCTL_RegisterSvcHandler+0x30>)
 800f6a2:	7f1b      	ldrb	r3, [r3, #28]
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	4a08      	ldr	r2, [pc, #32]	@ (800f6c8 <SVCCTL_RegisterSvcHandler+0x30>)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800f6ae:	4b06      	ldr	r3, [pc, #24]	@ (800f6c8 <SVCCTL_RegisterSvcHandler+0x30>)
 800f6b0:	7f1b      	ldrb	r3, [r3, #28]
 800f6b2:	3301      	adds	r3, #1
 800f6b4:	b2da      	uxtb	r2, r3
 800f6b6:	4b04      	ldr	r3, [pc, #16]	@ (800f6c8 <SVCCTL_RegisterSvcHandler+0x30>)
 800f6b8:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800f6ba:	bf00      	nop
}
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr
 800f6c6:	bf00      	nop
 800f6c8:	2000016c 	.word	0x2000016c

0800f6cc <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	781b      	ldrb	r3, [r3, #0]
 800f6e2:	2bff      	cmp	r3, #255	@ 0xff
 800f6e4:	d125      	bne.n	800f732 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	3302      	adds	r3, #2
 800f6ea:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	881b      	ldrh	r3, [r3, #0]
 800f6f0:	b29b      	uxth	r3, r3
 800f6f2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f6f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800f6fa:	d118      	bne.n	800f72e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	757b      	strb	r3, [r7, #21]
 800f700:	e00d      	b.n	800f71e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800f702:	7d7b      	ldrb	r3, [r7, #21]
 800f704:	4a1a      	ldr	r2, [pc, #104]	@ (800f770 <SVCCTL_UserEvtRx+0xa4>)
 800f706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	4798      	blx	r3
 800f70e:	4603      	mov	r3, r0
 800f710:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800f712:	7dfb      	ldrb	r3, [r7, #23]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d108      	bne.n	800f72a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800f718:	7d7b      	ldrb	r3, [r7, #21]
 800f71a:	3301      	adds	r3, #1
 800f71c:	757b      	strb	r3, [r7, #21]
 800f71e:	4b14      	ldr	r3, [pc, #80]	@ (800f770 <SVCCTL_UserEvtRx+0xa4>)
 800f720:	7f1b      	ldrb	r3, [r3, #28]
 800f722:	7d7a      	ldrb	r2, [r7, #21]
 800f724:	429a      	cmp	r2, r3
 800f726:	d3ec      	bcc.n	800f702 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800f728:	e002      	b.n	800f730 <SVCCTL_UserEvtRx+0x64>
              break;
 800f72a:	bf00      	nop
          break;
 800f72c:	e000      	b.n	800f730 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800f72e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800f730:	e000      	b.n	800f734 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800f732:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800f734:	7dfb      	ldrb	r3, [r7, #23]
 800f736:	2b02      	cmp	r3, #2
 800f738:	d00f      	beq.n	800f75a <SVCCTL_UserEvtRx+0x8e>
 800f73a:	2b02      	cmp	r3, #2
 800f73c:	dc10      	bgt.n	800f760 <SVCCTL_UserEvtRx+0x94>
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d002      	beq.n	800f748 <SVCCTL_UserEvtRx+0x7c>
 800f742:	2b01      	cmp	r3, #1
 800f744:	d006      	beq.n	800f754 <SVCCTL_UserEvtRx+0x88>
 800f746:	e00b      	b.n	800f760 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800f748:	6878      	ldr	r0, [r7, #4]
 800f74a:	f000 fffb 	bl	8010744 <SVCCTL_App_Notification>
 800f74e:	4603      	mov	r3, r0
 800f750:	75bb      	strb	r3, [r7, #22]
      break;
 800f752:	e008      	b.n	800f766 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f754:	2301      	movs	r3, #1
 800f756:	75bb      	strb	r3, [r7, #22]
      break;
 800f758:	e005      	b.n	800f766 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800f75a:	2300      	movs	r3, #0
 800f75c:	75bb      	strb	r3, [r7, #22]
      break;
 800f75e:	e002      	b.n	800f766 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800f760:	2301      	movs	r3, #1
 800f762:	75bb      	strb	r3, [r7, #22]
      break;
 800f764:	bf00      	nop
  }

  return (return_status);
 800f766:	7dbb      	ldrb	r3, [r7, #22]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3718      	adds	r7, #24
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	2000016c 	.word	0x2000016c

0800f774 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800f774:	b580      	push	{r7, lr}
 800f776:	b088      	sub	sp, #32
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f77c:	f107 030c 	add.w	r3, r7, #12
 800f780:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800f788:	69fb      	ldr	r3, [r7, #28]
 800f78a:	212e      	movs	r1, #46	@ 0x2e
 800f78c:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800f790:	f000 fae8 	bl	800fd64 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f794:	69fb      	ldr	r3, [r7, #28]
 800f796:	330b      	adds	r3, #11
 800f798:	78db      	ldrb	r3, [r3, #3]
}
 800f79a:	4618      	mov	r0, r3
 800f79c:	3720      	adds	r7, #32
 800f79e:	46bd      	mov	sp, r7
 800f7a0:	bd80      	pop	{r7, pc}

0800f7a2 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800f7a2:	b580      	push	{r7, lr}
 800f7a4:	b088      	sub	sp, #32
 800f7a6:	af00      	add	r7, sp, #0
 800f7a8:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f7aa:	f107 030c 	add.w	r3, r7, #12
 800f7ae:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	210f      	movs	r1, #15
 800f7ba:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800f7be:	f000 fad1 	bl	800fd64 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	330b      	adds	r3, #11
 800f7c6:	78db      	ldrb	r3, [r3, #3]
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3720      	adds	r7, #32
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}

0800f7d0 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b088      	sub	sp, #32
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800f7d8:	f107 030c 	add.w	r3, r7, #12
 800f7dc:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800f7de:	69fb      	ldr	r3, [r7, #28]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	2110      	movs	r1, #16
 800f7e4:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800f7e8:	f000 fabc 	bl	800fd64 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800f7ec:	69fb      	ldr	r3, [r7, #28]
 800f7ee:	330b      	adds	r3, #11
 800f7f0:	78db      	ldrb	r3, [r3, #3]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3720      	adds	r7, #32
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
	...

0800f7fc <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b08b      	sub	sp, #44	@ 0x2c
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800f804:	2300      	movs	r3, #0
 800f806:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800f808:	2300      	movs	r3, #0
 800f80a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800f810:	2300      	movs	r3, #0
 800f812:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800f814:	2300      	movs	r3, #0
 800f816:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800f818:	2300      	movs	r3, #0
 800f81a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800f81c:	2300      	movs	r3, #0
 800f81e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800f820:	2300      	movs	r3, #0
 800f822:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800f824:	4b4a      	ldr	r3, [pc, #296]	@ (800f950 <SHCI_GetWirelessFwInfo+0x154>)
 800f826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f828:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800f82c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	009b      	lsls	r3, r3, #2
 800f832:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800f836:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800f83e:	68bb      	ldr	r3, [r7, #8]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a44      	ldr	r2, [pc, #272]	@ (800f954 <SHCI_GetWirelessFwInfo+0x158>)
 800f844:	4293      	cmp	r3, r2
 800f846:	d10f      	bne.n	800f868 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800f848:	68bb      	ldr	r3, [r7, #8]
 800f84a:	695b      	ldr	r3, [r3, #20]
 800f84c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	699b      	ldr	r3, [r3, #24]
 800f852:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	69db      	ldr	r3, [r3, #28]
 800f858:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800f860:	68bb      	ldr	r3, [r7, #8]
 800f862:	691b      	ldr	r3, [r3, #16]
 800f864:	617b      	str	r3, [r7, #20]
 800f866:	e01a      	b.n	800f89e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	009b      	lsls	r3, r3, #2
 800f86c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800f870:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800f874:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	695b      	ldr	r3, [r3, #20]
 800f884:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	699b      	ldr	r3, [r3, #24]
 800f88c:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	685b      	ldr	r3, [r3, #4]
 800f894:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f89e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a0:	0e1b      	lsrs	r3, r3, #24
 800f8a2:	b2da      	uxtb	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8aa:	0c1b      	lsrs	r3, r3, #16
 800f8ac:	b2da      	uxtb	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f8b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8b4:	0a1b      	lsrs	r3, r3, #8
 800f8b6:	b2da      	uxtb	r2, r3
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800f8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8be:	091b      	lsrs	r3, r3, #4
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	f003 030f 	and.w	r3, r3, #15
 800f8c6:	b2da      	uxtb	r2, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8ce:	b2db      	uxtb	r3, r3
 800f8d0:	f003 030f 	and.w	r3, r3, #15
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f8da:	6a3b      	ldr	r3, [r7, #32]
 800f8dc:	0e1b      	lsrs	r3, r3, #24
 800f8de:	b2da      	uxtb	r2, r3
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f8e4:	6a3b      	ldr	r3, [r7, #32]
 800f8e6:	0c1b      	lsrs	r3, r3, #16
 800f8e8:	b2da      	uxtb	r2, r3
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f8ee:	6a3b      	ldr	r3, [r7, #32]
 800f8f0:	0a1b      	lsrs	r3, r3, #8
 800f8f2:	b2da      	uxtb	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f8f8:	6a3b      	ldr	r3, [r7, #32]
 800f8fa:	b2da      	uxtb	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f900:	69fb      	ldr	r3, [r7, #28]
 800f902:	b2da      	uxtb	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f908:	69bb      	ldr	r3, [r7, #24]
 800f90a:	0e1b      	lsrs	r3, r3, #24
 800f90c:	b2da      	uxtb	r2, r3
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f912:	69bb      	ldr	r3, [r7, #24]
 800f914:	0c1b      	lsrs	r3, r3, #16
 800f916:	b2da      	uxtb	r2, r3
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f91c:	69bb      	ldr	r3, [r7, #24]
 800f91e:	0a1b      	lsrs	r3, r3, #8
 800f920:	b2da      	uxtb	r2, r3
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	0e1b      	lsrs	r3, r3, #24
 800f92a:	b2da      	uxtb	r2, r3
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	0c1b      	lsrs	r3, r3, #16
 800f934:	b2da      	uxtb	r2, r3
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	b2da      	uxtb	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f942:	2300      	movs	r3, #0
}
 800f944:	4618      	mov	r0, r3
 800f946:	372c      	adds	r7, #44	@ 0x2c
 800f948:	46bd      	mov	sp, r7
 800f94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94e:	4770      	bx	lr
 800f950:	58004000 	.word	0x58004000
 800f954:	a94656b9 	.word	0xa94656b9

0800f958 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b082      	sub	sp, #8
 800f95c:	af00      	add	r7, sp, #0
 800f95e:	6078      	str	r0, [r7, #4]
 800f960:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	4a08      	ldr	r2, [pc, #32]	@ (800f988 <hci_init+0x30>)
 800f968:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f96a:	4a08      	ldr	r2, [pc, #32]	@ (800f98c <hci_init+0x34>)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f970:	4806      	ldr	r0, [pc, #24]	@ (800f98c <hci_init+0x34>)
 800f972:	f000 f979 	bl	800fc68 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4618      	mov	r0, r3
 800f97c:	f000 f8da 	bl	800fb34 <TlInit>

  return;
 800f980:	bf00      	nop
}
 800f982:	3708      	adds	r7, #8
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	200008e4 	.word	0x200008e4
 800f98c:	200008bc 	.word	0x200008bc

0800f990 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b084      	sub	sp, #16
 800f994:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f996:	4822      	ldr	r0, [pc, #136]	@ (800fa20 <hci_user_evt_proc+0x90>)
 800f998:	f000 fd5a 	bl	8010450 <LST_is_empty>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d12b      	bne.n	800f9fa <hci_user_evt_proc+0x6a>
 800f9a2:	4b20      	ldr	r3, [pc, #128]	@ (800fa24 <hci_user_evt_proc+0x94>)
 800f9a4:	781b      	ldrb	r3, [r3, #0]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d027      	beq.n	800f9fa <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f9aa:	f107 030c 	add.w	r3, r7, #12
 800f9ae:	4619      	mov	r1, r3
 800f9b0:	481b      	ldr	r0, [pc, #108]	@ (800fa20 <hci_user_evt_proc+0x90>)
 800f9b2:	f000 fddc 	bl	801056e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f9b6:	4b1c      	ldr	r3, [pc, #112]	@ (800fa28 <hci_user_evt_proc+0x98>)
 800f9b8:	69db      	ldr	r3, [r3, #28]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d00c      	beq.n	800f9d8 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f9c2:	2301      	movs	r3, #1
 800f9c4:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f9c6:	4b18      	ldr	r3, [pc, #96]	@ (800fa28 <hci_user_evt_proc+0x98>)
 800f9c8:	69db      	ldr	r3, [r3, #28]
 800f9ca:	1d3a      	adds	r2, r7, #4
 800f9cc:	4610      	mov	r0, r2
 800f9ce:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f9d0:	793a      	ldrb	r2, [r7, #4]
 800f9d2:	4b14      	ldr	r3, [pc, #80]	@ (800fa24 <hci_user_evt_proc+0x94>)
 800f9d4:	701a      	strb	r2, [r3, #0]
 800f9d6:	e002      	b.n	800f9de <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f9d8:	4b12      	ldr	r3, [pc, #72]	@ (800fa24 <hci_user_evt_proc+0x94>)
 800f9da:	2201      	movs	r2, #1
 800f9dc:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f9de:	4b11      	ldr	r3, [pc, #68]	@ (800fa24 <hci_user_evt_proc+0x94>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d004      	beq.n	800f9f0 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 fc0d 	bl	8010208 <TL_MM_EvtDone>
 800f9ee:	e004      	b.n	800f9fa <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	4619      	mov	r1, r3
 800f9f4:	480a      	ldr	r0, [pc, #40]	@ (800fa20 <hci_user_evt_proc+0x90>)
 800f9f6:	f000 fd4d 	bl	8010494 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f9fa:	4809      	ldr	r0, [pc, #36]	@ (800fa20 <hci_user_evt_proc+0x90>)
 800f9fc:	f000 fd28 	bl	8010450 <LST_is_empty>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d107      	bne.n	800fa16 <hci_user_evt_proc+0x86>
 800fa06:	4b07      	ldr	r3, [pc, #28]	@ (800fa24 <hci_user_evt_proc+0x94>)
 800fa08:	781b      	ldrb	r3, [r3, #0]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800fa0e:	4804      	ldr	r0, [pc, #16]	@ (800fa20 <hci_user_evt_proc+0x90>)
 800fa10:	f001 fd5e 	bl	80114d0 <hci_notify_asynch_evt>
  }


  return;
 800fa14:	bf00      	nop
 800fa16:	bf00      	nop
}
 800fa18:	3710      	adds	r7, #16
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	bd80      	pop	{r7, pc}
 800fa1e:	bf00      	nop
 800fa20:	20000194 	.word	0x20000194
 800fa24:	200001a0 	.word	0x200001a0
 800fa28:	200008bc 	.word	0x200008bc

0800fa2c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800fa2c:	b580      	push	{r7, lr}
 800fa2e:	b088      	sub	sp, #32
 800fa30:	af00      	add	r7, sp, #0
 800fa32:	6078      	str	r0, [r7, #4]
 800fa34:	460b      	mov	r3, r1
 800fa36:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800fa38:	2000      	movs	r0, #0
 800fa3a:	f000 f8d1 	bl	800fbe0 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	885b      	ldrh	r3, [r3, #2]
 800fa46:	b21b      	sxth	r3, r3
 800fa48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fa4c:	b21a      	sxth	r2, r3
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	881b      	ldrh	r3, [r3, #0]
 800fa52:	029b      	lsls	r3, r3, #10
 800fa54:	b21b      	sxth	r3, r3
 800fa56:	4313      	orrs	r3, r2
 800fa58:	b21b      	sxth	r3, r3
 800fa5a:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800fa5c:	4b33      	ldr	r3, [pc, #204]	@ (800fb2c <hci_send_req+0x100>)
 800fa5e:	2201      	movs	r2, #1
 800fa60:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68db      	ldr	r3, [r3, #12]
 800fa66:	b2d9      	uxtb	r1, r3
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	689a      	ldr	r2, [r3, #8]
 800fa6c:	8bbb      	ldrh	r3, [r7, #28]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f000 f890 	bl	800fb94 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800fa74:	e04e      	b.n	800fb14 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800fa76:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800fa7a:	f001 fd40 	bl	80114fe <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800fa7e:	e043      	b.n	800fb08 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800fa80:	f107 030c 	add.w	r3, r7, #12
 800fa84:	4619      	mov	r1, r3
 800fa86:	482a      	ldr	r0, [pc, #168]	@ (800fb30 <hci_send_req+0x104>)
 800fa88:	f000 fd71 	bl	801056e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	7a5b      	ldrb	r3, [r3, #9]
 800fa90:	2b0f      	cmp	r3, #15
 800fa92:	d114      	bne.n	800fabe <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	330b      	adds	r3, #11
 800fa98:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800fa9a:	693b      	ldr	r3, [r7, #16]
 800fa9c:	885b      	ldrh	r3, [r3, #2]
 800fa9e:	b29b      	uxth	r3, r3
 800faa0:	8bba      	ldrh	r2, [r7, #28]
 800faa2:	429a      	cmp	r2, r3
 800faa4:	d104      	bne.n	800fab0 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	693a      	ldr	r2, [r7, #16]
 800faac:	7812      	ldrb	r2, [r2, #0]
 800faae:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800fab0:	693b      	ldr	r3, [r7, #16]
 800fab2:	785b      	ldrb	r3, [r3, #1]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d027      	beq.n	800fb08 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800fab8:	2301      	movs	r3, #1
 800faba:	77fb      	strb	r3, [r7, #31]
 800fabc:	e024      	b.n	800fb08 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	330b      	adds	r3, #11
 800fac2:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800faca:	b29b      	uxth	r3, r3
 800facc:	8bba      	ldrh	r2, [r7, #28]
 800face:	429a      	cmp	r2, r3
 800fad0:	d114      	bne.n	800fafc <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	7a9b      	ldrb	r3, [r3, #10]
 800fad6:	3b03      	subs	r3, #3
 800fad8:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	695a      	ldr	r2, [r3, #20]
 800fade:	7dfb      	ldrb	r3, [r7, #23]
 800fae0:	429a      	cmp	r2, r3
 800fae2:	bfa8      	it	ge
 800fae4:	461a      	movge	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6918      	ldr	r0, [r3, #16]
 800faee:	69bb      	ldr	r3, [r7, #24]
 800faf0:	1cd9      	adds	r1, r3, #3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	695b      	ldr	r3, [r3, #20]
 800faf6:	461a      	mov	r2, r3
 800faf8:	f003 fa2d 	bl	8012f56 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800fafc:	69bb      	ldr	r3, [r7, #24]
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d001      	beq.n	800fb08 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800fb04:	2301      	movs	r3, #1
 800fb06:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800fb08:	4809      	ldr	r0, [pc, #36]	@ (800fb30 <hci_send_req+0x104>)
 800fb0a:	f000 fca1 	bl	8010450 <LST_is_empty>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d0b5      	beq.n	800fa80 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800fb14:	7ffb      	ldrb	r3, [r7, #31]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0ad      	beq.n	800fa76 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800fb1a:	2001      	movs	r0, #1
 800fb1c:	f000 f860 	bl	800fbe0 <NotifyCmdStatus>

  return 0;
 800fb20:	2300      	movs	r3, #0
}
 800fb22:	4618      	mov	r0, r3
 800fb24:	3720      	adds	r7, #32
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	200008e8 	.word	0x200008e8
 800fb30:	200008dc 	.word	0x200008dc

0800fb34 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800fb3c:	480f      	ldr	r0, [pc, #60]	@ (800fb7c <TlInit+0x48>)
 800fb3e:	f000 fc77 	bl	8010430 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800fb42:	4a0f      	ldr	r2, [pc, #60]	@ (800fb80 <TlInit+0x4c>)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800fb48:	480e      	ldr	r0, [pc, #56]	@ (800fb84 <TlInit+0x50>)
 800fb4a:	f000 fc71 	bl	8010430 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800fb4e:	4b0e      	ldr	r3, [pc, #56]	@ (800fb88 <TlInit+0x54>)
 800fb50:	2201      	movs	r2, #1
 800fb52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800fb54:	4b0d      	ldr	r3, [pc, #52]	@ (800fb8c <TlInit+0x58>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d00a      	beq.n	800fb72 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800fb60:	4b0b      	ldr	r3, [pc, #44]	@ (800fb90 <TlInit+0x5c>)
 800fb62:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800fb64:	4b09      	ldr	r3, [pc, #36]	@ (800fb8c <TlInit+0x58>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	f107 0208 	add.w	r2, r7, #8
 800fb6c:	4610      	mov	r0, r2
 800fb6e:	4798      	blx	r3
  }

  return;
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
}
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	200008dc 	.word	0x200008dc
 800fb80:	2000019c 	.word	0x2000019c
 800fb84:	20000194 	.word	0x20000194
 800fb88:	200001a0 	.word	0x200001a0
 800fb8c:	200008bc 	.word	0x200008bc
 800fb90:	0800fc21 	.word	0x0800fc21

0800fb94 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	4603      	mov	r3, r0
 800fb9c:	603a      	str	r2, [r7, #0]
 800fb9e:	80fb      	strh	r3, [r7, #6]
 800fba0:	460b      	mov	r3, r1
 800fba2:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800fba4:	4b0c      	ldr	r3, [pc, #48]	@ (800fbd8 <SendCmd+0x44>)
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	88fa      	ldrh	r2, [r7, #6]
 800fbaa:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800fbae:	4b0a      	ldr	r3, [pc, #40]	@ (800fbd8 <SendCmd+0x44>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	797a      	ldrb	r2, [r7, #5]
 800fbb4:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800fbb6:	4b08      	ldr	r3, [pc, #32]	@ (800fbd8 <SendCmd+0x44>)
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	330c      	adds	r3, #12
 800fbbc:	797a      	ldrb	r2, [r7, #5]
 800fbbe:	6839      	ldr	r1, [r7, #0]
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f003 f9c8 	bl	8012f56 <memcpy>

  hciContext.io.Send(0,0);
 800fbc6:	4b05      	ldr	r3, [pc, #20]	@ (800fbdc <SendCmd+0x48>)
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	2100      	movs	r1, #0
 800fbcc:	2000      	movs	r0, #0
 800fbce:	4798      	blx	r3

  return;
 800fbd0:	bf00      	nop
}
 800fbd2:	3708      	adds	r7, #8
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	bd80      	pop	{r7, pc}
 800fbd8:	2000019c 	.word	0x2000019c
 800fbdc:	200008bc 	.word	0x200008bc

0800fbe0 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b082      	sub	sp, #8
 800fbe4:	af00      	add	r7, sp, #0
 800fbe6:	4603      	mov	r3, r0
 800fbe8:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800fbea:	79fb      	ldrb	r3, [r7, #7]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d108      	bne.n	800fc02 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800fbf0:	4b0a      	ldr	r3, [pc, #40]	@ (800fc1c <NotifyCmdStatus+0x3c>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d00d      	beq.n	800fc14 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800fbf8:	4b08      	ldr	r3, [pc, #32]	@ (800fc1c <NotifyCmdStatus+0x3c>)
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	2000      	movs	r0, #0
 800fbfe:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800fc00:	e008      	b.n	800fc14 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800fc02:	4b06      	ldr	r3, [pc, #24]	@ (800fc1c <NotifyCmdStatus+0x3c>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d004      	beq.n	800fc14 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800fc0a:	4b04      	ldr	r3, [pc, #16]	@ (800fc1c <NotifyCmdStatus+0x3c>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2001      	movs	r0, #1
 800fc10:	4798      	blx	r3
  return;
 800fc12:	bf00      	nop
 800fc14:	bf00      	nop
}
 800fc16:	3708      	adds	r7, #8
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	bd80      	pop	{r7, pc}
 800fc1c:	200008e4 	.word	0x200008e4

0800fc20 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	7a5b      	ldrb	r3, [r3, #9]
 800fc2c:	2b0f      	cmp	r3, #15
 800fc2e:	d003      	beq.n	800fc38 <TlEvtReceived+0x18>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	7a5b      	ldrb	r3, [r3, #9]
 800fc34:	2b0e      	cmp	r3, #14
 800fc36:	d107      	bne.n	800fc48 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800fc38:	6879      	ldr	r1, [r7, #4]
 800fc3a:	4809      	ldr	r0, [pc, #36]	@ (800fc60 <TlEvtReceived+0x40>)
 800fc3c:	f000 fc50 	bl	80104e0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800fc40:	2000      	movs	r0, #0
 800fc42:	f001 fc51 	bl	80114e8 <hci_cmd_resp_release>
 800fc46:	e006      	b.n	800fc56 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800fc48:	6879      	ldr	r1, [r7, #4]
 800fc4a:	4806      	ldr	r0, [pc, #24]	@ (800fc64 <TlEvtReceived+0x44>)
 800fc4c:	f000 fc48 	bl	80104e0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fc50:	4804      	ldr	r0, [pc, #16]	@ (800fc64 <TlEvtReceived+0x44>)
 800fc52:	f001 fc3d 	bl	80114d0 <hci_notify_asynch_evt>
  }

  return;
 800fc56:	bf00      	nop
}
 800fc58:	3708      	adds	r7, #8
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	200008dc 	.word	0x200008dc
 800fc64:	20000194 	.word	0x20000194

0800fc68 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800fc68:	b480      	push	{r7}
 800fc6a:	b083      	sub	sp, #12
 800fc6c:	af00      	add	r7, sp, #0
 800fc6e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a05      	ldr	r2, [pc, #20]	@ (800fc88 <hci_register_io_bus+0x20>)
 800fc74:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	4a04      	ldr	r2, [pc, #16]	@ (800fc8c <hci_register_io_bus+0x24>)
 800fc7a:	611a      	str	r2, [r3, #16]

  return;
 800fc7c:	bf00      	nop
}
 800fc7e:	370c      	adds	r7, #12
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr
 800fc88:	0800ff81 	.word	0x0800ff81
 800fc8c:	0800ffe9 	.word	0x0800ffe9

0800fc90 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	685b      	ldr	r3, [r3, #4]
 800fc9e:	4a08      	ldr	r2, [pc, #32]	@ (800fcc0 <shci_init+0x30>)
 800fca0:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800fca2:	4a08      	ldr	r2, [pc, #32]	@ (800fcc4 <shci_init+0x34>)
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800fca8:	4806      	ldr	r0, [pc, #24]	@ (800fcc4 <shci_init+0x34>)
 800fcaa:	f000 f915 	bl	800fed8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800fcae:	683b      	ldr	r3, [r7, #0]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	f000 f898 	bl	800fde8 <TlInit>

  return;
 800fcb8:	bf00      	nop
}
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	2000090c 	.word	0x2000090c
 800fcc4:	200008ec 	.word	0x200008ec

0800fcc8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b084      	sub	sp, #16
 800fccc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fcce:	4822      	ldr	r0, [pc, #136]	@ (800fd58 <shci_user_evt_proc+0x90>)
 800fcd0:	f000 fbbe 	bl	8010450 <LST_is_empty>
 800fcd4:	4603      	mov	r3, r0
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d12b      	bne.n	800fd32 <shci_user_evt_proc+0x6a>
 800fcda:	4b20      	ldr	r3, [pc, #128]	@ (800fd5c <shci_user_evt_proc+0x94>)
 800fcdc:	781b      	ldrb	r3, [r3, #0]
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d027      	beq.n	800fd32 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800fce2:	f107 030c 	add.w	r3, r7, #12
 800fce6:	4619      	mov	r1, r3
 800fce8:	481b      	ldr	r0, [pc, #108]	@ (800fd58 <shci_user_evt_proc+0x90>)
 800fcea:	f000 fc40 	bl	801056e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800fcee:	4b1c      	ldr	r3, [pc, #112]	@ (800fd60 <shci_user_evt_proc+0x98>)
 800fcf0:	69db      	ldr	r3, [r3, #28]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00c      	beq.n	800fd10 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800fcfe:	4b18      	ldr	r3, [pc, #96]	@ (800fd60 <shci_user_evt_proc+0x98>)
 800fd00:	69db      	ldr	r3, [r3, #28]
 800fd02:	1d3a      	adds	r2, r7, #4
 800fd04:	4610      	mov	r0, r2
 800fd06:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800fd08:	793a      	ldrb	r2, [r7, #4]
 800fd0a:	4b14      	ldr	r3, [pc, #80]	@ (800fd5c <shci_user_evt_proc+0x94>)
 800fd0c:	701a      	strb	r2, [r3, #0]
 800fd0e:	e002      	b.n	800fd16 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fd10:	4b12      	ldr	r3, [pc, #72]	@ (800fd5c <shci_user_evt_proc+0x94>)
 800fd12:	2201      	movs	r2, #1
 800fd14:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800fd16:	4b11      	ldr	r3, [pc, #68]	@ (800fd5c <shci_user_evt_proc+0x94>)
 800fd18:	781b      	ldrb	r3, [r3, #0]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d004      	beq.n	800fd28 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f000 fa71 	bl	8010208 <TL_MM_EvtDone>
 800fd26:	e004      	b.n	800fd32 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	4619      	mov	r1, r3
 800fd2c:	480a      	ldr	r0, [pc, #40]	@ (800fd58 <shci_user_evt_proc+0x90>)
 800fd2e:	f000 fbb1 	bl	8010494 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800fd32:	4809      	ldr	r0, [pc, #36]	@ (800fd58 <shci_user_evt_proc+0x90>)
 800fd34:	f000 fb8c 	bl	8010450 <LST_is_empty>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d107      	bne.n	800fd4e <shci_user_evt_proc+0x86>
 800fd3e:	4b07      	ldr	r3, [pc, #28]	@ (800fd5c <shci_user_evt_proc+0x94>)
 800fd40:	781b      	ldrb	r3, [r3, #0]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800fd46:	4804      	ldr	r0, [pc, #16]	@ (800fd58 <shci_user_evt_proc+0x90>)
 800fd48:	f7f2 f8a3 	bl	8001e92 <shci_notify_asynch_evt>
  }


  return;
 800fd4c:	bf00      	nop
 800fd4e:	bf00      	nop
}
 800fd50:	3710      	adds	r7, #16
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}
 800fd56:	bf00      	nop
 800fd58:	200001a4 	.word	0x200001a4
 800fd5c:	200001b4 	.word	0x200001b4
 800fd60:	200008ec 	.word	0x200008ec

0800fd64 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b084      	sub	sp, #16
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	60ba      	str	r2, [r7, #8]
 800fd6c:	607b      	str	r3, [r7, #4]
 800fd6e:	4603      	mov	r3, r0
 800fd70:	81fb      	strh	r3, [r7, #14]
 800fd72:	460b      	mov	r3, r1
 800fd74:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800fd76:	2000      	movs	r0, #0
 800fd78:	f000 f868 	bl	800fe4c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800fd7c:	4b17      	ldr	r3, [pc, #92]	@ (800fddc <shci_send+0x78>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	89fa      	ldrh	r2, [r7, #14]
 800fd82:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800fd86:	4b15      	ldr	r3, [pc, #84]	@ (800fddc <shci_send+0x78>)
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	7b7a      	ldrb	r2, [r7, #13]
 800fd8c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800fd8e:	4b13      	ldr	r3, [pc, #76]	@ (800fddc <shci_send+0x78>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	330c      	adds	r3, #12
 800fd94:	7b7a      	ldrb	r2, [r7, #13]
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f003 f8dc 	bl	8012f56 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800fd9e:	4b10      	ldr	r3, [pc, #64]	@ (800fde0 <shci_send+0x7c>)
 800fda0:	2201      	movs	r2, #1
 800fda2:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800fda4:	4b0f      	ldr	r3, [pc, #60]	@ (800fde4 <shci_send+0x80>)
 800fda6:	691b      	ldr	r3, [r3, #16]
 800fda8:	2100      	movs	r1, #0
 800fdaa:	2000      	movs	r0, #0
 800fdac:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800fdae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800fdb2:	f7f2 f885 	bl	8001ec0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	f103 0008 	add.w	r0, r3, #8
 800fdbc:	4b07      	ldr	r3, [pc, #28]	@ (800fddc <shci_send+0x78>)
 800fdbe:	6819      	ldr	r1, [r3, #0]
 800fdc0:	4b06      	ldr	r3, [pc, #24]	@ (800fddc <shci_send+0x78>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	789b      	ldrb	r3, [r3, #2]
 800fdc6:	3303      	adds	r3, #3
 800fdc8:	461a      	mov	r2, r3
 800fdca:	f003 f8c4 	bl	8012f56 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fdce:	2001      	movs	r0, #1
 800fdd0:	f000 f83c 	bl	800fe4c <Cmd_SetStatus>

  return;
 800fdd4:	bf00      	nop
}
 800fdd6:	3710      	adds	r7, #16
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}
 800fddc:	200001b0 	.word	0x200001b0
 800fde0:	20000910 	.word	0x20000910
 800fde4:	200008ec 	.word	0x200008ec

0800fde8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800fde8:	b580      	push	{r7, lr}
 800fdea:	b086      	sub	sp, #24
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800fdf0:	4a10      	ldr	r2, [pc, #64]	@ (800fe34 <TlInit+0x4c>)
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800fdf6:	4810      	ldr	r0, [pc, #64]	@ (800fe38 <TlInit+0x50>)
 800fdf8:	f000 fb1a 	bl	8010430 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800fdfc:	2001      	movs	r0, #1
 800fdfe:	f000 f825 	bl	800fe4c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800fe02:	4b0e      	ldr	r3, [pc, #56]	@ (800fe3c <TlInit+0x54>)
 800fe04:	2201      	movs	r2, #1
 800fe06:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800fe08:	4b0d      	ldr	r3, [pc, #52]	@ (800fe40 <TlInit+0x58>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d00c      	beq.n	800fe2a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800fe14:	4b0b      	ldr	r3, [pc, #44]	@ (800fe44 <TlInit+0x5c>)
 800fe16:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800fe18:	4b0b      	ldr	r3, [pc, #44]	@ (800fe48 <TlInit+0x60>)
 800fe1a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800fe1c:	4b08      	ldr	r3, [pc, #32]	@ (800fe40 <TlInit+0x58>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	f107 020c 	add.w	r2, r7, #12
 800fe24:	4610      	mov	r0, r2
 800fe26:	4798      	blx	r3
  }

  return;
 800fe28:	bf00      	nop
 800fe2a:	bf00      	nop
}
 800fe2c:	3718      	adds	r7, #24
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}
 800fe32:	bf00      	nop
 800fe34:	200001b0 	.word	0x200001b0
 800fe38:	200001a4 	.word	0x200001a4
 800fe3c:	200001b4 	.word	0x200001b4
 800fe40:	200008ec 	.word	0x200008ec
 800fe44:	0800fe9d 	.word	0x0800fe9d
 800fe48:	0800feb5 	.word	0x0800feb5

0800fe4c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	4603      	mov	r3, r0
 800fe54:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d10b      	bne.n	800fe74 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800fe5c:	4b0d      	ldr	r3, [pc, #52]	@ (800fe94 <Cmd_SetStatus+0x48>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d003      	beq.n	800fe6c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800fe64:	4b0b      	ldr	r3, [pc, #44]	@ (800fe94 <Cmd_SetStatus+0x48>)
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	2000      	movs	r0, #0
 800fe6a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800fe6c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe98 <Cmd_SetStatus+0x4c>)
 800fe6e:	2200      	movs	r2, #0
 800fe70:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800fe72:	e00b      	b.n	800fe8c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800fe74:	4b08      	ldr	r3, [pc, #32]	@ (800fe98 <Cmd_SetStatus+0x4c>)
 800fe76:	2201      	movs	r2, #1
 800fe78:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800fe7a:	4b06      	ldr	r3, [pc, #24]	@ (800fe94 <Cmd_SetStatus+0x48>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d004      	beq.n	800fe8c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800fe82:	4b04      	ldr	r3, [pc, #16]	@ (800fe94 <Cmd_SetStatus+0x48>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	2001      	movs	r0, #1
 800fe88:	4798      	blx	r3
  return;
 800fe8a:	bf00      	nop
 800fe8c:	bf00      	nop
}
 800fe8e:	3708      	adds	r7, #8
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	2000090c 	.word	0x2000090c
 800fe98:	200001ac 	.word	0x200001ac

0800fe9c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800fe9c:	b580      	push	{r7, lr}
 800fe9e:	b082      	sub	sp, #8
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800fea4:	2000      	movs	r0, #0
 800fea6:	f7f2 f800 	bl	8001eaa <shci_cmd_resp_release>

  return;
 800feaa:	bf00      	nop
}
 800feac:	3708      	adds	r7, #8
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
	...

0800feb4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b082      	sub	sp, #8
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800febc:	6879      	ldr	r1, [r7, #4]
 800febe:	4805      	ldr	r0, [pc, #20]	@ (800fed4 <TlUserEvtReceived+0x20>)
 800fec0:	f000 fb0e 	bl	80104e0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800fec4:	4803      	ldr	r0, [pc, #12]	@ (800fed4 <TlUserEvtReceived+0x20>)
 800fec6:	f7f1 ffe4 	bl	8001e92 <shci_notify_asynch_evt>

  return;
 800feca:	bf00      	nop
}
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}
 800fed2:	bf00      	nop
 800fed4:	200001a4 	.word	0x200001a4

0800fed8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	4a05      	ldr	r2, [pc, #20]	@ (800fef8 <shci_register_io_bus+0x20>)
 800fee4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	4a04      	ldr	r2, [pc, #16]	@ (800fefc <shci_register_io_bus+0x24>)
 800feea:	611a      	str	r2, [r3, #16]

  return;
 800feec:	bf00      	nop
}
 800feee:	370c      	adds	r7, #12
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	08010095 	.word	0x08010095
 800fefc:	080100e9 	.word	0x080100e9

0800ff00 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800ff04:	f002 fa36 	bl	8012374 <HW_IPCC_Enable>

  return;
 800ff08:	bf00      	nop
}
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <TL_Init>:


void TL_Init( void )
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800ff10:	4b10      	ldr	r3, [pc, #64]	@ (800ff54 <TL_Init+0x48>)
 800ff12:	4a11      	ldr	r2, [pc, #68]	@ (800ff58 <TL_Init+0x4c>)
 800ff14:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800ff16:	4b0f      	ldr	r3, [pc, #60]	@ (800ff54 <TL_Init+0x48>)
 800ff18:	4a10      	ldr	r2, [pc, #64]	@ (800ff5c <TL_Init+0x50>)
 800ff1a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800ff1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff54 <TL_Init+0x48>)
 800ff1e:	4a10      	ldr	r2, [pc, #64]	@ (800ff60 <TL_Init+0x54>)
 800ff20:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800ff22:	4b0c      	ldr	r3, [pc, #48]	@ (800ff54 <TL_Init+0x48>)
 800ff24:	4a0f      	ldr	r2, [pc, #60]	@ (800ff64 <TL_Init+0x58>)
 800ff26:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800ff28:	4b0a      	ldr	r3, [pc, #40]	@ (800ff54 <TL_Init+0x48>)
 800ff2a:	4a0f      	ldr	r2, [pc, #60]	@ (800ff68 <TL_Init+0x5c>)
 800ff2c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800ff2e:	4b09      	ldr	r3, [pc, #36]	@ (800ff54 <TL_Init+0x48>)
 800ff30:	4a0e      	ldr	r2, [pc, #56]	@ (800ff6c <TL_Init+0x60>)
 800ff32:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800ff34:	4b07      	ldr	r3, [pc, #28]	@ (800ff54 <TL_Init+0x48>)
 800ff36:	4a0e      	ldr	r2, [pc, #56]	@ (800ff70 <TL_Init+0x64>)
 800ff38:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800ff3a:	4b06      	ldr	r3, [pc, #24]	@ (800ff54 <TL_Init+0x48>)
 800ff3c:	4a0d      	ldr	r2, [pc, #52]	@ (800ff74 <TL_Init+0x68>)
 800ff3e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800ff40:	4b04      	ldr	r3, [pc, #16]	@ (800ff54 <TL_Init+0x48>)
 800ff42:	4a0d      	ldr	r2, [pc, #52]	@ (800ff78 <TL_Init+0x6c>)
 800ff44:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800ff46:	4b03      	ldr	r3, [pc, #12]	@ (800ff54 <TL_Init+0x48>)
 800ff48:	4a0c      	ldr	r2, [pc, #48]	@ (800ff7c <TL_Init+0x70>)
 800ff4a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800ff4c:	f002 fa26 	bl	801239c <HW_IPCC_Init>

  return;
 800ff50:	bf00      	nop
}
 800ff52:	bd80      	pop	{r7, pc}
 800ff54:	20030000 	.word	0x20030000
 800ff58:	20030028 	.word	0x20030028
 800ff5c:	20030048 	.word	0x20030048
 800ff60:	20030058 	.word	0x20030058
 800ff64:	20030068 	.word	0x20030068
 800ff68:	20030070 	.word	0x20030070
 800ff6c:	20030078 	.word	0x20030078
 800ff70:	20030080 	.word	0x20030080
 800ff74:	2003009c 	.word	0x2003009c
 800ff78:	200300a0 	.word	0x200300a0
 800ff7c:	200300ac 	.word	0x200300ac

0800ff80 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b084      	sub	sp, #16
 800ff84:	af00      	add	r7, sp, #0
 800ff86:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800ff8c:	4811      	ldr	r0, [pc, #68]	@ (800ffd4 <TL_BLE_Init+0x54>)
 800ff8e:	f000 fa4f 	bl	8010430 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800ff92:	4b11      	ldr	r3, [pc, #68]	@ (800ffd8 <TL_BLE_Init+0x58>)
 800ff94:	685b      	ldr	r3, [r3, #4]
 800ff96:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	689a      	ldr	r2, [r3, #8]
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	68da      	ldr	r2, [r3, #12]
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	4a0c      	ldr	r2, [pc, #48]	@ (800ffdc <TL_BLE_Init+0x5c>)
 800ffac:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	4a08      	ldr	r2, [pc, #32]	@ (800ffd4 <TL_BLE_Init+0x54>)
 800ffb2:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800ffb4:	f002 fa08 	bl	80123c8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4a08      	ldr	r2, [pc, #32]	@ (800ffe0 <TL_BLE_Init+0x60>)
 800ffbe:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	4a07      	ldr	r2, [pc, #28]	@ (800ffe4 <TL_BLE_Init+0x64>)
 800ffc6:	6013      	str	r3, [r2, #0]

  return 0;
 800ffc8:	2300      	movs	r3, #0
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	200300c8 	.word	0x200300c8
 800ffd8:	20030000 	.word	0x20030000
 800ffdc:	20030a58 	.word	0x20030a58
 800ffe0:	2000091c 	.word	0x2000091c
 800ffe4:	20000920 	.word	0x20000920

0800ffe8 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b082      	sub	sp, #8
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	460b      	mov	r3, r1
 800fff2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800fff4:	4b09      	ldr	r3, [pc, #36]	@ (801001c <TL_BLE_SendCmd+0x34>)
 800fff6:	685b      	ldr	r3, [r3, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2201      	movs	r2, #1
 800fffc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800fffe:	4b07      	ldr	r3, [pc, #28]	@ (801001c <TL_BLE_SendCmd+0x34>)
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4619      	mov	r1, r3
 8010006:	2001      	movs	r0, #1
 8010008:	f000 f96c 	bl	80102e4 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801000c:	f002 f9e6 	bl	80123dc <HW_IPCC_BLE_SendCmd>

  return 0;
 8010010:	2300      	movs	r3, #0
}
 8010012:	4618      	mov	r0, r3
 8010014:	3708      	adds	r7, #8
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	20030000 	.word	0x20030000

08010020 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010020:	b580      	push	{r7, lr}
 8010022:	b082      	sub	sp, #8
 8010024:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010026:	e01c      	b.n	8010062 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010028:	1d3b      	adds	r3, r7, #4
 801002a:	4619      	mov	r1, r3
 801002c:	4812      	ldr	r0, [pc, #72]	@ (8010078 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801002e:	f000 fa9e 	bl	801056e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	7a5b      	ldrb	r3, [r3, #9]
 8010036:	2b0f      	cmp	r3, #15
 8010038:	d003      	beq.n	8010042 <HW_IPCC_BLE_RxEvtNot+0x22>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	7a5b      	ldrb	r3, [r3, #9]
 801003e:	2b0e      	cmp	r3, #14
 8010040:	d105      	bne.n	801004e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	4619      	mov	r1, r3
 8010046:	2002      	movs	r0, #2
 8010048:	f000 f94c 	bl	80102e4 <OutputDbgTrace>
 801004c:	e004      	b.n	8010058 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	4619      	mov	r1, r3
 8010052:	2003      	movs	r0, #3
 8010054:	f000 f946 	bl	80102e4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010058:	4b08      	ldr	r3, [pc, #32]	@ (801007c <HW_IPCC_BLE_RxEvtNot+0x5c>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	687a      	ldr	r2, [r7, #4]
 801005e:	4610      	mov	r0, r2
 8010060:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8010062:	4805      	ldr	r0, [pc, #20]	@ (8010078 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010064:	f000 f9f4 	bl	8010450 <LST_is_empty>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d0dc      	beq.n	8010028 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 801006e:	bf00      	nop
}
 8010070:	3708      	adds	r7, #8
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	200300c8 	.word	0x200300c8
 801007c:	2000091c 	.word	0x2000091c

08010080 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8010084:	4b02      	ldr	r3, [pc, #8]	@ (8010090 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	4798      	blx	r3

  return;
 801008a:	bf00      	nop
}
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20000920 	.word	0x20000920

08010094 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010094:	b580      	push	{r7, lr}
 8010096:	b084      	sub	sp, #16
 8010098:	af00      	add	r7, sp, #0
 801009a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80100a0:	480d      	ldr	r0, [pc, #52]	@ (80100d8 <TL_SYS_Init+0x44>)
 80100a2:	f000 f9c5 	bl	8010430 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80100a6:	4b0d      	ldr	r3, [pc, #52]	@ (80100dc <TL_SYS_Init+0x48>)
 80100a8:	68db      	ldr	r3, [r3, #12]
 80100aa:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	689a      	ldr	r2, [r3, #8]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	4a08      	ldr	r2, [pc, #32]	@ (80100d8 <TL_SYS_Init+0x44>)
 80100b8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80100ba:	f002 f9b1 	bl	8012420 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4a07      	ldr	r2, [pc, #28]	@ (80100e0 <TL_SYS_Init+0x4c>)
 80100c4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	4a06      	ldr	r2, [pc, #24]	@ (80100e4 <TL_SYS_Init+0x50>)
 80100cc:	6013      	str	r3, [r2, #0]

  return 0;
 80100ce:	2300      	movs	r3, #0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}
 80100d8:	200300d0 	.word	0x200300d0
 80100dc:	20030000 	.word	0x20030000
 80100e0:	20000924 	.word	0x20000924
 80100e4:	20000928 	.word	0x20000928

080100e8 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b082      	sub	sp, #8
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
 80100f0:	460b      	mov	r3, r1
 80100f2:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80100f4:	4b09      	ldr	r3, [pc, #36]	@ (801011c <TL_SYS_SendCmd+0x34>)
 80100f6:	68db      	ldr	r3, [r3, #12]
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	2210      	movs	r2, #16
 80100fc:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80100fe:	4b07      	ldr	r3, [pc, #28]	@ (801011c <TL_SYS_SendCmd+0x34>)
 8010100:	68db      	ldr	r3, [r3, #12]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	4619      	mov	r1, r3
 8010106:	2004      	movs	r0, #4
 8010108:	f000 f8ec 	bl	80102e4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801010c:	f002 f992 	bl	8012434 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010110:	2300      	movs	r3, #0
}
 8010112:	4618      	mov	r0, r3
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}
 801011a:	bf00      	nop
 801011c:	20030000 	.word	0x20030000

08010120 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010124:	4b07      	ldr	r3, [pc, #28]	@ (8010144 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010126:	68db      	ldr	r3, [r3, #12]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	4619      	mov	r1, r3
 801012c:	2005      	movs	r0, #5
 801012e:	f000 f8d9 	bl	80102e4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010132:	4b05      	ldr	r3, [pc, #20]	@ (8010148 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a03      	ldr	r2, [pc, #12]	@ (8010144 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010138:	68d2      	ldr	r2, [r2, #12]
 801013a:	6812      	ldr	r2, [r2, #0]
 801013c:	4610      	mov	r0, r2
 801013e:	4798      	blx	r3

  return;
 8010140:	bf00      	nop
}
 8010142:	bd80      	pop	{r7, pc}
 8010144:	20030000 	.word	0x20030000
 8010148:	20000924 	.word	0x20000924

0801014c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b082      	sub	sp, #8
 8010150:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010152:	e00e      	b.n	8010172 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8010154:	1d3b      	adds	r3, r7, #4
 8010156:	4619      	mov	r1, r3
 8010158:	480b      	ldr	r0, [pc, #44]	@ (8010188 <HW_IPCC_SYS_EvtNot+0x3c>)
 801015a:	f000 fa08 	bl	801056e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	4619      	mov	r1, r3
 8010162:	2006      	movs	r0, #6
 8010164:	f000 f8be 	bl	80102e4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010168:	4b08      	ldr	r3, [pc, #32]	@ (801018c <HW_IPCC_SYS_EvtNot+0x40>)
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	687a      	ldr	r2, [r7, #4]
 801016e:	4610      	mov	r0, r2
 8010170:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8010172:	4805      	ldr	r0, [pc, #20]	@ (8010188 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010174:	f000 f96c 	bl	8010450 <LST_is_empty>
 8010178:	4603      	mov	r3, r0
 801017a:	2b00      	cmp	r3, #0
 801017c:	d0ea      	beq.n	8010154 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 801017e:	bf00      	nop
}
 8010180:	3708      	adds	r7, #8
 8010182:	46bd      	mov	sp, r7
 8010184:	bd80      	pop	{r7, pc}
 8010186:	bf00      	nop
 8010188:	200300d0 	.word	0x200300d0
 801018c:	20000928 	.word	0x20000928

08010190 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b082      	sub	sp, #8
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010198:	4817      	ldr	r0, [pc, #92]	@ (80101f8 <TL_MM_Init+0x68>)
 801019a:	f000 f949 	bl	8010430 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801019e:	4817      	ldr	r0, [pc, #92]	@ (80101fc <TL_MM_Init+0x6c>)
 80101a0:	f000 f946 	bl	8010430 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80101a4:	4b16      	ldr	r3, [pc, #88]	@ (8010200 <TL_MM_Init+0x70>)
 80101a6:	691b      	ldr	r3, [r3, #16]
 80101a8:	4a16      	ldr	r2, [pc, #88]	@ (8010204 <TL_MM_Init+0x74>)
 80101aa:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80101ac:	4b15      	ldr	r3, [pc, #84]	@ (8010204 <TL_MM_Init+0x74>)
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	687a      	ldr	r2, [r7, #4]
 80101b2:	6892      	ldr	r2, [r2, #8]
 80101b4:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80101b6:	4b13      	ldr	r3, [pc, #76]	@ (8010204 <TL_MM_Init+0x74>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	687a      	ldr	r2, [r7, #4]
 80101bc:	68d2      	ldr	r2, [r2, #12]
 80101be:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80101c0:	4b10      	ldr	r3, [pc, #64]	@ (8010204 <TL_MM_Init+0x74>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	4a0c      	ldr	r2, [pc, #48]	@ (80101f8 <TL_MM_Init+0x68>)
 80101c6:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80101c8:	4b0e      	ldr	r3, [pc, #56]	@ (8010204 <TL_MM_Init+0x74>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	687a      	ldr	r2, [r7, #4]
 80101ce:	6812      	ldr	r2, [r2, #0]
 80101d0:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80101d2:	4b0c      	ldr	r3, [pc, #48]	@ (8010204 <TL_MM_Init+0x74>)
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	687a      	ldr	r2, [r7, #4]
 80101d8:	6852      	ldr	r2, [r2, #4]
 80101da:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80101dc:	4b09      	ldr	r3, [pc, #36]	@ (8010204 <TL_MM_Init+0x74>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	6912      	ldr	r2, [r2, #16]
 80101e4:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80101e6:	4b07      	ldr	r3, [pc, #28]	@ (8010204 <TL_MM_Init+0x74>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	6952      	ldr	r2, [r2, #20]
 80101ee:	619a      	str	r2, [r3, #24]

  return;
 80101f0:	bf00      	nop
}
 80101f2:	3708      	adds	r7, #8
 80101f4:	46bd      	mov	sp, r7
 80101f6:	bd80      	pop	{r7, pc}
 80101f8:	200300b8 	.word	0x200300b8
 80101fc:	20000914 	.word	0x20000914
 8010200:	20030000 	.word	0x20030000
 8010204:	2000092c 	.word	0x2000092c

08010208 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010210:	6879      	ldr	r1, [r7, #4]
 8010212:	4807      	ldr	r0, [pc, #28]	@ (8010230 <TL_MM_EvtDone+0x28>)
 8010214:	f000 f964 	bl	80104e0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	2000      	movs	r0, #0
 801021c:	f000 f862 	bl	80102e4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010220:	4804      	ldr	r0, [pc, #16]	@ (8010234 <TL_MM_EvtDone+0x2c>)
 8010222:	f002 f92d 	bl	8012480 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010226:	bf00      	nop
}
 8010228:	3708      	adds	r7, #8
 801022a:	46bd      	mov	sp, r7
 801022c:	bd80      	pop	{r7, pc}
 801022e:	bf00      	nop
 8010230:	20000914 	.word	0x20000914
 8010234:	08010239 	.word	0x08010239

08010238 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801023e:	e00c      	b.n	801025a <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010240:	1d3b      	adds	r3, r7, #4
 8010242:	4619      	mov	r1, r3
 8010244:	480a      	ldr	r0, [pc, #40]	@ (8010270 <SendFreeBuf+0x38>)
 8010246:	f000 f992 	bl	801056e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 801024a:	4b0a      	ldr	r3, [pc, #40]	@ (8010274 <SendFreeBuf+0x3c>)
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	691b      	ldr	r3, [r3, #16]
 8010250:	687a      	ldr	r2, [r7, #4]
 8010252:	4611      	mov	r1, r2
 8010254:	4618      	mov	r0, r3
 8010256:	f000 f943 	bl	80104e0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 801025a:	4805      	ldr	r0, [pc, #20]	@ (8010270 <SendFreeBuf+0x38>)
 801025c:	f000 f8f8 	bl	8010450 <LST_is_empty>
 8010260:	4603      	mov	r3, r0
 8010262:	2b00      	cmp	r3, #0
 8010264:	d0ec      	beq.n	8010240 <SendFreeBuf+0x8>
  }

  return;
 8010266:	bf00      	nop
}
 8010268:	3708      	adds	r7, #8
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	20000914 	.word	0x20000914
 8010274:	20030000 	.word	0x20030000

08010278 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010278:	b580      	push	{r7, lr}
 801027a:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 801027c:	4805      	ldr	r0, [pc, #20]	@ (8010294 <TL_TRACES_Init+0x1c>)
 801027e:	f000 f8d7 	bl	8010430 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8010282:	4b05      	ldr	r3, [pc, #20]	@ (8010298 <TL_TRACES_Init+0x20>)
 8010284:	695b      	ldr	r3, [r3, #20]
 8010286:	4a03      	ldr	r2, [pc, #12]	@ (8010294 <TL_TRACES_Init+0x1c>)
 8010288:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 801028a:	f002 f92f 	bl	80124ec <HW_IPCC_TRACES_Init>

  return;
 801028e:	bf00      	nop
}
 8010290:	bd80      	pop	{r7, pc}
 8010292:	bf00      	nop
 8010294:	200300c0 	.word	0x200300c0
 8010298:	20030000 	.word	0x20030000

0801029c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80102a2:	e008      	b.n	80102b6 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80102a4:	1d3b      	adds	r3, r7, #4
 80102a6:	4619      	mov	r1, r3
 80102a8:	4808      	ldr	r0, [pc, #32]	@ (80102cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80102aa:	f000 f960 	bl	801056e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f000 f80d 	bl	80102d0 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80102b6:	4805      	ldr	r0, [pc, #20]	@ (80102cc <HW_IPCC_TRACES_EvtNot+0x30>)
 80102b8:	f000 f8ca 	bl	8010450 <LST_is_empty>
 80102bc:	4603      	mov	r3, r0
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d0f0      	beq.n	80102a4 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80102c2:	bf00      	nop
}
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	200300c0 	.word	0x200300c0

080102d0 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80102d8:	bf00      	nop
 80102da:	370c      	adds	r7, #12
 80102dc:	46bd      	mov	sp, r7
 80102de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e2:	4770      	bx	lr

080102e4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80102e4:	b480      	push	{r7}
 80102e6:	b085      	sub	sp, #20
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	4603      	mov	r3, r0
 80102ec:	6039      	str	r1, [r7, #0]
 80102ee:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80102f0:	79fb      	ldrb	r3, [r7, #7]
 80102f2:	2b06      	cmp	r3, #6
 80102f4:	d845      	bhi.n	8010382 <OutputDbgTrace+0x9e>
 80102f6:	a201      	add	r2, pc, #4	@ (adr r2, 80102fc <OutputDbgTrace+0x18>)
 80102f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102fc:	08010319 	.word	0x08010319
 8010300:	0801033d 	.word	0x0801033d
 8010304:	08010343 	.word	0x08010343
 8010308:	08010357 	.word	0x08010357
 801030c:	08010363 	.word	0x08010363
 8010310:	08010369 	.word	0x08010369
 8010314:	08010377 	.word	0x08010377
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010318:	683b      	ldr	r3, [r7, #0]
 801031a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	7a5b      	ldrb	r3, [r3, #9]
 8010320:	2bff      	cmp	r3, #255	@ 0xff
 8010322:	d005      	beq.n	8010330 <OutputDbgTrace+0x4c>
 8010324:	2bff      	cmp	r3, #255	@ 0xff
 8010326:	dc05      	bgt.n	8010334 <OutputDbgTrace+0x50>
 8010328:	2b0e      	cmp	r3, #14
 801032a:	d005      	beq.n	8010338 <OutputDbgTrace+0x54>
 801032c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 801032e:	e001      	b.n	8010334 <OutputDbgTrace+0x50>
          break;
 8010330:	bf00      	nop
 8010332:	e027      	b.n	8010384 <OutputDbgTrace+0xa0>
          break;
 8010334:	bf00      	nop
 8010336:	e025      	b.n	8010384 <OutputDbgTrace+0xa0>
          break;
 8010338:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801033a:	e023      	b.n	8010384 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010340:	e020      	b.n	8010384 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	7a5b      	ldrb	r3, [r3, #9]
 801034a:	2b0e      	cmp	r3, #14
 801034c:	d001      	beq.n	8010352 <OutputDbgTrace+0x6e>
 801034e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010350:	e000      	b.n	8010354 <OutputDbgTrace+0x70>
          break;
 8010352:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010354:	e016      	b.n	8010384 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	7a5b      	ldrb	r3, [r3, #9]
 801035e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010360:	e010      	b.n	8010384 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010366:	e00d      	b.n	8010384 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010368:	683b      	ldr	r3, [r7, #0]
 801036a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	7a5b      	ldrb	r3, [r3, #9]
 8010370:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010372:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010374:	e006      	b.n	8010384 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	7a5b      	ldrb	r3, [r3, #9]
 801037e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010380:	e000      	b.n	8010384 <OutputDbgTrace+0xa0>

    default:
      break;
 8010382:	bf00      	nop
  }

  return;
 8010384:	bf00      	nop
}
 8010386:	3714      	adds	r7, #20
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 801039c:	215c      	movs	r1, #92	@ 0x5c
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f002 fd50 	bl	8012e44 <strrchr>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d007      	beq.n	80103ba <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 80103aa:	215c      	movs	r1, #92	@ 0x5c
 80103ac:	6878      	ldr	r0, [r7, #4]
 80103ae:	f002 fd49 	bl	8012e44 <strrchr>
 80103b2:	4603      	mov	r3, r0
 80103b4:	3301      	adds	r3, #1
 80103b6:	60fb      	str	r3, [r7, #12]
 80103b8:	e00d      	b.n	80103d6 <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 80103ba:	212f      	movs	r1, #47	@ 0x2f
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f002 fd41 	bl	8012e44 <strrchr>
 80103c2:	4603      	mov	r3, r0
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d006      	beq.n	80103d6 <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 80103c8:	212f      	movs	r1, #47	@ 0x2f
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f002 fd3a 	bl	8012e44 <strrchr>
 80103d0:	4603      	mov	r3, r0
 80103d2:	3301      	adds	r3, #1
 80103d4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80103d6:	68fb      	ldr	r3, [r7, #12]
}
 80103d8:	4618      	mov	r0, r3
 80103da:	3710      	adds	r7, #16
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}

080103e0 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b085      	sub	sp, #20
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	4603      	mov	r3, r0
 80103e8:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80103ea:	4b0f      	ldr	r3, [pc, #60]	@ (8010428 <OTP_Read+0x48>)
 80103ec:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80103ee:	e002      	b.n	80103f6 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	3b08      	subs	r3, #8
 80103f4:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	3307      	adds	r3, #7
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	79fa      	ldrb	r2, [r7, #7]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d003      	beq.n	801040a <OTP_Read+0x2a>
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	4a09      	ldr	r2, [pc, #36]	@ (801042c <OTP_Read+0x4c>)
 8010406:	4293      	cmp	r3, r2
 8010408:	d1f2      	bne.n	80103f0 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	3307      	adds	r3, #7
 801040e:	781b      	ldrb	r3, [r3, #0]
 8010410:	79fa      	ldrb	r2, [r7, #7]
 8010412:	429a      	cmp	r2, r3
 8010414:	d001      	beq.n	801041a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 801041a:	68fb      	ldr	r3, [r7, #12]
}
 801041c:	4618      	mov	r0, r3
 801041e:	3714      	adds	r7, #20
 8010420:	46bd      	mov	sp, r7
 8010422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010426:	4770      	bx	lr
 8010428:	1fff73f8 	.word	0x1fff73f8
 801042c:	1fff7000 	.word	0x1fff7000

08010430 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	687a      	ldr	r2, [r7, #4]
 8010442:	605a      	str	r2, [r3, #4]
}
 8010444:	bf00      	nop
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010450:	b480      	push	{r7}
 8010452:	b087      	sub	sp, #28
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010458:	f3ef 8310 	mrs	r3, PRIMASK
 801045c:	60fb      	str	r3, [r7, #12]
  return(result);
 801045e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010462:	b672      	cpsid	i
}
 8010464:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	429a      	cmp	r2, r3
 801046e:	d102      	bne.n	8010476 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010470:	2301      	movs	r3, #1
 8010472:	75fb      	strb	r3, [r7, #23]
 8010474:	e001      	b.n	801047a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010476:	2300      	movs	r3, #0
 8010478:	75fb      	strb	r3, [r7, #23]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801047e:	68bb      	ldr	r3, [r7, #8]
 8010480:	f383 8810 	msr	PRIMASK, r3
}
 8010484:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010486:	7dfb      	ldrb	r3, [r7, #23]
}
 8010488:	4618      	mov	r0, r3
 801048a:	371c      	adds	r7, #28
 801048c:	46bd      	mov	sp, r7
 801048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010492:	4770      	bx	lr

08010494 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010494:	b480      	push	{r7}
 8010496:	b087      	sub	sp, #28
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801049e:	f3ef 8310 	mrs	r3, PRIMASK
 80104a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80104a4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80104a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104a8:	b672      	cpsid	i
}
 80104aa:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	681a      	ldr	r2, [r3, #0]
 80104b0:	683b      	ldr	r3, [r7, #0]
 80104b2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 80104b4:	683b      	ldr	r3, [r7, #0]
 80104b6:	687a      	ldr	r2, [r7, #4]
 80104b8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	683a      	ldr	r2, [r7, #0]
 80104be:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 80104c0:	683b      	ldr	r3, [r7, #0]
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	683a      	ldr	r2, [r7, #0]
 80104c6:	605a      	str	r2, [r3, #4]
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	f383 8810 	msr	PRIMASK, r3
}
 80104d2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80104d4:	bf00      	nop
 80104d6:	371c      	adds	r7, #28
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b087      	sub	sp, #28
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104ea:	f3ef 8310 	mrs	r3, PRIMASK
 80104ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80104f0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80104f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80104f4:	b672      	cpsid	i
}
 80104f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	687a      	ldr	r2, [r7, #4]
 80104fc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	685a      	ldr	r2, [r3, #4]
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	683a      	ldr	r2, [r7, #0]
 801050a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 801050c:	683b      	ldr	r3, [r7, #0]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	683a      	ldr	r2, [r7, #0]
 8010512:	601a      	str	r2, [r3, #0]
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	f383 8810 	msr	PRIMASK, r3
}
 801051e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010520:	bf00      	nop
 8010522:	371c      	adds	r7, #28
 8010524:	46bd      	mov	sp, r7
 8010526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052a:	4770      	bx	lr

0801052c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 801052c:	b480      	push	{r7}
 801052e:	b087      	sub	sp, #28
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010534:	f3ef 8310 	mrs	r3, PRIMASK
 8010538:	60fb      	str	r3, [r7, #12]
  return(result);
 801053a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 801053c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801053e:	b672      	cpsid	i
}
 8010540:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	685b      	ldr	r3, [r3, #4]
 8010546:	687a      	ldr	r2, [r7, #4]
 8010548:	6812      	ldr	r2, [r2, #0]
 801054a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	687a      	ldr	r2, [r7, #4]
 8010552:	6852      	ldr	r2, [r2, #4]
 8010554:	605a      	str	r2, [r3, #4]
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	f383 8810 	msr	PRIMASK, r3
}
 8010560:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010562:	bf00      	nop
 8010564:	371c      	adds	r7, #28
 8010566:	46bd      	mov	sp, r7
 8010568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056c:	4770      	bx	lr

0801056e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b086      	sub	sp, #24
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
 8010576:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010578:	f3ef 8310 	mrs	r3, PRIMASK
 801057c:	60fb      	str	r3, [r7, #12]
  return(result);
 801057e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010580:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010582:	b672      	cpsid	i
}
 8010584:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	683b      	ldr	r3, [r7, #0]
 801058c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	681b      	ldr	r3, [r3, #0]
 8010592:	4618      	mov	r0, r3
 8010594:	f7ff ffca 	bl	801052c <LST_remove_node>
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	f383 8810 	msr	PRIMASK, r3
}
 80105a2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80105a4:	bf00      	nop
 80105a6:	3718      	adds	r7, #24
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}

080105ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80105ac:	b480      	push	{r7}
 80105ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80105b0:	4b03      	ldr	r3, [pc, #12]	@ (80105c0 <LL_FLASH_GetUDN+0x14>)
 80105b2:	681b      	ldr	r3, [r3, #0]
}
 80105b4:	4618      	mov	r0, r3
 80105b6:	46bd      	mov	sp, r7
 80105b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105bc:	4770      	bx	lr
 80105be:	bf00      	nop
 80105c0:	1fff7580 	.word	0x1fff7580

080105c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80105c4:	b480      	push	{r7}
 80105c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80105c8:	4b03      	ldr	r3, [pc, #12]	@ (80105d8 <LL_FLASH_GetDeviceID+0x14>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	b2db      	uxtb	r3, r3
}
 80105ce:	4618      	mov	r0, r3
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	1fff7584 	.word	0x1fff7584

080105dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80105dc:	b480      	push	{r7}
 80105de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80105e0:	4b03      	ldr	r3, [pc, #12]	@ (80105f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	0a1b      	lsrs	r3, r3, #8
}
 80105e6:	4618      	mov	r0, r3
 80105e8:	46bd      	mov	sp, r7
 80105ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ee:	4770      	bx	lr
 80105f0:	1fff7584 	.word	0x1fff7584

080105f4 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 80105f4:	b5b0      	push	{r4, r5, r7, lr}
 80105f6:	b090      	sub	sp, #64	@ 0x40
 80105f8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80105fa:	2392      	movs	r3, #146	@ 0x92
 80105fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010600:	4b45      	ldr	r3, [pc, #276]	@ (8010718 <APP_BLE_Init+0x124>)
 8010602:	1d3c      	adds	r4, r7, #4
 8010604:	461d      	mov	r5, r3
 8010606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801060a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801060c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801060e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010610:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010612:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010616:	c403      	stmia	r4!, {r0, r1}
 8010618:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 801061a:	f000 fb9d 	bl	8010d58 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 801061e:	2101      	movs	r1, #1
 8010620:	2002      	movs	r0, #2
 8010622:	f001 ff8b 	bl	801253c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010626:	4a3d      	ldr	r2, [pc, #244]	@ (801071c <APP_BLE_Init+0x128>)
 8010628:	2100      	movs	r1, #0
 801062a:	2002      	movs	r0, #2
 801062c:	f002 f8b2 	bl	8012794 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010630:	1d3b      	adds	r3, r7, #4
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff f89e 	bl	800f774 <SHCI_C2_BLE_Init>
 8010638:	4603      	mov	r3, r0
 801063a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 801063e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010642:	2b00      	cmp	r3, #0
 8010644:	d012      	beq.n	801066c <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8010646:	4836      	ldr	r0, [pc, #216]	@ (8010720 <APP_BLE_Init+0x12c>)
 8010648:	f7ff fea2 	bl	8010390 <DbgTraceGetFileName>
 801064c:	4601      	mov	r1, r0
 801064e:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 8010652:	4a34      	ldr	r2, [pc, #208]	@ (8010724 <APP_BLE_Init+0x130>)
 8010654:	4834      	ldr	r0, [pc, #208]	@ (8010728 <APP_BLE_Init+0x134>)
 8010656:	f002 fa9d 	bl	8012b94 <iprintf>
 801065a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801065e:	4619      	mov	r1, r3
 8010660:	4832      	ldr	r0, [pc, #200]	@ (801072c <APP_BLE_Init+0x138>)
 8010662:	f002 fa97 	bl	8012b94 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010666:	f7f2 fd2b 	bl	80030c0 <Error_Handler>
 801066a:	e00c      	b.n	8010686 <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 801066c:	482c      	ldr	r0, [pc, #176]	@ (8010720 <APP_BLE_Init+0x12c>)
 801066e:	f7ff fe8f 	bl	8010390 <DbgTraceGetFileName>
 8010672:	4601      	mov	r1, r0
 8010674:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 8010678:	4a2a      	ldr	r2, [pc, #168]	@ (8010724 <APP_BLE_Init+0x130>)
 801067a:	482b      	ldr	r0, [pc, #172]	@ (8010728 <APP_BLE_Init+0x134>)
 801067c:	f002 fa8a 	bl	8012b94 <iprintf>
 8010680:	482b      	ldr	r0, [pc, #172]	@ (8010730 <APP_BLE_Init+0x13c>)
 8010682:	f002 fa87 	bl	8012b94 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8010686:	f000 fb7d 	bl	8010d84 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 801068a:	f7fe ffcd 	bl	800f628 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801068e:	4b29      	ldr	r3, [pc, #164]	@ (8010734 <APP_BLE_Init+0x140>)
 8010690:	2200      	movs	r2, #0
 8010692:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010696:	4b27      	ldr	r3, [pc, #156]	@ (8010734 <APP_BLE_Init+0x140>)
 8010698:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801069c:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 801069e:	4a26      	ldr	r2, [pc, #152]	@ (8010738 <APP_BLE_Init+0x144>)
 80106a0:	2100      	movs	r1, #0
 80106a2:	2001      	movs	r0, #1
 80106a4:	f002 f876 	bl	8012794 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 80106a8:	2006      	movs	r0, #6
 80106aa:	f7fe fe30 	bl	800f30e <aci_hal_set_radio_activity_mask>
 80106ae:	4603      	mov	r3, r0
 80106b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 80106b4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d010      	beq.n	80106de <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 80106bc:	4818      	ldr	r0, [pc, #96]	@ (8010720 <APP_BLE_Init+0x12c>)
 80106be:	f7ff fe67 	bl	8010390 <DbgTraceGetFileName>
 80106c2:	4601      	mov	r1, r0
 80106c4:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 80106c8:	4a16      	ldr	r2, [pc, #88]	@ (8010724 <APP_BLE_Init+0x130>)
 80106ca:	4817      	ldr	r0, [pc, #92]	@ (8010728 <APP_BLE_Init+0x134>)
 80106cc:	f002 fa62 	bl	8012b94 <iprintf>
 80106d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80106d4:	4619      	mov	r1, r3
 80106d6:	4819      	ldr	r0, [pc, #100]	@ (801073c <APP_BLE_Init+0x148>)
 80106d8:	f002 fa5c 	bl	8012b94 <iprintf>
 80106dc:	e00c      	b.n	80106f8 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 80106de:	4810      	ldr	r0, [pc, #64]	@ (8010720 <APP_BLE_Init+0x12c>)
 80106e0:	f7ff fe56 	bl	8010390 <DbgTraceGetFileName>
 80106e4:	4601      	mov	r1, r0
 80106e6:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 80106ea:	4a0e      	ldr	r2, [pc, #56]	@ (8010724 <APP_BLE_Init+0x130>)
 80106ec:	480e      	ldr	r0, [pc, #56]	@ (8010728 <APP_BLE_Init+0x134>)
 80106ee:	f002 fa51 	bl	8012b94 <iprintf>
 80106f2:	4813      	ldr	r0, [pc, #76]	@ (8010740 <APP_BLE_Init+0x14c>)
 80106f4:	f002 fa4e 	bl	8012b94 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80106f8:	f000 ff8c 	bl	8011614 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80106fc:	4b0d      	ldr	r3, [pc, #52]	@ (8010734 <APP_BLE_Init+0x140>)
 80106fe:	2200      	movs	r2, #0
 8010700:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8010702:	4b0c      	ldr	r3, [pc, #48]	@ (8010734 <APP_BLE_Init+0x140>)
 8010704:	2200      	movs	r2, #0
 8010706:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8010708:	2001      	movs	r0, #1
 801070a:	f000 fdcf 	bl	80112ac <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 801070e:	bf00      	nop
}
 8010710:	3740      	adds	r7, #64	@ 0x40
 8010712:	46bd      	mov	sp, r7
 8010714:	bdb0      	pop	{r4, r5, r7, pc}
 8010716:	bf00      	nop
 8010718:	080143d0 	.word	0x080143d0
 801071c:	0800f991 	.word	0x0800f991
 8010720:	080142c4 	.word	0x080142c4
 8010724:	08015678 	.word	0x08015678
 8010728:	080142e0 	.word	0x080142e0
 801072c:	080142f4 	.word	0x080142f4
 8010730:	0801432c 	.word	0x0801432c
 8010734:	20000938 	.word	0x20000938
 8010738:	08011431 	.word	0x08011431
 801073c:	08014354 	.word	0x08014354
 8010740:	08014398 	.word	0x08014398

08010744 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010744:	b5b0      	push	{r4, r5, r7, lr}
 8010746:	b08e      	sub	sp, #56	@ 0x38
 8010748:	af04      	add	r7, sp, #16
 801074a:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 801074c:	2392      	movs	r3, #146	@ 0x92
 801074e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	3301      	adds	r3, #1
 8010756:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010758:	6a3b      	ldr	r3, [r7, #32]
 801075a:	781b      	ldrb	r3, [r3, #0]
 801075c:	2bff      	cmp	r3, #255	@ 0xff
 801075e:	f000 811d 	beq.w	801099c <SVCCTL_App_Notification+0x258>
 8010762:	2bff      	cmp	r3, #255	@ 0xff
 8010764:	f300 8286 	bgt.w	8010c74 <SVCCTL_App_Notification+0x530>
 8010768:	2b05      	cmp	r3, #5
 801076a:	d002      	beq.n	8010772 <SVCCTL_App_Notification+0x2e>
 801076c:	2b3e      	cmp	r3, #62	@ 0x3e
 801076e:	d042      	beq.n	80107f6 <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010770:	e280      	b.n	8010c74 <SVCCTL_App_Notification+0x530>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010772:	6a3b      	ldr	r3, [r7, #32]
 8010774:	3302      	adds	r3, #2
 8010776:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801077e:	b29a      	uxth	r2, r3
 8010780:	4bb6      	ldr	r3, [pc, #728]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 8010782:	8adb      	ldrh	r3, [r3, #22]
 8010784:	429a      	cmp	r2, r3
 8010786:	d128      	bne.n	80107da <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010788:	4bb4      	ldr	r3, [pc, #720]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 801078a:	2200      	movs	r2, #0
 801078c:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801078e:	4bb3      	ldr	r3, [pc, #716]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 8010790:	2200      	movs	r2, #0
 8010792:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 8010796:	48b2      	ldr	r0, [pc, #712]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 8010798:	f7ff fdfa 	bl	8010390 <DbgTraceGetFileName>
 801079c:	4601      	mov	r1, r0
 801079e:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 80107a2:	4ab0      	ldr	r2, [pc, #704]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 80107a4:	48b0      	ldr	r0, [pc, #704]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 80107a6:	f002 f9f5 	bl	8012b94 <iprintf>
 80107aa:	48b0      	ldr	r0, [pc, #704]	@ (8010a6c <SVCCTL_App_Notification+0x328>)
 80107ac:	f002 fa62 	bl	8012c74 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 80107b0:	48ab      	ldr	r0, [pc, #684]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 80107b2:	f7ff fded 	bl	8010390 <DbgTraceGetFileName>
 80107b6:	4601      	mov	r1, r0
 80107b8:	f240 13bb 	movw	r3, #443	@ 0x1bb
 80107bc:	4aa9      	ldr	r2, [pc, #676]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 80107be:	48aa      	ldr	r0, [pc, #680]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 80107c0:	f002 f9e8 	bl	8012b94 <iprintf>
 80107c4:	68bb      	ldr	r3, [r7, #8]
 80107c6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80107ca:	b29b      	uxth	r3, r3
 80107cc:	4619      	mov	r1, r3
 80107ce:	68bb      	ldr	r3, [r7, #8]
 80107d0:	78db      	ldrb	r3, [r3, #3]
 80107d2:	461a      	mov	r2, r3
 80107d4:	48a6      	ldr	r0, [pc, #664]	@ (8010a70 <SVCCTL_App_Notification+0x32c>)
 80107d6:	f002 f9dd 	bl	8012b94 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 80107da:	2001      	movs	r0, #1
 80107dc:	f000 fd66 	bl	80112ac <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 80107e0:	4ba4      	ldr	r3, [pc, #656]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 80107e2:	2201      	movs	r2, #1
 80107e4:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80107e6:	4b9d      	ldr	r3, [pc, #628]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 80107e8:	8ada      	ldrh	r2, [r3, #22]
 80107ea:	4ba2      	ldr	r3, [pc, #648]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 80107ec:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 80107ee:	48a1      	ldr	r0, [pc, #644]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 80107f0:	f000 fefc 	bl	80115ec <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 80107f4:	e241      	b.n	8010c7a <SVCCTL_App_Notification+0x536>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 80107f6:	6a3b      	ldr	r3, [r7, #32]
 80107f8:	3302      	adds	r3, #2
 80107fa:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	781b      	ldrb	r3, [r3, #0]
 8010800:	2b01      	cmp	r3, #1
 8010802:	d042      	beq.n	801088a <SVCCTL_App_Notification+0x146>
 8010804:	2b03      	cmp	r3, #3
 8010806:	f040 80c7 	bne.w	8010998 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 801080a:	697b      	ldr	r3, [r7, #20]
 801080c:	3301      	adds	r3, #1
 801080e:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8010810:	4893      	ldr	r0, [pc, #588]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 8010812:	f7ff fdbd 	bl	8010390 <DbgTraceGetFileName>
 8010816:	4601      	mov	r1, r0
 8010818:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 801081c:	4a91      	ldr	r2, [pc, #580]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 801081e:	4892      	ldr	r0, [pc, #584]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 8010820:	f002 f9b8 	bl	8012b94 <iprintf>
 8010824:	4894      	ldr	r0, [pc, #592]	@ (8010a78 <SVCCTL_App_Notification+0x334>)
 8010826:	f002 fa25 	bl	8012c74 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 801082a:	488d      	ldr	r0, [pc, #564]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 801082c:	f7ff fdb0 	bl	8010390 <DbgTraceGetFileName>
 8010830:	4601      	mov	r1, r0
 8010832:	f240 13e3 	movw	r3, #483	@ 0x1e3
 8010836:	4a8b      	ldr	r2, [pc, #556]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 8010838:	488b      	ldr	r0, [pc, #556]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 801083a:	f002 f9ab 	bl	8012b94 <iprintf>
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010844:	b29b      	uxth	r3, r3
 8010846:	4618      	mov	r0, r3
 8010848:	f7ef ff6e 	bl	8000728 <__aeabi_i2d>
 801084c:	f04f 0200 	mov.w	r2, #0
 8010850:	4b8a      	ldr	r3, [pc, #552]	@ (8010a7c <SVCCTL_App_Notification+0x338>)
 8010852:	f7ef fced 	bl	8000230 <__aeabi_dmul>
 8010856:	4602      	mov	r2, r0
 8010858:	460b      	mov	r3, r1
 801085a:	4610      	mov	r0, r2
 801085c:	4619      	mov	r1, r3
 801085e:	693b      	ldr	r3, [r7, #16]
 8010860:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8010864:	b29b      	uxth	r3, r3
 8010866:	461c      	mov	r4, r3
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 801086e:	b29b      	uxth	r3, r3
 8010870:	461a      	mov	r2, r3
 8010872:	4613      	mov	r3, r2
 8010874:	009b      	lsls	r3, r3, #2
 8010876:	4413      	add	r3, r2
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	9301      	str	r3, [sp, #4]
 801087c:	9400      	str	r4, [sp, #0]
 801087e:	4602      	mov	r2, r0
 8010880:	460b      	mov	r3, r1
 8010882:	487f      	ldr	r0, [pc, #508]	@ (8010a80 <SVCCTL_App_Notification+0x33c>)
 8010884:	f002 f986 	bl	8012b94 <iprintf>
          break;
 8010888:	e087      	b.n	801099a <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	3301      	adds	r3, #1
 801088e:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8010890:	4873      	ldr	r0, [pc, #460]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 8010892:	f7ff fd7d 	bl	8010390 <DbgTraceGetFileName>
 8010896:	4601      	mov	r1, r0
 8010898:	f240 13f5 	movw	r3, #501	@ 0x1f5
 801089c:	4a71      	ldr	r2, [pc, #452]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 801089e:	4872      	ldr	r0, [pc, #456]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 80108a0:	f002 f978 	bl	8012b94 <iprintf>
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	4619      	mov	r1, r3
 80108ae:	4875      	ldr	r0, [pc, #468]	@ (8010a84 <SVCCTL_App_Notification+0x340>)
 80108b0:	f002 f970 	bl	8012b94 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80108b4:	486a      	ldr	r0, [pc, #424]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 80108b6:	f7ff fd6b 	bl	8010390 <DbgTraceGetFileName>
 80108ba:	4601      	mov	r1, r0
 80108bc:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 80108c0:	4a68      	ldr	r2, [pc, #416]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 80108c2:	4869      	ldr	r0, [pc, #420]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 80108c4:	f002 f966 	bl	8012b94 <iprintf>
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	7a9b      	ldrb	r3, [r3, #10]
 80108cc:	4618      	mov	r0, r3
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	7a5b      	ldrb	r3, [r3, #9]
 80108d2:	461c      	mov	r4, r3
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	7a1b      	ldrb	r3, [r3, #8]
 80108d8:	461d      	mov	r5, r3
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	79db      	ldrb	r3, [r3, #7]
 80108de:	461a      	mov	r2, r3
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	799b      	ldrb	r3, [r3, #6]
 80108e4:	4619      	mov	r1, r3
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	795b      	ldrb	r3, [r3, #5]
 80108ea:	9302      	str	r3, [sp, #8]
 80108ec:	9101      	str	r1, [sp, #4]
 80108ee:	9200      	str	r2, [sp, #0]
 80108f0:	462b      	mov	r3, r5
 80108f2:	4622      	mov	r2, r4
 80108f4:	4601      	mov	r1, r0
 80108f6:	4864      	ldr	r0, [pc, #400]	@ (8010a88 <SVCCTL_App_Notification+0x344>)
 80108f8:	f002 f94c 	bl	8012b94 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80108fc:	4858      	ldr	r0, [pc, #352]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 80108fe:	f7ff fd47 	bl	8010390 <DbgTraceGetFileName>
 8010902:	4601      	mov	r1, r0
 8010904:	f240 13fd 	movw	r3, #509	@ 0x1fd
 8010908:	4a56      	ldr	r2, [pc, #344]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 801090a:	4857      	ldr	r0, [pc, #348]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 801090c:	f002 f942 	bl	8012b94 <iprintf>
 8010910:	68fb      	ldr	r3, [r7, #12]
 8010912:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8010916:	b29b      	uxth	r3, r3
 8010918:	4618      	mov	r0, r3
 801091a:	f7ef ff05 	bl	8000728 <__aeabi_i2d>
 801091e:	f04f 0200 	mov.w	r2, #0
 8010922:	4b56      	ldr	r3, [pc, #344]	@ (8010a7c <SVCCTL_App_Notification+0x338>)
 8010924:	f7ef fc84 	bl	8000230 <__aeabi_dmul>
 8010928:	4602      	mov	r2, r0
 801092a:	460b      	mov	r3, r1
 801092c:	4610      	mov	r0, r2
 801092e:	4619      	mov	r1, r3
 8010930:	68fb      	ldr	r3, [r7, #12]
 8010932:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8010936:	b29b      	uxth	r3, r3
 8010938:	461c      	mov	r4, r3
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8010940:	b29b      	uxth	r3, r3
 8010942:	461a      	mov	r2, r3
 8010944:	4613      	mov	r3, r2
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	4413      	add	r3, r2
 801094a:	005b      	lsls	r3, r3, #1
 801094c:	9301      	str	r3, [sp, #4]
 801094e:	9400      	str	r4, [sp, #0]
 8010950:	4602      	mov	r2, r0
 8010952:	460b      	mov	r3, r1
 8010954:	484a      	ldr	r0, [pc, #296]	@ (8010a80 <SVCCTL_App_Notification+0x33c>)
 8010956:	f002 f91d 	bl	8012b94 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 801095a:	4b40      	ldr	r3, [pc, #256]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 801095c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010960:	2b04      	cmp	r3, #4
 8010962:	d104      	bne.n	801096e <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8010964:	4b3d      	ldr	r3, [pc, #244]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 8010966:	2206      	movs	r2, #6
 8010968:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801096c:	e003      	b.n	8010976 <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 801096e:	4b3b      	ldr	r3, [pc, #236]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 8010970:	2205      	movs	r2, #5
 8010972:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801097c:	b29a      	uxth	r2, r3
 801097e:	4b37      	ldr	r3, [pc, #220]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 8010980:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8010982:	4b3c      	ldr	r3, [pc, #240]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 8010984:	2200      	movs	r2, #0
 8010986:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010988:	4b34      	ldr	r3, [pc, #208]	@ (8010a5c <SVCCTL_App_Notification+0x318>)
 801098a:	8ada      	ldrh	r2, [r3, #22]
 801098c:	4b39      	ldr	r3, [pc, #228]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 801098e:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8010990:	4838      	ldr	r0, [pc, #224]	@ (8010a74 <SVCCTL_App_Notification+0x330>)
 8010992:	f000 fe2b 	bl	80115ec <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010996:	e000      	b.n	801099a <SVCCTL_App_Notification+0x256>
          break;
 8010998:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 801099a:	e16e      	b.n	8010c7a <SVCCTL_App_Notification+0x536>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	3302      	adds	r3, #2
 80109a0:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	881b      	ldrh	r3, [r3, #0]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80109ac:	4293      	cmp	r3, r2
 80109ae:	f000 814a 	beq.w	8010c46 <SVCCTL_App_Notification+0x502>
 80109b2:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80109b6:	4293      	cmp	r3, r2
 80109b8:	f300 815e 	bgt.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109c0:	f000 8154 	beq.w	8010c6c <SVCCTL_App_Notification+0x528>
 80109c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80109c8:	f300 8156 	bgt.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109cc:	2b04      	cmp	r3, #4
 80109ce:	f000 814f 	beq.w	8010c70 <SVCCTL_App_Notification+0x52c>
 80109d2:	2b04      	cmp	r3, #4
 80109d4:	f2c0 8150 	blt.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109d8:	f240 420a 	movw	r2, #1034	@ 0x40a
 80109dc:	4293      	cmp	r3, r2
 80109de:	f300 814b 	bgt.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80109e6:	f340 8147 	ble.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109ea:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 80109ee:	2b09      	cmp	r3, #9
 80109f0:	f200 8142 	bhi.w	8010c78 <SVCCTL_App_Notification+0x534>
 80109f4:	a201      	add	r2, pc, #4	@ (adr r2, 80109fc <SVCCTL_App_Notification+0x2b8>)
 80109f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109fa:	bf00      	nop
 80109fc:	08010bc1 	.word	0x08010bc1
 8010a00:	08010a95 	.word	0x08010a95
 8010a04:	08010c79 	.word	0x08010c79
 8010a08:	08010c79 	.word	0x08010c79
 8010a0c:	08010c79 	.word	0x08010c79
 8010a10:	08010c79 	.word	0x08010c79
 8010a14:	08010a25 	.word	0x08010a25
 8010a18:	08010c79 	.word	0x08010c79
 8010a1c:	08010b07 	.word	0x08010b07
 8010a20:	08010a41 	.word	0x08010a41
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8010a24:	480e      	ldr	r0, [pc, #56]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 8010a26:	f7ff fcb3 	bl	8010390 <DbgTraceGetFileName>
 8010a2a:	4601      	mov	r1, r0
 8010a2c:	f240 233f 	movw	r3, #575	@ 0x23f
 8010a30:	4a0c      	ldr	r2, [pc, #48]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 8010a32:	480d      	ldr	r0, [pc, #52]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 8010a34:	f002 f8ae 	bl	8012b94 <iprintf>
 8010a38:	4814      	ldr	r0, [pc, #80]	@ (8010a8c <SVCCTL_App_Notification+0x348>)
 8010a3a:	f002 f8ab 	bl	8012b94 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8010a3e:	e118      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8010a40:	4807      	ldr	r0, [pc, #28]	@ (8010a60 <SVCCTL_App_Notification+0x31c>)
 8010a42:	f7ff fca5 	bl	8010390 <DbgTraceGetFileName>
 8010a46:	4601      	mov	r1, r0
 8010a48:	f240 234f 	movw	r3, #591	@ 0x24f
 8010a4c:	4a05      	ldr	r2, [pc, #20]	@ (8010a64 <SVCCTL_App_Notification+0x320>)
 8010a4e:	4806      	ldr	r0, [pc, #24]	@ (8010a68 <SVCCTL_App_Notification+0x324>)
 8010a50:	f002 f8a0 	bl	8012b94 <iprintf>
 8010a54:	480e      	ldr	r0, [pc, #56]	@ (8010a90 <SVCCTL_App_Notification+0x34c>)
 8010a56:	f002 f90d 	bl	8012c74 <puts>
          break;
 8010a5a:	e10a      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
 8010a5c:	20000938 	.word	0x20000938
 8010a60:	080142c4 	.word	0x080142c4
 8010a64:	08015688 	.word	0x08015688
 8010a68:	080142e0 	.word	0x080142e0
 8010a6c:	0801440c 	.word	0x0801440c
 8010a70:	08014438 	.word	0x08014438
 8010a74:	200009bc 	.word	0x200009bc
 8010a78:	08014474 	.word	0x08014474
 8010a7c:	3ff40000 	.word	0x3ff40000
 8010a80:	080144a8 	.word	0x080144a8
 8010a84:	08014514 	.word	0x08014514
 8010a88:	0801455c 	.word	0x0801455c
 8010a8c:	080145ac 	.word	0x080145ac
 8010a90:	080145d4 	.word	0x080145d4
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8010a94:	487b      	ldr	r0, [pc, #492]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010a96:	f7ff fc7b 	bl	8010390 <DbgTraceGetFileName>
 8010a9a:	4601      	mov	r1, r0
 8010a9c:	f240 2356 	movw	r3, #598	@ 0x256
 8010aa0:	4a79      	ldr	r2, [pc, #484]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010aa2:	487a      	ldr	r0, [pc, #488]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010aa4:	f002 f876 	bl	8012b94 <iprintf>
 8010aa8:	4879      	ldr	r0, [pc, #484]	@ (8010c90 <SVCCTL_App_Notification+0x54c>)
 8010aaa:	f002 f8e3 	bl	8012c74 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8010aae:	4b79      	ldr	r3, [pc, #484]	@ (8010c94 <SVCCTL_App_Notification+0x550>)
 8010ab0:	8adb      	ldrh	r3, [r3, #22]
 8010ab2:	4979      	ldr	r1, [pc, #484]	@ (8010c98 <SVCCTL_App_Notification+0x554>)
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fd fe2c 	bl	800e712 <aci_gap_pass_key_resp>
 8010aba:	4603      	mov	r3, r0
 8010abc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8010ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d010      	beq.n	8010aea <SVCCTL_App_Notification+0x3a6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8010ac8:	486e      	ldr	r0, [pc, #440]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010aca:	f7ff fc61 	bl	8010390 <DbgTraceGetFileName>
 8010ace:	4601      	mov	r1, r0
 8010ad0:	f240 235b 	movw	r3, #603	@ 0x25b
 8010ad4:	4a6c      	ldr	r2, [pc, #432]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010ad6:	486d      	ldr	r0, [pc, #436]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010ad8:	f002 f85c 	bl	8012b94 <iprintf>
 8010adc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	486e      	ldr	r0, [pc, #440]	@ (8010c9c <SVCCTL_App_Notification+0x558>)
 8010ae4:	f002 f856 	bl	8012b94 <iprintf>
          break;
 8010ae8:	e0c3      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8010aea:	4866      	ldr	r0, [pc, #408]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010aec:	f7ff fc50 	bl	8010390 <DbgTraceGetFileName>
 8010af0:	4601      	mov	r1, r0
 8010af2:	f240 235f 	movw	r3, #607	@ 0x25f
 8010af6:	4a64      	ldr	r2, [pc, #400]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010af8:	4864      	ldr	r0, [pc, #400]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010afa:	f002 f84b 	bl	8012b94 <iprintf>
 8010afe:	4868      	ldr	r0, [pc, #416]	@ (8010ca0 <SVCCTL_App_Notification+0x55c>)
 8010b00:	f002 f8b8 	bl	8012c74 <puts>
          break;
 8010b04:	e0b5      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8010b06:	485f      	ldr	r0, [pc, #380]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010b08:	f7ff fc42 	bl	8010390 <DbgTraceGetFileName>
 8010b0c:	4601      	mov	r1, r0
 8010b0e:	f240 2367 	movw	r3, #615	@ 0x267
 8010b12:	4a5d      	ldr	r2, [pc, #372]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010b14:	485d      	ldr	r0, [pc, #372]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010b16:	f002 f83d 	bl	8012b94 <iprintf>
 8010b1a:	4862      	ldr	r0, [pc, #392]	@ (8010ca4 <SVCCTL_App_Notification+0x560>)
 8010b1c:	f002 f8aa 	bl	8012c74 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8010b20:	4858      	ldr	r0, [pc, #352]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010b22:	f7ff fc35 	bl	8010390 <DbgTraceGetFileName>
 8010b26:	4601      	mov	r1, r0
 8010b28:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8010b2c:	4a56      	ldr	r2, [pc, #344]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010b2e:	4857      	ldr	r0, [pc, #348]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010b30:	f002 f830 	bl	8012b94 <iprintf>
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	3302      	adds	r3, #2
 8010b38:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	485a      	ldr	r0, [pc, #360]	@ (8010ca8 <SVCCTL_App_Notification+0x564>)
 8010b40:	f002 f828 	bl	8012b94 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8010b44:	484f      	ldr	r0, [pc, #316]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010b46:	f7ff fc23 	bl	8010390 <DbgTraceGetFileName>
 8010b4a:	4601      	mov	r1, r0
 8010b4c:	f240 236a 	movw	r3, #618	@ 0x26a
 8010b50:	4a4d      	ldr	r2, [pc, #308]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010b52:	484e      	ldr	r0, [pc, #312]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010b54:	f002 f81e 	bl	8012b94 <iprintf>
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	3302      	adds	r3, #2
 8010b5c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010b60:	4619      	mov	r1, r3
 8010b62:	4852      	ldr	r0, [pc, #328]	@ (8010cac <SVCCTL_App_Notification+0x568>)
 8010b64:	f002 f816 	bl	8012b94 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010b68:	4b4a      	ldr	r3, [pc, #296]	@ (8010c94 <SVCCTL_App_Notification+0x550>)
 8010b6a:	8adb      	ldrh	r3, [r3, #22]
 8010b6c:	2101      	movs	r1, #1
 8010b6e:	4618      	mov	r0, r3
 8010b70:	f7fd ff79 	bl	800ea66 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010b74:	4603      	mov	r3, r0
 8010b76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 8010b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d010      	beq.n	8010ba4 <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8010b82:	4840      	ldr	r0, [pc, #256]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010b84:	f7ff fc04 	bl	8010390 <DbgTraceGetFileName>
 8010b88:	4601      	mov	r1, r0
 8010b8a:	f240 236f 	movw	r3, #623	@ 0x26f
 8010b8e:	4a3e      	ldr	r2, [pc, #248]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010b90:	483e      	ldr	r0, [pc, #248]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010b92:	f001 ffff 	bl	8012b94 <iprintf>
 8010b96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010b9a:	4619      	mov	r1, r3
 8010b9c:	4844      	ldr	r0, [pc, #272]	@ (8010cb0 <SVCCTL_App_Notification+0x56c>)
 8010b9e:	f001 fff9 	bl	8012b94 <iprintf>
          break;
 8010ba2:	e066      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8010ba4:	4837      	ldr	r0, [pc, #220]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010ba6:	f7ff fbf3 	bl	8010390 <DbgTraceGetFileName>
 8010baa:	4601      	mov	r1, r0
 8010bac:	f240 2373 	movw	r3, #627	@ 0x273
 8010bb0:	4a35      	ldr	r2, [pc, #212]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010bb2:	4836      	ldr	r0, [pc, #216]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010bb4:	f001 ffee 	bl	8012b94 <iprintf>
 8010bb8:	483e      	ldr	r0, [pc, #248]	@ (8010cb4 <SVCCTL_App_Notification+0x570>)
 8010bba:	f002 f85b 	bl	8012c74 <puts>
          break;
 8010bbe:	e058      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	3302      	adds	r3, #2
 8010bc4:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8010bc6:	482f      	ldr	r0, [pc, #188]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010bc8:	f7ff fbe2 	bl	8010390 <DbgTraceGetFileName>
 8010bcc:	4601      	mov	r1, r0
 8010bce:	f240 237d 	movw	r3, #637	@ 0x27d
 8010bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010bd4:	482d      	ldr	r0, [pc, #180]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010bd6:	f001 ffdd 	bl	8012b94 <iprintf>
 8010bda:	4837      	ldr	r0, [pc, #220]	@ (8010cb8 <SVCCTL_App_Notification+0x574>)
 8010bdc:	f002 f84a 	bl	8012c74 <puts>
          if (p_pairing_complete->Status != 0)
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	789b      	ldrb	r3, [r3, #2]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d013      	beq.n	8010c10 <SVCCTL_App_Notification+0x4cc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8010be8:	4826      	ldr	r0, [pc, #152]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010bea:	f7ff fbd1 	bl	8010390 <DbgTraceGetFileName>
 8010bee:	4601      	mov	r1, r0
 8010bf0:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8010bf4:	4a24      	ldr	r2, [pc, #144]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010bf6:	4825      	ldr	r0, [pc, #148]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010bf8:	f001 ffcc 	bl	8012b94 <iprintf>
 8010bfc:	69bb      	ldr	r3, [r7, #24]
 8010bfe:	789b      	ldrb	r3, [r3, #2]
 8010c00:	4619      	mov	r1, r3
 8010c02:	69bb      	ldr	r3, [r7, #24]
 8010c04:	78db      	ldrb	r3, [r3, #3]
 8010c06:	461a      	mov	r2, r3
 8010c08:	482c      	ldr	r0, [pc, #176]	@ (8010cbc <SVCCTL_App_Notification+0x578>)
 8010c0a:	f001 ffc3 	bl	8012b94 <iprintf>
 8010c0e:	e00c      	b.n	8010c2a <SVCCTL_App_Notification+0x4e6>
            APP_DBG_MSG("     - Pairing Success\n");
 8010c10:	481c      	ldr	r0, [pc, #112]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010c12:	f7ff fbbd 	bl	8010390 <DbgTraceGetFileName>
 8010c16:	4601      	mov	r1, r0
 8010c18:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8010c1c:	4a1a      	ldr	r2, [pc, #104]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010c1e:	481b      	ldr	r0, [pc, #108]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010c20:	f001 ffb8 	bl	8012b94 <iprintf>
 8010c24:	4826      	ldr	r0, [pc, #152]	@ (8010cc0 <SVCCTL_App_Notification+0x57c>)
 8010c26:	f002 f825 	bl	8012c74 <puts>
          APP_DBG_MSG("\n");
 8010c2a:	4816      	ldr	r0, [pc, #88]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010c2c:	f7ff fbb0 	bl	8010390 <DbgTraceGetFileName>
 8010c30:	4601      	mov	r1, r0
 8010c32:	f240 2386 	movw	r3, #646	@ 0x286
 8010c36:	4a14      	ldr	r2, [pc, #80]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010c38:	4814      	ldr	r0, [pc, #80]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010c3a:	f001 ffab 	bl	8012b94 <iprintf>
 8010c3e:	200a      	movs	r0, #10
 8010c40:	f001 ffba 	bl	8012bb8 <putchar>
          break;
 8010c44:	e015      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 8010c46:	480f      	ldr	r0, [pc, #60]	@ (8010c84 <SVCCTL_App_Notification+0x540>)
 8010c48:	f7ff fba2 	bl	8010390 <DbgTraceGetFileName>
 8010c4c:	4601      	mov	r1, r0
 8010c4e:	f240 238f 	movw	r3, #655	@ 0x28f
 8010c52:	4a0d      	ldr	r2, [pc, #52]	@ (8010c88 <SVCCTL_App_Notification+0x544>)
 8010c54:	480d      	ldr	r0, [pc, #52]	@ (8010c8c <SVCCTL_App_Notification+0x548>)
 8010c56:	f001 ff9d 	bl	8012b94 <iprintf>
 8010c5a:	481a      	ldr	r0, [pc, #104]	@ (8010cc4 <SVCCTL_App_Notification+0x580>)
 8010c5c:	f001 ff9a 	bl	8012b94 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010c60:	4b0c      	ldr	r3, [pc, #48]	@ (8010c94 <SVCCTL_App_Notification+0x550>)
 8010c62:	8adb      	ldrh	r3, [r3, #22]
 8010c64:	4618      	mov	r0, r3
 8010c66:	f7fe fa11 	bl	800f08c <aci_gatt_confirm_indication>
        break;
 8010c6a:	e002      	b.n	8010c72 <SVCCTL_App_Notification+0x52e>
          break;
 8010c6c:	bf00      	nop
 8010c6e:	e003      	b.n	8010c78 <SVCCTL_App_Notification+0x534>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010c70:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010c72:	e001      	b.n	8010c78 <SVCCTL_App_Notification+0x534>
      break;
 8010c74:	bf00      	nop
 8010c76:	e000      	b.n	8010c7a <SVCCTL_App_Notification+0x536>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010c78:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010c7a:	2301      	movs	r3, #1
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3728      	adds	r7, #40	@ 0x28
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bdb0      	pop	{r4, r5, r7, pc}
 8010c84:	080142c4 	.word	0x080142c4
 8010c88:	08015688 	.word	0x08015688
 8010c8c:	080142e0 	.word	0x080142e0
 8010c90:	08014604 	.word	0x08014604
 8010c94:	20000938 	.word	0x20000938
 8010c98:	0001b207 	.word	0x0001b207
 8010c9c:	0801462c 	.word	0x0801462c
 8010ca0:	08014660 	.word	0x08014660
 8010ca4:	08014688 	.word	0x08014688
 8010ca8:	080146bc 	.word	0x080146bc
 8010cac:	080146d8 	.word	0x080146d8
 8010cb0:	080146f0 	.word	0x080146f0
 8010cb4:	08014740 	.word	0x08014740
 8010cb8:	08014788 	.word	0x08014788
 8010cbc:	080147b4 	.word	0x080147b4
 8010cc0:	080147f0 	.word	0x080147f0
 8010cc4:	08014808 	.word	0x08014808

08010cc8 <MVT_REF_fin>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void MVT_REF_fin(void)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_fin();
 8010ccc:	f000 fcb4 	bl	8011638 <FSVC_MVT_REF_fin>
}
 8010cd0:	bf00      	nop
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <MVT_REF_vide>:
void MVT_REF_vide(void)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_vide();
 8010cd8:	f000 fcbc 	bl	8011654 <FSVC_MVT_REF_vide>
}
 8010cdc:	bf00      	nop
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <MVT_REF_validation_succes>:

void MVT_REF_validation_succes(void)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_succes();
 8010ce4:	f000 fcc4 	bl	8011670 <FSVC_MVT_REF_validation_succes>
}
 8010ce8:	bf00      	nop
 8010cea:	bd80      	pop	{r7, pc}

08010cec <MVT_REF_validation_fail>:
void MVT_REF_validation_fail(void)
{
 8010cec:	b580      	push	{r7, lr}
 8010cee:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_fail();
 8010cf0:	f000 fccc 	bl	801168c <FSVC_MVT_REF_validation_fail>
}
 8010cf4:	bf00      	nop
 8010cf6:	bd80      	pop	{r7, pc}

08010cf8 <MVT_REF_validation_vide>:
void MVT_REF_validation_vide(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_vide();
 8010cfc:	f000 fcd4 	bl	80116a8 <FSVC_MVT_REF_validation_vide>
}
 8010d00:	bf00      	nop
 8010d02:	bd80      	pop	{r7, pc}

08010d04 <MVT_vide>:

void MVT_vide(void)
{
 8010d04:	b580      	push	{r7, lr}
 8010d06:	af00      	add	r7, sp, #0
	FSVC_MVT_vide();
 8010d08:	f000 fcdc 	bl	80116c4 <FSVC_MVT_vide>
}
 8010d0c:	bf00      	nop
 8010d0e:	bd80      	pop	{r7, pc}

08010d10 <MVT_BRAS_GAUCHE_valide>:

void MVT_BRAS_GAUCHE_valide(void)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_GAUCHE_valide();
 8010d14:	f000 fce4 	bl	80116e0 <FSVC_MVT_BRAS_GAUCHE_valide>
}
 8010d18:	bf00      	nop
 8010d1a:	bd80      	pop	{r7, pc}

08010d1c <MVT_BRAS_DROIT_valide>:
void MVT_BRAS_DROIT_valide(void)
{
 8010d1c:	b580      	push	{r7, lr}
 8010d1e:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_DROIT_valide();
 8010d20:	f000 fcec 	bl	80116fc <FSVC_MVT_BRAS_DROIT_valide>
}
 8010d24:	bf00      	nop
 8010d26:	bd80      	pop	{r7, pc}

08010d28 <MVT_BRAS_CORRECT_valide>:
void MVT_BRAS_CORRECT_valide(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_CORRECT_valide();
 8010d2c:	f000 fcf4 	bl	8011718 <FSVC_MVT_BRAS_CORRECT_valide>
}
 8010d30:	bf00      	nop
 8010d32:	bd80      	pop	{r7, pc}

08010d34 <MVT_BRAS_GAUCHE_non_valide>:
void MVT_BRAS_GAUCHE_non_valide(void)
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_GAUCHE_non_valide();
 8010d38:	f000 fcfc 	bl	8011734 <FSVC_MVT_BRAS_GAUCHE_non_valide>
}
 8010d3c:	bf00      	nop
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <MVT_BRAS_DROIT_non_valide>:
void MVT_BRAS_DROIT_non_valide(void)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_DROIT_non_valide();
 8010d44:	f000 fd04 	bl	8011750 <FSVC_MVT_BRAS_DROIT_non_valide>
}
 8010d48:	bf00      	nop
 8010d4a:	bd80      	pop	{r7, pc}

08010d4c <MVT_BRAS_CORRECT_non_valide>:
void MVT_BRAS_CORRECT_non_valide(void)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	af00      	add	r7, sp, #0
	FSVC_MVT_BRAS_CORRECT_non_valide();
 8010d50:	f000 fd0c 	bl	801176c <FSVC_MVT_BRAS_CORRECT_non_valide>
}
 8010d54:	bf00      	nop
 8010d56:	bd80      	pop	{r7, pc}

08010d58 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010d5e:	4b06      	ldr	r3, [pc, #24]	@ (8010d78 <Ble_Tl_Init+0x20>)
 8010d60:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8010d62:	4b06      	ldr	r3, [pc, #24]	@ (8010d7c <Ble_Tl_Init+0x24>)
 8010d64:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8010d66:	463b      	mov	r3, r7
 8010d68:	4619      	mov	r1, r3
 8010d6a:	4805      	ldr	r0, [pc, #20]	@ (8010d80 <Ble_Tl_Init+0x28>)
 8010d6c:	f7fe fdf4 	bl	800f958 <hci_init>

  return;
 8010d70:	bf00      	nop
}
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	200300d8 	.word	0x200300d8
 8010d7c:	0801154d 	.word	0x0801154d
 8010d80:	08011515 	.word	0x08011515

08010d84 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8010d84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d86:	b08d      	sub	sp, #52	@ 0x34
 8010d88:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010d8e:	2392      	movs	r3, #146	@ 0x92
 8010d90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8010d92:	48a3      	ldr	r0, [pc, #652]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010d94:	f7ff fafc 	bl	8010390 <DbgTraceGetFileName>
 8010d98:	4601      	mov	r1, r0
 8010d9a:	f240 23fe 	movw	r3, #766	@ 0x2fe
 8010d9e:	4aa1      	ldr	r2, [pc, #644]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010da0:	48a1      	ldr	r0, [pc, #644]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010da2:	f001 fef7 	bl	8012b94 <iprintf>
 8010da6:	48a1      	ldr	r0, [pc, #644]	@ (801102c <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8010da8:	f001 ff64 	bl	8012c74 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8010dac:	f7fe fb03 	bl	800f3b6 <hci_reset>
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d00f      	beq.n	8010dda <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8010dba:	4899      	ldr	r0, [pc, #612]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010dbc:	f7ff fae8 	bl	8010390 <DbgTraceGetFileName>
 8010dc0:	4601      	mov	r1, r0
 8010dc2:	f240 3307 	movw	r3, #775	@ 0x307
 8010dc6:	4a97      	ldr	r2, [pc, #604]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010dc8:	4897      	ldr	r0, [pc, #604]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010dca:	f001 fee3 	bl	8012b94 <iprintf>
 8010dce:	7dfb      	ldrb	r3, [r7, #23]
 8010dd0:	4619      	mov	r1, r3
 8010dd2:	4897      	ldr	r0, [pc, #604]	@ (8011030 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8010dd4:	f001 fede 	bl	8012b94 <iprintf>
 8010dd8:	e00c      	b.n	8010df4 <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8010dda:	4891      	ldr	r0, [pc, #580]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010ddc:	f7ff fad8 	bl	8010390 <DbgTraceGetFileName>
 8010de0:	4601      	mov	r1, r0
 8010de2:	f240 330b 	movw	r3, #779	@ 0x30b
 8010de6:	4a8f      	ldr	r2, [pc, #572]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010de8:	488f      	ldr	r0, [pc, #572]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010dea:	f001 fed3 	bl	8012b94 <iprintf>
 8010dee:	4891      	ldr	r0, [pc, #580]	@ (8011034 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8010df0:	f001 ff40 	bl	8012c74 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010df4:	f000 fad8 	bl	80113a8 <BleGetBdAddress>
 8010df8:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	2106      	movs	r1, #6
 8010dfe:	2000      	movs	r0, #0
 8010e00:	f7fe f999 	bl	800f136 <aci_hal_write_config_data>
 8010e04:	4603      	mov	r3, r0
 8010e06:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010e08:	7dfb      	ldrb	r3, [r7, #23]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00f      	beq.n	8010e2e <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8010e0e:	4884      	ldr	r0, [pc, #528]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e10:	f7ff fabe 	bl	8010390 <DbgTraceGetFileName>
 8010e14:	4601      	mov	r1, r0
 8010e16:	f240 3315 	movw	r3, #789	@ 0x315
 8010e1a:	4a82      	ldr	r2, [pc, #520]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e1c:	4882      	ldr	r0, [pc, #520]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e1e:	f001 feb9 	bl	8012b94 <iprintf>
 8010e22:	7dfb      	ldrb	r3, [r7, #23]
 8010e24:	4619      	mov	r1, r3
 8010e26:	4884      	ldr	r0, [pc, #528]	@ (8011038 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8010e28:	f001 feb4 	bl	8012b94 <iprintf>
 8010e2c:	e035      	b.n	8010e9a <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8010e2e:	487c      	ldr	r0, [pc, #496]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e30:	f7ff faae 	bl	8010390 <DbgTraceGetFileName>
 8010e34:	4601      	mov	r1, r0
 8010e36:	f240 3319 	movw	r3, #793	@ 0x319
 8010e3a:	4a7a      	ldr	r2, [pc, #488]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e3c:	487a      	ldr	r0, [pc, #488]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e3e:	f001 fea9 	bl	8012b94 <iprintf>
 8010e42:	487e      	ldr	r0, [pc, #504]	@ (801103c <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8010e44:	f001 ff16 	bl	8012c74 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8010e48:	4875      	ldr	r0, [pc, #468]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010e4a:	f7ff faa1 	bl	8010390 <DbgTraceGetFileName>
 8010e4e:	4601      	mov	r1, r0
 8010e50:	f240 331a 	movw	r3, #794	@ 0x31a
 8010e54:	4a73      	ldr	r2, [pc, #460]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010e56:	4874      	ldr	r0, [pc, #464]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010e58:	f001 fe9c 	bl	8012b94 <iprintf>
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	3305      	adds	r3, #5
 8010e60:	781b      	ldrb	r3, [r3, #0]
 8010e62:	4618      	mov	r0, r3
 8010e64:	693b      	ldr	r3, [r7, #16]
 8010e66:	3304      	adds	r3, #4
 8010e68:	781b      	ldrb	r3, [r3, #0]
 8010e6a:	461c      	mov	r4, r3
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	3303      	adds	r3, #3
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	461d      	mov	r5, r3
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	3302      	adds	r3, #2
 8010e78:	781b      	ldrb	r3, [r3, #0]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	693b      	ldr	r3, [r7, #16]
 8010e7e:	3301      	adds	r3, #1
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	4619      	mov	r1, r3
 8010e84:	693b      	ldr	r3, [r7, #16]
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	9302      	str	r3, [sp, #8]
 8010e8a:	9101      	str	r1, [sp, #4]
 8010e8c:	9200      	str	r2, [sp, #0]
 8010e8e:	462b      	mov	r3, r5
 8010e90:	4622      	mov	r2, r4
 8010e92:	4601      	mov	r1, r0
 8010e94:	486a      	ldr	r0, [pc, #424]	@ (8011040 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8010e96:	f001 fe7d 	bl	8012b94 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010e9a:	4a6a      	ldr	r2, [pc, #424]	@ (8011044 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8010e9c:	2110      	movs	r1, #16
 8010e9e:	2018      	movs	r0, #24
 8010ea0:	f7fe f949 	bl	800f136 <aci_hal_write_config_data>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010ea8:	7dfb      	ldrb	r3, [r7, #23]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d00f      	beq.n	8010ece <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8010eae:	485c      	ldr	r0, [pc, #368]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010eb0:	f7ff fa6e 	bl	8010390 <DbgTraceGetFileName>
 8010eb4:	4601      	mov	r1, r0
 8010eb6:	f44f 7359 	mov.w	r3, #868	@ 0x364
 8010eba:	4a5a      	ldr	r2, [pc, #360]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010ebc:	485a      	ldr	r0, [pc, #360]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010ebe:	f001 fe69 	bl	8012b94 <iprintf>
 8010ec2:	7dfb      	ldrb	r3, [r7, #23]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	4860      	ldr	r0, [pc, #384]	@ (8011048 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8010ec8:	f001 fe64 	bl	8012b94 <iprintf>
 8010ecc:	e00c      	b.n	8010ee8 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8010ece:	4854      	ldr	r0, [pc, #336]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010ed0:	f7ff fa5e 	bl	8010390 <DbgTraceGetFileName>
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	f44f 735a 	mov.w	r3, #872	@ 0x368
 8010eda:	4a52      	ldr	r2, [pc, #328]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010edc:	4852      	ldr	r0, [pc, #328]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010ede:	f001 fe59 	bl	8012b94 <iprintf>
 8010ee2:	485a      	ldr	r0, [pc, #360]	@ (801104c <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8010ee4:	f001 fec6 	bl	8012c74 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010ee8:	4a59      	ldr	r2, [pc, #356]	@ (8011050 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8010eea:	2110      	movs	r1, #16
 8010eec:	2008      	movs	r0, #8
 8010eee:	f7fe f922 	bl	800f136 <aci_hal_write_config_data>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010ef6:	7dfb      	ldrb	r3, [r7, #23]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00f      	beq.n	8010f1c <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8010efc:	4848      	ldr	r0, [pc, #288]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010efe:	f7ff fa47 	bl	8010390 <DbgTraceGetFileName>
 8010f02:	4601      	mov	r1, r0
 8010f04:	f240 3371 	movw	r3, #881	@ 0x371
 8010f08:	4a46      	ldr	r2, [pc, #280]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010f0a:	4847      	ldr	r0, [pc, #284]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010f0c:	f001 fe42 	bl	8012b94 <iprintf>
 8010f10:	7dfb      	ldrb	r3, [r7, #23]
 8010f12:	4619      	mov	r1, r3
 8010f14:	484f      	ldr	r0, [pc, #316]	@ (8011054 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8010f16:	f001 fe3d 	bl	8012b94 <iprintf>
 8010f1a:	e00c      	b.n	8010f36 <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8010f1c:	4840      	ldr	r0, [pc, #256]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010f1e:	f7ff fa37 	bl	8010390 <DbgTraceGetFileName>
 8010f22:	4601      	mov	r1, r0
 8010f24:	f240 3375 	movw	r3, #885	@ 0x375
 8010f28:	4a3e      	ldr	r2, [pc, #248]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010f2a:	483f      	ldr	r0, [pc, #252]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010f2c:	f001 fe32 	bl	8012b94 <iprintf>
 8010f30:	4849      	ldr	r0, [pc, #292]	@ (8011058 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8010f32:	f001 fe9f 	bl	8012c74 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8010f36:	2118      	movs	r1, #24
 8010f38:	2001      	movs	r0, #1
 8010f3a:	f7fe f981 	bl	800f240 <aci_hal_set_tx_power_level>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010f42:	7dfb      	ldrb	r3, [r7, #23]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d00f      	beq.n	8010f68 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8010f48:	4835      	ldr	r0, [pc, #212]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010f4a:	f7ff fa21 	bl	8010390 <DbgTraceGetFileName>
 8010f4e:	4601      	mov	r1, r0
 8010f50:	f240 337e 	movw	r3, #894	@ 0x37e
 8010f54:	4a33      	ldr	r2, [pc, #204]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010f56:	4834      	ldr	r0, [pc, #208]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010f58:	f001 fe1c 	bl	8012b94 <iprintf>
 8010f5c:	7dfb      	ldrb	r3, [r7, #23]
 8010f5e:	4619      	mov	r1, r3
 8010f60:	483e      	ldr	r0, [pc, #248]	@ (801105c <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8010f62:	f001 fe17 	bl	8012b94 <iprintf>
 8010f66:	e00c      	b.n	8010f82 <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8010f68:	482d      	ldr	r0, [pc, #180]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010f6a:	f7ff fa11 	bl	8010390 <DbgTraceGetFileName>
 8010f6e:	4601      	mov	r1, r0
 8010f70:	f240 3382 	movw	r3, #898	@ 0x382
 8010f74:	4a2b      	ldr	r2, [pc, #172]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010f76:	482c      	ldr	r0, [pc, #176]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010f78:	f001 fe0c 	bl	8012b94 <iprintf>
 8010f7c:	4838      	ldr	r0, [pc, #224]	@ (8011060 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8010f7e:	f001 fe79 	bl	8012c74 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8010f82:	f7fd fdd7 	bl	800eb34 <aci_gatt_init>
 8010f86:	4603      	mov	r3, r0
 8010f88:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010f8a:	7dfb      	ldrb	r3, [r7, #23]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00f      	beq.n	8010fb0 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8010f90:	4823      	ldr	r0, [pc, #140]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010f92:	f7ff f9fd 	bl	8010390 <DbgTraceGetFileName>
 8010f96:	4601      	mov	r1, r0
 8010f98:	f240 338b 	movw	r3, #907	@ 0x38b
 8010f9c:	4a21      	ldr	r2, [pc, #132]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010f9e:	4822      	ldr	r0, [pc, #136]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010fa0:	f001 fdf8 	bl	8012b94 <iprintf>
 8010fa4:	7dfb      	ldrb	r3, [r7, #23]
 8010fa6:	4619      	mov	r1, r3
 8010fa8:	482e      	ldr	r0, [pc, #184]	@ (8011064 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8010faa:	f001 fdf3 	bl	8012b94 <iprintf>
 8010fae:	e00c      	b.n	8010fca <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8010fb0:	481b      	ldr	r0, [pc, #108]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010fb2:	f7ff f9ed 	bl	8010390 <DbgTraceGetFileName>
 8010fb6:	4601      	mov	r1, r0
 8010fb8:	f240 338f 	movw	r3, #911	@ 0x38f
 8010fbc:	4a19      	ldr	r2, [pc, #100]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010fbe:	481a      	ldr	r0, [pc, #104]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010fc0:	f001 fde8 	bl	8012b94 <iprintf>
 8010fc4:	4828      	ldr	r0, [pc, #160]	@ (8011068 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8010fc6:	f001 fe55 	bl	8012c74 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010fca:	2300      	movs	r3, #0
 8010fcc:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010fce:	7bfb      	ldrb	r3, [r7, #15]
 8010fd0:	f043 0301 	orr.w	r3, r3, #1
 8010fd4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8010fd6:	7bfb      	ldrb	r3, [r7, #15]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d069      	beq.n	80110b0 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010fdc:	4b23      	ldr	r3, [pc, #140]	@ (801106c <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8010fde:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010fe0:	1dba      	adds	r2, r7, #6
 8010fe2:	7bf8      	ldrb	r0, [r7, #15]
 8010fe4:	1cbb      	adds	r3, r7, #2
 8010fe6:	9301      	str	r3, [sp, #4]
 8010fe8:	1d3b      	adds	r3, r7, #4
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	4613      	mov	r3, r2
 8010fee:	2203      	movs	r2, #3
 8010ff0:	2100      	movs	r1, #0
 8010ff2:	f7fd fbf5 	bl	800e7e0 <aci_gap_init>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8010ffa:	7dfb      	ldrb	r3, [r7, #23]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d039      	beq.n	8011074 <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8011000:	4807      	ldr	r0, [pc, #28]	@ (8011020 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8011002:	f7ff f9c5 	bl	8010390 <DbgTraceGetFileName>
 8011006:	4601      	mov	r1, r0
 8011008:	f240 33af 	movw	r3, #943	@ 0x3af
 801100c:	4a05      	ldr	r2, [pc, #20]	@ (8011024 <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801100e:	4806      	ldr	r0, [pc, #24]	@ (8011028 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8011010:	f001 fdc0 	bl	8012b94 <iprintf>
 8011014:	7dfb      	ldrb	r3, [r7, #23]
 8011016:	4619      	mov	r1, r3
 8011018:	4815      	ldr	r0, [pc, #84]	@ (8011070 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 801101a:	f001 fdbb 	bl	8012b94 <iprintf>
 801101e:	e036      	b.n	801108e <Ble_Hci_Gap_Gatt_Init+0x30a>
 8011020:	080142c4 	.word	0x080142c4
 8011024:	080156a0 	.word	0x080156a0
 8011028:	080142e0 	.word	0x080142e0
 801102c:	08014830 	.word	0x08014830
 8011030:	0801485c 	.word	0x0801485c
 8011034:	0801488c 	.word	0x0801488c
 8011038:	080148ac 	.word	0x080148ac
 801103c:	08014908 	.word	0x08014908
 8011040:	08014954 	.word	0x08014954
 8011044:	08015658 	.word	0x08015658
 8011048:	08014990 	.word	0x08014990
 801104c:	080149e8 	.word	0x080149e8
 8011050:	08015668 	.word	0x08015668
 8011054:	08014a30 	.word	0x08014a30
 8011058:	08014a88 	.word	0x08014a88
 801105c:	08014ad0 	.word	0x08014ad0
 8011060:	08014b10 	.word	0x08014b10
 8011064:	08014b40 	.word	0x08014b40
 8011068:	08014b74 	.word	0x08014b74
 801106c:	08014b98 	.word	0x08014b98
 8011070:	08014b9c 	.word	0x08014b9c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8011074:	487e      	ldr	r0, [pc, #504]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011076:	f7ff f98b 	bl	8010390 <DbgTraceGetFileName>
 801107a:	4601      	mov	r1, r0
 801107c:	f240 33b3 	movw	r3, #947	@ 0x3b3
 8011080:	4a7c      	ldr	r2, [pc, #496]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011082:	487d      	ldr	r0, [pc, #500]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011084:	f001 fd86 	bl	8012b94 <iprintf>
 8011088:	487c      	ldr	r0, [pc, #496]	@ (801127c <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 801108a:	f001 fdf3 	bl	8012c74 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801108e:	88fc      	ldrh	r4, [r7, #6]
 8011090:	88bd      	ldrh	r5, [r7, #4]
 8011092:	68b8      	ldr	r0, [r7, #8]
 8011094:	f7ef f874 	bl	8000180 <strlen>
 8011098:	4603      	mov	r3, r0
 801109a:	b2da      	uxtb	r2, r3
 801109c:	68bb      	ldr	r3, [r7, #8]
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	4613      	mov	r3, r2
 80110a2:	2200      	movs	r2, #0
 80110a4:	4629      	mov	r1, r5
 80110a6:	4620      	mov	r0, r4
 80110a8:	f7fd ff47 	bl	800ef3a <aci_gatt_update_char_value>
 80110ac:	4603      	mov	r3, r0
 80110ae:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80110b0:	88f8      	ldrh	r0, [r7, #6]
 80110b2:	8879      	ldrh	r1, [r7, #2]
 80110b4:	463b      	mov	r3, r7
 80110b6:	9300      	str	r3, [sp, #0]
 80110b8:	2302      	movs	r3, #2
 80110ba:	2200      	movs	r2, #0
 80110bc:	f7fd ff3d 	bl	800ef3a <aci_gatt_update_char_value>
 80110c0:	4603      	mov	r3, r0
 80110c2:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80110c4:	2202      	movs	r2, #2
 80110c6:	2102      	movs	r1, #2
 80110c8:	2000      	movs	r0, #0
 80110ca:	f7fe f998 	bl	800f3fe <hci_le_set_default_phy>
 80110ce:	4603      	mov	r3, r0
 80110d0:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80110d2:	7dfb      	ldrb	r3, [r7, #23]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d00f      	beq.n	80110f8 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 80110d8:	4865      	ldr	r0, [pc, #404]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80110da:	f7ff f959 	bl	8010390 <DbgTraceGetFileName>
 80110de:	4601      	mov	r1, r0
 80110e0:	f240 33d5 	movw	r3, #981	@ 0x3d5
 80110e4:	4a63      	ldr	r2, [pc, #396]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80110e6:	4864      	ldr	r0, [pc, #400]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80110e8:	f001 fd54 	bl	8012b94 <iprintf>
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	4619      	mov	r1, r3
 80110f0:	4863      	ldr	r0, [pc, #396]	@ (8011280 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 80110f2:	f001 fd4f 	bl	8012b94 <iprintf>
 80110f6:	e00c      	b.n	8011112 <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 80110f8:	485d      	ldr	r0, [pc, #372]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80110fa:	f7ff f949 	bl	8010390 <DbgTraceGetFileName>
 80110fe:	4601      	mov	r1, r0
 8011100:	f240 33d9 	movw	r3, #985	@ 0x3d9
 8011104:	4a5b      	ldr	r2, [pc, #364]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011106:	485c      	ldr	r0, [pc, #368]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011108:	f001 fd44 	bl	8012b94 <iprintf>
 801110c:	485d      	ldr	r0, [pc, #372]	@ (8011284 <Ble_Hci_Gap_Gatt_Init+0x500>)
 801110e:	f001 fdb1 	bl	8012c74 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8011112:	4b5d      	ldr	r3, [pc, #372]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011114:	2201      	movs	r2, #1
 8011116:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011118:	4b5b      	ldr	r3, [pc, #364]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801111a:	781b      	ldrb	r3, [r3, #0]
 801111c:	4618      	mov	r0, r3
 801111e:	f7fd f9e0 	bl	800e4e2 <aci_gap_set_io_capability>
 8011122:	4603      	mov	r3, r0
 8011124:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8011126:	7dfb      	ldrb	r3, [r7, #23]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00f      	beq.n	801114c <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 801112c:	4850      	ldr	r0, [pc, #320]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801112e:	f7ff f92f 	bl	8010390 <DbgTraceGetFileName>
 8011132:	4601      	mov	r1, r0
 8011134:	f240 33e3 	movw	r3, #995	@ 0x3e3
 8011138:	4a4e      	ldr	r2, [pc, #312]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801113a:	484f      	ldr	r0, [pc, #316]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801113c:	f001 fd2a 	bl	8012b94 <iprintf>
 8011140:	7dfb      	ldrb	r3, [r7, #23]
 8011142:	4619      	mov	r1, r3
 8011144:	4851      	ldr	r0, [pc, #324]	@ (801128c <Ble_Hci_Gap_Gatt_Init+0x508>)
 8011146:	f001 fd25 	bl	8012b94 <iprintf>
 801114a:	e00c      	b.n	8011166 <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 801114c:	4848      	ldr	r0, [pc, #288]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801114e:	f7ff f91f 	bl	8010390 <DbgTraceGetFileName>
 8011152:	4601      	mov	r1, r0
 8011154:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8011158:	4a46      	ldr	r2, [pc, #280]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801115a:	4847      	ldr	r0, [pc, #284]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801115c:	f001 fd1a 	bl	8012b94 <iprintf>
 8011160:	484b      	ldr	r0, [pc, #300]	@ (8011290 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 8011162:	f001 fd87 	bl	8012c74 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011166:	4b48      	ldr	r3, [pc, #288]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011168:	2201      	movs	r2, #1
 801116a:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 801116c:	4b46      	ldr	r3, [pc, #280]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801116e:	2208      	movs	r2, #8
 8011170:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011172:	4b45      	ldr	r3, [pc, #276]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011174:	2210      	movs	r2, #16
 8011176:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011178:	4b43      	ldr	r3, [pc, #268]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801117a:	2200      	movs	r2, #0
 801117c:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801117e:	4b42      	ldr	r3, [pc, #264]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011180:	4a44      	ldr	r2, [pc, #272]	@ (8011294 <Ble_Hci_Gap_Gatt_Init+0x510>)
 8011182:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011184:	4b40      	ldr	r3, [pc, #256]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011186:	2200      	movs	r2, #0
 8011188:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801118a:	4b3f      	ldr	r3, [pc, #252]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801118c:	789c      	ldrb	r4, [r3, #2]
 801118e:	4b3e      	ldr	r3, [pc, #248]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011190:	785d      	ldrb	r5, [r3, #1]
 8011192:	4b3d      	ldr	r3, [pc, #244]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011194:	791b      	ldrb	r3, [r3, #4]
 8011196:	4a3c      	ldr	r2, [pc, #240]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011198:	7952      	ldrb	r2, [r2, #5]
 801119a:	493b      	ldr	r1, [pc, #236]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801119c:	78c9      	ldrb	r1, [r1, #3]
 801119e:	483a      	ldr	r0, [pc, #232]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80111a0:	6880      	ldr	r0, [r0, #8]
 80111a2:	2600      	movs	r6, #0
 80111a4:	9604      	str	r6, [sp, #16]
 80111a6:	9003      	str	r0, [sp, #12]
 80111a8:	9102      	str	r1, [sp, #8]
 80111aa:	9201      	str	r2, [sp, #4]
 80111ac:	9300      	str	r3, [sp, #0]
 80111ae:	2300      	movs	r3, #0
 80111b0:	2201      	movs	r2, #1
 80111b2:	4629      	mov	r1, r5
 80111b4:	4620      	mov	r0, r4
 80111b6:	f7fd f9e8 	bl	800e58a <aci_gap_set_authentication_requirement>
 80111ba:	4603      	mov	r3, r0
 80111bc:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80111be:	7dfb      	ldrb	r3, [r7, #23]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00f      	beq.n	80111e4 <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80111c4:	482a      	ldr	r0, [pc, #168]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80111c6:	f7ff f8e3 	bl	8010390 <DbgTraceGetFileName>
 80111ca:	4601      	mov	r1, r0
 80111cc:	f240 4302 	movw	r3, #1026	@ 0x402
 80111d0:	4a28      	ldr	r2, [pc, #160]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80111d2:	4829      	ldr	r0, [pc, #164]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80111d4:	f001 fcde 	bl	8012b94 <iprintf>
 80111d8:	7dfb      	ldrb	r3, [r7, #23]
 80111da:	4619      	mov	r1, r3
 80111dc:	482e      	ldr	r0, [pc, #184]	@ (8011298 <Ble_Hci_Gap_Gatt_Init+0x514>)
 80111de:	f001 fcd9 	bl	8012b94 <iprintf>
 80111e2:	e00c      	b.n	80111fe <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80111e4:	4822      	ldr	r0, [pc, #136]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80111e6:	f7ff f8d3 	bl	8010390 <DbgTraceGetFileName>
 80111ea:	4601      	mov	r1, r0
 80111ec:	f240 4306 	movw	r3, #1030	@ 0x406
 80111f0:	4a20      	ldr	r2, [pc, #128]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80111f2:	4821      	ldr	r0, [pc, #132]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80111f4:	f001 fcce 	bl	8012b94 <iprintf>
 80111f8:	4828      	ldr	r0, [pc, #160]	@ (801129c <Ble_Hci_Gap_Gatt_Init+0x518>)
 80111fa:	f001 fd3b 	bl	8012c74 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80111fe:	4b22      	ldr	r3, [pc, #136]	@ (8011288 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8011200:	789b      	ldrb	r3, [r3, #2]
 8011202:	2b00      	cmp	r3, #0
 8011204:	d023      	beq.n	801124e <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 8011206:	f7fd fc0a 	bl	800ea1e <aci_gap_configure_filter_accept_list>
 801120a:	4603      	mov	r3, r0
 801120c:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 801120e:	7dfb      	ldrb	r3, [r7, #23]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00f      	beq.n	8011234 <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8011214:	4816      	ldr	r0, [pc, #88]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011216:	f7ff f8bb 	bl	8010390 <DbgTraceGetFileName>
 801121a:	4601      	mov	r1, r0
 801121c:	f240 4311 	movw	r3, #1041	@ 0x411
 8011220:	4a14      	ldr	r2, [pc, #80]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011222:	4815      	ldr	r0, [pc, #84]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011224:	f001 fcb6 	bl	8012b94 <iprintf>
 8011228:	7dfb      	ldrb	r3, [r7, #23]
 801122a:	4619      	mov	r1, r3
 801122c:	481c      	ldr	r0, [pc, #112]	@ (80112a0 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 801122e:	f001 fcb1 	bl	8012b94 <iprintf>
 8011232:	e00c      	b.n	801124e <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 8011234:	480e      	ldr	r0, [pc, #56]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011236:	f7ff f8ab 	bl	8010390 <DbgTraceGetFileName>
 801123a:	4601      	mov	r1, r0
 801123c:	f240 4315 	movw	r3, #1045	@ 0x415
 8011240:	4a0c      	ldr	r2, [pc, #48]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8011242:	480d      	ldr	r0, [pc, #52]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8011244:	f001 fca6 	bl	8012b94 <iprintf>
 8011248:	4816      	ldr	r0, [pc, #88]	@ (80112a4 <Ble_Hci_Gap_Gatt_Init+0x520>)
 801124a:	f001 fd13 	bl	8012c74 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 801124e:	4808      	ldr	r0, [pc, #32]	@ (8011270 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8011250:	f7ff f89e 	bl	8010390 <DbgTraceGetFileName>
 8011254:	4601      	mov	r1, r0
 8011256:	f44f 6383 	mov.w	r3, #1048	@ 0x418
 801125a:	4a06      	ldr	r2, [pc, #24]	@ (8011274 <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801125c:	4806      	ldr	r0, [pc, #24]	@ (8011278 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801125e:	f001 fc99 	bl	8012b94 <iprintf>
 8011262:	4811      	ldr	r0, [pc, #68]	@ (80112a8 <Ble_Hci_Gap_Gatt_Init+0x524>)
 8011264:	f001 fc96 	bl	8012b94 <iprintf>
}
 8011268:	bf00      	nop
 801126a:	371c      	adds	r7, #28
 801126c:	46bd      	mov	sp, r7
 801126e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011270:	080142c4 	.word	0x080142c4
 8011274:	080156a0 	.word	0x080156a0
 8011278:	080142e0 	.word	0x080142e0
 801127c:	08014bcc 	.word	0x08014bcc
 8011280:	08014bec 	.word	0x08014bec
 8011284:	08014c28 	.word	0x08014c28
 8011288:	20000938 	.word	0x20000938
 801128c:	08014c54 	.word	0x08014c54
 8011290:	08014c94 	.word	0x08014c94
 8011294:	0001b207 	.word	0x0001b207
 8011298:	08014cc4 	.word	0x08014cc4
 801129c:	08014d10 	.word	0x08014d10
 80112a0:	08014d4c 	.word	0x08014d4c
 80112a4:	08014d8c 	.word	0x08014d8c
 80112a8:	08014dbc 	.word	0x08014dbc

080112ac <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	b08c      	sub	sp, #48	@ 0x30
 80112b0:	af08      	add	r7, sp, #32
 80112b2:	4603      	mov	r3, r0
 80112b4:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80112b6:	2392      	movs	r3, #146	@ 0x92
 80112b8:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80112ba:	4a32      	ldr	r2, [pc, #200]	@ (8011384 <Adv_Request+0xd8>)
 80112bc:	79fb      	ldrb	r3, [r7, #7]
 80112be:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80112c2:	2300      	movs	r3, #0
 80112c4:	9306      	str	r3, [sp, #24]
 80112c6:	2300      	movs	r3, #0
 80112c8:	9305      	str	r3, [sp, #20]
 80112ca:	2300      	movs	r3, #0
 80112cc:	9304      	str	r3, [sp, #16]
 80112ce:	2300      	movs	r3, #0
 80112d0:	9303      	str	r3, [sp, #12]
 80112d2:	2300      	movs	r3, #0
 80112d4:	9302      	str	r3, [sp, #8]
 80112d6:	2300      	movs	r3, #0
 80112d8:	9301      	str	r3, [sp, #4]
 80112da:	2300      	movs	r3, #0
 80112dc:	9300      	str	r3, [sp, #0]
 80112de:	2300      	movs	r3, #0
 80112e0:	22a0      	movs	r2, #160	@ 0xa0
 80112e2:	2180      	movs	r1, #128	@ 0x80
 80112e4:	2000      	movs	r0, #0
 80112e6:	f7fd f802 	bl	800e2ee <aci_gap_set_discoverable>
 80112ea:	4603      	mov	r3, r0
 80112ec:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80112ee:	7bfb      	ldrb	r3, [r7, #15]
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d00f      	beq.n	8011314 <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80112f4:	4824      	ldr	r0, [pc, #144]	@ (8011388 <Adv_Request+0xdc>)
 80112f6:	f7ff f84b 	bl	8010390 <DbgTraceGetFileName>
 80112fa:	4601      	mov	r1, r0
 80112fc:	f240 432e 	movw	r3, #1070	@ 0x42e
 8011300:	4a22      	ldr	r2, [pc, #136]	@ (801138c <Adv_Request+0xe0>)
 8011302:	4823      	ldr	r0, [pc, #140]	@ (8011390 <Adv_Request+0xe4>)
 8011304:	f001 fc46 	bl	8012b94 <iprintf>
 8011308:	7bfb      	ldrb	r3, [r7, #15]
 801130a:	4619      	mov	r1, r3
 801130c:	4821      	ldr	r0, [pc, #132]	@ (8011394 <Adv_Request+0xe8>)
 801130e:	f001 fc41 	bl	8012b94 <iprintf>
 8011312:	e00c      	b.n	801132e <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8011314:	481c      	ldr	r0, [pc, #112]	@ (8011388 <Adv_Request+0xdc>)
 8011316:	f7ff f83b 	bl	8010390 <DbgTraceGetFileName>
 801131a:	4601      	mov	r1, r0
 801131c:	f240 4332 	movw	r3, #1074	@ 0x432
 8011320:	4a1a      	ldr	r2, [pc, #104]	@ (801138c <Adv_Request+0xe0>)
 8011322:	481b      	ldr	r0, [pc, #108]	@ (8011390 <Adv_Request+0xe4>)
 8011324:	f001 fc36 	bl	8012b94 <iprintf>
 8011328:	481b      	ldr	r0, [pc, #108]	@ (8011398 <Adv_Request+0xec>)
 801132a:	f001 fca3 	bl	8012c74 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 801132e:	491b      	ldr	r1, [pc, #108]	@ (801139c <Adv_Request+0xf0>)
 8011330:	201b      	movs	r0, #27
 8011332:	f7fd fb02 	bl	800e93a <aci_gap_update_adv_data>
 8011336:	4603      	mov	r3, r0
 8011338:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 801133a:	7bfb      	ldrb	r3, [r7, #15]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d00f      	beq.n	8011360 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8011340:	4811      	ldr	r0, [pc, #68]	@ (8011388 <Adv_Request+0xdc>)
 8011342:	f7ff f825 	bl	8010390 <DbgTraceGetFileName>
 8011346:	4601      	mov	r1, r0
 8011348:	f240 433d 	movw	r3, #1085	@ 0x43d
 801134c:	4a0f      	ldr	r2, [pc, #60]	@ (801138c <Adv_Request+0xe0>)
 801134e:	4810      	ldr	r0, [pc, #64]	@ (8011390 <Adv_Request+0xe4>)
 8011350:	f001 fc20 	bl	8012b94 <iprintf>
 8011354:	7bfb      	ldrb	r3, [r7, #15]
 8011356:	4619      	mov	r1, r3
 8011358:	4811      	ldr	r0, [pc, #68]	@ (80113a0 <Adv_Request+0xf4>)
 801135a:	f001 fc1b 	bl	8012b94 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 801135e:	e00d      	b.n	801137c <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8011360:	4809      	ldr	r0, [pc, #36]	@ (8011388 <Adv_Request+0xdc>)
 8011362:	f7ff f815 	bl	8010390 <DbgTraceGetFileName>
 8011366:	4601      	mov	r1, r0
 8011368:	f240 4341 	movw	r3, #1089	@ 0x441
 801136c:	4a07      	ldr	r2, [pc, #28]	@ (801138c <Adv_Request+0xe0>)
 801136e:	4808      	ldr	r0, [pc, #32]	@ (8011390 <Adv_Request+0xe4>)
 8011370:	f001 fc10 	bl	8012b94 <iprintf>
 8011374:	480b      	ldr	r0, [pc, #44]	@ (80113a4 <Adv_Request+0xf8>)
 8011376:	f001 fc0d 	bl	8012b94 <iprintf>
  return;
 801137a:	bf00      	nop
}
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}
 8011382:	bf00      	nop
 8011384:	20000938 	.word	0x20000938
 8011388:	080142c4 	.word	0x080142c4
 801138c:	080156b8 	.word	0x080156b8
 8011390:	080142e0 	.word	0x080142e0
 8011394:	08014de8 	.word	0x08014de8
 8011398:	08014e20 	.word	0x08014e20
 801139c:	200000e8 	.word	0x200000e8
 80113a0:	08014e48 	.word	0x08014e48
 80113a4:	08014e7c 	.word	0x08014e7c

080113a8 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b086      	sub	sp, #24
 80113ac:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80113ae:	f7ff f8fd 	bl	80105ac <LL_FLASH_GetUDN>
 80113b2:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80113b4:	693b      	ldr	r3, [r7, #16]
 80113b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113ba:	d023      	beq.n	8011404 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80113bc:	f7ff f90e 	bl	80105dc <LL_FLASH_GetSTCompanyID>
 80113c0:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80113c2:	f7ff f8ff 	bl	80105c4 <LL_FLASH_GetDeviceID>
 80113c6:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	b2da      	uxtb	r2, r3
 80113cc:	4b16      	ldr	r3, [pc, #88]	@ (8011428 <BleGetBdAddress+0x80>)
 80113ce:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	0a1b      	lsrs	r3, r3, #8
 80113d4:	b2da      	uxtb	r2, r3
 80113d6:	4b14      	ldr	r3, [pc, #80]	@ (8011428 <BleGetBdAddress+0x80>)
 80113d8:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	4b12      	ldr	r3, [pc, #72]	@ (8011428 <BleGetBdAddress+0x80>)
 80113e0:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	b2da      	uxtb	r2, r3
 80113e6:	4b10      	ldr	r3, [pc, #64]	@ (8011428 <BleGetBdAddress+0x80>)
 80113e8:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80113ea:	68bb      	ldr	r3, [r7, #8]
 80113ec:	0a1b      	lsrs	r3, r3, #8
 80113ee:	b2da      	uxtb	r2, r3
 80113f0:	4b0d      	ldr	r3, [pc, #52]	@ (8011428 <BleGetBdAddress+0x80>)
 80113f2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	0c1b      	lsrs	r3, r3, #16
 80113f8:	b2da      	uxtb	r2, r3
 80113fa:	4b0b      	ldr	r3, [pc, #44]	@ (8011428 <BleGetBdAddress+0x80>)
 80113fc:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80113fe:	4b0a      	ldr	r3, [pc, #40]	@ (8011428 <BleGetBdAddress+0x80>)
 8011400:	617b      	str	r3, [r7, #20]
 8011402:	e00b      	b.n	801141c <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8011404:	2000      	movs	r0, #0
 8011406:	f7fe ffeb 	bl	80103e0 <OTP_Read>
 801140a:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	617b      	str	r3, [r7, #20]
 8011416:	e001      	b.n	801141c <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8011418:	4b04      	ldr	r3, [pc, #16]	@ (801142c <BleGetBdAddress+0x84>)
 801141a:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 801141c:	697b      	ldr	r3, [r7, #20]
}
 801141e:	4618      	mov	r0, r3
 8011420:	3718      	adds	r7, #24
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	20000930 	.word	0x20000930
 801142c:	08015650 	.word	0x08015650

08011430 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8011436:	4b1f      	ldr	r3, [pc, #124]	@ (80114b4 <Adv_Cancel+0x84>)
 8011438:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801143c:	2b05      	cmp	r3, #5
 801143e:	d035      	beq.n	80114ac <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011440:	2392      	movs	r3, #146	@ 0x92
 8011442:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8011444:	f7fc ff2f 	bl	800e2a6 <aci_gap_set_non_discoverable>
 8011448:	4603      	mov	r3, r0
 801144a:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 801144c:	4b19      	ldr	r3, [pc, #100]	@ (80114b4 <Adv_Cancel+0x84>)
 801144e:	2200      	movs	r2, #0
 8011450:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8011454:	79fb      	ldrb	r3, [r7, #7]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d00d      	beq.n	8011476 <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 801145a:	4817      	ldr	r0, [pc, #92]	@ (80114b8 <Adv_Cancel+0x88>)
 801145c:	f7fe ff98 	bl	8010390 <DbgTraceGetFileName>
 8011460:	4601      	mov	r1, r0
 8011462:	f240 438f 	movw	r3, #1167	@ 0x48f
 8011466:	4a15      	ldr	r2, [pc, #84]	@ (80114bc <Adv_Cancel+0x8c>)
 8011468:	4815      	ldr	r0, [pc, #84]	@ (80114c0 <Adv_Cancel+0x90>)
 801146a:	f001 fb93 	bl	8012b94 <iprintf>
 801146e:	4815      	ldr	r0, [pc, #84]	@ (80114c4 <Adv_Cancel+0x94>)
 8011470:	f001 fb90 	bl	8012b94 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8011474:	e01a      	b.n	80114ac <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8011476:	4810      	ldr	r0, [pc, #64]	@ (80114b8 <Adv_Cancel+0x88>)
 8011478:	f7fe ff8a 	bl	8010390 <DbgTraceGetFileName>
 801147c:	4601      	mov	r1, r0
 801147e:	f240 4393 	movw	r3, #1171	@ 0x493
 8011482:	4a0e      	ldr	r2, [pc, #56]	@ (80114bc <Adv_Cancel+0x8c>)
 8011484:	480e      	ldr	r0, [pc, #56]	@ (80114c0 <Adv_Cancel+0x90>)
 8011486:	f001 fb85 	bl	8012b94 <iprintf>
 801148a:	480f      	ldr	r0, [pc, #60]	@ (80114c8 <Adv_Cancel+0x98>)
 801148c:	f001 fb82 	bl	8012b94 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8011490:	4809      	ldr	r0, [pc, #36]	@ (80114b8 <Adv_Cancel+0x88>)
 8011492:	f7fe ff7d 	bl	8010390 <DbgTraceGetFileName>
 8011496:	4601      	mov	r1, r0
 8011498:	f240 4394 	movw	r3, #1172	@ 0x494
 801149c:	4a07      	ldr	r2, [pc, #28]	@ (80114bc <Adv_Cancel+0x8c>)
 801149e:	4808      	ldr	r0, [pc, #32]	@ (80114c0 <Adv_Cancel+0x90>)
 80114a0:	f001 fb78 	bl	8012b94 <iprintf>
 80114a4:	4809      	ldr	r0, [pc, #36]	@ (80114cc <Adv_Cancel+0x9c>)
 80114a6:	f001 fb75 	bl	8012b94 <iprintf>
  return;
 80114aa:	bf00      	nop
 80114ac:	bf00      	nop
}
 80114ae:	3708      	adds	r7, #8
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	20000938 	.word	0x20000938
 80114b8:	080142c4 	.word	0x080142c4
 80114bc:	080156c4 	.word	0x080156c4
 80114c0:	080142e0 	.word	0x080142e0
 80114c4:	08014ea4 	.word	0x08014ea4
 80114c8:	08014ec8 	.word	0x08014ec8
 80114cc:	08014ed0 	.word	0x08014ed0

080114d0 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b082      	sub	sp, #8
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80114d8:	2100      	movs	r1, #0
 80114da:	2002      	movs	r0, #2
 80114dc:	f001 f97c 	bl	80127d8 <UTIL_SEQ_SetTask>

  return;
 80114e0:	bf00      	nop
}
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b082      	sub	sp, #8
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80114f0:	2001      	movs	r0, #1
 80114f2:	f001 f9dd 	bl	80128b0 <UTIL_SEQ_SetEvt>

  return;
 80114f6:	bf00      	nop
}
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b082      	sub	sp, #8
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8011506:	2001      	movs	r0, #1
 8011508:	f001 f9f2 	bl	80128f0 <UTIL_SEQ_WaitEvt>

  return;
 801150c:	bf00      	nop
}
 801150e:	3708      	adds	r7, #8
 8011510:	46bd      	mov	sp, r7
 8011512:	bd80      	pop	{r7, pc}

08011514 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	685b      	ldr	r3, [r3, #4]
 8011524:	3308      	adds	r3, #8
 8011526:	4618      	mov	r0, r3
 8011528:	f7fe f8d0 	bl	800f6cc <SVCCTL_UserEvtRx>
 801152c:	4603      	mov	r3, r0
 801152e:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011530:	7afb      	ldrb	r3, [r7, #11]
 8011532:	2b00      	cmp	r3, #0
 8011534:	d003      	beq.n	801153e <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2201      	movs	r2, #1
 801153a:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 801153c:	e003      	b.n	8011546 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2200      	movs	r2, #0
 8011542:	701a      	strb	r2, [r3, #0]
  return;
 8011544:	bf00      	nop
}
 8011546:	3710      	adds	r7, #16
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b084      	sub	sp, #16
 8011550:	af00      	add	r7, sp, #0
 8011552:	4603      	mov	r3, r0
 8011554:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8011556:	79fb      	ldrb	r3, [r7, #7]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d002      	beq.n	8011562 <BLE_StatusNot+0x16>
 801155c:	2b01      	cmp	r3, #1
 801155e:	d006      	beq.n	801156e <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8011560:	e00b      	b.n	801157a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8011562:	2307      	movs	r3, #7
 8011564:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8011566:	68f8      	ldr	r0, [r7, #12]
 8011568:	f001 f962 	bl	8012830 <UTIL_SEQ_PauseTask>
      break;
 801156c:	e005      	b.n	801157a <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801156e:	2307      	movs	r3, #7
 8011570:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8011572:	68f8      	ldr	r0, [r7, #12]
 8011574:	f001 f97c 	bl	8012870 <UTIL_SEQ_ResumeTask>
      break;
 8011578:	bf00      	nop
  }

  return;
 801157a:	bf00      	nop
}
 801157c:	3710      	adds	r7, #16
 801157e:	46bd      	mov	sp, r7
 8011580:	bd80      	pop	{r7, pc}
	...

08011584 <Custom_STM_App_Notification>:
static void Custom_Appli_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(
		Custom_STM_App_Notification_evt_t *pNotification) {
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

	/* USER CODE END CUSTOM_STM_App_Notification_1 */
	switch (pNotification->Custom_Evt_Opcode) {
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	781b      	ldrb	r3, [r3, #0]
 8011590:	2b04      	cmp	r3, #4
 8011592:	d822      	bhi.n	80115da <Custom_STM_App_Notification+0x56>
 8011594:	a201      	add	r2, pc, #4	@ (adr r2, 801159c <Custom_STM_App_Notification+0x18>)
 8011596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159a:	bf00      	nop
 801159c:	080115b1 	.word	0x080115b1
 80115a0:	080115bd 	.word	0x080115bd
 80115a4:	080115db 	.word	0x080115db
 80115a8:	080115c5 	.word	0x080115c5
 80115ac:	080115db 	.word	0x080115db
	/* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

	/* Mvt_def */
	case CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT:
		/* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
		Custom_App_Context.Mvt_rep_Notification_Status = 1;
 80115b0:	4b0c      	ldr	r3, [pc, #48]	@ (80115e4 <Custom_STM_App_Notification+0x60>)
 80115b2:	2201      	movs	r2, #1
 80115b4:	701a      	strb	r2, [r3, #0]
		Custom_Mvt_rep_Send_Notification();
 80115b6:	f000 f8fb 	bl	80117b0 <Custom_Mvt_rep_Send_Notification>
		/* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
		break;
 80115ba:	e00f      	b.n	80115dc <Custom_STM_App_Notification+0x58>

	case CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT:
		/* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
		Custom_App_Context.Mvt_rep_Notification_Status = 0;
 80115bc:	4b09      	ldr	r3, [pc, #36]	@ (80115e4 <Custom_STM_App_Notification+0x60>)
 80115be:	2200      	movs	r2, #0
 80115c0:	701a      	strb	r2, [r3, #0]
		/* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
		break;
 80115c2:	e00b      	b.n	80115dc <Custom_STM_App_Notification+0x58>
		/* USER CODE END CUSTOM_STM_APPEL_APP_READ_EVT */
		break;

	case CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT:
		/* USER CODE BEGIN CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
		memcpy(UpdateCharData, pNotification->DataTransfered.pPayload,
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	6859      	ldr	r1, [r3, #4]
				pNotification->DataTransfered.Length);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	7a1b      	ldrb	r3, [r3, #8]
		memcpy(UpdateCharData, pNotification->DataTransfered.pPayload,
 80115cc:	461a      	mov	r2, r3
 80115ce:	4806      	ldr	r0, [pc, #24]	@ (80115e8 <Custom_STM_App_Notification+0x64>)
 80115d0:	f001 fcc1 	bl	8012f56 <memcpy>
		Custom_Appli_Update_Char();
 80115d4:	f000 fadc 	bl	8011b90 <Custom_Appli_Update_Char>
		/* USER CODE END CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
		break;
 80115d8:	e000      	b.n	80115dc <Custom_STM_App_Notification+0x58>

	default:
		/* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

		/* USER CODE END CUSTOM_STM_App_Notification_default */
		break;
 80115da:	bf00      	nop
	}
	/* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

	/* USER CODE END CUSTOM_STM_App_Notification_2 */
	return;
 80115dc:	bf00      	nop
}
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	200009c0 	.word	0x200009c0
 80115e8:	200009c4 	.word	0x200009c4

080115ec <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification) {
 80115ec:	b480      	push	{r7}
 80115ee:	b083      	sub	sp, #12
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

	/* USER CODE END CUSTOM_APP_Notification_1 */

	switch (pNotification->Custom_Evt_Opcode) {
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	781b      	ldrb	r3, [r3, #0]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d002      	beq.n	8011602 <Custom_APP_Notification+0x16>
 80115fc:	2b01      	cmp	r3, #1
 80115fe:	d002      	beq.n	8011606 <Custom_APP_Notification+0x1a>

	default:
		/* USER CODE BEGIN CUSTOM_APP_Notification_default */

		/* USER CODE END CUSTOM_APP_Notification_default */
		break;
 8011600:	e002      	b.n	8011608 <Custom_APP_Notification+0x1c>
		break;
 8011602:	bf00      	nop
 8011604:	e000      	b.n	8011608 <Custom_APP_Notification+0x1c>
		break;
 8011606:	bf00      	nop

	/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

	/* USER CODE END CUSTOM_APP_Notification_2 */

	return;
 8011608:	bf00      	nop
}
 801160a:	370c      	adds	r7, #12
 801160c:	46bd      	mov	sp, r7
 801160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011612:	4770      	bx	lr

08011614 <Custom_APP_Init>:

void Custom_APP_Init(void) {
 8011614:	b580      	push	{r7, lr}
 8011616:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.rep_status = 0;
 8011618:	4b05      	ldr	r3, [pc, #20]	@ (8011630 <Custom_APP_Init+0x1c>)
 801161a:	2200      	movs	r2, #0
 801161c:	705a      	strb	r2, [r3, #1]

	UTIL_SEQ_RegTask(1 << CFG_TASK_ACC_rep_ID, UTIL_SEQ_RFU,
 801161e:	4a05      	ldr	r2, [pc, #20]	@ (8011634 <Custom_APP_Init+0x20>)
 8011620:	2100      	movs	r1, #0
 8011622:	2004      	movs	r0, #4
 8011624:	f001 f8b6 	bl	8012794 <UTIL_SEQ_RegTask>
			Custom_Mvt_rep_Send_Notification);

	Custom_Mvt_rep_Update_Char();
 8011628:	f000 f8ae 	bl	8011788 <Custom_Mvt_rep_Update_Char>

	/* USER CODE END CUSTOM_APP_Init */
	return;
 801162c:	bf00      	nop
}
 801162e:	bd80      	pop	{r7, pc}
 8011630:	200009c0 	.word	0x200009c0
 8011634:	080117b1 	.word	0x080117b1

08011638 <FSVC_MVT_REF_fin>:

/* USER CODE BEGIN FD */
void FSVC_MVT_REF_fin(void) {
 8011638:	b580      	push	{r7, lr}
 801163a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 801163c:	2100      	movs	r1, #0
 801163e:	2004      	movs	r0, #4
 8011640:	f001 f8ca 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 1;
 8011644:	4b02      	ldr	r3, [pc, #8]	@ (8011650 <FSVC_MVT_REF_fin+0x18>)
 8011646:	2201      	movs	r2, #1
 8011648:	705a      	strb	r2, [r3, #1]

	return;
 801164a:	bf00      	nop
}
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	200009c0 	.word	0x200009c0

08011654 <FSVC_MVT_REF_vide>:
void FSVC_MVT_REF_vide(void) {
 8011654:	b580      	push	{r7, lr}
 8011656:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011658:	2100      	movs	r1, #0
 801165a:	2004      	movs	r0, #4
 801165c:	f001 f8bc 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 2;
 8011660:	4b02      	ldr	r3, [pc, #8]	@ (801166c <FSVC_MVT_REF_vide+0x18>)
 8011662:	2202      	movs	r2, #2
 8011664:	705a      	strb	r2, [r3, #1]

	return;
 8011666:	bf00      	nop
}
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	200009c0 	.word	0x200009c0

08011670 <FSVC_MVT_REF_validation_succes>:
void FSVC_MVT_REF_validation_succes(void) {
 8011670:	b580      	push	{r7, lr}
 8011672:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011674:	2100      	movs	r1, #0
 8011676:	2004      	movs	r0, #4
 8011678:	f001 f8ae 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 3;
 801167c:	4b02      	ldr	r3, [pc, #8]	@ (8011688 <FSVC_MVT_REF_validation_succes+0x18>)
 801167e:	2203      	movs	r2, #3
 8011680:	705a      	strb	r2, [r3, #1]

	return;
 8011682:	bf00      	nop
}
 8011684:	bd80      	pop	{r7, pc}
 8011686:	bf00      	nop
 8011688:	200009c0 	.word	0x200009c0

0801168c <FSVC_MVT_REF_validation_fail>:
void FSVC_MVT_REF_validation_fail(void) {
 801168c:	b580      	push	{r7, lr}
 801168e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011690:	2100      	movs	r1, #0
 8011692:	2004      	movs	r0, #4
 8011694:	f001 f8a0 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 4;
 8011698:	4b02      	ldr	r3, [pc, #8]	@ (80116a4 <FSVC_MVT_REF_validation_fail+0x18>)
 801169a:	2204      	movs	r2, #4
 801169c:	705a      	strb	r2, [r3, #1]

	return;
 801169e:	bf00      	nop
}
 80116a0:	bd80      	pop	{r7, pc}
 80116a2:	bf00      	nop
 80116a4:	200009c0 	.word	0x200009c0

080116a8 <FSVC_MVT_REF_validation_vide>:
void FSVC_MVT_REF_validation_vide(void) {
 80116a8:	b580      	push	{r7, lr}
 80116aa:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80116ac:	2100      	movs	r1, #0
 80116ae:	2004      	movs	r0, #4
 80116b0:	f001 f892 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 5;
 80116b4:	4b02      	ldr	r3, [pc, #8]	@ (80116c0 <FSVC_MVT_REF_validation_vide+0x18>)
 80116b6:	2205      	movs	r2, #5
 80116b8:	705a      	strb	r2, [r3, #1]

	return;
 80116ba:	bf00      	nop
}
 80116bc:	bd80      	pop	{r7, pc}
 80116be:	bf00      	nop
 80116c0:	200009c0 	.word	0x200009c0

080116c4 <FSVC_MVT_vide>:
void FSVC_MVT_vide(void) {
 80116c4:	b580      	push	{r7, lr}
 80116c6:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80116c8:	2100      	movs	r1, #0
 80116ca:	2004      	movs	r0, #4
 80116cc:	f001 f884 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 6;
 80116d0:	4b02      	ldr	r3, [pc, #8]	@ (80116dc <FSVC_MVT_vide+0x18>)
 80116d2:	2206      	movs	r2, #6
 80116d4:	705a      	strb	r2, [r3, #1]

	return;
 80116d6:	bf00      	nop
}
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	200009c0 	.word	0x200009c0

080116e0 <FSVC_MVT_BRAS_GAUCHE_valide>:

void FSVC_MVT_BRAS_GAUCHE_valide(void) {
 80116e0:	b580      	push	{r7, lr}
 80116e2:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 80116e4:	2100      	movs	r1, #0
 80116e6:	2004      	movs	r0, #4
 80116e8:	f001 f876 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 7;
 80116ec:	4b02      	ldr	r3, [pc, #8]	@ (80116f8 <FSVC_MVT_BRAS_GAUCHE_valide+0x18>)
 80116ee:	2207      	movs	r2, #7
 80116f0:	705a      	strb	r2, [r3, #1]

	return;
 80116f2:	bf00      	nop
}
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200009c0 	.word	0x200009c0

080116fc <FSVC_MVT_BRAS_DROIT_valide>:
void FSVC_MVT_BRAS_DROIT_valide(void) {
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011700:	2100      	movs	r1, #0
 8011702:	2004      	movs	r0, #4
 8011704:	f001 f868 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 8;
 8011708:	4b02      	ldr	r3, [pc, #8]	@ (8011714 <FSVC_MVT_BRAS_DROIT_valide+0x18>)
 801170a:	2208      	movs	r2, #8
 801170c:	705a      	strb	r2, [r3, #1]

	return;
 801170e:	bf00      	nop
}
 8011710:	bd80      	pop	{r7, pc}
 8011712:	bf00      	nop
 8011714:	200009c0 	.word	0x200009c0

08011718 <FSVC_MVT_BRAS_CORRECT_valide>:
void FSVC_MVT_BRAS_CORRECT_valide(void) {
 8011718:	b580      	push	{r7, lr}
 801171a:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 801171c:	2100      	movs	r1, #0
 801171e:	2004      	movs	r0, #4
 8011720:	f001 f85a 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 9;
 8011724:	4b02      	ldr	r3, [pc, #8]	@ (8011730 <FSVC_MVT_BRAS_CORRECT_valide+0x18>)
 8011726:	2209      	movs	r2, #9
 8011728:	705a      	strb	r2, [r3, #1]

	return;
 801172a:	bf00      	nop
}
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	200009c0 	.word	0x200009c0

08011734 <FSVC_MVT_BRAS_GAUCHE_non_valide>:
void FSVC_MVT_BRAS_GAUCHE_non_valide(void) {
 8011734:	b580      	push	{r7, lr}
 8011736:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011738:	2100      	movs	r1, #0
 801173a:	2004      	movs	r0, #4
 801173c:	f001 f84c 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 10;
 8011740:	4b02      	ldr	r3, [pc, #8]	@ (801174c <FSVC_MVT_BRAS_GAUCHE_non_valide+0x18>)
 8011742:	220a      	movs	r2, #10
 8011744:	705a      	strb	r2, [r3, #1]

	return;
 8011746:	bf00      	nop
}
 8011748:	bd80      	pop	{r7, pc}
 801174a:	bf00      	nop
 801174c:	200009c0 	.word	0x200009c0

08011750 <FSVC_MVT_BRAS_DROIT_non_valide>:
void FSVC_MVT_BRAS_DROIT_non_valide(void) {
 8011750:	b580      	push	{r7, lr}
 8011752:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011754:	2100      	movs	r1, #0
 8011756:	2004      	movs	r0, #4
 8011758:	f001 f83e 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 11;
 801175c:	4b02      	ldr	r3, [pc, #8]	@ (8011768 <FSVC_MVT_BRAS_DROIT_non_valide+0x18>)
 801175e:	220b      	movs	r2, #11
 8011760:	705a      	strb	r2, [r3, #1]

	return;
 8011762:	bf00      	nop
}
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	200009c0 	.word	0x200009c0

0801176c <FSVC_MVT_BRAS_CORRECT_non_valide>:
void FSVC_MVT_BRAS_CORRECT_non_valide(void) {
 801176c:	b580      	push	{r7, lr}
 801176e:	af00      	add	r7, sp, #0
	UTIL_SEQ_SetTask(1 << CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8011770:	2100      	movs	r1, #0
 8011772:	2004      	movs	r0, #4
 8011774:	f001 f830 	bl	80127d8 <UTIL_SEQ_SetTask>
	Custom_App_Context.rep_status = 12;
 8011778:	4b02      	ldr	r3, [pc, #8]	@ (8011784 <FSVC_MVT_BRAS_CORRECT_non_valide+0x18>)
 801177a:	220c      	movs	r2, #12
 801177c:	705a      	strb	r2, [r3, #1]

	return;
 801177e:	bf00      	nop
}
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	200009c0 	.word	0x200009c0

08011788 <Custom_Mvt_rep_Update_Char>:
 *
 *************************************************************/

/* Mvt_def */
void Custom_Mvt_rep_Update_Char(void) /* Property Read */
{
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
	uint8_t updateflag = 0;
 801178e:	2300      	movs	r3, #0
 8011790:	71fb      	strb	r3, [r7, #7]

	/* USER CODE BEGIN Mvt_rep_UC_1*/

	/* USER CODE END Mvt_rep_UC_1*/

	if (updateflag != 0) {
 8011792:	79fb      	ldrb	r3, [r7, #7]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d004      	beq.n	80117a2 <Custom_Mvt_rep_Update_Char+0x1a>
		Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP,
 8011798:	4904      	ldr	r1, [pc, #16]	@ (80117ac <Custom_Mvt_rep_Update_Char+0x24>)
 801179a:	2000      	movs	r0, #0
 801179c:	f000 fbdc 	bl	8011f58 <Custom_STM_App_Update_Char>
	}

	/* USER CODE BEGIN Mvt_rep_UC_Last*/

	/* USER CODE END Mvt_rep_UC_Last*/
	return;
 80117a0:	bf00      	nop
 80117a2:	bf00      	nop
}
 80117a4:	3708      	adds	r7, #8
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	200009c4 	.word	0x200009c4

080117b0 <Custom_Mvt_rep_Send_Notification>:

void Custom_Mvt_rep_Send_Notification(void) /* Property Notification */
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b098      	sub	sp, #96	@ 0x60
 80117b4:	af00      	add	r7, sp, #0
	uint8_t updateflag = 0;
 80117b6:	2300      	movs	r3, #0
 80117b8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	/* USER CODE BEGIN Mvt_rep_NS_1*/
	if (Custom_App_Context.Mvt_rep_Notification_Status == 1) {
 80117bc:	4bb9      	ldr	r3, [pc, #740]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	f040 81bb 	bne.w	8011b3c <Custom_Mvt_rep_Send_Notification+0x38c>
		updateflag = 1;
 80117c6:	2301      	movs	r3, #1
 80117c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

		if (Custom_App_Context.rep_status == 1) {
 80117cc:	4bb5      	ldr	r3, [pc, #724]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 80117ce:	785b      	ldrb	r3, [r3, #1]
 80117d0:	2b01      	cmp	r3, #1
 80117d2:	d11c      	bne.n	801180e <Custom_Mvt_rep_Send_Notification+0x5e>

			char rep_ref_fin[] = "finr";
 80117d4:	4ab4      	ldr	r2, [pc, #720]	@ (8011aa8 <Custom_Mvt_rep_Send_Notification+0x2f8>)
 80117d6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80117da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117de:	6018      	str	r0, [r3, #0]
 80117e0:	3304      	adds	r3, #4
 80117e2:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &rep_ref_fin, sizeof(rep_ref_fin));
 80117e4:	4bb1      	ldr	r3, [pc, #708]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 80117e6:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80117ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80117ee:	6018      	str	r0, [r3, #0]
 80117f0:	3304      	adds	r3, #4
 80117f2:	7019      	strb	r1, [r3, #0]
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_fin good \n")
 80117f4:	48ae      	ldr	r0, [pc, #696]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 80117f6:	f7fe fdcb 	bl	8010390 <DbgTraceGetFileName>
 80117fa:	4601      	mov	r1, r0
 80117fc:	f44f 739a 	mov.w	r3, #308	@ 0x134
 8011800:	4aac      	ldr	r2, [pc, #688]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011802:	48ad      	ldr	r0, [pc, #692]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011804:	f001 f9c6 	bl	8012b94 <iprintf>
 8011808:	48ac      	ldr	r0, [pc, #688]	@ (8011abc <Custom_Mvt_rep_Send_Notification+0x30c>)
 801180a:	f001 fa33 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 2) {
 801180e:	4ba5      	ldr	r3, [pc, #660]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011810:	785b      	ldrb	r3, [r3, #1]
 8011812:	2b02      	cmp	r3, #2
 8011814:	d11c      	bne.n	8011850 <Custom_Mvt_rep_Send_Notification+0xa0>

			char rep_ref_vide[] = "refv";
 8011816:	4aaa      	ldr	r2, [pc, #680]	@ (8011ac0 <Custom_Mvt_rep_Send_Notification+0x310>)
 8011818:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801181c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011820:	6018      	str	r0, [r3, #0]
 8011822:	3304      	adds	r3, #4
 8011824:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &rep_ref_vide, sizeof(rep_ref_vide));
 8011826:	4ba1      	ldr	r3, [pc, #644]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 8011828:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 801182c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011830:	6018      	str	r0, [r3, #0]
 8011832:	3304      	adds	r3, #4
 8011834:	7019      	strb	r1, [r3, #0]
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n")
 8011836:	489e      	ldr	r0, [pc, #632]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011838:	f7fe fdaa 	bl	8010390 <DbgTraceGetFileName>
 801183c:	4601      	mov	r1, r0
 801183e:	f240 133b 	movw	r3, #315	@ 0x13b
 8011842:	4a9c      	ldr	r2, [pc, #624]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011844:	489c      	ldr	r0, [pc, #624]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011846:	f001 f9a5 	bl	8012b94 <iprintf>
 801184a:	489e      	ldr	r0, [pc, #632]	@ (8011ac4 <Custom_Mvt_rep_Send_Notification+0x314>)
 801184c:	f001 fa12 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 3) {
 8011850:	4b94      	ldr	r3, [pc, #592]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011852:	785b      	ldrb	r3, [r3, #1]
 8011854:	2b03      	cmp	r3, #3
 8011856:	d11c      	bne.n	8011892 <Custom_Mvt_rep_Send_Notification+0xe2>

			char validation_succes[] = "vals";
 8011858:	4a9b      	ldr	r2, [pc, #620]	@ (8011ac8 <Custom_Mvt_rep_Send_Notification+0x318>)
 801185a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 801185e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011862:	6018      	str	r0, [r3, #0]
 8011864:	3304      	adds	r3, #4
 8011866:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &validation_succes,
 8011868:	4b90      	ldr	r3, [pc, #576]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 801186a:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 801186e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011872:	6018      	str	r0, [r3, #0]
 8011874:	3304      	adds	r3, #4
 8011876:	7019      	strb	r1, [r3, #0]
					sizeof(validation_succes));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 8011878:	488d      	ldr	r0, [pc, #564]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 801187a:	f7fe fd89 	bl	8010390 <DbgTraceGetFileName>
 801187e:	4601      	mov	r1, r0
 8011880:	f240 1343 	movw	r3, #323	@ 0x143
 8011884:	4a8b      	ldr	r2, [pc, #556]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011886:	488c      	ldr	r0, [pc, #560]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011888:	f001 f984 	bl	8012b94 <iprintf>
 801188c:	488f      	ldr	r0, [pc, #572]	@ (8011acc <Custom_Mvt_rep_Send_Notification+0x31c>)
 801188e:	f001 f9f1 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 4) {
 8011892:	4b84      	ldr	r3, [pc, #528]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011894:	785b      	ldrb	r3, [r3, #1]
 8011896:	2b04      	cmp	r3, #4
 8011898:	d11c      	bne.n	80118d4 <Custom_Mvt_rep_Send_Notification+0x124>

			char validation_fail[] = "valf";
 801189a:	4a8d      	ldr	r2, [pc, #564]	@ (8011ad0 <Custom_Mvt_rep_Send_Notification+0x320>)
 801189c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80118a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118a4:	6018      	str	r0, [r3, #0]
 80118a6:	3304      	adds	r3, #4
 80118a8:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &validation_fail,
 80118aa:	4b80      	ldr	r3, [pc, #512]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 80118ac:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80118b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118b4:	6018      	str	r0, [r3, #0]
 80118b6:	3304      	adds	r3, #4
 80118b8:	7019      	strb	r1, [r3, #0]
					sizeof(validation_fail));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_fail good \n")
 80118ba:	487d      	ldr	r0, [pc, #500]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 80118bc:	f7fe fd68 	bl	8010390 <DbgTraceGetFileName>
 80118c0:	4601      	mov	r1, r0
 80118c2:	f240 134b 	movw	r3, #331	@ 0x14b
 80118c6:	4a7b      	ldr	r2, [pc, #492]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 80118c8:	487b      	ldr	r0, [pc, #492]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 80118ca:	f001 f963 	bl	8012b94 <iprintf>
 80118ce:	4881      	ldr	r0, [pc, #516]	@ (8011ad4 <Custom_Mvt_rep_Send_Notification+0x324>)
 80118d0:	f001 f9d0 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 5) {
 80118d4:	4b73      	ldr	r3, [pc, #460]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 80118d6:	785b      	ldrb	r3, [r3, #1]
 80118d8:	2b05      	cmp	r3, #5
 80118da:	d11c      	bne.n	8011916 <Custom_Mvt_rep_Send_Notification+0x166>

			char validation_vide[] = "valv";
 80118dc:	4a7e      	ldr	r2, [pc, #504]	@ (8011ad8 <Custom_Mvt_rep_Send_Notification+0x328>)
 80118de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80118e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118e6:	6018      	str	r0, [r3, #0]
 80118e8:	3304      	adds	r3, #4
 80118ea:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &validation_vide,
 80118ec:	4b6f      	ldr	r3, [pc, #444]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 80118ee:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80118f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80118f6:	6018      	str	r0, [r3, #0]
 80118f8:	3304      	adds	r3, #4
 80118fa:	7019      	strb	r1, [r3, #0]
					sizeof(validation_vide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_vide good \n")
 80118fc:	486c      	ldr	r0, [pc, #432]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 80118fe:	f7fe fd47 	bl	8010390 <DbgTraceGetFileName>
 8011902:	4601      	mov	r1, r0
 8011904:	f240 1353 	movw	r3, #339	@ 0x153
 8011908:	4a6a      	ldr	r2, [pc, #424]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 801190a:	486b      	ldr	r0, [pc, #428]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 801190c:	f001 f942 	bl	8012b94 <iprintf>
 8011910:	4872      	ldr	r0, [pc, #456]	@ (8011adc <Custom_Mvt_rep_Send_Notification+0x32c>)
 8011912:	f001 f9af 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 6) {
 8011916:	4b63      	ldr	r3, [pc, #396]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011918:	785b      	ldrb	r3, [r3, #1]
 801191a:	2b06      	cmp	r3, #6
 801191c:	d11c      	bne.n	8011958 <Custom_Mvt_rep_Send_Notification+0x1a8>

			char rep_vide[] = "repv";
 801191e:	4a70      	ldr	r2, [pc, #448]	@ (8011ae0 <Custom_Mvt_rep_Send_Notification+0x330>)
 8011920:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8011924:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011928:	6018      	str	r0, [r3, #0]
 801192a:	3304      	adds	r3, #4
 801192c:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &rep_vide, sizeof(rep_vide));
 801192e:	4b5f      	ldr	r3, [pc, #380]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 8011930:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011934:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011938:	6018      	str	r0, [r3, #0]
 801193a:	3304      	adds	r3, #4
 801193c:	7019      	strb	r1, [r3, #0]
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_vide good \n")
 801193e:	485c      	ldr	r0, [pc, #368]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011940:	f7fe fd26 	bl	8010390 <DbgTraceGetFileName>
 8011944:	4601      	mov	r1, r0
 8011946:	f44f 73ad 	mov.w	r3, #346	@ 0x15a
 801194a:	4a5a      	ldr	r2, [pc, #360]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 801194c:	485a      	ldr	r0, [pc, #360]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 801194e:	f001 f921 	bl	8012b94 <iprintf>
 8011952:	4864      	ldr	r0, [pc, #400]	@ (8011ae4 <Custom_Mvt_rep_Send_Notification+0x334>)
 8011954:	f001 f98e 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 7) {
 8011958:	4b52      	ldr	r3, [pc, #328]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 801195a:	785b      	ldrb	r3, [r3, #1]
 801195c:	2b07      	cmp	r3, #7
 801195e:	d11c      	bne.n	801199a <Custom_Mvt_rep_Send_Notification+0x1ea>

			char BRAS_GAUCHE_valide[] = "Gval";
 8011960:	4a61      	ldr	r2, [pc, #388]	@ (8011ae8 <Custom_Mvt_rep_Send_Notification+0x338>)
 8011962:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8011966:	e892 0003 	ldmia.w	r2, {r0, r1}
 801196a:	6018      	str	r0, [r3, #0]
 801196c:	3304      	adds	r3, #4
 801196e:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_GAUCHE_valide,
 8011970:	4b4e      	ldr	r3, [pc, #312]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 8011972:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8011976:	e892 0003 	ldmia.w	r2, {r0, r1}
 801197a:	6018      	str	r0, [r3, #0]
 801197c:	3304      	adds	r3, #4
 801197e:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_GAUCHE_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n")
 8011980:	484b      	ldr	r0, [pc, #300]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011982:	f7fe fd05 	bl	8010390 <DbgTraceGetFileName>
 8011986:	4601      	mov	r1, r0
 8011988:	f44f 73b1 	mov.w	r3, #354	@ 0x162
 801198c:	4a49      	ldr	r2, [pc, #292]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 801198e:	484a      	ldr	r0, [pc, #296]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011990:	f001 f900 	bl	8012b94 <iprintf>
 8011994:	484b      	ldr	r0, [pc, #300]	@ (8011ac4 <Custom_Mvt_rep_Send_Notification+0x314>)
 8011996:	f001 f96d 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 8) {
 801199a:	4b42      	ldr	r3, [pc, #264]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 801199c:	785b      	ldrb	r3, [r3, #1]
 801199e:	2b08      	cmp	r3, #8
 80119a0:	d11c      	bne.n	80119dc <Custom_Mvt_rep_Send_Notification+0x22c>

			char BRAS_DROIT_valide[] = "Dval";
 80119a2:	4a52      	ldr	r2, [pc, #328]	@ (8011aec <Custom_Mvt_rep_Send_Notification+0x33c>)
 80119a4:	f107 0320 	add.w	r3, r7, #32
 80119a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119ac:	6018      	str	r0, [r3, #0]
 80119ae:	3304      	adds	r3, #4
 80119b0:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_DROIT_valide,
 80119b2:	4b3e      	ldr	r3, [pc, #248]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 80119b4:	f107 0220 	add.w	r2, r7, #32
 80119b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119bc:	6018      	str	r0, [r3, #0]
 80119be:	3304      	adds	r3, #4
 80119c0:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_DROIT_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 80119c2:	483b      	ldr	r0, [pc, #236]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 80119c4:	f7fe fce4 	bl	8010390 <DbgTraceGetFileName>
 80119c8:	4601      	mov	r1, r0
 80119ca:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 80119ce:	4a39      	ldr	r2, [pc, #228]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 80119d0:	4839      	ldr	r0, [pc, #228]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 80119d2:	f001 f8df 	bl	8012b94 <iprintf>
 80119d6:	483d      	ldr	r0, [pc, #244]	@ (8011acc <Custom_Mvt_rep_Send_Notification+0x31c>)
 80119d8:	f001 f94c 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 9) {
 80119dc:	4b31      	ldr	r3, [pc, #196]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 80119de:	785b      	ldrb	r3, [r3, #1]
 80119e0:	2b09      	cmp	r3, #9
 80119e2:	d11c      	bne.n	8011a1e <Custom_Mvt_rep_Send_Notification+0x26e>

			char BRAS_CORRECT_valide[] = "Cval";
 80119e4:	4a42      	ldr	r2, [pc, #264]	@ (8011af0 <Custom_Mvt_rep_Send_Notification+0x340>)
 80119e6:	f107 0318 	add.w	r3, r7, #24
 80119ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119ee:	6018      	str	r0, [r3, #0]
 80119f0:	3304      	adds	r3, #4
 80119f2:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_CORRECT_valide,
 80119f4:	4b2d      	ldr	r3, [pc, #180]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 80119f6:	f107 0218 	add.w	r2, r7, #24
 80119fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80119fe:	6018      	str	r0, [r3, #0]
 8011a00:	3304      	adds	r3, #4
 8011a02:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_CORRECT_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 8011a04:	482a      	ldr	r0, [pc, #168]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011a06:	f7fe fcc3 	bl	8010390 <DbgTraceGetFileName>
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8011a10:	4a28      	ldr	r2, [pc, #160]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011a12:	4829      	ldr	r0, [pc, #164]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011a14:	f001 f8be 	bl	8012b94 <iprintf>
 8011a18:	482c      	ldr	r0, [pc, #176]	@ (8011acc <Custom_Mvt_rep_Send_Notification+0x31c>)
 8011a1a:	f001 f92b 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 10) {
 8011a1e:	4b21      	ldr	r3, [pc, #132]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011a20:	785b      	ldrb	r3, [r3, #1]
 8011a22:	2b0a      	cmp	r3, #10
 8011a24:	d11c      	bne.n	8011a60 <Custom_Mvt_rep_Send_Notification+0x2b0>

			char BRAS_GAUCHE_non_valide[] = "Gnva";
 8011a26:	4a33      	ldr	r2, [pc, #204]	@ (8011af4 <Custom_Mvt_rep_Send_Notification+0x344>)
 8011a28:	f107 0310 	add.w	r3, r7, #16
 8011a2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a30:	6018      	str	r0, [r3, #0]
 8011a32:	3304      	adds	r3, #4
 8011a34:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_GAUCHE_non_valide,
 8011a36:	4b1d      	ldr	r3, [pc, #116]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 8011a38:	f107 0210 	add.w	r2, r7, #16
 8011a3c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a40:	6018      	str	r0, [r3, #0]
 8011a42:	3304      	adds	r3, #4
 8011a44:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_GAUCHE_non_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 8011a46:	481a      	ldr	r0, [pc, #104]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011a48:	f7fe fca2 	bl	8010390 <DbgTraceGetFileName>
 8011a4c:	4601      	mov	r1, r0
 8011a4e:	f44f 73bd 	mov.w	r3, #378	@ 0x17a
 8011a52:	4a18      	ldr	r2, [pc, #96]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011a54:	4818      	ldr	r0, [pc, #96]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011a56:	f001 f89d 	bl	8012b94 <iprintf>
 8011a5a:	481c      	ldr	r0, [pc, #112]	@ (8011acc <Custom_Mvt_rep_Send_Notification+0x31c>)
 8011a5c:	f001 f90a 	bl	8012c74 <puts>
			;
		}
		if (Custom_App_Context.rep_status == 11) {
 8011a60:	4b10      	ldr	r3, [pc, #64]	@ (8011aa4 <Custom_Mvt_rep_Send_Notification+0x2f4>)
 8011a62:	785b      	ldrb	r3, [r3, #1]
 8011a64:	2b0b      	cmp	r3, #11
 8011a66:	d149      	bne.n	8011afc <Custom_Mvt_rep_Send_Notification+0x34c>

			char BRAS_DROIT_non_valide[] = "Dnva";
 8011a68:	4a23      	ldr	r2, [pc, #140]	@ (8011af8 <Custom_Mvt_rep_Send_Notification+0x348>)
 8011a6a:	f107 0308 	add.w	r3, r7, #8
 8011a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a72:	6018      	str	r0, [r3, #0]
 8011a74:	3304      	adds	r3, #4
 8011a76:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_DROIT_non_valide,
 8011a78:	4b0c      	ldr	r3, [pc, #48]	@ (8011aac <Custom_Mvt_rep_Send_Notification+0x2fc>)
 8011a7a:	f107 0208 	add.w	r2, r7, #8
 8011a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011a82:	6018      	str	r0, [r3, #0]
 8011a84:	3304      	adds	r3, #4
 8011a86:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_DROIT_non_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 8011a88:	4809      	ldr	r0, [pc, #36]	@ (8011ab0 <Custom_Mvt_rep_Send_Notification+0x300>)
 8011a8a:	f7fe fc81 	bl	8010390 <DbgTraceGetFileName>
 8011a8e:	4601      	mov	r1, r0
 8011a90:	f44f 73c1 	mov.w	r3, #386	@ 0x182
 8011a94:	4a07      	ldr	r2, [pc, #28]	@ (8011ab4 <Custom_Mvt_rep_Send_Notification+0x304>)
 8011a96:	4808      	ldr	r0, [pc, #32]	@ (8011ab8 <Custom_Mvt_rep_Send_Notification+0x308>)
 8011a98:	f001 f87c 	bl	8012b94 <iprintf>
 8011a9c:	480b      	ldr	r0, [pc, #44]	@ (8011acc <Custom_Mvt_rep_Send_Notification+0x31c>)
 8011a9e:	f001 f8e9 	bl	8012c74 <puts>
 8011aa2:	e02b      	b.n	8011afc <Custom_Mvt_rep_Send_Notification+0x34c>
 8011aa4:	200009c0 	.word	0x200009c0
 8011aa8:	080150fc 	.word	0x080150fc
 8011aac:	20000abc 	.word	0x20000abc
 8011ab0:	08014eec 	.word	0x08014eec
 8011ab4:	080156d0 	.word	0x080156d0
 8011ab8:	08014f0c 	.word	0x08014f0c
 8011abc:	08014f20 	.word	0x08014f20
 8011ac0:	08015104 	.word	0x08015104
 8011ac4:	08014f60 	.word	0x08014f60
 8011ac8:	0801510c 	.word	0x0801510c
 8011acc:	08014fa4 	.word	0x08014fa4
 8011ad0:	08015114 	.word	0x08015114
 8011ad4:	08014fec 	.word	0x08014fec
 8011ad8:	0801511c 	.word	0x0801511c
 8011adc:	08015030 	.word	0x08015030
 8011ae0:	08015124 	.word	0x08015124
 8011ae4:	08015074 	.word	0x08015074
 8011ae8:	0801512c 	.word	0x0801512c
 8011aec:	08015134 	.word	0x08015134
 8011af0:	0801513c 	.word	0x0801513c
 8011af4:	08015144 	.word	0x08015144
 8011af8:	0801514c 	.word	0x0801514c
			;
		}
		if (Custom_App_Context.rep_status == 12) {
 8011afc:	4b1c      	ldr	r3, [pc, #112]	@ (8011b70 <Custom_Mvt_rep_Send_Notification+0x3c0>)
 8011afe:	785b      	ldrb	r3, [r3, #1]
 8011b00:	2b0c      	cmp	r3, #12
 8011b02:	d128      	bne.n	8011b56 <Custom_Mvt_rep_Send_Notification+0x3a6>

			char BRAS_CORRECT_non_valide[] = "Cnva";
 8011b04:	4a1b      	ldr	r2, [pc, #108]	@ (8011b74 <Custom_Mvt_rep_Send_Notification+0x3c4>)
 8011b06:	463b      	mov	r3, r7
 8011b08:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b0c:	6018      	str	r0, [r3, #0]
 8011b0e:	3304      	adds	r3, #4
 8011b10:	7019      	strb	r1, [r3, #0]
			memcpy(&NotifyCharData[0], &BRAS_CORRECT_non_valide,
 8011b12:	4b19      	ldr	r3, [pc, #100]	@ (8011b78 <Custom_Mvt_rep_Send_Notification+0x3c8>)
 8011b14:	463a      	mov	r2, r7
 8011b16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b1a:	6018      	str	r0, [r3, #0]
 8011b1c:	3304      	adds	r3, #4
 8011b1e:	7019      	strb	r1, [r3, #0]
					sizeof(BRAS_CORRECT_non_valide));
			APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n")
 8011b20:	4816      	ldr	r0, [pc, #88]	@ (8011b7c <Custom_Mvt_rep_Send_Notification+0x3cc>)
 8011b22:	f7fe fc35 	bl	8010390 <DbgTraceGetFileName>
 8011b26:	4601      	mov	r1, r0
 8011b28:	f44f 73c5 	mov.w	r3, #394	@ 0x18a
 8011b2c:	4a14      	ldr	r2, [pc, #80]	@ (8011b80 <Custom_Mvt_rep_Send_Notification+0x3d0>)
 8011b2e:	4815      	ldr	r0, [pc, #84]	@ (8011b84 <Custom_Mvt_rep_Send_Notification+0x3d4>)
 8011b30:	f001 f830 	bl	8012b94 <iprintf>
 8011b34:	4814      	ldr	r0, [pc, #80]	@ (8011b88 <Custom_Mvt_rep_Send_Notification+0x3d8>)
 8011b36:	f001 f89d 	bl	8012c74 <puts>
 8011b3a:	e00c      	b.n	8011b56 <Custom_Mvt_rep_Send_Notification+0x3a6>
			;
		}
	} else {
		APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n")
 8011b3c:	480f      	ldr	r0, [pc, #60]	@ (8011b7c <Custom_Mvt_rep_Send_Notification+0x3cc>)
 8011b3e:	f7fe fc27 	bl	8010390 <DbgTraceGetFileName>
 8011b42:	4601      	mov	r1, r0
 8011b44:	f44f 73c7 	mov.w	r3, #398	@ 0x18e
 8011b48:	4a0d      	ldr	r2, [pc, #52]	@ (8011b80 <Custom_Mvt_rep_Send_Notification+0x3d0>)
 8011b4a:	480e      	ldr	r0, [pc, #56]	@ (8011b84 <Custom_Mvt_rep_Send_Notification+0x3d4>)
 8011b4c:	f001 f822 	bl	8012b94 <iprintf>
 8011b50:	480e      	ldr	r0, [pc, #56]	@ (8011b8c <Custom_Mvt_rep_Send_Notification+0x3dc>)
 8011b52:	f001 f88f 	bl	8012c74 <puts>
		;
	}
	/* USER CODE END Mvt_rep_NS_1*/

	if (updateflag != 0) {
 8011b56:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d004      	beq.n	8011b68 <Custom_Mvt_rep_Send_Notification+0x3b8>
		Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP,
 8011b5e:	4906      	ldr	r1, [pc, #24]	@ (8011b78 <Custom_Mvt_rep_Send_Notification+0x3c8>)
 8011b60:	2000      	movs	r0, #0
 8011b62:	f000 f9f9 	bl	8011f58 <Custom_STM_App_Update_Char>

	/* USER CODE BEGIN Mvt_rep_NS_Last*/

	/* USER CODE END Mvt_rep_NS_Last*/

	return;
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
}
 8011b6a:	3760      	adds	r7, #96	@ 0x60
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	200009c0 	.word	0x200009c0
 8011b74:	08015154 	.word	0x08015154
 8011b78:	20000abc 	.word	0x20000abc
 8011b7c:	08014eec 	.word	0x08014eec
 8011b80:	080156d0 	.word	0x080156d0
 8011b84:	08014f0c 	.word	0x08014f0c
 8011b88:	08014fa4 	.word	0x08014fa4
 8011b8c:	080150b4 	.word	0x080150b4

08011b90 <Custom_Appli_Update_Char>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Custom_Appli_Update_Char()/* Property writed */
{
 8011b90:	b580      	push	{r7, lr}
 8011b92:	af00      	add	r7, sp, #0
	Custom_STM_App_Update_Char(CUSTOM_STM_APPEL_APP, (uint8_t*) UpdateCharData);
 8011b94:	4902      	ldr	r1, [pc, #8]	@ (8011ba0 <Custom_Appli_Update_Char+0x10>)
 8011b96:	2001      	movs	r0, #1
 8011b98:	f000 f9de 	bl	8011f58 <Custom_STM_App_Update_Char>
	return;
 8011b9c:	bf00      	nop
}
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	200009c4 	.word	0x200009c4

08011ba4 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b08c      	sub	sp, #48	@ 0x30
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8011bac:	2300      	movs	r3, #0
 8011bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	3301      	adds	r3, #1
 8011bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8011bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	2bff      	cmp	r3, #255	@ 0xff
 8011bbe:	f040 809b 	bne.w	8011cf8 <Custom_STM_Event_Handler+0x154>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8011bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bc4:	3302      	adds	r3, #2
 8011bc6:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8011bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bca:	881b      	ldrh	r3, [r3, #0]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8011bd2:	2b1a      	cmp	r3, #26
 8011bd4:	f200 808c 	bhi.w	8011cf0 <Custom_STM_Event_Handler+0x14c>
 8011bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8011be0 <Custom_STM_Event_Handler+0x3c>)
 8011bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bde:	bf00      	nop
 8011be0:	08011c4d 	.word	0x08011c4d
 8011be4:	08011cf1 	.word	0x08011cf1
 8011be8:	08011cf1 	.word	0x08011cf1
 8011bec:	08011cf1 	.word	0x08011cf1
 8011bf0:	08011cf1 	.word	0x08011cf1
 8011bf4:	08011cf1 	.word	0x08011cf1
 8011bf8:	08011cf1 	.word	0x08011cf1
 8011bfc:	08011cf1 	.word	0x08011cf1
 8011c00:	08011cf1 	.word	0x08011cf1
 8011c04:	08011cf1 	.word	0x08011cf1
 8011c08:	08011cf1 	.word	0x08011cf1
 8011c0c:	08011cf1 	.word	0x08011cf1
 8011c10:	08011cf1 	.word	0x08011cf1
 8011c14:	08011cf1 	.word	0x08011cf1
 8011c18:	08011cf1 	.word	0x08011cf1
 8011c1c:	08011cf1 	.word	0x08011cf1
 8011c20:	08011cf1 	.word	0x08011cf1
 8011c24:	08011cf1 	.word	0x08011cf1
 8011c28:	08011cf1 	.word	0x08011cf1
 8011c2c:	08011cf1 	.word	0x08011cf1
 8011c30:	08011cf1 	.word	0x08011cf1
 8011c34:	08011cf1 	.word	0x08011cf1
 8011c38:	08011cf1 	.word	0x08011cf1
 8011c3c:	08011cf1 	.word	0x08011cf1
 8011c40:	08011cf1 	.word	0x08011cf1
 8011c44:	08011cf1 	.word	0x08011cf1
 8011c48:	08011cd3 	.word	0x08011cd3
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8011c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c4e:	3302      	adds	r3, #2
 8011c50:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	885b      	ldrh	r3, [r3, #2]
 8011c56:	b29b      	uxth	r3, r3
 8011c58:	461a      	mov	r2, r3
 8011c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8011d08 <Custom_STM_Event_Handler+0x164>)
 8011c5c:	885b      	ldrh	r3, [r3, #2]
 8011c5e:	3302      	adds	r3, #2
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d119      	bne.n	8011c98 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011c64:	2301      	movs	r3, #1
 8011c66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8011c6a:	69fb      	ldr	r3, [r7, #28]
 8011c6c:	7a1b      	ldrb	r3, [r3, #8]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d002      	beq.n	8011c78 <Custom_STM_Event_Handler+0xd4>
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d008      	beq.n	8011c88 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8011c76:	e02b      	b.n	8011cd0 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011c7c:	f107 0308 	add.w	r3, r7, #8
 8011c80:	4618      	mov	r0, r3
 8011c82:	f7ff fc7f 	bl	8011584 <Custom_STM_App_Notification>
                break;
 8011c86:	e023      	b.n	8011cd0 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT;
 8011c88:	2300      	movs	r3, #0
 8011c8a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011c8c:	f107 0308 	add.w	r3, r7, #8
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7ff fc77 	bl	8011584 <Custom_STM_App_Notification>
                break;
 8011c96:	e01b      	b.n	8011cd0 <Custom_STM_Event_Handler+0x12c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8011c98:	69fb      	ldr	r3, [r7, #28]
 8011c9a:	885b      	ldrh	r3, [r3, #2]
 8011c9c:	b29b      	uxth	r3, r3
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	4b19      	ldr	r3, [pc, #100]	@ (8011d08 <Custom_STM_Event_Handler+0x164>)
 8011ca2:	889b      	ldrh	r3, [r3, #4]
 8011ca4:	3301      	adds	r3, #1
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d124      	bne.n	8011cf4 <Custom_STM_Event_Handler+0x150>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011caa:	2301      	movs	r3, #1
 8011cac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT;
 8011cb0:	2303      	movs	r3, #3
 8011cb2:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8011cb4:	69fb      	ldr	r3, [r7, #28]
 8011cb6:	88db      	ldrh	r3, [r3, #6]
 8011cb8:	b29b      	uxth	r3, r3
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	3308      	adds	r3, #8
 8011cc2:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 8011cc4:	f107 0308 	add.w	r3, r7, #8
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7ff fc5b 	bl	8011584 <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8011cce:	e011      	b.n	8011cf4 <Custom_STM_Event_Handler+0x150>
 8011cd0:	e010      	b.n	8011cf4 <Custom_STM_Event_Handler+0x150>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8011cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cd4:	3302      	adds	r3, #2
 8011cd6:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8011cd8:	2304      	movs	r3, #4
 8011cda:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	b29b      	uxth	r3, r3
 8011ce2:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8011ce4:	f107 0308 	add.w	r3, r7, #8
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f7ff fc4b 	bl	8011584 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8011cee:	e002      	b.n	8011cf6 <Custom_STM_Event_Handler+0x152>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011cf0:	bf00      	nop
 8011cf2:	e002      	b.n	8011cfa <Custom_STM_Event_Handler+0x156>
          break;
 8011cf4:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8011cf6:	e000      	b.n	8011cfa <Custom_STM_Event_Handler+0x156>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8011cf8:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8011cfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3730      	adds	r7, #48	@ 0x30
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bd80      	pop	{r7, pc}
 8011d06:	bf00      	nop
 8011d08:	20000bb4 	.word	0x20000bb4

08011d0c <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08c      	sub	sp, #48	@ 0x30
 8011d10:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011d12:	2392      	movs	r3, #146	@ 0x92
 8011d14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011d16:	4881      	ldr	r0, [pc, #516]	@ (8011f1c <SVCCTL_InitCustomSvc+0x210>)
 8011d18:	f7fd fcbe 	bl	800f698 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8011d1c:	2306      	movs	r3, #6
 8011d1e:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MVT_DEF_UUID(uuid.Char_UUID_128);
 8011d20:	238f      	movs	r3, #143	@ 0x8f
 8011d22:	713b      	strb	r3, [r7, #4]
 8011d24:	23e5      	movs	r3, #229	@ 0xe5
 8011d26:	717b      	strb	r3, [r7, #5]
 8011d28:	23b3      	movs	r3, #179	@ 0xb3
 8011d2a:	71bb      	strb	r3, [r7, #6]
 8011d2c:	23d5      	movs	r3, #213	@ 0xd5
 8011d2e:	71fb      	strb	r3, [r7, #7]
 8011d30:	232e      	movs	r3, #46	@ 0x2e
 8011d32:	723b      	strb	r3, [r7, #8]
 8011d34:	237f      	movs	r3, #127	@ 0x7f
 8011d36:	727b      	strb	r3, [r7, #9]
 8011d38:	234a      	movs	r3, #74	@ 0x4a
 8011d3a:	72bb      	strb	r3, [r7, #10]
 8011d3c:	2398      	movs	r3, #152	@ 0x98
 8011d3e:	72fb      	strb	r3, [r7, #11]
 8011d40:	232a      	movs	r3, #42	@ 0x2a
 8011d42:	733b      	strb	r3, [r7, #12]
 8011d44:	2348      	movs	r3, #72	@ 0x48
 8011d46:	737b      	strb	r3, [r7, #13]
 8011d48:	237a      	movs	r3, #122	@ 0x7a
 8011d4a:	73bb      	strb	r3, [r7, #14]
 8011d4c:	23cc      	movs	r3, #204	@ 0xcc
 8011d4e:	73fb      	strb	r3, [r7, #15]
 8011d50:	2300      	movs	r3, #0
 8011d52:	743b      	strb	r3, [r7, #16]
 8011d54:	2300      	movs	r3, #0
 8011d56:	747b      	strb	r3, [r7, #17]
 8011d58:	2300      	movs	r3, #0
 8011d5a:	74bb      	strb	r3, [r7, #18]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8011d60:	7dbb      	ldrb	r3, [r7, #22]
 8011d62:	1d39      	adds	r1, r7, #4
 8011d64:	4a6e      	ldr	r2, [pc, #440]	@ (8011f20 <SVCCTL_InitCustomSvc+0x214>)
 8011d66:	9200      	str	r2, [sp, #0]
 8011d68:	2201      	movs	r2, #1
 8011d6a:	2002      	movs	r0, #2
 8011d6c:	f7fc ff07 	bl	800eb7e <aci_gatt_add_service>
 8011d70:	4603      	mov	r3, r0
 8011d72:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMvt_DefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011d74:	7dfb      	ldrb	r3, [r7, #23]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00f      	beq.n	8011d9a <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: mvt_def, error code: 0x%x \n\r", ret);
 8011d7a:	486a      	ldr	r0, [pc, #424]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011d7c:	f7fe fb08 	bl	8010390 <DbgTraceGetFileName>
 8011d80:	4601      	mov	r1, r0
 8011d82:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8011d86:	4a68      	ldr	r2, [pc, #416]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011d88:	4868      	ldr	r0, [pc, #416]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011d8a:	f000 ff03 	bl	8012b94 <iprintf>
 8011d8e:	7dfb      	ldrb	r3, [r7, #23]
 8011d90:	4619      	mov	r1, r3
 8011d92:	4867      	ldr	r0, [pc, #412]	@ (8011f30 <SVCCTL_InitCustomSvc+0x224>)
 8011d94:	f000 fefe 	bl	8012b94 <iprintf>
 8011d98:	e00c      	b.n	8011db4 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: mvt_def \n\r");
 8011d9a:	4862      	ldr	r0, [pc, #392]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011d9c:	f7fe faf8 	bl	8010390 <DbgTraceGetFileName>
 8011da0:	4601      	mov	r1, r0
 8011da2:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8011da6:	4a60      	ldr	r2, [pc, #384]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011da8:	4860      	ldr	r0, [pc, #384]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011daa:	f000 fef3 	bl	8012b94 <iprintf>
 8011dae:	4861      	ldr	r0, [pc, #388]	@ (8011f34 <SVCCTL_InitCustomSvc+0x228>)
 8011db0:	f000 fef0 	bl	8012b94 <iprintf>
  }

  /**
   *  Mvt_rep
   */
  COPY_MVT_REP_UUID(uuid.Char_UUID_128);
 8011db4:	2319      	movs	r3, #25
 8011db6:	713b      	strb	r3, [r7, #4]
 8011db8:	23ed      	movs	r3, #237	@ 0xed
 8011dba:	717b      	strb	r3, [r7, #5]
 8011dbc:	2382      	movs	r3, #130	@ 0x82
 8011dbe:	71bb      	strb	r3, [r7, #6]
 8011dc0:	23ae      	movs	r3, #174	@ 0xae
 8011dc2:	71fb      	strb	r3, [r7, #7]
 8011dc4:	23ed      	movs	r3, #237	@ 0xed
 8011dc6:	723b      	strb	r3, [r7, #8]
 8011dc8:	2321      	movs	r3, #33	@ 0x21
 8011dca:	727b      	strb	r3, [r7, #9]
 8011dcc:	234c      	movs	r3, #76	@ 0x4c
 8011dce:	72bb      	strb	r3, [r7, #10]
 8011dd0:	239d      	movs	r3, #157	@ 0x9d
 8011dd2:	72fb      	strb	r3, [r7, #11]
 8011dd4:	2341      	movs	r3, #65	@ 0x41
 8011dd6:	733b      	strb	r3, [r7, #12]
 8011dd8:	2345      	movs	r3, #69	@ 0x45
 8011dda:	737b      	strb	r3, [r7, #13]
 8011ddc:	2322      	movs	r3, #34	@ 0x22
 8011dde:	73bb      	strb	r3, [r7, #14]
 8011de0:	238e      	movs	r3, #142	@ 0x8e
 8011de2:	73fb      	strb	r3, [r7, #15]
 8011de4:	23cd      	movs	r3, #205	@ 0xcd
 8011de6:	743b      	strb	r3, [r7, #16]
 8011de8:	23ab      	movs	r3, #171	@ 0xab
 8011dea:	747b      	strb	r3, [r7, #17]
 8011dec:	2300      	movs	r3, #0
 8011dee:	74bb      	strb	r3, [r7, #18]
 8011df0:	2300      	movs	r3, #0
 8011df2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011df4:	4b4a      	ldr	r3, [pc, #296]	@ (8011f20 <SVCCTL_InitCustomSvc+0x214>)
 8011df6:	8818      	ldrh	r0, [r3, #0]
 8011df8:	4b4f      	ldr	r3, [pc, #316]	@ (8011f38 <SVCCTL_InitCustomSvc+0x22c>)
 8011dfa:	781b      	ldrb	r3, [r3, #0]
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	1d3a      	adds	r2, r7, #4
 8011e00:	4b4e      	ldr	r3, [pc, #312]	@ (8011f3c <SVCCTL_InitCustomSvc+0x230>)
 8011e02:	9305      	str	r3, [sp, #20]
 8011e04:	2301      	movs	r3, #1
 8011e06:	9304      	str	r3, [sp, #16]
 8011e08:	2310      	movs	r3, #16
 8011e0a:	9303      	str	r3, [sp, #12]
 8011e0c:	2301      	movs	r3, #1
 8011e0e:	9302      	str	r3, [sp, #8]
 8011e10:	2300      	movs	r3, #0
 8011e12:	9301      	str	r3, [sp, #4]
 8011e14:	2310      	movs	r3, #16
 8011e16:	9300      	str	r3, [sp, #0]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	2102      	movs	r1, #2
 8011e1c:	f7fc ff85 	bl	800ed2a <aci_gatt_add_char>
 8011e20:	4603      	mov	r3, r0
 8011e22:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMvt_RepHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011e24:	7dfb      	ldrb	r3, [r7, #23]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d00f      	beq.n	8011e4a <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MVT_REP, error code: 0x%x \n\r", ret);
 8011e2a:	483e      	ldr	r0, [pc, #248]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011e2c:	f7fe fab0 	bl	8010390 <DbgTraceGetFileName>
 8011e30:	4601      	mov	r1, r0
 8011e32:	f44f 73ab 	mov.w	r3, #342	@ 0x156
 8011e36:	4a3c      	ldr	r2, [pc, #240]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011e38:	483c      	ldr	r0, [pc, #240]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011e3a:	f000 feab 	bl	8012b94 <iprintf>
 8011e3e:	7dfb      	ldrb	r3, [r7, #23]
 8011e40:	4619      	mov	r1, r3
 8011e42:	483f      	ldr	r0, [pc, #252]	@ (8011f40 <SVCCTL_InitCustomSvc+0x234>)
 8011e44:	f000 fea6 	bl	8012b94 <iprintf>
 8011e48:	e00c      	b.n	8011e64 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MVT_REP \n\r");
 8011e4a:	4836      	ldr	r0, [pc, #216]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011e4c:	f7fe faa0 	bl	8010390 <DbgTraceGetFileName>
 8011e50:	4601      	mov	r1, r0
 8011e52:	f44f 73ad 	mov.w	r3, #346	@ 0x15a
 8011e56:	4a34      	ldr	r2, [pc, #208]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011e58:	4834      	ldr	r0, [pc, #208]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011e5a:	f000 fe9b 	bl	8012b94 <iprintf>
 8011e5e:	4839      	ldr	r0, [pc, #228]	@ (8011f44 <SVCCTL_InitCustomSvc+0x238>)
 8011e60:	f000 fe98 	bl	8012b94 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Appel_app
   */
  COPY_APPEL_APP_UUID(uuid.Char_UUID_128);
 8011e64:	2319      	movs	r3, #25
 8011e66:	713b      	strb	r3, [r7, #4]
 8011e68:	23ed      	movs	r3, #237	@ 0xed
 8011e6a:	717b      	strb	r3, [r7, #5]
 8011e6c:	2382      	movs	r3, #130	@ 0x82
 8011e6e:	71bb      	strb	r3, [r7, #6]
 8011e70:	23ae      	movs	r3, #174	@ 0xae
 8011e72:	71fb      	strb	r3, [r7, #7]
 8011e74:	23ed      	movs	r3, #237	@ 0xed
 8011e76:	723b      	strb	r3, [r7, #8]
 8011e78:	2321      	movs	r3, #33	@ 0x21
 8011e7a:	727b      	strb	r3, [r7, #9]
 8011e7c:	234c      	movs	r3, #76	@ 0x4c
 8011e7e:	72bb      	strb	r3, [r7, #10]
 8011e80:	239d      	movs	r3, #157	@ 0x9d
 8011e82:	72fb      	strb	r3, [r7, #11]
 8011e84:	2341      	movs	r3, #65	@ 0x41
 8011e86:	733b      	strb	r3, [r7, #12]
 8011e88:	2345      	movs	r3, #69	@ 0x45
 8011e8a:	737b      	strb	r3, [r7, #13]
 8011e8c:	2322      	movs	r3, #34	@ 0x22
 8011e8e:	73bb      	strb	r3, [r7, #14]
 8011e90:	238e      	movs	r3, #142	@ 0x8e
 8011e92:	73fb      	strb	r3, [r7, #15]
 8011e94:	2334      	movs	r3, #52	@ 0x34
 8011e96:	743b      	strb	r3, [r7, #16]
 8011e98:	2312      	movs	r3, #18
 8011e9a:	747b      	strb	r3, [r7, #17]
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	74bb      	strb	r3, [r7, #18]
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8011f20 <SVCCTL_InitCustomSvc+0x214>)
 8011ea6:	8818      	ldrh	r0, [r3, #0]
 8011ea8:	4b27      	ldr	r3, [pc, #156]	@ (8011f48 <SVCCTL_InitCustomSvc+0x23c>)
 8011eaa:	781b      	ldrb	r3, [r3, #0]
 8011eac:	4619      	mov	r1, r3
 8011eae:	1d3a      	adds	r2, r7, #4
 8011eb0:	4b26      	ldr	r3, [pc, #152]	@ (8011f4c <SVCCTL_InitCustomSvc+0x240>)
 8011eb2:	9305      	str	r3, [sp, #20]
 8011eb4:	2301      	movs	r3, #1
 8011eb6:	9304      	str	r3, [sp, #16]
 8011eb8:	2310      	movs	r3, #16
 8011eba:	9303      	str	r3, [sp, #12]
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	9302      	str	r3, [sp, #8]
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	9301      	str	r3, [sp, #4]
 8011ec4:	2306      	movs	r3, #6
 8011ec6:	9300      	str	r3, [sp, #0]
 8011ec8:	460b      	mov	r3, r1
 8011eca:	2102      	movs	r1, #2
 8011ecc:	f7fc ff2d 	bl	800ed2a <aci_gatt_add_char>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAppel_AppHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011ed4:	7dfb      	ldrb	r3, [r7, #23]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d00f      	beq.n	8011efa <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : APPEL_APP, error code: 0x%x \n\r", ret);
 8011eda:	4812      	ldr	r0, [pc, #72]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011edc:	f7fe fa58 	bl	8010390 <DbgTraceGetFileName>
 8011ee0:	4601      	mov	r1, r0
 8011ee2:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 8011ee6:	4a10      	ldr	r2, [pc, #64]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011ee8:	4810      	ldr	r0, [pc, #64]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011eea:	f000 fe53 	bl	8012b94 <iprintf>
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	4619      	mov	r1, r3
 8011ef2:	4817      	ldr	r0, [pc, #92]	@ (8011f50 <SVCCTL_InitCustomSvc+0x244>)
 8011ef4:	f000 fe4e 	bl	8012b94 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011ef8:	e00d      	b.n	8011f16 <SVCCTL_InitCustomSvc+0x20a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : APPEL_APP \n\r");
 8011efa:	480a      	ldr	r0, [pc, #40]	@ (8011f24 <SVCCTL_InitCustomSvc+0x218>)
 8011efc:	f7fe fa48 	bl	8010390 <DbgTraceGetFileName>
 8011f00:	4601      	mov	r1, r0
 8011f02:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 8011f06:	4a08      	ldr	r2, [pc, #32]	@ (8011f28 <SVCCTL_InitCustomSvc+0x21c>)
 8011f08:	4808      	ldr	r0, [pc, #32]	@ (8011f2c <SVCCTL_InitCustomSvc+0x220>)
 8011f0a:	f000 fe43 	bl	8012b94 <iprintf>
 8011f0e:	4811      	ldr	r0, [pc, #68]	@ (8011f54 <SVCCTL_InitCustomSvc+0x248>)
 8011f10:	f000 fe40 	bl	8012b94 <iprintf>
  return;
 8011f14:	bf00      	nop
}
 8011f16:	3718      	adds	r7, #24
 8011f18:	46bd      	mov	sp, r7
 8011f1a:	bd80      	pop	{r7, pc}
 8011f1c:	08011ba5 	.word	0x08011ba5
 8011f20:	20000bb4 	.word	0x20000bb4
 8011f24:	0801515c 	.word	0x0801515c
 8011f28:	080156f4 	.word	0x080156f4
 8011f2c:	0801517c 	.word	0x0801517c
 8011f30:	08015190 	.word	0x08015190
 8011f34:	080151d8 	.word	0x080151d8
 8011f38:	20000103 	.word	0x20000103
 8011f3c:	20000bb6 	.word	0x20000bb6
 8011f40:	0801520c 	.word	0x0801520c
 8011f44:	08015254 	.word	0x08015254
 8011f48:	20000104 	.word	0x20000104
 8011f4c:	20000bb8 	.word	0x20000bb8
 8011f50:	08015288 	.word	0x08015288
 8011f54:	080152d0 	.word	0x080152d0

08011f58 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b086      	sub	sp, #24
 8011f5c:	af02      	add	r7, sp, #8
 8011f5e:	4603      	mov	r3, r0
 8011f60:	6039      	str	r1, [r7, #0]
 8011f62:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011f64:	2392      	movs	r3, #146	@ 0x92
 8011f66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8011f68:	79fb      	ldrb	r3, [r7, #7]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d002      	beq.n	8011f74 <Custom_STM_App_Update_Char+0x1c>
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d02f      	beq.n	8011fd2 <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 8011f72:	e069      	b.n	8012048 <Custom_STM_App_Update_Char+0xf0>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 8011f74:	4b37      	ldr	r3, [pc, #220]	@ (8012054 <Custom_STM_App_Update_Char+0xfc>)
 8011f76:	8818      	ldrh	r0, [r3, #0]
 8011f78:	4b36      	ldr	r3, [pc, #216]	@ (8012054 <Custom_STM_App_Update_Char+0xfc>)
 8011f7a:	8859      	ldrh	r1, [r3, #2]
 8011f7c:	4b36      	ldr	r3, [pc, #216]	@ (8012058 <Custom_STM_App_Update_Char+0x100>)
 8011f7e:	781a      	ldrb	r2, [r3, #0]
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	4613      	mov	r3, r2
 8011f86:	2200      	movs	r2, #0
 8011f88:	f7fc ffd7 	bl	800ef3a <aci_gatt_update_char_value>
 8011f8c:	4603      	mov	r3, r0
 8011f8e:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d00f      	beq.n	8011fb6 <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MVT_REP command, result : 0x%x \n\r", ret);
 8011f96:	4831      	ldr	r0, [pc, #196]	@ (801205c <Custom_STM_App_Update_Char+0x104>)
 8011f98:	f7fe f9fa 	bl	8010390 <DbgTraceGetFileName>
 8011f9c:	4601      	mov	r1, r0
 8011f9e:	f240 139b 	movw	r3, #411	@ 0x19b
 8011fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8012060 <Custom_STM_App_Update_Char+0x108>)
 8011fa4:	482f      	ldr	r0, [pc, #188]	@ (8012064 <Custom_STM_App_Update_Char+0x10c>)
 8011fa6:	f000 fdf5 	bl	8012b94 <iprintf>
 8011faa:	7bfb      	ldrb	r3, [r7, #15]
 8011fac:	4619      	mov	r1, r3
 8011fae:	482e      	ldr	r0, [pc, #184]	@ (8012068 <Custom_STM_App_Update_Char+0x110>)
 8011fb0:	f000 fdf0 	bl	8012b94 <iprintf>
      break;
 8011fb4:	e048      	b.n	8012048 <Custom_STM_App_Update_Char+0xf0>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MVT_REP command\n\r");
 8011fb6:	4829      	ldr	r0, [pc, #164]	@ (801205c <Custom_STM_App_Update_Char+0x104>)
 8011fb8:	f7fe f9ea 	bl	8010390 <DbgTraceGetFileName>
 8011fbc:	4601      	mov	r1, r0
 8011fbe:	f240 139f 	movw	r3, #415	@ 0x19f
 8011fc2:	4a27      	ldr	r2, [pc, #156]	@ (8012060 <Custom_STM_App_Update_Char+0x108>)
 8011fc4:	4827      	ldr	r0, [pc, #156]	@ (8012064 <Custom_STM_App_Update_Char+0x10c>)
 8011fc6:	f000 fde5 	bl	8012b94 <iprintf>
 8011fca:	4828      	ldr	r0, [pc, #160]	@ (801206c <Custom_STM_App_Update_Char+0x114>)
 8011fcc:	f000 fde2 	bl	8012b94 <iprintf>
      break;
 8011fd0:	e03a      	b.n	8012048 <Custom_STM_App_Update_Char+0xf0>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 8011fd2:	4b20      	ldr	r3, [pc, #128]	@ (8012054 <Custom_STM_App_Update_Char+0xfc>)
 8011fd4:	8818      	ldrh	r0, [r3, #0]
 8011fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8012054 <Custom_STM_App_Update_Char+0xfc>)
 8011fd8:	8899      	ldrh	r1, [r3, #4]
 8011fda:	4b25      	ldr	r3, [pc, #148]	@ (8012070 <Custom_STM_App_Update_Char+0x118>)
 8011fdc:	781a      	ldrb	r2, [r3, #0]
 8011fde:	683b      	ldr	r3, [r7, #0]
 8011fe0:	9300      	str	r3, [sp, #0]
 8011fe2:	4613      	mov	r3, r2
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	f7fc ffa8 	bl	800ef3a <aci_gatt_update_char_value>
 8011fea:	4603      	mov	r3, r0
 8011fec:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8011fee:	7bfb      	ldrb	r3, [r7, #15]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d00f      	beq.n	8012014 <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value APPEL_APP command, result : 0x%x \n\r", ret);
 8011ff4:	4819      	ldr	r0, [pc, #100]	@ (801205c <Custom_STM_App_Update_Char+0x104>)
 8011ff6:	f7fe f9cb 	bl	8010390 <DbgTraceGetFileName>
 8011ffa:	4601      	mov	r1, r0
 8011ffc:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8012000:	4a17      	ldr	r2, [pc, #92]	@ (8012060 <Custom_STM_App_Update_Char+0x108>)
 8012002:	4818      	ldr	r0, [pc, #96]	@ (8012064 <Custom_STM_App_Update_Char+0x10c>)
 8012004:	f000 fdc6 	bl	8012b94 <iprintf>
 8012008:	7bfb      	ldrb	r3, [r7, #15]
 801200a:	4619      	mov	r1, r3
 801200c:	4819      	ldr	r0, [pc, #100]	@ (8012074 <Custom_STM_App_Update_Char+0x11c>)
 801200e:	f000 fdc1 	bl	8012b94 <iprintf>
 8012012:	e00c      	b.n	801202e <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value APPEL_APP command\n\r");
 8012014:	4811      	ldr	r0, [pc, #68]	@ (801205c <Custom_STM_App_Update_Char+0x104>)
 8012016:	f7fe f9bb 	bl	8010390 <DbgTraceGetFileName>
 801201a:	4601      	mov	r1, r0
 801201c:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 8012020:	4a0f      	ldr	r2, [pc, #60]	@ (8012060 <Custom_STM_App_Update_Char+0x108>)
 8012022:	4810      	ldr	r0, [pc, #64]	@ (8012064 <Custom_STM_App_Update_Char+0x10c>)
 8012024:	f000 fdb6 	bl	8012b94 <iprintf>
 8012028:	4813      	ldr	r0, [pc, #76]	@ (8012078 <Custom_STM_App_Update_Char+0x120>)
 801202a:	f000 fdb3 	bl	8012b94 <iprintf>
      printf("%u\n", pPayload[0]);
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	4619      	mov	r1, r3
 8012034:	4811      	ldr	r0, [pc, #68]	@ (801207c <Custom_STM_App_Update_Char+0x124>)
 8012036:	f000 fdad 	bl	8012b94 <iprintf>
      global_payload_pointer = pPayload;
 801203a:	4a11      	ldr	r2, [pc, #68]	@ (8012080 <Custom_STM_App_Update_Char+0x128>)
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	6013      	str	r3, [r2, #0]
      etat = INITIALISATION;
 8012040:	4b10      	ldr	r3, [pc, #64]	@ (8012084 <Custom_STM_App_Update_Char+0x12c>)
 8012042:	2200      	movs	r2, #0
 8012044:	701a      	strb	r2, [r3, #0]
      break;
 8012046:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 8012048:	7bfb      	ldrb	r3, [r7, #15]
}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}
 8012052:	bf00      	nop
 8012054:	20000bb4 	.word	0x20000bb4
 8012058:	20000103 	.word	0x20000103
 801205c:	0801515c 	.word	0x0801515c
 8012060:	0801570c 	.word	0x0801570c
 8012064:	0801517c 	.word	0x0801517c
 8012068:	08015308 	.word	0x08015308
 801206c:	08015350 	.word	0x08015350
 8012070:	20000104 	.word	0x20000104
 8012074:	08015388 	.word	0x08015388
 8012078:	080153d4 	.word	0x080153d4
 801207c:	08015410 	.word	0x08015410
 8012080:	20000bbc 	.word	0x20000bbc
 8012084:	20000224 	.word	0x20000224

08012088 <LL_PWR_EnableBootC2>:
{
 8012088:	b480      	push	{r7}
 801208a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 801208c:	4b05      	ldr	r3, [pc, #20]	@ (80120a4 <LL_PWR_EnableBootC2+0x1c>)
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	4a04      	ldr	r2, [pc, #16]	@ (80120a4 <LL_PWR_EnableBootC2+0x1c>)
 8012092:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8012096:	60d3      	str	r3, [r2, #12]
}
 8012098:	bf00      	nop
 801209a:	46bd      	mov	sp, r7
 801209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a0:	4770      	bx	lr
 80120a2:	bf00      	nop
 80120a4:	58000400 	.word	0x58000400

080120a8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80120b0:	4b06      	ldr	r3, [pc, #24]	@ (80120cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80120b2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80120b6:	4905      	ldr	r1, [pc, #20]	@ (80120cc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	4313      	orrs	r3, r2
 80120bc:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80120c0:	bf00      	nop
 80120c2:	370c      	adds	r7, #12
 80120c4:	46bd      	mov	sp, r7
 80120c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ca:	4770      	bx	lr
 80120cc:	58000800 	.word	0x58000800

080120d0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
 80120d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80120d8:	4b05      	ldr	r3, [pc, #20]	@ (80120f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80120da:	6a1a      	ldr	r2, [r3, #32]
 80120dc:	4904      	ldr	r1, [pc, #16]	@ (80120f0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	4313      	orrs	r3, r2
 80120e2:	620b      	str	r3, [r1, #32]
}
 80120e4:	bf00      	nop
 80120e6:	370c      	adds	r7, #12
 80120e8:	46bd      	mov	sp, r7
 80120ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120ee:	4770      	bx	lr
 80120f0:	58000800 	.word	0x58000800

080120f4 <LL_AHB3_GRP1_EnableClock>:
{
 80120f4:	b480      	push	{r7}
 80120f6:	b085      	sub	sp, #20
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80120fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012100:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012102:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	4313      	orrs	r3, r2
 801210a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801210c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012110:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	4013      	ands	r3, r2
 8012116:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012118:	68fb      	ldr	r3, [r7, #12]
}
 801211a:	bf00      	nop
 801211c:	3714      	adds	r7, #20
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr

08012126 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8012126:	b480      	push	{r7}
 8012128:	b085      	sub	sp, #20
 801212a:	af00      	add	r7, sp, #0
 801212c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801212e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012132:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8012136:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	4313      	orrs	r3, r2
 801213e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8012142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8012146:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	4013      	ands	r3, r2
 801214e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8012150:	68fb      	ldr	r3, [r7, #12]
}
 8012152:	bf00      	nop
 8012154:	3714      	adds	r7, #20
 8012156:	46bd      	mov	sp, r7
 8012158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215c:	4770      	bx	lr

0801215e <LL_C1_IPCC_EnableIT_TXF>:
{
 801215e:	b480      	push	{r7}
 8012160:	b083      	sub	sp, #12
 8012162:	af00      	add	r7, sp, #0
 8012164:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	601a      	str	r2, [r3, #0]
}
 8012172:	bf00      	nop
 8012174:	370c      	adds	r7, #12
 8012176:	46bd      	mov	sp, r7
 8012178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801217c:	4770      	bx	lr

0801217e <LL_C1_IPCC_EnableIT_RXO>:
{
 801217e:	b480      	push	{r7}
 8012180:	b083      	sub	sp, #12
 8012182:	af00      	add	r7, sp, #0
 8012184:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	681b      	ldr	r3, [r3, #0]
 801218a:	f043 0201 	orr.w	r2, r3, #1
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	601a      	str	r2, [r3, #0]
}
 8012192:	bf00      	nop
 8012194:	370c      	adds	r7, #12
 8012196:	46bd      	mov	sp, r7
 8012198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219c:	4770      	bx	lr

0801219e <LL_C1_IPCC_EnableTransmitChannel>:
{
 801219e:	b480      	push	{r7}
 80121a0:	b083      	sub	sp, #12
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	685a      	ldr	r2, [r3, #4]
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	041b      	lsls	r3, r3, #16
 80121b0:	43db      	mvns	r3, r3
 80121b2:	401a      	ands	r2, r3
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	605a      	str	r2, [r3, #4]
}
 80121b8:	bf00      	nop
 80121ba:	370c      	adds	r7, #12
 80121bc:	46bd      	mov	sp, r7
 80121be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c2:	4770      	bx	lr

080121c4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80121c4:	b480      	push	{r7}
 80121c6:	b083      	sub	sp, #12
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	685a      	ldr	r2, [r3, #4]
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	041b      	lsls	r3, r3, #16
 80121d6:	431a      	orrs	r2, r3
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	605a      	str	r2, [r3, #4]
}
 80121dc:	bf00      	nop
 80121de:	370c      	adds	r7, #12
 80121e0:	46bd      	mov	sp, r7
 80121e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e6:	4770      	bx	lr

080121e8 <LL_C1_IPCC_EnableReceiveChannel>:
{
 80121e8:	b480      	push	{r7}
 80121ea:	b083      	sub	sp, #12
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	685a      	ldr	r2, [r3, #4]
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	43db      	mvns	r3, r3
 80121fa:	401a      	ands	r2, r3
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	605a      	str	r2, [r3, #4]
}
 8012200:	bf00      	nop
 8012202:	370c      	adds	r7, #12
 8012204:	46bd      	mov	sp, r7
 8012206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220a:	4770      	bx	lr

0801220c <LL_C1_IPCC_ClearFlag_CHx>:
{
 801220c:	b480      	push	{r7}
 801220e:	b083      	sub	sp, #12
 8012210:	af00      	add	r7, sp, #0
 8012212:	6078      	str	r0, [r7, #4]
 8012214:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	683a      	ldr	r2, [r7, #0]
 801221a:	609a      	str	r2, [r3, #8]
}
 801221c:	bf00      	nop
 801221e:	370c      	adds	r7, #12
 8012220:	46bd      	mov	sp, r7
 8012222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012226:	4770      	bx	lr

08012228 <LL_C1_IPCC_SetFlag_CHx>:
{
 8012228:	b480      	push	{r7}
 801222a:	b083      	sub	sp, #12
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
 8012230:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8012232:	683b      	ldr	r3, [r7, #0]
 8012234:	041a      	lsls	r2, r3, #16
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	609a      	str	r2, [r3, #8]
}
 801223a:	bf00      	nop
 801223c:	370c      	adds	r7, #12
 801223e:	46bd      	mov	sp, r7
 8012240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012244:	4770      	bx	lr

08012246 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8012246:	b480      	push	{r7}
 8012248:	b083      	sub	sp, #12
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
 801224e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	68da      	ldr	r2, [r3, #12]
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	4013      	ands	r3, r2
 8012258:	683a      	ldr	r2, [r7, #0]
 801225a:	429a      	cmp	r2, r3
 801225c:	d101      	bne.n	8012262 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801225e:	2301      	movs	r3, #1
 8012260:	e000      	b.n	8012264 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8012262:	2300      	movs	r3, #0
}
 8012264:	4618      	mov	r0, r3
 8012266:	370c      	adds	r7, #12
 8012268:	46bd      	mov	sp, r7
 801226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226e:	4770      	bx	lr

08012270 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8012270:	b480      	push	{r7}
 8012272:	b083      	sub	sp, #12
 8012274:	af00      	add	r7, sp, #0
 8012276:	6078      	str	r0, [r7, #4]
 8012278:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	69da      	ldr	r2, [r3, #28]
 801227e:	683b      	ldr	r3, [r7, #0]
 8012280:	4013      	ands	r3, r2
 8012282:	683a      	ldr	r2, [r7, #0]
 8012284:	429a      	cmp	r2, r3
 8012286:	d101      	bne.n	801228c <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8012288:	2301      	movs	r3, #1
 801228a:	e000      	b.n	801228e <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 801228c:	2300      	movs	r3, #0
}
 801228e:	4618      	mov	r0, r3
 8012290:	370c      	adds	r7, #12
 8012292:	46bd      	mov	sp, r7
 8012294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012298:	4770      	bx	lr
	...

0801229c <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80122a0:	2102      	movs	r1, #2
 80122a2:	4818      	ldr	r0, [pc, #96]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122a4:	f7ff ffe4 	bl	8012270 <LL_C2_IPCC_IsActiveFlag_CHx>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d008      	beq.n	80122c0 <HW_IPCC_Rx_Handler+0x24>
 80122ae:	4b15      	ldr	r3, [pc, #84]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	f003 0302 	and.w	r3, r3, #2
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d102      	bne.n	80122c0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80122ba:	f000 f8d5 	bl	8012468 <HW_IPCC_SYS_EvtHandler>
 80122be:	e01e      	b.n	80122fe <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80122c0:	2101      	movs	r1, #1
 80122c2:	4810      	ldr	r0, [pc, #64]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122c4:	f7ff ffd4 	bl	8012270 <LL_C2_IPCC_IsActiveFlag_CHx>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d008      	beq.n	80122e0 <HW_IPCC_Rx_Handler+0x44>
 80122ce:	4b0d      	ldr	r3, [pc, #52]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122d0:	685b      	ldr	r3, [r3, #4]
 80122d2:	f003 0301 	and.w	r3, r3, #1
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d102      	bne.n	80122e0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80122da:	f000 f889 	bl	80123f0 <HW_IPCC_BLE_EvtHandler>
 80122de:	e00e      	b.n	80122fe <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80122e0:	2108      	movs	r1, #8
 80122e2:	4808      	ldr	r0, [pc, #32]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122e4:	f7ff ffc4 	bl	8012270 <LL_C2_IPCC_IsActiveFlag_CHx>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d008      	beq.n	8012300 <HW_IPCC_Rx_Handler+0x64>
 80122ee:	4b05      	ldr	r3, [pc, #20]	@ (8012304 <HW_IPCC_Rx_Handler+0x68>)
 80122f0:	685b      	ldr	r3, [r3, #4]
 80122f2:	f003 0308 	and.w	r3, r3, #8
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d102      	bne.n	8012300 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80122fa:	f000 f901 	bl	8012500 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80122fe:	bf00      	nop
 8012300:	bf00      	nop
}
 8012302:	bd80      	pop	{r7, pc}
 8012304:	58000c00 	.word	0x58000c00

08012308 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8012308:	b580      	push	{r7, lr}
 801230a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801230c:	2102      	movs	r1, #2
 801230e:	4818      	ldr	r0, [pc, #96]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 8012310:	f7ff ff99 	bl	8012246 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012314:	4603      	mov	r3, r0
 8012316:	2b00      	cmp	r3, #0
 8012318:	d108      	bne.n	801232c <HW_IPCC_Tx_Handler+0x24>
 801231a:	4b15      	ldr	r3, [pc, #84]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 801231c:	685b      	ldr	r3, [r3, #4]
 801231e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012322:	2b00      	cmp	r3, #0
 8012324:	d102      	bne.n	801232c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8012326:	f000 f893 	bl	8012450 <HW_IPCC_SYS_CmdEvtHandler>
 801232a:	e01e      	b.n	801236a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801232c:	2108      	movs	r1, #8
 801232e:	4810      	ldr	r0, [pc, #64]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 8012330:	f7ff ff89 	bl	8012246 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d108      	bne.n	801234c <HW_IPCC_Tx_Handler+0x44>
 801233a:	4b0d      	ldr	r3, [pc, #52]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 801233c:	685b      	ldr	r3, [r3, #4]
 801233e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012342:	2b00      	cmp	r3, #0
 8012344:	d102      	bne.n	801234c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8012346:	f000 f8bd 	bl	80124c4 <HW_IPCC_MM_FreeBufHandler>
 801234a:	e00e      	b.n	801236a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801234c:	2120      	movs	r1, #32
 801234e:	4808      	ldr	r0, [pc, #32]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 8012350:	f7ff ff79 	bl	8012246 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012354:	4603      	mov	r3, r0
 8012356:	2b00      	cmp	r3, #0
 8012358:	d108      	bne.n	801236c <HW_IPCC_Tx_Handler+0x64>
 801235a:	4b05      	ldr	r3, [pc, #20]	@ (8012370 <HW_IPCC_Tx_Handler+0x68>)
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8012362:	2b00      	cmp	r3, #0
 8012364:	d102      	bne.n	801236c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8012366:	f000 f84f 	bl	8012408 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801236a:	bf00      	nop
 801236c:	bf00      	nop
}
 801236e:	bd80      	pop	{r7, pc}
 8012370:	58000c00 	.word	0x58000c00

08012374 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8012378:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801237c:	f7ff fed3 	bl	8012126 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8012380:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8012384:	f7ff fea4 	bl	80120d0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8012388:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801238c:	f7ff fe8c 	bl	80120a8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8012390:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8012392:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8012394:	f7ff fe78 	bl	8012088 <LL_PWR_EnableBootC2>

  return;
 8012398:	bf00      	nop
}
 801239a:	bd80      	pop	{r7, pc}

0801239c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 801239c:	b580      	push	{r7, lr}
 801239e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80123a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80123a4:	f7ff fea6 	bl	80120f4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80123a8:	4806      	ldr	r0, [pc, #24]	@ (80123c4 <HW_IPCC_Init+0x28>)
 80123aa:	f7ff fee8 	bl	801217e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80123ae:	4805      	ldr	r0, [pc, #20]	@ (80123c4 <HW_IPCC_Init+0x28>)
 80123b0:	f7ff fed5 	bl	801215e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80123b4:	202c      	movs	r0, #44	@ 0x2c
 80123b6:	f7f7 fd5c 	bl	8009e72 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80123ba:	202d      	movs	r0, #45	@ 0x2d
 80123bc:	f7f7 fd59 	bl	8009e72 <HAL_NVIC_EnableIRQ>

  return;
 80123c0:	bf00      	nop
}
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	58000c00 	.word	0x58000c00

080123c8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80123cc:	2101      	movs	r1, #1
 80123ce:	4802      	ldr	r0, [pc, #8]	@ (80123d8 <HW_IPCC_BLE_Init+0x10>)
 80123d0:	f7ff ff0a 	bl	80121e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80123d4:	bf00      	nop
}
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	58000c00 	.word	0x58000c00

080123dc <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80123e0:	2101      	movs	r1, #1
 80123e2:	4802      	ldr	r0, [pc, #8]	@ (80123ec <HW_IPCC_BLE_SendCmd+0x10>)
 80123e4:	f7ff ff20 	bl	8012228 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80123e8:	bf00      	nop
}
 80123ea:	bd80      	pop	{r7, pc}
 80123ec:	58000c00 	.word	0x58000c00

080123f0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80123f4:	f7fd fe14 	bl	8010020 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80123f8:	2101      	movs	r1, #1
 80123fa:	4802      	ldr	r0, [pc, #8]	@ (8012404 <HW_IPCC_BLE_EvtHandler+0x14>)
 80123fc:	f7ff ff06 	bl	801220c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012400:	bf00      	nop
}
 8012402:	bd80      	pop	{r7, pc}
 8012404:	58000c00 	.word	0x58000c00

08012408 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801240c:	2120      	movs	r1, #32
 801240e:	4803      	ldr	r0, [pc, #12]	@ (801241c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8012410:	f7ff fed8 	bl	80121c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8012414:	f7fd fe34 	bl	8010080 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8012418:	bf00      	nop
}
 801241a:	bd80      	pop	{r7, pc}
 801241c:	58000c00 	.word	0x58000c00

08012420 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8012420:	b580      	push	{r7, lr}
 8012422:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012424:	2102      	movs	r1, #2
 8012426:	4802      	ldr	r0, [pc, #8]	@ (8012430 <HW_IPCC_SYS_Init+0x10>)
 8012428:	f7ff fede 	bl	80121e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801242c:	bf00      	nop
}
 801242e:	bd80      	pop	{r7, pc}
 8012430:	58000c00 	.word	0x58000c00

08012434 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8012434:	b580      	push	{r7, lr}
 8012436:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012438:	2102      	movs	r1, #2
 801243a:	4804      	ldr	r0, [pc, #16]	@ (801244c <HW_IPCC_SYS_SendCmd+0x18>)
 801243c:	f7ff fef4 	bl	8012228 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012440:	2102      	movs	r1, #2
 8012442:	4802      	ldr	r0, [pc, #8]	@ (801244c <HW_IPCC_SYS_SendCmd+0x18>)
 8012444:	f7ff feab 	bl	801219e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8012448:	bf00      	nop
}
 801244a:	bd80      	pop	{r7, pc}
 801244c:	58000c00 	.word	0x58000c00

08012450 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8012450:	b580      	push	{r7, lr}
 8012452:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8012454:	2102      	movs	r1, #2
 8012456:	4803      	ldr	r0, [pc, #12]	@ (8012464 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8012458:	f7ff feb4 	bl	80121c4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801245c:	f7fd fe60 	bl	8010120 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8012460:	bf00      	nop
}
 8012462:	bd80      	pop	{r7, pc}
 8012464:	58000c00 	.word	0x58000c00

08012468 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8012468:	b580      	push	{r7, lr}
 801246a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801246c:	f7fd fe6e 	bl	801014c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8012470:	2102      	movs	r1, #2
 8012472:	4802      	ldr	r0, [pc, #8]	@ (801247c <HW_IPCC_SYS_EvtHandler+0x14>)
 8012474:	f7ff feca 	bl	801220c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012478:	bf00      	nop
}
 801247a:	bd80      	pop	{r7, pc}
 801247c:	58000c00 	.word	0x58000c00

08012480 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8012480:	b580      	push	{r7, lr}
 8012482:	b082      	sub	sp, #8
 8012484:	af00      	add	r7, sp, #0
 8012486:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8012488:	2108      	movs	r1, #8
 801248a:	480c      	ldr	r0, [pc, #48]	@ (80124bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 801248c:	f7ff fedb 	bl	8012246 <LL_C1_IPCC_IsActiveFlag_CHx>
 8012490:	4603      	mov	r3, r0
 8012492:	2b00      	cmp	r3, #0
 8012494:	d007      	beq.n	80124a6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8012496:	4a0a      	ldr	r2, [pc, #40]	@ (80124c0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 801249c:	2108      	movs	r1, #8
 801249e:	4807      	ldr	r0, [pc, #28]	@ (80124bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80124a0:	f7ff fe7d 	bl	801219e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80124a4:	e006      	b.n	80124b4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80124aa:	2108      	movs	r1, #8
 80124ac:	4803      	ldr	r0, [pc, #12]	@ (80124bc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80124ae:	f7ff febb 	bl	8012228 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80124b2:	bf00      	nop
}
 80124b4:	3708      	adds	r7, #8
 80124b6:	46bd      	mov	sp, r7
 80124b8:	bd80      	pop	{r7, pc}
 80124ba:	bf00      	nop
 80124bc:	58000c00 	.word	0x58000c00
 80124c0:	20000bc0 	.word	0x20000bc0

080124c4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80124c4:	b580      	push	{r7, lr}
 80124c6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80124c8:	2108      	movs	r1, #8
 80124ca:	4806      	ldr	r0, [pc, #24]	@ (80124e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80124cc:	f7ff fe7a 	bl	80121c4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80124d0:	4b05      	ldr	r3, [pc, #20]	@ (80124e8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80124d6:	2108      	movs	r1, #8
 80124d8:	4802      	ldr	r0, [pc, #8]	@ (80124e4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80124da:	f7ff fea5 	bl	8012228 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80124de:	bf00      	nop
}
 80124e0:	bd80      	pop	{r7, pc}
 80124e2:	bf00      	nop
 80124e4:	58000c00 	.word	0x58000c00
 80124e8:	20000bc0 	.word	0x20000bc0

080124ec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80124f0:	2108      	movs	r1, #8
 80124f2:	4802      	ldr	r0, [pc, #8]	@ (80124fc <HW_IPCC_TRACES_Init+0x10>)
 80124f4:	f7ff fe78 	bl	80121e8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80124f8:	bf00      	nop
}
 80124fa:	bd80      	pop	{r7, pc}
 80124fc:	58000c00 	.word	0x58000c00

08012500 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8012500:	b580      	push	{r7, lr}
 8012502:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8012504:	f7fd feca 	bl	801029c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8012508:	2108      	movs	r1, #8
 801250a:	4802      	ldr	r0, [pc, #8]	@ (8012514 <HW_IPCC_TRACES_EvtHandler+0x14>)
 801250c:	f7ff fe7e 	bl	801220c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8012510:	bf00      	nop
}
 8012512:	bd80      	pop	{r7, pc}
 8012514:	58000c00 	.word	0x58000c00

08012518 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012518:	b480      	push	{r7}
 801251a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801251c:	4b05      	ldr	r3, [pc, #20]	@ (8012534 <UTIL_LPM_Init+0x1c>)
 801251e:	2200      	movs	r2, #0
 8012520:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012522:	4b05      	ldr	r3, [pc, #20]	@ (8012538 <UTIL_LPM_Init+0x20>)
 8012524:	2200      	movs	r2, #0
 8012526:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012528:	bf00      	nop
 801252a:	46bd      	mov	sp, r7
 801252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012530:	4770      	bx	lr
 8012532:	bf00      	nop
 8012534:	20000bc4 	.word	0x20000bc4
 8012538:	20000bc8 	.word	0x20000bc8

0801253c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801253c:	b480      	push	{r7}
 801253e:	b087      	sub	sp, #28
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	460b      	mov	r3, r1
 8012546:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012548:	f3ef 8310 	mrs	r3, PRIMASK
 801254c:	613b      	str	r3, [r7, #16]
  return(result);
 801254e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8012550:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012552:	b672      	cpsid	i
}
 8012554:	bf00      	nop
  
  switch(state)
 8012556:	78fb      	ldrb	r3, [r7, #3]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d008      	beq.n	801256e <UTIL_LPM_SetOffMode+0x32>
 801255c:	2b01      	cmp	r3, #1
 801255e:	d10e      	bne.n	801257e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012560:	4b0d      	ldr	r3, [pc, #52]	@ (8012598 <UTIL_LPM_SetOffMode+0x5c>)
 8012562:	681a      	ldr	r2, [r3, #0]
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	4313      	orrs	r3, r2
 8012568:	4a0b      	ldr	r2, [pc, #44]	@ (8012598 <UTIL_LPM_SetOffMode+0x5c>)
 801256a:	6013      	str	r3, [r2, #0]
      break;
 801256c:	e008      	b.n	8012580 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	43da      	mvns	r2, r3
 8012572:	4b09      	ldr	r3, [pc, #36]	@ (8012598 <UTIL_LPM_SetOffMode+0x5c>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4013      	ands	r3, r2
 8012578:	4a07      	ldr	r2, [pc, #28]	@ (8012598 <UTIL_LPM_SetOffMode+0x5c>)
 801257a:	6013      	str	r3, [r2, #0]
      break;
 801257c:	e000      	b.n	8012580 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801257e:	bf00      	nop
 8012580:	697b      	ldr	r3, [r7, #20]
 8012582:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	f383 8810 	msr	PRIMASK, r3
}
 801258a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801258c:	bf00      	nop
 801258e:	371c      	adds	r7, #28
 8012590:	46bd      	mov	sp, r7
 8012592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012596:	4770      	bx	lr
 8012598:	20000bc8 	.word	0x20000bc8

0801259c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b090      	sub	sp, #64	@ 0x40
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80125a4:	4b73      	ldr	r3, [pc, #460]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 80125aa:	4b72      	ldr	r3, [pc, #456]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 80125ac:	681a      	ldr	r2, [r3, #0]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	4013      	ands	r3, r2
 80125b2:	4a70      	ldr	r2, [pc, #448]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 80125b4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80125b6:	4b70      	ldr	r3, [pc, #448]	@ (8012778 <UTIL_SEQ_Run+0x1dc>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80125bc:	4b6f      	ldr	r3, [pc, #444]	@ (801277c <UTIL_SEQ_Run+0x1e0>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80125c2:	4b6f      	ldr	r3, [pc, #444]	@ (8012780 <UTIL_SEQ_Run+0x1e4>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80125c8:	4b6e      	ldr	r3, [pc, #440]	@ (8012784 <UTIL_SEQ_Run+0x1e8>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80125ce:	e08d      	b.n	80126ec <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80125d0:	2300      	movs	r3, #0
 80125d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80125d4:	e002      	b.n	80125dc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80125d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125d8:	3301      	adds	r3, #1
 80125da:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80125dc:	4a6a      	ldr	r2, [pc, #424]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 80125de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80125e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125e6:	401a      	ands	r2, r3
 80125e8:	4b62      	ldr	r3, [pc, #392]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	4013      	ands	r3, r2
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d0f1      	beq.n	80125d6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80125f2:	4a65      	ldr	r2, [pc, #404]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 80125f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125f6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80125fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125fc:	401a      	ands	r2, r3
 80125fe:	4b5d      	ldr	r3, [pc, #372]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	4013      	ands	r3, r2
 8012604:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8012606:	4a60      	ldr	r2, [pc, #384]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 8012608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801260a:	00db      	lsls	r3, r3, #3
 801260c:	4413      	add	r3, r2
 801260e:	685a      	ldr	r2, [r3, #4]
 8012610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012612:	4013      	ands	r3, r2
 8012614:	2b00      	cmp	r3, #0
 8012616:	d106      	bne.n	8012626 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012618:	4a5b      	ldr	r2, [pc, #364]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 801261a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801261c:	00db      	lsls	r3, r3, #3
 801261e:	4413      	add	r3, r2
 8012620:	f04f 32ff 	mov.w	r2, #4294967295
 8012624:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012626:	4a58      	ldr	r2, [pc, #352]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 8012628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801262a:	00db      	lsls	r3, r3, #3
 801262c:	4413      	add	r3, r2
 801262e:	685a      	ldr	r2, [r3, #4]
 8012630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012632:	4013      	ands	r3, r2
 8012634:	4618      	mov	r0, r3
 8012636:	f000 f9b3 	bl	80129a0 <SEQ_BitPosition>
 801263a:	4603      	mov	r3, r0
 801263c:	461a      	mov	r2, r3
 801263e:	4b53      	ldr	r3, [pc, #332]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 8012640:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012642:	4a51      	ldr	r2, [pc, #324]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 8012644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012646:	00db      	lsls	r3, r3, #3
 8012648:	4413      	add	r3, r2
 801264a:	685a      	ldr	r2, [r3, #4]
 801264c:	4b4f      	ldr	r3, [pc, #316]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 801264e:	681b      	ldr	r3, [r3, #0]
 8012650:	2101      	movs	r1, #1
 8012652:	fa01 f303 	lsl.w	r3, r1, r3
 8012656:	43db      	mvns	r3, r3
 8012658:	401a      	ands	r2, r3
 801265a:	494b      	ldr	r1, [pc, #300]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 801265c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801265e:	00db      	lsls	r3, r3, #3
 8012660:	440b      	add	r3, r1
 8012662:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012664:	f3ef 8310 	mrs	r3, PRIMASK
 8012668:	61bb      	str	r3, [r7, #24]
  return(result);
 801266a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801266c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801266e:	b672      	cpsid	i
}
 8012670:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012672:	4b46      	ldr	r3, [pc, #280]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2201      	movs	r2, #1
 8012678:	fa02 f303 	lsl.w	r3, r2, r3
 801267c:	43da      	mvns	r2, r3
 801267e:	4b3e      	ldr	r3, [pc, #248]	@ (8012778 <UTIL_SEQ_Run+0x1dc>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	4013      	ands	r3, r2
 8012684:	4a3c      	ldr	r2, [pc, #240]	@ (8012778 <UTIL_SEQ_Run+0x1dc>)
 8012686:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012688:	2302      	movs	r3, #2
 801268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801268c:	e013      	b.n	80126b6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801268e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012690:	3b01      	subs	r3, #1
 8012692:	4a3d      	ldr	r2, [pc, #244]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 8012694:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012698:	4b3c      	ldr	r3, [pc, #240]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	2201      	movs	r2, #1
 801269e:	fa02 f303 	lsl.w	r3, r2, r3
 80126a2:	43da      	mvns	r2, r3
 80126a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a6:	3b01      	subs	r3, #1
 80126a8:	400a      	ands	r2, r1
 80126aa:	4937      	ldr	r1, [pc, #220]	@ (8012788 <UTIL_SEQ_Run+0x1ec>)
 80126ac:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80126b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126b2:	3b01      	subs	r3, #1
 80126b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d1e8      	bne.n	801268e <UTIL_SEQ_Run+0xf2>
 80126bc:	6a3b      	ldr	r3, [r7, #32]
 80126be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126c0:	697b      	ldr	r3, [r7, #20]
 80126c2:	f383 8810 	msr	PRIMASK, r3
}
 80126c6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80126c8:	4b30      	ldr	r3, [pc, #192]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	4a30      	ldr	r2, [pc, #192]	@ (8012790 <UTIL_SEQ_Run+0x1f4>)
 80126ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126d2:	4798      	blx	r3

    local_taskset = TaskSet;
 80126d4:	4b28      	ldr	r3, [pc, #160]	@ (8012778 <UTIL_SEQ_Run+0x1dc>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80126da:	4b28      	ldr	r3, [pc, #160]	@ (801277c <UTIL_SEQ_Run+0x1e0>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80126e0:	4b27      	ldr	r3, [pc, #156]	@ (8012780 <UTIL_SEQ_Run+0x1e4>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80126e6:	4b27      	ldr	r3, [pc, #156]	@ (8012784 <UTIL_SEQ_Run+0x1e8>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80126ec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126f0:	401a      	ands	r2, r3
 80126f2:	4b20      	ldr	r3, [pc, #128]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4013      	ands	r3, r2
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d005      	beq.n	8012708 <UTIL_SEQ_Run+0x16c>
 80126fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012700:	4013      	ands	r3, r2
 8012702:	2b00      	cmp	r3, #0
 8012704:	f43f af64 	beq.w	80125d0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012708:	4b20      	ldr	r3, [pc, #128]	@ (801278c <UTIL_SEQ_Run+0x1f0>)
 801270a:	f04f 32ff 	mov.w	r2, #4294967295
 801270e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012710:	f000 f938 	bl	8012984 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012714:	f3ef 8310 	mrs	r3, PRIMASK
 8012718:	613b      	str	r3, [r7, #16]
  return(result);
 801271a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801271c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801271e:	b672      	cpsid	i
}
 8012720:	bf00      	nop
  local_taskset = TaskSet;
 8012722:	4b15      	ldr	r3, [pc, #84]	@ (8012778 <UTIL_SEQ_Run+0x1dc>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012728:	4b14      	ldr	r3, [pc, #80]	@ (801277c <UTIL_SEQ_Run+0x1e0>)
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801272e:	4b14      	ldr	r3, [pc, #80]	@ (8012780 <UTIL_SEQ_Run+0x1e4>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012734:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012738:	401a      	ands	r2, r3
 801273a:	4b0e      	ldr	r3, [pc, #56]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	4013      	ands	r3, r2
 8012740:	2b00      	cmp	r3, #0
 8012742:	d107      	bne.n	8012754 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8012744:	4b0f      	ldr	r3, [pc, #60]	@ (8012784 <UTIL_SEQ_Run+0x1e8>)
 8012746:	681a      	ldr	r2, [r3, #0]
 8012748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801274a:	4013      	ands	r3, r2
 801274c:	2b00      	cmp	r3, #0
 801274e:	d101      	bne.n	8012754 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8012750:	f7ef fb8b 	bl	8001e6a <UTIL_SEQ_Idle>
 8012754:	69fb      	ldr	r3, [r7, #28]
 8012756:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	f383 8810 	msr	PRIMASK, r3
}
 801275e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8012760:	f000 f917 	bl	8012992 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8012764:	4a03      	ldr	r2, [pc, #12]	@ (8012774 <UTIL_SEQ_Run+0x1d8>)
 8012766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012768:	6013      	str	r3, [r2, #0]

  return;
 801276a:	bf00      	nop
}
 801276c:	3740      	adds	r7, #64	@ 0x40
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}
 8012772:	bf00      	nop
 8012774:	2000010c 	.word	0x2000010c
 8012778:	20000bcc 	.word	0x20000bcc
 801277c:	20000bd0 	.word	0x20000bd0
 8012780:	20000108 	.word	0x20000108
 8012784:	20000bd4 	.word	0x20000bd4
 8012788:	20000c5c 	.word	0x20000c5c
 801278c:	20000bd8 	.word	0x20000bd8
 8012790:	20000bdc 	.word	0x20000bdc

08012794 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b088      	sub	sp, #32
 8012798:	af00      	add	r7, sp, #0
 801279a:	60f8      	str	r0, [r7, #12]
 801279c:	60b9      	str	r1, [r7, #8]
 801279e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127a0:	f3ef 8310 	mrs	r3, PRIMASK
 80127a4:	617b      	str	r3, [r7, #20]
  return(result);
 80127a6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80127a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80127aa:	b672      	cpsid	i
}
 80127ac:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80127ae:	68f8      	ldr	r0, [r7, #12]
 80127b0:	f000 f8f6 	bl	80129a0 <SEQ_BitPosition>
 80127b4:	4603      	mov	r3, r0
 80127b6:	4619      	mov	r1, r3
 80127b8:	4a06      	ldr	r2, [pc, #24]	@ (80127d4 <UTIL_SEQ_RegTask+0x40>)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127c4:	69bb      	ldr	r3, [r7, #24]
 80127c6:	f383 8810 	msr	PRIMASK, r3
}
 80127ca:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80127cc:	bf00      	nop
}
 80127ce:	3720      	adds	r7, #32
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	20000bdc 	.word	0x20000bdc

080127d8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80127d8:	b480      	push	{r7}
 80127da:	b087      	sub	sp, #28
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127e2:	f3ef 8310 	mrs	r3, PRIMASK
 80127e6:	60fb      	str	r3, [r7, #12]
  return(result);
 80127e8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80127ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80127ec:	b672      	cpsid	i
}
 80127ee:	bf00      	nop

  TaskSet |= TaskId_bm;
 80127f0:	4b0d      	ldr	r3, [pc, #52]	@ (8012828 <UTIL_SEQ_SetTask+0x50>)
 80127f2:	681a      	ldr	r2, [r3, #0]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	4313      	orrs	r3, r2
 80127f8:	4a0b      	ldr	r2, [pc, #44]	@ (8012828 <UTIL_SEQ_SetTask+0x50>)
 80127fa:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80127fc:	4a0b      	ldr	r2, [pc, #44]	@ (801282c <UTIL_SEQ_SetTask+0x54>)
 80127fe:	683b      	ldr	r3, [r7, #0]
 8012800:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	431a      	orrs	r2, r3
 8012808:	4908      	ldr	r1, [pc, #32]	@ (801282c <UTIL_SEQ_SetTask+0x54>)
 801280a:	683b      	ldr	r3, [r7, #0]
 801280c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012810:	697b      	ldr	r3, [r7, #20]
 8012812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012814:	693b      	ldr	r3, [r7, #16]
 8012816:	f383 8810 	msr	PRIMASK, r3
}
 801281a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801281c:	bf00      	nop
}
 801281e:	371c      	adds	r7, #28
 8012820:	46bd      	mov	sp, r7
 8012822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012826:	4770      	bx	lr
 8012828:	20000bcc 	.word	0x20000bcc
 801282c:	20000c5c 	.word	0x20000c5c

08012830 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012830:	b480      	push	{r7}
 8012832:	b087      	sub	sp, #28
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012838:	f3ef 8310 	mrs	r3, PRIMASK
 801283c:	60fb      	str	r3, [r7, #12]
  return(result);
 801283e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012840:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012842:	b672      	cpsid	i
}
 8012844:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	43da      	mvns	r2, r3
 801284a:	4b08      	ldr	r3, [pc, #32]	@ (801286c <UTIL_SEQ_PauseTask+0x3c>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	4013      	ands	r3, r2
 8012850:	4a06      	ldr	r2, [pc, #24]	@ (801286c <UTIL_SEQ_PauseTask+0x3c>)
 8012852:	6013      	str	r3, [r2, #0]
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012858:	693b      	ldr	r3, [r7, #16]
 801285a:	f383 8810 	msr	PRIMASK, r3
}
 801285e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012860:	bf00      	nop
}
 8012862:	371c      	adds	r7, #28
 8012864:	46bd      	mov	sp, r7
 8012866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801286a:	4770      	bx	lr
 801286c:	20000108 	.word	0x20000108

08012870 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012870:	b480      	push	{r7}
 8012872:	b087      	sub	sp, #28
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012878:	f3ef 8310 	mrs	r3, PRIMASK
 801287c:	60fb      	str	r3, [r7, #12]
  return(result);
 801287e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012882:	b672      	cpsid	i
}
 8012884:	bf00      	nop

  TaskMask |= TaskId_bm;
 8012886:	4b09      	ldr	r3, [pc, #36]	@ (80128ac <UTIL_SEQ_ResumeTask+0x3c>)
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4313      	orrs	r3, r2
 801288e:	4a07      	ldr	r2, [pc, #28]	@ (80128ac <UTIL_SEQ_ResumeTask+0x3c>)
 8012890:	6013      	str	r3, [r2, #0]
 8012892:	697b      	ldr	r3, [r7, #20]
 8012894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012896:	693b      	ldr	r3, [r7, #16]
 8012898:	f383 8810 	msr	PRIMASK, r3
}
 801289c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801289e:	bf00      	nop
}
 80128a0:	371c      	adds	r7, #28
 80128a2:	46bd      	mov	sp, r7
 80128a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a8:	4770      	bx	lr
 80128aa:	bf00      	nop
 80128ac:	20000108 	.word	0x20000108

080128b0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80128b0:	b480      	push	{r7}
 80128b2:	b087      	sub	sp, #28
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128b8:	f3ef 8310 	mrs	r3, PRIMASK
 80128bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80128be:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80128c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128c2:	b672      	cpsid	i
}
 80128c4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80128c6:	4b09      	ldr	r3, [pc, #36]	@ (80128ec <UTIL_SEQ_SetEvt+0x3c>)
 80128c8:	681a      	ldr	r2, [r3, #0]
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	4313      	orrs	r3, r2
 80128ce:	4a07      	ldr	r2, [pc, #28]	@ (80128ec <UTIL_SEQ_SetEvt+0x3c>)
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128d6:	693b      	ldr	r3, [r7, #16]
 80128d8:	f383 8810 	msr	PRIMASK, r3
}
 80128dc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128de:	bf00      	nop
}
 80128e0:	371c      	adds	r7, #28
 80128e2:	46bd      	mov	sp, r7
 80128e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e8:	4770      	bx	lr
 80128ea:	bf00      	nop
 80128ec:	20000bd0 	.word	0x20000bd0

080128f0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80128f0:	b580      	push	{r7, lr}
 80128f2:	b088      	sub	sp, #32
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80128f8:	4b1f      	ldr	r3, [pc, #124]	@ (8012978 <UTIL_SEQ_WaitEvt+0x88>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80128fe:	4b1e      	ldr	r3, [pc, #120]	@ (8012978 <UTIL_SEQ_WaitEvt+0x88>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012906:	d102      	bne.n	801290e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012908:	2300      	movs	r3, #0
 801290a:	61fb      	str	r3, [r7, #28]
 801290c:	e005      	b.n	801291a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801290e:	4b1a      	ldr	r3, [pc, #104]	@ (8012978 <UTIL_SEQ_WaitEvt+0x88>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2201      	movs	r2, #1
 8012914:	fa02 f303 	lsl.w	r3, r2, r3
 8012918:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801291a:	4b18      	ldr	r3, [pc, #96]	@ (801297c <UTIL_SEQ_WaitEvt+0x8c>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012920:	4a16      	ldr	r2, [pc, #88]	@ (801297c <UTIL_SEQ_WaitEvt+0x8c>)
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8012926:	e003      	b.n	8012930 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012928:	6879      	ldr	r1, [r7, #4]
 801292a:	69f8      	ldr	r0, [r7, #28]
 801292c:	f7ef faa4 	bl	8001e78 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012930:	4b13      	ldr	r3, [pc, #76]	@ (8012980 <UTIL_SEQ_WaitEvt+0x90>)
 8012932:	681a      	ldr	r2, [r3, #0]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	4013      	ands	r3, r2
 8012938:	2b00      	cmp	r3, #0
 801293a:	d0f5      	beq.n	8012928 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801293c:	4a0e      	ldr	r2, [pc, #56]	@ (8012978 <UTIL_SEQ_WaitEvt+0x88>)
 801293e:	69bb      	ldr	r3, [r7, #24]
 8012940:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012942:	f3ef 8310 	mrs	r3, PRIMASK
 8012946:	60bb      	str	r3, [r7, #8]
  return(result);
 8012948:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801294a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801294c:	b672      	cpsid	i
}
 801294e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	43da      	mvns	r2, r3
 8012954:	4b0a      	ldr	r3, [pc, #40]	@ (8012980 <UTIL_SEQ_WaitEvt+0x90>)
 8012956:	681b      	ldr	r3, [r3, #0]
 8012958:	4013      	ands	r3, r2
 801295a:	4a09      	ldr	r2, [pc, #36]	@ (8012980 <UTIL_SEQ_WaitEvt+0x90>)
 801295c:	6013      	str	r3, [r2, #0]
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	f383 8810 	msr	PRIMASK, r3
}
 8012968:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801296a:	4a04      	ldr	r2, [pc, #16]	@ (801297c <UTIL_SEQ_WaitEvt+0x8c>)
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	6013      	str	r3, [r2, #0]
  return;
 8012970:	bf00      	nop
}
 8012972:	3720      	adds	r7, #32
 8012974:	46bd      	mov	sp, r7
 8012976:	bd80      	pop	{r7, pc}
 8012978:	20000bd8 	.word	0x20000bd8
 801297c:	20000bd4 	.word	0x20000bd4
 8012980:	20000bd0 	.word	0x20000bd0

08012984 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012984:	b480      	push	{r7}
 8012986:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012988:	bf00      	nop
}
 801298a:	46bd      	mov	sp, r7
 801298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012990:	4770      	bx	lr

08012992 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012992:	b480      	push	{r7}
 8012994:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012996:	bf00      	nop
}
 8012998:	46bd      	mov	sp, r7
 801299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299e:	4770      	bx	lr

080129a0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80129a0:	b480      	push	{r7}
 80129a2:	b085      	sub	sp, #20
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80129a8:	2300      	movs	r3, #0
 80129aa:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129b6:	d204      	bcs.n	80129c2 <SEQ_BitPosition+0x22>
 80129b8:	2310      	movs	r3, #16
 80129ba:	73fb      	strb	r3, [r7, #15]
 80129bc:	68bb      	ldr	r3, [r7, #8]
 80129be:	041b      	lsls	r3, r3, #16
 80129c0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129c8:	d205      	bcs.n	80129d6 <SEQ_BitPosition+0x36>
 80129ca:	7bfb      	ldrb	r3, [r7, #15]
 80129cc:	3308      	adds	r3, #8
 80129ce:	73fb      	strb	r3, [r7, #15]
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	021b      	lsls	r3, r3, #8
 80129d4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80129d6:	68bb      	ldr	r3, [r7, #8]
 80129d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129dc:	d205      	bcs.n	80129ea <SEQ_BitPosition+0x4a>
 80129de:	7bfb      	ldrb	r3, [r7, #15]
 80129e0:	3304      	adds	r3, #4
 80129e2:	73fb      	strb	r3, [r7, #15]
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	011b      	lsls	r3, r3, #4
 80129e8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	0f1b      	lsrs	r3, r3, #28
 80129ee:	4a07      	ldr	r2, [pc, #28]	@ (8012a0c <SEQ_BitPosition+0x6c>)
 80129f0:	5cd2      	ldrb	r2, [r2, r3]
 80129f2:	7bfb      	ldrb	r3, [r7, #15]
 80129f4:	4413      	add	r3, r2
 80129f6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80129f8:	7bfb      	ldrb	r3, [r7, #15]
 80129fa:	f1c3 031f 	rsb	r3, r3, #31
 80129fe:	b2db      	uxtb	r3, r3
}
 8012a00:	4618      	mov	r0, r3
 8012a02:	3714      	adds	r7, #20
 8012a04:	46bd      	mov	sp, r7
 8012a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a0a:	4770      	bx	lr
 8012a0c:	08015728 	.word	0x08015728

08012a10 <std>:
 8012a10:	2300      	movs	r3, #0
 8012a12:	b510      	push	{r4, lr}
 8012a14:	4604      	mov	r4, r0
 8012a16:	e9c0 3300 	strd	r3, r3, [r0]
 8012a1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a1e:	6083      	str	r3, [r0, #8]
 8012a20:	8181      	strh	r1, [r0, #12]
 8012a22:	6643      	str	r3, [r0, #100]	@ 0x64
 8012a24:	81c2      	strh	r2, [r0, #14]
 8012a26:	6183      	str	r3, [r0, #24]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	2208      	movs	r2, #8
 8012a2c:	305c      	adds	r0, #92	@ 0x5c
 8012a2e:	f000 fa01 	bl	8012e34 <memset>
 8012a32:	4b0d      	ldr	r3, [pc, #52]	@ (8012a68 <std+0x58>)
 8012a34:	6263      	str	r3, [r4, #36]	@ 0x24
 8012a36:	4b0d      	ldr	r3, [pc, #52]	@ (8012a6c <std+0x5c>)
 8012a38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a70 <std+0x60>)
 8012a3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a74 <std+0x64>)
 8012a40:	6323      	str	r3, [r4, #48]	@ 0x30
 8012a42:	4b0d      	ldr	r3, [pc, #52]	@ (8012a78 <std+0x68>)
 8012a44:	6224      	str	r4, [r4, #32]
 8012a46:	429c      	cmp	r4, r3
 8012a48:	d006      	beq.n	8012a58 <std+0x48>
 8012a4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012a4e:	4294      	cmp	r4, r2
 8012a50:	d002      	beq.n	8012a58 <std+0x48>
 8012a52:	33d0      	adds	r3, #208	@ 0xd0
 8012a54:	429c      	cmp	r4, r3
 8012a56:	d105      	bne.n	8012a64 <std+0x54>
 8012a58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a60:	f000 ba76 	b.w	8012f50 <__retarget_lock_init_recursive>
 8012a64:	bd10      	pop	{r4, pc}
 8012a66:	bf00      	nop
 8012a68:	08012c85 	.word	0x08012c85
 8012a6c:	08012ca7 	.word	0x08012ca7
 8012a70:	08012cdf 	.word	0x08012cdf
 8012a74:	08012d03 	.word	0x08012d03
 8012a78:	20000c6c 	.word	0x20000c6c

08012a7c <stdio_exit_handler>:
 8012a7c:	4a02      	ldr	r2, [pc, #8]	@ (8012a88 <stdio_exit_handler+0xc>)
 8012a7e:	4903      	ldr	r1, [pc, #12]	@ (8012a8c <stdio_exit_handler+0x10>)
 8012a80:	4803      	ldr	r0, [pc, #12]	@ (8012a90 <stdio_exit_handler+0x14>)
 8012a82:	f000 b869 	b.w	8012b58 <_fwalk_sglue>
 8012a86:	bf00      	nop
 8012a88:	20000110 	.word	0x20000110
 8012a8c:	0801380d 	.word	0x0801380d
 8012a90:	20000120 	.word	0x20000120

08012a94 <cleanup_stdio>:
 8012a94:	6841      	ldr	r1, [r0, #4]
 8012a96:	4b0c      	ldr	r3, [pc, #48]	@ (8012ac8 <cleanup_stdio+0x34>)
 8012a98:	4299      	cmp	r1, r3
 8012a9a:	b510      	push	{r4, lr}
 8012a9c:	4604      	mov	r4, r0
 8012a9e:	d001      	beq.n	8012aa4 <cleanup_stdio+0x10>
 8012aa0:	f000 feb4 	bl	801380c <_fflush_r>
 8012aa4:	68a1      	ldr	r1, [r4, #8]
 8012aa6:	4b09      	ldr	r3, [pc, #36]	@ (8012acc <cleanup_stdio+0x38>)
 8012aa8:	4299      	cmp	r1, r3
 8012aaa:	d002      	beq.n	8012ab2 <cleanup_stdio+0x1e>
 8012aac:	4620      	mov	r0, r4
 8012aae:	f000 fead 	bl	801380c <_fflush_r>
 8012ab2:	68e1      	ldr	r1, [r4, #12]
 8012ab4:	4b06      	ldr	r3, [pc, #24]	@ (8012ad0 <cleanup_stdio+0x3c>)
 8012ab6:	4299      	cmp	r1, r3
 8012ab8:	d004      	beq.n	8012ac4 <cleanup_stdio+0x30>
 8012aba:	4620      	mov	r0, r4
 8012abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ac0:	f000 bea4 	b.w	801380c <_fflush_r>
 8012ac4:	bd10      	pop	{r4, pc}
 8012ac6:	bf00      	nop
 8012ac8:	20000c6c 	.word	0x20000c6c
 8012acc:	20000cd4 	.word	0x20000cd4
 8012ad0:	20000d3c 	.word	0x20000d3c

08012ad4 <global_stdio_init.part.0>:
 8012ad4:	b510      	push	{r4, lr}
 8012ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8012b04 <global_stdio_init.part.0+0x30>)
 8012ad8:	4c0b      	ldr	r4, [pc, #44]	@ (8012b08 <global_stdio_init.part.0+0x34>)
 8012ada:	4a0c      	ldr	r2, [pc, #48]	@ (8012b0c <global_stdio_init.part.0+0x38>)
 8012adc:	601a      	str	r2, [r3, #0]
 8012ade:	4620      	mov	r0, r4
 8012ae0:	2200      	movs	r2, #0
 8012ae2:	2104      	movs	r1, #4
 8012ae4:	f7ff ff94 	bl	8012a10 <std>
 8012ae8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012aec:	2201      	movs	r2, #1
 8012aee:	2109      	movs	r1, #9
 8012af0:	f7ff ff8e 	bl	8012a10 <std>
 8012af4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012af8:	2202      	movs	r2, #2
 8012afa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012afe:	2112      	movs	r1, #18
 8012b00:	f7ff bf86 	b.w	8012a10 <std>
 8012b04:	20000da4 	.word	0x20000da4
 8012b08:	20000c6c 	.word	0x20000c6c
 8012b0c:	08012a7d 	.word	0x08012a7d

08012b10 <__sfp_lock_acquire>:
 8012b10:	4801      	ldr	r0, [pc, #4]	@ (8012b18 <__sfp_lock_acquire+0x8>)
 8012b12:	f000 ba1e 	b.w	8012f52 <__retarget_lock_acquire_recursive>
 8012b16:	bf00      	nop
 8012b18:	20000dad 	.word	0x20000dad

08012b1c <__sfp_lock_release>:
 8012b1c:	4801      	ldr	r0, [pc, #4]	@ (8012b24 <__sfp_lock_release+0x8>)
 8012b1e:	f000 ba19 	b.w	8012f54 <__retarget_lock_release_recursive>
 8012b22:	bf00      	nop
 8012b24:	20000dad 	.word	0x20000dad

08012b28 <__sinit>:
 8012b28:	b510      	push	{r4, lr}
 8012b2a:	4604      	mov	r4, r0
 8012b2c:	f7ff fff0 	bl	8012b10 <__sfp_lock_acquire>
 8012b30:	6a23      	ldr	r3, [r4, #32]
 8012b32:	b11b      	cbz	r3, 8012b3c <__sinit+0x14>
 8012b34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b38:	f7ff bff0 	b.w	8012b1c <__sfp_lock_release>
 8012b3c:	4b04      	ldr	r3, [pc, #16]	@ (8012b50 <__sinit+0x28>)
 8012b3e:	6223      	str	r3, [r4, #32]
 8012b40:	4b04      	ldr	r3, [pc, #16]	@ (8012b54 <__sinit+0x2c>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d1f5      	bne.n	8012b34 <__sinit+0xc>
 8012b48:	f7ff ffc4 	bl	8012ad4 <global_stdio_init.part.0>
 8012b4c:	e7f2      	b.n	8012b34 <__sinit+0xc>
 8012b4e:	bf00      	nop
 8012b50:	08012a95 	.word	0x08012a95
 8012b54:	20000da4 	.word	0x20000da4

08012b58 <_fwalk_sglue>:
 8012b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b5c:	4607      	mov	r7, r0
 8012b5e:	4688      	mov	r8, r1
 8012b60:	4614      	mov	r4, r2
 8012b62:	2600      	movs	r6, #0
 8012b64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b68:	f1b9 0901 	subs.w	r9, r9, #1
 8012b6c:	d505      	bpl.n	8012b7a <_fwalk_sglue+0x22>
 8012b6e:	6824      	ldr	r4, [r4, #0]
 8012b70:	2c00      	cmp	r4, #0
 8012b72:	d1f7      	bne.n	8012b64 <_fwalk_sglue+0xc>
 8012b74:	4630      	mov	r0, r6
 8012b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b7a:	89ab      	ldrh	r3, [r5, #12]
 8012b7c:	2b01      	cmp	r3, #1
 8012b7e:	d907      	bls.n	8012b90 <_fwalk_sglue+0x38>
 8012b80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b84:	3301      	adds	r3, #1
 8012b86:	d003      	beq.n	8012b90 <_fwalk_sglue+0x38>
 8012b88:	4629      	mov	r1, r5
 8012b8a:	4638      	mov	r0, r7
 8012b8c:	47c0      	blx	r8
 8012b8e:	4306      	orrs	r6, r0
 8012b90:	3568      	adds	r5, #104	@ 0x68
 8012b92:	e7e9      	b.n	8012b68 <_fwalk_sglue+0x10>

08012b94 <iprintf>:
 8012b94:	b40f      	push	{r0, r1, r2, r3}
 8012b96:	b507      	push	{r0, r1, r2, lr}
 8012b98:	4906      	ldr	r1, [pc, #24]	@ (8012bb4 <iprintf+0x20>)
 8012b9a:	ab04      	add	r3, sp, #16
 8012b9c:	6808      	ldr	r0, [r1, #0]
 8012b9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ba2:	6881      	ldr	r1, [r0, #8]
 8012ba4:	9301      	str	r3, [sp, #4]
 8012ba6:	f000 fb07 	bl	80131b8 <_vfiprintf_r>
 8012baa:	b003      	add	sp, #12
 8012bac:	f85d eb04 	ldr.w	lr, [sp], #4
 8012bb0:	b004      	add	sp, #16
 8012bb2:	4770      	bx	lr
 8012bb4:	2000011c 	.word	0x2000011c

08012bb8 <putchar>:
 8012bb8:	4b02      	ldr	r3, [pc, #8]	@ (8012bc4 <putchar+0xc>)
 8012bba:	4601      	mov	r1, r0
 8012bbc:	6818      	ldr	r0, [r3, #0]
 8012bbe:	6882      	ldr	r2, [r0, #8]
 8012bc0:	f000 beae 	b.w	8013920 <_putc_r>
 8012bc4:	2000011c 	.word	0x2000011c

08012bc8 <_puts_r>:
 8012bc8:	6a03      	ldr	r3, [r0, #32]
 8012bca:	b570      	push	{r4, r5, r6, lr}
 8012bcc:	6884      	ldr	r4, [r0, #8]
 8012bce:	4605      	mov	r5, r0
 8012bd0:	460e      	mov	r6, r1
 8012bd2:	b90b      	cbnz	r3, 8012bd8 <_puts_r+0x10>
 8012bd4:	f7ff ffa8 	bl	8012b28 <__sinit>
 8012bd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012bda:	07db      	lsls	r3, r3, #31
 8012bdc:	d405      	bmi.n	8012bea <_puts_r+0x22>
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	0598      	lsls	r0, r3, #22
 8012be2:	d402      	bmi.n	8012bea <_puts_r+0x22>
 8012be4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012be6:	f000 f9b4 	bl	8012f52 <__retarget_lock_acquire_recursive>
 8012bea:	89a3      	ldrh	r3, [r4, #12]
 8012bec:	0719      	lsls	r1, r3, #28
 8012bee:	d502      	bpl.n	8012bf6 <_puts_r+0x2e>
 8012bf0:	6923      	ldr	r3, [r4, #16]
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d135      	bne.n	8012c62 <_puts_r+0x9a>
 8012bf6:	4621      	mov	r1, r4
 8012bf8:	4628      	mov	r0, r5
 8012bfa:	f000 f8c5 	bl	8012d88 <__swsetup_r>
 8012bfe:	b380      	cbz	r0, 8012c62 <_puts_r+0x9a>
 8012c00:	f04f 35ff 	mov.w	r5, #4294967295
 8012c04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012c06:	07da      	lsls	r2, r3, #31
 8012c08:	d405      	bmi.n	8012c16 <_puts_r+0x4e>
 8012c0a:	89a3      	ldrh	r3, [r4, #12]
 8012c0c:	059b      	lsls	r3, r3, #22
 8012c0e:	d402      	bmi.n	8012c16 <_puts_r+0x4e>
 8012c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012c12:	f000 f99f 	bl	8012f54 <__retarget_lock_release_recursive>
 8012c16:	4628      	mov	r0, r5
 8012c18:	bd70      	pop	{r4, r5, r6, pc}
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	da04      	bge.n	8012c28 <_puts_r+0x60>
 8012c1e:	69a2      	ldr	r2, [r4, #24]
 8012c20:	429a      	cmp	r2, r3
 8012c22:	dc17      	bgt.n	8012c54 <_puts_r+0x8c>
 8012c24:	290a      	cmp	r1, #10
 8012c26:	d015      	beq.n	8012c54 <_puts_r+0x8c>
 8012c28:	6823      	ldr	r3, [r4, #0]
 8012c2a:	1c5a      	adds	r2, r3, #1
 8012c2c:	6022      	str	r2, [r4, #0]
 8012c2e:	7019      	strb	r1, [r3, #0]
 8012c30:	68a3      	ldr	r3, [r4, #8]
 8012c32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012c36:	3b01      	subs	r3, #1
 8012c38:	60a3      	str	r3, [r4, #8]
 8012c3a:	2900      	cmp	r1, #0
 8012c3c:	d1ed      	bne.n	8012c1a <_puts_r+0x52>
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	da11      	bge.n	8012c66 <_puts_r+0x9e>
 8012c42:	4622      	mov	r2, r4
 8012c44:	210a      	movs	r1, #10
 8012c46:	4628      	mov	r0, r5
 8012c48:	f000 f85f 	bl	8012d0a <__swbuf_r>
 8012c4c:	3001      	adds	r0, #1
 8012c4e:	d0d7      	beq.n	8012c00 <_puts_r+0x38>
 8012c50:	250a      	movs	r5, #10
 8012c52:	e7d7      	b.n	8012c04 <_puts_r+0x3c>
 8012c54:	4622      	mov	r2, r4
 8012c56:	4628      	mov	r0, r5
 8012c58:	f000 f857 	bl	8012d0a <__swbuf_r>
 8012c5c:	3001      	adds	r0, #1
 8012c5e:	d1e7      	bne.n	8012c30 <_puts_r+0x68>
 8012c60:	e7ce      	b.n	8012c00 <_puts_r+0x38>
 8012c62:	3e01      	subs	r6, #1
 8012c64:	e7e4      	b.n	8012c30 <_puts_r+0x68>
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	1c5a      	adds	r2, r3, #1
 8012c6a:	6022      	str	r2, [r4, #0]
 8012c6c:	220a      	movs	r2, #10
 8012c6e:	701a      	strb	r2, [r3, #0]
 8012c70:	e7ee      	b.n	8012c50 <_puts_r+0x88>
	...

08012c74 <puts>:
 8012c74:	4b02      	ldr	r3, [pc, #8]	@ (8012c80 <puts+0xc>)
 8012c76:	4601      	mov	r1, r0
 8012c78:	6818      	ldr	r0, [r3, #0]
 8012c7a:	f7ff bfa5 	b.w	8012bc8 <_puts_r>
 8012c7e:	bf00      	nop
 8012c80:	2000011c 	.word	0x2000011c

08012c84 <__sread>:
 8012c84:	b510      	push	{r4, lr}
 8012c86:	460c      	mov	r4, r1
 8012c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c8c:	f000 f912 	bl	8012eb4 <_read_r>
 8012c90:	2800      	cmp	r0, #0
 8012c92:	bfab      	itete	ge
 8012c94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012c96:	89a3      	ldrhlt	r3, [r4, #12]
 8012c98:	181b      	addge	r3, r3, r0
 8012c9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012c9e:	bfac      	ite	ge
 8012ca0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012ca2:	81a3      	strhlt	r3, [r4, #12]
 8012ca4:	bd10      	pop	{r4, pc}

08012ca6 <__swrite>:
 8012ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012caa:	461f      	mov	r7, r3
 8012cac:	898b      	ldrh	r3, [r1, #12]
 8012cae:	05db      	lsls	r3, r3, #23
 8012cb0:	4605      	mov	r5, r0
 8012cb2:	460c      	mov	r4, r1
 8012cb4:	4616      	mov	r6, r2
 8012cb6:	d505      	bpl.n	8012cc4 <__swrite+0x1e>
 8012cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cbc:	2302      	movs	r3, #2
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	f000 f8e6 	bl	8012e90 <_lseek_r>
 8012cc4:	89a3      	ldrh	r3, [r4, #12]
 8012cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012cce:	81a3      	strh	r3, [r4, #12]
 8012cd0:	4632      	mov	r2, r6
 8012cd2:	463b      	mov	r3, r7
 8012cd4:	4628      	mov	r0, r5
 8012cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cda:	f000 b8fd 	b.w	8012ed8 <_write_r>

08012cde <__sseek>:
 8012cde:	b510      	push	{r4, lr}
 8012ce0:	460c      	mov	r4, r1
 8012ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ce6:	f000 f8d3 	bl	8012e90 <_lseek_r>
 8012cea:	1c43      	adds	r3, r0, #1
 8012cec:	89a3      	ldrh	r3, [r4, #12]
 8012cee:	bf15      	itete	ne
 8012cf0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012cf2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012cf6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012cfa:	81a3      	strheq	r3, [r4, #12]
 8012cfc:	bf18      	it	ne
 8012cfe:	81a3      	strhne	r3, [r4, #12]
 8012d00:	bd10      	pop	{r4, pc}

08012d02 <__sclose>:
 8012d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d06:	f000 b8b3 	b.w	8012e70 <_close_r>

08012d0a <__swbuf_r>:
 8012d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012d0c:	460e      	mov	r6, r1
 8012d0e:	4614      	mov	r4, r2
 8012d10:	4605      	mov	r5, r0
 8012d12:	b118      	cbz	r0, 8012d1c <__swbuf_r+0x12>
 8012d14:	6a03      	ldr	r3, [r0, #32]
 8012d16:	b90b      	cbnz	r3, 8012d1c <__swbuf_r+0x12>
 8012d18:	f7ff ff06 	bl	8012b28 <__sinit>
 8012d1c:	69a3      	ldr	r3, [r4, #24]
 8012d1e:	60a3      	str	r3, [r4, #8]
 8012d20:	89a3      	ldrh	r3, [r4, #12]
 8012d22:	071a      	lsls	r2, r3, #28
 8012d24:	d501      	bpl.n	8012d2a <__swbuf_r+0x20>
 8012d26:	6923      	ldr	r3, [r4, #16]
 8012d28:	b943      	cbnz	r3, 8012d3c <__swbuf_r+0x32>
 8012d2a:	4621      	mov	r1, r4
 8012d2c:	4628      	mov	r0, r5
 8012d2e:	f000 f82b 	bl	8012d88 <__swsetup_r>
 8012d32:	b118      	cbz	r0, 8012d3c <__swbuf_r+0x32>
 8012d34:	f04f 37ff 	mov.w	r7, #4294967295
 8012d38:	4638      	mov	r0, r7
 8012d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012d3c:	6823      	ldr	r3, [r4, #0]
 8012d3e:	6922      	ldr	r2, [r4, #16]
 8012d40:	1a98      	subs	r0, r3, r2
 8012d42:	6963      	ldr	r3, [r4, #20]
 8012d44:	b2f6      	uxtb	r6, r6
 8012d46:	4283      	cmp	r3, r0
 8012d48:	4637      	mov	r7, r6
 8012d4a:	dc05      	bgt.n	8012d58 <__swbuf_r+0x4e>
 8012d4c:	4621      	mov	r1, r4
 8012d4e:	4628      	mov	r0, r5
 8012d50:	f000 fd5c 	bl	801380c <_fflush_r>
 8012d54:	2800      	cmp	r0, #0
 8012d56:	d1ed      	bne.n	8012d34 <__swbuf_r+0x2a>
 8012d58:	68a3      	ldr	r3, [r4, #8]
 8012d5a:	3b01      	subs	r3, #1
 8012d5c:	60a3      	str	r3, [r4, #8]
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	1c5a      	adds	r2, r3, #1
 8012d62:	6022      	str	r2, [r4, #0]
 8012d64:	701e      	strb	r6, [r3, #0]
 8012d66:	6962      	ldr	r2, [r4, #20]
 8012d68:	1c43      	adds	r3, r0, #1
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d004      	beq.n	8012d78 <__swbuf_r+0x6e>
 8012d6e:	89a3      	ldrh	r3, [r4, #12]
 8012d70:	07db      	lsls	r3, r3, #31
 8012d72:	d5e1      	bpl.n	8012d38 <__swbuf_r+0x2e>
 8012d74:	2e0a      	cmp	r6, #10
 8012d76:	d1df      	bne.n	8012d38 <__swbuf_r+0x2e>
 8012d78:	4621      	mov	r1, r4
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	f000 fd46 	bl	801380c <_fflush_r>
 8012d80:	2800      	cmp	r0, #0
 8012d82:	d0d9      	beq.n	8012d38 <__swbuf_r+0x2e>
 8012d84:	e7d6      	b.n	8012d34 <__swbuf_r+0x2a>
	...

08012d88 <__swsetup_r>:
 8012d88:	b538      	push	{r3, r4, r5, lr}
 8012d8a:	4b29      	ldr	r3, [pc, #164]	@ (8012e30 <__swsetup_r+0xa8>)
 8012d8c:	4605      	mov	r5, r0
 8012d8e:	6818      	ldr	r0, [r3, #0]
 8012d90:	460c      	mov	r4, r1
 8012d92:	b118      	cbz	r0, 8012d9c <__swsetup_r+0x14>
 8012d94:	6a03      	ldr	r3, [r0, #32]
 8012d96:	b90b      	cbnz	r3, 8012d9c <__swsetup_r+0x14>
 8012d98:	f7ff fec6 	bl	8012b28 <__sinit>
 8012d9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012da0:	0719      	lsls	r1, r3, #28
 8012da2:	d422      	bmi.n	8012dea <__swsetup_r+0x62>
 8012da4:	06da      	lsls	r2, r3, #27
 8012da6:	d407      	bmi.n	8012db8 <__swsetup_r+0x30>
 8012da8:	2209      	movs	r2, #9
 8012daa:	602a      	str	r2, [r5, #0]
 8012dac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012db0:	81a3      	strh	r3, [r4, #12]
 8012db2:	f04f 30ff 	mov.w	r0, #4294967295
 8012db6:	e033      	b.n	8012e20 <__swsetup_r+0x98>
 8012db8:	0758      	lsls	r0, r3, #29
 8012dba:	d512      	bpl.n	8012de2 <__swsetup_r+0x5a>
 8012dbc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012dbe:	b141      	cbz	r1, 8012dd2 <__swsetup_r+0x4a>
 8012dc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012dc4:	4299      	cmp	r1, r3
 8012dc6:	d002      	beq.n	8012dce <__swsetup_r+0x46>
 8012dc8:	4628      	mov	r0, r5
 8012dca:	f000 f8d3 	bl	8012f74 <_free_r>
 8012dce:	2300      	movs	r3, #0
 8012dd0:	6363      	str	r3, [r4, #52]	@ 0x34
 8012dd2:	89a3      	ldrh	r3, [r4, #12]
 8012dd4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012dd8:	81a3      	strh	r3, [r4, #12]
 8012dda:	2300      	movs	r3, #0
 8012ddc:	6063      	str	r3, [r4, #4]
 8012dde:	6923      	ldr	r3, [r4, #16]
 8012de0:	6023      	str	r3, [r4, #0]
 8012de2:	89a3      	ldrh	r3, [r4, #12]
 8012de4:	f043 0308 	orr.w	r3, r3, #8
 8012de8:	81a3      	strh	r3, [r4, #12]
 8012dea:	6923      	ldr	r3, [r4, #16]
 8012dec:	b94b      	cbnz	r3, 8012e02 <__swsetup_r+0x7a>
 8012dee:	89a3      	ldrh	r3, [r4, #12]
 8012df0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012df4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012df8:	d003      	beq.n	8012e02 <__swsetup_r+0x7a>
 8012dfa:	4621      	mov	r1, r4
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	f000 fd53 	bl	80138a8 <__smakebuf_r>
 8012e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e06:	f013 0201 	ands.w	r2, r3, #1
 8012e0a:	d00a      	beq.n	8012e22 <__swsetup_r+0x9a>
 8012e0c:	2200      	movs	r2, #0
 8012e0e:	60a2      	str	r2, [r4, #8]
 8012e10:	6962      	ldr	r2, [r4, #20]
 8012e12:	4252      	negs	r2, r2
 8012e14:	61a2      	str	r2, [r4, #24]
 8012e16:	6922      	ldr	r2, [r4, #16]
 8012e18:	b942      	cbnz	r2, 8012e2c <__swsetup_r+0xa4>
 8012e1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8012e1e:	d1c5      	bne.n	8012dac <__swsetup_r+0x24>
 8012e20:	bd38      	pop	{r3, r4, r5, pc}
 8012e22:	0799      	lsls	r1, r3, #30
 8012e24:	bf58      	it	pl
 8012e26:	6962      	ldrpl	r2, [r4, #20]
 8012e28:	60a2      	str	r2, [r4, #8]
 8012e2a:	e7f4      	b.n	8012e16 <__swsetup_r+0x8e>
 8012e2c:	2000      	movs	r0, #0
 8012e2e:	e7f7      	b.n	8012e20 <__swsetup_r+0x98>
 8012e30:	2000011c 	.word	0x2000011c

08012e34 <memset>:
 8012e34:	4402      	add	r2, r0
 8012e36:	4603      	mov	r3, r0
 8012e38:	4293      	cmp	r3, r2
 8012e3a:	d100      	bne.n	8012e3e <memset+0xa>
 8012e3c:	4770      	bx	lr
 8012e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8012e42:	e7f9      	b.n	8012e38 <memset+0x4>

08012e44 <strrchr>:
 8012e44:	b538      	push	{r3, r4, r5, lr}
 8012e46:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8012e4a:	4603      	mov	r3, r0
 8012e4c:	d10e      	bne.n	8012e6c <strrchr+0x28>
 8012e4e:	4621      	mov	r1, r4
 8012e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e54:	f000 bd98 	b.w	8013988 <strchr>
 8012e58:	1c43      	adds	r3, r0, #1
 8012e5a:	4605      	mov	r5, r0
 8012e5c:	4621      	mov	r1, r4
 8012e5e:	4618      	mov	r0, r3
 8012e60:	f000 fd92 	bl	8013988 <strchr>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	d1f7      	bne.n	8012e58 <strrchr+0x14>
 8012e68:	4628      	mov	r0, r5
 8012e6a:	bd38      	pop	{r3, r4, r5, pc}
 8012e6c:	2500      	movs	r5, #0
 8012e6e:	e7f5      	b.n	8012e5c <strrchr+0x18>

08012e70 <_close_r>:
 8012e70:	b538      	push	{r3, r4, r5, lr}
 8012e72:	4d06      	ldr	r5, [pc, #24]	@ (8012e8c <_close_r+0x1c>)
 8012e74:	2300      	movs	r3, #0
 8012e76:	4604      	mov	r4, r0
 8012e78:	4608      	mov	r0, r1
 8012e7a:	602b      	str	r3, [r5, #0]
 8012e7c:	f7f0 fcfb 	bl	8003876 <_close>
 8012e80:	1c43      	adds	r3, r0, #1
 8012e82:	d102      	bne.n	8012e8a <_close_r+0x1a>
 8012e84:	682b      	ldr	r3, [r5, #0]
 8012e86:	b103      	cbz	r3, 8012e8a <_close_r+0x1a>
 8012e88:	6023      	str	r3, [r4, #0]
 8012e8a:	bd38      	pop	{r3, r4, r5, pc}
 8012e8c:	20000da8 	.word	0x20000da8

08012e90 <_lseek_r>:
 8012e90:	b538      	push	{r3, r4, r5, lr}
 8012e92:	4d07      	ldr	r5, [pc, #28]	@ (8012eb0 <_lseek_r+0x20>)
 8012e94:	4604      	mov	r4, r0
 8012e96:	4608      	mov	r0, r1
 8012e98:	4611      	mov	r1, r2
 8012e9a:	2200      	movs	r2, #0
 8012e9c:	602a      	str	r2, [r5, #0]
 8012e9e:	461a      	mov	r2, r3
 8012ea0:	f7f0 fd10 	bl	80038c4 <_lseek>
 8012ea4:	1c43      	adds	r3, r0, #1
 8012ea6:	d102      	bne.n	8012eae <_lseek_r+0x1e>
 8012ea8:	682b      	ldr	r3, [r5, #0]
 8012eaa:	b103      	cbz	r3, 8012eae <_lseek_r+0x1e>
 8012eac:	6023      	str	r3, [r4, #0]
 8012eae:	bd38      	pop	{r3, r4, r5, pc}
 8012eb0:	20000da8 	.word	0x20000da8

08012eb4 <_read_r>:
 8012eb4:	b538      	push	{r3, r4, r5, lr}
 8012eb6:	4d07      	ldr	r5, [pc, #28]	@ (8012ed4 <_read_r+0x20>)
 8012eb8:	4604      	mov	r4, r0
 8012eba:	4608      	mov	r0, r1
 8012ebc:	4611      	mov	r1, r2
 8012ebe:	2200      	movs	r2, #0
 8012ec0:	602a      	str	r2, [r5, #0]
 8012ec2:	461a      	mov	r2, r3
 8012ec4:	f7f0 fcba 	bl	800383c <_read>
 8012ec8:	1c43      	adds	r3, r0, #1
 8012eca:	d102      	bne.n	8012ed2 <_read_r+0x1e>
 8012ecc:	682b      	ldr	r3, [r5, #0]
 8012ece:	b103      	cbz	r3, 8012ed2 <_read_r+0x1e>
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	bd38      	pop	{r3, r4, r5, pc}
 8012ed4:	20000da8 	.word	0x20000da8

08012ed8 <_write_r>:
 8012ed8:	b538      	push	{r3, r4, r5, lr}
 8012eda:	4d07      	ldr	r5, [pc, #28]	@ (8012ef8 <_write_r+0x20>)
 8012edc:	4604      	mov	r4, r0
 8012ede:	4608      	mov	r0, r1
 8012ee0:	4611      	mov	r1, r2
 8012ee2:	2200      	movs	r2, #0
 8012ee4:	602a      	str	r2, [r5, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	f7ed fed7 	bl	8000c9a <_write>
 8012eec:	1c43      	adds	r3, r0, #1
 8012eee:	d102      	bne.n	8012ef6 <_write_r+0x1e>
 8012ef0:	682b      	ldr	r3, [r5, #0]
 8012ef2:	b103      	cbz	r3, 8012ef6 <_write_r+0x1e>
 8012ef4:	6023      	str	r3, [r4, #0]
 8012ef6:	bd38      	pop	{r3, r4, r5, pc}
 8012ef8:	20000da8 	.word	0x20000da8

08012efc <__errno>:
 8012efc:	4b01      	ldr	r3, [pc, #4]	@ (8012f04 <__errno+0x8>)
 8012efe:	6818      	ldr	r0, [r3, #0]
 8012f00:	4770      	bx	lr
 8012f02:	bf00      	nop
 8012f04:	2000011c 	.word	0x2000011c

08012f08 <__libc_init_array>:
 8012f08:	b570      	push	{r4, r5, r6, lr}
 8012f0a:	4d0d      	ldr	r5, [pc, #52]	@ (8012f40 <__libc_init_array+0x38>)
 8012f0c:	4c0d      	ldr	r4, [pc, #52]	@ (8012f44 <__libc_init_array+0x3c>)
 8012f0e:	1b64      	subs	r4, r4, r5
 8012f10:	10a4      	asrs	r4, r4, #2
 8012f12:	2600      	movs	r6, #0
 8012f14:	42a6      	cmp	r6, r4
 8012f16:	d109      	bne.n	8012f2c <__libc_init_array+0x24>
 8012f18:	4d0b      	ldr	r5, [pc, #44]	@ (8012f48 <__libc_init_array+0x40>)
 8012f1a:	4c0c      	ldr	r4, [pc, #48]	@ (8012f4c <__libc_init_array+0x44>)
 8012f1c:	f000 fdf2 	bl	8013b04 <_init>
 8012f20:	1b64      	subs	r4, r4, r5
 8012f22:	10a4      	asrs	r4, r4, #2
 8012f24:	2600      	movs	r6, #0
 8012f26:	42a6      	cmp	r6, r4
 8012f28:	d105      	bne.n	8012f36 <__libc_init_array+0x2e>
 8012f2a:	bd70      	pop	{r4, r5, r6, pc}
 8012f2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f30:	4798      	blx	r3
 8012f32:	3601      	adds	r6, #1
 8012f34:	e7ee      	b.n	8012f14 <__libc_init_array+0xc>
 8012f36:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f3a:	4798      	blx	r3
 8012f3c:	3601      	adds	r6, #1
 8012f3e:	e7f2      	b.n	8012f26 <__libc_init_array+0x1e>
 8012f40:	08015774 	.word	0x08015774
 8012f44:	08015774 	.word	0x08015774
 8012f48:	08015774 	.word	0x08015774
 8012f4c:	08015778 	.word	0x08015778

08012f50 <__retarget_lock_init_recursive>:
 8012f50:	4770      	bx	lr

08012f52 <__retarget_lock_acquire_recursive>:
 8012f52:	4770      	bx	lr

08012f54 <__retarget_lock_release_recursive>:
 8012f54:	4770      	bx	lr

08012f56 <memcpy>:
 8012f56:	440a      	add	r2, r1
 8012f58:	4291      	cmp	r1, r2
 8012f5a:	f100 33ff 	add.w	r3, r0, #4294967295
 8012f5e:	d100      	bne.n	8012f62 <memcpy+0xc>
 8012f60:	4770      	bx	lr
 8012f62:	b510      	push	{r4, lr}
 8012f64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f6c:	4291      	cmp	r1, r2
 8012f6e:	d1f9      	bne.n	8012f64 <memcpy+0xe>
 8012f70:	bd10      	pop	{r4, pc}
	...

08012f74 <_free_r>:
 8012f74:	b538      	push	{r3, r4, r5, lr}
 8012f76:	4605      	mov	r5, r0
 8012f78:	2900      	cmp	r1, #0
 8012f7a:	d041      	beq.n	8013000 <_free_r+0x8c>
 8012f7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012f80:	1f0c      	subs	r4, r1, #4
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	bfb8      	it	lt
 8012f86:	18e4      	addlt	r4, r4, r3
 8012f88:	f000 f8e0 	bl	801314c <__malloc_lock>
 8012f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8013004 <_free_r+0x90>)
 8012f8e:	6813      	ldr	r3, [r2, #0]
 8012f90:	b933      	cbnz	r3, 8012fa0 <_free_r+0x2c>
 8012f92:	6063      	str	r3, [r4, #4]
 8012f94:	6014      	str	r4, [r2, #0]
 8012f96:	4628      	mov	r0, r5
 8012f98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f9c:	f000 b8dc 	b.w	8013158 <__malloc_unlock>
 8012fa0:	42a3      	cmp	r3, r4
 8012fa2:	d908      	bls.n	8012fb6 <_free_r+0x42>
 8012fa4:	6820      	ldr	r0, [r4, #0]
 8012fa6:	1821      	adds	r1, r4, r0
 8012fa8:	428b      	cmp	r3, r1
 8012faa:	bf01      	itttt	eq
 8012fac:	6819      	ldreq	r1, [r3, #0]
 8012fae:	685b      	ldreq	r3, [r3, #4]
 8012fb0:	1809      	addeq	r1, r1, r0
 8012fb2:	6021      	streq	r1, [r4, #0]
 8012fb4:	e7ed      	b.n	8012f92 <_free_r+0x1e>
 8012fb6:	461a      	mov	r2, r3
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	b10b      	cbz	r3, 8012fc0 <_free_r+0x4c>
 8012fbc:	42a3      	cmp	r3, r4
 8012fbe:	d9fa      	bls.n	8012fb6 <_free_r+0x42>
 8012fc0:	6811      	ldr	r1, [r2, #0]
 8012fc2:	1850      	adds	r0, r2, r1
 8012fc4:	42a0      	cmp	r0, r4
 8012fc6:	d10b      	bne.n	8012fe0 <_free_r+0x6c>
 8012fc8:	6820      	ldr	r0, [r4, #0]
 8012fca:	4401      	add	r1, r0
 8012fcc:	1850      	adds	r0, r2, r1
 8012fce:	4283      	cmp	r3, r0
 8012fd0:	6011      	str	r1, [r2, #0]
 8012fd2:	d1e0      	bne.n	8012f96 <_free_r+0x22>
 8012fd4:	6818      	ldr	r0, [r3, #0]
 8012fd6:	685b      	ldr	r3, [r3, #4]
 8012fd8:	6053      	str	r3, [r2, #4]
 8012fda:	4408      	add	r0, r1
 8012fdc:	6010      	str	r0, [r2, #0]
 8012fde:	e7da      	b.n	8012f96 <_free_r+0x22>
 8012fe0:	d902      	bls.n	8012fe8 <_free_r+0x74>
 8012fe2:	230c      	movs	r3, #12
 8012fe4:	602b      	str	r3, [r5, #0]
 8012fe6:	e7d6      	b.n	8012f96 <_free_r+0x22>
 8012fe8:	6820      	ldr	r0, [r4, #0]
 8012fea:	1821      	adds	r1, r4, r0
 8012fec:	428b      	cmp	r3, r1
 8012fee:	bf04      	itt	eq
 8012ff0:	6819      	ldreq	r1, [r3, #0]
 8012ff2:	685b      	ldreq	r3, [r3, #4]
 8012ff4:	6063      	str	r3, [r4, #4]
 8012ff6:	bf04      	itt	eq
 8012ff8:	1809      	addeq	r1, r1, r0
 8012ffa:	6021      	streq	r1, [r4, #0]
 8012ffc:	6054      	str	r4, [r2, #4]
 8012ffe:	e7ca      	b.n	8012f96 <_free_r+0x22>
 8013000:	bd38      	pop	{r3, r4, r5, pc}
 8013002:	bf00      	nop
 8013004:	20000db4 	.word	0x20000db4

08013008 <sbrk_aligned>:
 8013008:	b570      	push	{r4, r5, r6, lr}
 801300a:	4e0f      	ldr	r6, [pc, #60]	@ (8013048 <sbrk_aligned+0x40>)
 801300c:	460c      	mov	r4, r1
 801300e:	6831      	ldr	r1, [r6, #0]
 8013010:	4605      	mov	r5, r0
 8013012:	b911      	cbnz	r1, 801301a <sbrk_aligned+0x12>
 8013014:	f000 fce8 	bl	80139e8 <_sbrk_r>
 8013018:	6030      	str	r0, [r6, #0]
 801301a:	4621      	mov	r1, r4
 801301c:	4628      	mov	r0, r5
 801301e:	f000 fce3 	bl	80139e8 <_sbrk_r>
 8013022:	1c43      	adds	r3, r0, #1
 8013024:	d103      	bne.n	801302e <sbrk_aligned+0x26>
 8013026:	f04f 34ff 	mov.w	r4, #4294967295
 801302a:	4620      	mov	r0, r4
 801302c:	bd70      	pop	{r4, r5, r6, pc}
 801302e:	1cc4      	adds	r4, r0, #3
 8013030:	f024 0403 	bic.w	r4, r4, #3
 8013034:	42a0      	cmp	r0, r4
 8013036:	d0f8      	beq.n	801302a <sbrk_aligned+0x22>
 8013038:	1a21      	subs	r1, r4, r0
 801303a:	4628      	mov	r0, r5
 801303c:	f000 fcd4 	bl	80139e8 <_sbrk_r>
 8013040:	3001      	adds	r0, #1
 8013042:	d1f2      	bne.n	801302a <sbrk_aligned+0x22>
 8013044:	e7ef      	b.n	8013026 <sbrk_aligned+0x1e>
 8013046:	bf00      	nop
 8013048:	20000db0 	.word	0x20000db0

0801304c <_malloc_r>:
 801304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013050:	1ccd      	adds	r5, r1, #3
 8013052:	f025 0503 	bic.w	r5, r5, #3
 8013056:	3508      	adds	r5, #8
 8013058:	2d0c      	cmp	r5, #12
 801305a:	bf38      	it	cc
 801305c:	250c      	movcc	r5, #12
 801305e:	2d00      	cmp	r5, #0
 8013060:	4606      	mov	r6, r0
 8013062:	db01      	blt.n	8013068 <_malloc_r+0x1c>
 8013064:	42a9      	cmp	r1, r5
 8013066:	d904      	bls.n	8013072 <_malloc_r+0x26>
 8013068:	230c      	movs	r3, #12
 801306a:	6033      	str	r3, [r6, #0]
 801306c:	2000      	movs	r0, #0
 801306e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013072:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013148 <_malloc_r+0xfc>
 8013076:	f000 f869 	bl	801314c <__malloc_lock>
 801307a:	f8d8 3000 	ldr.w	r3, [r8]
 801307e:	461c      	mov	r4, r3
 8013080:	bb44      	cbnz	r4, 80130d4 <_malloc_r+0x88>
 8013082:	4629      	mov	r1, r5
 8013084:	4630      	mov	r0, r6
 8013086:	f7ff ffbf 	bl	8013008 <sbrk_aligned>
 801308a:	1c43      	adds	r3, r0, #1
 801308c:	4604      	mov	r4, r0
 801308e:	d158      	bne.n	8013142 <_malloc_r+0xf6>
 8013090:	f8d8 4000 	ldr.w	r4, [r8]
 8013094:	4627      	mov	r7, r4
 8013096:	2f00      	cmp	r7, #0
 8013098:	d143      	bne.n	8013122 <_malloc_r+0xd6>
 801309a:	2c00      	cmp	r4, #0
 801309c:	d04b      	beq.n	8013136 <_malloc_r+0xea>
 801309e:	6823      	ldr	r3, [r4, #0]
 80130a0:	4639      	mov	r1, r7
 80130a2:	4630      	mov	r0, r6
 80130a4:	eb04 0903 	add.w	r9, r4, r3
 80130a8:	f000 fc9e 	bl	80139e8 <_sbrk_r>
 80130ac:	4581      	cmp	r9, r0
 80130ae:	d142      	bne.n	8013136 <_malloc_r+0xea>
 80130b0:	6821      	ldr	r1, [r4, #0]
 80130b2:	1a6d      	subs	r5, r5, r1
 80130b4:	4629      	mov	r1, r5
 80130b6:	4630      	mov	r0, r6
 80130b8:	f7ff ffa6 	bl	8013008 <sbrk_aligned>
 80130bc:	3001      	adds	r0, #1
 80130be:	d03a      	beq.n	8013136 <_malloc_r+0xea>
 80130c0:	6823      	ldr	r3, [r4, #0]
 80130c2:	442b      	add	r3, r5
 80130c4:	6023      	str	r3, [r4, #0]
 80130c6:	f8d8 3000 	ldr.w	r3, [r8]
 80130ca:	685a      	ldr	r2, [r3, #4]
 80130cc:	bb62      	cbnz	r2, 8013128 <_malloc_r+0xdc>
 80130ce:	f8c8 7000 	str.w	r7, [r8]
 80130d2:	e00f      	b.n	80130f4 <_malloc_r+0xa8>
 80130d4:	6822      	ldr	r2, [r4, #0]
 80130d6:	1b52      	subs	r2, r2, r5
 80130d8:	d420      	bmi.n	801311c <_malloc_r+0xd0>
 80130da:	2a0b      	cmp	r2, #11
 80130dc:	d917      	bls.n	801310e <_malloc_r+0xc2>
 80130de:	1961      	adds	r1, r4, r5
 80130e0:	42a3      	cmp	r3, r4
 80130e2:	6025      	str	r5, [r4, #0]
 80130e4:	bf18      	it	ne
 80130e6:	6059      	strne	r1, [r3, #4]
 80130e8:	6863      	ldr	r3, [r4, #4]
 80130ea:	bf08      	it	eq
 80130ec:	f8c8 1000 	streq.w	r1, [r8]
 80130f0:	5162      	str	r2, [r4, r5]
 80130f2:	604b      	str	r3, [r1, #4]
 80130f4:	4630      	mov	r0, r6
 80130f6:	f000 f82f 	bl	8013158 <__malloc_unlock>
 80130fa:	f104 000b 	add.w	r0, r4, #11
 80130fe:	1d23      	adds	r3, r4, #4
 8013100:	f020 0007 	bic.w	r0, r0, #7
 8013104:	1ac2      	subs	r2, r0, r3
 8013106:	bf1c      	itt	ne
 8013108:	1a1b      	subne	r3, r3, r0
 801310a:	50a3      	strne	r3, [r4, r2]
 801310c:	e7af      	b.n	801306e <_malloc_r+0x22>
 801310e:	6862      	ldr	r2, [r4, #4]
 8013110:	42a3      	cmp	r3, r4
 8013112:	bf0c      	ite	eq
 8013114:	f8c8 2000 	streq.w	r2, [r8]
 8013118:	605a      	strne	r2, [r3, #4]
 801311a:	e7eb      	b.n	80130f4 <_malloc_r+0xa8>
 801311c:	4623      	mov	r3, r4
 801311e:	6864      	ldr	r4, [r4, #4]
 8013120:	e7ae      	b.n	8013080 <_malloc_r+0x34>
 8013122:	463c      	mov	r4, r7
 8013124:	687f      	ldr	r7, [r7, #4]
 8013126:	e7b6      	b.n	8013096 <_malloc_r+0x4a>
 8013128:	461a      	mov	r2, r3
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	42a3      	cmp	r3, r4
 801312e:	d1fb      	bne.n	8013128 <_malloc_r+0xdc>
 8013130:	2300      	movs	r3, #0
 8013132:	6053      	str	r3, [r2, #4]
 8013134:	e7de      	b.n	80130f4 <_malloc_r+0xa8>
 8013136:	230c      	movs	r3, #12
 8013138:	6033      	str	r3, [r6, #0]
 801313a:	4630      	mov	r0, r6
 801313c:	f000 f80c 	bl	8013158 <__malloc_unlock>
 8013140:	e794      	b.n	801306c <_malloc_r+0x20>
 8013142:	6005      	str	r5, [r0, #0]
 8013144:	e7d6      	b.n	80130f4 <_malloc_r+0xa8>
 8013146:	bf00      	nop
 8013148:	20000db4 	.word	0x20000db4

0801314c <__malloc_lock>:
 801314c:	4801      	ldr	r0, [pc, #4]	@ (8013154 <__malloc_lock+0x8>)
 801314e:	f7ff bf00 	b.w	8012f52 <__retarget_lock_acquire_recursive>
 8013152:	bf00      	nop
 8013154:	20000dac 	.word	0x20000dac

08013158 <__malloc_unlock>:
 8013158:	4801      	ldr	r0, [pc, #4]	@ (8013160 <__malloc_unlock+0x8>)
 801315a:	f7ff befb 	b.w	8012f54 <__retarget_lock_release_recursive>
 801315e:	bf00      	nop
 8013160:	20000dac 	.word	0x20000dac

08013164 <__sfputc_r>:
 8013164:	6893      	ldr	r3, [r2, #8]
 8013166:	3b01      	subs	r3, #1
 8013168:	2b00      	cmp	r3, #0
 801316a:	b410      	push	{r4}
 801316c:	6093      	str	r3, [r2, #8]
 801316e:	da08      	bge.n	8013182 <__sfputc_r+0x1e>
 8013170:	6994      	ldr	r4, [r2, #24]
 8013172:	42a3      	cmp	r3, r4
 8013174:	db01      	blt.n	801317a <__sfputc_r+0x16>
 8013176:	290a      	cmp	r1, #10
 8013178:	d103      	bne.n	8013182 <__sfputc_r+0x1e>
 801317a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801317e:	f7ff bdc4 	b.w	8012d0a <__swbuf_r>
 8013182:	6813      	ldr	r3, [r2, #0]
 8013184:	1c58      	adds	r0, r3, #1
 8013186:	6010      	str	r0, [r2, #0]
 8013188:	7019      	strb	r1, [r3, #0]
 801318a:	4608      	mov	r0, r1
 801318c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013190:	4770      	bx	lr

08013192 <__sfputs_r>:
 8013192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013194:	4606      	mov	r6, r0
 8013196:	460f      	mov	r7, r1
 8013198:	4614      	mov	r4, r2
 801319a:	18d5      	adds	r5, r2, r3
 801319c:	42ac      	cmp	r4, r5
 801319e:	d101      	bne.n	80131a4 <__sfputs_r+0x12>
 80131a0:	2000      	movs	r0, #0
 80131a2:	e007      	b.n	80131b4 <__sfputs_r+0x22>
 80131a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131a8:	463a      	mov	r2, r7
 80131aa:	4630      	mov	r0, r6
 80131ac:	f7ff ffda 	bl	8013164 <__sfputc_r>
 80131b0:	1c43      	adds	r3, r0, #1
 80131b2:	d1f3      	bne.n	801319c <__sfputs_r+0xa>
 80131b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080131b8 <_vfiprintf_r>:
 80131b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	460d      	mov	r5, r1
 80131be:	b09d      	sub	sp, #116	@ 0x74
 80131c0:	4614      	mov	r4, r2
 80131c2:	4698      	mov	r8, r3
 80131c4:	4606      	mov	r6, r0
 80131c6:	b118      	cbz	r0, 80131d0 <_vfiprintf_r+0x18>
 80131c8:	6a03      	ldr	r3, [r0, #32]
 80131ca:	b90b      	cbnz	r3, 80131d0 <_vfiprintf_r+0x18>
 80131cc:	f7ff fcac 	bl	8012b28 <__sinit>
 80131d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131d2:	07d9      	lsls	r1, r3, #31
 80131d4:	d405      	bmi.n	80131e2 <_vfiprintf_r+0x2a>
 80131d6:	89ab      	ldrh	r3, [r5, #12]
 80131d8:	059a      	lsls	r2, r3, #22
 80131da:	d402      	bmi.n	80131e2 <_vfiprintf_r+0x2a>
 80131dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80131de:	f7ff feb8 	bl	8012f52 <__retarget_lock_acquire_recursive>
 80131e2:	89ab      	ldrh	r3, [r5, #12]
 80131e4:	071b      	lsls	r3, r3, #28
 80131e6:	d501      	bpl.n	80131ec <_vfiprintf_r+0x34>
 80131e8:	692b      	ldr	r3, [r5, #16]
 80131ea:	b99b      	cbnz	r3, 8013214 <_vfiprintf_r+0x5c>
 80131ec:	4629      	mov	r1, r5
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff fdca 	bl	8012d88 <__swsetup_r>
 80131f4:	b170      	cbz	r0, 8013214 <_vfiprintf_r+0x5c>
 80131f6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80131f8:	07dc      	lsls	r4, r3, #31
 80131fa:	d504      	bpl.n	8013206 <_vfiprintf_r+0x4e>
 80131fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013200:	b01d      	add	sp, #116	@ 0x74
 8013202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013206:	89ab      	ldrh	r3, [r5, #12]
 8013208:	0598      	lsls	r0, r3, #22
 801320a:	d4f7      	bmi.n	80131fc <_vfiprintf_r+0x44>
 801320c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801320e:	f7ff fea1 	bl	8012f54 <__retarget_lock_release_recursive>
 8013212:	e7f3      	b.n	80131fc <_vfiprintf_r+0x44>
 8013214:	2300      	movs	r3, #0
 8013216:	9309      	str	r3, [sp, #36]	@ 0x24
 8013218:	2320      	movs	r3, #32
 801321a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801321e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013222:	2330      	movs	r3, #48	@ 0x30
 8013224:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80133d4 <_vfiprintf_r+0x21c>
 8013228:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801322c:	f04f 0901 	mov.w	r9, #1
 8013230:	4623      	mov	r3, r4
 8013232:	469a      	mov	sl, r3
 8013234:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013238:	b10a      	cbz	r2, 801323e <_vfiprintf_r+0x86>
 801323a:	2a25      	cmp	r2, #37	@ 0x25
 801323c:	d1f9      	bne.n	8013232 <_vfiprintf_r+0x7a>
 801323e:	ebba 0b04 	subs.w	fp, sl, r4
 8013242:	d00b      	beq.n	801325c <_vfiprintf_r+0xa4>
 8013244:	465b      	mov	r3, fp
 8013246:	4622      	mov	r2, r4
 8013248:	4629      	mov	r1, r5
 801324a:	4630      	mov	r0, r6
 801324c:	f7ff ffa1 	bl	8013192 <__sfputs_r>
 8013250:	3001      	adds	r0, #1
 8013252:	f000 80a7 	beq.w	80133a4 <_vfiprintf_r+0x1ec>
 8013256:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013258:	445a      	add	r2, fp
 801325a:	9209      	str	r2, [sp, #36]	@ 0x24
 801325c:	f89a 3000 	ldrb.w	r3, [sl]
 8013260:	2b00      	cmp	r3, #0
 8013262:	f000 809f 	beq.w	80133a4 <_vfiprintf_r+0x1ec>
 8013266:	2300      	movs	r3, #0
 8013268:	f04f 32ff 	mov.w	r2, #4294967295
 801326c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013270:	f10a 0a01 	add.w	sl, sl, #1
 8013274:	9304      	str	r3, [sp, #16]
 8013276:	9307      	str	r3, [sp, #28]
 8013278:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801327c:	931a      	str	r3, [sp, #104]	@ 0x68
 801327e:	4654      	mov	r4, sl
 8013280:	2205      	movs	r2, #5
 8013282:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013286:	4853      	ldr	r0, [pc, #332]	@ (80133d4 <_vfiprintf_r+0x21c>)
 8013288:	f7ec ff82 	bl	8000190 <memchr>
 801328c:	9a04      	ldr	r2, [sp, #16]
 801328e:	b9d8      	cbnz	r0, 80132c8 <_vfiprintf_r+0x110>
 8013290:	06d1      	lsls	r1, r2, #27
 8013292:	bf44      	itt	mi
 8013294:	2320      	movmi	r3, #32
 8013296:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801329a:	0713      	lsls	r3, r2, #28
 801329c:	bf44      	itt	mi
 801329e:	232b      	movmi	r3, #43	@ 0x2b
 80132a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80132a4:	f89a 3000 	ldrb.w	r3, [sl]
 80132a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80132aa:	d015      	beq.n	80132d8 <_vfiprintf_r+0x120>
 80132ac:	9a07      	ldr	r2, [sp, #28]
 80132ae:	4654      	mov	r4, sl
 80132b0:	2000      	movs	r0, #0
 80132b2:	f04f 0c0a 	mov.w	ip, #10
 80132b6:	4621      	mov	r1, r4
 80132b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80132bc:	3b30      	subs	r3, #48	@ 0x30
 80132be:	2b09      	cmp	r3, #9
 80132c0:	d94b      	bls.n	801335a <_vfiprintf_r+0x1a2>
 80132c2:	b1b0      	cbz	r0, 80132f2 <_vfiprintf_r+0x13a>
 80132c4:	9207      	str	r2, [sp, #28]
 80132c6:	e014      	b.n	80132f2 <_vfiprintf_r+0x13a>
 80132c8:	eba0 0308 	sub.w	r3, r0, r8
 80132cc:	fa09 f303 	lsl.w	r3, r9, r3
 80132d0:	4313      	orrs	r3, r2
 80132d2:	9304      	str	r3, [sp, #16]
 80132d4:	46a2      	mov	sl, r4
 80132d6:	e7d2      	b.n	801327e <_vfiprintf_r+0xc6>
 80132d8:	9b03      	ldr	r3, [sp, #12]
 80132da:	1d19      	adds	r1, r3, #4
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	9103      	str	r1, [sp, #12]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	bfbb      	ittet	lt
 80132e4:	425b      	neglt	r3, r3
 80132e6:	f042 0202 	orrlt.w	r2, r2, #2
 80132ea:	9307      	strge	r3, [sp, #28]
 80132ec:	9307      	strlt	r3, [sp, #28]
 80132ee:	bfb8      	it	lt
 80132f0:	9204      	strlt	r2, [sp, #16]
 80132f2:	7823      	ldrb	r3, [r4, #0]
 80132f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80132f6:	d10a      	bne.n	801330e <_vfiprintf_r+0x156>
 80132f8:	7863      	ldrb	r3, [r4, #1]
 80132fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80132fc:	d132      	bne.n	8013364 <_vfiprintf_r+0x1ac>
 80132fe:	9b03      	ldr	r3, [sp, #12]
 8013300:	1d1a      	adds	r2, r3, #4
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	9203      	str	r2, [sp, #12]
 8013306:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801330a:	3402      	adds	r4, #2
 801330c:	9305      	str	r3, [sp, #20]
 801330e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80133e4 <_vfiprintf_r+0x22c>
 8013312:	7821      	ldrb	r1, [r4, #0]
 8013314:	2203      	movs	r2, #3
 8013316:	4650      	mov	r0, sl
 8013318:	f7ec ff3a 	bl	8000190 <memchr>
 801331c:	b138      	cbz	r0, 801332e <_vfiprintf_r+0x176>
 801331e:	9b04      	ldr	r3, [sp, #16]
 8013320:	eba0 000a 	sub.w	r0, r0, sl
 8013324:	2240      	movs	r2, #64	@ 0x40
 8013326:	4082      	lsls	r2, r0
 8013328:	4313      	orrs	r3, r2
 801332a:	3401      	adds	r4, #1
 801332c:	9304      	str	r3, [sp, #16]
 801332e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013332:	4829      	ldr	r0, [pc, #164]	@ (80133d8 <_vfiprintf_r+0x220>)
 8013334:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013338:	2206      	movs	r2, #6
 801333a:	f7ec ff29 	bl	8000190 <memchr>
 801333e:	2800      	cmp	r0, #0
 8013340:	d03f      	beq.n	80133c2 <_vfiprintf_r+0x20a>
 8013342:	4b26      	ldr	r3, [pc, #152]	@ (80133dc <_vfiprintf_r+0x224>)
 8013344:	bb1b      	cbnz	r3, 801338e <_vfiprintf_r+0x1d6>
 8013346:	9b03      	ldr	r3, [sp, #12]
 8013348:	3307      	adds	r3, #7
 801334a:	f023 0307 	bic.w	r3, r3, #7
 801334e:	3308      	adds	r3, #8
 8013350:	9303      	str	r3, [sp, #12]
 8013352:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013354:	443b      	add	r3, r7
 8013356:	9309      	str	r3, [sp, #36]	@ 0x24
 8013358:	e76a      	b.n	8013230 <_vfiprintf_r+0x78>
 801335a:	fb0c 3202 	mla	r2, ip, r2, r3
 801335e:	460c      	mov	r4, r1
 8013360:	2001      	movs	r0, #1
 8013362:	e7a8      	b.n	80132b6 <_vfiprintf_r+0xfe>
 8013364:	2300      	movs	r3, #0
 8013366:	3401      	adds	r4, #1
 8013368:	9305      	str	r3, [sp, #20]
 801336a:	4619      	mov	r1, r3
 801336c:	f04f 0c0a 	mov.w	ip, #10
 8013370:	4620      	mov	r0, r4
 8013372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013376:	3a30      	subs	r2, #48	@ 0x30
 8013378:	2a09      	cmp	r2, #9
 801337a:	d903      	bls.n	8013384 <_vfiprintf_r+0x1cc>
 801337c:	2b00      	cmp	r3, #0
 801337e:	d0c6      	beq.n	801330e <_vfiprintf_r+0x156>
 8013380:	9105      	str	r1, [sp, #20]
 8013382:	e7c4      	b.n	801330e <_vfiprintf_r+0x156>
 8013384:	fb0c 2101 	mla	r1, ip, r1, r2
 8013388:	4604      	mov	r4, r0
 801338a:	2301      	movs	r3, #1
 801338c:	e7f0      	b.n	8013370 <_vfiprintf_r+0x1b8>
 801338e:	ab03      	add	r3, sp, #12
 8013390:	9300      	str	r3, [sp, #0]
 8013392:	462a      	mov	r2, r5
 8013394:	4b12      	ldr	r3, [pc, #72]	@ (80133e0 <_vfiprintf_r+0x228>)
 8013396:	a904      	add	r1, sp, #16
 8013398:	4630      	mov	r0, r6
 801339a:	f3af 8000 	nop.w
 801339e:	4607      	mov	r7, r0
 80133a0:	1c78      	adds	r0, r7, #1
 80133a2:	d1d6      	bne.n	8013352 <_vfiprintf_r+0x19a>
 80133a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80133a6:	07d9      	lsls	r1, r3, #31
 80133a8:	d405      	bmi.n	80133b6 <_vfiprintf_r+0x1fe>
 80133aa:	89ab      	ldrh	r3, [r5, #12]
 80133ac:	059a      	lsls	r2, r3, #22
 80133ae:	d402      	bmi.n	80133b6 <_vfiprintf_r+0x1fe>
 80133b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80133b2:	f7ff fdcf 	bl	8012f54 <__retarget_lock_release_recursive>
 80133b6:	89ab      	ldrh	r3, [r5, #12]
 80133b8:	065b      	lsls	r3, r3, #25
 80133ba:	f53f af1f 	bmi.w	80131fc <_vfiprintf_r+0x44>
 80133be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80133c0:	e71e      	b.n	8013200 <_vfiprintf_r+0x48>
 80133c2:	ab03      	add	r3, sp, #12
 80133c4:	9300      	str	r3, [sp, #0]
 80133c6:	462a      	mov	r2, r5
 80133c8:	4b05      	ldr	r3, [pc, #20]	@ (80133e0 <_vfiprintf_r+0x228>)
 80133ca:	a904      	add	r1, sp, #16
 80133cc:	4630      	mov	r0, r6
 80133ce:	f000 f879 	bl	80134c4 <_printf_i>
 80133d2:	e7e4      	b.n	801339e <_vfiprintf_r+0x1e6>
 80133d4:	08015738 	.word	0x08015738
 80133d8:	08015742 	.word	0x08015742
 80133dc:	00000000 	.word	0x00000000
 80133e0:	08013193 	.word	0x08013193
 80133e4:	0801573e 	.word	0x0801573e

080133e8 <_printf_common>:
 80133e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133ec:	4616      	mov	r6, r2
 80133ee:	4698      	mov	r8, r3
 80133f0:	688a      	ldr	r2, [r1, #8]
 80133f2:	690b      	ldr	r3, [r1, #16]
 80133f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80133f8:	4293      	cmp	r3, r2
 80133fa:	bfb8      	it	lt
 80133fc:	4613      	movlt	r3, r2
 80133fe:	6033      	str	r3, [r6, #0]
 8013400:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013404:	4607      	mov	r7, r0
 8013406:	460c      	mov	r4, r1
 8013408:	b10a      	cbz	r2, 801340e <_printf_common+0x26>
 801340a:	3301      	adds	r3, #1
 801340c:	6033      	str	r3, [r6, #0]
 801340e:	6823      	ldr	r3, [r4, #0]
 8013410:	0699      	lsls	r1, r3, #26
 8013412:	bf42      	ittt	mi
 8013414:	6833      	ldrmi	r3, [r6, #0]
 8013416:	3302      	addmi	r3, #2
 8013418:	6033      	strmi	r3, [r6, #0]
 801341a:	6825      	ldr	r5, [r4, #0]
 801341c:	f015 0506 	ands.w	r5, r5, #6
 8013420:	d106      	bne.n	8013430 <_printf_common+0x48>
 8013422:	f104 0a19 	add.w	sl, r4, #25
 8013426:	68e3      	ldr	r3, [r4, #12]
 8013428:	6832      	ldr	r2, [r6, #0]
 801342a:	1a9b      	subs	r3, r3, r2
 801342c:	42ab      	cmp	r3, r5
 801342e:	dc26      	bgt.n	801347e <_printf_common+0x96>
 8013430:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013434:	6822      	ldr	r2, [r4, #0]
 8013436:	3b00      	subs	r3, #0
 8013438:	bf18      	it	ne
 801343a:	2301      	movne	r3, #1
 801343c:	0692      	lsls	r2, r2, #26
 801343e:	d42b      	bmi.n	8013498 <_printf_common+0xb0>
 8013440:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013444:	4641      	mov	r1, r8
 8013446:	4638      	mov	r0, r7
 8013448:	47c8      	blx	r9
 801344a:	3001      	adds	r0, #1
 801344c:	d01e      	beq.n	801348c <_printf_common+0xa4>
 801344e:	6823      	ldr	r3, [r4, #0]
 8013450:	6922      	ldr	r2, [r4, #16]
 8013452:	f003 0306 	and.w	r3, r3, #6
 8013456:	2b04      	cmp	r3, #4
 8013458:	bf02      	ittt	eq
 801345a:	68e5      	ldreq	r5, [r4, #12]
 801345c:	6833      	ldreq	r3, [r6, #0]
 801345e:	1aed      	subeq	r5, r5, r3
 8013460:	68a3      	ldr	r3, [r4, #8]
 8013462:	bf0c      	ite	eq
 8013464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013468:	2500      	movne	r5, #0
 801346a:	4293      	cmp	r3, r2
 801346c:	bfc4      	itt	gt
 801346e:	1a9b      	subgt	r3, r3, r2
 8013470:	18ed      	addgt	r5, r5, r3
 8013472:	2600      	movs	r6, #0
 8013474:	341a      	adds	r4, #26
 8013476:	42b5      	cmp	r5, r6
 8013478:	d11a      	bne.n	80134b0 <_printf_common+0xc8>
 801347a:	2000      	movs	r0, #0
 801347c:	e008      	b.n	8013490 <_printf_common+0xa8>
 801347e:	2301      	movs	r3, #1
 8013480:	4652      	mov	r2, sl
 8013482:	4641      	mov	r1, r8
 8013484:	4638      	mov	r0, r7
 8013486:	47c8      	blx	r9
 8013488:	3001      	adds	r0, #1
 801348a:	d103      	bne.n	8013494 <_printf_common+0xac>
 801348c:	f04f 30ff 	mov.w	r0, #4294967295
 8013490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013494:	3501      	adds	r5, #1
 8013496:	e7c6      	b.n	8013426 <_printf_common+0x3e>
 8013498:	18e1      	adds	r1, r4, r3
 801349a:	1c5a      	adds	r2, r3, #1
 801349c:	2030      	movs	r0, #48	@ 0x30
 801349e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80134a2:	4422      	add	r2, r4
 80134a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80134a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80134ac:	3302      	adds	r3, #2
 80134ae:	e7c7      	b.n	8013440 <_printf_common+0x58>
 80134b0:	2301      	movs	r3, #1
 80134b2:	4622      	mov	r2, r4
 80134b4:	4641      	mov	r1, r8
 80134b6:	4638      	mov	r0, r7
 80134b8:	47c8      	blx	r9
 80134ba:	3001      	adds	r0, #1
 80134bc:	d0e6      	beq.n	801348c <_printf_common+0xa4>
 80134be:	3601      	adds	r6, #1
 80134c0:	e7d9      	b.n	8013476 <_printf_common+0x8e>
	...

080134c4 <_printf_i>:
 80134c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80134c8:	7e0f      	ldrb	r7, [r1, #24]
 80134ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80134cc:	2f78      	cmp	r7, #120	@ 0x78
 80134ce:	4691      	mov	r9, r2
 80134d0:	4680      	mov	r8, r0
 80134d2:	460c      	mov	r4, r1
 80134d4:	469a      	mov	sl, r3
 80134d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80134da:	d807      	bhi.n	80134ec <_printf_i+0x28>
 80134dc:	2f62      	cmp	r7, #98	@ 0x62
 80134de:	d80a      	bhi.n	80134f6 <_printf_i+0x32>
 80134e0:	2f00      	cmp	r7, #0
 80134e2:	f000 80d2 	beq.w	801368a <_printf_i+0x1c6>
 80134e6:	2f58      	cmp	r7, #88	@ 0x58
 80134e8:	f000 80b9 	beq.w	801365e <_printf_i+0x19a>
 80134ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80134f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80134f4:	e03a      	b.n	801356c <_printf_i+0xa8>
 80134f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80134fa:	2b15      	cmp	r3, #21
 80134fc:	d8f6      	bhi.n	80134ec <_printf_i+0x28>
 80134fe:	a101      	add	r1, pc, #4	@ (adr r1, 8013504 <_printf_i+0x40>)
 8013500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013504:	0801355d 	.word	0x0801355d
 8013508:	08013571 	.word	0x08013571
 801350c:	080134ed 	.word	0x080134ed
 8013510:	080134ed 	.word	0x080134ed
 8013514:	080134ed 	.word	0x080134ed
 8013518:	080134ed 	.word	0x080134ed
 801351c:	08013571 	.word	0x08013571
 8013520:	080134ed 	.word	0x080134ed
 8013524:	080134ed 	.word	0x080134ed
 8013528:	080134ed 	.word	0x080134ed
 801352c:	080134ed 	.word	0x080134ed
 8013530:	08013671 	.word	0x08013671
 8013534:	0801359b 	.word	0x0801359b
 8013538:	0801362b 	.word	0x0801362b
 801353c:	080134ed 	.word	0x080134ed
 8013540:	080134ed 	.word	0x080134ed
 8013544:	08013693 	.word	0x08013693
 8013548:	080134ed 	.word	0x080134ed
 801354c:	0801359b 	.word	0x0801359b
 8013550:	080134ed 	.word	0x080134ed
 8013554:	080134ed 	.word	0x080134ed
 8013558:	08013633 	.word	0x08013633
 801355c:	6833      	ldr	r3, [r6, #0]
 801355e:	1d1a      	adds	r2, r3, #4
 8013560:	681b      	ldr	r3, [r3, #0]
 8013562:	6032      	str	r2, [r6, #0]
 8013564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013568:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801356c:	2301      	movs	r3, #1
 801356e:	e09d      	b.n	80136ac <_printf_i+0x1e8>
 8013570:	6833      	ldr	r3, [r6, #0]
 8013572:	6820      	ldr	r0, [r4, #0]
 8013574:	1d19      	adds	r1, r3, #4
 8013576:	6031      	str	r1, [r6, #0]
 8013578:	0606      	lsls	r6, r0, #24
 801357a:	d501      	bpl.n	8013580 <_printf_i+0xbc>
 801357c:	681d      	ldr	r5, [r3, #0]
 801357e:	e003      	b.n	8013588 <_printf_i+0xc4>
 8013580:	0645      	lsls	r5, r0, #25
 8013582:	d5fb      	bpl.n	801357c <_printf_i+0xb8>
 8013584:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013588:	2d00      	cmp	r5, #0
 801358a:	da03      	bge.n	8013594 <_printf_i+0xd0>
 801358c:	232d      	movs	r3, #45	@ 0x2d
 801358e:	426d      	negs	r5, r5
 8013590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013594:	4859      	ldr	r0, [pc, #356]	@ (80136fc <_printf_i+0x238>)
 8013596:	230a      	movs	r3, #10
 8013598:	e011      	b.n	80135be <_printf_i+0xfa>
 801359a:	6821      	ldr	r1, [r4, #0]
 801359c:	6833      	ldr	r3, [r6, #0]
 801359e:	0608      	lsls	r0, r1, #24
 80135a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80135a4:	d402      	bmi.n	80135ac <_printf_i+0xe8>
 80135a6:	0649      	lsls	r1, r1, #25
 80135a8:	bf48      	it	mi
 80135aa:	b2ad      	uxthmi	r5, r5
 80135ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80135ae:	4853      	ldr	r0, [pc, #332]	@ (80136fc <_printf_i+0x238>)
 80135b0:	6033      	str	r3, [r6, #0]
 80135b2:	bf14      	ite	ne
 80135b4:	230a      	movne	r3, #10
 80135b6:	2308      	moveq	r3, #8
 80135b8:	2100      	movs	r1, #0
 80135ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80135be:	6866      	ldr	r6, [r4, #4]
 80135c0:	60a6      	str	r6, [r4, #8]
 80135c2:	2e00      	cmp	r6, #0
 80135c4:	bfa2      	ittt	ge
 80135c6:	6821      	ldrge	r1, [r4, #0]
 80135c8:	f021 0104 	bicge.w	r1, r1, #4
 80135cc:	6021      	strge	r1, [r4, #0]
 80135ce:	b90d      	cbnz	r5, 80135d4 <_printf_i+0x110>
 80135d0:	2e00      	cmp	r6, #0
 80135d2:	d04b      	beq.n	801366c <_printf_i+0x1a8>
 80135d4:	4616      	mov	r6, r2
 80135d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80135da:	fb03 5711 	mls	r7, r3, r1, r5
 80135de:	5dc7      	ldrb	r7, [r0, r7]
 80135e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80135e4:	462f      	mov	r7, r5
 80135e6:	42bb      	cmp	r3, r7
 80135e8:	460d      	mov	r5, r1
 80135ea:	d9f4      	bls.n	80135d6 <_printf_i+0x112>
 80135ec:	2b08      	cmp	r3, #8
 80135ee:	d10b      	bne.n	8013608 <_printf_i+0x144>
 80135f0:	6823      	ldr	r3, [r4, #0]
 80135f2:	07df      	lsls	r7, r3, #31
 80135f4:	d508      	bpl.n	8013608 <_printf_i+0x144>
 80135f6:	6923      	ldr	r3, [r4, #16]
 80135f8:	6861      	ldr	r1, [r4, #4]
 80135fa:	4299      	cmp	r1, r3
 80135fc:	bfde      	ittt	le
 80135fe:	2330      	movle	r3, #48	@ 0x30
 8013600:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013604:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013608:	1b92      	subs	r2, r2, r6
 801360a:	6122      	str	r2, [r4, #16]
 801360c:	f8cd a000 	str.w	sl, [sp]
 8013610:	464b      	mov	r3, r9
 8013612:	aa03      	add	r2, sp, #12
 8013614:	4621      	mov	r1, r4
 8013616:	4640      	mov	r0, r8
 8013618:	f7ff fee6 	bl	80133e8 <_printf_common>
 801361c:	3001      	adds	r0, #1
 801361e:	d14a      	bne.n	80136b6 <_printf_i+0x1f2>
 8013620:	f04f 30ff 	mov.w	r0, #4294967295
 8013624:	b004      	add	sp, #16
 8013626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801362a:	6823      	ldr	r3, [r4, #0]
 801362c:	f043 0320 	orr.w	r3, r3, #32
 8013630:	6023      	str	r3, [r4, #0]
 8013632:	4833      	ldr	r0, [pc, #204]	@ (8013700 <_printf_i+0x23c>)
 8013634:	2778      	movs	r7, #120	@ 0x78
 8013636:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801363a:	6823      	ldr	r3, [r4, #0]
 801363c:	6831      	ldr	r1, [r6, #0]
 801363e:	061f      	lsls	r7, r3, #24
 8013640:	f851 5b04 	ldr.w	r5, [r1], #4
 8013644:	d402      	bmi.n	801364c <_printf_i+0x188>
 8013646:	065f      	lsls	r7, r3, #25
 8013648:	bf48      	it	mi
 801364a:	b2ad      	uxthmi	r5, r5
 801364c:	6031      	str	r1, [r6, #0]
 801364e:	07d9      	lsls	r1, r3, #31
 8013650:	bf44      	itt	mi
 8013652:	f043 0320 	orrmi.w	r3, r3, #32
 8013656:	6023      	strmi	r3, [r4, #0]
 8013658:	b11d      	cbz	r5, 8013662 <_printf_i+0x19e>
 801365a:	2310      	movs	r3, #16
 801365c:	e7ac      	b.n	80135b8 <_printf_i+0xf4>
 801365e:	4827      	ldr	r0, [pc, #156]	@ (80136fc <_printf_i+0x238>)
 8013660:	e7e9      	b.n	8013636 <_printf_i+0x172>
 8013662:	6823      	ldr	r3, [r4, #0]
 8013664:	f023 0320 	bic.w	r3, r3, #32
 8013668:	6023      	str	r3, [r4, #0]
 801366a:	e7f6      	b.n	801365a <_printf_i+0x196>
 801366c:	4616      	mov	r6, r2
 801366e:	e7bd      	b.n	80135ec <_printf_i+0x128>
 8013670:	6833      	ldr	r3, [r6, #0]
 8013672:	6825      	ldr	r5, [r4, #0]
 8013674:	6961      	ldr	r1, [r4, #20]
 8013676:	1d18      	adds	r0, r3, #4
 8013678:	6030      	str	r0, [r6, #0]
 801367a:	062e      	lsls	r6, r5, #24
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	d501      	bpl.n	8013684 <_printf_i+0x1c0>
 8013680:	6019      	str	r1, [r3, #0]
 8013682:	e002      	b.n	801368a <_printf_i+0x1c6>
 8013684:	0668      	lsls	r0, r5, #25
 8013686:	d5fb      	bpl.n	8013680 <_printf_i+0x1bc>
 8013688:	8019      	strh	r1, [r3, #0]
 801368a:	2300      	movs	r3, #0
 801368c:	6123      	str	r3, [r4, #16]
 801368e:	4616      	mov	r6, r2
 8013690:	e7bc      	b.n	801360c <_printf_i+0x148>
 8013692:	6833      	ldr	r3, [r6, #0]
 8013694:	1d1a      	adds	r2, r3, #4
 8013696:	6032      	str	r2, [r6, #0]
 8013698:	681e      	ldr	r6, [r3, #0]
 801369a:	6862      	ldr	r2, [r4, #4]
 801369c:	2100      	movs	r1, #0
 801369e:	4630      	mov	r0, r6
 80136a0:	f7ec fd76 	bl	8000190 <memchr>
 80136a4:	b108      	cbz	r0, 80136aa <_printf_i+0x1e6>
 80136a6:	1b80      	subs	r0, r0, r6
 80136a8:	6060      	str	r0, [r4, #4]
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	6123      	str	r3, [r4, #16]
 80136ae:	2300      	movs	r3, #0
 80136b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80136b4:	e7aa      	b.n	801360c <_printf_i+0x148>
 80136b6:	6923      	ldr	r3, [r4, #16]
 80136b8:	4632      	mov	r2, r6
 80136ba:	4649      	mov	r1, r9
 80136bc:	4640      	mov	r0, r8
 80136be:	47d0      	blx	sl
 80136c0:	3001      	adds	r0, #1
 80136c2:	d0ad      	beq.n	8013620 <_printf_i+0x15c>
 80136c4:	6823      	ldr	r3, [r4, #0]
 80136c6:	079b      	lsls	r3, r3, #30
 80136c8:	d413      	bmi.n	80136f2 <_printf_i+0x22e>
 80136ca:	68e0      	ldr	r0, [r4, #12]
 80136cc:	9b03      	ldr	r3, [sp, #12]
 80136ce:	4298      	cmp	r0, r3
 80136d0:	bfb8      	it	lt
 80136d2:	4618      	movlt	r0, r3
 80136d4:	e7a6      	b.n	8013624 <_printf_i+0x160>
 80136d6:	2301      	movs	r3, #1
 80136d8:	4632      	mov	r2, r6
 80136da:	4649      	mov	r1, r9
 80136dc:	4640      	mov	r0, r8
 80136de:	47d0      	blx	sl
 80136e0:	3001      	adds	r0, #1
 80136e2:	d09d      	beq.n	8013620 <_printf_i+0x15c>
 80136e4:	3501      	adds	r5, #1
 80136e6:	68e3      	ldr	r3, [r4, #12]
 80136e8:	9903      	ldr	r1, [sp, #12]
 80136ea:	1a5b      	subs	r3, r3, r1
 80136ec:	42ab      	cmp	r3, r5
 80136ee:	dcf2      	bgt.n	80136d6 <_printf_i+0x212>
 80136f0:	e7eb      	b.n	80136ca <_printf_i+0x206>
 80136f2:	2500      	movs	r5, #0
 80136f4:	f104 0619 	add.w	r6, r4, #25
 80136f8:	e7f5      	b.n	80136e6 <_printf_i+0x222>
 80136fa:	bf00      	nop
 80136fc:	08015749 	.word	0x08015749
 8013700:	0801575a 	.word	0x0801575a

08013704 <__sflush_r>:
 8013704:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801370c:	0716      	lsls	r6, r2, #28
 801370e:	4605      	mov	r5, r0
 8013710:	460c      	mov	r4, r1
 8013712:	d454      	bmi.n	80137be <__sflush_r+0xba>
 8013714:	684b      	ldr	r3, [r1, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	dc02      	bgt.n	8013720 <__sflush_r+0x1c>
 801371a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801371c:	2b00      	cmp	r3, #0
 801371e:	dd48      	ble.n	80137b2 <__sflush_r+0xae>
 8013720:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8013722:	2e00      	cmp	r6, #0
 8013724:	d045      	beq.n	80137b2 <__sflush_r+0xae>
 8013726:	2300      	movs	r3, #0
 8013728:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801372c:	682f      	ldr	r7, [r5, #0]
 801372e:	6a21      	ldr	r1, [r4, #32]
 8013730:	602b      	str	r3, [r5, #0]
 8013732:	d030      	beq.n	8013796 <__sflush_r+0x92>
 8013734:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8013736:	89a3      	ldrh	r3, [r4, #12]
 8013738:	0759      	lsls	r1, r3, #29
 801373a:	d505      	bpl.n	8013748 <__sflush_r+0x44>
 801373c:	6863      	ldr	r3, [r4, #4]
 801373e:	1ad2      	subs	r2, r2, r3
 8013740:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013742:	b10b      	cbz	r3, 8013748 <__sflush_r+0x44>
 8013744:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8013746:	1ad2      	subs	r2, r2, r3
 8013748:	2300      	movs	r3, #0
 801374a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801374c:	6a21      	ldr	r1, [r4, #32]
 801374e:	4628      	mov	r0, r5
 8013750:	47b0      	blx	r6
 8013752:	1c43      	adds	r3, r0, #1
 8013754:	89a3      	ldrh	r3, [r4, #12]
 8013756:	d106      	bne.n	8013766 <__sflush_r+0x62>
 8013758:	6829      	ldr	r1, [r5, #0]
 801375a:	291d      	cmp	r1, #29
 801375c:	d82b      	bhi.n	80137b6 <__sflush_r+0xb2>
 801375e:	4a2a      	ldr	r2, [pc, #168]	@ (8013808 <__sflush_r+0x104>)
 8013760:	410a      	asrs	r2, r1
 8013762:	07d6      	lsls	r6, r2, #31
 8013764:	d427      	bmi.n	80137b6 <__sflush_r+0xb2>
 8013766:	2200      	movs	r2, #0
 8013768:	6062      	str	r2, [r4, #4]
 801376a:	04d9      	lsls	r1, r3, #19
 801376c:	6922      	ldr	r2, [r4, #16]
 801376e:	6022      	str	r2, [r4, #0]
 8013770:	d504      	bpl.n	801377c <__sflush_r+0x78>
 8013772:	1c42      	adds	r2, r0, #1
 8013774:	d101      	bne.n	801377a <__sflush_r+0x76>
 8013776:	682b      	ldr	r3, [r5, #0]
 8013778:	b903      	cbnz	r3, 801377c <__sflush_r+0x78>
 801377a:	6560      	str	r0, [r4, #84]	@ 0x54
 801377c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801377e:	602f      	str	r7, [r5, #0]
 8013780:	b1b9      	cbz	r1, 80137b2 <__sflush_r+0xae>
 8013782:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013786:	4299      	cmp	r1, r3
 8013788:	d002      	beq.n	8013790 <__sflush_r+0x8c>
 801378a:	4628      	mov	r0, r5
 801378c:	f7ff fbf2 	bl	8012f74 <_free_r>
 8013790:	2300      	movs	r3, #0
 8013792:	6363      	str	r3, [r4, #52]	@ 0x34
 8013794:	e00d      	b.n	80137b2 <__sflush_r+0xae>
 8013796:	2301      	movs	r3, #1
 8013798:	4628      	mov	r0, r5
 801379a:	47b0      	blx	r6
 801379c:	4602      	mov	r2, r0
 801379e:	1c50      	adds	r0, r2, #1
 80137a0:	d1c9      	bne.n	8013736 <__sflush_r+0x32>
 80137a2:	682b      	ldr	r3, [r5, #0]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d0c6      	beq.n	8013736 <__sflush_r+0x32>
 80137a8:	2b1d      	cmp	r3, #29
 80137aa:	d001      	beq.n	80137b0 <__sflush_r+0xac>
 80137ac:	2b16      	cmp	r3, #22
 80137ae:	d11e      	bne.n	80137ee <__sflush_r+0xea>
 80137b0:	602f      	str	r7, [r5, #0]
 80137b2:	2000      	movs	r0, #0
 80137b4:	e022      	b.n	80137fc <__sflush_r+0xf8>
 80137b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137ba:	b21b      	sxth	r3, r3
 80137bc:	e01b      	b.n	80137f6 <__sflush_r+0xf2>
 80137be:	690f      	ldr	r7, [r1, #16]
 80137c0:	2f00      	cmp	r7, #0
 80137c2:	d0f6      	beq.n	80137b2 <__sflush_r+0xae>
 80137c4:	0793      	lsls	r3, r2, #30
 80137c6:	680e      	ldr	r6, [r1, #0]
 80137c8:	bf08      	it	eq
 80137ca:	694b      	ldreq	r3, [r1, #20]
 80137cc:	600f      	str	r7, [r1, #0]
 80137ce:	bf18      	it	ne
 80137d0:	2300      	movne	r3, #0
 80137d2:	eba6 0807 	sub.w	r8, r6, r7
 80137d6:	608b      	str	r3, [r1, #8]
 80137d8:	f1b8 0f00 	cmp.w	r8, #0
 80137dc:	dde9      	ble.n	80137b2 <__sflush_r+0xae>
 80137de:	6a21      	ldr	r1, [r4, #32]
 80137e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80137e2:	4643      	mov	r3, r8
 80137e4:	463a      	mov	r2, r7
 80137e6:	4628      	mov	r0, r5
 80137e8:	47b0      	blx	r6
 80137ea:	2800      	cmp	r0, #0
 80137ec:	dc08      	bgt.n	8013800 <__sflush_r+0xfc>
 80137ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80137f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137f6:	81a3      	strh	r3, [r4, #12]
 80137f8:	f04f 30ff 	mov.w	r0, #4294967295
 80137fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013800:	4407      	add	r7, r0
 8013802:	eba8 0800 	sub.w	r8, r8, r0
 8013806:	e7e7      	b.n	80137d8 <__sflush_r+0xd4>
 8013808:	dfbffffe 	.word	0xdfbffffe

0801380c <_fflush_r>:
 801380c:	b538      	push	{r3, r4, r5, lr}
 801380e:	690b      	ldr	r3, [r1, #16]
 8013810:	4605      	mov	r5, r0
 8013812:	460c      	mov	r4, r1
 8013814:	b913      	cbnz	r3, 801381c <_fflush_r+0x10>
 8013816:	2500      	movs	r5, #0
 8013818:	4628      	mov	r0, r5
 801381a:	bd38      	pop	{r3, r4, r5, pc}
 801381c:	b118      	cbz	r0, 8013826 <_fflush_r+0x1a>
 801381e:	6a03      	ldr	r3, [r0, #32]
 8013820:	b90b      	cbnz	r3, 8013826 <_fflush_r+0x1a>
 8013822:	f7ff f981 	bl	8012b28 <__sinit>
 8013826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d0f3      	beq.n	8013816 <_fflush_r+0xa>
 801382e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013830:	07d0      	lsls	r0, r2, #31
 8013832:	d404      	bmi.n	801383e <_fflush_r+0x32>
 8013834:	0599      	lsls	r1, r3, #22
 8013836:	d402      	bmi.n	801383e <_fflush_r+0x32>
 8013838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801383a:	f7ff fb8a 	bl	8012f52 <__retarget_lock_acquire_recursive>
 801383e:	4628      	mov	r0, r5
 8013840:	4621      	mov	r1, r4
 8013842:	f7ff ff5f 	bl	8013704 <__sflush_r>
 8013846:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013848:	07da      	lsls	r2, r3, #31
 801384a:	4605      	mov	r5, r0
 801384c:	d4e4      	bmi.n	8013818 <_fflush_r+0xc>
 801384e:	89a3      	ldrh	r3, [r4, #12]
 8013850:	059b      	lsls	r3, r3, #22
 8013852:	d4e1      	bmi.n	8013818 <_fflush_r+0xc>
 8013854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013856:	f7ff fb7d 	bl	8012f54 <__retarget_lock_release_recursive>
 801385a:	e7dd      	b.n	8013818 <_fflush_r+0xc>

0801385c <__swhatbuf_r>:
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	460c      	mov	r4, r1
 8013860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013864:	2900      	cmp	r1, #0
 8013866:	b096      	sub	sp, #88	@ 0x58
 8013868:	4615      	mov	r5, r2
 801386a:	461e      	mov	r6, r3
 801386c:	da0d      	bge.n	801388a <__swhatbuf_r+0x2e>
 801386e:	89a3      	ldrh	r3, [r4, #12]
 8013870:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013874:	f04f 0100 	mov.w	r1, #0
 8013878:	bf14      	ite	ne
 801387a:	2340      	movne	r3, #64	@ 0x40
 801387c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8013880:	2000      	movs	r0, #0
 8013882:	6031      	str	r1, [r6, #0]
 8013884:	602b      	str	r3, [r5, #0]
 8013886:	b016      	add	sp, #88	@ 0x58
 8013888:	bd70      	pop	{r4, r5, r6, pc}
 801388a:	466a      	mov	r2, sp
 801388c:	f000 f88a 	bl	80139a4 <_fstat_r>
 8013890:	2800      	cmp	r0, #0
 8013892:	dbec      	blt.n	801386e <__swhatbuf_r+0x12>
 8013894:	9901      	ldr	r1, [sp, #4]
 8013896:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801389a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801389e:	4259      	negs	r1, r3
 80138a0:	4159      	adcs	r1, r3
 80138a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80138a6:	e7eb      	b.n	8013880 <__swhatbuf_r+0x24>

080138a8 <__smakebuf_r>:
 80138a8:	898b      	ldrh	r3, [r1, #12]
 80138aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138ac:	079d      	lsls	r5, r3, #30
 80138ae:	4606      	mov	r6, r0
 80138b0:	460c      	mov	r4, r1
 80138b2:	d507      	bpl.n	80138c4 <__smakebuf_r+0x1c>
 80138b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80138b8:	6023      	str	r3, [r4, #0]
 80138ba:	6123      	str	r3, [r4, #16]
 80138bc:	2301      	movs	r3, #1
 80138be:	6163      	str	r3, [r4, #20]
 80138c0:	b003      	add	sp, #12
 80138c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80138c4:	ab01      	add	r3, sp, #4
 80138c6:	466a      	mov	r2, sp
 80138c8:	f7ff ffc8 	bl	801385c <__swhatbuf_r>
 80138cc:	9f00      	ldr	r7, [sp, #0]
 80138ce:	4605      	mov	r5, r0
 80138d0:	4639      	mov	r1, r7
 80138d2:	4630      	mov	r0, r6
 80138d4:	f7ff fbba 	bl	801304c <_malloc_r>
 80138d8:	b948      	cbnz	r0, 80138ee <__smakebuf_r+0x46>
 80138da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80138de:	059a      	lsls	r2, r3, #22
 80138e0:	d4ee      	bmi.n	80138c0 <__smakebuf_r+0x18>
 80138e2:	f023 0303 	bic.w	r3, r3, #3
 80138e6:	f043 0302 	orr.w	r3, r3, #2
 80138ea:	81a3      	strh	r3, [r4, #12]
 80138ec:	e7e2      	b.n	80138b4 <__smakebuf_r+0xc>
 80138ee:	89a3      	ldrh	r3, [r4, #12]
 80138f0:	6020      	str	r0, [r4, #0]
 80138f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80138f6:	81a3      	strh	r3, [r4, #12]
 80138f8:	9b01      	ldr	r3, [sp, #4]
 80138fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80138fe:	b15b      	cbz	r3, 8013918 <__smakebuf_r+0x70>
 8013900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013904:	4630      	mov	r0, r6
 8013906:	f000 f85f 	bl	80139c8 <_isatty_r>
 801390a:	b128      	cbz	r0, 8013918 <__smakebuf_r+0x70>
 801390c:	89a3      	ldrh	r3, [r4, #12]
 801390e:	f023 0303 	bic.w	r3, r3, #3
 8013912:	f043 0301 	orr.w	r3, r3, #1
 8013916:	81a3      	strh	r3, [r4, #12]
 8013918:	89a3      	ldrh	r3, [r4, #12]
 801391a:	431d      	orrs	r5, r3
 801391c:	81a5      	strh	r5, [r4, #12]
 801391e:	e7cf      	b.n	80138c0 <__smakebuf_r+0x18>

08013920 <_putc_r>:
 8013920:	b570      	push	{r4, r5, r6, lr}
 8013922:	460d      	mov	r5, r1
 8013924:	4614      	mov	r4, r2
 8013926:	4606      	mov	r6, r0
 8013928:	b118      	cbz	r0, 8013932 <_putc_r+0x12>
 801392a:	6a03      	ldr	r3, [r0, #32]
 801392c:	b90b      	cbnz	r3, 8013932 <_putc_r+0x12>
 801392e:	f7ff f8fb 	bl	8012b28 <__sinit>
 8013932:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013934:	07d8      	lsls	r0, r3, #31
 8013936:	d405      	bmi.n	8013944 <_putc_r+0x24>
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	0599      	lsls	r1, r3, #22
 801393c:	d402      	bmi.n	8013944 <_putc_r+0x24>
 801393e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013940:	f7ff fb07 	bl	8012f52 <__retarget_lock_acquire_recursive>
 8013944:	68a3      	ldr	r3, [r4, #8]
 8013946:	3b01      	subs	r3, #1
 8013948:	2b00      	cmp	r3, #0
 801394a:	60a3      	str	r3, [r4, #8]
 801394c:	da05      	bge.n	801395a <_putc_r+0x3a>
 801394e:	69a2      	ldr	r2, [r4, #24]
 8013950:	4293      	cmp	r3, r2
 8013952:	db12      	blt.n	801397a <_putc_r+0x5a>
 8013954:	b2eb      	uxtb	r3, r5
 8013956:	2b0a      	cmp	r3, #10
 8013958:	d00f      	beq.n	801397a <_putc_r+0x5a>
 801395a:	6823      	ldr	r3, [r4, #0]
 801395c:	1c5a      	adds	r2, r3, #1
 801395e:	6022      	str	r2, [r4, #0]
 8013960:	701d      	strb	r5, [r3, #0]
 8013962:	b2ed      	uxtb	r5, r5
 8013964:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013966:	07da      	lsls	r2, r3, #31
 8013968:	d405      	bmi.n	8013976 <_putc_r+0x56>
 801396a:	89a3      	ldrh	r3, [r4, #12]
 801396c:	059b      	lsls	r3, r3, #22
 801396e:	d402      	bmi.n	8013976 <_putc_r+0x56>
 8013970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013972:	f7ff faef 	bl	8012f54 <__retarget_lock_release_recursive>
 8013976:	4628      	mov	r0, r5
 8013978:	bd70      	pop	{r4, r5, r6, pc}
 801397a:	4629      	mov	r1, r5
 801397c:	4622      	mov	r2, r4
 801397e:	4630      	mov	r0, r6
 8013980:	f7ff f9c3 	bl	8012d0a <__swbuf_r>
 8013984:	4605      	mov	r5, r0
 8013986:	e7ed      	b.n	8013964 <_putc_r+0x44>

08013988 <strchr>:
 8013988:	b2c9      	uxtb	r1, r1
 801398a:	4603      	mov	r3, r0
 801398c:	4618      	mov	r0, r3
 801398e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013992:	b112      	cbz	r2, 801399a <strchr+0x12>
 8013994:	428a      	cmp	r2, r1
 8013996:	d1f9      	bne.n	801398c <strchr+0x4>
 8013998:	4770      	bx	lr
 801399a:	2900      	cmp	r1, #0
 801399c:	bf18      	it	ne
 801399e:	2000      	movne	r0, #0
 80139a0:	4770      	bx	lr
	...

080139a4 <_fstat_r>:
 80139a4:	b538      	push	{r3, r4, r5, lr}
 80139a6:	4d07      	ldr	r5, [pc, #28]	@ (80139c4 <_fstat_r+0x20>)
 80139a8:	2300      	movs	r3, #0
 80139aa:	4604      	mov	r4, r0
 80139ac:	4608      	mov	r0, r1
 80139ae:	4611      	mov	r1, r2
 80139b0:	602b      	str	r3, [r5, #0]
 80139b2:	f7ef ff6c 	bl	800388e <_fstat>
 80139b6:	1c43      	adds	r3, r0, #1
 80139b8:	d102      	bne.n	80139c0 <_fstat_r+0x1c>
 80139ba:	682b      	ldr	r3, [r5, #0]
 80139bc:	b103      	cbz	r3, 80139c0 <_fstat_r+0x1c>
 80139be:	6023      	str	r3, [r4, #0]
 80139c0:	bd38      	pop	{r3, r4, r5, pc}
 80139c2:	bf00      	nop
 80139c4:	20000da8 	.word	0x20000da8

080139c8 <_isatty_r>:
 80139c8:	b538      	push	{r3, r4, r5, lr}
 80139ca:	4d06      	ldr	r5, [pc, #24]	@ (80139e4 <_isatty_r+0x1c>)
 80139cc:	2300      	movs	r3, #0
 80139ce:	4604      	mov	r4, r0
 80139d0:	4608      	mov	r0, r1
 80139d2:	602b      	str	r3, [r5, #0]
 80139d4:	f7ef ff6b 	bl	80038ae <_isatty>
 80139d8:	1c43      	adds	r3, r0, #1
 80139da:	d102      	bne.n	80139e2 <_isatty_r+0x1a>
 80139dc:	682b      	ldr	r3, [r5, #0]
 80139de:	b103      	cbz	r3, 80139e2 <_isatty_r+0x1a>
 80139e0:	6023      	str	r3, [r4, #0]
 80139e2:	bd38      	pop	{r3, r4, r5, pc}
 80139e4:	20000da8 	.word	0x20000da8

080139e8 <_sbrk_r>:
 80139e8:	b538      	push	{r3, r4, r5, lr}
 80139ea:	4d06      	ldr	r5, [pc, #24]	@ (8013a04 <_sbrk_r+0x1c>)
 80139ec:	2300      	movs	r3, #0
 80139ee:	4604      	mov	r4, r0
 80139f0:	4608      	mov	r0, r1
 80139f2:	602b      	str	r3, [r5, #0]
 80139f4:	f7ef ff74 	bl	80038e0 <_sbrk>
 80139f8:	1c43      	adds	r3, r0, #1
 80139fa:	d102      	bne.n	8013a02 <_sbrk_r+0x1a>
 80139fc:	682b      	ldr	r3, [r5, #0]
 80139fe:	b103      	cbz	r3, 8013a02 <_sbrk_r+0x1a>
 8013a00:	6023      	str	r3, [r4, #0]
 8013a02:	bd38      	pop	{r3, r4, r5, pc}
 8013a04:	20000da8 	.word	0x20000da8

08013a08 <fmax>:
 8013a08:	b508      	push	{r3, lr}
 8013a0a:	ed2d 8b04 	vpush	{d8-d9}
 8013a0e:	eeb0 8a40 	vmov.f32	s16, s0
 8013a12:	eef0 8a60 	vmov.f32	s17, s1
 8013a16:	eeb0 9a41 	vmov.f32	s18, s2
 8013a1a:	eef0 9a61 	vmov.f32	s19, s3
 8013a1e:	f000 f847 	bl	8013ab0 <__fpclassifyd>
 8013a22:	b950      	cbnz	r0, 8013a3a <fmax+0x32>
 8013a24:	eeb0 8a49 	vmov.f32	s16, s18
 8013a28:	eef0 8a69 	vmov.f32	s17, s19
 8013a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8013a30:	eef0 0a68 	vmov.f32	s1, s17
 8013a34:	ecbd 8b04 	vpop	{d8-d9}
 8013a38:	bd08      	pop	{r3, pc}
 8013a3a:	eeb0 0a49 	vmov.f32	s0, s18
 8013a3e:	eef0 0a69 	vmov.f32	s1, s19
 8013a42:	f000 f835 	bl	8013ab0 <__fpclassifyd>
 8013a46:	2800      	cmp	r0, #0
 8013a48:	d0f0      	beq.n	8013a2c <fmax+0x24>
 8013a4a:	ec53 2b19 	vmov	r2, r3, d9
 8013a4e:	ec51 0b18 	vmov	r0, r1, d8
 8013a52:	f7ec ff51 	bl	80008f8 <__aeabi_dcmpgt>
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d0e4      	beq.n	8013a24 <fmax+0x1c>
 8013a5a:	e7e7      	b.n	8013a2c <fmax+0x24>

08013a5c <fmin>:
 8013a5c:	b508      	push	{r3, lr}
 8013a5e:	ed2d 8b04 	vpush	{d8-d9}
 8013a62:	eeb0 8a40 	vmov.f32	s16, s0
 8013a66:	eef0 8a60 	vmov.f32	s17, s1
 8013a6a:	eeb0 9a41 	vmov.f32	s18, s2
 8013a6e:	eef0 9a61 	vmov.f32	s19, s3
 8013a72:	f000 f81d 	bl	8013ab0 <__fpclassifyd>
 8013a76:	b950      	cbnz	r0, 8013a8e <fmin+0x32>
 8013a78:	eeb0 8a49 	vmov.f32	s16, s18
 8013a7c:	eef0 8a69 	vmov.f32	s17, s19
 8013a80:	eeb0 0a48 	vmov.f32	s0, s16
 8013a84:	eef0 0a68 	vmov.f32	s1, s17
 8013a88:	ecbd 8b04 	vpop	{d8-d9}
 8013a8c:	bd08      	pop	{r3, pc}
 8013a8e:	eeb0 0a49 	vmov.f32	s0, s18
 8013a92:	eef0 0a69 	vmov.f32	s1, s19
 8013a96:	f000 f80b 	bl	8013ab0 <__fpclassifyd>
 8013a9a:	2800      	cmp	r0, #0
 8013a9c:	d0f0      	beq.n	8013a80 <fmin+0x24>
 8013a9e:	ec53 2b19 	vmov	r2, r3, d9
 8013aa2:	ec51 0b18 	vmov	r0, r1, d8
 8013aa6:	f7ec ff09 	bl	80008bc <__aeabi_dcmplt>
 8013aaa:	2800      	cmp	r0, #0
 8013aac:	d0e4      	beq.n	8013a78 <fmin+0x1c>
 8013aae:	e7e7      	b.n	8013a80 <fmin+0x24>

08013ab0 <__fpclassifyd>:
 8013ab0:	ec51 0b10 	vmov	r0, r1, d0
 8013ab4:	b510      	push	{r4, lr}
 8013ab6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 8013aba:	460b      	mov	r3, r1
 8013abc:	d019      	beq.n	8013af2 <__fpclassifyd+0x42>
 8013abe:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 8013ac2:	490e      	ldr	r1, [pc, #56]	@ (8013afc <__fpclassifyd+0x4c>)
 8013ac4:	428a      	cmp	r2, r1
 8013ac6:	d90e      	bls.n	8013ae6 <__fpclassifyd+0x36>
 8013ac8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 8013acc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8013ad0:	428a      	cmp	r2, r1
 8013ad2:	d908      	bls.n	8013ae6 <__fpclassifyd+0x36>
 8013ad4:	4a0a      	ldr	r2, [pc, #40]	@ (8013b00 <__fpclassifyd+0x50>)
 8013ad6:	4213      	tst	r3, r2
 8013ad8:	d007      	beq.n	8013aea <__fpclassifyd+0x3a>
 8013ada:	4294      	cmp	r4, r2
 8013adc:	d107      	bne.n	8013aee <__fpclassifyd+0x3e>
 8013ade:	fab0 f080 	clz	r0, r0
 8013ae2:	0940      	lsrs	r0, r0, #5
 8013ae4:	bd10      	pop	{r4, pc}
 8013ae6:	2004      	movs	r0, #4
 8013ae8:	e7fc      	b.n	8013ae4 <__fpclassifyd+0x34>
 8013aea:	2003      	movs	r0, #3
 8013aec:	e7fa      	b.n	8013ae4 <__fpclassifyd+0x34>
 8013aee:	2000      	movs	r0, #0
 8013af0:	e7f8      	b.n	8013ae4 <__fpclassifyd+0x34>
 8013af2:	2800      	cmp	r0, #0
 8013af4:	d1ee      	bne.n	8013ad4 <__fpclassifyd+0x24>
 8013af6:	2002      	movs	r0, #2
 8013af8:	e7f4      	b.n	8013ae4 <__fpclassifyd+0x34>
 8013afa:	bf00      	nop
 8013afc:	7fdfffff 	.word	0x7fdfffff
 8013b00:	7ff00000 	.word	0x7ff00000

08013b04 <_init>:
 8013b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b06:	bf00      	nop
 8013b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b0a:	bc08      	pop	{r3}
 8013b0c:	469e      	mov	lr, r3
 8013b0e:	4770      	bx	lr

08013b10 <_fini>:
 8013b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b12:	bf00      	nop
 8013b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b16:	bc08      	pop	{r3}
 8013b18:	469e      	mov	lr, r3
 8013b1a:	4770      	bx	lr
