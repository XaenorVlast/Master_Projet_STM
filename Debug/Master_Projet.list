
Master_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000120f8  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c00  08012238  08012238  00013238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013e38  08013e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013e40  08013e40  00014e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013e44  08013e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  20000008  08013e48  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000016c  08013fac  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a4  08013fe1  000151a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b94  200001b8  08013ff2  000151b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d4c  08013ff2  00015d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00016000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00016000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08013ff2  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00050196  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000867c  00000000  00000000  00065c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000045f0  00000000  00000000  0006e2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000035c5  00000000  00000000  000728a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00031080  00000000  00000000  00075e65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0004517e  00000000  00000000  000a6ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010fdc2  00000000  00000000  000ec063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001fbe25  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013434  00000000  00000000  001fbe68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000062  00000000  00000000  0020f29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b8 	.word	0x200001b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08012220 	.word	0x08012220

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001bc 	.word	0x200001bc
 800017c:	08012220 	.word	0x08012220

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c74:	e000      	b.n	8000c78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_write>:
bool exerciseEnded = false;
bool fin_seance = false;
int validMovements = 0;
int invalidMovements = 0;

int _write(int file, char *ptr, int len) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc9 	bl	8000c4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
	}
	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	Init_Sensors();
 8000cd8:	f000 f92c 	bl	8000f34 <Init_Sensors>
	CalibrateSensors();
 8000cdc:	f000 f978 	bl	8000fd0 <CalibrateSensors>
	// Initialisation des structures BenchRep
	referenceMovement.maxAmplitudeZ = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	referenceMovement.minAmplitudeZ = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	referenceMovement.duration = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

	currentMovement.maxAmplitudeZ = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	currentMovement.minAmplitudeZ = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
	currentMovement.duration = 0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000214 	.word	0x20000214

08000d10 <MX_MEMS_Process>:


void MX_MEMS_Process() {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af06      	add	r7, sp, #24
    switch (etat) {
 8000d16:	4b73      	ldr	r3, [pc, #460]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	f200 80de 	bhi.w	8000edc <MX_MEMS_Process+0x1cc>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <MX_MEMS_Process+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d65 	.word	0x08000d65
 8000d30:	08000d83 	.word	0x08000d83
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000e2d 	.word	0x08000e2d
 8000d3c:	08000eb7 	.word	0x08000eb7
        case INITIALISATION:
            // Initialisation des variables
            validMovements = 0;
 8000d40:	4b69      	ldr	r3, [pc, #420]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
            invalidMovements = 0;
 8000d46:	4b69      	ldr	r3, [pc, #420]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
            MX_MEMS_Init();
 8000d4c:	f7ff ffc2 	bl	8000cd4 <MX_MEMS_Init>
            isExerciseStarted = false;
 8000d50:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <MX_MEMS_Process+0x1e0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            exerciseEnded = false;
 8000d56:	4b67      	ldr	r3, [pc, #412]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
            etat = ATTENTE_DEMARRAGE;
 8000d5c:	4b61      	ldr	r3, [pc, #388]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
            break;
 8000d62:	e0bb      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case ATTENTE_DEMARRAGE:
            // Attente du signal pour démarrer un nouvel exercice
            if (!isExerciseStarted) {
 8000d64:	4b62      	ldr	r3, [pc, #392]	@ (8000ef0 <MX_MEMS_Process+0x1e0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80af 	beq.w	8000ed2 <MX_MEMS_Process+0x1c2>
                printf("Nouvel exercice détecté, préparation à l'enregistrement...\n");
 8000d74:	4860      	ldr	r0, [pc, #384]	@ (8000ef8 <MX_MEMS_Process+0x1e8>)
 8000d76:	f010 fb0b 	bl	8011390 <puts>
                etat = ENREGISTREMENT_REFERENCE;
 8000d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000d80:	e0a7      	b.n	8000ed2 <MX_MEMS_Process+0x1c2>

        case ENREGISTREMENT_REFERENCE:
            // Enregistrement du mouvement de référence
            printf("Enregistrement du mouvement...\n");
 8000d82:	485e      	ldr	r0, [pc, #376]	@ (8000efc <MX_MEMS_Process+0x1ec>)
 8000d84:	f010 fb04 	bl	8011390 <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000d88:	485d      	ldr	r0, [pc, #372]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000d8a:	f000 f9b9 	bl	8001100 <recordBenchRep>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <MX_MEMS_Process+0x9c>
                printf("Aucun mouvement de référence détecté, fin de la tentative.\n");
 8000d9a:	485a      	ldr	r0, [pc, #360]	@ (8000f04 <MX_MEMS_Process+0x1f4>)
 8000d9c:	f010 faf8 	bl	8011390 <puts>
                MVT_REF_vide();
 8000da0:	f00e fc14 	bl	800f5cc <MVT_REF_vide>
                etat = INITIALISATION;
 8000da4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Mouvement de référence enregistré. En attente de validation...\n");
                MVT_REF_fin();
                etat = VALIDATION_REFERENCE;
            }
            break;
 8000daa:	e097      	b.n	8000edc <MX_MEMS_Process+0x1cc>
                printf("Mouvement de référence enregistré. En attente de validation...\n");
 8000dac:	4856      	ldr	r0, [pc, #344]	@ (8000f08 <MX_MEMS_Process+0x1f8>)
 8000dae:	f010 faef 	bl	8011390 <puts>
                MVT_REF_fin();
 8000db2:	f00e fc05 	bl	800f5c0 <MVT_REF_fin>
                etat = VALIDATION_REFERENCE;
 8000db6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]
            break;
 8000dbc:	e08e      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case VALIDATION_REFERENCE:
            // Validation du mouvement de référence
            printf("Enregistrement du mouvement pour validation...\n");
 8000dbe:	4853      	ldr	r0, [pc, #332]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000dc0:	f010 fae6 	bl	8011390 <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000dc4:	4852      	ldr	r0, [pc, #328]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000dc6:	f000 f99b 	bl	8001100 <recordBenchRep>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <MX_MEMS_Process+0xd8>
                printf("Aucun mouvement détecté pour validation, veuillez réessayer.\n");
 8000dd6:	484f      	ldr	r0, [pc, #316]	@ (8000f14 <MX_MEMS_Process+0x204>)
 8000dd8:	f010 fada 	bl	8011390 <puts>
                MVT_REF_validation_vide();
 8000ddc:	f00e fc08 	bl	800f5f0 <MVT_REF_validation_vide>
                etat = ENREGISTREMENT_REFERENCE;
 8000de0:	4b40      	ldr	r3, [pc, #256]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
                MVT_REF_validation_fail();
                etat = ENREGISTREMENT_REFERENCE;
            }
            break;
 8000de6:	e079      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000de8:	4d45      	ldr	r5, [pc, #276]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000dea:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000dee:	9304      	str	r3, [sp, #16]
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000df2:	466c      	mov	r4, sp
 8000df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dfe:	f000 fa4f 	bl	80012a0 <compareBenchReps>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <MX_MEMS_Process+0x10a>
                printf("Validation réussie. Commencement des répétitions.\n");
 8000e08:	4843      	ldr	r0, [pc, #268]	@ (8000f18 <MX_MEMS_Process+0x208>)
 8000e0a:	f010 fac1 	bl	8011390 <puts>
                MVT_REF_validation_succes();
 8000e0e:	f00e fbe3 	bl	800f5d8 <MVT_REF_validation_succes>
                etat = ENREGISTREMENT_REPETITIONS;
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	701a      	strb	r2, [r3, #0]
            break;
 8000e18:	e060      	b.n	8000edc <MX_MEMS_Process+0x1cc>
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
 8000e1a:	4840      	ldr	r0, [pc, #256]	@ (8000f1c <MX_MEMS_Process+0x20c>)
 8000e1c:	f010 fab8 	bl	8011390 <puts>
                MVT_REF_validation_fail();
 8000e20:	f00e fbe0 	bl	800f5e4 <MVT_REF_validation_fail>
                etat = ENREGISTREMENT_REFERENCE;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
            break;
 8000e2a:	e057      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case ENREGISTREMENT_REPETITIONS:
            // Enregistrement des répétitions jusqu'à la fin de la série
            if (!exerciseEnded) {
 8000e2c:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d04d      	beq.n	8000ed6 <MX_MEMS_Process+0x1c6>
                printf("Enregistrement d'une nouvelle répétition...\n");
 8000e3a:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <MX_MEMS_Process+0x210>)
 8000e3c:	f010 faa8 	bl	8011390 <puts>
                if (!recordBenchRep(&currentMovement)) {
 8000e40:	4833      	ldr	r0, [pc, #204]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000e42:	f000 f95d 	bl	8001100 <recordBenchRep>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f083 0301 	eor.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <MX_MEMS_Process+0x15a>
                    printf("Fin de la série détectée après une période d'inactivité.\n");
 8000e52:	4834      	ldr	r0, [pc, #208]	@ (8000f24 <MX_MEMS_Process+0x214>)
 8000e54:	f010 fa9c 	bl	8011390 <puts>
                    MVT_vide();
 8000e58:	f00e fbd0 	bl	800f5fc <MVT_vide>
                    exerciseEnded = true;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
                    etat = ATTENTE_SERIE;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	701a      	strb	r2, [r3, #0]
                    invalidMovements++;
                    printf("Répétition non valide.\n");
                    MVT_non_valide();
                }
            }
            break;
 8000e68:	e035      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>
                } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000e6a:	4d25      	ldr	r5, [pc, #148]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000e6c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e70:	9304      	str	r3, [sp, #16]
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000e74:	466c      	mov	r4, sp
 8000e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e80:	f000 fa0e 	bl	80012a0 <compareBenchReps>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00a      	beq.n	8000ea0 <MX_MEMS_Process+0x190>
                    validMovements++;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e92:	6013      	str	r3, [r2, #0]
                    printf("Répétition valide.\n");
 8000e94:	4824      	ldr	r0, [pc, #144]	@ (8000f28 <MX_MEMS_Process+0x218>)
 8000e96:	f010 fa7b 	bl	8011390 <puts>
                    MVT_valide();
 8000e9a:	f00e fbb5 	bl	800f608 <MVT_valide>
            break;
 8000e9e:	e01a      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>
                    invalidMovements++;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000ea8:	6013      	str	r3, [r2, #0]
                    printf("Répétition non valide.\n");
 8000eaa:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000eac:	f010 fa70 	bl	8011390 <puts>
                    MVT_non_valide();
 8000eb0:	f00e fbb0 	bl	800f614 <MVT_non_valide>
            break;
 8000eb4:	e00f      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>

        case ATTENTE_SERIE:
            // Attente d'une nouvelle série
            if (exerciseEnded) {
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00d      	beq.n	8000eda <MX_MEMS_Process+0x1ca>
                printf("Prêt pour une nouvelle série.\n");
 8000ebe:	481c      	ldr	r0, [pc, #112]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000ec0:	f010 fa66 	bl	8011390 <puts>
                exerciseEnded = false;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
                etat = ENREGISTREMENT_REPETITIONS;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ed0:	e003      	b.n	8000eda <MX_MEMS_Process+0x1ca>
            break;
 8000ed2:	bf00      	nop
 8000ed4:	e002      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            break;
 8000ed6:	bf00      	nop
 8000ed8:	e000      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            break;
 8000eda:	bf00      	nop
    }
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000224 	.word	0x20000224
 8000ee8:	20000228 	.word	0x20000228
 8000eec:	2000022c 	.word	0x2000022c
 8000ef0:	20000225 	.word	0x20000225
 8000ef4:	20000226 	.word	0x20000226
 8000ef8:	08012238 	.word	0x08012238
 8000efc:	08012278 	.word	0x08012278
 8000f00:	20000204 	.word	0x20000204
 8000f04:	08012298 	.word	0x08012298
 8000f08:	080122d8 	.word	0x080122d8
 8000f0c:	0801231c 	.word	0x0801231c
 8000f10:	20000214 	.word	0x20000214
 8000f14:	0801234c 	.word	0x0801234c
 8000f18:	0801238c 	.word	0x0801238c
 8000f1c:	080123c4 	.word	0x080123c4
 8000f20:	08012410 	.word	0x08012410
 8000f24:	08012440 	.word	0x08012440
 8000f28:	08012480 	.word	0x08012480
 8000f2c:	08012498 	.word	0x08012498
 8000f30:	080124b4 	.word	0x080124b4

08000f34 <Init_Sensors>:


void Init_Sensors(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 8000f38:	f001 fcb1 	bl	800289e <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f3c:	f001 fcb7 	bl	80028ae <BSP_SENSOR_GYR_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f40:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000f54 <Init_Sensors+0x20>
 8000f44:	f001 fcd5 	bl	80028f2 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f001 fce1 	bl	8002910 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	42480000 	.word	0x42480000

08000f58 <ReadSensorData>:

void ReadSensorData(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000f5c:	4818      	ldr	r0, [pc, #96]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f5e:	f001 fcae 	bl	80028be <BSP_SENSOR_ACC_GetAxes>
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000f62:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f64:	f001 fcb8 	bl	80028d8 <BSP_SENSOR_GYR_GetAxes>

	// Appliquer le décalage après la calibration
	AccValue.x -= AccOffset.x;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f74:	6013      	str	r3, [r2, #0]
	AccValue.y -= AccOffset.y;
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f82:	6053      	str	r3, [r2, #4]
	AccValue.z -= AccOffset.z;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f90:	6093      	str	r3, [r2, #8]

	GyrValue.x -= GyrOffset.x;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <ReadSensorData+0x74>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f9e:	6013      	str	r3, [r2, #0]
	GyrValue.y -= GyrOffset.y;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <ReadSensorData+0x74>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fac:	6053      	str	r3, [r2, #4]
	GyrValue.z -= GyrOffset.z;
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <ReadSensorData+0x74>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a02      	ldr	r2, [pc, #8]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200001d4 	.word	0x200001d4
 8000fc4:	200001e0 	.word	0x200001e0
 8000fc8:	200001ec 	.word	0x200001ec
 8000fcc:	200001f8 	.word	0x200001f8

08000fd0 <CalibrateSensors>:
	printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long) GyrValue.x,
			(long) GyrValue.y, (long) GyrValue.z);
	HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	CalibrateAccelerometer();
 8000fd4:	f000 f804 	bl	8000fe0 <CalibrateAccelerometer>
	CalibrateGyroscope();
 8000fd8:	f000 f84a 	bl	8001070 <CalibrateGyroscope>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e015      	b.n	8001024 <CalibrateAccelerometer+0x44>
		BSP_SENSOR_ACC_GetAxes(&tempVal);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fc5f 	bl	80028be <BSP_SENSOR_ACC_GetAxes>
		sumX += tempVal.x;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4413      	add	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f000 fdd7 	bl	8001bcc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3301      	adds	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b63      	cmp	r3, #99	@ 0x63
 8001028:	dde6      	ble.n	8000ff8 <CalibrateAccelerometer+0x18>
	}

	AccOffset.x = sumX / CALIBRATION_SAMPLES;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <CalibrateAccelerometer+0x88>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1152      	asrs	r2, r2, #5
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800103a:	6013      	str	r3, [r2, #0]
	AccOffset.y = sumY / CALIBRATION_SAMPLES;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <CalibrateAccelerometer+0x88>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1152      	asrs	r2, r2, #5
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800104c:	6053      	str	r3, [r2, #4]
	AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <CalibrateAccelerometer+0x88>)
 8001052:	fb82 1203 	smull	r1, r2, r2, r3
 8001056:	1152      	asrs	r2, r2, #5
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4a03      	ldr	r2, [pc, #12]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800105e:	6093      	str	r3, [r2, #8]
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	51eb851f 	.word	0x51eb851f
 800106c:	200001ec 	.word	0x200001ec

08001070 <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e015      	b.n	80010b4 <CalibrateGyroscope+0x44>
		BSP_SENSOR_GYR_GetAxes(&tempVal);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fc24 	bl	80028d8 <BSP_SENSOR_GYR_GetAxes>
		sumX += tempVal.x;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4413      	add	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4413      	add	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4413      	add	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fd8f 	bl	8001bcc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b63      	cmp	r3, #99	@ 0x63
 80010b8:	dde6      	ble.n	8001088 <CalibrateGyroscope+0x18>
	}

	GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1152      	asrs	r2, r2, #5
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010ca:	6013      	str	r3, [r2, #0]
	GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010d0:	fb82 1203 	smull	r1, r2, r2, r3
 80010d4:	1152      	asrs	r2, r2, #5
 80010d6:	17db      	asrs	r3, r3, #31
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010dc:	6053      	str	r3, [r2, #4]
	GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1152      	asrs	r2, r2, #5
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4a03      	ldr	r2, [pc, #12]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010ee:	6093      	str	r3, [r2, #8]
}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	51eb851f 	.word	0x51eb851f
 80010fc:	200001f8 	.word	0x200001f8

08001100 <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8001108:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minValueZ = INT_MAX;
 800110e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t startTime = HAL_GetTick();
 8001114:	f007 f9b0 	bl	8008478 <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t lastMovementTime = startTime;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	623b      	str	r3, [r7, #32]
    uint32_t currentTime;
    bool movementDetected = false;
 800111e:	2300      	movs	r3, #0
 8001120:	77fb      	strb	r3, [r7, #31]
    bool isAscending = false; // Initialisation différée
 8001122:	2300      	movs	r3, #0
 8001124:	77bb      	strb	r3, [r7, #30]
    int changeOfDirectionCount = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    bool directionDetermined = false;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 800112e:	f007 f9a3 	bl	8008478 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]



    while (true) {
        ReadSensorData();
 8001134:	f7ff ff10 	bl	8000f58 <ReadSensorData>


        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 15000)) {
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <recordBenchRep+0x60>
 8001144:	f007 f998 	bl	8008478 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001152:	4293      	cmp	r3, r2
 8001154:	d904      	bls.n	8001160 <recordBenchRep+0x60>
            printf("Aucun mouvement détecté pendant plus de 15 secondes, fin de la tentative.\n");
 8001156:	484e      	ldr	r0, [pc, #312]	@ (8001290 <recordBenchRep+0x190>)
 8001158:	f010 f91a 	bl	8011390 <puts>
            return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e092      	b.n	8001286 <recordBenchRep+0x186>
        }

        // Vérifier si le mouvement dépasse le seuil
        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 8001160:	4b4c      	ldr	r3, [pc, #304]	@ (8001294 <recordBenchRep+0x194>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bfb8      	it	lt
 8001168:	425b      	neglt	r3, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	dd69      	ble.n	8001242 <recordBenchRep+0x142>
            if (!movementDetected) {
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <recordBenchRep+0x94>
                printf("Mouvement détecté pour la première fois, début du suivi.\n");
 800117a:	4847      	ldr	r0, [pc, #284]	@ (8001298 <recordBenchRep+0x198>)
 800117c:	f010 f908 	bl	8011390 <puts>
                movementDetected = true;
 8001180:	2301      	movs	r3, #1
 8001182:	77fb      	strb	r3, [r7, #31]
                startTime = HAL_GetTick();
 8001184:	f007 f978 	bl	8008478 <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	@ 0x24
                lastMovementTime = startTime;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	623b      	str	r3, [r7, #32]
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e002      	b.n	800119a <recordBenchRep+0x9a>
            } else {
                lastMovementTime = HAL_GetTick();
 8001194:	f007 f970 	bl	8008478 <HAL_GetTick>
 8001198:	6238      	str	r0, [r7, #32]
            }

            // Mise à jour des valeurs maximales et minimales
            maxValueZ = fmax(maxValueZ, AccValue.z);
 800119a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800119c:	f7ff fac4 	bl	8000728 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <recordBenchRep+0x194>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fabd 	bl	8000728 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	ec43 2b11 	vmov	d1, r2, r3
 80011b6:	ec45 4b10 	vmov	d0, r4, r5
 80011ba:	f010 ffb3 	bl	8012124 <fmax>
 80011be:	ec53 2b10 	vmov	r2, r3, d0
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fba1 	bl	800090c <__aeabi_d2iz>
 80011ca:	4603      	mov	r3, r0
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            minValueZ = fmin(minValueZ, AccValue.z);
 80011ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011d0:	f7ff faaa 	bl	8000728 <__aeabi_i2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <recordBenchRep+0x194>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff faa3 	bl	8000728 <__aeabi_i2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	ec43 2b11 	vmov	d1, r2, r3
 80011ea:	ec45 4b10 	vmov	d0, r4, r5
 80011ee:	f010 ffc3 	bl	8012178 <fmin>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fb87 	bl	800090c <__aeabi_d2iz>
 80011fe:	4603      	mov	r3, r0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28


            // Déterminer la direction du mouvement
            if (!directionDetermined) {
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <recordBenchRep+0x122>
                isAscending = AccValue.z > 0;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <recordBenchRep+0x194>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	77bb      	strb	r3, [r7, #30]
                directionDetermined = true;
 800121c:	2301      	movs	r3, #1
 800121e:	75fb      	strb	r3, [r7, #23]
 8001220:	e00f      	b.n	8001242 <recordBenchRep+0x142>

            } else {
                bool currentAscending = AccValue.z > 0;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <recordBenchRep+0x194>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	429a      	cmp	r2, r3
 8001236:	d004      	beq.n	8001242 <recordBenchRep+0x142>
                    changeOfDirectionCount++;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
                    isAscending = currentAscending;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	77bb      	strb	r3, [r7, #30]
                }
            }
        }

        // Vérifier le temps d'inactivité
        currentTime = HAL_GetTick();
 8001242:	f007 f919 	bl	8008478 <HAL_GetTick>
 8001246:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f43f af72 	beq.w	8001134 <recordBenchRep+0x34>
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800125a:	f67f af6b 	bls.w	8001134 <recordBenchRep+0x34>
            printf("Période d'inactivité détectée, fin de l'enregistrement du mouvement.\n");
 800125e:	480f      	ldr	r0, [pc, #60]	@ (800129c <recordBenchRep+0x19c>)
 8001260:	f010 f896 	bl	8011390 <puts>
            break;
 8001264:	bf00      	nop
        }
    }

    // Enregistrer les données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800126a:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001270:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]



    return true; // Mouvement détecté et enregistré
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	3730      	adds	r7, #48	@ 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	08012524 	.word	0x08012524
 8001294:	200001d4 	.word	0x200001d4
 8001298:	08012570 	.word	0x08012570
 800129c:	080125b0 	.word	0x080125b0

080012a0 <compareBenchReps>:


bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 80012a0:	b490      	push	{r4, r7}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	463c      	mov	r4, r7
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	425b      	neglt	r3, r3
 80012b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ba:	429a      	cmp	r2, r3
 80012bc:	db17      	blt.n	80012ee <compareBenchReps+0x4e>
			&& abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bfb8      	it	lt
 80012c8:	425b      	neglt	r3, r3
 80012ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012cc:	429a      	cmp	r2, r3
 80012ce:	db0e      	blt.n	80012ee <compareBenchReps+0x4e>
			&& abs(refRep.duration - newRep.duration) <= tolerance
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bfb8      	it	lt
 80012da:	425b      	neglt	r3, r3
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	429a      	cmp	r2, r3
 80012e0:	db05      	blt.n	80012ee <compareBenchReps+0x4e>
			&& refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d101      	bne.n	80012ee <compareBenchReps+0x4e>
		return true;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <compareBenchReps+0x50>
	}
	return false;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc90      	pop	{r4, r7}
 80012f8:	4770      	bx	lr
	...

080012fc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <APPD_EnableCPU2+0x34>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	c403      	stmia	r4!, {r0, r1}
 8001312:	8022      	strh	r2, [r4, #0]
 8001314:	3402      	adds	r4, #2
 8001316:	0c13      	lsrs	r3, r2, #16
 8001318:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800131a:	f00d fc29 	bl	800eb70 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f00c feba 	bl	800e09a <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001326:	bf00      	nop
}
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	080125fc 	.word	0x080125fc

08001334 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4905      	ldr	r1, [pc, #20]	@ (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58000400 	.word	0x58000400

08001360 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 800136a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800136e:	4905      	ldr	r1, [pc, #20]	@ (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58000800 	.word	0x58000800

08001388 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001396:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013a2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ae:	4313      	orrs	r3, r2
 80013b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	cafecafe 	.word	0xcafecafe

080013c4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001444:	d101      	bne.n	800144a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800146a:	d101      	bne.n	8001470 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <LL_DBGMCU_GetDeviceID+0x18>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e0042000 	.word	0xe0042000

080014cc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <LL_DBGMCU_GetRevisionID+0x18>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	b29b      	uxth	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e0042000 	.word	0xe0042000

080014e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	615a      	str	r2, [r3, #20]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	609a      	str	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	619a      	str	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <LL_LPM_EnableSleep+0x1c>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <LL_LPM_EnableSleep+0x1c>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6113      	str	r3, [r2, #16]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	22ff      	movs	r2, #255	@ 0xff
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	22ca      	movs	r2, #202	@ 0xca
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2253      	movs	r2, #83	@ 0x53
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 0207 	bic.w	r2, r3, #7
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <MX_APPE_Config+0x18>)
 8001632:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001636:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001638:	f000 f824 	bl	8001684 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800163c:	f000 f864 	bl	8001708 <Config_HSE>

  return;
 8001640:	bf00      	nop
}
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58004000 	.word	0x58004000

08001648 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800164c:	f000 f870 	bl	8001730 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001650:	f000 f888 	bl	8001764 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001654:	4903      	ldr	r1, [pc, #12]	@ (8001664 <MX_APPE_Init+0x1c>)
 8001656:	2000      	movs	r0, #0
 8001658:	f000 ff30 	bl	80024bc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800165c:	f000 f890 	bl	8001780 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001660:	bf00      	nop
}
 8001662:	bd80      	pop	{r7, pc}
 8001664:	2000030c 	.word	0x2000030c

08001668 <Init_Smps>:

void Init_Smps(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800166c:	bf00      	nop
}
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <Init_Exti>:

void Init_Exti(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800167a:	2050      	movs	r0, #80	@ 0x50
 800167c:	f7ff fe70 	bl	8001360 <LL_EXTI_EnableIT_32_63>

  return;
 8001680:	bf00      	nop
}
 8001682:	bd80      	pop	{r7, pc}

08001684 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001688:	f000 f804 	bl	8001694 <Reset_BackupDomain>

  Reset_IPCC();
 800168c:	f000 f81a 	bl	80016c4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001690:	bf00      	nop
}
 8001692:	bd80      	pop	{r7, pc}

08001694 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001698:	f7ff feca 	bl	8001430 <LL_RCC_IsActiveFlag_PINRST>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <Reset_BackupDomain+0x2a>
 80016a2:	f7ff fed8 	bl	8001456 <LL_RCC_IsActiveFlag_SFTRST>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80016ac:	f008 fce6 	bl	800a07c <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80016b0:	f008 fce4 	bl	800a07c <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80016b4:	f7ff fe9a 	bl	80013ec <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80016b8:	f7ff fea9 	bl	800140e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
}
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80016c8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80016cc:	f7ff fed6 	bl	800147c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80016d0:	213f      	movs	r1, #63	@ 0x3f
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <Reset_IPCC+0x40>)
 80016d4:	f7ff ff4e 	bl	8001574 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80016d8:	213f      	movs	r1, #63	@ 0x3f
 80016da:	480a      	ldr	r0, [pc, #40]	@ (8001704 <Reset_IPCC+0x40>)
 80016dc:	f7ff ff58 	bl	8001590 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80016e0:	213f      	movs	r1, #63	@ 0x3f
 80016e2:	4808      	ldr	r0, [pc, #32]	@ (8001704 <Reset_IPCC+0x40>)
 80016e4:	f7ff ff00 	bl	80014e8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80016e8:	213f      	movs	r1, #63	@ 0x3f
 80016ea:	4806      	ldr	r0, [pc, #24]	@ (8001704 <Reset_IPCC+0x40>)
 80016ec:	f7ff ff1f 	bl	800152e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80016f0:	213f      	movs	r1, #63	@ 0x3f
 80016f2:	4804      	ldr	r0, [pc, #16]	@ (8001704 <Reset_IPCC+0x40>)
 80016f4:	f7ff ff0a 	bl	800150c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80016f8:	213f      	movs	r1, #63	@ 0x3f
 80016fa:	4802      	ldr	r0, [pc, #8]	@ (8001704 <Reset_IPCC+0x40>)
 80016fc:	f7ff ff29 	bl	8001552 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001700:	bf00      	nop
}
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58000c00 	.word	0x58000c00

08001708 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800170e:	2000      	movs	r0, #0
 8001710:	f00d fae2 	bl	800ecd8 <OTP_Read>
 8001714:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	799b      	ldrb	r3, [r3, #6]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe31 	bl	8001388 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001726:	bf00      	nop
 8001728:	bf00      	nop
}
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <System_Init>:

static void System_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  Init_Smps();
 8001734:	f7ff ff98 	bl	8001668 <Init_Smps>

  Init_Exti();
 8001738:	f7ff ff9d 	bl	8001676 <Init_Exti>

  Init_Rtc();
 800173c:	f000 f802 	bl	8001744 <Init_Rtc>

  return;
 8001740:	bf00      	nop
}
 8001742:	bd80      	pop	{r7, pc}

08001744 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <Init_Rtc+0x1c>)
 800174a:	f7ff ff4c 	bl	80015e6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800174e:	2100      	movs	r1, #0
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <Init_Rtc+0x1c>)
 8001752:	f7ff ff58 	bl	8001606 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001756:	4802      	ldr	r0, [pc, #8]	@ (8001760 <Init_Rtc+0x1c>)
 8001758:	f7ff ff38 	bl	80015cc <LL_RTC_EnableWriteProtection>

  return;
 800175c:	bf00      	nop
}
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40002800 	.word	0x40002800

08001764 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001768:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800176c:	f7ff fe2a 	bl	80013c4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001770:	f00f fa60 	bl	8010c34 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001774:	2004      	movs	r0, #4
 8001776:	f7ff fddd 	bl	8001334 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800177a:	bf00      	nop
}
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001786:	f00d f83d 	bl	800e804 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <appe_Tl_Init+0x50>)
 800178c:	2100      	movs	r1, #0
 800178e:	2008      	movs	r0, #8
 8001790:	f00f fb8e 	bl	8010eb0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <appe_Tl_Init+0x54>)
 8001796:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <appe_Tl_Init+0x58>)
 800179a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	480e      	ldr	r0, [pc, #56]	@ (80017dc <appe_Tl_Init+0x5c>)
 80017a2:	f00c fef1 	bl	800e588 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <appe_Tl_Init+0x60>)
 80017a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <appe_Tl_Init+0x64>)
 80017ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <appe_Tl_Init+0x68>)
 80017b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80017b2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80017b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4618      	mov	r0, r3
 80017be:	f00d f963 	bl	800ea88 <TL_MM_Init>

  TL_Enable();
 80017c2:	f00d f819 	bl	800e7f8 <TL_Enable>

  return;
 80017c6:	bf00      	nop
}
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	0800e5c1 	.word	0x0800e5c1
 80017d4:	20030734 	.word	0x20030734
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	08001805 	.word	0x08001805
 80017e0:	2003094c 	.word	0x2003094c
 80017e4:	20030840 	.word	0x20030840
 80017e8:	200301f8 	.word	0x200301f8

080017ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80017f6:	bf00      	nop
}
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	330b      	adds	r3, #11
 8001812:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800181e:	2b07      	cmp	r3, #7
 8001820:	f200 80d0 	bhi.w	80019c4 <APPE_SysUserEvtRx+0x1c0>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <APPE_SysUserEvtRx+0x28>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	0800184d 	.word	0x0800184d
 8001830:	080018df 	.word	0x080018df
 8001834:	08001901 	.word	0x08001901
 8001838:	080019c5 	.word	0x080019c5
 800183c:	08001945 	.word	0x08001945
 8001840:	08001969 	.word	0x08001969
 8001844:	08001985 	.word	0x08001985
 8001848:	080019a9 	.word	0x080019a9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f00c fc4f 	bl	800e0f4 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001856:	485e      	ldr	r0, [pc, #376]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001858:	f00d fa16 	bl	800ec88 <DbgTraceGetFileName>
 800185c:	4601      	mov	r1, r0
 800185e:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001862:	4a5c      	ldr	r2, [pc, #368]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001864:	485c      	ldr	r0, [pc, #368]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001866:	f00f fd23 	bl	80112b0 <iprintf>
 800186a:	7b3b      	ldrb	r3, [r7, #12]
 800186c:	4619      	mov	r1, r3
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	461a      	mov	r2, r3
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	4859      	ldr	r0, [pc, #356]	@ (80019dc <APPE_SysUserEvtRx+0x1d8>)
 8001876:	f00f fd1b 	bl	80112b0 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800187c:	f00d fa04 	bl	800ec88 <DbgTraceGetFileName>
 8001880:	4601      	mov	r1, r0
 8001882:	f240 136b 	movw	r3, #363	@ 0x16b
 8001886:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001888:	4853      	ldr	r0, [pc, #332]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 800188a:	f00f fd11 	bl	80112b0 <iprintf>
 800188e:	7c3b      	ldrb	r3, [r7, #16]
 8001890:	4619      	mov	r1, r3
 8001892:	4853      	ldr	r0, [pc, #332]	@ (80019e0 <APPE_SysUserEvtRx+0x1dc>)
 8001894:	f00f fd0c 	bl	80112b0 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001898:	484d      	ldr	r0, [pc, #308]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800189a:	f00d f9f5 	bl	800ec88 <DbgTraceGetFileName>
 800189e:	4601      	mov	r1, r0
 80018a0:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80018a4:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018a6:	484c      	ldr	r0, [pc, #304]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018a8:	f00f fd02 	bl	80112b0 <iprintf>
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	4619      	mov	r1, r3
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	461a      	mov	r2, r3
 80018b4:	7e3b      	ldrb	r3, [r7, #24]
 80018b6:	484b      	ldr	r0, [pc, #300]	@ (80019e4 <APPE_SysUserEvtRx+0x1e0>)
 80018b8:	f00f fcfa 	bl	80112b0 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80018bc:	4844      	ldr	r0, [pc, #272]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80018be:	f00d f9e3 	bl	800ec88 <DbgTraceGetFileName>
 80018c2:	4601      	mov	r1, r0
 80018c4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80018c8:	4a42      	ldr	r2, [pc, #264]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018ca:	4843      	ldr	r0, [pc, #268]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018cc:	f00f fcf0 	bl	80112b0 <iprintf>
 80018d0:	4845      	ldr	r0, [pc, #276]	@ (80019e8 <APPE_SysUserEvtRx+0x1e4>)
 80018d2:	f00f fced 	bl	80112b0 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8e0 	bl	8001a9c <APPE_SysEvtReadyProcessing>
    break;
 80018dc:	e073      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80018de:	483c      	ldr	r0, [pc, #240]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80018e0:	f00d f9d2 	bl	800ec88 <DbgTraceGetFileName>
 80018e4:	4601      	mov	r1, r0
 80018e6:	f240 1373 	movw	r3, #371	@ 0x173
 80018ea:	4a3a      	ldr	r2, [pc, #232]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018ec:	483a      	ldr	r0, [pc, #232]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018ee:	f00f fcdf 	bl	80112b0 <iprintf>
 80018f2:	483e      	ldr	r0, [pc, #248]	@ (80019ec <APPE_SysUserEvtRx+0x1e8>)
 80018f4:	f00f fcdc 	bl	80112b0 <iprintf>
    APPE_SysEvtError(pPayload);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f885 	bl	8001a08 <APPE_SysEvtError>
    break;
 80018fe:	e062      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001900:	4833      	ldr	r0, [pc, #204]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001902:	f00d f9c1 	bl	800ec88 <DbgTraceGetFileName>
 8001906:	4601      	mov	r1, r0
 8001908:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800190c:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 800190e:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001910:	f00f fcce 	bl	80112b0 <iprintf>
 8001914:	4836      	ldr	r0, [pc, #216]	@ (80019f0 <APPE_SysUserEvtRx+0x1ec>)
 8001916:	f00f fd3b 	bl	8011390 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800191a:	482d      	ldr	r0, [pc, #180]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800191c:	f00d f9b4 	bl	800ec88 <DbgTraceGetFileName>
 8001920:	4601      	mov	r1, r0
 8001922:	f240 1379 	movw	r3, #377	@ 0x179
 8001926:	4a2b      	ldr	r2, [pc, #172]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001928:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 800192a:	f00f fcc1 	bl	80112b0 <iprintf>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3302      	adds	r3, #2
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3302      	adds	r3, #2
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	482d      	ldr	r0, [pc, #180]	@ (80019f4 <APPE_SysUserEvtRx+0x1f0>)
 800193e:	f00f fcb7 	bl	80112b0 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001942:	e040      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001944:	4822      	ldr	r0, [pc, #136]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001946:	f00d f99f 	bl	800ec88 <DbgTraceGetFileName>
 800194a:	4601      	mov	r1, r0
 800194c:	f240 137f 	movw	r3, #383	@ 0x17f
 8001950:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001952:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001954:	f00f fcac 	bl	80112b0 <iprintf>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3302      	adds	r3, #2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4825      	ldr	r0, [pc, #148]	@ (80019f8 <APPE_SysUserEvtRx+0x1f4>)
 8001962:	f00f fca5 	bl	80112b0 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001966:	e02e      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001968:	4819      	ldr	r0, [pc, #100]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800196a:	f00d f98d 	bl	800ec88 <DbgTraceGetFileName>
 800196e:	4601      	mov	r1, r0
 8001970:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001974:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001976:	4818      	ldr	r0, [pc, #96]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001978:	f00f fc9a 	bl	80112b0 <iprintf>
 800197c:	481f      	ldr	r0, [pc, #124]	@ (80019fc <APPE_SysUserEvtRx+0x1f8>)
 800197e:	f00f fc97 	bl	80112b0 <iprintf>
    break;
 8001982:	e020      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001986:	f00d f97f 	bl	800ec88 <DbgTraceGetFileName>
 800198a:	4601      	mov	r1, r0
 800198c:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001990:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001992:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001994:	f00f fc8c 	bl	80112b0 <iprintf>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3302      	adds	r3, #2
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <APPE_SysUserEvtRx+0x1fc>)
 80019a2:	f00f fc85 	bl	80112b0 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80019a6:	e00e      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80019a8:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80019aa:	f00d f96d 	bl	800ec88 <DbgTraceGetFileName>
 80019ae:	4601      	mov	r1, r0
 80019b0:	f240 138d 	movw	r3, #397	@ 0x18d
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80019b8:	f00f fc7a 	bl	80112b0 <iprintf>
 80019bc:	4811      	ldr	r0, [pc, #68]	@ (8001a04 <APPE_SysUserEvtRx+0x200>)
 80019be:	f00f fc77 	bl	80112b0 <iprintf>
    break;
 80019c2:	e000      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80019c4:	bf00      	nop
  }

  return;
 80019c6:	bf00      	nop
}
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	08012618 	.word	0x08012618
 80019d4:	08013c10 	.word	0x08013c10
 80019d8:	08012630 	.word	0x08012630
 80019dc:	08012644 	.word	0x08012644
 80019e0:	08012668 	.word	0x08012668
 80019e4:	08012684 	.word	0x08012684
 80019e8:	0801269c 	.word	0x0801269c
 80019ec:	080126bc 	.word	0x080126bc
 80019f0:	080126e0 	.word	0x080126e0
 80019f4:	08012730 	.word	0x08012730
 80019f8:	08012758 	.word	0x08012758
 80019fc:	08012794 	.word	0x08012794
 8001a00:	080127b8 	.word	0x080127b8
 8001a04:	080127f4 	.word	0x080127f4

08001a08 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	330b      	adds	r3, #11
 8001a16:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001a1e:	4819      	ldr	r0, [pc, #100]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a20:	f00d f932 	bl	800ec88 <DbgTraceGetFileName>
 8001a24:	4601      	mov	r1, r0
 8001a26:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a2c:	4817      	ldr	r0, [pc, #92]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a2e:	f00f fc3f 	bl	80112b0 <iprintf>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4815      	ldr	r0, [pc, #84]	@ (8001a90 <APPE_SysEvtError+0x88>)
 8001a3a:	f00f fc39 	bl	80112b0 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001a46:	480f      	ldr	r0, [pc, #60]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a48:	f00d f91e 	bl	800ec88 <DbgTraceGetFileName>
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001a52:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a54:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a56:	f00f fc2b 	bl	80112b0 <iprintf>
 8001a5a:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <APPE_SysEvtError+0x8c>)
 8001a5c:	f00f fc98 	bl	8011390 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a60:	e00d      	b.n	8001a7e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001a62:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a64:	f00d f910 	bl	800ec88 <DbgTraceGetFileName>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001a6e:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a70:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a72:	f00f fc1d 	bl	80112b0 <iprintf>
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <APPE_SysEvtError+0x90>)
 8001a78:	f00f fc8a 	bl	8011390 <puts>
  return;
 8001a7c:	bf00      	nop
}
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	08012618 	.word	0x08012618
 8001a88:	08013c24 	.word	0x08013c24
 8001a8c:	08012630 	.word	0x08012630
 8001a90:	08012818 	.word	0x08012818
 8001a94:	08012848 	.word	0x08012848
 8001a98:	08012884 	.word	0x08012884

08001a9c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	330b      	adds	r3, #11
 8001ac0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d146      	bne.n	8001b5e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001ad0:	4836      	ldr	r0, [pc, #216]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001ad2:	f00d f8d9 	bl	800ec88 <DbgTraceGetFileName>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001adc:	4a34      	ldr	r2, [pc, #208]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001ade:	4835      	ldr	r0, [pc, #212]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001ae0:	f00f fbe6 	bl	80112b0 <iprintf>
 8001ae4:	4834      	ldr	r0, [pc, #208]	@ (8001bb8 <APPE_SysEvtReadyProcessing+0x11c>)
 8001ae6:	f00f fc53 	bl	8011390 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001aea:	f7ff fc07 	bl	80012fc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001aee:	230f      	movs	r3, #15
 8001af0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001af2:	237f      	movs	r3, #127	@ 0x7f
 8001af4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001af6:	f7ff fce9 	bl	80014cc <LL_DBGMCU_GetRevisionID>
 8001afa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001afc:	482b      	ldr	r0, [pc, #172]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001afe:	f00d f8c3 	bl	800ec88 <DbgTraceGetFileName>
 8001b02:	4601      	mov	r1, r0
 8001b04:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001b08:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b0a:	482a      	ldr	r0, [pc, #168]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b0c:	f00f fbd0 	bl	80112b0 <iprintf>
 8001b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b12:	482a      	ldr	r0, [pc, #168]	@ (8001bbc <APPE_SysEvtReadyProcessing+0x120>)
 8001b14:	f00f fbcc 	bl	80112b0 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001b1e:	f7ff fcc7 	bl	80014b0 <LL_DBGMCU_GetDeviceID>
 8001b22:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001b24:	4821      	ldr	r0, [pc, #132]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b26:	f00d f8af 	bl	800ec88 <DbgTraceGetFileName>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b32:	4820      	ldr	r0, [pc, #128]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b34:	f00f fbbc 	bl	80112b0 <iprintf>
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	4821      	ldr	r0, [pc, #132]	@ (8001bc0 <APPE_SysEvtReadyProcessing+0x124>)
 8001b3c:	f00f fbb8 	bl	80112b0 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00c fabc 	bl	800e0c8 <SHCI_C2_Config>

    APP_BLE_Init();
 8001b50:	f00d f9cc 	bl	800eeec <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001b54:	2100      	movs	r1, #0
 8001b56:	2001      	movs	r0, #1
 8001b58:	f00f f87e 	bl	8010c58 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001b5c:	e022      	b.n	8001ba4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d110      	bne.n	8001b88 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001b66:	4811      	ldr	r0, [pc, #68]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b68:	f00d f88e 	bl	800ec88 <DbgTraceGetFileName>
 8001b6c:	4601      	mov	r1, r0
 8001b6e:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b74:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b76:	f00f fb9b 	bl	80112b0 <iprintf>
 8001b7a:	4812      	ldr	r0, [pc, #72]	@ (8001bc4 <APPE_SysEvtReadyProcessing+0x128>)
 8001b7c:	f00f fb98 	bl	80112b0 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
  return;
 8001b86:	e00d      	b.n	8001ba4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001b88:	4808      	ldr	r0, [pc, #32]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b8a:	f00d f87d 	bl	800ec88 <DbgTraceGetFileName>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001b94:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b96:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b98:	f00f fb8a 	bl	80112b0 <iprintf>
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <APPE_SysEvtReadyProcessing+0x12c>)
 8001b9e:	f00f fb87 	bl	80112b0 <iprintf>
  return;
 8001ba2:	bf00      	nop
}
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	08012618 	.word	0x08012618
 8001bb0:	08013c38 	.word	0x08013c38
 8001bb4:	08012630 	.word	0x08012630
 8001bb8:	080128bc 	.word	0x080128bc
 8001bbc:	080128d8 	.word	0x080128d8
 8001bc0:	080128fc 	.word	0x080128fc
 8001bc4:	0801291c 	.word	0x0801291c
 8001bc8:	08012950 	.word	0x08012950

08001bcc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f006 fc50 	bl	8008478 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d00a      	beq.n	8001bfc <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001be6:	f006 fc5f 	bl	80084a8 <HAL_GetTickFreq>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf4:	e002      	b.n	8001bfc <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001bf6:	f7ff fcd9 	bl	80015ac <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001bfa:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001bfc:	f006 fc3c 	bl	8008478 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f4      	bhi.n	8001bf6 <HAL_Delay+0x2a>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1e:	f00f f84b 	bl	8010cb8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001c2a:	bf00      	nop
}
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	f00f f839 	bl	8010cb8 <UTIL_SEQ_Run>
  return;
 8001c46:	bf00      	nop
}
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2008      	movs	r0, #8
 8001c5a:	f00f f94b 	bl	8010ef4 <UTIL_SEQ_SetTask>
  return;
 8001c5e:	bf00      	nop
}
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f00f f9ac 	bl	8010fcc <UTIL_SEQ_SetEvt>
  return;
 8001c74:	bf00      	nop
}
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f00f f9c1 	bl	801100c <UTIL_SEQ_WaitEvt>
  return;
 8001c8a:	bf00      	nop
}
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <LL_EXTI_EnableIT_0_31>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ca2:	4905      	ldr	r1, [pc, #20]	@ (8001cb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	58000800 	.word	0x58000800

08001cbc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]

}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	58000800 	.word	0x58000800

08001ce0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001cf6:	e005      	b.n	8001d04 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1f5      	bne.n	8001cf8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d0c:	683b      	ldr	r3, [r7, #0]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40002800 	.word	0x40002800

08001d20 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d30:	79ba      	ldrb	r2, [r7, #6]
 8001d32:	491d      	ldr	r1, [pc, #116]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3315      	adds	r3, #21
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d009      	beq.n	8001d5e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	4916      	ldr	r1, [pc, #88]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	3314      	adds	r3, #20
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4911      	ldr	r1, [pc, #68]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3315      	adds	r3, #21
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3314      	adds	r3, #20
 8001d82:	79ba      	ldrb	r2, [r7, #6]
 8001d84:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d86:	79ba      	ldrb	r2, [r7, #6]
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3315      	adds	r3, #21
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	701a      	strb	r2, [r3, #0]

  return;
 8001d9a:	bf00      	nop
}
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000230 	.word	0x20000230

08001dac <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <LinkTimerBefore+0xb8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	79ba      	ldrb	r2, [r7, #6]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d032      	beq.n	8001e2e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	4927      	ldr	r1, [pc, #156]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	3315      	adds	r3, #21
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	491d      	ldr	r1, [pc, #116]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3315      	adds	r3, #21
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3314      	adds	r3, #20
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e18:	79ba      	ldrb	r2, [r7, #6]
 8001e1a:	4913      	ldr	r1, [pc, #76]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	3314      	adds	r3, #20
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e2c:	e014      	b.n	8001e58 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3315      	adds	r3, #21
 8001e3e:	79ba      	ldrb	r2, [r7, #6]
 8001e40:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e42:	79ba      	ldrb	r2, [r7, #6]
 8001e44:	4908      	ldr	r1, [pc, #32]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3314      	adds	r3, #20
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	701a      	strb	r2, [r3, #0]
  return;
 8001e56:	bf00      	nop
}
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200002c0 	.word	0x200002c0
 8001e68:	20000230 	.word	0x20000230

08001e6c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <linkTimer+0x144>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d118      	bne.n	8001eb2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <linkTimer+0x144>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <linkTimer+0x148>)
 8001e88:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001e8a:	4a49      	ldr	r2, [pc, #292]	@ (8001fb0 <linkTimer+0x144>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	4949      	ldr	r1, [pc, #292]	@ (8001fb8 <linkTimer+0x14c>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3315      	adds	r3, #21
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <linkTimer+0x150>)
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	e078      	b.n	8001fa4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001eb2:	f000 f909 	bl	80020c8 <ReturnTimeElapsed>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	493e      	ldr	r1, [pc, #248]	@ (8001fb8 <linkTimer+0x14c>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3308      	adds	r3, #8
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	4419      	add	r1, r3
 8001ed2:	4839      	ldr	r0, [pc, #228]	@ (8001fb8 <linkTimer+0x14c>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4403      	add	r3, r0
 8001ede:	3308      	adds	r3, #8
 8001ee0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	4934      	ldr	r1, [pc, #208]	@ (8001fb8 <linkTimer+0x14c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <linkTimer+0x144>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb8 <linkTimer+0x14c>)
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d337      	bcc.n	8001f84 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <linkTimer+0x144>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f1a:	7b7a      	ldrb	r2, [r7, #13]
 8001f1c:	4926      	ldr	r1, [pc, #152]	@ (8001fb8 <linkTimer+0x14c>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3315      	adds	r3, #21
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f2e:	e013      	b.n	8001f58 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f30:	7b7a      	ldrb	r2, [r7, #13]
 8001f32:	4921      	ldr	r1, [pc, #132]	@ (8001fb8 <linkTimer+0x14c>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3315      	adds	r3, #21
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f44:	7b7a      	ldrb	r2, [r7, #13]
 8001f46:	491c      	ldr	r1, [pc, #112]	@ (8001fb8 <linkTimer+0x14c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3315      	adds	r3, #21
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f58:	7b3b      	ldrb	r3, [r7, #12]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d00b      	beq.n	8001f76 <linkTimer+0x10a>
 8001f5e:	7b3a      	ldrb	r2, [r7, #12]
 8001f60:	4915      	ldr	r1, [pc, #84]	@ (8001fb8 <linkTimer+0x14c>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d2dc      	bcs.n	8001f30 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f76:	7b7a      	ldrb	r2, [r7, #13]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fecf 	bl	8001d20 <LinkTimerAfter>
 8001f82:	e00f      	b.n	8001fa4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <linkTimer+0x144>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff0c 	bl	8001dac <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <linkTimer+0x144>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <linkTimer+0x148>)
 8001f9c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <linkTimer+0x144>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002c0 	.word	0x200002c0
 8001fb4:	200002c1 	.word	0x200002c1
 8001fb8:	20000230 	.word	0x20000230
 8001fbc:	200002c4 	.word	0x200002c4

08001fc0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d111      	bne.n	8002000 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001fdc:	4b36      	ldr	r3, [pc, #216]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <UnlinkTimer+0xfc>)
 8001fe4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	4935      	ldr	r1, [pc, #212]	@ (80020c0 <UnlinkTimer+0x100>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3315      	adds	r3, #21
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e03e      	b.n	800207e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	492f      	ldr	r1, [pc, #188]	@ (80020c0 <UnlinkTimer+0x100>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3314      	adds	r3, #20
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	492a      	ldr	r1, [pc, #168]	@ (80020c0 <UnlinkTimer+0x100>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3315      	adds	r3, #21
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002028:	79f9      	ldrb	r1, [r7, #7]
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	4824      	ldr	r0, [pc, #144]	@ (80020c0 <UnlinkTimer+0x100>)
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	3315      	adds	r3, #21
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2d8      	uxtb	r0, r3
 800203e:	4920      	ldr	r1, [pc, #128]	@ (80020c0 <UnlinkTimer+0x100>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3315      	adds	r3, #21
 800204c:	4602      	mov	r2, r0
 800204e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d013      	beq.n	800207e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002056:	79f9      	ldrb	r1, [r7, #7]
 8002058:	7bba      	ldrb	r2, [r7, #14]
 800205a:	4819      	ldr	r0, [pc, #100]	@ (80020c0 <UnlinkTimer+0x100>)
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4403      	add	r3, r0
 8002066:	3314      	adds	r3, #20
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <UnlinkTimer+0x100>)
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3314      	adds	r3, #20
 800207a:	4602      	mov	r2, r0
 800207c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	490f      	ldr	r1, [pc, #60]	@ (80020c0 <UnlinkTimer+0x100>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	330c      	adds	r3, #12
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <UnlinkTimer+0xf8>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b06      	cmp	r3, #6
 800209a:	d107      	bne.n	80020ac <UnlinkTimer+0xec>
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d104      	bne.n	80020ac <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <UnlinkTimer+0x104>)
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	601a      	str	r2, [r3, #0]
  }

  return;
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
}
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200002c0 	.word	0x200002c0
 80020bc:	200002c1 	.word	0x200002c1
 80020c0:	20000230 	.word	0x20000230
 80020c4:	200002c4 	.word	0x200002c4

080020c8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d026      	beq.n	8002126 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80020d8:	f7ff fe02 	bl	8001ce0 <ReadRtcSsrValue>
 80020dc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d805      	bhi.n	80020f4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	e00a      	b.n	800210a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <ReturnTimeElapsed+0x74>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <ReturnTimeElapsed+0x70>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <ReturnTimeElapsed+0x78>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <ReturnTimeElapsed+0x7c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	40d3      	lsrs	r3, r2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	e001      	b.n	800212a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	b29b      	uxth	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200002c4 	.word	0x200002c4
 800213c:	200002cc 	.word	0x200002cc
 8002140:	200002ca 	.word	0x200002ca
 8002144:	200002c9 	.word	0x200002c9

08002148 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002158:	f7ff fdc2 	bl	8001ce0 <ReadRtcSsrValue>
 800215c:	4603      	mov	r3, r0
 800215e:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <RestartWakeupCounter+0x9c>)
 8002160:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002162:	2003      	movs	r0, #3
 8002164:	f006 fb29 	bl	80087ba <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002168:	e039      	b.n	80021de <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d803      	bhi.n	8002178 <RestartWakeupCounter+0x30>
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <RestartWakeupCounter+0xa0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	3b01      	subs	r3, #1
 800217c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800217e:	bf00      	nop
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f8      	beq.n	8002180 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800219e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <RestartWakeupCounter+0xa8>)
 80021a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021a6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f006 fb14 	bl	80087d6 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <RestartWakeupCounter+0xac>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	490e      	ldr	r1, [pc, #56]	@ (80021f4 <RestartWakeupCounter+0xac>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021be:	f7ff fd8f 	bl	8001ce0 <ReadRtcSsrValue>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <RestartWakeupCounter+0x9c>)
 80021c6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <RestartWakeupCounter+0xa4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <RestartWakeupCounter+0xa4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80021d8:	f3af 8000 	nop.w
  return ;
 80021dc:	bf00      	nop
}
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200002c4 	.word	0x200002c4
 80021e8:	200002c9 	.word	0x200002c9
 80021ec:	2000030c 	.word	0x2000030c
 80021f0:	58000800 	.word	0x58000800
 80021f4:	40002800 	.word	0x40002800

080021f8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021fe:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <RescheduleTimerList+0x11c>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220a:	d107      	bne.n	800221c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800220c:	bf00      	nop
 800220e:	4b42      	ldr	r3, [pc, #264]	@ (8002318 <RescheduleTimerList+0x120>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f8      	bne.n	800220e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800221c:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <RescheduleTimerList+0x120>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <RescheduleTimerList+0x120>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800222a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800222c:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <RescheduleTimerList+0x124>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	493a      	ldr	r1, [pc, #232]	@ (8002320 <RescheduleTimerList+0x128>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3308      	adds	r3, #8
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002246:	f7ff ff3f 	bl	80020c8 <ReturnTimeElapsed>
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d205      	bcs.n	8002262 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800225a:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <RescheduleTimerList+0x12c>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e04d      	b.n	80022fe <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <RescheduleTimerList+0x130>)
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	b292      	uxth	r2, r2
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4293      	cmp	r3, r2
 8002272:	d906      	bls.n	8002282 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <RescheduleTimerList+0x130>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <RescheduleTimerList+0x12c>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e03d      	b.n	80022fe <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	b29a      	uxth	r2, r3
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <RescheduleTimerList+0x12c>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002292:	e034      	b.n	80022fe <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	4922      	ldr	r1, [pc, #136]	@ (8002320 <RescheduleTimerList+0x128>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3308      	adds	r3, #8
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20a      	bcs.n	80022c2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	491c      	ldr	r1, [pc, #112]	@ (8002320 <RescheduleTimerList+0x128>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3308      	adds	r3, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e013      	b.n	80022ea <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	4916      	ldr	r1, [pc, #88]	@ (8002320 <RescheduleTimerList+0x128>)
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3308      	adds	r3, #8
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	1ac9      	subs	r1, r1, r3
 80022da:	4811      	ldr	r0, [pc, #68]	@ (8002320 <RescheduleTimerList+0x128>)
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4403      	add	r3, r0
 80022e6:	3308      	adds	r3, #8
 80022e8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	490c      	ldr	r1, [pc, #48]	@ (8002320 <RescheduleTimerList+0x128>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3315      	adds	r3, #21
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d1c7      	bne.n	8002294 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002304:	89bb      	ldrh	r3, [r7, #12]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff1e 	bl	8002148 <RestartWakeupCounter>

  return ;
 800230c:	bf00      	nop
}
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40002800 	.word	0x40002800
 8002318:	2000030c 	.word	0x2000030c
 800231c:	200002c0 	.word	0x200002c0
 8002320:	20000230 	.word	0x20000230
 8002324:	200002c8 	.word	0x200002c8
 8002328:	200002ce 	.word	0x200002ce

0800232c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	617b      	str	r3, [r7, #20]
  return(result);
 8002338:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ca      	movs	r2, #202	@ 0xca
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
 8002348:	4b57      	ldr	r3, [pc, #348]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2253      	movs	r2, #83	@ 0x53
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002350:	4b55      	ldr	r3, [pc, #340]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002360:	4b52      	ldr	r3, [pc, #328]	@ (80024ac <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002368:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800236c:	4950      	ldr	r1, [pc, #320]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	330c      	adds	r3, #12
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d16e      	bne.n	8002460 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002382:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002386:	494a      	ldr	r1, [pc, #296]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002396:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800239a:	4945      	ldr	r1, [pc, #276]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	3310      	adds	r3, #16
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80023ac:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04c      	beq.n	8002450 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80023b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ba:	493d      	ldr	r1, [pc, #244]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	330d      	adds	r3, #13
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d124      	bne.n	800241a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80023d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fdf2 	bl	8001fc0 <UnlinkTimer>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f383 8810 	msr	PRIMASK, r3
}
 80023e6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80023e8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ec:	4930      	ldr	r1, [pc, #192]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3304      	adds	r3, #4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f9b8 	bl	8002778 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22ca      	movs	r2, #202	@ 0xca
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2253      	movs	r2, #83	@ 0x53
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
 8002418:	e012      	b.n	8002440 <HW_TS_RTC_Wakeup_Handler+0x114>
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f383 8810 	msr	PRIMASK, r3
}
 8002424:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002426:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f920 	bl	8002670 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002430:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	22ca      	movs	r2, #202	@ 0xca
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2253      	movs	r2, #83	@ 0x53
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002440:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	4619      	mov	r1, r3
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f000 fa1b 	bl	8002884 <HW_TS_RTC_Int_AppNot>
 800244e:	e022      	b.n	8002496 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002450:	f7ff fed2 	bl	80021f8 <RescheduleTimerList>
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	e01a      	b.n	8002496 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002460:	bf00      	nop
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f8      	beq.n	8002462 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002480:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002484:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	22ff      	movs	r2, #255	@ 0xff
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800249e:	bf00      	nop
}
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	2000030c 	.word	0x2000030c
 80024ac:	200002c0 	.word	0x200002c0
 80024b0:	20000230 	.word	0x20000230
 80024b4:	200002c8 	.word	0x200002c8
 80024b8:	58000800 	.word	0x58000800

080024bc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002644 <HW_TS_Init+0x188>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	22ca      	movs	r2, #202	@ 0xca
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80024d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <HW_TS_Init+0x188>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2253      	movs	r2, #83	@ 0x53
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <HW_TS_Init+0x18c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002648 <HW_TS_Init+0x18c>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80024e4:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <HW_TS_Init+0x18c>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f1c3 0304 	rsb	r3, r3, #4
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b55      	ldr	r3, [pc, #340]	@ (800264c <HW_TS_Init+0x190>)
 80024f8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80024fa:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HW_TS_Init+0x18c>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002502:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002506:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	2a00      	cmp	r2, #0
 8002518:	d101      	bne.n	800251e <HW_TS_Init+0x62>
  {
    return 32U;
 800251a:	2220      	movs	r2, #32
 800251c:	e003      	b.n	8002526 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	40d3      	lsrs	r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <HW_TS_Init+0x194>)
 8002530:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002532:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <HW_TS_Init+0x18c>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800253c:	b29b      	uxth	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HW_TS_Init+0x198>)
 8002544:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HW_TS_Init+0x198>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a40      	ldr	r2, [pc, #256]	@ (8002650 <HW_TS_Init+0x194>)
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002558:	4a3c      	ldr	r2, [pc, #240]	@ (800264c <HW_TS_Init+0x190>)
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	40d3      	lsrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002566:	4293      	cmp	r3, r2
 8002568:	d904      	bls.n	8002574 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HW_TS_Init+0x19c>)
 800256c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e003      	b.n	800257c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HW_TS_Init+0x19c>)
 800257a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800257c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002580:	f7ff fb9c 	bl	8001cbc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002584:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002588:	f7ff fb84 	bl	8001c94 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d13d      	bne.n	800260e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HW_TS_Init+0x1a0>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <HW_TS_Init+0x1a4>)
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e00c      	b.n	80025c0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80025a6:	7ffa      	ldrb	r2, [r7, #31]
 80025a8:	492e      	ldr	r1, [pc, #184]	@ (8002664 <HW_TS_Init+0x1a8>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	330c      	adds	r3, #12
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	3301      	adds	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d9ef      	bls.n	80025a6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <HW_TS_Init+0x1ac>)
 80025c8:	2206      	movs	r2, #6
 80025ca:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <HW_TS_Init+0x188>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HW_TS_Init+0x188>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025da:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HW_TS_Init+0x188>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HW_TS_Init+0x188>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <HW_TS_Init+0x1b0>)
 80025f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80025f6:	2003      	movs	r0, #3
 80025f8:	f006 f8ed 	bl	80087d6 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HW_TS_Init+0x188>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HW_TS_Init+0x188>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e009      	b.n	8002622 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HW_TS_Init+0x188>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800261c:	2003      	movs	r0, #3
 800261e:	f006 f8cc 	bl	80087ba <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HW_TS_Init+0x188>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	22ff      	movs	r2, #255	@ 0xff
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800262a:	2200      	movs	r2, #0
 800262c:	2103      	movs	r1, #3
 800262e:	2003      	movs	r0, #3
 8002630:	f006 f881 	bl	8008736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002634:	2003      	movs	r0, #3
 8002636:	f006 f898 	bl	800876a <HAL_NVIC_EnableIRQ>

  return;
 800263a:	bf00      	nop
}
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000030c 	.word	0x2000030c
 8002648:	40002800 	.word	0x40002800
 800264c:	200002c9 	.word	0x200002c9
 8002650:	200002ca 	.word	0x200002ca
 8002654:	200002cc 	.word	0x200002cc
 8002658:	200002ce 	.word	0x200002ce
 800265c:	200002c8 	.word	0x200002c8
 8002660:	200002c4 	.word	0x200002c4
 8002664:	20000230 	.word	0x20000230
 8002668:	200002c0 	.word	0x200002c0
 800266c:	58000800 	.word	0x58000800

08002670 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267a:	f3ef 8310 	mrs	r3, PRIMASK
 800267e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002680:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002688:	2003      	movs	r0, #3
 800268a:	f006 f87c 	bl	8008786 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	22ca      	movs	r2, #202	@ 0xca
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
 8002696:	4b32      	ldr	r3, [pc, #200]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2253      	movs	r2, #83	@ 0x53
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800269e:	79fa      	ldrb	r2, [r7, #7]
 80026a0:	4930      	ldr	r1, [pc, #192]	@ (8002764 <HW_TS_Stop+0xf4>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	330c      	adds	r3, #12
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d142      	bne.n	800273c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fc80 	bl	8001fc0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80026c0:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HW_TS_Stop+0xf8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d12f      	bne.n	800272c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HW_TS_Stop+0xfc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d8:	d107      	bne.n	80026ea <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80026da:	bf00      	nop
 80026dc:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f8      	bne.n	80026dc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026fa:	bf00      	nop
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f8      	beq.n	80026fc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HW_TS_Stop+0xf0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800271a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HW_TS_Stop+0x100>)
 800271e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002722:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002724:	2003      	movs	r0, #3
 8002726:	f006 f856 	bl	80087d6 <HAL_NVIC_ClearPendingIRQ>
 800272a:	e007      	b.n	800273c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HW_TS_Stop+0x104>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	7cfa      	ldrb	r2, [r7, #19]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002738:	f7ff fd5e 	bl	80021f8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HW_TS_Stop+0xf0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	22ff      	movs	r2, #255	@ 0xff
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002744:	2003      	movs	r0, #3
 8002746:	f006 f810 	bl	800876a <HAL_NVIC_EnableIRQ>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f383 8810 	msr	PRIMASK, r3
}
 8002754:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002756:	bf00      	nop
}
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	2000030c 	.word	0x2000030c
 8002764:	20000230 	.word	0x20000230
 8002768:	200002c0 	.word	0x200002c0
 800276c:	40002800 	.word	0x40002800
 8002770:	58000800 	.word	0x58000800
 8002774:	200002c1 	.word	0x200002c1

08002778 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	493b      	ldr	r1, [pc, #236]	@ (8002874 <HW_TS_Start+0xfc>)
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	330c      	adds	r3, #12
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d103      	bne.n	80027a4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff66 	bl	8002670 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a4:	f3ef 8310 	mrs	r3, PRIMASK
 80027a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80027aa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80027ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ae:	b672      	cpsid	i
}
 80027b0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027b2:	2003      	movs	r0, #3
 80027b4:	f005 ffe7 	bl	8008786 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HW_TS_Start+0x100>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	22ca      	movs	r2, #202	@ 0xca
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HW_TS_Start+0x100>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2253      	movs	r2, #83	@ 0x53
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	492a      	ldr	r1, [pc, #168]	@ (8002874 <HW_TS_Start+0xfc>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	330c      	adds	r3, #12
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	4925      	ldr	r1, [pc, #148]	@ (8002874 <HW_TS_Start+0xfc>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3308      	adds	r3, #8
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027f0:	79fa      	ldrb	r2, [r7, #7]
 80027f2:	4920      	ldr	r1, [pc, #128]	@ (8002874 <HW_TS_Start+0xfc>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3304      	adds	r3, #4
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb30 	bl	8001e6c <linkTimer>
 800280c:	4603      	mov	r3, r0
 800280e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HW_TS_Start+0x104>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HW_TS_Start+0x108>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	7c7a      	ldrb	r2, [r7, #17]
 800281e:	429a      	cmp	r2, r3
 8002820:	d002      	beq.n	8002828 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002822:	f7ff fce9 	bl	80021f8 <RescheduleTimerList>
 8002826:	e013      	b.n	8002850 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	4912      	ldr	r1, [pc, #72]	@ (8002874 <HW_TS_Start+0xfc>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3308      	adds	r3, #8
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	8a7b      	ldrh	r3, [r7, #18]
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	1ac9      	subs	r1, r1, r3
 8002840:	480c      	ldr	r0, [pc, #48]	@ (8002874 <HW_TS_Start+0xfc>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	3308      	adds	r3, #8
 800284e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HW_TS_Start+0x100>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	22ff      	movs	r2, #255	@ 0xff
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002858:	2003      	movs	r0, #3
 800285a:	f005 ff86 	bl	800876a <HAL_NVIC_EnableIRQ>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800286a:	bf00      	nop
}
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000230 	.word	0x20000230
 8002878:	2000030c 	.word	0x2000030c
 800287c:	200002c0 	.word	0x200002c0
 8002880:	200002c1 	.word	0x200002c1

08002884 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	460b      	mov	r3, r1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4798      	blx	r3

  return;
 8002896:	bf00      	nop
}
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80028a2:	2102      	movs	r1, #2
 80028a4:	2000      	movs	r0, #0
 80028a6:	f005 f99f 	bl	8007be8 <IKS01A3_MOTION_SENSOR_Init>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}

080028ae <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80028b2:	2101      	movs	r1, #1
 80028b4:	2000      	movs	r0, #0
 80028b6:	f005 f997 	bl	8007be8 <IKS01A3_MOTION_SENSOR_Init>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}

080028be <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	2102      	movs	r1, #2
 80028ca:	2000      	movs	r0, #0
 80028cc:	f005 fa88 	bl	8007de0 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	2101      	movs	r1, #1
 80028e4:	2000      	movs	r0, #0
 80028e6:	f005 fa7b 	bl	8007de0 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 80028fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8002900:	2102      	movs	r1, #2
 8002902:	2000      	movs	r0, #0
 8002904:	f005 fab0 	bl	8007e68 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	2102      	movs	r1, #2
 800291c:	2000      	movs	r0, #0
 800291e:	f005 fae9 	bl	8007ef4 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <LL_RCC_LSE_SetDriveCapability>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f023 0218 	bic.w	r2, r3, #24
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_AHB1_GRP1_EnableClock>:
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_AHB2_GRP1_EnableClock>:
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ac:	68fb      	ldr	r3, [r7, #12]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c2:	f005 fceb 	bl	800839c <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80029c6:	f7fe fe31 	bl	800162c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ca:	f000 f823 	bl	8002a14 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029ce:	f000 f899 	bl	8002b04 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80029d2:	f000 f8b7 	bl	8002b44 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d6:	f000 f98d 	bl	8002cf4 <MX_GPIO_Init>
  MX_DMA_Init();
 80029da:	f000 f979 	bl	8002cd0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029de:	f000 f901 	bl	8002be4 <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80029e2:	f000 f94d 	bl	8002c80 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80029e6:	f000 f8c9 	bl	8002b7c <MX_RTC_Init>
  MX_RF_Init();
 80029ea:	f000 f8bf 	bl	8002b6c <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 80029ee:	f7fe f971 	bl	8000cd4 <MX_MEMS_Init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80029f2:	f7fe fe29 	bl	8001648 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80029f6:	f7ff f90e 	bl	8001c16 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t valeur_start = global_payload_pointer[0];
 80029fa:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <main+0x54>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	71fb      	strb	r3, [r7, #7]

    if(valeur_start==0x01){
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d1f6      	bne.n	80029f6 <main+0x3a>

    MX_MEMS_Process();
 8002a08:	f7fe f982 	bl	8000d10 <MX_MEMS_Process>
  {
 8002a0c:	e7f3      	b.n	80029f6 <main+0x3a>
 8002a0e:	bf00      	nop
 8002a10:	20000b50 	.word	0x20000b50

08002a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b09a      	sub	sp, #104	@ 0x68
 8002a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1a:	f107 0320 	add.w	r3, r7, #32
 8002a1e:	2248      	movs	r2, #72	@ 0x48
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f00e fd94 	bl	8011550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a28:	1d3b      	adds	r3, r7, #4
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	611a      	str	r2, [r3, #16]
 8002a36:	615a      	str	r2, [r3, #20]
 8002a38:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002a3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a48:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 0303 	bic.w	r3, r3, #3
 8002a54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a58:	f043 0301 	orr.w	r3, r3, #1
 8002a5c:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a5e:	f007 fb0d 	bl	800a07c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff ff61 	bl	800292a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a68:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <SystemClock_Config+0xec>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a70:	4a23      	ldr	r2, [pc, #140]	@ (8002b00 <SystemClock_Config+0xec>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a76:	6013      	str	r3, [r2, #0]
 8002a78:	4b21      	ldr	r3, [pc, #132]	@ (8002b00 <SystemClock_Config+0xec>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a84:	232f      	movs	r3, #47	@ 0x2f
 8002a86:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a88:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9c:	2340      	movs	r3, #64	@ 0x40
 8002a9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aa4:	2360      	movs	r3, #96	@ 0x60
 8002aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aa8:	2305      	movs	r3, #5
 8002aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab0:	f107 0320 	add.w	r3, r7, #32
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f007 fe75 	bl	800a7a4 <HAL_RCC_OscConfig>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002ac0:	f000 f960 	bl	8002d84 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002ac4:	236f      	movs	r3, #111	@ 0x6f
 8002ac6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002ac8:	2302      	movs	r3, #2
 8002aca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f008 f9d1 	bl	800ae8c <HAL_RCC_ClockConfig>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002af0:	f000 f948 	bl	8002d84 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002af4:	f008 ff8c 	bl	800ba10 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002af8:	bf00      	nop
 8002afa:	3768      	adds	r7, #104	@ 0x68
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	58000400 	.word	0x58000400

08002b04 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b094      	sub	sp, #80	@ 0x50
 8002b08:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0a:	463b      	mov	r3, r7
 8002b0c:	2250      	movs	r2, #80	@ 0x50
 8002b0e:	2100      	movs	r1, #0
 8002b10:	4618      	mov	r0, r3
 8002b12:	f00e fd1d 	bl	8011550 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002b16:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b1a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002b1c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b20:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002b22:	2300      	movs	r3, #0
 8002b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b2a:	463b      	mov	r3, r7
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f008 fdf9 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b38:	f000 f924 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b3c:	bf00      	nop
 8002b3e:	3750      	adds	r7, #80	@ 0x50
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <MX_IPCC_Init+0x20>)
 8002b4a:	4a07      	ldr	r2, [pc, #28]	@ (8002b68 <MX_IPCC_Init+0x24>)
 8002b4c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	@ (8002b64 <MX_IPCC_Init+0x20>)
 8002b50:	f007 f916 	bl	8009d80 <HAL_IPCC_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b5a:	f000 f913 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	200002d0 	.word	0x200002d0
 8002b68:	58000c00 	.word	0x58000c00

08002b6c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
	...

08002b7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002b80:	4b16      	ldr	r3, [pc, #88]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002b82:	4a17      	ldr	r2, [pc, #92]	@ (8002be0 <MX_RTC_Init+0x64>)
 8002b84:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002b86:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002b8e:	220f      	movs	r2, #15
 8002b90:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002b94:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002b98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002b9a:	4b10      	ldr	r3, [pc, #64]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002bb2:	480a      	ldr	r0, [pc, #40]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002bb4:	f009 f844 	bl	800bc40 <HAL_RTC_Init>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002bbe:	f000 f8e1 	bl	8002d84 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	2100      	movs	r1, #0
 8002bc6:	4805      	ldr	r0, [pc, #20]	@ (8002bdc <MX_RTC_Init+0x60>)
 8002bc8:	f009 f93a 	bl	800be40 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002bd2:	f000 f8d7 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	2000030c 	.word	0x2000030c
 8002be0:	40002800 	.word	0x40002800

08002be4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002be8:	4b23      	ldr	r3, [pc, #140]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bea:	4a24      	ldr	r2, [pc, #144]	@ (8002c7c <MX_USART1_UART_Init+0x98>)
 8002bec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002bee:	4b22      	ldr	r3, [pc, #136]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bf0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002bf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002bf6:	4b20      	ldr	r3, [pc, #128]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c02:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002c14:	4b18      	ldr	r3, [pc, #96]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c16:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002c1a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c1c:	4b16      	ldr	r3, [pc, #88]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c22:	4b15      	ldr	r3, [pc, #84]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c28:	4b13      	ldr	r3, [pc, #76]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c2e:	4812      	ldr	r0, [pc, #72]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c30:	f009 f9e2 	bl	800bff8 <HAL_UART_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002c3a:	f000 f8a3 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c3e:	2100      	movs	r1, #0
 8002c40:	480d      	ldr	r0, [pc, #52]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c42:	f009 fea9 	bl	800c998 <HAL_UARTEx_SetTxFifoThreshold>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002c4c:	f000 f89a 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c50:	2100      	movs	r1, #0
 8002c52:	4809      	ldr	r0, [pc, #36]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c54:	f009 fede 	bl	800ca14 <HAL_UARTEx_SetRxFifoThreshold>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002c5e:	f000 f891 	bl	8002d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002c62:	4805      	ldr	r0, [pc, #20]	@ (8002c78 <MX_USART1_UART_Init+0x94>)
 8002c64:	f009 fe5f 	bl	800c926 <HAL_UARTEx_DisableFifoMode>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002c6e:	f000 f889 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000330 	.word	0x20000330
 8002c7c:	40013800 	.word	0x40013800

08002c80 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002c84:	4b10      	ldr	r3, [pc, #64]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002c86:	4a11      	ldr	r2, [pc, #68]	@ (8002ccc <MX_USB_PCD_Init+0x4c>)
 8002c88:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002c92:	2202      	movs	r2, #2
 8002c94:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c96:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002c98:	2202      	movs	r2, #2
 8002c9a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ca2:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ca8:	4b07      	ldr	r3, [pc, #28]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002cae:	4b06      	ldr	r3, [pc, #24]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002cb4:	4804      	ldr	r0, [pc, #16]	@ (8002cc8 <MX_USB_PCD_Init+0x48>)
 8002cb6:	f007 f8e9 	bl	8009e8c <HAL_PCD_Init>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002cc0:	f000 f860 	bl	8002d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20000424 	.word	0x20000424
 8002ccc:	40006800 	.word	0x40006800

08002cd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002cd4:	2004      	movs	r0, #4
 8002cd6:	f7ff fe3e 	bl	8002956 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002cda:	2002      	movs	r0, #2
 8002cdc:	f7ff fe3b 	bl	8002956 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	203a      	movs	r0, #58	@ 0x3a
 8002ce6:	f005 fd26 	bl	8008736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002cea:	203a      	movs	r0, #58	@ 0x3a
 8002cec:	f005 fd3d 	bl	800876a <HAL_NVIC_EnableIRQ>

}
 8002cf0:	bf00      	nop
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d08:	2004      	movs	r0, #4
 8002d0a:	f7ff fe3d 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d0e:	2002      	movs	r0, #2
 8002d10:	f7ff fe3a 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7ff fe37 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d1a:	2008      	movs	r0, #8
 8002d1c:	f7ff fe34 	bl	8002988 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002d20:	2200      	movs	r2, #0
 8002d22:	2123      	movs	r1, #35	@ 0x23
 8002d24:	4814      	ldr	r0, [pc, #80]	@ (8002d78 <MX_GPIO_Init+0x84>)
 8002d26:	f006 f96f 	bl	8009008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002d2a:	2310      	movs	r3, #16
 8002d2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	4619      	mov	r1, r3
 8002d3a:	4810      	ldr	r0, [pc, #64]	@ (8002d7c <MX_GPIO_Init+0x88>)
 8002d3c:	f005 ff16 	bl	8008b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002d40:	2323      	movs	r3, #35	@ 0x23
 8002d42:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d44:	2301      	movs	r3, #1
 8002d46:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d50:	1d3b      	adds	r3, r7, #4
 8002d52:	4619      	mov	r1, r3
 8002d54:	4808      	ldr	r0, [pc, #32]	@ (8002d78 <MX_GPIO_Init+0x84>)
 8002d56:	f005 ff09 	bl	8008b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d66:	1d3b      	adds	r3, r7, #4
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4805      	ldr	r0, [pc, #20]	@ (8002d80 <MX_GPIO_Init+0x8c>)
 8002d6c:	f005 fefe 	bl	8008b6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d70:	bf00      	nop
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	48000400 	.word	0x48000400
 8002d7c:	48000800 	.word	0x48000800
 8002d80:	48000c00 	.word	0x48000c00

08002d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d88:	b672      	cpsid	i
}
 8002d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d8c:	bf00      	nop
 8002d8e:	e7fd      	b.n	8002d8c <Error_Handler+0x8>

08002d90 <LL_RCC_EnableRTC>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002d94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002da4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <LL_AHB2_GRP1_EnableClock>:
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <LL_AHB3_GRP1_EnableClock>:
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002dec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002df0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002df2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e00:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4013      	ands	r3, r2
 8002e06:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e08:	68fb      	ldr	r3, [r7, #12]
}
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002e16:	b480      	push	{r7}
 8002e18:	b085      	sub	sp, #20
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002e2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4013      	ands	r3, r2
 8002e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b085      	sub	sp, #20
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e54:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e64:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
}
 8002e6e:	bf00      	nop
 8002e70:	3714      	adds	r7, #20
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr

08002e7a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002e7e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002e82:	f7ff ffaf 	bl	8002de4 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	202e      	movs	r0, #46	@ 0x2e
 8002e8c:	f005 fc53 	bl	8008736 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e90:	202e      	movs	r0, #46	@ 0x2e
 8002e92:	f005 fc6a 	bl	800876a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <HAL_IPCC_MspInit+0x44>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d113      	bne.n	8002ed6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002eae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002eb2:	f7ff ff97 	bl	8002de4 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	202c      	movs	r0, #44	@ 0x2c
 8002ebc:	f005 fc3b 	bl	8008736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002ec0:	202c      	movs	r0, #44	@ 0x2c
 8002ec2:	f005 fc52 	bl	800876a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2100      	movs	r1, #0
 8002eca:	202d      	movs	r0, #45	@ 0x2d
 8002ecc:	f005 fc33 	bl	8008736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002ed0:	202d      	movs	r0, #45	@ 0x2d
 8002ed2:	f005 fc4a 	bl	800876a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	58000c00 	.word	0x58000c00

08002ee4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b096      	sub	sp, #88	@ 0x58
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002eec:	f107 0308 	add.w	r3, r7, #8
 8002ef0:	2250      	movs	r2, #80	@ 0x50
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f00e fb2b 	bl	8011550 <memset>
  if(hrtc->Instance==RTC)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a13      	ldr	r2, [pc, #76]	@ (8002f4c <HAL_RTC_MspInit+0x68>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d11f      	bne.n	8002f44 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002f04:	f007 f8ba 	bl	800a07c <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002f08:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002f0c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002f0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f12:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f14:	f107 0308 	add.w	r3, r7, #8
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f008 fc03 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002f24:	f7ff ff2e 	bl	8002d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f28:	f7ff ff32 	bl	8002d90 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002f2c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002f30:	f7ff ff71 	bl	8002e16 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8002f34:	2200      	movs	r2, #0
 8002f36:	2100      	movs	r1, #0
 8002f38:	2003      	movs	r0, #3
 8002f3a:	f005 fbfc 	bl	8008736 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8002f3e:	2003      	movs	r0, #3
 8002f40:	f005 fc13 	bl	800876a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f44:	bf00      	nop
 8002f46:	3758      	adds	r7, #88	@ 0x58
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40002800 	.word	0x40002800

08002f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b09c      	sub	sp, #112	@ 0x70
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	601a      	str	r2, [r3, #0]
 8002f60:	605a      	str	r2, [r3, #4]
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	60da      	str	r2, [r3, #12]
 8002f66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f68:	f107 030c 	add.w	r3, r7, #12
 8002f6c:	2250      	movs	r2, #80	@ 0x50
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f00e faed 	bl	8011550 <memset>
  if(huart->Instance==USART1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8003024 <HAL_UART_MspInit+0xd4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d14d      	bne.n	800301c <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f80:	2301      	movs	r3, #1
 8002f82:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f84:	2300      	movs	r3, #0
 8002f86:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f008 fbc9 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002f98:	f7ff fef4 	bl	8002d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f9c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002fa0:	f7ff ff52 	bl	8002e48 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7ff ff04 	bl	8002db2 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002faa:	23c0      	movs	r3, #192	@ 0xc0
 8002fac:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fae:	2302      	movs	r3, #2
 8002fb0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fba:	2307      	movs	r3, #7
 8002fbc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fbe:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4818      	ldr	r0, [pc, #96]	@ (8003028 <HAL_UART_MspInit+0xd8>)
 8002fc6:	f005 fdd1 	bl	8008b6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fcc:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_UART_MspInit+0xe0>)
 8002fce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fd0:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fd2:	220f      	movs	r2, #15
 8002fd4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fd6:	4b15      	ldr	r3, [pc, #84]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fd8:	2210      	movs	r2, #16
 8002fda:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fdc:	4b13      	ldr	r3, [pc, #76]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fe2:	4b12      	ldr	r3, [pc, #72]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fe4:	2280      	movs	r2, #128	@ 0x80
 8002fe6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fe8:	4b10      	ldr	r3, [pc, #64]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fee:	4b0f      	ldr	r3, [pc, #60]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003000:	480a      	ldr	r0, [pc, #40]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8003002:	f005 fbf7 	bl	80087f4 <HAL_DMA_Init>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d001      	beq.n	8003010 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800300c:	f7ff feba 	bl	8002d84 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a06      	ldr	r2, [pc, #24]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8003014:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003016:	4a05      	ldr	r2, [pc, #20]	@ (800302c <HAL_UART_MspInit+0xdc>)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800301c:	bf00      	nop
 800301e:	3770      	adds	r7, #112	@ 0x70
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	40013800 	.word	0x40013800
 8003028:	48000400 	.word	0x48000400
 800302c:	200003c4 	.word	0x200003c4
 8003030:	40020444 	.word	0x40020444

08003034 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b09c      	sub	sp, #112	@ 0x70
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800303c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	605a      	str	r2, [r3, #4]
 8003046:	609a      	str	r2, [r3, #8]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 030c 	add.w	r3, r7, #12
 8003050:	2250      	movs	r2, #80	@ 0x50
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f00e fa7b 	bl	8011550 <memset>
  if(hpcd->Instance==USB)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1f      	ldr	r2, [pc, #124]	@ (80030dc <HAL_PCD_MspInit+0xa8>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d136      	bne.n	80030d2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003064:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003068:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 800306a:	2318      	movs	r3, #24
 800306c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 800306e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003072:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8003074:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003078:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800307a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800307e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8003080:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003084:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003086:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800308a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800308c:	f107 030c 	add.w	r3, r7, #12
 8003090:	4618      	mov	r0, r3
 8003092:	f008 fb47 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>
 8003096:	4603      	mov	r3, r0
 8003098:	2b00      	cmp	r3, #0
 800309a:	d001      	beq.n	80030a0 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 800309c:	f7ff fe72 	bl	8002d84 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a0:	2001      	movs	r0, #1
 80030a2:	f7ff fe86 	bl	8002db2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030a6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80030aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ac:	2302      	movs	r3, #2
 80030ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b0:	2300      	movs	r3, #0
 80030b2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030b4:	2300      	movs	r3, #0
 80030b6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80030b8:	230a      	movs	r3, #10
 80030ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030bc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80030c0:	4619      	mov	r1, r3
 80030c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80030c6:	f005 fd51 	bl	8008b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80030ca:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80030ce:	f7ff fea2 	bl	8002e16 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80030d2:	bf00      	nop
 80030d4:	3770      	adds	r7, #112	@ 0x70
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40006800 	.word	0x40006800

080030e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <NMI_Handler+0x4>

080030e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <HardFault_Handler+0x4>

080030f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <MemManage_Handler+0x4>

080030f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <BusFault_Handler+0x4>

08003100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003104:	bf00      	nop
 8003106:	e7fd      	b.n	8003104 <UsageFault_Handler+0x4>

08003108 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800311a:	bf00      	nop
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr

08003124 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003136:	f005 f98b 	bl	8008450 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}

0800313e <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003142:	f7ff f8f3 	bl	800232c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003146:	bf00      	nop
 8003148:	bd80      	pop	{r7, pc}

0800314a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800314e:	f00d fc33 	bl	80109b8 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003152:	bf00      	nop
 8003154:	bd80      	pop	{r7, pc}

08003156 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8003156:	b580      	push	{r7, lr}
 8003158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800315a:	f00d fc63 	bl	8010a24 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800315e:	bf00      	nop
 8003160:	bd80      	pop	{r7, pc}

08003162 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8003166:	f005 ff67 	bl	8009038 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
	...

08003170 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	@ (8003180 <DMA2_Channel4_IRQHandler+0x10>)
 8003176:	f005 fbe5 	bl	8008944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200003c4 	.word	0x200003c4

08003184 <LL_AHB2_GRP1_EnableClock>:
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003190:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003192:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4313      	orrs	r3, r2
 800319a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800319c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4013      	ands	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031a8:	68fb      	ldr	r3, [r7, #12]
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_APB1_GRP1_EnableClock>:
{
 80031b6:	b480      	push	{r7}
 80031b8:	b085      	sub	sp, #20
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80031be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031c2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80031ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031d2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4013      	ands	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <LL_APB1_GRP1_DisableClock>:
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80031f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80031f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80031fe:	4013      	ands	r3, r2
 8003200:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
	...

08003210 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b082      	sub	sp, #8
 8003214:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8003216:	2300      	movs	r3, #0
 8003218:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800321a:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <BSP_I2C1_Init+0x70>)
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <BSP_I2C1_Init+0x74>)
 800321e:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003220:	4b19      	ldr	r3, [pc, #100]	@ (8003288 <BSP_I2C1_Init+0x78>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	4918      	ldr	r1, [pc, #96]	@ (8003288 <BSP_I2C1_Init+0x78>)
 8003228:	600a      	str	r2, [r1, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d122      	bne.n	8003274 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800322e:	4814      	ldr	r0, [pc, #80]	@ (8003280 <BSP_I2C1_Init+0x70>)
 8003230:	f006 fa32 	bl	8009698 <HAL_I2C_GetState>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11c      	bne.n	8003274 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800323a:	4811      	ldr	r0, [pc, #68]	@ (8003280 <BSP_I2C1_Init+0x70>)
 800323c:	f000 f8fe 	bl	800343c <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 8003246:	480e      	ldr	r0, [pc, #56]	@ (8003280 <BSP_I2C1_Init+0x70>)
 8003248:	f000 f8b4 	bl	80033b4 <MX_I2C1_Init>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003252:	f06f 0307 	mvn.w	r3, #7
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	e00c      	b.n	8003274 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800325a:	2100      	movs	r1, #0
 800325c:	4808      	ldr	r0, [pc, #32]	@ (8003280 <BSP_I2C1_Init+0x70>)
 800325e:	f006 fcf7 	bl	8009c50 <HAL_I2CEx_ConfigAnalogFilter>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003268:	f06f 0307 	mvn.w	r3, #7
 800326c:	607b      	str	r3, [r7, #4]
 800326e:	e001      	b.n	8003274 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003270:	2300      	movs	r3, #0
 8003272:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003274:	687b      	ldr	r3, [r7, #4]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000700 	.word	0x20000700
 8003284:	40005400 	.word	0x40005400
 8003288:	20000754 	.word	0x20000754

0800328c <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003292:	2300      	movs	r3, #0
 8003294:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8003296:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <BSP_I2C1_DeInit+0x48>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d014      	beq.n	80032c8 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <BSP_I2C1_DeInit+0x48>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <BSP_I2C1_DeInit+0x48>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b0a      	ldr	r3, [pc, #40]	@ (80032d4 <BSP_I2C1_DeInit+0x48>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d10b      	bne.n	80032c8 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80032b0:	4809      	ldr	r0, [pc, #36]	@ (80032d8 <BSP_I2C1_DeInit+0x4c>)
 80032b2:	f000 f907 	bl	80034c4 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80032b6:	4808      	ldr	r0, [pc, #32]	@ (80032d8 <BSP_I2C1_DeInit+0x4c>)
 80032b8:	f005 ff7d 	bl	80091b6 <HAL_I2C_DeInit>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80032c2:	f06f 0307 	mvn.w	r3, #7
 80032c6:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80032c8:	687b      	ldr	r3, [r7, #4]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	20000754 	.word	0x20000754
 80032d8:	20000700 	.word	0x20000700

080032dc <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	@ 0x28
 80032e0:	af04      	add	r7, sp, #16
 80032e2:	60ba      	str	r2, [r7, #8]
 80032e4:	461a      	mov	r2, r3
 80032e6:	4603      	mov	r3, r0
 80032e8:	81fb      	strh	r3, [r7, #14]
 80032ea:	460b      	mov	r3, r1
 80032ec:	81bb      	strh	r3, [r7, #12]
 80032ee:	4613      	mov	r3, r2
 80032f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80032f6:	89ba      	ldrh	r2, [r7, #12]
 80032f8:	89f9      	ldrh	r1, [r7, #14]
 80032fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032fe:	9302      	str	r3, [sp, #8]
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	9301      	str	r3, [sp, #4]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2301      	movs	r3, #1
 800330a:	480c      	ldr	r0, [pc, #48]	@ (800333c <BSP_I2C1_WriteReg+0x60>)
 800330c:	f005 ff96 	bl	800923c <HAL_I2C_Mem_Write>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00c      	beq.n	8003330 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8003316:	4809      	ldr	r0, [pc, #36]	@ (800333c <BSP_I2C1_WriteReg+0x60>)
 8003318:	f006 f9cc 	bl	80096b4 <HAL_I2C_GetError>
 800331c:	4603      	mov	r3, r0
 800331e:	2b04      	cmp	r3, #4
 8003320:	d103      	bne.n	800332a <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003322:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e002      	b.n	8003330 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800332a:	f06f 0303 	mvn.w	r3, #3
 800332e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003330:	697b      	ldr	r3, [r7, #20]
}
 8003332:	4618      	mov	r0, r3
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000700 	.word	0x20000700

08003340 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af04      	add	r7, sp, #16
 8003346:	60ba      	str	r2, [r7, #8]
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	81fb      	strh	r3, [r7, #14]
 800334e:	460b      	mov	r3, r1
 8003350:	81bb      	strh	r3, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800335a:	89ba      	ldrh	r2, [r7, #12]
 800335c:	89f9      	ldrh	r1, [r7, #14]
 800335e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003362:	9302      	str	r3, [sp, #8]
 8003364:	88fb      	ldrh	r3, [r7, #6]
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	9300      	str	r3, [sp, #0]
 800336c:	2301      	movs	r3, #1
 800336e:	480c      	ldr	r0, [pc, #48]	@ (80033a0 <BSP_I2C1_ReadReg+0x60>)
 8003370:	f006 f878 	bl	8009464 <HAL_I2C_Mem_Read>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800337a:	4809      	ldr	r0, [pc, #36]	@ (80033a0 <BSP_I2C1_ReadReg+0x60>)
 800337c:	f006 f99a 	bl	80096b4 <HAL_I2C_GetError>
 8003380:	4603      	mov	r3, r0
 8003382:	2b04      	cmp	r3, #4
 8003384:	d103      	bne.n	800338e <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003386:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	e002      	b.n	8003394 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800338e:	f06f 0303 	mvn.w	r3, #3
 8003392:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003394:	697b      	ldr	r3, [r7, #20]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	20000700 	.word	0x20000700

080033a4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80033a8:	f005 f866 	bl	8008478 <HAL_GetTick>
 80033ac:	4603      	mov	r3, r0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80033bc:	2300      	movs	r3, #0
 80033be:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003434 <MX_I2C1_Init+0x80>)
 80033c4:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a1b      	ldr	r2, [pc, #108]	@ (8003438 <MX_I2C1_Init+0x84>)
 80033ca:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f005 fe42 	bl	8009080 <HAL_I2C_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003406:	2100      	movs	r1, #0
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f006 fc21 	bl	8009c50 <HAL_I2CEx_ConfigAnalogFilter>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d001      	beq.n	8003418 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003418:	2100      	movs	r1, #0
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f006 fc63 	bl	8009ce6 <HAL_I2CEx_ConfigDigitalFilter>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	40005400 	.word	0x40005400
 8003438:	00707cbb 	.word	0x00707cbb

0800343c <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b09c      	sub	sp, #112	@ 0x70
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003444:	f107 030c 	add.w	r3, r7, #12
 8003448:	2250      	movs	r2, #80	@ 0x50
 800344a:	2100      	movs	r1, #0
 800344c:	4618      	mov	r0, r3
 800344e:	f00e f87f 	bl	8011550 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003452:	2304      	movs	r3, #4
 8003454:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003456:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800345c:	f107 030c 	add.w	r3, r7, #12
 8003460:	4618      	mov	r0, r3
 8003462:	f008 f95f 	bl	800b724 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003466:	2002      	movs	r0, #2
 8003468:	f7ff fe8c 	bl	8003184 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800346c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003470:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003472:	2312      	movs	r3, #18
 8003474:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347a:	2300      	movs	r3, #0
 800347c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800347e:	2304      	movs	r3, #4
 8003480:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003482:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003486:	4619      	mov	r1, r3
 8003488:	480d      	ldr	r0, [pc, #52]	@ (80034c0 <I2C1_MspInit+0x84>)
 800348a:	f005 fb6f 	bl	8008b6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800348e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003492:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003494:	2312      	movs	r3, #18
 8003496:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80034a0:	2304      	movs	r3, #4
 80034a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80034a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80034a8:	4619      	mov	r1, r3
 80034aa:	4805      	ldr	r0, [pc, #20]	@ (80034c0 <I2C1_MspInit+0x84>)
 80034ac:	f005 fb5e 	bl	8008b6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034b0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80034b4:	f7ff fe7f 	bl	80031b6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80034b8:	bf00      	nop
 80034ba:	3770      	adds	r7, #112	@ 0x70
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	48000400 	.word	0x48000400

080034c4 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80034cc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80034d0:	f7ff fe8a 	bl	80031e8 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80034d4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80034d8:	4805      	ldr	r0, [pc, #20]	@ (80034f0 <I2C1_MspDeInit+0x2c>)
 80034da:	f005 fcb7 	bl	8008e4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80034de:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80034e2:	4803      	ldr	r0, [pc, #12]	@ (80034f0 <I2C1_MspDeInit+0x2c>)
 80034e4:	f005 fcb2 	bl	8008e4c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80034e8:	bf00      	nop
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	48000400 	.word	0x48000400

080034f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e00a      	b.n	800351c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003506:	f3af 8000 	nop.w
 800350a:	4601      	mov	r1, r0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	60ba      	str	r2, [r7, #8]
 8003512:	b2ca      	uxtb	r2, r1
 8003514:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	dbf0      	blt.n	8003506 <_read+0x12>
  }

  return len;
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_close>:
  }
  return len;
}

int _close(int file)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003536:	f04f 33ff 	mov.w	r3, #4294967295
}
 800353a:	4618      	mov	r0, r3
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003556:	605a      	str	r2, [r3, #4]
  return 0;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_isatty>:

int _isatty(int file)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800356e:	2301      	movs	r3, #1
}
 8003570:	4618      	mov	r0, r3
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a0:	4a14      	ldr	r2, [pc, #80]	@ (80035f4 <_sbrk+0x5c>)
 80035a2:	4b15      	ldr	r3, [pc, #84]	@ (80035f8 <_sbrk+0x60>)
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035ac:	4b13      	ldr	r3, [pc, #76]	@ (80035fc <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d102      	bne.n	80035ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <_sbrk+0x64>)
 80035b6:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <_sbrk+0x68>)
 80035b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035ba:	4b10      	ldr	r3, [pc, #64]	@ (80035fc <_sbrk+0x64>)
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4413      	add	r3, r2
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d207      	bcs.n	80035d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035c8:	f00e f826 	bl	8011618 <__errno>
 80035cc:	4603      	mov	r3, r0
 80035ce:	220c      	movs	r2, #12
 80035d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d2:	f04f 33ff 	mov.w	r3, #4294967295
 80035d6:	e009      	b.n	80035ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035d8:	4b08      	ldr	r3, [pc, #32]	@ (80035fc <_sbrk+0x64>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035de:	4b07      	ldr	r3, [pc, #28]	@ (80035fc <_sbrk+0x64>)
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4413      	add	r3, r2
 80035e6:	4a05      	ldr	r2, [pc, #20]	@ (80035fc <_sbrk+0x64>)
 80035e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ea:	68fb      	ldr	r3, [r7, #12]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	20030000 	.word	0x20030000
 80035f8:	00000400 	.word	0x00000400
 80035fc:	20000758 	.word	0x20000758
 8003600:	20000d50 	.word	0x20000d50

08003604 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8003608:	4b24      	ldr	r3, [pc, #144]	@ (800369c <SystemInit+0x98>)
 800360a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360e:	4a23      	ldr	r2, [pc, #140]	@ (800369c <SystemInit+0x98>)
 8003610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800362c:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003630:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003632:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800363c:	4b18      	ldr	r3, [pc, #96]	@ (80036a0 <SystemInit+0x9c>)
 800363e:	4013      	ands	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003646:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800364a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800364e:	f023 0305 	bic.w	r3, r3, #5
 8003652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800365a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800365e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800366a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800366e:	4a0d      	ldr	r2, [pc, #52]	@ (80036a4 <SystemInit+0xa0>)
 8003670:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003676:	4a0b      	ldr	r2, [pc, #44]	@ (80036a4 <SystemInit+0xa0>)
 8003678:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800367a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003684:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003688:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800368a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800368e:	2200      	movs	r2, #0
 8003690:	619a      	str	r2, [r3, #24]
}
 8003692:	bf00      	nop
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr
 800369c:	e000ed00 	.word	0xe000ed00
 80036a0:	faf6fefb 	.word	0xfaf6fefb
 80036a4:	22041000 	.word	0x22041000

080036a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80036a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036ac:	3304      	adds	r3, #4

080036ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80036b2:	d3f9      	bcc.n	80036a8 <CopyDataInit>
  bx lr
 80036b4:	4770      	bx	lr

080036b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80036b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80036b8:	3004      	adds	r0, #4

080036ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80036ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80036bc:	d3fb      	bcc.n	80036b6 <FillZerobss>
  bx lr
 80036be:	4770      	bx	lr

080036c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80036c0:	480c      	ldr	r0, [pc, #48]	@ (80036f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80036c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80036c4:	f7ff ff9e 	bl	8003604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80036c8:	480b      	ldr	r0, [pc, #44]	@ (80036f8 <LoopForever+0x6>)
 80036ca:	490c      	ldr	r1, [pc, #48]	@ (80036fc <LoopForever+0xa>)
 80036cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003700 <LoopForever+0xe>)
 80036ce:	2300      	movs	r3, #0
 80036d0:	f7ff ffed 	bl	80036ae <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80036d4:	480b      	ldr	r0, [pc, #44]	@ (8003704 <LoopForever+0x12>)
 80036d6:	490c      	ldr	r1, [pc, #48]	@ (8003708 <LoopForever+0x16>)
 80036d8:	4a0c      	ldr	r2, [pc, #48]	@ (800370c <LoopForever+0x1a>)
 80036da:	2300      	movs	r3, #0
 80036dc:	f7ff ffe7 	bl	80036ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80036e0:	480b      	ldr	r0, [pc, #44]	@ (8003710 <LoopForever+0x1e>)
 80036e2:	490c      	ldr	r1, [pc, #48]	@ (8003714 <LoopForever+0x22>)
 80036e4:	2300      	movs	r3, #0
 80036e6:	f7ff ffe8 	bl	80036ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80036ea:	f00d ff9b 	bl	8011624 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80036ee:	f7ff f965 	bl	80029bc <main>

080036f2 <LoopForever>:

LoopForever:
  b LoopForever
 80036f2:	e7fe      	b.n	80036f2 <LoopForever>
  ldr   r0, =_estack
 80036f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80036f8:	20000008 	.word	0x20000008
 80036fc:	2000016c 	.word	0x2000016c
 8003700:	08013e48 	.word	0x08013e48
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003704:	200301e4 	.word	0x200301e4
 8003708:	20030a67 	.word	0x20030a67
 800370c:	08013ff2 	.word	0x08013ff2
  INIT_BSS _sbss, _ebss
 8003710:	200001b8 	.word	0x200001b8
 8003714:	20000d4c 	.word	0x20000d4c

08003718 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003718:	e7fe      	b.n	8003718 <ADC1_IRQHandler>
	...

0800371c <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d103      	bne.n	8003738 <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	e051      	b.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	7b1a      	ldrb	r2, [r3, #12]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	695a      	ldr	r2, [r3, #20]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a1d      	ldr	r2, [pc, #116]	@ (80037e8 <LIS2DW12_RegisterBusIO+0xcc>)
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	4a1c      	ldr	r2, [pc, #112]	@ (80037ec <LIS2DW12_RegisterBusIO+0xd0>)
 800377a:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d103      	bne.n	800379a <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003792:	f04f 33ff 	mov.w	r3, #4294967295
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	e020      	b.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4798      	blx	r3
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80037a6:	f04f 33ff 	mov.w	r3, #4294967295
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e016      	b.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d112      	bne.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10d      	bne.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80037c0:	2305      	movs	r3, #5
 80037c2:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80037c4:	7afb      	ldrb	r3, [r7, #11]
 80037c6:	461a      	mov	r2, r3
 80037c8:	2121      	movs	r1, #33	@ 0x21
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fcc1 	bl	8004152 <LIS2DW12_Write_Reg>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d002      	beq.n	80037dc <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80037d6:	f04f 33ff 	mov.w	r3, #4294967295
 80037da:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80037dc:	68fb      	ldr	r3, [r7, #12]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	080044e5 	.word	0x080044e5
 80037ec:	0800451b 	.word	0x0800451b

080037f0 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3320      	adds	r3, #32
 80037fc:	2101      	movs	r1, #1
 80037fe:	4618      	mov	r0, r3
 8003800:	f001 f9cb 	bl	8004b9a <lis2dw12_auto_increment_set>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800380a:	f04f 33ff 	mov.w	r3, #4294967295
 800380e:	e04b      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3320      	adds	r3, #32
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f001 f8e2 	bl	80049e0 <lis2dw12_block_data_update_set>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	e03f      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3320      	adds	r3, #32
 800382c:	2100      	movs	r1, #0
 800382e:	4618      	mov	r0, r3
 8003830:	f001 f9d9 	bl	8004be6 <lis2dw12_fifo_mode_set>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	e033      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	3320      	adds	r3, #32
 8003844:	2104      	movs	r1, #4
 8003846:	4618      	mov	r0, r3
 8003848:	f000 feb2 	bl	80045b0 <lis2dw12_power_mode_set>
 800384c:	4603      	mov	r3, r0
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295
 8003856:	e027      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a15      	ldr	r2, [pc, #84]	@ (80038b0 <LIS2DW12_Init+0xc0>)
 800385c:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3320      	adds	r3, #32
 8003872:	2100      	movs	r1, #0
 8003874:	4618      	mov	r0, r3
 8003876:	f000 ffa3 	bl	80047c0 <lis2dw12_data_rate_set>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d002      	beq.n	8003886 <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
 8003884:	e010      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3320      	adds	r3, #32
 800388a:	2100      	movs	r1, #0
 800388c:	4618      	mov	r0, r3
 800388e:	f001 f8cd 	bl	8004a2c <lis2dw12_full_scale_set>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
 800389c:	e004      	b.n	80038a8 <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	42c80000 	.word	0x42c80000

080038b4 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f000 f888 	bl	80039d2 <LIS2DW12_ACC_Disable>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	e010      	b.n	80038f0 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3320      	adds	r3, #32
 8003906:	6839      	ldr	r1, [r7, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f001 f935 	bl	8004b78 <lis2dw12_device_id_get>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003914:	f04f 33ff 	mov.w	r3, #4294967295
 8003918:	e000      	b.n	800391c <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3708      	adds	r7, #8
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2201      	movs	r2, #1
 8003932:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2200      	movs	r2, #0
 800393e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2200      	movs	r2, #0
 8003944:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	4a06      	ldr	r2, [pc, #24]	@ (800397c <LIS2DW12_GetCapabilities+0x58>)
 8003964:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	f04f 0200 	mov.w	r2, #0
 800396c:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 800396e:	2300      	movs	r3, #0
}
 8003970:	4618      	mov	r0, r3
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	44c80000 	.word	0x44c80000

08003980 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003992:	2300      	movs	r3, #0
 8003994:	e019      	b.n	80039ca <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80039a8:	461a      	mov	r2, r3
 80039aa:	eeb0 0a67 	vmov.f32	s0, s15
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fbea 	bl	8004188 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d002      	beq.n	80039c0 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 80039ba:	f04f 33ff 	mov.w	r3, #4294967295
 80039be:	e004      	b.n	80039ca <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3708      	adds	r7, #8
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b082      	sub	sp, #8
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	e010      	b.n	8003a0a <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	3320      	adds	r3, #32
 80039ec:	2100      	movs	r1, #0
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fee6 	bl	80047c0 <lis2dw12_data_rate_set>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 80039fa:	f04f 33ff 	mov.w	r3, #4294967295
 80039fe:	e004      	b.n	8003a0a <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
	...

08003a14 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3320      	adds	r3, #32
 8003a26:	f107 020b 	add.w	r2, r7, #11
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f001 f823 	bl	8004a78 <lis2dw12_full_scale_get>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003a38:	f04f 33ff 	mov.w	r3, #4294967295
 8003a3c:	e080      	b.n	8003b40 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	3320      	adds	r3, #32
 8003a42:	f107 020a 	add.w	r2, r7, #10
 8003a46:	4611      	mov	r1, r2
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 fdff 	bl	800464c <lis2dw12_power_mode_get>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003a54:	f04f 33ff 	mov.w	r3, #4294967295
 8003a58:	e072      	b.n	8003b40 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003a5a:	7abb      	ldrb	r3, [r7, #10]
 8003a5c:	2b1b      	cmp	r3, #27
 8003a5e:	bf8c      	ite	hi
 8003a60:	2201      	movhi	r2, #1
 8003a62:	2200      	movls	r2, #0
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	2a00      	cmp	r2, #0
 8003a68:	d162      	bne.n	8003b30 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	409a      	lsls	r2, r3
 8003a6e:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003a72:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	bf14      	ite	ne
 8003a7a:	2301      	movne	r3, #1
 8003a7c:	2300      	moveq	r3, #0
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d12f      	bne.n	8003ae4 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003a84:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	bf14      	ite	ne
 8003a8c:	2301      	movne	r3, #1
 8003a8e:	2300      	moveq	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d04c      	beq.n	8003b30 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003a96:	7afb      	ldrb	r3, [r7, #11]
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d81b      	bhi.n	8003ad4 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003a9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa4 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003abd 	.word	0x08003abd
 8003aac:	08003ac5 	.word	0x08003ac5
 8003ab0:	08003acd 	.word	0x08003acd
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	4a24      	ldr	r2, [pc, #144]	@ (8003b48 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003ab8:	601a      	str	r2, [r3, #0]
          break;
 8003aba:	e012      	b.n	8003ae2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	4a23      	ldr	r2, [pc, #140]	@ (8003b4c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003ac0:	601a      	str	r2, [r3, #0]
          break;
 8003ac2:	e00e      	b.n	8003ae2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4a22      	ldr	r2, [pc, #136]	@ (8003b50 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003ac8:	601a      	str	r2, [r3, #0]
          break;
 8003aca:	e00a      	b.n	8003ae2 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	4a21      	ldr	r2, [pc, #132]	@ (8003b54 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003ad0:	601a      	str	r2, [r3, #0]
          break;
 8003ad2:	e006      	b.n	8003ae2 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4a20      	ldr	r2, [pc, #128]	@ (8003b58 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003ad8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003ada:	f04f 33ff 	mov.w	r3, #4294967295
 8003ade:	60fb      	str	r3, [r7, #12]
          break;
 8003ae0:	bf00      	nop
      }
      break;
 8003ae2:	e02c      	b.n	8003b3e <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003ae4:	7afb      	ldrb	r3, [r7, #11]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d81a      	bhi.n	8003b20 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003aea:	a201      	add	r2, pc, #4	@ (adr r2, 8003af0 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b01 	.word	0x08003b01
 8003af4:	08003b09 	.word	0x08003b09
 8003af8:	08003b11 	.word	0x08003b11
 8003afc:	08003b19 	.word	0x08003b19
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4a16      	ldr	r2, [pc, #88]	@ (8003b5c <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003b04:	601a      	str	r2, [r3, #0]
          break;
 8003b06:	e012      	b.n	8003b2e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003b0c:	601a      	str	r2, [r3, #0]
          break;
 8003b0e:	e00e      	b.n	8003b2e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4a0d      	ldr	r2, [pc, #52]	@ (8003b48 <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003b14:	601a      	str	r2, [r3, #0]
          break;
 8003b16:	e00a      	b.n	8003b2e <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003b1c:	601a      	str	r2, [r3, #0]
          break;
 8003b1e:	e006      	b.n	8003b2e <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	4a0d      	ldr	r2, [pc, #52]	@ (8003b58 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003b24:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003b26:	f04f 33ff 	mov.w	r3, #4294967295
 8003b2a:	60fb      	str	r3, [r7, #12]
          break;
 8003b2c:	bf00      	nop
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	4a09      	ldr	r2, [pc, #36]	@ (8003b58 <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003b34:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003b36:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3a:	60fb      	str	r3, [r7, #12]
      break;
 8003b3c:	bf00      	nop
  }

  return ret;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	3f79db23 	.word	0x3f79db23
 8003b4c:	3ff9db23 	.word	0x3ff9db23
 8003b50:	4079db23 	.word	0x4079db23
 8003b54:	40f9db23 	.word	0x40f9db23
 8003b58:	bf800000 	.word	0xbf800000
 8003b5c:	3e79db23 	.word	0x3e79db23
 8003b60:	3ef9db23 	.word	0x3ef9db23

08003b64 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	3320      	adds	r3, #32
 8003b76:	f107 020b 	add.w	r2, r7, #11
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fe65 	bl	800484c <lis2dw12_data_rate_get>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d002      	beq.n	8003b8e <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003b88:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8c:	e14f      	b.n	8003e2e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3320      	adds	r3, #32
 8003b92:	f107 020a 	add.w	r2, r7, #10
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fd57 	bl	800464c <lis2dw12_power_mode_get>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	e141      	b.n	8003e2e <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	2b32      	cmp	r3, #50	@ 0x32
 8003bae:	f200 8136 	bhi.w	8003e1e <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003c85 	.word	0x08003c85
 8003bbc:	08003c8f 	.word	0x08003c8f
 8003bc0:	08003ce9 	.word	0x08003ce9
 8003bc4:	08003cf1 	.word	0x08003cf1
 8003bc8:	08003cf9 	.word	0x08003cf9
 8003bcc:	08003d01 	.word	0x08003d01
 8003bd0:	08003d09 	.word	0x08003d09
 8003bd4:	08003d11 	.word	0x08003d11
 8003bd8:	08003d6b 	.word	0x08003d6b
 8003bdc:	08003dc5 	.word	0x08003dc5
 8003be0:	08003e1f 	.word	0x08003e1f
 8003be4:	08003e1f 	.word	0x08003e1f
 8003be8:	08003e1f 	.word	0x08003e1f
 8003bec:	08003e1f 	.word	0x08003e1f
 8003bf0:	08003e1f 	.word	0x08003e1f
 8003bf4:	08003e1f 	.word	0x08003e1f
 8003bf8:	08003e1f 	.word	0x08003e1f
 8003bfc:	08003e1f 	.word	0x08003e1f
 8003c00:	08003c85 	.word	0x08003c85
 8003c04:	08003e1f 	.word	0x08003e1f
 8003c08:	08003e1f 	.word	0x08003e1f
 8003c0c:	08003e1f 	.word	0x08003e1f
 8003c10:	08003e1f 	.word	0x08003e1f
 8003c14:	08003e1f 	.word	0x08003e1f
 8003c18:	08003e1f 	.word	0x08003e1f
 8003c1c:	08003e1f 	.word	0x08003e1f
 8003c20:	08003e1f 	.word	0x08003e1f
 8003c24:	08003e1f 	.word	0x08003e1f
 8003c28:	08003e1f 	.word	0x08003e1f
 8003c2c:	08003e1f 	.word	0x08003e1f
 8003c30:	08003e1f 	.word	0x08003e1f
 8003c34:	08003e1f 	.word	0x08003e1f
 8003c38:	08003e1f 	.word	0x08003e1f
 8003c3c:	08003e1f 	.word	0x08003e1f
 8003c40:	08003e1f 	.word	0x08003e1f
 8003c44:	08003e1f 	.word	0x08003e1f
 8003c48:	08003e1f 	.word	0x08003e1f
 8003c4c:	08003e1f 	.word	0x08003e1f
 8003c50:	08003e1f 	.word	0x08003e1f
 8003c54:	08003e1f 	.word	0x08003e1f
 8003c58:	08003e1f 	.word	0x08003e1f
 8003c5c:	08003e1f 	.word	0x08003e1f
 8003c60:	08003e1f 	.word	0x08003e1f
 8003c64:	08003e1f 	.word	0x08003e1f
 8003c68:	08003e1f 	.word	0x08003e1f
 8003c6c:	08003e1f 	.word	0x08003e1f
 8003c70:	08003e1f 	.word	0x08003e1f
 8003c74:	08003e1f 	.word	0x08003e1f
 8003c78:	08003e1f 	.word	0x08003e1f
 8003c7c:	08003e1f 	.word	0x08003e1f
 8003c80:	08003c85 	.word	0x08003c85
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
      break;
 8003c8c:	e0ce      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003c8e:	7abb      	ldrb	r3, [r7, #10]
 8003c90:	2b1b      	cmp	r3, #27
 8003c92:	bf8c      	ite	hi
 8003c94:	2201      	movhi	r2, #1
 8003c96:	2200      	movls	r2, #0
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	2a00      	cmp	r2, #0
 8003c9c:	d11c      	bne.n	8003cd8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003ca8:	2a00      	cmp	r2, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2201      	movne	r2, #1
 8003cae:	2200      	moveq	r2, #0
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	2a00      	cmp	r2, #0
 8003cb4:	d10c      	bne.n	8003cd0 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003cb6:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d007      	beq.n	8003cd8 <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	4a5b      	ldr	r2, [pc, #364]	@ (8003e38 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003ccc:	601a      	str	r2, [r3, #0]
          break;
 8003cce:	e00a      	b.n	8003ce6 <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4a5a      	ldr	r2, [pc, #360]	@ (8003e3c <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003cd4:	601a      	str	r2, [r3, #0]
          break;
 8003cd6:	e006      	b.n	8003ce6 <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4a59      	ldr	r2, [pc, #356]	@ (8003e40 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003cdc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	60fb      	str	r3, [r7, #12]
          break;
 8003ce4:	bf00      	nop
      }
      break;
 8003ce6:	e0a1      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	4a53      	ldr	r2, [pc, #332]	@ (8003e38 <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003cec:	601a      	str	r2, [r3, #0]
      break;
 8003cee:	e09d      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	4a54      	ldr	r2, [pc, #336]	@ (8003e44 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003cf4:	601a      	str	r2, [r3, #0]
      break;
 8003cf6:	e099      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	4a53      	ldr	r2, [pc, #332]	@ (8003e48 <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003cfc:	601a      	str	r2, [r3, #0]
      break;
 8003cfe:	e095      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4a52      	ldr	r2, [pc, #328]	@ (8003e4c <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003d04:	601a      	str	r2, [r3, #0]
      break;
 8003d06:	e091      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4a51      	ldr	r2, [pc, #324]	@ (8003e50 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d0c:	601a      	str	r2, [r3, #0]
      break;
 8003d0e:	e08d      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003d10:	7abb      	ldrb	r3, [r7, #10]
 8003d12:	2b1b      	cmp	r3, #27
 8003d14:	bf8c      	ite	hi
 8003d16:	2201      	movhi	r2, #1
 8003d18:	2200      	movls	r2, #0
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	2a00      	cmp	r2, #0
 8003d1e:	d11c      	bne.n	8003d5a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003d20:	2201      	movs	r2, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003d2a:	2a00      	cmp	r2, #0
 8003d2c:	bf14      	ite	ne
 8003d2e:	2201      	movne	r2, #1
 8003d30:	2200      	moveq	r2, #0
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	2a00      	cmp	r2, #0
 8003d36:	d10c      	bne.n	8003d52 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003d38:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	4a41      	ldr	r2, [pc, #260]	@ (8003e54 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003d4e:	601a      	str	r2, [r3, #0]
          break;
 8003d50:	e00a      	b.n	8003d68 <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	4a3e      	ldr	r2, [pc, #248]	@ (8003e50 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003d56:	601a      	str	r2, [r3, #0]
          break;
 8003d58:	e006      	b.n	8003d68 <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	4a38      	ldr	r2, [pc, #224]	@ (8003e40 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003d5e:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	60fb      	str	r3, [r7, #12]
          break;
 8003d66:	bf00      	nop
      }
      break;
 8003d68:	e060      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003d6a:	7abb      	ldrb	r3, [r7, #10]
 8003d6c:	2b1b      	cmp	r3, #27
 8003d6e:	bf8c      	ite	hi
 8003d70:	2201      	movhi	r2, #1
 8003d72:	2200      	movls	r2, #0
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	2a00      	cmp	r2, #0
 8003d78:	d11c      	bne.n	8003db4 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003d84:	2a00      	cmp	r2, #0
 8003d86:	bf14      	ite	ne
 8003d88:	2201      	movne	r2, #1
 8003d8a:	2200      	moveq	r2, #0
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	2a00      	cmp	r2, #0
 8003d90:	d10c      	bne.n	8003dac <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003d92:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf14      	ite	ne
 8003d9a:	2301      	movne	r3, #1
 8003d9c:	2300      	moveq	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	4a2c      	ldr	r2, [pc, #176]	@ (8003e58 <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003da8:	601a      	str	r2, [r3, #0]
          break;
 8003daa:	e00a      	b.n	8003dc2 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4a28      	ldr	r2, [pc, #160]	@ (8003e50 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003db0:	601a      	str	r2, [r3, #0]
          break;
 8003db2:	e006      	b.n	8003dc2 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	4a22      	ldr	r2, [pc, #136]	@ (8003e40 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003db8:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	60fb      	str	r3, [r7, #12]
          break;
 8003dc0:	bf00      	nop
      }
      break;
 8003dc2:	e033      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003dc4:	7abb      	ldrb	r3, [r7, #10]
 8003dc6:	2b1b      	cmp	r3, #27
 8003dc8:	bf8c      	ite	hi
 8003dca:	2201      	movhi	r2, #1
 8003dcc:	2200      	movls	r2, #0
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	2a00      	cmp	r2, #0
 8003dd2:	d11c      	bne.n	8003e0e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dda:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003dde:	2a00      	cmp	r2, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2201      	movne	r2, #1
 8003de4:	2200      	moveq	r2, #0
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	2a00      	cmp	r2, #0
 8003dea:	d10c      	bne.n	8003e06 <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003dec:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d007      	beq.n	8003e0e <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	4a16      	ldr	r2, [pc, #88]	@ (8003e5c <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8003e02:	601a      	str	r2, [r3, #0]
          break;
 8003e04:	e00a      	b.n	8003e1c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	4a11      	ldr	r2, [pc, #68]	@ (8003e50 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003e0a:	601a      	str	r2, [r3, #0]
          break;
 8003e0c:	e006      	b.n	8003e1c <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	4a0b      	ldr	r2, [pc, #44]	@ (8003e40 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003e12:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e14:	f04f 33ff 	mov.w	r3, #4294967295
 8003e18:	60fb      	str	r3, [r7, #12]
          break;
 8003e1a:	bf00      	nop
      }
      break;
 8003e1c:	e006      	b.n	8003e2c <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	4a07      	ldr	r2, [pc, #28]	@ (8003e40 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003e22:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003e24:	f04f 33ff 	mov.w	r3, #4294967295
 8003e28:	60fb      	str	r3, [r7, #12]
      break;
 8003e2a:	bf00      	nop
  }

  return ret;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	41480000 	.word	0x41480000
 8003e3c:	3fcccccd 	.word	0x3fcccccd
 8003e40:	bf800000 	.word	0xbf800000
 8003e44:	41c80000 	.word	0x41c80000
 8003e48:	42480000 	.word	0x42480000
 8003e4c:	42c80000 	.word	0x42c80000
 8003e50:	43480000 	.word	0x43480000
 8003e54:	43c80000 	.word	0x43c80000
 8003e58:	44480000 	.word	0x44480000
 8003e5c:	44c80000 	.word	0x44c80000

08003e60 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2100      	movs	r1, #0
 8003e70:	ed97 0a00 	vldr	s0, [r7]
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f805 	bl	8003e84 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003e7a:	4603      	mov	r3, r0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003e90:	460b      	mov	r3, r1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d109      	bne.n	8003eb6 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003ea2:	79ba      	ldrb	r2, [r7, #6]
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	ed97 0a02 	vldr	s0, [r7, #8]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f96b 	bl	8004188 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	e008      	b.n	8003ec8 <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003eb6:	79ba      	ldrb	r2, [r7, #6]
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	ed97 0a02 	vldr	s0, [r7, #8]
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 fa7d 	bl	80043c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003ec6:	4603      	mov	r3, r0
  }
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3320      	adds	r3, #32
 8003ee2:	f107 020b 	add.w	r2, r7, #11
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fdc5 	bl	8004a78 <lis2dw12_full_scale_get>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef8:	e027      	b.n	8003f4a <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003efa:	7afb      	ldrb	r3, [r7, #11]
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d81b      	bhi.n	8003f38 <LIS2DW12_ACC_GetFullScale+0x68>
 8003f00:	a201      	add	r2, pc, #4	@ (adr r2, 8003f08 <LIS2DW12_ACC_GetFullScale+0x38>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003f19 	.word	0x08003f19
 8003f0c:	08003f21 	.word	0x08003f21
 8003f10:	08003f29 	.word	0x08003f29
 8003f14:	08003f31 	.word	0x08003f31
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	601a      	str	r2, [r3, #0]
      break;
 8003f1e:	e013      	b.n	8003f48 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	2204      	movs	r2, #4
 8003f24:	601a      	str	r2, [r3, #0]
      break;
 8003f26:	e00f      	b.n	8003f48 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	601a      	str	r2, [r3, #0]
      break;
 8003f2e:	e00b      	b.n	8003f48 <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	601a      	str	r2, [r3, #0]
      break;
 8003f36:	e007      	b.n	8003f48 <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3e:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003f40:	f04f 33ff 	mov.w	r3, #4294967295
 8003f44:	60fb      	str	r3, [r7, #12]
      break;
 8003f46:	bf00      	nop
  }

  return ret;
 8003f48:	68fb      	ldr	r3, [r7, #12]
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop

08003f54 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	dd0b      	ble.n	8003f7c <LIS2DW12_ACC_SetFullScale+0x28>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	dd06      	ble.n	8003f78 <LIS2DW12_ACC_SetFullScale+0x24>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b08      	cmp	r3, #8
 8003f6e:	dc01      	bgt.n	8003f74 <LIS2DW12_ACC_SetFullScale+0x20>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e004      	b.n	8003f7e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f74:	2303      	movs	r3, #3
 8003f76:	e002      	b.n	8003f7e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <LIS2DW12_ACC_SetFullScale+0x2a>
 8003f7c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8003f7e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3320      	adds	r3, #32
 8003f84:	7bfa      	ldrb	r2, [r7, #15]
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fd4f 	bl	8004a2c <lis2dw12_full_scale_set>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8003f94:	f04f 33ff 	mov.w	r3, #4294967295
 8003f98:	e000      	b.n	8003f9c <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3320      	adds	r3, #32
 8003fb6:	f107 020b 	add.w	r2, r7, #11
 8003fba:	4611      	mov	r1, r2
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fb45 	bl	800464c <lis2dw12_power_mode_get>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d002      	beq.n	8003fce <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 8003fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8003fcc:	e068      	b.n	80040a0 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3320      	adds	r3, #32
 8003fd2:	f107 020c 	add.w	r2, r7, #12
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 fd85 	bl	8004ae8 <lis2dw12_acceleration_raw_get>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d002      	beq.n	8003fea <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 8003fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8003fe8:	e05a      	b.n	80040a0 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	2b1b      	cmp	r3, #27
 8003fee:	bf8c      	ite	hi
 8003ff0:	2201      	movhi	r2, #1
 8003ff2:	2200      	movls	r2, #0
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	2a00      	cmp	r2, #0
 8003ff8:	d14d      	bne.n	8004096 <LIS2DW12_ACC_GetAxesRaw+0xf2>
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	409a      	lsls	r2, r3
 8003ffe:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8004002:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8004006:	2b00      	cmp	r3, #0
 8004008:	bf14      	ite	ne
 800400a:	2301      	movne	r3, #1
 800400c:	2300      	moveq	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d124      	bne.n	800405e <LIS2DW12_ACC_GetAxesRaw+0xba>
 8004014:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d037      	beq.n	8004096 <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 8004026:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	da00      	bge.n	8004030 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 800402e:	330f      	adds	r3, #15
 8004030:	111b      	asrs	r3, r3, #4
 8004032:	b21a      	sxth	r2, r3
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 8004038:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800403c:	2b00      	cmp	r3, #0
 800403e:	da00      	bge.n	8004042 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004040:	330f      	adds	r3, #15
 8004042:	111b      	asrs	r3, r3, #4
 8004044:	b21a      	sxth	r2, r3
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800404a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	da00      	bge.n	8004054 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004052:	330f      	adds	r3, #15
 8004054:	111b      	asrs	r3, r3, #4
 8004056:	b21a      	sxth	r2, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	809a      	strh	r2, [r3, #4]
      break;
 800405c:	e01f      	b.n	800409e <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 800405e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	da00      	bge.n	8004068 <LIS2DW12_ACC_GetAxesRaw+0xc4>
 8004066:	3303      	adds	r3, #3
 8004068:	109b      	asrs	r3, r3, #2
 800406a:	b21a      	sxth	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004070:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004074:	2b00      	cmp	r3, #0
 8004076:	da00      	bge.n	800407a <LIS2DW12_ACC_GetAxesRaw+0xd6>
 8004078:	3303      	adds	r3, #3
 800407a:	109b      	asrs	r3, r3, #2
 800407c:	b21a      	sxth	r2, r3
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004082:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	da00      	bge.n	800408c <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800408a:	3303      	adds	r3, #3
 800408c:	109b      	asrs	r3, r3, #2
 800408e:	b21a      	sxth	r2, r3
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	809a      	strh	r2, [r3, #4]
      break;
 8004094:	e003      	b.n	800409e <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 8004096:	f04f 33ff 	mov.w	r3, #4294967295
 800409a:	617b      	str	r3, [r7, #20]
      break;
 800409c:	bf00      	nop
  }

  return ret;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80040b8:	f107 0310 	add.w	r3, r7, #16
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff70 	bl	8003fa4 <LIS2DW12_ACC_GetAxesRaw>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	e03c      	b.n	800414a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80040d0:	f107 030c 	add.w	r3, r7, #12
 80040d4:	4619      	mov	r1, r3
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7ff fc9c 	bl	8003a14 <LIS2DW12_ACC_GetSensitivity>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80040e2:	f04f 33ff 	mov.w	r3, #4294967295
 80040e6:	e030      	b.n	800414a <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80040e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80040f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80040f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004100:	ee17 2a90 	vmov	r2, s15
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 8004108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800410c:	ee07 3a90 	vmov	s15, r3
 8004110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004114:	edd7 7a03 	vldr	s15, [r7, #12]
 8004118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004120:	ee17 2a90 	vmov	r2, s15
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 8004128:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800412c:	ee07 3a90 	vmov	s15, r3
 8004130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004134:	edd7 7a03 	vldr	s15, [r7, #12]
 8004138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800413c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004140:	ee17 2a90 	vmov	r2, s15
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b082      	sub	sp, #8
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
 800415e:	4613      	mov	r3, r2
 8004160:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f103 0020 	add.w	r0, r3, #32
 8004168:	1cba      	adds	r2, r7, #2
 800416a:	78f9      	ldrb	r1, [r7, #3]
 800416c:	2301      	movs	r3, #1
 800416e:	f000 fa07 	bl	8004580 <lis2dw12_write_reg>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 8004178:	f04f 33ff 	mov.w	r3, #4294967295
 800417c:	e000      	b.n	8004180 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	ed87 0a02 	vstr	s0, [r7, #8]
 8004194:	460b      	mov	r3, r1
 8004196:	71fb      	strb	r3, [r7, #7]
 8004198:	4613      	mov	r3, r2
 800419a:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 800419c:	79fb      	ldrb	r3, [r7, #7]
 800419e:	3b01      	subs	r3, #1
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d80b      	bhi.n	80041bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80041a4:	a201      	add	r2, pc, #4	@ (adr r2, 80041ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	08004215 	.word	0x08004215
 80041b4:	08004241 	.word	0x08004241
 80041b8:	0800426d 	.word	0x0800426d
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80041bc:	79bb      	ldrb	r3, [r7, #6]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d002      	beq.n	80041c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80041c2:	2304      	movs	r3, #4
 80041c4:	75fb      	strb	r3, [r7, #23]
          break;
 80041c6:	e002      	b.n	80041ce <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80041c8:	2314      	movs	r3, #20
 80041ca:	75fb      	strb	r3, [r7, #23]
          break;
 80041cc:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80041ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80041d2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80041d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041de:	d400      	bmi.n	80041e2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80041e0:	e05a      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80041e2:	4b6f      	ldr	r3, [pc, #444]	@ (80043a0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80041e4:	60bb      	str	r3, [r7, #8]
      break;
 80041e6:	e057      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80041e8:	79bb      	ldrb	r3, [r7, #6]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d002      	beq.n	80041f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80041ee:	2303      	movs	r3, #3
 80041f0:	75fb      	strb	r3, [r7, #23]
          break;
 80041f2:	e002      	b.n	80041fa <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80041f4:	2313      	movs	r3, #19
 80041f6:	75fb      	strb	r3, [r7, #23]
          break;
 80041f8:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80041fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80041fe:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80043a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004202:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800420a:	dc00      	bgt.n	800420e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 800420c:	e044      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800420e:	4b66      	ldr	r3, [pc, #408]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004210:	60bb      	str	r3, [r7, #8]
      break;
 8004212:	e041      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004214:	79bb      	ldrb	r3, [r7, #6]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d002      	beq.n	8004220 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800421a:	2302      	movs	r3, #2
 800421c:	75fb      	strb	r3, [r7, #23]
          break;
 800421e:	e002      	b.n	8004226 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004220:	2312      	movs	r3, #18
 8004222:	75fb      	strb	r3, [r7, #23]
          break;
 8004224:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004226:	edd7 7a02 	vldr	s15, [r7, #8]
 800422a:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80043a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800422e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004236:	dc00      	bgt.n	800423a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 8004238:	e02e      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800423a:	4b5b      	ldr	r3, [pc, #364]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800423c:	60bb      	str	r3, [r7, #8]
      break;
 800423e:	e02b      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004240:	79bb      	ldrb	r3, [r7, #6]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d002      	beq.n	800424c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 8004246:	2301      	movs	r3, #1
 8004248:	75fb      	strb	r3, [r7, #23]
          break;
 800424a:	e002      	b.n	8004252 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800424c:	2311      	movs	r3, #17
 800424e:	75fb      	strb	r3, [r7, #23]
          break;
 8004250:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004252:	edd7 7a02 	vldr	s15, [r7, #8]
 8004256:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80043a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800425a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004262:	dc00      	bgt.n	8004266 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004264:	e018      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004266:	4b50      	ldr	r3, [pc, #320]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004268:	60bb      	str	r3, [r7, #8]
      break;
 800426a:	e015      	b.n	8004298 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 800426c:	79bb      	ldrb	r3, [r7, #6]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d002      	beq.n	8004278 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]
          break;
 8004276:	e002      	b.n	800427e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004278:	2310      	movs	r3, #16
 800427a:	75fb      	strb	r3, [r7, #23]
          break;
 800427c:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800427e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004282:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80043a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004286:	eef4 7ac7 	vcmpe.f32	s15, s14
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	dc00      	bgt.n	8004292 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004290:	e001      	b.n	8004296 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8004292:	4b45      	ldr	r3, [pc, #276]	@ (80043a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004294:	60bb      	str	r3, [r7, #8]
      break;
 8004296:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 8004298:	edd7 7a02 	vldr	s15, [r7, #8]
 800429c:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80043ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80042a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a8:	d801      	bhi.n	80042ae <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80042aa:	2301      	movs	r3, #1
 80042ac:	e04d      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80042b2:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80042b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042be:	d801      	bhi.n	80042c4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e042      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042c8:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80042cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d4:	d801      	bhi.n	80042da <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80042d6:	2303      	movs	r3, #3
 80042d8:	e037      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042da:	edd7 7a02 	vldr	s15, [r7, #8]
 80042de:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80043b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80042e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d801      	bhi.n	80042f0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80042ec:	2304      	movs	r3, #4
 80042ee:	e02c      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80042f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80042f4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80043b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80042f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004300:	d801      	bhi.n	8004306 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004302:	2305      	movs	r3, #5
 8004304:	e021      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004306:	edd7 7a02 	vldr	s15, [r7, #8]
 800430a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80043a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800430e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d801      	bhi.n	800431c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 8004318:	2306      	movs	r3, #6
 800431a:	e016      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800431c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004320:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80043b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004324:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432c:	d801      	bhi.n	8004332 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 800432e:	2307      	movs	r3, #7
 8004330:	e00b      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004332:	edd7 7a02 	vldr	s15, [r7, #8]
 8004336:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80043bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800433a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800433e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004342:	d801      	bhi.n	8004348 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004344:	2308      	movs	r3, #8
 8004346:	e000      	b.n	800434a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004348:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800434a:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	3320      	adds	r3, #32
 8004350:	7dba      	ldrb	r2, [r7, #22]
 8004352:	4611      	mov	r1, r2
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa33 	bl	80047c0 <lis2dw12_data_rate_set>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	d002      	beq.n	8004366 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004360:	f04f 33ff 	mov.w	r3, #4294967295
 8004364:	e018      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	3320      	adds	r3, #32
 800436a:	7dfa      	ldrb	r2, [r7, #23]
 800436c:	4611      	mov	r1, r2
 800436e:	4618      	mov	r0, r3
 8004370:	f000 f91e 	bl	80045b0 <lis2dw12_power_mode_set>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e00b      	b.n	8004398 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	79fa      	ldrb	r2, [r7, #7]
 800438a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	79ba      	ldrb	r2, [r7, #6]
 8004392:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	41480000 	.word	0x41480000
 80043a4:	43480000 	.word	0x43480000
 80043a8:	43480000 	.word	0x43480000
 80043ac:	3fcccccd 	.word	0x3fcccccd
 80043b0:	42480000 	.word	0x42480000
 80043b4:	42c80000 	.word	0x42c80000
 80043b8:	43c80000 	.word	0x43c80000
 80043bc:	44480000 	.word	0x44480000

080043c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80043cc:	460b      	mov	r3, r1
 80043ce:	71fb      	strb	r3, [r7, #7]
 80043d0:	4613      	mov	r3, r2
 80043d2:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	79fa      	ldrb	r2, [r7, #7]
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	79ba      	ldrb	r2, [r7, #6]
 80043e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80043e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80043ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f4:	d801      	bhi.n	80043fa <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80043f6:	4b2d      	ldr	r3, [pc, #180]	@ (80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80043f8:	e04d      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80043fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80043fe:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440a:	d801      	bhi.n	8004410 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 800440c:	4b28      	ldr	r3, [pc, #160]	@ (80044b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 800440e:	e042      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004410:	edd7 7a02 	vldr	s15, [r7, #8]
 8004414:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8004418:	eef4 7ac7 	vcmpe.f32	s15, s14
 800441c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004420:	d801      	bhi.n	8004426 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004422:	4b24      	ldr	r3, [pc, #144]	@ (80044b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004424:	e037      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 8004426:	edd7 7a02 	vldr	s15, [r7, #8]
 800442a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80044b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 800442e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004436:	d801      	bhi.n	800443c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 8004438:	4b20      	ldr	r3, [pc, #128]	@ (80044bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800443a:	e02c      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 800443c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004440:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80044c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444c:	d801      	bhi.n	8004452 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 800444e:	4b1d      	ldr	r3, [pc, #116]	@ (80044c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004450:	e021      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004452:	edd7 7a02 	vldr	s15, [r7, #8]
 8004456:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80044c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800445a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800445e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004462:	d801      	bhi.n	8004468 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004464:	4b19      	ldr	r3, [pc, #100]	@ (80044cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 8004466:	e016      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 8004468:	edd7 7a02 	vldr	s15, [r7, #8]
 800446c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80044d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	d801      	bhi.n	800447e <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800447a:	4b16      	ldr	r3, [pc, #88]	@ (80044d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 800447c:	e00b      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 800447e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004482:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80044d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 8004486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	d801      	bhi.n	8004494 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004490:	4b12      	ldr	r3, [pc, #72]	@ (80044dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8004492:	e000      	b.n	8004496 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004494:	4b12      	ldr	r3, [pc, #72]	@ (80044e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	3fcccccd 	.word	0x3fcccccd
 80044ac:	3fcccccd 	.word	0x3fcccccd
 80044b0:	41480000 	.word	0x41480000
 80044b4:	41c80000 	.word	0x41c80000
 80044b8:	42480000 	.word	0x42480000
 80044bc:	42480000 	.word	0x42480000
 80044c0:	42c80000 	.word	0x42c80000
 80044c4:	42c80000 	.word	0x42c80000
 80044c8:	43480000 	.word	0x43480000
 80044cc:	43480000 	.word	0x43480000
 80044d0:	43c80000 	.word	0x43c80000
 80044d4:	43c80000 	.word	0x43c80000
 80044d8:	44480000 	.word	0x44480000
 80044dc:	44480000 	.word	0x44480000
 80044e0:	44c80000 	.word	0x44c80000

080044e4 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607a      	str	r2, [r7, #4]
 80044ee:	461a      	mov	r2, r3
 80044f0:	460b      	mov	r3, r1
 80044f2:	72fb      	strb	r3, [r7, #11]
 80044f4:	4613      	mov	r3, r2
 80044f6:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	695c      	ldr	r4, [r3, #20]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	7b1b      	ldrb	r3, [r3, #12]
 8004504:	4618      	mov	r0, r3
 8004506:	7afb      	ldrb	r3, [r7, #11]
 8004508:	b299      	uxth	r1, r3
 800450a:	893b      	ldrh	r3, [r7, #8]
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	47a0      	blx	r4
 8004510:	4603      	mov	r3, r0
}
 8004512:	4618      	mov	r0, r3
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bd90      	pop	{r4, r7, pc}

0800451a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800451a:	b590      	push	{r4, r7, lr}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	461a      	mov	r2, r3
 8004526:	460b      	mov	r3, r1
 8004528:	72fb      	strb	r3, [r7, #11]
 800452a:	4613      	mov	r3, r2
 800452c:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	691c      	ldr	r4, [r3, #16]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	7b1b      	ldrb	r3, [r3, #12]
 800453a:	4618      	mov	r0, r3
 800453c:	7afb      	ldrb	r3, [r7, #11]
 800453e:	b299      	uxth	r1, r3
 8004540:	893b      	ldrh	r3, [r7, #8]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	47a0      	blx	r4
 8004546:	4603      	mov	r3, r0
}
 8004548:	4618      	mov	r0, r3
 800454a:	371c      	adds	r7, #28
 800454c:	46bd      	mov	sp, r7
 800454e:	bd90      	pop	{r4, r7, pc}

08004550 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004550:	b590      	push	{r4, r7, lr}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	607a      	str	r2, [r7, #4]
 800455a:	461a      	mov	r2, r3
 800455c:	460b      	mov	r3, r1
 800455e:	72fb      	strb	r3, [r7, #11]
 8004560:	4613      	mov	r3, r2
 8004562:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685c      	ldr	r4, [r3, #4]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68d8      	ldr	r0, [r3, #12]
 800456c:	893b      	ldrh	r3, [r7, #8]
 800456e:	7af9      	ldrb	r1, [r7, #11]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	47a0      	blx	r4
 8004574:	6178      	str	r0, [r7, #20]

  return ret;
 8004576:	697b      	ldr	r3, [r7, #20]
}
 8004578:	4618      	mov	r0, r3
 800457a:	371c      	adds	r7, #28
 800457c:	46bd      	mov	sp, r7
 800457e:	bd90      	pop	{r4, r7, pc}

08004580 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004580:	b590      	push	{r4, r7, lr}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	607a      	str	r2, [r7, #4]
 800458a:	461a      	mov	r2, r3
 800458c:	460b      	mov	r3, r1
 800458e:	72fb      	strb	r3, [r7, #11]
 8004590:	4613      	mov	r3, r2
 8004592:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681c      	ldr	r4, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	68d8      	ldr	r0, [r3, #12]
 800459c:	893b      	ldrh	r3, [r7, #8]
 800459e:	7af9      	ldrb	r1, [r7, #11]
 80045a0:	687a      	ldr	r2, [r7, #4]
 80045a2:	47a0      	blx	r4
 80045a4:	6178      	str	r0, [r7, #20]

  return ret;
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	371c      	adds	r7, #28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd90      	pop	{r4, r7, pc}

080045b0 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	460b      	mov	r3, r1
 80045ba:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045bc:	f107 0210 	add.w	r2, r7, #16
 80045c0:	2301      	movs	r3, #1
 80045c2:	2120      	movs	r1, #32
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ffc3 	bl	8004550 <lis2dw12_read_reg>
 80045ca:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d118      	bne.n	8004604 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80045d2:	78fb      	ldrb	r3, [r7, #3]
 80045d4:	089b      	lsrs	r3, r3, #2
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	7c3b      	ldrb	r3, [r7, #16]
 80045de:	f362 0383 	bfi	r3, r2, #2, #2
 80045e2:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	7c3b      	ldrb	r3, [r7, #16]
 80045ee:	f362 0301 	bfi	r3, r2, #0, #2
 80045f2:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80045f4:	f107 0210 	add.w	r2, r7, #16
 80045f8:	2301      	movs	r3, #1
 80045fa:	2120      	movs	r1, #32
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f7ff ffbf 	bl	8004580 <lis2dw12_write_reg>
 8004602:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d107      	bne.n	800461a <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800460a:	f107 020c 	add.w	r2, r7, #12
 800460e:	2301      	movs	r3, #1
 8004610:	2125      	movs	r1, #37	@ 0x25
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ff9c 	bl	8004550 <lis2dw12_read_reg>
 8004618:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d110      	bne.n	8004642 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	f003 0301 	and.w	r3, r3, #1
 8004628:	b2da      	uxtb	r2, r3
 800462a:	7b3b      	ldrb	r3, [r7, #12]
 800462c:	f362 0382 	bfi	r3, r2, #2, #1
 8004630:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004632:	f107 020c 	add.w	r2, r7, #12
 8004636:	2301      	movs	r3, #1
 8004638:	2125      	movs	r1, #37	@ 0x25
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff ffa0 	bl	8004580 <lis2dw12_write_reg>
 8004640:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004642:	697b      	ldr	r3, [r7, #20]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004656:	f107 0210 	add.w	r2, r7, #16
 800465a:	2301      	movs	r3, #1
 800465c:	2120      	movs	r1, #32
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff ff76 	bl	8004550 <lis2dw12_read_reg>
 8004664:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	f040 80a3 	bne.w	80047b4 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800466e:	f107 020c 	add.w	r2, r7, #12
 8004672:	2301      	movs	r3, #1
 8004674:	2125      	movs	r1, #37	@ 0x25
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff ff6a 	bl	8004550 <lis2dw12_read_reg>
 800467c:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800467e:	7b3b      	ldrb	r3, [r7, #12]
 8004680:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004684:	b2db      	uxtb	r3, r3
 8004686:	011a      	lsls	r2, r3, #4
 8004688:	7c3b      	ldrb	r3, [r7, #16]
 800468a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800468e:	b2db      	uxtb	r3, r3
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004694:	7c3a      	ldrb	r2, [r7, #16]
 8004696:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800469a:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 800469c:	4413      	add	r3, r2
 800469e:	2b1b      	cmp	r3, #27
 80046a0:	f200 8084 	bhi.w	80047ac <lis2dw12_power_mode_get+0x160>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <lis2dw12_power_mode_get+0x60>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	0800473d 	.word	0x0800473d
 80046b0:	08004735 	.word	0x08004735
 80046b4:	0800472d 	.word	0x0800472d
 80046b8:	08004725 	.word	0x08004725
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	080047ad 	.word	0x080047ad
 80046c4:	080047ad 	.word	0x080047ad
 80046c8:	080047ad 	.word	0x080047ad
 80046cc:	0800475d 	.word	0x0800475d
 80046d0:	08004755 	.word	0x08004755
 80046d4:	0800474d 	.word	0x0800474d
 80046d8:	08004745 	.word	0x08004745
 80046dc:	080047ad 	.word	0x080047ad
 80046e0:	080047ad 	.word	0x080047ad
 80046e4:	080047ad 	.word	0x080047ad
 80046e8:	080047ad 	.word	0x080047ad
 80046ec:	08004785 	.word	0x08004785
 80046f0:	0800477d 	.word	0x0800477d
 80046f4:	08004775 	.word	0x08004775
 80046f8:	0800476d 	.word	0x0800476d
 80046fc:	08004765 	.word	0x08004765
 8004700:	080047ad 	.word	0x080047ad
 8004704:	080047ad 	.word	0x080047ad
 8004708:	080047ad 	.word	0x080047ad
 800470c:	080047a5 	.word	0x080047a5
 8004710:	0800479d 	.word	0x0800479d
 8004714:	08004795 	.word	0x08004795
 8004718:	0800478d 	.word	0x0800478d
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	2204      	movs	r2, #4
 8004720:	701a      	strb	r2, [r3, #0]
        break;
 8004722:	e047      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2203      	movs	r2, #3
 8004728:	701a      	strb	r2, [r3, #0]
        break;
 800472a:	e043      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2202      	movs	r2, #2
 8004730:	701a      	strb	r2, [r3, #0]
        break;
 8004732:	e03f      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
        break;
 800473a:	e03b      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	2200      	movs	r2, #0
 8004740:	701a      	strb	r2, [r3, #0]
        break;
 8004742:	e037      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	220b      	movs	r2, #11
 8004748:	701a      	strb	r2, [r3, #0]
        break;
 800474a:	e033      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	220a      	movs	r2, #10
 8004750:	701a      	strb	r2, [r3, #0]
        break;
 8004752:	e02f      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2209      	movs	r2, #9
 8004758:	701a      	strb	r2, [r3, #0]
        break;
 800475a:	e02b      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2208      	movs	r2, #8
 8004760:	701a      	strb	r2, [r3, #0]
        break;
 8004762:	e027      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	2214      	movs	r2, #20
 8004768:	701a      	strb	r2, [r3, #0]
        break;
 800476a:	e023      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2213      	movs	r2, #19
 8004770:	701a      	strb	r2, [r3, #0]
        break;
 8004772:	e01f      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	2212      	movs	r2, #18
 8004778:	701a      	strb	r2, [r3, #0]
        break;
 800477a:	e01b      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2211      	movs	r2, #17
 8004780:	701a      	strb	r2, [r3, #0]
        break;
 8004782:	e017      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2210      	movs	r2, #16
 8004788:	701a      	strb	r2, [r3, #0]
        break;
 800478a:	e013      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	221b      	movs	r2, #27
 8004790:	701a      	strb	r2, [r3, #0]
        break;
 8004792:	e00f      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	221a      	movs	r2, #26
 8004798:	701a      	strb	r2, [r3, #0]
        break;
 800479a:	e00b      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2219      	movs	r2, #25
 80047a0:	701a      	strb	r2, [r3, #0]
        break;
 80047a2:	e007      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	2218      	movs	r2, #24
 80047a8:	701a      	strb	r2, [r3, #0]
        break;
 80047aa:	e003      	b.n	80047b4 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2204      	movs	r2, #4
 80047b0:	701a      	strb	r2, [r3, #0]
        break;
 80047b2:	bf00      	nop
    }
  }

  return ret;
 80047b4:	697b      	ldr	r3, [r7, #20]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3718      	adds	r7, #24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop

080047c0 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047cc:	f107 0210 	add.w	r2, r7, #16
 80047d0:	2301      	movs	r3, #1
 80047d2:	2120      	movs	r1, #32
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff febb 	bl	8004550 <lis2dw12_read_reg>
 80047da:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10f      	bne.n	8004802 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	7c3b      	ldrb	r3, [r7, #16]
 80047ec:	f362 1307 	bfi	r3, r2, #4, #4
 80047f0:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80047f2:	f107 0210 	add.w	r2, r7, #16
 80047f6:	2301      	movs	r3, #1
 80047f8:	2120      	movs	r1, #32
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7ff fec0 	bl	8004580 <lis2dw12_write_reg>
 8004800:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d107      	bne.n	8004818 <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004808:	f107 020c 	add.w	r2, r7, #12
 800480c:	2301      	movs	r3, #1
 800480e:	2122      	movs	r1, #34	@ 0x22
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff fe9d 	bl	8004550 <lis2dw12_read_reg>
 8004816:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d110      	bne.n	8004840 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 800481e:	78fb      	ldrb	r3, [r7, #3]
 8004820:	091b      	lsrs	r3, r3, #4
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	b2da      	uxtb	r2, r3
 8004828:	7b3b      	ldrb	r3, [r7, #12]
 800482a:	f362 0301 	bfi	r3, r2, #0, #2
 800482e:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004830:	f107 020c 	add.w	r2, r7, #12
 8004834:	2301      	movs	r3, #1
 8004836:	2122      	movs	r1, #34	@ 0x22
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff fea1 	bl	8004580 <lis2dw12_write_reg>
 800483e:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004840:	697b      	ldr	r3, [r7, #20]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3718      	adds	r7, #24
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 8004856:	f107 0210 	add.w	r2, r7, #16
 800485a:	2301      	movs	r3, #1
 800485c:	2120      	movs	r1, #32
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7ff fe76 	bl	8004550 <lis2dw12_read_reg>
 8004864:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	f040 80b3 	bne.w	80049d4 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800486e:	f107 020c 	add.w	r2, r7, #12
 8004872:	2301      	movs	r3, #1
 8004874:	2122      	movs	r1, #34	@ 0x22
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7ff fe6a 	bl	8004550 <lis2dw12_read_reg>
 800487c:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 800487e:	7b3b      	ldrb	r3, [r7, #12]
 8004880:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004884:	b2db      	uxtb	r3, r3
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	7c3a      	ldrb	r2, [r7, #16]
 800488a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	4413      	add	r3, r2
 8004892:	2b32      	cmp	r3, #50	@ 0x32
 8004894:	f200 809a 	bhi.w	80049cc <lis2dw12_data_rate_get+0x180>
 8004898:	a201      	add	r2, pc, #4	@ (adr r2, 80048a0 <lis2dw12_data_rate_get+0x54>)
 800489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489e:	bf00      	nop
 80048a0:	0800496d 	.word	0x0800496d
 80048a4:	08004975 	.word	0x08004975
 80048a8:	0800497d 	.word	0x0800497d
 80048ac:	08004985 	.word	0x08004985
 80048b0:	0800498d 	.word	0x0800498d
 80048b4:	08004995 	.word	0x08004995
 80048b8:	0800499d 	.word	0x0800499d
 80048bc:	080049a5 	.word	0x080049a5
 80048c0:	080049ad 	.word	0x080049ad
 80048c4:	080049b5 	.word	0x080049b5
 80048c8:	080049cd 	.word	0x080049cd
 80048cc:	080049cd 	.word	0x080049cd
 80048d0:	080049cd 	.word	0x080049cd
 80048d4:	080049cd 	.word	0x080049cd
 80048d8:	080049cd 	.word	0x080049cd
 80048dc:	080049cd 	.word	0x080049cd
 80048e0:	080049cd 	.word	0x080049cd
 80048e4:	080049cd 	.word	0x080049cd
 80048e8:	080049c5 	.word	0x080049c5
 80048ec:	080049cd 	.word	0x080049cd
 80048f0:	080049cd 	.word	0x080049cd
 80048f4:	080049cd 	.word	0x080049cd
 80048f8:	080049cd 	.word	0x080049cd
 80048fc:	080049cd 	.word	0x080049cd
 8004900:	080049cd 	.word	0x080049cd
 8004904:	080049cd 	.word	0x080049cd
 8004908:	080049cd 	.word	0x080049cd
 800490c:	080049cd 	.word	0x080049cd
 8004910:	080049cd 	.word	0x080049cd
 8004914:	080049cd 	.word	0x080049cd
 8004918:	080049cd 	.word	0x080049cd
 800491c:	080049cd 	.word	0x080049cd
 8004920:	080049cd 	.word	0x080049cd
 8004924:	080049cd 	.word	0x080049cd
 8004928:	080049cd 	.word	0x080049cd
 800492c:	080049cd 	.word	0x080049cd
 8004930:	080049cd 	.word	0x080049cd
 8004934:	080049cd 	.word	0x080049cd
 8004938:	080049cd 	.word	0x080049cd
 800493c:	080049cd 	.word	0x080049cd
 8004940:	080049cd 	.word	0x080049cd
 8004944:	080049cd 	.word	0x080049cd
 8004948:	080049cd 	.word	0x080049cd
 800494c:	080049cd 	.word	0x080049cd
 8004950:	080049cd 	.word	0x080049cd
 8004954:	080049cd 	.word	0x080049cd
 8004958:	080049cd 	.word	0x080049cd
 800495c:	080049cd 	.word	0x080049cd
 8004960:	080049cd 	.word	0x080049cd
 8004964:	080049cd 	.word	0x080049cd
 8004968:	080049bd 	.word	0x080049bd
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	701a      	strb	r2, [r3, #0]
        break;
 8004972:	e02f      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	2201      	movs	r2, #1
 8004978:	701a      	strb	r2, [r3, #0]
        break;
 800497a:	e02b      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2202      	movs	r2, #2
 8004980:	701a      	strb	r2, [r3, #0]
        break;
 8004982:	e027      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	2203      	movs	r2, #3
 8004988:	701a      	strb	r2, [r3, #0]
        break;
 800498a:	e023      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	2204      	movs	r2, #4
 8004990:	701a      	strb	r2, [r3, #0]
        break;
 8004992:	e01f      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	2205      	movs	r2, #5
 8004998:	701a      	strb	r2, [r3, #0]
        break;
 800499a:	e01b      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2206      	movs	r2, #6
 80049a0:	701a      	strb	r2, [r3, #0]
        break;
 80049a2:	e017      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	2207      	movs	r2, #7
 80049a8:	701a      	strb	r2, [r3, #0]
        break;
 80049aa:	e013      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2208      	movs	r2, #8
 80049b0:	701a      	strb	r2, [r3, #0]
        break;
 80049b2:	e00f      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2209      	movs	r2, #9
 80049b8:	701a      	strb	r2, [r3, #0]
        break;
 80049ba:	e00b      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	2232      	movs	r2, #50	@ 0x32
 80049c0:	701a      	strb	r2, [r3, #0]
        break;
 80049c2:	e007      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	2212      	movs	r2, #18
 80049c8:	701a      	strb	r2, [r3, #0]
        break;
 80049ca:	e003      	b.n	80049d4 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	2200      	movs	r2, #0
 80049d0:	701a      	strb	r2, [r3, #0]
        break;
 80049d2:	bf00      	nop
    }
  }

  return ret;
 80049d4:	697b      	ldr	r3, [r7, #20]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
 80049de:	bf00      	nop

080049e0 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 80049ec:	f107 0208 	add.w	r2, r7, #8
 80049f0:	2301      	movs	r3, #1
 80049f2:	2121      	movs	r1, #33	@ 0x21
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7ff fdab 	bl	8004550 <lis2dw12_read_reg>
 80049fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d10f      	bne.n	8004a22 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	7a3b      	ldrb	r3, [r7, #8]
 8004a0c:	f362 03c3 	bfi	r3, r2, #3, #1
 8004a10:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004a12:	f107 0208 	add.w	r2, r7, #8
 8004a16:	2301      	movs	r3, #1
 8004a18:	2121      	movs	r1, #33	@ 0x21
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7ff fdb0 	bl	8004580 <lis2dw12_write_reg>
 8004a20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a22:	68fb      	ldr	r3, [r7, #12]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}

08004a2c <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a38:	f107 0208 	add.w	r2, r7, #8
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	2125      	movs	r1, #37	@ 0x25
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f7ff fd85 	bl	8004550 <lis2dw12_read_reg>
 8004a46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10f      	bne.n	8004a6e <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004a4e:	78fb      	ldrb	r3, [r7, #3]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	7a3b      	ldrb	r3, [r7, #8]
 8004a58:	f362 1305 	bfi	r3, r2, #4, #2
 8004a5c:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a5e:	f107 0208 	add.w	r2, r7, #8
 8004a62:	2301      	movs	r3, #1
 8004a64:	2125      	movs	r1, #37	@ 0x25
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7ff fd8a 	bl	8004580 <lis2dw12_write_reg>
 8004a6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004a82:	f107 0208 	add.w	r2, r7, #8
 8004a86:	2301      	movs	r3, #1
 8004a88:	2125      	movs	r1, #37	@ 0x25
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fd60 	bl	8004550 <lis2dw12_read_reg>
 8004a90:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004a92:	7a3b      	ldrb	r3, [r7, #8]
 8004a94:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81a      	bhi.n	8004ad4 <lis2dw12_full_scale_get+0x5c>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <lis2dw12_full_scale_get+0x2c>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004abd 	.word	0x08004abd
 8004aac:	08004ac5 	.word	0x08004ac5
 8004ab0:	08004acd 	.word	0x08004acd
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
      break;
 8004aba:	e00f      	b.n	8004adc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	701a      	strb	r2, [r3, #0]
      break;
 8004ac2:	e00b      	b.n	8004adc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	701a      	strb	r2, [r3, #0]
      break;
 8004aca:	e007      	b.n	8004adc <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2203      	movs	r2, #3
 8004ad0:	701a      	strb	r2, [r3, #0]
      break;
 8004ad2:	e003      	b.n	8004adc <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
      break;
 8004ada:	bf00      	nop
  }

  return ret;
 8004adc:	68fb      	ldr	r3, [r7, #12]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop

08004ae8 <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004af2:	f107 020c 	add.w	r2, r7, #12
 8004af6:	2306      	movs	r3, #6
 8004af8:	2128      	movs	r1, #40	@ 0x28
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7ff fd28 	bl	8004550 <lis2dw12_read_reg>
 8004b00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004b02:	7b7b      	ldrb	r3, [r7, #13]
 8004b04:	b21a      	sxth	r2, r3
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	7b3a      	ldrb	r2, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	b21a      	sxth	r2, r3
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004b22:	7bfa      	ldrb	r2, [r7, #15]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	3302      	adds	r3, #2
 8004b28:	b212      	sxth	r2, r2
 8004b2a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	3302      	adds	r3, #2
 8004b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	021b      	lsls	r3, r3, #8
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	7bba      	ldrb	r2, [r7, #14]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	3302      	adds	r3, #2
 8004b44:	b212      	sxth	r2, r2
 8004b46:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004b48:	7c7a      	ldrb	r2, [r7, #17]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	b212      	sxth	r2, r2
 8004b50:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	3304      	adds	r3, #4
 8004b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	7c3a      	ldrb	r2, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	3304      	adds	r3, #4
 8004b6a:	b212      	sxth	r2, r2
 8004b6c:	801a      	strh	r2, [r3, #0]

  return ret;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004b82:	2301      	movs	r3, #1
 8004b84:	683a      	ldr	r2, [r7, #0]
 8004b86:	210f      	movs	r1, #15
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7ff fce1 	bl	8004550 <lis2dw12_read_reg>
 8004b8e:	60f8      	str	r0, [r7, #12]

  return ret;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004ba6:	f107 0208 	add.w	r2, r7, #8
 8004baa:	2301      	movs	r3, #1
 8004bac:	2121      	movs	r1, #33	@ 0x21
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fcce 	bl	8004550 <lis2dw12_read_reg>
 8004bb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10f      	bne.n	8004bdc <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004bbc:	78fb      	ldrb	r3, [r7, #3]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	7a3b      	ldrb	r3, [r7, #8]
 8004bc6:	f362 0382 	bfi	r3, r2, #2, #1
 8004bca:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004bcc:	f107 0208 	add.w	r2, r7, #8
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2121      	movs	r1, #33	@ 0x21
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fcd3 	bl	8004580 <lis2dw12_write_reg>
 8004bda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3710      	adds	r7, #16
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}

08004be6 <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004bf2:	f107 0208 	add.w	r2, r7, #8
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	212e      	movs	r1, #46	@ 0x2e
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fca8 	bl	8004550 <lis2dw12_read_reg>
 8004c00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10f      	bne.n	8004c28 <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	7a3b      	ldrb	r3, [r7, #8]
 8004c12:	f362 1347 	bfi	r3, r2, #5, #3
 8004c16:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004c18:	f107 0208 	add.w	r2, r7, #8
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	212e      	movs	r1, #46	@ 0x2e
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7ff fcad 	bl	8004580 <lis2dw12_write_reg>
 8004c26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004c28:	68fb      	ldr	r3, [r7, #12]
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004c48:	f04f 33ff 	mov.w	r3, #4294967295
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e067      	b.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	689a      	ldr	r2, [r3, #8]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	7b1a      	ldrb	r2, [r3, #12]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	699a      	ldr	r2, [r3, #24]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a28      	ldr	r2, [pc, #160]	@ (8004d2c <LIS2MDL_RegisterBusIO+0xf8>)
 8004c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a27      	ldr	r2, [pc, #156]	@ (8004d30 <LIS2MDL_RegisterBusIO+0xfc>)
 8004c92:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	69da      	ldr	r2, [r3, #28]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d103      	bne.n	8004cb2 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	60fb      	str	r3, [r7, #12]
 8004cb0:	e036      	b.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4798      	blx	r3
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	e02c      	b.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d028      	beq.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d123      	bne.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10d      	bne.n	8004cfc <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004ce0:	2334      	movs	r3, #52	@ 0x34
 8004ce2:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004ce4:	7afb      	ldrb	r3, [r7, #11]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	2162      	movs	r1, #98	@ 0x62
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 fb18 	bl	8005320 <LIS2MDL_Write_Reg>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d014      	beq.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8004cfa:	e012      	b.n	8004d22 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d101      	bne.n	8004d08 <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	e00c      	b.n	8004d22 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3320      	adds	r3, #32
 8004d0c:	2101      	movs	r1, #1
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 ff69 	bl	8005be6 <lis2mdl_i2c_interface_set>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d1e:	e000      	b.n	8004d22 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004d20:	68fb      	ldr	r3, [r7, #12]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	08005377 	.word	0x08005377
 8004d30:	080053f9 	.word	0x080053f9

08004d34 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b03      	cmp	r3, #3
 8004d42:	d144      	bne.n	8004dce <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	2301      	movs	r3, #1
 8004d4a:	2162      	movs	r1, #98	@ 0x62
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f000 fb94 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004d58:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5c:	e06c      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004d5e:	f107 020c 	add.w	r2, r7, #12
 8004d62:	2301      	movs	r3, #1
 8004d64:	2160      	movs	r1, #96	@ 0x60
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fb87 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d002      	beq.n	8004d78 <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295
 8004d76:	e05f      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004d78:	7a3b      	ldrb	r3, [r7, #8]
 8004d7a:	f043 0310 	orr.w	r3, r3, #16
 8004d7e:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004d80:	7a3b      	ldrb	r3, [r7, #8]
 8004d82:	f36f 0341 	bfc	r3, #1, #1
 8004d86:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004d88:	7b3b      	ldrb	r3, [r7, #12]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f362 0301 	bfi	r3, r2, #0, #2
 8004d90:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004d92:	7b3b      	ldrb	r3, [r7, #12]
 8004d94:	f043 030c 	orr.w	r3, r3, #12
 8004d98:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004d9a:	f107 0208 	add.w	r2, r7, #8
 8004d9e:	2301      	movs	r3, #1
 8004da0:	2162      	movs	r1, #98	@ 0x62
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fca8 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	e041      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004db4:	f107 020c 	add.w	r2, r7, #12
 8004db8:	2301      	movs	r3, #1
 8004dba:	2160      	movs	r1, #96	@ 0x60
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fc9b 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d032      	beq.n	8004e2e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dcc:	e034      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3320      	adds	r3, #32
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 fe61 	bl	8005a9c <lis2mdl_block_data_update_set>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004de0:	f04f 33ff 	mov.w	r3, #4294967295
 8004de4:	e028      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3320      	adds	r3, #32
 8004dea:	2102      	movs	r1, #2
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 fdd1 	bl	8005994 <lis2mdl_operating_mode_set>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d002      	beq.n	8004dfe <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004df8:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfc:	e01c      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3320      	adds	r3, #32
 8004e02:	2103      	movs	r1, #3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fdeb 	bl	80059e0 <lis2mdl_data_rate_set>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	e010      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3320      	adds	r3, #32
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 febc 	bl	8005b9a <lis2mdl_self_test_set>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295
 8004e2c:	e004      	b.n	8004e38 <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f000 f8a5 	bl	8004f98 <LIS2MDL_MAG_Disable>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004e54:	f04f 33ff 	mov.w	r3, #4294967295
 8004e58:	e004      	b.n	8004e64 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004e62:	2300      	movs	r3, #0
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	d10b      	bne.n	8004e96 <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004e7e:	2301      	movs	r3, #1
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	214f      	movs	r1, #79	@ 0x4f
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 faf8 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d00e      	beq.n	8004eae <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e00c      	b.n	8004eb0 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	3320      	adds	r3, #32
 8004e9a:	6839      	ldr	r1, [r7, #0]
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fe6b 	bl	8005b78 <lis2mdl_device_id_get>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d002      	beq.n	8004eae <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8004eac:	e000      	b.n	8004eb0 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2200      	movs	r2, #0
 8004ede:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	2232      	movs	r2, #50	@ 0x32
 8004eea:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	4a04      	ldr	r2, [pc, #16]	@ (8004f10 <LIS2MDL_GetCapabilities+0x58>)
 8004f00:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	42c80000 	.word	0x42c80000

08004f14 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	e032      	b.n	8004f90 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	2b03      	cmp	r3, #3
 8004f30:	d11d      	bne.n	8004f6e <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f32:	f107 020c 	add.w	r2, r7, #12
 8004f36:	2301      	movs	r3, #1
 8004f38:	2160      	movs	r1, #96	@ 0x60
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fa9d 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 8004f46:	f04f 33ff 	mov.w	r3, #4294967295
 8004f4a:	e021      	b.n	8004f90 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8004f4c:	7b3b      	ldrb	r3, [r7, #12]
 8004f4e:	f36f 0301 	bfc	r3, #0, #2
 8004f52:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004f54:	f107 020c 	add.w	r2, r7, #12
 8004f58:	2301      	movs	r3, #1
 8004f5a:	2160      	movs	r1, #96	@ 0x60
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fbcb 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00e      	beq.n	8004f86 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6c:	e010      	b.n	8004f90 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	3320      	adds	r3, #32
 8004f72:	2100      	movs	r1, #0
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fd0d 	bl	8005994 <lis2mdl_operating_mode_set>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d002      	beq.n	8004f86 <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8004f80:	f04f 33ff 	mov.w	r3, #4294967295
 8004f84:	e004      	b.n	8004f90 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e033      	b.n	8005016 <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	2b03      	cmp	r3, #3
 8004fb4:	d11e      	bne.n	8004ff4 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004fb6:	f107 020c 	add.w	r2, r7, #12
 8004fba:	2301      	movs	r3, #1
 8004fbc:	2160      	movs	r1, #96	@ 0x60
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa5b 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d002      	beq.n	8004fd0 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295
 8004fce:	e022      	b.n	8005016 <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004fd0:	7b3b      	ldrb	r3, [r7, #12]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f362 0301 	bfi	r3, r2, #0, #2
 8004fd8:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004fda:	f107 020c 	add.w	r2, r7, #12
 8004fde:	2301      	movs	r3, #1
 8004fe0:	2160      	movs	r1, #96	@ 0x60
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fb88 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00e      	beq.n	800500c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	e010      	b.n	8005016 <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	3320      	adds	r3, #32
 8004ff8:	2102      	movs	r1, #2
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fcca 	bl	8005994 <lis2mdl_operating_mode_set>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d002      	beq.n	800500c <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	e004      	b.n	8005016 <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
 8005026:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 800502e:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	3320      	adds	r3, #32
 8005052:	f107 020b 	add.w	r2, r7, #11
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f000 fce7 	bl	8005a2c <lis2mdl_data_rate_get>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d002      	beq.n	800506a <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005064:	f04f 33ff 	mov.w	r3, #4294967295
 8005068:	e023      	b.n	80050b2 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800506a:	7afb      	ldrb	r3, [r7, #11]
 800506c:	2b03      	cmp	r3, #3
 800506e:	d81b      	bhi.n	80050a8 <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005070:	a201      	add	r2, pc, #4	@ (adr r2, 8005078 <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005076:	bf00      	nop
 8005078:	08005089 	.word	0x08005089
 800507c:	08005091 	.word	0x08005091
 8005080:	08005099 	.word	0x08005099
 8005084:	080050a1 	.word	0x080050a1
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	4a0c      	ldr	r2, [pc, #48]	@ (80050bc <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 800508c:	601a      	str	r2, [r3, #0]
      break;
 800508e:	e00f      	b.n	80050b0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	4a0b      	ldr	r2, [pc, #44]	@ (80050c0 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005094:	601a      	str	r2, [r3, #0]
      break;
 8005096:	e00b      	b.n	80050b0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	4a0a      	ldr	r2, [pc, #40]	@ (80050c4 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 800509c:	601a      	str	r2, [r3, #0]
      break;
 800509e:	e007      	b.n	80050b0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80050a4:	601a      	str	r2, [r3, #0]
      break;
 80050a6:	e003      	b.n	80050b0 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80050a8:	f04f 33ff 	mov.w	r3, #4294967295
 80050ac:	60fb      	str	r3, [r7, #12]
      break;
 80050ae:	bf00      	nop
  }

  return ret;
 80050b0:	68fb      	ldr	r3, [r7, #12]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	41200000 	.word	0x41200000
 80050c0:	41a00000 	.word	0x41a00000
 80050c4:	42480000 	.word	0x42480000
 80050c8:	42c80000 	.word	0x42c80000

080050cc <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80050d8:	edd7 7a00 	vldr	s15, [r7]
 80050dc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80050e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050e8:	d801      	bhi.n	80050ee <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80050ea:	2300      	movs	r3, #0
 80050ec:	e016      	b.n	800511c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80050ee:	edd7 7a00 	vldr	s15, [r7]
 80050f2:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80050f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80050fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050fe:	d801      	bhi.n	8005104 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005100:	2301      	movs	r3, #1
 8005102:	e00b      	b.n	800511c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005104:	edd7 7a00 	vldr	s15, [r7]
 8005108:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005190 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 800510c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005114:	d801      	bhi.n	800511a <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 8005116:	2302      	movs	r3, #2
 8005118:	e000      	b.n	800511c <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800511a:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 800511c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b03      	cmp	r3, #3
 8005124:	d121      	bne.n	800516a <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005126:	f107 020c 	add.w	r2, r7, #12
 800512a:	2301      	movs	r3, #1
 800512c:	2160      	movs	r1, #96	@ 0x60
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9a3 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800513a:	f04f 33ff 	mov.w	r3, #4294967295
 800513e:	e022      	b.n	8005186 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	b2da      	uxtb	r2, r3
 8005148:	7b3b      	ldrb	r3, [r7, #12]
 800514a:	f362 0383 	bfi	r3, r2, #2, #2
 800514e:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005150:	f107 020c 	add.w	r2, r7, #12
 8005154:	2301      	movs	r3, #1
 8005156:	2160      	movs	r1, #96	@ 0x60
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 facd 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d00f      	beq.n	8005184 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005164:	f04f 33ff 	mov.w	r3, #4294967295
 8005168:	e00d      	b.n	8005186 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3320      	adds	r3, #32
 800516e:	7bfa      	ldrb	r2, [r7, #15]
 8005170:	4611      	mov	r1, r2
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fc34 	bl	80059e0 <lis2mdl_data_rate_set>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d002      	beq.n	8005184 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 800517e:	f04f 33ff 	mov.w	r3, #4294967295
 8005182:	e000      	b.n	8005186 <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	42480000 	.word	0x42480000

08005194 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2232      	movs	r2, #50	@ 0x32
 80051a2:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b083      	sub	sp, #12
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b084      	sub	sp, #16
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3320      	adds	r3, #32
 80051d8:	f107 0208 	add.w	r2, r7, #8
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fc82 	bl	8005ae8 <lis2mdl_magnetic_raw_get>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d002      	beq.n	80051f0 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80051ea:	f04f 33ff 	mov.w	r3, #4294967295
 80051ee:	e00c      	b.n	800520a <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80051f0:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80051f8:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005200:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}

08005212 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005212:	b580      	push	{r7, lr}
 8005214:	b088      	sub	sp, #32
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
 800521a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b03      	cmp	r3, #3
 8005222:	d134      	bne.n	800528e <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005224:	f107 0218 	add.w	r2, r7, #24
 8005228:	2306      	movs	r3, #6
 800522a:	2168      	movs	r1, #104	@ 0x68
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f924 	bl	800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d002      	beq.n	800523e <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 8005238:	f04f 33ff 	mov.w	r3, #4294967295
 800523c:	e06c      	b.n	8005318 <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 800523e:	7e7b      	ldrb	r3, [r7, #25]
 8005240:	b21b      	sxth	r3, r3
 8005242:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005244:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005248:	b29b      	uxth	r3, r3
 800524a:	021b      	lsls	r3, r3, #8
 800524c:	b29b      	uxth	r3, r3
 800524e:	7e3a      	ldrb	r2, [r7, #24]
 8005250:	4413      	add	r3, r2
 8005252:	b29b      	uxth	r3, r3
 8005254:	b21b      	sxth	r3, r3
 8005256:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 8005258:	7efb      	ldrb	r3, [r7, #27]
 800525a:	b21b      	sxth	r3, r3
 800525c:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 800525e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005262:	b29b      	uxth	r3, r3
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	b29b      	uxth	r3, r3
 8005268:	7eba      	ldrb	r2, [r7, #26]
 800526a:	4413      	add	r3, r2
 800526c:	b29b      	uxth	r3, r3
 800526e:	b21b      	sxth	r3, r3
 8005270:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005272:	7f7b      	ldrb	r3, [r7, #29]
 8005274:	b21b      	sxth	r3, r3
 8005276:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 8005278:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800527c:	b29b      	uxth	r3, r3
 800527e:	021b      	lsls	r3, r3, #8
 8005280:	b29b      	uxth	r3, r3
 8005282:	7f3a      	ldrb	r2, [r7, #28]
 8005284:	4413      	add	r3, r2
 8005286:	b29b      	uxth	r3, r3
 8005288:	b21b      	sxth	r3, r3
 800528a:	82bb      	strh	r3, [r7, #20]
 800528c:	e00d      	b.n	80052aa <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	3320      	adds	r3, #32
 8005292:	f107 0210 	add.w	r2, r7, #16
 8005296:	4611      	mov	r1, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f000 fc25 	bl	8005ae8 <lis2mdl_magnetic_raw_get>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80052a4:	f04f 33ff 	mov.w	r3, #4294967295
 80052a8:	e036      	b.n	8005318 <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80052aa:	f107 030c 	add.w	r3, r7, #12
 80052ae:	4619      	mov	r1, r3
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff feb4 	bl	800501e <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80052b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80052ba:	ee07 3a90 	vmov	s15, r3
 80052be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80052c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ce:	ee17 2a90 	vmov	r2, s15
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80052d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80052da:	ee07 3a90 	vmov	s15, r3
 80052de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80052e2:	edd7 7a03 	vldr	s15, [r7, #12]
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052ee:	ee17 2a90 	vmov	r2, s15
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80052f6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005302:	edd7 7a03 	vldr	s15, [r7, #12]
 8005306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800530a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800530e:	ee17 2a90 	vmov	r2, s15
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3720      	adds	r7, #32
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
 800532c:	4613      	mov	r3, r2
 800532e:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b03      	cmp	r3, #3
 8005336:	d10b      	bne.n	8005350 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 8005338:	1cba      	adds	r2, r7, #2
 800533a:	78f9      	ldrb	r1, [r7, #3]
 800533c:	2301      	movs	r3, #1
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f9da 	bl	80056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d010      	beq.n	800536c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800534a:	f04f 33ff 	mov.w	r3, #4294967295
 800534e:	e00e      	b.n	800536e <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f103 0020 	add.w	r0, r3, #32
 8005356:	1cba      	adds	r2, r7, #2
 8005358:	78f9      	ldrb	r1, [r7, #3]
 800535a:	2301      	movs	r3, #1
 800535c:	f000 fb02 	bl	8005964 <lis2mdl_write_reg>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d002      	beq.n	800536c <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 8005366:	f04f 33ff 	mov.w	r3, #4294967295
 800536a:	e000      	b.n	800536e <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8005376:	b590      	push	{r4, r7, lr}
 8005378:	b087      	sub	sp, #28
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	607a      	str	r2, [r7, #4]
 8005380:	461a      	mov	r2, r3
 8005382:	460b      	mov	r3, r1
 8005384:	72fb      	strb	r3, [r7, #11]
 8005386:	4613      	mov	r3, r2
 8005388:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10e      	bne.n	80053b4 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	695c      	ldr	r4, [r3, #20]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	7b1b      	ldrb	r3, [r3, #12]
 800539e:	4618      	mov	r0, r3
 80053a0:	7afb      	ldrb	r3, [r7, #11]
 80053a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	4619      	mov	r1, r3
 80053aa:	893b      	ldrh	r3, [r7, #8]
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	47a0      	blx	r4
 80053b0:	4603      	mov	r3, r0
 80053b2:	e01d      	b.n	80053f0 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d10b      	bne.n	80053d4 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	695c      	ldr	r4, [r3, #20]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	7b1b      	ldrb	r3, [r3, #12]
 80053c4:	4618      	mov	r0, r3
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	b299      	uxth	r1, r3
 80053ca:	893b      	ldrh	r3, [r7, #8]
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	47a0      	blx	r4
 80053d0:	4603      	mov	r3, r0
 80053d2:	e00d      	b.n	80053f0 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	695c      	ldr	r4, [r3, #20]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	7b1b      	ldrb	r3, [r3, #12]
 80053dc:	4618      	mov	r0, r3
 80053de:	7afb      	ldrb	r3, [r7, #11]
 80053e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	4619      	mov	r1, r3
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	47a0      	blx	r4
 80053ee:	4603      	mov	r3, r0
  }
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	371c      	adds	r7, #28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd90      	pop	{r4, r7, pc}

080053f8 <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80053f8:	b590      	push	{r4, r7, lr}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	461a      	mov	r2, r3
 8005404:	460b      	mov	r3, r1
 8005406:	72fb      	strb	r3, [r7, #11]
 8005408:	4613      	mov	r3, r2
 800540a:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10e      	bne.n	8005436 <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	691c      	ldr	r4, [r3, #16]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	7b1b      	ldrb	r3, [r3, #12]
 8005420:	4618      	mov	r0, r3
 8005422:	7afb      	ldrb	r3, [r7, #11]
 8005424:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4619      	mov	r1, r3
 800542c:	893b      	ldrh	r3, [r7, #8]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	47a0      	blx	r4
 8005432:	4603      	mov	r3, r0
 8005434:	e01d      	b.n	8005472 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b03      	cmp	r3, #3
 800543c:	d10b      	bne.n	8005456 <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	691c      	ldr	r4, [r3, #16]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	7b1b      	ldrb	r3, [r3, #12]
 8005446:	4618      	mov	r0, r3
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	b299      	uxth	r1, r3
 800544c:	893b      	ldrh	r3, [r7, #8]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	47a0      	blx	r4
 8005452:	4603      	mov	r3, r0
 8005454:	e00d      	b.n	8005472 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	691c      	ldr	r4, [r3, #16]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	7b1b      	ldrb	r3, [r3, #12]
 800545e:	4618      	mov	r0, r3
 8005460:	7afb      	ldrb	r3, [r7, #11]
 8005462:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005466:	b2db      	uxtb	r3, r3
 8005468:	4619      	mov	r1, r3
 800546a:	893b      	ldrh	r3, [r7, #8]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	47a0      	blx	r4
 8005470:	4603      	mov	r3, r0
  }
}
 8005472:	4618      	mov	r0, r3
 8005474:	371c      	adds	r7, #28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd90      	pop	{r4, r7, pc}

0800547a <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	@ 0x30
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	461a      	mov	r2, r3
 8005486:	460b      	mov	r3, r1
 8005488:	72fb      	strb	r3, [r7, #11]
 800548a:	4613      	mov	r3, r2
 800548c:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800548e:	2301      	movs	r3, #1
 8005490:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005494:	2340      	movs	r3, #64	@ 0x40
 8005496:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800549a:	2300      	movs	r3, #0
 800549c:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80054a0:	233d      	movs	r3, #61	@ 0x3d
 80054a2:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80054a4:	2315      	movs	r3, #21
 80054a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80054aa:	2316      	movs	r3, #22
 80054ac:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80054b0:	2317      	movs	r3, #23
 80054b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80054b6:	2314      	movs	r3, #20
 80054b8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80054bc:	2344      	movs	r3, #68	@ 0x44
 80054be:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80054c0:	2302      	movs	r3, #2
 80054c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80054c6:	2339      	movs	r3, #57	@ 0x39
 80054c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80054d2:	2329      	movs	r3, #41	@ 0x29
 80054d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80054d8:	231e      	movs	r3, #30
 80054da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80054ea:	2310      	movs	r3, #16
 80054ec:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80054f0:	2300      	movs	r3, #0
 80054f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80054f6:	2340      	movs	r3, #64	@ 0x40
 80054f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f103 0020 	add.w	r0, r3, #32
 8005502:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005506:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800550a:	2301      	movs	r3, #1
 800550c:	f000 fa2a 	bl	8005964 <lis2mdl_write_reg>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 8005516:	f04f 33ff 	mov.w	r3, #4294967295
 800551a:	e0e9      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f103 0020 	add.w	r0, r3, #32
 8005522:	f107 021f 	add.w	r2, r7, #31
 8005526:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800552a:	2301      	movs	r3, #1
 800552c:	f000 fa1a 	bl	8005964 <lis2mdl_write_reg>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d002      	beq.n	800553c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 8005536:	f04f 33ff 	mov.w	r3, #4294967295
 800553a:	e0d9      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f103 0020 	add.w	r0, r3, #32
 8005542:	f107 020b 	add.w	r2, r7, #11
 8005546:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800554a:	2301      	movs	r3, #1
 800554c:	f000 fa0a 	bl	8005964 <lis2mdl_write_reg>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d002      	beq.n	800555c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	e0c9      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f103 0020 	add.w	r0, r3, #32
 8005562:	f107 021d 	add.w	r2, r7, #29
 8005566:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800556a:	2301      	movs	r3, #1
 800556c:	f000 f9fa 	bl	8005964 <lis2mdl_write_reg>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	e0b9      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f103 0020 	add.w	r0, r3, #32
 8005582:	f107 021e 	add.w	r2, r7, #30
 8005586:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800558a:	2301      	movs	r3, #1
 800558c:	f000 f9ea 	bl	8005964 <lis2mdl_write_reg>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 8005596:	f04f 33ff 	mov.w	r3, #4294967295
 800559a:	e0a9      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f103 0020 	add.w	r0, r3, #32
 80055a2:	f107 0220 	add.w	r2, r7, #32
 80055a6:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80055aa:	2301      	movs	r3, #1
 80055ac:	f000 f9da 	bl	8005964 <lis2mdl_write_reg>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80055b6:	f04f 33ff 	mov.w	r3, #4294967295
 80055ba:	e099      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f103 0020 	add.w	r0, r3, #32
 80055c2:	f107 021c 	add.w	r2, r7, #28
 80055c6:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80055ca:	2301      	movs	r3, #1
 80055cc:	f000 f9b2 	bl	8005934 <lis2mdl_read_reg>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80055d6:	f04f 33ff 	mov.w	r3, #4294967295
 80055da:	e089      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80055dc:	7f3b      	ldrb	r3, [r7, #28]
 80055de:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d102      	bne.n	80055ec <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80055e6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80055ea:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f103 0020 	add.w	r0, r3, #32
 80055f2:	f107 021c 	add.w	r2, r7, #28
 80055f6:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80055fa:	2301      	movs	r3, #1
 80055fc:	f000 f9b2 	bl	8005964 <lis2mdl_write_reg>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d002      	beq.n	800560c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 8005606:	f04f 33ff 	mov.w	r3, #4294967295
 800560a:	e071      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f103 0020 	add.w	r0, r3, #32
 8005612:	f107 0214 	add.w	r2, r7, #20
 8005616:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800561a:	2306      	movs	r3, #6
 800561c:	f000 f98a 	bl	8005934 <lis2mdl_read_reg>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d002      	beq.n	800562c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 8005626:	f04f 33ff 	mov.w	r3, #4294967295
 800562a:	e061      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f103 0020 	add.w	r0, r3, #32
 8005632:	f107 021b 	add.w	r2, r7, #27
 8005636:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800563a:	2301      	movs	r3, #1
 800563c:	f000 f97a 	bl	8005934 <lis2mdl_read_reg>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 8005646:	f04f 33ff 	mov.w	r3, #4294967295
 800564a:	e051      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 800564c:	7efa      	ldrb	r2, [r7, #27]
 800564e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005652:	4013      	ands	r3, r2
 8005654:	b2db      	uxtb	r3, r3
 8005656:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800565a:	429a      	cmp	r2, r3
 800565c:	d1e6      	bne.n	800562c <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f103 0020 	add.w	r0, r3, #32
 8005664:	f107 021b 	add.w	r2, r7, #27
 8005668:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 800566c:	2301      	movs	r3, #1
 800566e:	f000 f961 	bl	8005934 <lis2mdl_read_reg>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 8005678:	f04f 33ff 	mov.w	r3, #4294967295
 800567c:	e038      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 800567e:	7efa      	ldrb	r2, [r7, #27]
 8005680:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005684:	4013      	ands	r3, r2
 8005686:	b2db      	uxtb	r3, r3
 8005688:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800568c:	429a      	cmp	r2, r3
 800568e:	d1e6      	bne.n	800565e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f103 0020 	add.w	r0, r3, #32
 8005696:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800569a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800569e:	2301      	movs	r3, #1
 80056a0:	f000 f960 	bl	8005964 <lis2mdl_write_reg>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80056aa:	f04f 33ff 	mov.w	r3, #4294967295
 80056ae:	e01f      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f103 0020 	add.w	r0, r3, #32
 80056b6:	893b      	ldrh	r3, [r7, #8]
 80056b8:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	f000 f939 	bl	8005934 <lis2mdl_read_reg>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	e010      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f103 0020 	add.w	r0, r3, #32
 80056d4:	f107 0220 	add.w	r2, r7, #32
 80056d8:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80056dc:	2301      	movs	r3, #1
 80056de:	f000 f941 	bl	8005964 <lis2mdl_write_reg>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d002      	beq.n	80056ee <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80056e8:	f04f 33ff 	mov.w	r3, #4294967295
 80056ec:	e000      	b.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3730      	adds	r7, #48	@ 0x30
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
 8005708:	4613      	mov	r3, r2
 800570a:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 800570c:	2301      	movs	r3, #1
 800570e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005712:	2340      	movs	r3, #64	@ 0x40
 8005714:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 8005718:	2300      	movs	r3, #0
 800571a:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 800571e:	233c      	movs	r3, #60	@ 0x3c
 8005720:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005722:	2315      	movs	r3, #21
 8005724:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 8005728:	2316      	movs	r3, #22
 800572a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 800572e:	2317      	movs	r3, #23
 8005730:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005734:	2300      	movs	r3, #0
 8005736:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 8005738:	2314      	movs	r3, #20
 800573a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 800573e:	2344      	movs	r3, #68	@ 0x44
 8005740:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005742:	2339      	movs	r3, #57	@ 0x39
 8005744:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 8005748:	2380      	movs	r3, #128	@ 0x80
 800574a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 800574e:	2329      	movs	r3, #41	@ 0x29
 8005750:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005754:	231e      	movs	r3, #30
 8005756:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005760:	2310      	movs	r3, #16
 8005762:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 8005766:	2300      	movs	r3, #0
 8005768:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 800576c:	2340      	movs	r3, #64	@ 0x40
 800576e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005772:	230e      	movs	r3, #14
 8005774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f103 0020 	add.w	r0, r3, #32
 800577e:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005782:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005786:	2301      	movs	r3, #1
 8005788:	f000 f8ec 	bl	8005964 <lis2mdl_write_reg>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d002      	beq.n	8005798 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005792:	f04f 33ff 	mov.w	r3, #4294967295
 8005796:	e0c9      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f103 0020 	add.w	r0, r3, #32
 800579e:	f107 021f 	add.w	r2, r7, #31
 80057a2:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80057a6:	2301      	movs	r3, #1
 80057a8:	f000 f8dc 	bl	8005964 <lis2mdl_write_reg>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d002      	beq.n	80057b8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80057b2:	f04f 33ff 	mov.w	r3, #4294967295
 80057b6:	e0b9      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f103 0020 	add.w	r0, r3, #32
 80057be:	f107 020b 	add.w	r2, r7, #11
 80057c2:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80057c6:	2301      	movs	r3, #1
 80057c8:	f000 f8cc 	bl	8005964 <lis2mdl_write_reg>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	e0a9      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f103 0020 	add.w	r0, r3, #32
 80057de:	f107 021e 	add.w	r2, r7, #30
 80057e2:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80057e6:	2301      	movs	r3, #1
 80057e8:	f000 f8bc 	bl	8005964 <lis2mdl_write_reg>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d002      	beq.n	80057f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80057f2:	f04f 33ff 	mov.w	r3, #4294967295
 80057f6:	e099      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f103 0020 	add.w	r0, r3, #32
 80057fe:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005802:	2301      	movs	r3, #1
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	f000 f8ad 	bl	8005964 <lis2mdl_write_reg>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005810:	f04f 33ff 	mov.w	r3, #4294967295
 8005814:	e08a      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f103 0020 	add.w	r0, r3, #32
 800581c:	f107 021d 	add.w	r2, r7, #29
 8005820:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005824:	2301      	movs	r3, #1
 8005826:	f000 f89d 	bl	8005964 <lis2mdl_write_reg>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005830:	f04f 33ff 	mov.w	r3, #4294967295
 8005834:	e07a      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f103 0020 	add.w	r0, r3, #32
 800583c:	f107 0220 	add.w	r2, r7, #32
 8005840:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005844:	2301      	movs	r3, #1
 8005846:	f000 f88d 	bl	8005964 <lis2mdl_write_reg>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d002      	beq.n	8005856 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005850:	f04f 33ff 	mov.w	r3, #4294967295
 8005854:	e06a      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f103 0020 	add.w	r0, r3, #32
 800585c:	f107 021c 	add.w	r2, r7, #28
 8005860:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005864:	2301      	movs	r3, #1
 8005866:	f000 f865 	bl	8005934 <lis2mdl_read_reg>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005870:	f04f 33ff 	mov.w	r3, #4294967295
 8005874:	e05a      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 8005876:	7f3b      	ldrb	r3, [r7, #28]
 8005878:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800587c:	429a      	cmp	r2, r3
 800587e:	d102      	bne.n	8005886 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005880:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005884:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f103 0020 	add.w	r0, r3, #32
 800588c:	f107 021c 	add.w	r2, r7, #28
 8005890:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005894:	2301      	movs	r3, #1
 8005896:	f000 f865 	bl	8005964 <lis2mdl_write_reg>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80058a0:	f04f 33ff 	mov.w	r3, #4294967295
 80058a4:	e042      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f103 0020 	add.w	r0, r3, #32
 80058ac:	f107 0214 	add.w	r2, r7, #20
 80058b0:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80058b4:	2306      	movs	r3, #6
 80058b6:	f000 f83d 	bl	8005934 <lis2mdl_read_reg>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80058c0:	f04f 33ff 	mov.w	r3, #4294967295
 80058c4:	e032      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f103 0020 	add.w	r0, r3, #32
 80058cc:	f107 021b 	add.w	r2, r7, #27
 80058d0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80058d4:	2301      	movs	r3, #1
 80058d6:	f000 f82d 	bl	8005934 <lis2mdl_read_reg>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80058e0:	f04f 33ff 	mov.w	r3, #4294967295
 80058e4:	e022      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80058e6:	7efa      	ldrb	r2, [r7, #27]
 80058e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058ec:	4013      	ands	r3, r2
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d1e6      	bne.n	80058c6 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f103 0020 	add.w	r0, r3, #32
 80058fe:	f107 021b 	add.w	r2, r7, #27
 8005902:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005906:	2301      	movs	r3, #1
 8005908:	f000 f814 	bl	8005934 <lis2mdl_read_reg>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d002      	beq.n	8005918 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005912:	f04f 33ff 	mov.w	r3, #4294967295
 8005916:	e009      	b.n	800592c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005918:	7efa      	ldrb	r2, [r7, #27]
 800591a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800591e:	4013      	ands	r3, r2
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005926:	429a      	cmp	r2, r3
 8005928:	d1e6      	bne.n	80058f8 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3730      	adds	r7, #48	@ 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005934:	b590      	push	{r4, r7, lr}
 8005936:	b087      	sub	sp, #28
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	461a      	mov	r2, r3
 8005940:	460b      	mov	r3, r1
 8005942:	72fb      	strb	r3, [r7, #11]
 8005944:	4613      	mov	r3, r2
 8005946:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685c      	ldr	r4, [r3, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	68d8      	ldr	r0, [r3, #12]
 8005950:	893b      	ldrh	r3, [r7, #8]
 8005952:	7af9      	ldrb	r1, [r7, #11]
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	47a0      	blx	r4
 8005958:	6178      	str	r0, [r7, #20]

  return ret;
 800595a:	697b      	ldr	r3, [r7, #20]
}
 800595c:	4618      	mov	r0, r3
 800595e:	371c      	adds	r7, #28
 8005960:	46bd      	mov	sp, r7
 8005962:	bd90      	pop	{r4, r7, pc}

08005964 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	461a      	mov	r2, r3
 8005970:	460b      	mov	r3, r1
 8005972:	72fb      	strb	r3, [r7, #11]
 8005974:	4613      	mov	r3, r2
 8005976:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681c      	ldr	r4, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68d8      	ldr	r0, [r3, #12]
 8005980:	893b      	ldrh	r3, [r7, #8]
 8005982:	7af9      	ldrb	r1, [r7, #11]
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	47a0      	blx	r4
 8005988:	6178      	str	r0, [r7, #20]

  return ret;
 800598a:	697b      	ldr	r3, [r7, #20]
}
 800598c:	4618      	mov	r0, r3
 800598e:	371c      	adds	r7, #28
 8005990:	46bd      	mov	sp, r7
 8005992:	bd90      	pop	{r4, r7, pc}

08005994 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	460b      	mov	r3, r1
 800599e:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80059a0:	f107 0208 	add.w	r2, r7, #8
 80059a4:	2301      	movs	r3, #1
 80059a6:	2160      	movs	r1, #96	@ 0x60
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f7ff ffc3 	bl	8005934 <lis2mdl_read_reg>
 80059ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10f      	bne.n	80059d6 <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	7a3b      	ldrb	r3, [r7, #8]
 80059c0:	f362 0301 	bfi	r3, r2, #0, #2
 80059c4:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80059c6:	f107 0208 	add.w	r2, r7, #8
 80059ca:	2301      	movs	r3, #1
 80059cc:	2160      	movs	r1, #96	@ 0x60
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f7ff ffc8 	bl	8005964 <lis2mdl_write_reg>
 80059d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80059d6:	68fb      	ldr	r3, [r7, #12]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3710      	adds	r7, #16
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b084      	sub	sp, #16
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	460b      	mov	r3, r1
 80059ea:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 80059ec:	f107 0208 	add.w	r2, r7, #8
 80059f0:	2301      	movs	r3, #1
 80059f2:	2160      	movs	r1, #96	@ 0x60
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff ff9d 	bl	8005934 <lis2mdl_read_reg>
 80059fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10f      	bne.n	8005a22 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005a02:	78fb      	ldrb	r3, [r7, #3]
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	b2da      	uxtb	r2, r3
 8005a0a:	7a3b      	ldrb	r3, [r7, #8]
 8005a0c:	f362 0383 	bfi	r3, r2, #2, #2
 8005a10:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a12:	f107 0208 	add.w	r2, r7, #8
 8005a16:	2301      	movs	r3, #1
 8005a18:	2160      	movs	r1, #96	@ 0x60
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ffa2 	bl	8005964 <lis2mdl_write_reg>
 8005a20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005a22:	68fb      	ldr	r3, [r7, #12]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005a36:	f107 0208 	add.w	r2, r7, #8
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	2160      	movs	r1, #96	@ 0x60
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff78 	bl	8005934 <lis2mdl_read_reg>
 8005a44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005a46:	7a3b      	ldrb	r3, [r7, #8]
 8005a48:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b03      	cmp	r3, #3
 8005a50:	d81a      	bhi.n	8005a88 <lis2mdl_data_rate_get+0x5c>
 8005a52:	a201      	add	r2, pc, #4	@ (adr r2, 8005a58 <lis2mdl_data_rate_get+0x2c>)
 8005a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a58:	08005a69 	.word	0x08005a69
 8005a5c:	08005a71 	.word	0x08005a71
 8005a60:	08005a79 	.word	0x08005a79
 8005a64:	08005a81 	.word	0x08005a81
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	701a      	strb	r2, [r3, #0]
      break;
 8005a6e:	e00f      	b.n	8005a90 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2201      	movs	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
      break;
 8005a76:	e00b      	b.n	8005a90 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	701a      	strb	r2, [r3, #0]
      break;
 8005a7e:	e007      	b.n	8005a90 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2203      	movs	r2, #3
 8005a84:	701a      	strb	r2, [r3, #0]
      break;
 8005a86:	e003      	b.n	8005a90 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	701a      	strb	r2, [r3, #0]
      break;
 8005a8e:	bf00      	nop
  }

  return ret;
 8005a90:	68fb      	ldr	r3, [r7, #12]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop

08005a9c <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005aa8:	f107 0208 	add.w	r2, r7, #8
 8005aac:	2301      	movs	r3, #1
 8005aae:	2162      	movs	r1, #98	@ 0x62
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ff3f 	bl	8005934 <lis2mdl_read_reg>
 8005ab6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10f      	bne.n	8005ade <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005abe:	78fb      	ldrb	r3, [r7, #3]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	b2da      	uxtb	r2, r3
 8005ac6:	7a3b      	ldrb	r3, [r7, #8]
 8005ac8:	f362 1304 	bfi	r3, r2, #4, #1
 8005acc:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ace:	f107 0208 	add.w	r2, r7, #8
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	2162      	movs	r1, #98	@ 0x62
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7ff ff44 	bl	8005964 <lis2mdl_write_reg>
 8005adc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ade:	68fb      	ldr	r3, [r7, #12]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005af2:	f107 020c 	add.w	r2, r7, #12
 8005af6:	2306      	movs	r3, #6
 8005af8:	2168      	movs	r1, #104	@ 0x68
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7ff ff1a 	bl	8005934 <lis2mdl_read_reg>
 8005b00:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005b02:	7b7b      	ldrb	r3, [r7, #13]
 8005b04:	b21a      	sxth	r2, r3
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	021b      	lsls	r3, r3, #8
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	7b3a      	ldrb	r2, [r7, #12]
 8005b18:	4413      	add	r3, r2
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	b21a      	sxth	r2, r3
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005b22:	7bfa      	ldrb	r2, [r7, #15]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	3302      	adds	r3, #2
 8005b28:	b212      	sxth	r2, r2
 8005b2a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	3302      	adds	r3, #2
 8005b30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	7bba      	ldrb	r2, [r7, #14]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	b29a      	uxth	r2, r3
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	3302      	adds	r3, #2
 8005b44:	b212      	sxth	r2, r2
 8005b46:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005b48:	7c7a      	ldrb	r2, [r7, #17]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	b212      	sxth	r2, r2
 8005b50:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	3304      	adds	r3, #4
 8005b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	7c3a      	ldrb	r2, [r7, #16]
 8005b62:	4413      	add	r3, r2
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	b212      	sxth	r2, r2
 8005b6c:	801a      	strh	r2, [r3, #0]

  return ret;
 8005b6e:	697b      	ldr	r3, [r7, #20]
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	3718      	adds	r7, #24
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005b82:	2301      	movs	r3, #1
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	214f      	movs	r1, #79	@ 0x4f
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff fed3 	bl	8005934 <lis2mdl_read_reg>
 8005b8e:	60f8      	str	r0, [r7, #12]

  return ret;
 8005b90:	68fb      	ldr	r3, [r7, #12]
}
 8005b92:	4618      	mov	r0, r3
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005ba6:	f107 0208 	add.w	r2, r7, #8
 8005baa:	2301      	movs	r3, #1
 8005bac:	2162      	movs	r1, #98	@ 0x62
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff fec0 	bl	8005934 <lis2mdl_read_reg>
 8005bb4:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10f      	bne.n	8005bdc <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	7a3b      	ldrb	r3, [r7, #8]
 8005bc6:	f362 0341 	bfi	r3, r2, #1, #1
 8005bca:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bcc:	f107 0208 	add.w	r2, r7, #8
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	2162      	movs	r1, #98	@ 0x62
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f7ff fec5 	bl	8005964 <lis2mdl_write_reg>
 8005bda:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005be6:	b580      	push	{r7, lr}
 8005be8:	b084      	sub	sp, #16
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
 8005bee:	460b      	mov	r3, r1
 8005bf0:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bf2:	f107 0208 	add.w	r2, r7, #8
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	2162      	movs	r1, #98	@ 0x62
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff fe9a 	bl	8005934 <lis2mdl_read_reg>
 8005c00:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10f      	bne.n	8005c28 <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	7a3b      	ldrb	r3, [r7, #8]
 8005c12:	f362 1345 	bfi	r3, r2, #5, #1
 8005c16:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005c18:	f107 0208 	add.w	r2, r7, #8
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	2162      	movs	r1, #98	@ 0x62
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff fe9f 	bl	8005964 <lis2mdl_write_reg>
 8005c26:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b084      	sub	sp, #16
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d103      	bne.n	8005c50 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005c48:	f04f 33ff 	mov.w	r3, #4294967295
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	e051      	b.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	685a      	ldr	r2, [r3, #4]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689a      	ldr	r2, [r3, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	7b1a      	ldrb	r2, [r3, #12]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8005d00 <LSM6DSO_RegisterBusIO+0xcc>)
 8005c8c:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a1c      	ldr	r2, [pc, #112]	@ (8005d04 <LSM6DSO_RegisterBusIO+0xd0>)
 8005c92:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	69da      	ldr	r2, [r3, #28]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d103      	bne.n	8005cb2 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e020      	b.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4798      	blx	r3
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	e016      	b.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d112      	bne.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10d      	bne.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005cd8:	230c      	movs	r3, #12
 8005cda:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005cdc:	7afb      	ldrb	r3, [r7, #11]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	2112      	movs	r1, #18
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 ff5d 	bl	8006ba2 <LSM6DSO_Write_Reg>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d002      	beq.n	8005cf4 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005cee:	f04f 33ff 	mov.w	r3, #4294967295
 8005cf2:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	08007045 	.word	0x08007045
 8005d04:	0800707b 	.word	0x0800707b

08005d08 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b082      	sub	sp, #8
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d00b      	beq.n	8005d30 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3320      	adds	r3, #32
 8005d1c:	2180      	movs	r1, #128	@ 0x80
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f001 fe84 	bl	8007a2c <lsm6dso_i3c_disable_set>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2e:	e060      	b.n	8005df2 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3320      	adds	r3, #32
 8005d34:	2101      	movs	r1, #1
 8005d36:	4618      	mov	r0, r3
 8005d38:	f001 fe52 	bl	80079e0 <lsm6dso_auto_increment_set>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e054      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	3320      	adds	r3, #32
 8005d4c:	2101      	movs	r1, #1
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fd62 	bl	8007818 <lsm6dso_block_data_update_set>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d002      	beq.n	8005d60 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d5e:	e048      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3320      	adds	r3, #32
 8005d64:	2100      	movs	r1, #0
 8005d66:	4618      	mov	r0, r3
 8005d68:	f001 fea8 	bl	8007abc <lsm6dso_fifo_mode_set>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005d72:	f04f 33ff 	mov.w	r3, #4294967295
 8005d76:	e03c      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2204      	movs	r2, #4
 8005d7c:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3320      	adds	r3, #32
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fa20 	bl	80071cc <lsm6dso_xl_data_rate_set>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e02c      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3320      	adds	r3, #32
 8005d9c:	2100      	movs	r1, #0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f9b6 	bl	8007110 <lsm6dso_xl_full_scale_set>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d002      	beq.n	8005db0 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005daa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dae:	e020      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2204      	movs	r2, #4
 8005db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3320      	adds	r3, #32
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 fbce 	bl	8007560 <lsm6dso_gy_data_rate_set>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	e010      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3320      	adds	r3, #32
 8005dd4:	2106      	movs	r1, #6
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 fb5a 	bl	8007490 <lsm6dso_gy_full_scale_set>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	e004      	b.n	8005df2 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b082      	sub	sp, #8
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f888 	bl	8005f18 <LSM6DSO_ACC_Disable>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e12:	e015      	b.n	8005e40 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fc2e 	bl	8006676 <LSM6DSO_GYRO_Disable>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005e20:	f04f 33ff 	mov.w	r3, #4294967295
 8005e24:	e00c      	b.n	8005e40 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3320      	adds	r3, #32
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f001 fdb0 	bl	80079be <lsm6dso_device_id_get>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	e000      	b.n	8005e6c <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}

08005e74 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	2201      	movs	r2, #1
 8005e88:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	2200      	movs	r2, #0
 8005e94:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005e9c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2210      	movs	r2, #16
 8005ea2:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	4a07      	ldr	r2, [pc, #28]	@ (8005ecc <LSM6DSO_GetCapabilities+0x58>)
 8005eae:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	4a06      	ldr	r2, [pc, #24]	@ (8005ecc <LSM6DSO_GetCapabilities+0x58>)
 8005eb4:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	f04f 0200 	mov.w	r2, #0
 8005ebc:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	45d02000 	.word	0x45d02000

08005ed0 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d101      	bne.n	8005ee6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e014      	b.n	8005f10 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f103 0220 	add.w	r2, r3, #32
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	f001 f969 	bl	80071cc <lsm6dso_xl_data_rate_set>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8005f00:	f04f 33ff 	mov.w	r3, #4294967295
 8005f04:	e004      	b.n	8005f10 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d101      	bne.n	8005f2e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e01f      	b.n	8005f6e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f103 0220 	add.w	r2, r3, #32
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3333      	adds	r3, #51	@ 0x33
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4610      	mov	r0, r2
 8005f3c:	f001 fa40 	bl	80073c0 <lsm6dso_xl_data_rate_get>
 8005f40:	4603      	mov	r3, r0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d002      	beq.n	8005f4c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8005f46:	f04f 33ff 	mov.w	r3, #4294967295
 8005f4a:	e010      	b.n	8005f6e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3320      	adds	r3, #32
 8005f50:	2100      	movs	r1, #0
 8005f52:	4618      	mov	r0, r3
 8005f54:	f001 f93a 	bl	80071cc <lsm6dso_xl_data_rate_set>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8005f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f62:	e004      	b.n	8005f6e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3320      	adds	r3, #32
 8005f8a:	f107 020b 	add.w	r2, r7, #11
 8005f8e:	4611      	mov	r1, r2
 8005f90:	4618      	mov	r0, r3
 8005f92:	f001 f8e3 	bl	800715c <lsm6dso_xl_full_scale_get>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8005f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa0:	e023      	b.n	8005fea <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8005fa2:	7afb      	ldrb	r3, [r7, #11]
 8005fa4:	2b03      	cmp	r3, #3
 8005fa6:	d81b      	bhi.n	8005fe0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8005fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb0 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fc1 	.word	0x08005fc1
 8005fb4:	08005fd9 	.word	0x08005fd9
 8005fb8:	08005fc9 	.word	0x08005fc9
 8005fbc:	08005fd1 	.word	0x08005fd1
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8005ff4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8005fc4:	601a      	str	r2, [r3, #0]
      break;
 8005fc6:	e00f      	b.n	8005fe8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	4a0b      	ldr	r2, [pc, #44]	@ (8005ff8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8005fcc:	601a      	str	r2, [r3, #0]
      break;
 8005fce:	e00b      	b.n	8005fe8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8005ffc <LSM6DSO_ACC_GetSensitivity+0x84>)
 8005fd4:	601a      	str	r2, [r3, #0]
      break;
 8005fd6:	e007      	b.n	8005fe8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	4a09      	ldr	r2, [pc, #36]	@ (8006000 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8005fdc:	601a      	str	r2, [r3, #0]
      break;
 8005fde:	e003      	b.n	8005fe8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8005fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe4:	60fb      	str	r3, [r7, #12]
      break;
 8005fe6:	bf00      	nop
  }

  return ret;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	3d79db23 	.word	0x3d79db23
 8005ff8:	3df9db23 	.word	0x3df9db23
 8005ffc:	3e79db23 	.word	0x3e79db23
 8006000:	3ef9db23 	.word	0x3ef9db23

08006004 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3320      	adds	r3, #32
 8006016:	f107 020b 	add.w	r2, r7, #11
 800601a:	4611      	mov	r1, r2
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f9cf 	bl	80073c0 <lsm6dso_xl_data_rate_get>
 8006022:	4603      	mov	r3, r0
 8006024:	2b00      	cmp	r3, #0
 8006026:	d002      	beq.n	800602e <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8006028:	f04f 33ff 	mov.w	r3, #4294967295
 800602c:	e054      	b.n	80060d8 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800602e:	7afb      	ldrb	r3, [r7, #11]
 8006030:	2b0b      	cmp	r3, #11
 8006032:	d84c      	bhi.n	80060ce <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006034:	a201      	add	r2, pc, #4	@ (adr r2, 800603c <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8006036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800603a:	bf00      	nop
 800603c:	0800606d 	.word	0x0800606d
 8006040:	0800607f 	.word	0x0800607f
 8006044:	08006087 	.word	0x08006087
 8006048:	0800608f 	.word	0x0800608f
 800604c:	08006097 	.word	0x08006097
 8006050:	0800609f 	.word	0x0800609f
 8006054:	080060a7 	.word	0x080060a7
 8006058:	080060af 	.word	0x080060af
 800605c:	080060b7 	.word	0x080060b7
 8006060:	080060bf 	.word	0x080060bf
 8006064:	080060c7 	.word	0x080060c7
 8006068:	08006077 	.word	0x08006077
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	f04f 0200 	mov.w	r2, #0
 8006072:	601a      	str	r2, [r3, #0]
      break;
 8006074:	e02f      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	4a19      	ldr	r2, [pc, #100]	@ (80060e0 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800607a:	601a      	str	r2, [r3, #0]
      break;
 800607c:	e02b      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	4a18      	ldr	r2, [pc, #96]	@ (80060e4 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006082:	601a      	str	r2, [r3, #0]
      break;
 8006084:	e027      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	4a17      	ldr	r2, [pc, #92]	@ (80060e8 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800608a:	601a      	str	r2, [r3, #0]
      break;
 800608c:	e023      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	4a16      	ldr	r2, [pc, #88]	@ (80060ec <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006092:	601a      	str	r2, [r3, #0]
      break;
 8006094:	e01f      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	4a15      	ldr	r2, [pc, #84]	@ (80060f0 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800609a:	601a      	str	r2, [r3, #0]
      break;
 800609c:	e01b      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	4a14      	ldr	r2, [pc, #80]	@ (80060f4 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80060a2:	601a      	str	r2, [r3, #0]
      break;
 80060a4:	e017      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	4a13      	ldr	r2, [pc, #76]	@ (80060f8 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80060aa:	601a      	str	r2, [r3, #0]
      break;
 80060ac:	e013      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	4a12      	ldr	r2, [pc, #72]	@ (80060fc <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80060b2:	601a      	str	r2, [r3, #0]
      break;
 80060b4:	e00f      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	4a11      	ldr	r2, [pc, #68]	@ (8006100 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80060ba:	601a      	str	r2, [r3, #0]
      break;
 80060bc:	e00b      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	4a10      	ldr	r2, [pc, #64]	@ (8006104 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80060c2:	601a      	str	r2, [r3, #0]
      break;
 80060c4:	e007      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006108 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80060ca:	601a      	str	r2, [r3, #0]
      break;
 80060cc:	e003      	b.n	80060d6 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80060ce:	f04f 33ff 	mov.w	r3, #4294967295
 80060d2:	60fb      	str	r3, [r7, #12]
      break;
 80060d4:	bf00      	nop
  }

  return ret;
 80060d6:	68fb      	ldr	r3, [r7, #12]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	3fcccccd 	.word	0x3fcccccd
 80060e4:	41480000 	.word	0x41480000
 80060e8:	41d00000 	.word	0x41d00000
 80060ec:	42500000 	.word	0x42500000
 80060f0:	42d00000 	.word	0x42d00000
 80060f4:	43500000 	.word	0x43500000
 80060f8:	43d08000 	.word	0x43d08000
 80060fc:	44504000 	.word	0x44504000
 8006100:	44d06000 	.word	0x44d06000
 8006104:	45505000 	.word	0x45505000
 8006108:	45d05800 	.word	0x45d05800

0800610c <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8006118:	2100      	movs	r1, #0
 800611a:	ed97 0a00 	vldr	s0, [r7]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f806 	bl	8006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006124:	4603      	mov	r3, r0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08c      	sub	sp, #48	@ 0x30
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	ed87 0a02 	vstr	s0, [r7, #8]
 800613c:	460b      	mov	r3, r1
 800613e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006140:	2300      	movs	r3, #0
 8006142:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	2b02      	cmp	r3, #2
 800614c:	f000 80ea 	beq.w	8006324 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006150:	2b02      	cmp	r3, #2
 8006152:	f300 8163 	bgt.w	800641c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800615a:	2b01      	cmp	r3, #1
 800615c:	d074      	beq.n	8006248 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 800615e:	e15d      	b.n	800641c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f103 0020 	add.w	r0, r3, #32
 8006166:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800616a:	2301      	movs	r3, #1
 800616c:	2114      	movs	r1, #20
 800616e:	f000 ff9f 	bl	80070b0 <lsm6dso_read_reg>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d002      	beq.n	800617e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 8006178:	f04f 33ff 	mov.w	r3, #4294967295
 800617c:	e16c      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800617e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006182:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b00      	cmp	r3, #0
 800618a:	d025      	beq.n	80061d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10b      	bne.n	80061ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	3320      	adds	r3, #32
 800619a:	2100      	movs	r1, #0
 800619c:	4618      	mov	r0, r3
 800619e:	f001 f815 	bl	80071cc <lsm6dso_xl_data_rate_set>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80061a8:	f04f 33ff 	mov.w	r3, #4294967295
 80061ac:	e154      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80061ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061b2:	f36f 13c7 	bfc	r3, #7, #1
 80061b6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	f103 0020 	add.w	r0, r3, #32
 80061c0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80061c4:	2301      	movs	r3, #1
 80061c6:	2114      	movs	r1, #20
 80061c8:	f000 ff8a 	bl	80070e0 <lsm6dso_write_reg>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	e13f      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f103 0020 	add.w	r0, r3, #32
 80061de:	f107 0220 	add.w	r2, r7, #32
 80061e2:	2301      	movs	r3, #1
 80061e4:	2115      	movs	r1, #21
 80061e6:	f000 ff63 	bl	80070b0 <lsm6dso_read_reg>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80061f0:	f04f 33ff 	mov.w	r3, #4294967295
 80061f4:	e130      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80061f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	2b00      	cmp	r3, #0
 8006202:	d014      	beq.n	800622e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006204:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006208:	f36f 1304 	bfc	r3, #4, #1
 800620c:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f103 0020 	add.w	r0, r3, #32
 8006216:	f107 0220 	add.w	r2, r7, #32
 800621a:	2301      	movs	r3, #1
 800621c:	2115      	movs	r1, #21
 800621e:	f000 ff5f 	bl	80070e0 <lsm6dso_write_reg>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 8006228:	f04f 33ff 	mov.w	r3, #4294967295
 800622c:	e114      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 800622e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006232:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006236:	eef4 7ac7 	vcmpe.f32	s15, s14
 800623a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623e:	d400      	bmi.n	8006242 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006240:	e0f0      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006242:	4b87      	ldr	r3, [pc, #540]	@ (8006460 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006244:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006246:	e0ed      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f103 0020 	add.w	r0, r3, #32
 800624e:	f107 021c 	add.w	r2, r7, #28
 8006252:	2301      	movs	r3, #1
 8006254:	2114      	movs	r1, #20
 8006256:	f000 ff2b 	bl	80070b0 <lsm6dso_read_reg>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006260:	f04f 33ff 	mov.w	r3, #4294967295
 8006264:	e0f8      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006266:	7f3b      	ldrb	r3, [r7, #28]
 8006268:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	d023      	beq.n	80062ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006278:	2b01      	cmp	r3, #1
 800627a:	d10b      	bne.n	8006294 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3320      	adds	r3, #32
 8006280:	2100      	movs	r1, #0
 8006282:	4618      	mov	r0, r3
 8006284:	f000 ffa2 	bl	80071cc <lsm6dso_xl_data_rate_set>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d002      	beq.n	8006294 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 800628e:	f04f 33ff 	mov.w	r3, #4294967295
 8006292:	e0e1      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006294:	7f3b      	ldrb	r3, [r7, #28]
 8006296:	f36f 13c7 	bfc	r3, #7, #1
 800629a:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f103 0020 	add.w	r0, r3, #32
 80062a2:	f107 021c 	add.w	r2, r7, #28
 80062a6:	2301      	movs	r3, #1
 80062a8:	2114      	movs	r1, #20
 80062aa:	f000 ff19 	bl	80070e0 <lsm6dso_write_reg>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	e0ce      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f103 0020 	add.w	r0, r3, #32
 80062c0:	f107 0218 	add.w	r2, r7, #24
 80062c4:	2301      	movs	r3, #1
 80062c6:	2115      	movs	r1, #21
 80062c8:	f000 fef2 	bl	80070b0 <lsm6dso_read_reg>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d002      	beq.n	80062d8 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	e0bf      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80062d8:	7e3b      	ldrb	r3, [r7, #24]
 80062da:	f003 0310 	and.w	r3, r3, #16
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d112      	bne.n	800630a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80062e4:	7e3b      	ldrb	r3, [r7, #24]
 80062e6:	f043 0310 	orr.w	r3, r3, #16
 80062ea:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f103 0020 	add.w	r0, r3, #32
 80062f2:	f107 0218 	add.w	r2, r7, #24
 80062f6:	2301      	movs	r3, #1
 80062f8:	2115      	movs	r1, #21
 80062fa:	f000 fef1 	bl	80070e0 <lsm6dso_write_reg>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006304:	f04f 33ff 	mov.w	r3, #4294967295
 8006308:	e0a6      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800630a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800630e:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006464 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006312:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800631a:	dc00      	bgt.n	800631e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 800631c:	e082      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800631e:	4b52      	ldr	r3, [pc, #328]	@ (8006468 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006322:	e07f      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f103 0020 	add.w	r0, r3, #32
 800632a:	f107 0210 	add.w	r2, r7, #16
 800632e:	2301      	movs	r3, #1
 8006330:	2115      	movs	r1, #21
 8006332:	f000 febd 	bl	80070b0 <lsm6dso_read_reg>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 800633c:	f04f 33ff 	mov.w	r3, #4294967295
 8006340:	e08a      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006342:	7c3b      	ldrb	r3, [r7, #16]
 8006344:	f003 0310 	and.w	r3, r3, #16
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d012      	beq.n	8006374 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 800634e:	7c3b      	ldrb	r3, [r7, #16]
 8006350:	f36f 1304 	bfc	r3, #4, #1
 8006354:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f103 0020 	add.w	r0, r3, #32
 800635c:	f107 0210 	add.w	r2, r7, #16
 8006360:	2301      	movs	r3, #1
 8006362:	2115      	movs	r1, #21
 8006364:	f000 febc 	bl	80070e0 <lsm6dso_write_reg>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 800636e:	f04f 33ff 	mov.w	r3, #4294967295
 8006372:	e071      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800637a:	2b01      	cmp	r3, #1
 800637c:	d108      	bne.n	8006390 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f979 	bl	8006676 <LSM6DSO_GYRO_Disable>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800638a:	f04f 33ff 	mov.w	r3, #4294967295
 800638e:	e063      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f103 0020 	add.w	r0, r3, #32
 8006396:	f107 0214 	add.w	r2, r7, #20
 800639a:	2301      	movs	r3, #1
 800639c:	2114      	movs	r1, #20
 800639e:	f000 fe87 	bl	80070b0 <lsm6dso_read_reg>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d002      	beq.n	80063ae <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80063a8:	f04f 33ff 	mov.w	r3, #4294967295
 80063ac:	e054      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80063ae:	7d3b      	ldrb	r3, [r7, #20]
 80063b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d123      	bne.n	8006402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10b      	bne.n	80063dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3320      	adds	r3, #32
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fefe 	bl	80071cc <lsm6dso_xl_data_rate_set>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	e03d      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80063dc:	7d3b      	ldrb	r3, [r7, #20]
 80063de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063e2:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f103 0020 	add.w	r0, r3, #32
 80063ea:	f107 0214 	add.w	r2, r7, #20
 80063ee:	2301      	movs	r3, #1
 80063f0:	2114      	movs	r1, #20
 80063f2:	f000 fe75 	bl	80070e0 <lsm6dso_write_reg>
 80063f6:	4603      	mov	r3, r0
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d002      	beq.n	8006402 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	e02a      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006402:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006406:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006464 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800640a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800640e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006412:	dc00      	bgt.n	8006416 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006414:	e006      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006416:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800641a:	e003      	b.n	8006424 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 800641c:	f04f 33ff 	mov.w	r3, #4294967295
 8006420:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006422:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800642a:	d102      	bne.n	8006432 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 800642c:	f04f 33ff 	mov.w	r3, #4294967295
 8006430:	e012      	b.n	8006458 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006438:	2b01      	cmp	r3, #1
 800643a:	d106      	bne.n	800644a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 800643c:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fbc9 	bl	8006bd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8006446:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006448:	e005      	b.n	8006456 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800644a:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 fc5a 	bl	8006d08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006454:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006458:	4618      	mov	r0, r3
 800645a:	3730      	adds	r7, #48	@ 0x30
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	41480000 	.word	0x41480000
 8006464:	43500000 	.word	0x43500000
 8006468:	43500000 	.word	0x43500000

0800646c <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006476:	2300      	movs	r3, #0
 8006478:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	3320      	adds	r3, #32
 800647e:	f107 020b 	add.w	r2, r7, #11
 8006482:	4611      	mov	r1, r2
 8006484:	4618      	mov	r0, r3
 8006486:	f000 fe69 	bl	800715c <lsm6dso_xl_full_scale_get>
 800648a:	4603      	mov	r3, r0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d002      	beq.n	8006496 <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006490:	f04f 33ff 	mov.w	r3, #4294967295
 8006494:	e023      	b.n	80064de <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d81b      	bhi.n	80064d4 <LSM6DSO_ACC_GetFullScale+0x68>
 800649c:	a201      	add	r2, pc, #4	@ (adr r2, 80064a4 <LSM6DSO_ACC_GetFullScale+0x38>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	080064c5 	.word	0x080064c5
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	2202      	movs	r2, #2
 80064b8:	601a      	str	r2, [r3, #0]
      break;
 80064ba:	e00f      	b.n	80064dc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2204      	movs	r2, #4
 80064c0:	601a      	str	r2, [r3, #0]
      break;
 80064c2:	e00b      	b.n	80064dc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	2208      	movs	r2, #8
 80064c8:	601a      	str	r2, [r3, #0]
      break;
 80064ca:	e007      	b.n	80064dc <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2210      	movs	r2, #16
 80064d0:	601a      	str	r2, [r3, #0]
      break;
 80064d2:	e003      	b.n	80064dc <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80064d4:	f04f 33ff 	mov.w	r3, #4294967295
 80064d8:	60fb      	str	r3, [r7, #12]
      break;
 80064da:	bf00      	nop
  }

  return ret;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3710      	adds	r7, #16
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop

080064e8 <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	dd0b      	ble.n	8006510 <LSM6DSO_ACC_SetFullScale+0x28>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	dd06      	ble.n	800650c <LSM6DSO_ACC_SetFullScale+0x24>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b08      	cmp	r3, #8
 8006502:	dc01      	bgt.n	8006508 <LSM6DSO_ACC_SetFullScale+0x20>
 8006504:	2303      	movs	r3, #3
 8006506:	e004      	b.n	8006512 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006508:	2301      	movs	r3, #1
 800650a:	e002      	b.n	8006512 <LSM6DSO_ACC_SetFullScale+0x2a>
 800650c:	2302      	movs	r3, #2
 800650e:	e000      	b.n	8006512 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006510:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006512:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3320      	adds	r3, #32
 8006518:	7bfa      	ldrb	r2, [r7, #15]
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 fdf7 	bl	8007110 <lsm6dso_xl_full_scale_set>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8006528:	f04f 33ff 	mov.w	r3, #4294967295
 800652c:	e000      	b.n	8006530 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3320      	adds	r3, #32
 8006546:	f107 0208 	add.w	r2, r7, #8
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f001 f9d1 	bl	80078f4 <lsm6dso_acceleration_raw_get>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006558:	f04f 33ff 	mov.w	r3, #4294967295
 800655c:	e00c      	b.n	8006578 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 800655e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006566:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 800656e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800658a:	f04f 0300 	mov.w	r3, #0
 800658e:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3320      	adds	r3, #32
 8006594:	f107 0210 	add.w	r2, r7, #16
 8006598:	4611      	mov	r1, r2
 800659a:	4618      	mov	r0, r3
 800659c:	f001 f9aa 	bl	80078f4 <lsm6dso_acceleration_raw_get>
 80065a0:	4603      	mov	r3, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	e03c      	b.n	8006626 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80065ac:	f107 030c 	add.w	r3, r7, #12
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fce0 	bl	8005f78 <LSM6DSO_ACC_GetSensitivity>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d002      	beq.n	80065c4 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80065be:	f04f 33ff 	mov.w	r3, #4294967295
 80065c2:	e030      	b.n	8006626 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80065c4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80065d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065dc:	ee17 2a90 	vmov	r2, s15
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80065e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80065f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065fc:	ee17 2a90 	vmov	r2, s15
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006604:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006608:	ee07 3a90 	vmov	s15, r3
 800660c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006610:	edd7 7a03 	vldr	s15, [r7, #12]
 8006614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800661c:	ee17 2a90 	vmov	r2, s15
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	e014      	b.n	800666e <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f103 0220 	add.w	r2, r3, #32
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006650:	4619      	mov	r1, r3
 8006652:	4610      	mov	r0, r2
 8006654:	f000 ff84 	bl	8007560 <lsm6dso_gy_data_rate_set>
 8006658:	4603      	mov	r3, r0
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800665e:	f04f 33ff 	mov.w	r3, #4294967295
 8006662:	e004      	b.n	800666e <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b082      	sub	sp, #8
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8006688:	2300      	movs	r3, #0
 800668a:	e01f      	b.n	80066cc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f103 0220 	add.w	r2, r3, #32
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	3334      	adds	r3, #52	@ 0x34
 8006696:	4619      	mov	r1, r3
 8006698:	4610      	mov	r0, r2
 800669a:	f001 f85b 	bl	8007754 <lsm6dso_gy_data_rate_get>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d002      	beq.n	80066aa <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295
 80066a8:	e010      	b.n	80066cc <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	3320      	adds	r3, #32
 80066ae:	2100      	movs	r1, #0
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 ff55 	bl	8007560 <lsm6dso_gy_data_rate_set>
 80066b6:	4603      	mov	r3, r0
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d002      	beq.n	80066c2 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80066bc:	f04f 33ff 	mov.w	r3, #4294967295
 80066c0:	e004      	b.n	80066cc <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3708      	adds	r7, #8
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3320      	adds	r3, #32
 80066e6:	f107 020b 	add.w	r2, r7, #11
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f000 fef5 	bl	80074dc <lsm6dso_gy_full_scale_get>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80066f8:	f04f 33ff 	mov.w	r3, #4294967295
 80066fc:	e02d      	b.n	800675a <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 80066fe:	7afb      	ldrb	r3, [r7, #11]
 8006700:	2b06      	cmp	r3, #6
 8006702:	d825      	bhi.n	8006750 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006704:	a201      	add	r2, pc, #4	@ (adr r2, 800670c <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	08006731 	.word	0x08006731
 8006710:	08006729 	.word	0x08006729
 8006714:	08006739 	.word	0x08006739
 8006718:	08006751 	.word	0x08006751
 800671c:	08006741 	.word	0x08006741
 8006720:	08006751 	.word	0x08006751
 8006724:	08006749 	.word	0x08006749
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	4a0e      	ldr	r2, [pc, #56]	@ (8006764 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 800672c:	601a      	str	r2, [r3, #0]
      break;
 800672e:	e013      	b.n	8006758 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	4a0d      	ldr	r2, [pc, #52]	@ (8006768 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006734:	601a      	str	r2, [r3, #0]
      break;
 8006736:	e00f      	b.n	8006758 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	4a0c      	ldr	r2, [pc, #48]	@ (800676c <LSM6DSO_GYRO_GetSensitivity+0x98>)
 800673c:	601a      	str	r2, [r3, #0]
      break;
 800673e:	e00b      	b.n	8006758 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4a0b      	ldr	r2, [pc, #44]	@ (8006770 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006744:	601a      	str	r2, [r3, #0]
      break;
 8006746:	e007      	b.n	8006758 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	4a0a      	ldr	r2, [pc, #40]	@ (8006774 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 800674c:	601a      	str	r2, [r3, #0]
      break;
 800674e:	e003      	b.n	8006758 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006750:	f04f 33ff 	mov.w	r3, #4294967295
 8006754:	60fb      	str	r3, [r7, #12]
      break;
 8006756:	bf00      	nop
  }

  return ret;
 8006758:	68fb      	ldr	r3, [r7, #12]
}
 800675a:	4618      	mov	r0, r3
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	408c0000 	.word	0x408c0000
 8006768:	410c0000 	.word	0x410c0000
 800676c:	418c0000 	.word	0x418c0000
 8006770:	420c0000 	.word	0x420c0000
 8006774:	428c0000 	.word	0x428c0000

08006778 <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	3320      	adds	r3, #32
 800678a:	f107 020b 	add.w	r2, r7, #11
 800678e:	4611      	mov	r1, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 ffdf 	bl	8007754 <lsm6dso_gy_data_rate_get>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800679c:	f04f 33ff 	mov.w	r3, #4294967295
 80067a0:	e04e      	b.n	8006840 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80067a2:	7afb      	ldrb	r3, [r7, #11]
 80067a4:	2b0a      	cmp	r3, #10
 80067a6:	d846      	bhi.n	8006836 <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80067a8:	a201      	add	r2, pc, #4	@ (adr r2, 80067b0 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80067aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ae:	bf00      	nop
 80067b0:	080067dd 	.word	0x080067dd
 80067b4:	080067e7 	.word	0x080067e7
 80067b8:	080067ef 	.word	0x080067ef
 80067bc:	080067f7 	.word	0x080067f7
 80067c0:	080067ff 	.word	0x080067ff
 80067c4:	08006807 	.word	0x08006807
 80067c8:	0800680f 	.word	0x0800680f
 80067cc:	08006817 	.word	0x08006817
 80067d0:	0800681f 	.word	0x0800681f
 80067d4:	08006827 	.word	0x08006827
 80067d8:	0800682f 	.word	0x0800682f
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	f04f 0200 	mov.w	r2, #0
 80067e2:	601a      	str	r2, [r3, #0]
      break;
 80067e4:	e02b      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	4a17      	ldr	r2, [pc, #92]	@ (8006848 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80067ea:	601a      	str	r2, [r3, #0]
      break;
 80067ec:	e027      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	4a16      	ldr	r2, [pc, #88]	@ (800684c <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80067f2:	601a      	str	r2, [r3, #0]
      break;
 80067f4:	e023      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	4a15      	ldr	r2, [pc, #84]	@ (8006850 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80067fa:	601a      	str	r2, [r3, #0]
      break;
 80067fc:	e01f      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	4a14      	ldr	r2, [pc, #80]	@ (8006854 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006802:	601a      	str	r2, [r3, #0]
      break;
 8006804:	e01b      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	4a13      	ldr	r2, [pc, #76]	@ (8006858 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800680a:	601a      	str	r2, [r3, #0]
      break;
 800680c:	e017      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	4a12      	ldr	r2, [pc, #72]	@ (800685c <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006812:	601a      	str	r2, [r3, #0]
      break;
 8006814:	e013      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	4a11      	ldr	r2, [pc, #68]	@ (8006860 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800681a:	601a      	str	r2, [r3, #0]
      break;
 800681c:	e00f      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	4a10      	ldr	r2, [pc, #64]	@ (8006864 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006822:	601a      	str	r2, [r3, #0]
      break;
 8006824:	e00b      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	4a0f      	ldr	r2, [pc, #60]	@ (8006868 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800682a:	601a      	str	r2, [r3, #0]
      break;
 800682c:	e007      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	4a0e      	ldr	r2, [pc, #56]	@ (800686c <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006832:	601a      	str	r2, [r3, #0]
      break;
 8006834:	e003      	b.n	800683e <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 8006836:	f04f 33ff 	mov.w	r3, #4294967295
 800683a:	60fb      	str	r3, [r7, #12]
      break;
 800683c:	bf00      	nop
  }

  return ret;
 800683e:	68fb      	ldr	r3, [r7, #12]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3710      	adds	r7, #16
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	41480000 	.word	0x41480000
 800684c:	41d00000 	.word	0x41d00000
 8006850:	42500000 	.word	0x42500000
 8006854:	42d00000 	.word	0x42d00000
 8006858:	43500000 	.word	0x43500000
 800685c:	43d08000 	.word	0x43d08000
 8006860:	44504000 	.word	0x44504000
 8006864:	44d06000 	.word	0x44d06000
 8006868:	45505000 	.word	0x45505000
 800686c:	45d05800 	.word	0x45d05800

08006870 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 800687c:	2100      	movs	r1, #0
 800687e:	ed97 0a00 	vldr	s0, [r7]
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f806 	bl	8006894 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 8006888:	4603      	mov	r3, r0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3708      	adds	r7, #8
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
	...

08006894 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	ed87 0a02 	vstr	s0, [r7, #8]
 80068a0:	460b      	mov	r3, r1
 80068a2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d002      	beq.n	80068b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d028      	beq.n	8006908 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80068b6:	e05c      	b.n	8006972 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f103 0020 	add.w	r0, r3, #32
 80068be:	f107 0214 	add.w	r2, r7, #20
 80068c2:	2301      	movs	r3, #1
 80068c4:	2116      	movs	r1, #22
 80068c6:	f000 fbf3 	bl	80070b0 <lsm6dso_read_reg>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d002      	beq.n	80068d6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80068d0:	f04f 33ff 	mov.w	r3, #4294967295
 80068d4:	e06c      	b.n	80069b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80068d6:	7d3b      	ldrb	r3, [r7, #20]
 80068d8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d04b      	beq.n	800697a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80068e2:	7d3b      	ldrb	r3, [r7, #20]
 80068e4:	f36f 13c7 	bfc	r3, #7, #1
 80068e8:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f103 0020 	add.w	r0, r3, #32
 80068f0:	f107 0214 	add.w	r2, r7, #20
 80068f4:	2301      	movs	r3, #1
 80068f6:	2116      	movs	r1, #22
 80068f8:	f000 fbf2 	bl	80070e0 <lsm6dso_write_reg>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d03b      	beq.n	800697a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006902:	f04f 33ff 	mov.w	r3, #4294967295
 8006906:	e053      	b.n	80069b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f103 0020 	add.w	r0, r3, #32
 800690e:	f107 0210 	add.w	r2, r7, #16
 8006912:	2301      	movs	r3, #1
 8006914:	2116      	movs	r1, #22
 8006916:	f000 fbcb 	bl	80070b0 <lsm6dso_read_reg>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006920:	f04f 33ff 	mov.w	r3, #4294967295
 8006924:	e044      	b.n	80069b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006926:	7c3b      	ldrb	r3, [r7, #16]
 8006928:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d112      	bne.n	8006958 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006932:	7c3b      	ldrb	r3, [r7, #16]
 8006934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006938:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f103 0020 	add.w	r0, r3, #32
 8006940:	f107 0210 	add.w	r2, r7, #16
 8006944:	2301      	movs	r3, #1
 8006946:	2116      	movs	r1, #22
 8006948:	f000 fbca 	bl	80070e0 <lsm6dso_write_reg>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d002      	beq.n	8006958 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006952:	f04f 33ff 	mov.w	r3, #4294967295
 8006956:	e02b      	b.n	80069b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006958:	edd7 7a06 	vldr	s15, [r7, #24]
 800695c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80069b8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006960:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006968:	dc00      	bgt.n	800696c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 800696a:	e007      	b.n	800697c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 800696c:	4b13      	ldr	r3, [pc, #76]	@ (80069bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e004      	b.n	800697c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006972:	f04f 33ff 	mov.w	r3, #4294967295
 8006976:	61fb      	str	r3, [r7, #28]
      break;
 8006978:	e000      	b.n	800697c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 800697a:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006982:	d102      	bne.n	800698a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	e012      	b.n	80069b0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006990:	2b01      	cmp	r3, #1
 8006992:	d106      	bne.n	80069a2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006994:	ed97 0a06 	vldr	s0, [r7, #24]
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f000 fa45 	bl	8006e28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 800699e:	61f8      	str	r0, [r7, #28]
 80069a0:	e005      	b.n	80069ae <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80069a2:	ed97 0a06 	vldr	s0, [r7, #24]
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f000 faca 	bl	8006f40 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80069ac:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	43500000 	.word	0x43500000
 80069bc:	43500000 	.word	0x43500000

080069c0 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80069ca:	2300      	movs	r3, #0
 80069cc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	3320      	adds	r3, #32
 80069d2:	f107 020b 	add.w	r2, r7, #11
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fd7f 	bl	80074dc <lsm6dso_gy_full_scale_get>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d002      	beq.n	80069ea <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 80069e4:	f04f 33ff 	mov.w	r3, #4294967295
 80069e8:	e030      	b.n	8006a4c <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 80069ea:	7afb      	ldrb	r3, [r7, #11]
 80069ec:	2b06      	cmp	r3, #6
 80069ee:	d828      	bhi.n	8006a42 <LSM6DSO_GYRO_GetFullScale+0x82>
 80069f0:	a201      	add	r2, pc, #4	@ (adr r2, 80069f8 <LSM6DSO_GYRO_GetFullScale+0x38>)
 80069f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f6:	bf00      	nop
 80069f8:	08006a1d 	.word	0x08006a1d
 80069fc:	08006a15 	.word	0x08006a15
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a43 	.word	0x08006a43
 8006a08:	08006a2f 	.word	0x08006a2f
 8006a0c:	08006a43 	.word	0x08006a43
 8006a10:	08006a39 	.word	0x08006a39
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	227d      	movs	r2, #125	@ 0x7d
 8006a18:	601a      	str	r2, [r3, #0]
      break;
 8006a1a:	e016      	b.n	8006a4a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	22fa      	movs	r2, #250	@ 0xfa
 8006a20:	601a      	str	r2, [r3, #0]
      break;
 8006a22:	e012      	b.n	8006a4a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006a2a:	601a      	str	r2, [r3, #0]
      break;
 8006a2c:	e00d      	b.n	8006a4a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006a34:	601a      	str	r2, [r3, #0]
      break;
 8006a36:	e008      	b.n	8006a4a <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006a3e:	601a      	str	r2, [r3, #0]
      break;
 8006a40:	e003      	b.n	8006a4a <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006a42:	f04f 33ff 	mov.w	r3, #4294967295
 8006a46:	60fb      	str	r3, [r7, #12]
      break;
 8006a48:	bf00      	nop
  }

  return ret;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	2b7d      	cmp	r3, #125	@ 0x7d
 8006a62:	dd12      	ble.n	8006a8a <LSM6DSO_GYRO_SetFullScale+0x36>
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2bfa      	cmp	r3, #250	@ 0xfa
 8006a68:	dd0d      	ble.n	8006a86 <LSM6DSO_GYRO_SetFullScale+0x32>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006a70:	dd07      	ble.n	8006a82 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a78:	dc01      	bgt.n	8006a7e <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	e006      	b.n	8006a8c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a7e:	2306      	movs	r3, #6
 8006a80:	e004      	b.n	8006a8c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a82:	2302      	movs	r3, #2
 8006a84:	e002      	b.n	8006a8c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a86:	2300      	movs	r3, #0
 8006a88:	e000      	b.n	8006a8c <LSM6DSO_GYRO_SetFullScale+0x38>
 8006a8a:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006a8c:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3320      	adds	r3, #32
 8006a92:	7bfa      	ldrb	r2, [r7, #15]
 8006a94:	4611      	mov	r1, r2
 8006a96:	4618      	mov	r0, r3
 8006a98:	f000 fcfa 	bl	8007490 <lsm6dso_gy_full_scale_set>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d002      	beq.n	8006aa8 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	e000      	b.n	8006aaa <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3710      	adds	r7, #16
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3320      	adds	r3, #32
 8006ac0:	f107 0208 	add.w	r2, r7, #8
 8006ac4:	4611      	mov	r1, r2
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fecc 	bl	8007864 <lsm6dso_angular_rate_raw_get>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d002      	beq.n	8006ad8 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad6:	e00c      	b.n	8006af2 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006ad8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006ae0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006ae8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}

08006afa <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b086      	sub	sp, #24
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	3320      	adds	r3, #32
 8006b08:	f107 0210 	add.w	r2, r7, #16
 8006b0c:	4611      	mov	r1, r2
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f000 fea8 	bl	8007864 <lsm6dso_angular_rate_raw_get>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d002      	beq.n	8006b20 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b1e:	e03c      	b.n	8006b9a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006b20:	f107 030c 	add.w	r3, r7, #12
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f7ff fdd4 	bl	80066d4 <LSM6DSO_GYRO_GetSensitivity>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d002      	beq.n	8006b38 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006b32:	f04f 33ff 	mov.w	r3, #4294967295
 8006b36:	e030      	b.n	8006b9a <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006b38:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006b3c:	ee07 3a90 	vmov	s15, r3
 8006b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b44:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b50:	ee17 2a90 	vmov	r2, s15
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006b58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b5c:	ee07 3a90 	vmov	s15, r3
 8006b60:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b64:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b70:	ee17 2a90 	vmov	r2, s15
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006b78:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b7c:	ee07 3a90 	vmov	s15, r3
 8006b80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b84:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b90:	ee17 2a90 	vmov	r2, s15
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3718      	adds	r7, #24
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	460b      	mov	r3, r1
 8006bac:	70fb      	strb	r3, [r7, #3]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f103 0020 	add.w	r0, r3, #32
 8006bb8:	1cba      	adds	r2, r7, #2
 8006bba:	78f9      	ldrb	r1, [r7, #3]
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	f000 fa8f 	bl	80070e0 <lsm6dso_write_reg>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bcc:	e000      	b.n	8006bd0 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006be4:	edd7 7a00 	vldr	s15, [r7]
 8006be8:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006ce8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf4:	d801      	bhi.n	8006bfa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006bf6:	230b      	movs	r3, #11
 8006bf8:	e063      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006bfa:	edd7 7a00 	vldr	s15, [r7]
 8006bfe:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c0a:	d801      	bhi.n	8006c10 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e058      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c10:	edd7 7a00 	vldr	s15, [r7]
 8006c14:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c20:	d801      	bhi.n	8006c26 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e04d      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c26:	edd7 7a00 	vldr	s15, [r7]
 8006c2a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006cec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c36:	d801      	bhi.n	8006c3c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e042      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c3c:	edd7 7a00 	vldr	s15, [r7]
 8006c40:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006cf0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c4c:	d801      	bhi.n	8006c52 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006c4e:	2304      	movs	r3, #4
 8006c50:	e037      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c52:	edd7 7a00 	vldr	s15, [r7]
 8006c56:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006cf4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006c5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c62:	d801      	bhi.n	8006c68 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006c64:	2305      	movs	r3, #5
 8006c66:	e02c      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c68:	edd7 7a00 	vldr	s15, [r7]
 8006c6c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006cf8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006c70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c78:	d801      	bhi.n	8006c7e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006c7a:	2306      	movs	r3, #6
 8006c7c:	e021      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c7e:	edd7 7a00 	vldr	s15, [r7]
 8006c82:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006cfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	d801      	bhi.n	8006c94 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006c90:	2307      	movs	r3, #7
 8006c92:	e016      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006c94:	edd7 7a00 	vldr	s15, [r7]
 8006c98:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006d00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca4:	d801      	bhi.n	8006caa <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	e00b      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006caa:	edd7 7a00 	vldr	s15, [r7]
 8006cae:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006d04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cba:	d801      	bhi.n	8006cc0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006cbc:	2309      	movs	r3, #9
 8006cbe:	e000      	b.n	8006cc2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006cc0:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006cc2:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3320      	adds	r3, #32
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f000 fa7d 	bl	80071cc <lsm6dso_xl_data_rate_set>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006cdc:	e000      	b.n	8006ce0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}
 8006ce8:	3fcccccd 	.word	0x3fcccccd
 8006cec:	42500000 	.word	0x42500000
 8006cf0:	42d00000 	.word	0x42d00000
 8006cf4:	43500000 	.word	0x43500000
 8006cf8:	43d08000 	.word	0x43d08000
 8006cfc:	44504000 	.word	0x44504000
 8006d00:	44d06000 	.word	0x44d06000
 8006d04:	45505000 	.word	0x45505000

08006d08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006d14:	edd7 7a00 	vldr	s15, [r7]
 8006d18:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006e08 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d801      	bhi.n	8006d2a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006d26:	230b      	movs	r3, #11
 8006d28:	e063      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d2a:	edd7 7a00 	vldr	s15, [r7]
 8006d2e:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	d801      	bhi.n	8006d40 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e058      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d40:	edd7 7a00 	vldr	s15, [r7]
 8006d44:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d50:	d801      	bhi.n	8006d56 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e04d      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d56:	edd7 7a00 	vldr	s15, [r7]
 8006d5a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	d801      	bhi.n	8006d6c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006d68:	2303      	movs	r3, #3
 8006d6a:	e042      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d6c:	edd7 7a00 	vldr	s15, [r7]
 8006d70:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006e10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d801      	bhi.n	8006d82 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006d7e:	2304      	movs	r3, #4
 8006d80:	e037      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d82:	edd7 7a00 	vldr	s15, [r7]
 8006d86:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006e14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d801      	bhi.n	8006d98 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006d94:	2305      	movs	r3, #5
 8006d96:	e02c      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006d98:	edd7 7a00 	vldr	s15, [r7]
 8006d9c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006e18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da8:	d801      	bhi.n	8006dae <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006daa:	2306      	movs	r3, #6
 8006dac:	e021      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006dae:	edd7 7a00 	vldr	s15, [r7]
 8006db2:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006e1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbe:	d801      	bhi.n	8006dc4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006dc0:	2307      	movs	r3, #7
 8006dc2:	e016      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006dc4:	edd7 7a00 	vldr	s15, [r7]
 8006dc8:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006e20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006dcc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd4:	d801      	bhi.n	8006dda <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006dd6:	2308      	movs	r3, #8
 8006dd8:	e00b      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006dda:	edd7 7a00 	vldr	s15, [r7]
 8006dde:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8006e24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dea:	d801      	bhi.n	8006df0 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006dec:	2309      	movs	r3, #9
 8006dee:	e000      	b.n	8006df2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006df0:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop
 8006e08:	3fcccccd 	.word	0x3fcccccd
 8006e0c:	42500000 	.word	0x42500000
 8006e10:	42d00000 	.word	0x42d00000
 8006e14:	43500000 	.word	0x43500000
 8006e18:	43d08000 	.word	0x43d08000
 8006e1c:	44504000 	.word	0x44504000
 8006e20:	44d06000 	.word	0x44d06000
 8006e24:	45505000 	.word	0x45505000

08006e28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006e34:	edd7 7a00 	vldr	s15, [r7]
 8006e38:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e44:	d801      	bhi.n	8006e4a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006e46:	2301      	movs	r3, #1
 8006e48:	e058      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e4a:	edd7 7a00 	vldr	s15, [r7]
 8006e4e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	d801      	bhi.n	8006e60 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e04d      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e60:	edd7 7a00 	vldr	s15, [r7]
 8006e64:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8006f24 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e70:	d801      	bhi.n	8006e76 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006e72:	2303      	movs	r3, #3
 8006e74:	e042      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e76:	edd7 7a00 	vldr	s15, [r7]
 8006e7a:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006f28 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e86:	d801      	bhi.n	8006e8c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006e88:	2304      	movs	r3, #4
 8006e8a:	e037      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006e8c:	edd7 7a00 	vldr	s15, [r7]
 8006e90:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8006f2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e9c:	d801      	bhi.n	8006ea2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006e9e:	2305      	movs	r3, #5
 8006ea0:	e02c      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ea2:	edd7 7a00 	vldr	s15, [r7]
 8006ea6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006f30 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eb2:	d801      	bhi.n	8006eb8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006eb4:	2306      	movs	r3, #6
 8006eb6:	e021      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006eb8:	edd7 7a00 	vldr	s15, [r7]
 8006ebc:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8006f34 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006ec0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec8:	d801      	bhi.n	8006ece <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006eca:	2307      	movs	r3, #7
 8006ecc:	e016      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ece:	edd7 7a00 	vldr	s15, [r7]
 8006ed2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006f38 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006ed6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	d801      	bhi.n	8006ee4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006ee0:	2308      	movs	r3, #8
 8006ee2:	e00b      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ee4:	edd7 7a00 	vldr	s15, [r7]
 8006ee8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8006f3c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ef4:	d801      	bhi.n	8006efa <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006ef6:	2309      	movs	r3, #9
 8006ef8:	e000      	b.n	8006efc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006efa:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8006efc:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3320      	adds	r3, #32
 8006f02:	7bfa      	ldrb	r2, [r7, #15]
 8006f04:	4611      	mov	r1, r2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fb2a 	bl	8007560 <lsm6dso_gy_data_rate_set>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8006f12:	f04f 33ff 	mov.w	r3, #4294967295
 8006f16:	e000      	b.n	8006f1a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	42500000 	.word	0x42500000
 8006f28:	42d00000 	.word	0x42d00000
 8006f2c:	43500000 	.word	0x43500000
 8006f30:	43d08000 	.word	0x43d08000
 8006f34:	44504000 	.word	0x44504000
 8006f38:	44d06000 	.word	0x44d06000
 8006f3c:	45505000 	.word	0x45505000

08006f40 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006f4c:	edd7 7a00 	vldr	s15, [r7]
 8006f50:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5c:	d801      	bhi.n	8006f62 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e058      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f62:	edd7 7a00 	vldr	s15, [r7]
 8006f66:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f72:	d801      	bhi.n	8006f78 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8006f74:	2302      	movs	r3, #2
 8006f76:	e04d      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f78:	edd7 7a00 	vldr	s15, [r7]
 8006f7c:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8007028 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8006f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f88:	d801      	bhi.n	8006f8e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e042      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006f8e:	edd7 7a00 	vldr	s15, [r7]
 8006f92:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800702c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 8006f96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f9e:	d801      	bhi.n	8006fa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	e037      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fa4:	edd7 7a00 	vldr	s15, [r7]
 8006fa8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007030 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8006fac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb4:	d801      	bhi.n	8006fba <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8006fb6:	2305      	movs	r3, #5
 8006fb8:	e02c      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fba:	edd7 7a00 	vldr	s15, [r7]
 8006fbe:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007034 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8006fc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fca:	d801      	bhi.n	8006fd0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8006fcc:	2306      	movs	r3, #6
 8006fce:	e021      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fd0:	edd7 7a00 	vldr	s15, [r7]
 8006fd4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007038 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8006fd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe0:	d801      	bhi.n	8006fe6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8006fe2:	2307      	movs	r3, #7
 8006fe4:	e016      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006fe6:	edd7 7a00 	vldr	s15, [r7]
 8006fea:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800703c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8006fee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d801      	bhi.n	8006ffc <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8006ff8:	2308      	movs	r3, #8
 8006ffa:	e00b      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8006ffc:	edd7 7a00 	vldr	s15, [r7]
 8007000:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007040 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007004:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800700c:	d801      	bhi.n	8007012 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 800700e:	2309      	movs	r3, #9
 8007010:	e000      	b.n	8007014 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007012:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	42500000 	.word	0x42500000
 800702c:	42d00000 	.word	0x42d00000
 8007030:	43500000 	.word	0x43500000
 8007034:	43d08000 	.word	0x43d08000
 8007038:	44504000 	.word	0x44504000
 800703c:	44d06000 	.word	0x44d06000
 8007040:	45505000 	.word	0x45505000

08007044 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007044:	b590      	push	{r4, r7, lr}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	607a      	str	r2, [r7, #4]
 800704e:	461a      	mov	r2, r3
 8007050:	460b      	mov	r3, r1
 8007052:	72fb      	strb	r3, [r7, #11]
 8007054:	4613      	mov	r3, r2
 8007056:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	695c      	ldr	r4, [r3, #20]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	7b1b      	ldrb	r3, [r3, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	7afb      	ldrb	r3, [r7, #11]
 8007068:	b299      	uxth	r1, r3
 800706a:	893b      	ldrh	r3, [r7, #8]
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	47a0      	blx	r4
 8007070:	4603      	mov	r3, r0
}
 8007072:	4618      	mov	r0, r3
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd90      	pop	{r4, r7, pc}

0800707a <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800707a:	b590      	push	{r4, r7, lr}
 800707c:	b087      	sub	sp, #28
 800707e:	af00      	add	r7, sp, #0
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	607a      	str	r2, [r7, #4]
 8007084:	461a      	mov	r2, r3
 8007086:	460b      	mov	r3, r1
 8007088:	72fb      	strb	r3, [r7, #11]
 800708a:	4613      	mov	r3, r2
 800708c:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	691c      	ldr	r4, [r3, #16]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	7b1b      	ldrb	r3, [r3, #12]
 800709a:	4618      	mov	r0, r3
 800709c:	7afb      	ldrb	r3, [r7, #11]
 800709e:	b299      	uxth	r1, r3
 80070a0:	893b      	ldrh	r3, [r7, #8]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	47a0      	blx	r4
 80070a6:	4603      	mov	r3, r0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	371c      	adds	r7, #28
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd90      	pop	{r4, r7, pc}

080070b0 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80070b0:	b590      	push	{r4, r7, lr}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	607a      	str	r2, [r7, #4]
 80070ba:	461a      	mov	r2, r3
 80070bc:	460b      	mov	r3, r1
 80070be:	72fb      	strb	r3, [r7, #11]
 80070c0:	4613      	mov	r3, r2
 80070c2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	685c      	ldr	r4, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	68d8      	ldr	r0, [r3, #12]
 80070cc:	893b      	ldrh	r3, [r7, #8]
 80070ce:	7af9      	ldrb	r1, [r7, #11]
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	47a0      	blx	r4
 80070d4:	6178      	str	r0, [r7, #20]

  return ret;
 80070d6:	697b      	ldr	r3, [r7, #20]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	371c      	adds	r7, #28
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd90      	pop	{r4, r7, pc}

080070e0 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	461a      	mov	r2, r3
 80070ec:	460b      	mov	r3, r1
 80070ee:	72fb      	strb	r3, [r7, #11]
 80070f0:	4613      	mov	r3, r2
 80070f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681c      	ldr	r4, [r3, #0]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	68d8      	ldr	r0, [r3, #12]
 80070fc:	893b      	ldrh	r3, [r7, #8]
 80070fe:	7af9      	ldrb	r1, [r7, #11]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	47a0      	blx	r4
 8007104:	6178      	str	r0, [r7, #20]

  return ret;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	371c      	adds	r7, #28
 800710c:	46bd      	mov	sp, r7
 800710e:	bd90      	pop	{r4, r7, pc}

08007110 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800711c:	f107 0208 	add.w	r2, r7, #8
 8007120:	2301      	movs	r3, #1
 8007122:	2110      	movs	r1, #16
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7ff ffc3 	bl	80070b0 <lsm6dso_read_reg>
 800712a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007132:	78fb      	ldrb	r3, [r7, #3]
 8007134:	f003 0303 	and.w	r3, r3, #3
 8007138:	b2da      	uxtb	r2, r3
 800713a:	7a3b      	ldrb	r3, [r7, #8]
 800713c:	f362 0383 	bfi	r3, r2, #2, #2
 8007140:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007142:	f107 0208 	add.w	r2, r7, #8
 8007146:	2301      	movs	r3, #1
 8007148:	2110      	movs	r1, #16
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f7ff ffc8 	bl	80070e0 <lsm6dso_write_reg>
 8007150:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007152:	68fb      	ldr	r3, [r7, #12]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	2301      	movs	r3, #1
 800716c:	2110      	movs	r1, #16
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff ff9e 	bl	80070b0 <lsm6dso_read_reg>
 8007174:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8007176:	7a3b      	ldrb	r3, [r7, #8]
 8007178:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800717c:	b2db      	uxtb	r3, r3
 800717e:	2b03      	cmp	r3, #3
 8007180:	d81a      	bhi.n	80071b8 <lsm6dso_xl_full_scale_get+0x5c>
 8007182:	a201      	add	r2, pc, #4	@ (adr r2, 8007188 <lsm6dso_xl_full_scale_get+0x2c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	08007199 	.word	0x08007199
 800718c:	080071a1 	.word	0x080071a1
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071b1 	.word	0x080071b1
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	701a      	strb	r2, [r3, #0]
      break;
 800719e:	e00f      	b.n	80071c0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	701a      	strb	r2, [r3, #0]
      break;
 80071a6:	e00b      	b.n	80071c0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2202      	movs	r2, #2
 80071ac:	701a      	strb	r2, [r3, #0]
      break;
 80071ae:	e007      	b.n	80071c0 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2203      	movs	r2, #3
 80071b4:	701a      	strb	r2, [r3, #0]
      break;
 80071b6:	e003      	b.n	80071c0 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	701a      	strb	r2, [r3, #0]
      break;
 80071be:	bf00      	nop
  }

  return ret;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80071dc:	f107 030c 	add.w	r3, r7, #12
 80071e0:	4619      	mov	r1, r3
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 fc90 	bl	8007b08 <lsm6dso_fsm_enable_get>
 80071e8:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <lsm6dso_xl_data_rate_set+0x28>
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	e0e0      	b.n	80073b6 <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80071f4:	7b3b      	ldrb	r3, [r7, #12]
 80071f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80071fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80071fc:	7b3b      	ldrb	r3, [r7, #12]
 80071fe:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007202:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007204:	4313      	orrs	r3, r2
 8007206:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007208:	7b3b      	ldrb	r3, [r7, #12]
 800720a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800720e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007210:	4313      	orrs	r3, r2
 8007212:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007214:	7b3b      	ldrb	r3, [r7, #12]
 8007216:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800721a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800721c:	4313      	orrs	r3, r2
 800721e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007220:	7b3b      	ldrb	r3, [r7, #12]
 8007222:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007226:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007228:	4313      	orrs	r3, r2
 800722a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 800722c:	7b3b      	ldrb	r3, [r7, #12]
 800722e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007232:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007234:	4313      	orrs	r3, r2
 8007236:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007238:	7b3b      	ldrb	r3, [r7, #12]
 800723a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800723e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007240:	4313      	orrs	r3, r2
 8007242:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007244:	7b3b      	ldrb	r3, [r7, #12]
 8007246:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800724a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800724c:	4313      	orrs	r3, r2
 800724e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007250:	7b7b      	ldrb	r3, [r7, #13]
 8007252:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007256:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007258:	4313      	orrs	r3, r2
 800725a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 800725c:	7b7b      	ldrb	r3, [r7, #13]
 800725e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007262:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007264:	4313      	orrs	r3, r2
 8007266:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007268:	7b7b      	ldrb	r3, [r7, #13]
 800726a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800726e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007270:	4313      	orrs	r3, r2
 8007272:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007274:	7b7b      	ldrb	r3, [r7, #13]
 8007276:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800727a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800727c:	4313      	orrs	r3, r2
 800727e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007280:	7b7b      	ldrb	r3, [r7, #13]
 8007282:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8007286:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007288:	4313      	orrs	r3, r2
 800728a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 800728c:	7b7b      	ldrb	r3, [r7, #13]
 800728e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007292:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007294:	4313      	orrs	r3, r2
 8007296:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007298:	7b7b      	ldrb	r3, [r7, #13]
 800729a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800729e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80072a4:	7b7b      	ldrb	r3, [r7, #13]
 80072a6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80072aa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80072ac:	4313      	orrs	r3, r2
 80072ae:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d164      	bne.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80072b4:	f107 030b 	add.w	r3, r7, #11
 80072b8:	4619      	mov	r1, r3
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fc46 	bl	8007b4c <lsm6dso_fsm_data_rate_get>
 80072c0:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d001      	beq.n	80072cc <lsm6dso_xl_data_rate_set+0x100>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	e074      	b.n	80073b6 <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80072cc:	7afb      	ldrb	r3, [r7, #11]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d852      	bhi.n	8007378 <lsm6dso_xl_data_rate_set+0x1ac>
 80072d2:	a201      	add	r2, pc, #4	@ (adr r2, 80072d8 <lsm6dso_xl_data_rate_set+0x10c>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	080072e9 	.word	0x080072e9
 80072dc:	080072fb 	.word	0x080072fb
 80072e0:	08007319 	.word	0x08007319
 80072e4:	08007343 	.word	0x08007343
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80072e8:	78fb      	ldrb	r3, [r7, #3]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d102      	bne.n	80072f4 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80072ee:	2301      	movs	r3, #1
 80072f0:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80072f2:	e044      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	75fb      	strb	r3, [r7, #23]
        break;
 80072f8:	e041      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80072fa:	78fb      	ldrb	r3, [r7, #3]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d102      	bne.n	8007306 <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007300:	2302      	movs	r3, #2
 8007302:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007304:	e03b      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007306:	78fb      	ldrb	r3, [r7, #3]
 8007308:	2b01      	cmp	r3, #1
 800730a:	d102      	bne.n	8007312 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 800730c:	2302      	movs	r3, #2
 800730e:	75fb      	strb	r3, [r7, #23]
        break;
 8007310:	e035      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007312:	78fb      	ldrb	r3, [r7, #3]
 8007314:	75fb      	strb	r3, [r7, #23]
        break;
 8007316:	e032      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007318:	78fb      	ldrb	r3, [r7, #3]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800731e:	2303      	movs	r3, #3
 8007320:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007322:	e02c      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	2b01      	cmp	r3, #1
 8007328:	d102      	bne.n	8007330 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800732a:	2303      	movs	r3, #3
 800732c:	75fb      	strb	r3, [r7, #23]
        break;
 800732e:	e026      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007330:	78fb      	ldrb	r3, [r7, #3]
 8007332:	2b02      	cmp	r3, #2
 8007334:	d102      	bne.n	800733c <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007336:	2303      	movs	r3, #3
 8007338:	75fb      	strb	r3, [r7, #23]
        break;
 800733a:	e020      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	75fb      	strb	r3, [r7, #23]
        break;
 8007340:	e01d      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d102      	bne.n	800734e <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007348:	2304      	movs	r3, #4
 800734a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 800734c:	e017      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800734e:	78fb      	ldrb	r3, [r7, #3]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d102      	bne.n	800735a <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007354:	2304      	movs	r3, #4
 8007356:	75fb      	strb	r3, [r7, #23]
        break;
 8007358:	e011      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800735a:	78fb      	ldrb	r3, [r7, #3]
 800735c:	2b02      	cmp	r3, #2
 800735e:	d102      	bne.n	8007366 <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007360:	2304      	movs	r3, #4
 8007362:	75fb      	strb	r3, [r7, #23]
        break;
 8007364:	e00b      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	2b03      	cmp	r3, #3
 800736a:	d102      	bne.n	8007372 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800736c:	2304      	movs	r3, #4
 800736e:	75fb      	strb	r3, [r7, #23]
        break;
 8007370:	e005      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007372:	78fb      	ldrb	r3, [r7, #3]
 8007374:	75fb      	strb	r3, [r7, #23]
        break;
 8007376:	e002      	b.n	800737e <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	75fb      	strb	r3, [r7, #23]
        break;
 800737c:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800737e:	f107 0208 	add.w	r2, r7, #8
 8007382:	2301      	movs	r3, #1
 8007384:	2110      	movs	r1, #16
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f7ff fe92 	bl	80070b0 <lsm6dso_read_reg>
 800738c:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	b2da      	uxtb	r2, r3
 8007396:	7a3b      	ldrb	r3, [r7, #8]
 8007398:	f362 1307 	bfi	r3, r2, #4, #4
 800739c:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800739e:	f107 0208 	add.w	r2, r7, #8
 80073a2:	2301      	movs	r3, #1
 80073a4:	2110      	movs	r1, #16
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff fe9a 	bl	80070e0 <lsm6dso_write_reg>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	613b      	str	r3, [r7, #16]

  return ret;
 80073b4:	693b      	ldr	r3, [r7, #16]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop

080073c0 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80073ca:	f107 0208 	add.w	r2, r7, #8
 80073ce:	2301      	movs	r3, #1
 80073d0:	2110      	movs	r1, #16
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7ff fe6c 	bl	80070b0 <lsm6dso_read_reg>
 80073d8:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80073da:	7a3b      	ldrb	r3, [r7, #8]
 80073dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	2b0b      	cmp	r3, #11
 80073e4:	d84a      	bhi.n	800747c <lsm6dso_xl_data_rate_get+0xbc>
 80073e6:	a201      	add	r2, pc, #4	@ (adr r2, 80073ec <lsm6dso_xl_data_rate_get+0x2c>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	0800741d 	.word	0x0800741d
 80073f0:	08007425 	.word	0x08007425
 80073f4:	0800742d 	.word	0x0800742d
 80073f8:	08007435 	.word	0x08007435
 80073fc:	0800743d 	.word	0x0800743d
 8007400:	08007445 	.word	0x08007445
 8007404:	0800744d 	.word	0x0800744d
 8007408:	08007455 	.word	0x08007455
 800740c:	0800745d 	.word	0x0800745d
 8007410:	08007465 	.word	0x08007465
 8007414:	0800746d 	.word	0x0800746d
 8007418:	08007475 	.word	0x08007475
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2200      	movs	r2, #0
 8007420:	701a      	strb	r2, [r3, #0]
      break;
 8007422:	e02f      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	2201      	movs	r2, #1
 8007428:	701a      	strb	r2, [r3, #0]
      break;
 800742a:	e02b      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	2202      	movs	r2, #2
 8007430:	701a      	strb	r2, [r3, #0]
      break;
 8007432:	e027      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	2203      	movs	r2, #3
 8007438:	701a      	strb	r2, [r3, #0]
      break;
 800743a:	e023      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2204      	movs	r2, #4
 8007440:	701a      	strb	r2, [r3, #0]
      break;
 8007442:	e01f      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	2205      	movs	r2, #5
 8007448:	701a      	strb	r2, [r3, #0]
      break;
 800744a:	e01b      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2206      	movs	r2, #6
 8007450:	701a      	strb	r2, [r3, #0]
      break;
 8007452:	e017      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2207      	movs	r2, #7
 8007458:	701a      	strb	r2, [r3, #0]
      break;
 800745a:	e013      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	2208      	movs	r2, #8
 8007460:	701a      	strb	r2, [r3, #0]
      break;
 8007462:	e00f      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	2209      	movs	r2, #9
 8007468:	701a      	strb	r2, [r3, #0]
      break;
 800746a:	e00b      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	220a      	movs	r2, #10
 8007470:	701a      	strb	r2, [r3, #0]
      break;
 8007472:	e007      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	220b      	movs	r2, #11
 8007478:	701a      	strb	r2, [r3, #0]
      break;
 800747a:	e003      	b.n	8007484 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
      break;
 8007482:	bf00      	nop
  }

  return ret;
 8007484:	68fb      	ldr	r3, [r7, #12]
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800749c:	f107 0208 	add.w	r2, r7, #8
 80074a0:	2301      	movs	r3, #1
 80074a2:	2111      	movs	r1, #17
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f7ff fe03 	bl	80070b0 <lsm6dso_read_reg>
 80074aa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10f      	bne.n	80074d2 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80074b2:	78fb      	ldrb	r3, [r7, #3]
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	7a3b      	ldrb	r3, [r7, #8]
 80074bc:	f362 0343 	bfi	r3, r2, #1, #3
 80074c0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80074c2:	f107 0208 	add.w	r2, r7, #8
 80074c6:	2301      	movs	r3, #1
 80074c8:	2111      	movs	r1, #17
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7ff fe08 	bl	80070e0 <lsm6dso_write_reg>
 80074d0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80074d2:	68fb      	ldr	r3, [r7, #12]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3710      	adds	r7, #16
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}

080074dc <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80074e6:	f107 0208 	add.w	r2, r7, #8
 80074ea:	2301      	movs	r3, #1
 80074ec:	2111      	movs	r1, #17
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fdde 	bl	80070b0 <lsm6dso_read_reg>
 80074f4:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80074f6:	7a3b      	ldrb	r3, [r7, #8]
 80074f8:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b06      	cmp	r3, #6
 8007500:	d824      	bhi.n	800754c <lsm6dso_gy_full_scale_get+0x70>
 8007502:	a201      	add	r2, pc, #4	@ (adr r2, 8007508 <lsm6dso_gy_full_scale_get+0x2c>)
 8007504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007508:	08007525 	.word	0x08007525
 800750c:	0800752d 	.word	0x0800752d
 8007510:	08007535 	.word	0x08007535
 8007514:	0800754d 	.word	0x0800754d
 8007518:	0800753d 	.word	0x0800753d
 800751c:	0800754d 	.word	0x0800754d
 8007520:	08007545 	.word	0x08007545
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	2200      	movs	r2, #0
 8007528:	701a      	strb	r2, [r3, #0]
      break;
 800752a:	e013      	b.n	8007554 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	2201      	movs	r2, #1
 8007530:	701a      	strb	r2, [r3, #0]
      break;
 8007532:	e00f      	b.n	8007554 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2202      	movs	r2, #2
 8007538:	701a      	strb	r2, [r3, #0]
      break;
 800753a:	e00b      	b.n	8007554 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2204      	movs	r2, #4
 8007540:	701a      	strb	r2, [r3, #0]
      break;
 8007542:	e007      	b.n	8007554 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2206      	movs	r2, #6
 8007548:	701a      	strb	r2, [r3, #0]
      break;
 800754a:	e003      	b.n	8007554 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	701a      	strb	r2, [r3, #0]
      break;
 8007552:	bf00      	nop
  }

  return ret;
 8007554:	68fb      	ldr	r3, [r7, #12]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3710      	adds	r7, #16
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop

08007560 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fac6 	bl	8007b08 <lsm6dso_fsm_enable_get>
 800757c:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <lsm6dso_gy_data_rate_set+0x28>
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	e0e0      	b.n	800774a <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007588:	7b3b      	ldrb	r3, [r7, #12]
 800758a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800758e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007590:	7b3b      	ldrb	r3, [r7, #12]
 8007592:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007596:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007598:	4313      	orrs	r3, r2
 800759a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800759c:	7b3b      	ldrb	r3, [r7, #12]
 800759e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80075a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80075a4:	4313      	orrs	r3, r2
 80075a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80075a8:	7b3b      	ldrb	r3, [r7, #12]
 80075aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80075b0:	4313      	orrs	r3, r2
 80075b2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80075b4:	7b3b      	ldrb	r3, [r7, #12]
 80075b6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80075ba:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80075bc:	4313      	orrs	r3, r2
 80075be:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80075c0:	7b3b      	ldrb	r3, [r7, #12]
 80075c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80075c6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80075c8:	4313      	orrs	r3, r2
 80075ca:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80075cc:	7b3b      	ldrb	r3, [r7, #12]
 80075ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80075d2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80075d4:	4313      	orrs	r3, r2
 80075d6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80075d8:	7b3b      	ldrb	r3, [r7, #12]
 80075da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80075de:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80075e4:	7b7b      	ldrb	r3, [r7, #13]
 80075e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075ea:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80075ec:	4313      	orrs	r3, r2
 80075ee:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80075f0:	7b7b      	ldrb	r3, [r7, #13]
 80075f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80075f6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80075f8:	4313      	orrs	r3, r2
 80075fa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 80075fc:	7b7b      	ldrb	r3, [r7, #13]
 80075fe:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007602:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007604:	4313      	orrs	r3, r2
 8007606:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007608:	7b7b      	ldrb	r3, [r7, #13]
 800760a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800760e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007610:	4313      	orrs	r3, r2
 8007612:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007614:	7b7b      	ldrb	r3, [r7, #13]
 8007616:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800761a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800761c:	4313      	orrs	r3, r2
 800761e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007620:	7b7b      	ldrb	r3, [r7, #13]
 8007622:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007626:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007628:	4313      	orrs	r3, r2
 800762a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800762c:	7b7b      	ldrb	r3, [r7, #13]
 800762e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007632:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007634:	4313      	orrs	r3, r2
 8007636:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8007638:	7b7b      	ldrb	r3, [r7, #13]
 800763a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800763e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007640:	4313      	orrs	r3, r2
 8007642:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007644:	2b01      	cmp	r3, #1
 8007646:	d164      	bne.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8007648:	f107 030b 	add.w	r3, r7, #11
 800764c:	4619      	mov	r1, r3
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fa7c 	bl	8007b4c <lsm6dso_fsm_data_rate_get>
 8007654:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <lsm6dso_gy_data_rate_set+0x100>
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	e074      	b.n	800774a <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007660:	7afb      	ldrb	r3, [r7, #11]
 8007662:	2b03      	cmp	r3, #3
 8007664:	d852      	bhi.n	800770c <lsm6dso_gy_data_rate_set+0x1ac>
 8007666:	a201      	add	r2, pc, #4	@ (adr r2, 800766c <lsm6dso_gy_data_rate_set+0x10c>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	0800767d 	.word	0x0800767d
 8007670:	0800768f 	.word	0x0800768f
 8007674:	080076ad 	.word	0x080076ad
 8007678:	080076d7 	.word	0x080076d7
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007682:	2301      	movs	r3, #1
 8007684:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007686:	e044      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	75fb      	strb	r3, [r7, #23]
        break;
 800768c:	e041      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007694:	2302      	movs	r3, #2
 8007696:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 8007698:	e03b      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d102      	bne.n	80076a6 <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80076a0:	2302      	movs	r3, #2
 80076a2:	75fb      	strb	r3, [r7, #23]
        break;
 80076a4:	e035      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	75fb      	strb	r3, [r7, #23]
        break;
 80076aa:	e032      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80076ac:	78fb      	ldrb	r3, [r7, #3]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80076b2:	2303      	movs	r3, #3
 80076b4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80076b6:	e02c      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d102      	bne.n	80076c4 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80076be:	2303      	movs	r3, #3
 80076c0:	75fb      	strb	r3, [r7, #23]
        break;
 80076c2:	e026      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80076c4:	78fb      	ldrb	r3, [r7, #3]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d102      	bne.n	80076d0 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80076ca:	2303      	movs	r3, #3
 80076cc:	75fb      	strb	r3, [r7, #23]
        break;
 80076ce:	e020      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	75fb      	strb	r3, [r7, #23]
        break;
 80076d4:	e01d      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80076d6:	78fb      	ldrb	r3, [r7, #3]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d102      	bne.n	80076e2 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076dc:	2304      	movs	r3, #4
 80076de:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80076e0:	e017      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80076e2:	78fb      	ldrb	r3, [r7, #3]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d102      	bne.n	80076ee <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076e8:	2304      	movs	r3, #4
 80076ea:	75fb      	strb	r3, [r7, #23]
        break;
 80076ec:	e011      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80076ee:	78fb      	ldrb	r3, [r7, #3]
 80076f0:	2b02      	cmp	r3, #2
 80076f2:	d102      	bne.n	80076fa <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80076f4:	2304      	movs	r3, #4
 80076f6:	75fb      	strb	r3, [r7, #23]
        break;
 80076f8:	e00b      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80076fa:	78fb      	ldrb	r3, [r7, #3]
 80076fc:	2b03      	cmp	r3, #3
 80076fe:	d102      	bne.n	8007706 <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007700:	2304      	movs	r3, #4
 8007702:	75fb      	strb	r3, [r7, #23]
        break;
 8007704:	e005      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 8007706:	78fb      	ldrb	r3, [r7, #3]
 8007708:	75fb      	strb	r3, [r7, #23]
        break;
 800770a:	e002      	b.n	8007712 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	75fb      	strb	r3, [r7, #23]
        break;
 8007710:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007712:	f107 0208 	add.w	r2, r7, #8
 8007716:	2301      	movs	r3, #1
 8007718:	2111      	movs	r1, #17
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7ff fcc8 	bl	80070b0 <lsm6dso_read_reg>
 8007720:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8007722:	7dfb      	ldrb	r3, [r7, #23]
 8007724:	f003 030f 	and.w	r3, r3, #15
 8007728:	b2da      	uxtb	r2, r3
 800772a:	7a3b      	ldrb	r3, [r7, #8]
 800772c:	f362 1307 	bfi	r3, r2, #4, #4
 8007730:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007732:	f107 0208 	add.w	r2, r7, #8
 8007736:	2301      	movs	r3, #1
 8007738:	2111      	movs	r1, #17
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f7ff fcd0 	bl	80070e0 <lsm6dso_write_reg>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	4413      	add	r3, r2
 8007746:	613b      	str	r3, [r7, #16]

  return ret;
 8007748:	693b      	ldr	r3, [r7, #16]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop

08007754 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800775e:	f107 0208 	add.w	r2, r7, #8
 8007762:	2301      	movs	r3, #1
 8007764:	2111      	movs	r1, #17
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff fca2 	bl	80070b0 <lsm6dso_read_reg>
 800776c:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800776e:	7a3b      	ldrb	r3, [r7, #8]
 8007770:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b0a      	cmp	r3, #10
 8007778:	d844      	bhi.n	8007804 <lsm6dso_gy_data_rate_get+0xb0>
 800777a:	a201      	add	r2, pc, #4	@ (adr r2, 8007780 <lsm6dso_gy_data_rate_get+0x2c>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	080077ad 	.word	0x080077ad
 8007784:	080077b5 	.word	0x080077b5
 8007788:	080077bd 	.word	0x080077bd
 800778c:	080077c5 	.word	0x080077c5
 8007790:	080077cd 	.word	0x080077cd
 8007794:	080077d5 	.word	0x080077d5
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077e5 	.word	0x080077e5
 80077a0:	080077ed 	.word	0x080077ed
 80077a4:	080077f5 	.word	0x080077f5
 80077a8:	080077fd 	.word	0x080077fd
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
      break;
 80077b2:	e02b      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2201      	movs	r2, #1
 80077b8:	701a      	strb	r2, [r3, #0]
      break;
 80077ba:	e027      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2202      	movs	r2, #2
 80077c0:	701a      	strb	r2, [r3, #0]
      break;
 80077c2:	e023      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2203      	movs	r2, #3
 80077c8:	701a      	strb	r2, [r3, #0]
      break;
 80077ca:	e01f      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	2204      	movs	r2, #4
 80077d0:	701a      	strb	r2, [r3, #0]
      break;
 80077d2:	e01b      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2205      	movs	r2, #5
 80077d8:	701a      	strb	r2, [r3, #0]
      break;
 80077da:	e017      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2206      	movs	r2, #6
 80077e0:	701a      	strb	r2, [r3, #0]
      break;
 80077e2:	e013      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2207      	movs	r2, #7
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e00f      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2208      	movs	r2, #8
 80077f0:	701a      	strb	r2, [r3, #0]
      break;
 80077f2:	e00b      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	2209      	movs	r2, #9
 80077f8:	701a      	strb	r2, [r3, #0]
      break;
 80077fa:	e007      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	220a      	movs	r2, #10
 8007800:	701a      	strb	r2, [r3, #0]
      break;
 8007802:	e003      	b.n	800780c <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2200      	movs	r2, #0
 8007808:	701a      	strb	r2, [r3, #0]
      break;
 800780a:	bf00      	nop
  }

  return ret;
 800780c:	68fb      	ldr	r3, [r7, #12]
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop

08007818 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	460b      	mov	r3, r1
 8007822:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007824:	f107 0208 	add.w	r2, r7, #8
 8007828:	2301      	movs	r3, #1
 800782a:	2112      	movs	r1, #18
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7ff fc3f 	bl	80070b0 <lsm6dso_read_reg>
 8007832:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d10f      	bne.n	800785a <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 0301 	and.w	r3, r3, #1
 8007840:	b2da      	uxtb	r2, r3
 8007842:	7a3b      	ldrb	r3, [r7, #8]
 8007844:	f362 1386 	bfi	r3, r2, #6, #1
 8007848:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800784a:	f107 0208 	add.w	r2, r7, #8
 800784e:	2301      	movs	r3, #1
 8007850:	2112      	movs	r1, #18
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff fc44 	bl	80070e0 <lsm6dso_write_reg>
 8007858:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800785a:	68fb      	ldr	r3, [r7, #12]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3710      	adds	r7, #16
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}

08007864 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800786e:	f107 020c 	add.w	r2, r7, #12
 8007872:	2306      	movs	r3, #6
 8007874:	2122      	movs	r1, #34	@ 0x22
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f7ff fc1a 	bl	80070b0 <lsm6dso_read_reg>
 800787c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800787e:	7b7b      	ldrb	r3, [r7, #13]
 8007880:	b21a      	sxth	r2, r3
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800788c:	b29b      	uxth	r3, r3
 800788e:	021b      	lsls	r3, r3, #8
 8007890:	b29b      	uxth	r3, r3
 8007892:	7b3a      	ldrb	r2, [r7, #12]
 8007894:	4413      	add	r3, r2
 8007896:	b29b      	uxth	r3, r3
 8007898:	b21a      	sxth	r2, r3
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800789e:	7bfa      	ldrb	r2, [r7, #15]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	3302      	adds	r3, #2
 80078a4:	b212      	sxth	r2, r2
 80078a6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	3302      	adds	r3, #2
 80078ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	021b      	lsls	r3, r3, #8
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	7bba      	ldrb	r2, [r7, #14]
 80078b8:	4413      	add	r3, r2
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	3302      	adds	r3, #2
 80078c0:	b212      	sxth	r2, r2
 80078c2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80078c4:	7c7a      	ldrb	r2, [r7, #17]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	3304      	adds	r3, #4
 80078ca:	b212      	sxth	r2, r2
 80078cc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	3304      	adds	r3, #4
 80078d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	021b      	lsls	r3, r3, #8
 80078da:	b29b      	uxth	r3, r3
 80078dc:	7c3a      	ldrb	r2, [r7, #16]
 80078de:	4413      	add	r3, r2
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	3304      	adds	r3, #4
 80078e6:	b212      	sxth	r2, r2
 80078e8:	801a      	strh	r2, [r3, #0]

  return ret;
 80078ea:	697b      	ldr	r3, [r7, #20]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80078fe:	f107 020c 	add.w	r2, r7, #12
 8007902:	2306      	movs	r3, #6
 8007904:	2128      	movs	r1, #40	@ 0x28
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fbd2 	bl	80070b0 <lsm6dso_read_reg>
 800790c:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800790e:	7b7b      	ldrb	r3, [r7, #13]
 8007910:	b21a      	sxth	r2, r3
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800791c:	b29b      	uxth	r3, r3
 800791e:	021b      	lsls	r3, r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	7b3a      	ldrb	r2, [r7, #12]
 8007924:	4413      	add	r3, r2
 8007926:	b29b      	uxth	r3, r3
 8007928:	b21a      	sxth	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800792e:	7bfa      	ldrb	r2, [r7, #15]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	3302      	adds	r3, #2
 8007934:	b212      	sxth	r2, r2
 8007936:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	3302      	adds	r3, #2
 800793c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007940:	b29b      	uxth	r3, r3
 8007942:	021b      	lsls	r3, r3, #8
 8007944:	b29b      	uxth	r3, r3
 8007946:	7bba      	ldrb	r2, [r7, #14]
 8007948:	4413      	add	r3, r2
 800794a:	b29a      	uxth	r2, r3
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	3302      	adds	r3, #2
 8007950:	b212      	sxth	r2, r2
 8007952:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007954:	7c7a      	ldrb	r2, [r7, #17]
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	3304      	adds	r3, #4
 800795a:	b212      	sxth	r2, r2
 800795c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	3304      	adds	r3, #4
 8007962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007966:	b29b      	uxth	r3, r3
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	b29b      	uxth	r3, r3
 800796c:	7c3a      	ldrb	r2, [r7, #16]
 800796e:	4413      	add	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	3304      	adds	r3, #4
 8007976:	b212      	sxth	r2, r2
 8007978:	801a      	strh	r2, [r3, #0]

  return ret;
 800797a:	697b      	ldr	r3, [r7, #20]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3718      	adds	r7, #24
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	460b      	mov	r3, r1
 800798e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007990:	2300      	movs	r3, #0
 8007992:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007994:	78fb      	ldrb	r3, [r7, #3]
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	b2da      	uxtb	r2, r3
 800799c:	7a3b      	ldrb	r3, [r7, #8]
 800799e:	f362 1387 	bfi	r3, r2, #6, #2
 80079a2:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80079a4:	f107 0208 	add.w	r2, r7, #8
 80079a8:	2301      	movs	r3, #1
 80079aa:	2101      	movs	r1, #1
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f7ff fb97 	bl	80070e0 <lsm6dso_write_reg>
 80079b2:	60f8      	str	r0, [r7, #12]

  return ret;
 80079b4:	68fb      	ldr	r3, [r7, #12]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80079be:	b580      	push	{r7, lr}
 80079c0:	b084      	sub	sp, #16
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
 80079c6:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80079c8:	2301      	movs	r3, #1
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	210f      	movs	r1, #15
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7ff fb6e 	bl	80070b0 <lsm6dso_read_reg>
 80079d4:	60f8      	str	r0, [r7, #12]

  return ret;
 80079d6:	68fb      	ldr	r3, [r7, #12]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	460b      	mov	r3, r1
 80079ea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80079ec:	f107 0208 	add.w	r2, r7, #8
 80079f0:	2301      	movs	r3, #1
 80079f2:	2112      	movs	r1, #18
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f7ff fb5b 	bl	80070b0 <lsm6dso_read_reg>
 80079fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d10f      	bne.n	8007a22 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007a02:	78fb      	ldrb	r3, [r7, #3]
 8007a04:	f003 0301 	and.w	r3, r3, #1
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	7a3b      	ldrb	r3, [r7, #8]
 8007a0c:	f362 0382 	bfi	r3, r2, #2, #1
 8007a10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007a12:	f107 0208 	add.w	r2, r7, #8
 8007a16:	2301      	movs	r3, #1
 8007a18:	2112      	movs	r1, #18
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f7ff fb60 	bl	80070e0 <lsm6dso_write_reg>
 8007a20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007a22:	68fb      	ldr	r3, [r7, #12]
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b086      	sub	sp, #24
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	460b      	mov	r3, r1
 8007a36:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a38:	f107 020c 	add.w	r2, r7, #12
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	2118      	movs	r1, #24
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fb35 	bl	80070b0 <lsm6dso_read_reg>
 8007a46:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	09db      	lsrs	r3, r3, #7
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	7b3b      	ldrb	r3, [r7, #12]
 8007a56:	f362 0341 	bfi	r3, r2, #1, #1
 8007a5a:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007a5c:	f107 020c 	add.w	r2, r7, #12
 8007a60:	2301      	movs	r3, #1
 8007a62:	2118      	movs	r1, #24
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f7ff fb3b 	bl	80070e0 <lsm6dso_write_reg>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	4413      	add	r3, r2
 8007a70:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <lsm6dso_i3c_disable_set+0x50>
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	e01b      	b.n	8007ab4 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007a7c:	f107 0210 	add.w	r2, r7, #16
 8007a80:	2301      	movs	r3, #1
 8007a82:	2162      	movs	r1, #98	@ 0x62
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f7ff fb13 	bl	80070b0 <lsm6dso_read_reg>
 8007a8a:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	f003 0303 	and.w	r3, r3, #3
 8007a92:	b2da      	uxtb	r2, r3
 8007a94:	7c3b      	ldrb	r3, [r7, #16]
 8007a96:	f362 03c4 	bfi	r3, r2, #3, #2
 8007a9a:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007a9c:	f107 0210 	add.w	r2, r7, #16
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	2162      	movs	r1, #98	@ 0x62
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7ff fb1b 	bl	80070e0 <lsm6dso_write_reg>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	4413      	add	r3, r2
 8007ab0:	617b      	str	r3, [r7, #20]

  return ret;
 8007ab2:	697b      	ldr	r3, [r7, #20]
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3718      	adds	r7, #24
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}

08007abc <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007ac8:	f107 0208 	add.w	r2, r7, #8
 8007acc:	2301      	movs	r3, #1
 8007ace:	210a      	movs	r1, #10
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff faed 	bl	80070b0 <lsm6dso_read_reg>
 8007ad6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10f      	bne.n	8007afe <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	7a3b      	ldrb	r3, [r7, #8]
 8007ae8:	f362 0302 	bfi	r3, r2, #0, #3
 8007aec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007aee:	f107 0208 	add.w	r2, r7, #8
 8007af2:	2301      	movs	r3, #1
 8007af4:	210a      	movs	r1, #10
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff faf2 	bl	80070e0 <lsm6dso_write_reg>
 8007afc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007afe:	68fb      	ldr	r3, [r7, #12]
}
 8007b00:	4618      	mov	r0, r3
 8007b02:	3710      	adds	r7, #16
 8007b04:	46bd      	mov	sp, r7
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007b12:	2102      	movs	r1, #2
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff ff35 	bl	8007984 <lsm6dso_mem_bank_set>
 8007b1a:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	683a      	ldr	r2, [r7, #0]
 8007b20:	2146      	movs	r1, #70	@ 0x46
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f7ff fac4 	bl	80070b0 <lsm6dso_read_reg>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	4413      	add	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff ff26 	bl	8007984 <lsm6dso_mem_bank_set>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  return ret;
 8007b40:	68fb      	ldr	r3, [r7, #12]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
	...

08007b4c <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007b56:	2102      	movs	r1, #2
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f7ff ff13 	bl	8007984 <lsm6dso_mem_bank_set>
 8007b5e:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d001      	beq.n	8007b6a <lsm6dso_fsm_data_rate_get+0x1e>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	e03a      	b.n	8007be0 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007b6a:	f107 0208 	add.w	r2, r7, #8
 8007b6e:	2301      	movs	r3, #1
 8007b70:	215f      	movs	r1, #95	@ 0x5f
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fa9c 	bl	80070b0 <lsm6dso_read_reg>
 8007b78:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d125      	bne.n	8007bcc <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007b80:	7a3b      	ldrb	r3, [r7, #8]
 8007b82:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b03      	cmp	r3, #3
 8007b8a:	d81b      	bhi.n	8007bc4 <lsm6dso_fsm_data_rate_get+0x78>
 8007b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007b94 <lsm6dso_fsm_data_rate_get+0x48>)
 8007b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b92:	bf00      	nop
 8007b94:	08007ba5 	.word	0x08007ba5
 8007b98:	08007bad 	.word	0x08007bad
 8007b9c:	08007bb5 	.word	0x08007bb5
 8007ba0:	08007bbd 	.word	0x08007bbd
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	701a      	strb	r2, [r3, #0]
      break;
 8007baa:	e010      	b.n	8007bce <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	701a      	strb	r2, [r3, #0]
      break;
 8007bb2:	e00c      	b.n	8007bce <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	701a      	strb	r2, [r3, #0]
      break;
 8007bba:	e008      	b.n	8007bce <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	701a      	strb	r2, [r3, #0]
      break;
 8007bc2:	e004      	b.n	8007bce <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	701a      	strb	r2, [r3, #0]
      break;
 8007bca:	e000      	b.n	8007bce <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007bcc:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007bce:	2100      	movs	r1, #0
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f7ff fed7 	bl	8007984 <lsm6dso_mem_bank_set>
 8007bd6:	4602      	mov	r2, r0
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  return ret;
 8007bde:	68fb      	ldr	r3, [r7, #12]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b08e      	sub	sp, #56	@ 0x38
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d06e      	beq.n	8007ce2 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	f200 809d 	bhi.w	8007d46 <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d032      	beq.n	8007c7e <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007c18:	e095      	b.n	8007d46 <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c1a:	6838      	ldr	r0, [r7, #0]
 8007c1c:	f000 f9ae 	bl	8007f7c <LSM6DSO_0_Probe>
 8007c20:	4603      	mov	r3, r0
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2a:	e0cc      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c2c:	4a68      	ldr	r2, [pc, #416]	@ (8007dd0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	4967      	ldr	r1, [pc, #412]	@ (8007dd4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c3e:	f107 010c 	add.w	r1, r7, #12
 8007c42:	4610      	mov	r0, r2
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d002      	beq.n	8007c52 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007c4c:	f06f 0306 	mvn.w	r3, #6
 8007c50:	e0b9      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007c52:	7b3b      	ldrb	r3, [r7, #12]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d103      	bne.n	8007c60 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007c60:	7b7b      	ldrb	r3, [r7, #13]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d103      	bne.n	8007c6e <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	f043 0301 	orr.w	r3, r3, #1
 8007c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007c6e:	7bbb      	ldrb	r3, [r7, #14]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d16c      	bne.n	8007d4e <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007c7c:	e067      	b.n	8007d4e <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007c7e:	6838      	ldr	r0, [r7, #0]
 8007c80:	f000 fa3c 	bl	80080fc <LIS2DW12_0_Probe>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8e:	e09a      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007c90:	4a4f      	ldr	r2, [pc, #316]	@ (8007dd0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	494e      	ldr	r1, [pc, #312]	@ (8007dd4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ca2:	f107 010c 	add.w	r1, r7, #12
 8007ca6:	4610      	mov	r0, r2
 8007ca8:	4798      	blx	r3
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007cb0:	f06f 0306 	mvn.w	r3, #6
 8007cb4:	e087      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007cb6:	7b3b      	ldrb	r3, [r7, #12]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d103      	bne.n	8007cc4 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbe:	f043 0302 	orr.w	r3, r3, #2
 8007cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007cc4:	7b7b      	ldrb	r3, [r7, #13]
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d103      	bne.n	8007cd2 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ccc:	f043 0301 	orr.w	r3, r3, #1
 8007cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d13c      	bne.n	8007d52 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cda:	f043 0304 	orr.w	r3, r3, #4
 8007cde:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007ce0:	e037      	b.n	8007d52 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007ce2:	6838      	ldr	r0, [r7, #0]
 8007ce4:	f000 fab2 	bl	800824c <LIS2MDL_0_Probe>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	e068      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007cf4:	4a36      	ldr	r2, [pc, #216]	@ (8007dd0 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cfc:	68db      	ldr	r3, [r3, #12]
 8007cfe:	4935      	ldr	r1, [pc, #212]	@ (8007dd4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d06:	f107 010c 	add.w	r1, r7, #12
 8007d0a:	4610      	mov	r0, r2
 8007d0c:	4798      	blx	r3
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007d14:	f06f 0306 	mvn.w	r3, #6
 8007d18:	e055      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007d1a:	7b3b      	ldrb	r3, [r7, #12]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d103      	bne.n	8007d28 <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d22:	f043 0302 	orr.w	r3, r3, #2
 8007d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007d28:	7b7b      	ldrb	r3, [r7, #13]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d103      	bne.n	8007d36 <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d30:	f043 0301 	orr.w	r3, r3, #1
 8007d34:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007d36:	7bbb      	ldrb	r3, [r7, #14]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10c      	bne.n	8007d56 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3e:	f043 0304 	orr.w	r3, r3, #4
 8007d42:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007d44:	e007      	b.n	8007d56 <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007d46:	f06f 0301 	mvn.w	r3, #1
 8007d4a:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007d4c:	e004      	b.n	8007d58 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d4e:	bf00      	nop
 8007d50:	e002      	b.n	8007d58 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d52:	bf00      	nop
 8007d54:	e000      	b.n	8007d58 <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007d56:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d60:	e031      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007d62:	2300      	movs	r3, #0
 8007d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d66:	e02a      	b.n	8007dbe <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6c:	4013      	ands	r3, r2
 8007d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d11e      	bne.n	8007db2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d78:	4013      	ands	r3, r2
 8007d7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d118      	bne.n	8007db2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007d80:	4a15      	ldr	r2, [pc, #84]	@ (8007dd8 <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d84:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007d88:	4814      	ldr	r0, [pc, #80]	@ (8007ddc <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	005b      	lsls	r3, r3, #1
 8007d90:	4413      	add	r3, r2
 8007d92:	440b      	add	r3, r1
 8007d94:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	490e      	ldr	r1, [pc, #56]	@ (8007dd4 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007d9c:	687a      	ldr	r2, [r7, #4]
 8007d9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007da2:	4610      	mov	r0, r2
 8007da4:	4798      	blx	r3
 8007da6:	4603      	mov	r3, r0
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d002      	beq.n	8007db2 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007dac:	f06f 0304 	mvn.w	r3, #4
 8007db0:	e009      	b.n	8007dc6 <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	005b      	lsls	r3, r3, #1
 8007db6:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dba:	3301      	adds	r3, #1
 8007dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d9d1      	bls.n	8007d68 <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3738      	adds	r7, #56	@ 0x38
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	bd80      	pop	{r7, pc}
 8007dce:	bf00      	nop
 8007dd0:	2000078c 	.word	0x2000078c
 8007dd4:	2000075c 	.word	0x2000075c
 8007dd8:	200000cc 	.word	0x200000cc
 8007ddc:	20000768 	.word	0x20000768

08007de0 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	60b9      	str	r1, [r7, #8]
 8007dea:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2b02      	cmp	r3, #2
 8007df0:	d903      	bls.n	8007dfa <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007df2:	f06f 0301 	mvn.w	r3, #1
 8007df6:	617b      	str	r3, [r7, #20]
 8007df8:	e029      	b.n	8007e4e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007dfa:	4a17      	ldr	r2, [pc, #92]	@ (8007e58 <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	4013      	ands	r3, r2
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d11d      	bne.n	8007e48 <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007e0c:	4a13      	ldr	r2, [pc, #76]	@ (8007e5c <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e14:	4812      	ldr	r0, [pc, #72]	@ (8007e60 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	005b      	lsls	r3, r3, #1
 8007e1c:	4413      	add	r3, r2
 8007e1e:	440b      	add	r3, r1
 8007e20:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e24:	69db      	ldr	r3, [r3, #28]
 8007e26:	490f      	ldr	r1, [pc, #60]	@ (8007e64 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	4610      	mov	r0, r2
 8007e32:	4798      	blx	r3
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e3a:	f06f 0304 	mvn.w	r3, #4
 8007e3e:	617b      	str	r3, [r7, #20]
 8007e40:	e005      	b.n	8007e4e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	617b      	str	r3, [r7, #20]
 8007e46:	e002      	b.n	8007e4e <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007e48:	f06f 0301 	mvn.w	r3, #1
 8007e4c:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007e4e:	697b      	ldr	r3, [r7, #20]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	20000798 	.word	0x20000798
 8007e5c:	200000cc 	.word	0x200000cc
 8007e60:	20000768 	.word	0x20000768
 8007e64:	2000075c 	.word	0x2000075c

08007e68 <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	d903      	bls.n	8007e84 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007e7c:	f06f 0301 	mvn.w	r3, #1
 8007e80:	617b      	str	r3, [r7, #20]
 8007e82:	e02a      	b.n	8007eda <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007e84:	4a17      	ldr	r2, [pc, #92]	@ (8007ee4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d11e      	bne.n	8007ed4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007e96:	4a14      	ldr	r2, [pc, #80]	@ (8007ee8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e9e:	4813      	ldr	r0, [pc, #76]	@ (8007eec <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8007ea0:	68fa      	ldr	r2, [r7, #12]
 8007ea2:	4613      	mov	r3, r2
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	4413      	add	r3, r2
 8007ea8:	440b      	add	r3, r1
 8007eaa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	490f      	ldr	r1, [pc, #60]	@ (8007ef0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007eb8:	ed97 0a01 	vldr	s0, [r7, #4]
 8007ebc:	4610      	mov	r0, r2
 8007ebe:	4798      	blx	r3
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ec6:	f06f 0304 	mvn.w	r3, #4
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e005      	b.n	8007eda <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	617b      	str	r3, [r7, #20]
 8007ed2:	e002      	b.n	8007eda <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007ed4:	f06f 0301 	mvn.w	r3, #1
 8007ed8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007eda:	697b      	ldr	r3, [r7, #20]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3718      	adds	r7, #24
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	20000798 	.word	0x20000798
 8007ee8:	200000cc 	.word	0x200000cc
 8007eec:	20000768 	.word	0x20000768
 8007ef0:	2000075c 	.word	0x2000075c

08007ef4 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	d903      	bls.n	8007f0e <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007f06:	f06f 0301 	mvn.w	r3, #1
 8007f0a:	617b      	str	r3, [r7, #20]
 8007f0c:	e029      	b.n	8007f62 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007f0e:	4a17      	ldr	r2, [pc, #92]	@ (8007f6c <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	4013      	ands	r3, r2
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d11d      	bne.n	8007f5c <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8007f20:	4a13      	ldr	r2, [pc, #76]	@ (8007f70 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f28:	4812      	ldr	r0, [pc, #72]	@ (8007f74 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	005b      	lsls	r3, r3, #1
 8007f30:	4413      	add	r3, r2
 8007f32:	440b      	add	r3, r1
 8007f34:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007f38:	699b      	ldr	r3, [r3, #24]
 8007f3a:	490f      	ldr	r1, [pc, #60]	@ (8007f78 <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8007f3c:	68fa      	ldr	r2, [r7, #12]
 8007f3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	4610      	mov	r0, r2
 8007f46:	4798      	blx	r3
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d003      	beq.n	8007f56 <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f4e:	f06f 0304 	mvn.w	r3, #4
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e005      	b.n	8007f62 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f56:	2300      	movs	r3, #0
 8007f58:	617b      	str	r3, [r7, #20]
 8007f5a:	e002      	b.n	8007f62 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007f5c:	f06f 0301 	mvn.w	r3, #1
 8007f60:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007f62:	697b      	ldr	r3, [r7, #20]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000798 	.word	0x20000798
 8007f70:	200000cc 	.word	0x200000cc
 8007f74:	20000768 	.word	0x20000768
 8007f78:	2000075c 	.word	0x2000075c

08007f7c <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b094      	sub	sp, #80	@ 0x50
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8007f84:	2300      	movs	r3, #0
 8007f86:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8007f88:	2300      	movs	r3, #0
 8007f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8007f8c:	23d7      	movs	r3, #215	@ 0xd7
 8007f8e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8007f92:	4b4b      	ldr	r3, [pc, #300]	@ (80080c0 <LSM6DSO_0_Probe+0x144>)
 8007f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8007f96:	4b4b      	ldr	r3, [pc, #300]	@ (80080c4 <LSM6DSO_0_Probe+0x148>)
 8007f98:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 8007f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80080c8 <LSM6DSO_0_Probe+0x14c>)
 8007f9c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8007f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80080cc <LSM6DSO_0_Probe+0x150>)
 8007fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8007fa2:	4b4b      	ldr	r3, [pc, #300]	@ (80080d0 <LSM6DSO_0_Probe+0x154>)
 8007fa4:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8007fa6:	4b4b      	ldr	r3, [pc, #300]	@ (80080d4 <LSM6DSO_0_Probe+0x158>)
 8007fa8:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8007faa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007fae:	4619      	mov	r1, r3
 8007fb0:	4849      	ldr	r0, [pc, #292]	@ (80080d8 <LSM6DSO_0_Probe+0x15c>)
 8007fb2:	f7fd fe3f 	bl	8005c34 <LSM6DSO_RegisterBusIO>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d003      	beq.n	8007fc4 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fbc:	f06f 0306 	mvn.w	r3, #6
 8007fc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc2:	e077      	b.n	80080b4 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8007fc4:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4843      	ldr	r0, [pc, #268]	@ (80080d8 <LSM6DSO_0_Probe+0x15c>)
 8007fcc:	f7fd ff3c 	bl	8005e48 <LSM6DSO_ReadID>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d003      	beq.n	8007fde <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fd6:	f06f 0306 	mvn.w	r3, #6
 8007fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fdc:	e06a      	b.n	80080b4 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 8007fde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007fe2:	2b6c      	cmp	r3, #108	@ 0x6c
 8007fe4:	d003      	beq.n	8007fee <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007fe6:	f06f 0306 	mvn.w	r3, #6
 8007fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fec:	e062      	b.n	80080b4 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4838      	ldr	r0, [pc, #224]	@ (80080d8 <LSM6DSO_0_Probe+0x15c>)
 8007ff6:	f7fd ff3d 	bl	8005e74 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8007ffa:	7b7b      	ldrb	r3, [r7, #13]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	7b3b      	ldrb	r3, [r7, #12]
 8008000:	005b      	lsls	r3, r3, #1
 8008002:	431a      	orrs	r2, r3
 8008004:	7bbb      	ldrb	r3, [r7, #14]
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4313      	orrs	r3, r2
 800800a:	4a34      	ldr	r2, [pc, #208]	@ (80080dc <LSM6DSO_0_Probe+0x160>)
 800800c:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 800800e:	4b34      	ldr	r3, [pc, #208]	@ (80080e0 <LSM6DSO_0_Probe+0x164>)
 8008010:	4a31      	ldr	r2, [pc, #196]	@ (80080d8 <LSM6DSO_0_Probe+0x15c>)
 8008012:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008014:	4b33      	ldr	r3, [pc, #204]	@ (80080e4 <LSM6DSO_0_Probe+0x168>)
 8008016:	4a34      	ldr	r2, [pc, #208]	@ (80080e8 <LSM6DSO_0_Probe+0x16c>)
 8008018:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800801a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d11d      	bne.n	800805c <LSM6DSO_0_Probe+0xe0>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	2b00      	cmp	r3, #0
 8008028:	d018      	beq.n	800805c <LSM6DSO_0_Probe+0xe0>
 800802a:	7b7b      	ldrb	r3, [r7, #13]
 800802c:	2b01      	cmp	r3, #1
 800802e:	d115      	bne.n	800805c <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008030:	4b2e      	ldr	r3, [pc, #184]	@ (80080ec <LSM6DSO_0_Probe+0x170>)
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	4a2e      	ldr	r2, [pc, #184]	@ (80080f0 <LSM6DSO_0_Probe+0x174>)
 8008036:	492f      	ldr	r1, [pc, #188]	@ (80080f4 <LSM6DSO_0_Probe+0x178>)
 8008038:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800803c:	4b29      	ldr	r3, [pc, #164]	@ (80080e4 <LSM6DSO_0_Probe+0x168>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	@ (80080e0 <LSM6DSO_0_Probe+0x164>)
 8008044:	6812      	ldr	r2, [r2, #0]
 8008046:	4610      	mov	r0, r2
 8008048:	4798      	blx	r3
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008050:	f06f 0304 	mvn.w	r3, #4
 8008054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008056:	e001      	b.n	800805c <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008058:	2300      	movs	r3, #0
 800805a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800805c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800805e:	2b00      	cmp	r3, #0
 8008060:	d11d      	bne.n	800809e <LSM6DSO_0_Probe+0x122>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d018      	beq.n	800809e <LSM6DSO_0_Probe+0x122>
 800806c:	7b3b      	ldrb	r3, [r7, #12]
 800806e:	2b01      	cmp	r3, #1
 8008070:	d115      	bne.n	800809e <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008072:	4b1e      	ldr	r3, [pc, #120]	@ (80080ec <LSM6DSO_0_Probe+0x170>)
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	4a1e      	ldr	r2, [pc, #120]	@ (80080f0 <LSM6DSO_0_Probe+0x174>)
 8008078:	491f      	ldr	r1, [pc, #124]	@ (80080f8 <LSM6DSO_0_Probe+0x17c>)
 800807a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 800807e:	4b19      	ldr	r3, [pc, #100]	@ (80080e4 <LSM6DSO_0_Probe+0x168>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a16      	ldr	r2, [pc, #88]	@ (80080e0 <LSM6DSO_0_Probe+0x164>)
 8008086:	6812      	ldr	r2, [r2, #0]
 8008088:	4610      	mov	r0, r2
 800808a:	4798      	blx	r3
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008092:	f06f 0304 	mvn.w	r3, #4
 8008096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008098:	e001      	b.n	800809e <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800809a:	2300      	movs	r3, #0
 800809c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 800809e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <LSM6DSO_0_Probe+0x138>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f003 0304 	and.w	r3, r3, #4
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d002      	beq.n	80080b4 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80080ae:	f06f 0304 	mvn.w	r3, #4
 80080b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80080b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3750      	adds	r7, #80	@ 0x50
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	08003211 	.word	0x08003211
 80080c4:	0800328d 	.word	0x0800328d
 80080c8:	08003341 	.word	0x08003341
 80080cc:	080032dd 	.word	0x080032dd
 80080d0:	080033a5 	.word	0x080033a5
 80080d4:	08001bcd 	.word	0x08001bcd
 80080d8:	200007a4 	.word	0x200007a4
 80080dc:	20000798 	.word	0x20000798
 80080e0:	2000075c 	.word	0x2000075c
 80080e4:	2000078c 	.word	0x2000078c
 80080e8:	20000074 	.word	0x20000074
 80080ec:	200000cc 	.word	0x200000cc
 80080f0:	20000768 	.word	0x20000768
 80080f4:	200000a8 	.word	0x200000a8
 80080f8:	20000084 	.word	0x20000084

080080fc <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b094      	sub	sp, #80	@ 0x50
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008104:	2300      	movs	r3, #0
 8008106:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 8008108:	2300      	movs	r3, #0
 800810a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 800810c:	2333      	movs	r3, #51	@ 0x33
 800810e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008112:	4b40      	ldr	r3, [pc, #256]	@ (8008214 <LIS2DW12_0_Probe+0x118>)
 8008114:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008116:	4b40      	ldr	r3, [pc, #256]	@ (8008218 <LIS2DW12_0_Probe+0x11c>)
 8008118:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800811a:	4b40      	ldr	r3, [pc, #256]	@ (800821c <LIS2DW12_0_Probe+0x120>)
 800811c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800811e:	4b40      	ldr	r3, [pc, #256]	@ (8008220 <LIS2DW12_0_Probe+0x124>)
 8008120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008122:	4b40      	ldr	r3, [pc, #256]	@ (8008224 <LIS2DW12_0_Probe+0x128>)
 8008124:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008126:	4b40      	ldr	r3, [pc, #256]	@ (8008228 <LIS2DW12_0_Probe+0x12c>)
 8008128:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800812a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800812e:	4619      	mov	r1, r3
 8008130:	483e      	ldr	r0, [pc, #248]	@ (800822c <LIS2DW12_0_Probe+0x130>)
 8008132:	f7fb faf3 	bl	800371c <LIS2DW12_RegisterBusIO>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d003      	beq.n	8008144 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800813c:	f06f 0306 	mvn.w	r3, #6
 8008140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008142:	e062      	b.n	800820a <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008144:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008148:	4619      	mov	r1, r3
 800814a:	4838      	ldr	r0, [pc, #224]	@ (800822c <LIS2DW12_0_Probe+0x130>)
 800814c:	f7fb fbd4 	bl	80038f8 <LIS2DW12_ReadID>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d003      	beq.n	800815e <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008156:	f06f 0306 	mvn.w	r3, #6
 800815a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815c:	e055      	b.n	800820a <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 800815e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008162:	2b44      	cmp	r3, #68	@ 0x44
 8008164:	d003      	beq.n	800816e <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008166:	f06f 0306 	mvn.w	r3, #6
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800816c:	e04d      	b.n	800820a <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	4619      	mov	r1, r3
 8008174:	482d      	ldr	r0, [pc, #180]	@ (800822c <LIS2DW12_0_Probe+0x130>)
 8008176:	f7fb fbd5 	bl	8003924 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800817a:	7b7b      	ldrb	r3, [r7, #13]
 800817c:	461a      	mov	r2, r3
 800817e:	7b3b      	ldrb	r3, [r7, #12]
 8008180:	005b      	lsls	r3, r3, #1
 8008182:	431a      	orrs	r2, r3
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4313      	orrs	r3, r2
 800818a:	4a29      	ldr	r2, [pc, #164]	@ (8008230 <LIS2DW12_0_Probe+0x134>)
 800818c:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 800818e:	4b29      	ldr	r3, [pc, #164]	@ (8008234 <LIS2DW12_0_Probe+0x138>)
 8008190:	4a26      	ldr	r2, [pc, #152]	@ (800822c <LIS2DW12_0_Probe+0x130>)
 8008192:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008194:	4b28      	ldr	r3, [pc, #160]	@ (8008238 <LIS2DW12_0_Probe+0x13c>)
 8008196:	4a29      	ldr	r2, [pc, #164]	@ (800823c <LIS2DW12_0_Probe+0x140>)
 8008198:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800819a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d11e      	bne.n	80081de <LIS2DW12_0_Probe+0xe2>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f003 0302 	and.w	r3, r3, #2
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d019      	beq.n	80081de <LIS2DW12_0_Probe+0xe2>
 80081aa:	7b3b      	ldrb	r3, [r7, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d116      	bne.n	80081de <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80081b0:	4b23      	ldr	r3, [pc, #140]	@ (8008240 <LIS2DW12_0_Probe+0x144>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a23      	ldr	r2, [pc, #140]	@ (8008244 <LIS2DW12_0_Probe+0x148>)
 80081b6:	3303      	adds	r3, #3
 80081b8:	4923      	ldr	r1, [pc, #140]	@ (8008248 <LIS2DW12_0_Probe+0x14c>)
 80081ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80081be:	4b1e      	ldr	r3, [pc, #120]	@ (8008238 <LIS2DW12_0_Probe+0x13c>)
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a1b      	ldr	r2, [pc, #108]	@ (8008234 <LIS2DW12_0_Probe+0x138>)
 80081c6:	6852      	ldr	r2, [r2, #4]
 80081c8:	4610      	mov	r0, r2
 80081ca:	4798      	blx	r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80081d2:	f06f 0304 	mvn.w	r3, #4
 80081d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081d8:	e001      	b.n	80081de <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80081da:	2300      	movs	r3, #0
 80081dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80081de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d107      	bne.n	80081f4 <LIS2DW12_0_Probe+0xf8>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f003 0301 	and.w	r3, r3, #1
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d002      	beq.n	80081f4 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081ee:	f06f 0304 	mvn.w	r3, #4
 80081f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80081f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d107      	bne.n	800820a <LIS2DW12_0_Probe+0x10e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f003 0304 	and.w	r3, r3, #4
 8008200:	2b00      	cmp	r3, #0
 8008202:	d002      	beq.n	800820a <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008204:	f06f 0304 	mvn.w	r3, #4
 8008208:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800820a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800820c:	4618      	mov	r0, r3
 800820e:	3750      	adds	r7, #80	@ 0x50
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	08003211 	.word	0x08003211
 8008218:	0800328d 	.word	0x0800328d
 800821c:	08003341 	.word	0x08003341
 8008220:	080032dd 	.word	0x080032dd
 8008224:	080033a5 	.word	0x080033a5
 8008228:	08001bcd 	.word	0x08001bcd
 800822c:	200007dc 	.word	0x200007dc
 8008230:	20000798 	.word	0x20000798
 8008234:	2000075c 	.word	0x2000075c
 8008238:	2000078c 	.word	0x2000078c
 800823c:	2000000c 	.word	0x2000000c
 8008240:	200000cc 	.word	0x200000cc
 8008244:	20000768 	.word	0x20000768
 8008248:	2000001c 	.word	0x2000001c

0800824c <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b094      	sub	sp, #80	@ 0x50
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008254:	2300      	movs	r3, #0
 8008256:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 8008258:	2300      	movs	r3, #0
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 800825c:	233d      	movs	r3, #61	@ 0x3d
 800825e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008262:	4b40      	ldr	r3, [pc, #256]	@ (8008364 <LIS2MDL_0_Probe+0x118>)
 8008264:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 8008266:	4b40      	ldr	r3, [pc, #256]	@ (8008368 <LIS2MDL_0_Probe+0x11c>)
 8008268:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800826a:	4b40      	ldr	r3, [pc, #256]	@ (800836c <LIS2MDL_0_Probe+0x120>)
 800826c:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 800826e:	4b40      	ldr	r3, [pc, #256]	@ (8008370 <LIS2MDL_0_Probe+0x124>)
 8008270:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008272:	4b40      	ldr	r3, [pc, #256]	@ (8008374 <LIS2MDL_0_Probe+0x128>)
 8008274:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 8008276:	4b40      	ldr	r3, [pc, #256]	@ (8008378 <LIS2MDL_0_Probe+0x12c>)
 8008278:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800827a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800827e:	4619      	mov	r1, r3
 8008280:	483e      	ldr	r0, [pc, #248]	@ (800837c <LIS2MDL_0_Probe+0x130>)
 8008282:	f7fc fcd7 	bl	8004c34 <LIS2MDL_RegisterBusIO>
 8008286:	4603      	mov	r3, r0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d003      	beq.n	8008294 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800828c:	f06f 0306 	mvn.w	r3, #6
 8008290:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008292:	e062      	b.n	800835a <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008294:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 8008298:	4619      	mov	r1, r3
 800829a:	4838      	ldr	r0, [pc, #224]	@ (800837c <LIS2MDL_0_Probe+0x130>)
 800829c:	f7fc fde6 	bl	8004e6c <LIS2MDL_ReadID>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d003      	beq.n	80082ae <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80082a6:	f06f 0306 	mvn.w	r3, #6
 80082aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082ac:	e055      	b.n	800835a <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80082ae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082b2:	2b40      	cmp	r3, #64	@ 0x40
 80082b4:	d003      	beq.n	80082be <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80082b6:	f06f 0306 	mvn.w	r3, #6
 80082ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082bc:	e04d      	b.n	800835a <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80082be:	f107 030c 	add.w	r3, r7, #12
 80082c2:	4619      	mov	r1, r3
 80082c4:	482d      	ldr	r0, [pc, #180]	@ (800837c <LIS2MDL_0_Probe+0x130>)
 80082c6:	f7fc fdf7 	bl	8004eb8 <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80082ca:	7b7b      	ldrb	r3, [r7, #13]
 80082cc:	461a      	mov	r2, r3
 80082ce:	7b3b      	ldrb	r3, [r7, #12]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	431a      	orrs	r2, r3
 80082d4:	7bbb      	ldrb	r3, [r7, #14]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4313      	orrs	r3, r2
 80082da:	4a29      	ldr	r2, [pc, #164]	@ (8008380 <LIS2MDL_0_Probe+0x134>)
 80082dc:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80082de:	4b29      	ldr	r3, [pc, #164]	@ (8008384 <LIS2MDL_0_Probe+0x138>)
 80082e0:	4a26      	ldr	r2, [pc, #152]	@ (800837c <LIS2MDL_0_Probe+0x130>)
 80082e2:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80082e4:	4b28      	ldr	r3, [pc, #160]	@ (8008388 <LIS2MDL_0_Probe+0x13c>)
 80082e6:	4a29      	ldr	r2, [pc, #164]	@ (800838c <LIS2MDL_0_Probe+0x140>)
 80082e8:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80082ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d11e      	bne.n	800832e <LIS2MDL_0_Probe+0xe2>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d019      	beq.n	800832e <LIS2MDL_0_Probe+0xe2>
 80082fa:	7bbb      	ldrb	r3, [r7, #14]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d116      	bne.n	800832e <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008300:	4b23      	ldr	r3, [pc, #140]	@ (8008390 <LIS2MDL_0_Probe+0x144>)
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	4a23      	ldr	r2, [pc, #140]	@ (8008394 <LIS2MDL_0_Probe+0x148>)
 8008306:	3306      	adds	r3, #6
 8008308:	4923      	ldr	r1, [pc, #140]	@ (8008398 <LIS2MDL_0_Probe+0x14c>)
 800830a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 800830e:	4b1e      	ldr	r3, [pc, #120]	@ (8008388 <LIS2MDL_0_Probe+0x13c>)
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a1b      	ldr	r2, [pc, #108]	@ (8008384 <LIS2MDL_0_Probe+0x138>)
 8008316:	6892      	ldr	r2, [r2, #8]
 8008318:	4610      	mov	r0, r2
 800831a:	4798      	blx	r3
 800831c:	4603      	mov	r3, r0
 800831e:	2b00      	cmp	r3, #0
 8008320:	d003      	beq.n	800832a <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008322:	f06f 0304 	mvn.w	r3, #4
 8008326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008328:	e001      	b.n	800832e <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800832a:	2300      	movs	r3, #0
 800832c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 800832e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008330:	2b00      	cmp	r3, #0
 8008332:	d107      	bne.n	8008344 <LIS2MDL_0_Probe+0xf8>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800833e:	f06f 0304 	mvn.w	r3, #4
 8008342:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008344:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008346:	2b00      	cmp	r3, #0
 8008348:	d107      	bne.n	800835a <LIS2MDL_0_Probe+0x10e>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f003 0301 	and.w	r3, r3, #1
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008354:	f06f 0304 	mvn.w	r3, #4
 8008358:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800835a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800835c:	4618      	mov	r0, r3
 800835e:	3750      	adds	r7, #80	@ 0x50
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}
 8008364:	08003211 	.word	0x08003211
 8008368:	0800328d 	.word	0x0800328d
 800836c:	08003341 	.word	0x08003341
 8008370:	080032dd 	.word	0x080032dd
 8008374:	080033a5 	.word	0x080033a5
 8008378:	08001bcd 	.word	0x08001bcd
 800837c:	20000818 	.word	0x20000818
 8008380:	20000798 	.word	0x20000798
 8008384:	2000075c 	.word	0x2000075c
 8008388:	2000078c 	.word	0x2000078c
 800838c:	20000040 	.word	0x20000040
 8008390:	200000cc 	.word	0x200000cc
 8008394:	20000768 	.word	0x20000768
 8008398:	20000050 	.word	0x20000050

0800839c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80083a2:	2300      	movs	r3, #0
 80083a4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80083a6:	4b0c      	ldr	r3, [pc, #48]	@ (80083d8 <HAL_Init+0x3c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a0b      	ldr	r2, [pc, #44]	@ (80083d8 <HAL_Init+0x3c>)
 80083ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083b0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083b2:	2003      	movs	r0, #3
 80083b4:	f000 f9b4 	bl	8008720 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80083b8:	2000      	movs	r0, #0
 80083ba:	f000 f80f 	bl	80083dc <HAL_InitTick>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	71fb      	strb	r3, [r7, #7]
 80083c8:	e001      	b.n	80083ce <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80083ca:	f7fa fd56 	bl	8002e7a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80083ce:	79fb      	ldrb	r3, [r7, #7]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3708      	adds	r7, #8
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	58004000 	.word	0x58004000

080083dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80083e4:	2300      	movs	r3, #0
 80083e6:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80083e8:	4b17      	ldr	r3, [pc, #92]	@ (8008448 <HAL_InitTick+0x6c>)
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d024      	beq.n	800843a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80083f0:	f002 fef8 	bl	800b1e4 <HAL_RCC_GetHCLKFreq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4b14      	ldr	r3, [pc, #80]	@ (8008448 <HAL_InitTick+0x6c>)
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	4619      	mov	r1, r3
 80083fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008400:	fbb3 f3f1 	udiv	r3, r3, r1
 8008404:	fbb2 f3f3 	udiv	r3, r2, r3
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f9ca 	bl	80087a2 <HAL_SYSTICK_Config>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10f      	bne.n	8008434 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2b0f      	cmp	r3, #15
 8008418:	d809      	bhi.n	800842e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800841a:	2200      	movs	r2, #0
 800841c:	6879      	ldr	r1, [r7, #4]
 800841e:	f04f 30ff 	mov.w	r0, #4294967295
 8008422:	f000 f988 	bl	8008736 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008426:	4a09      	ldr	r2, [pc, #36]	@ (800844c <HAL_InitTick+0x70>)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6013      	str	r3, [r2, #0]
 800842c:	e007      	b.n	800843e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	e004      	b.n	800843e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]
 8008438:	e001      	b.n	800843e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	200000e4 	.word	0x200000e4
 800844c:	200000e0 	.word	0x200000e0

08008450 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008454:	4b06      	ldr	r3, [pc, #24]	@ (8008470 <HAL_IncTick+0x20>)
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	461a      	mov	r2, r3
 800845a:	4b06      	ldr	r3, [pc, #24]	@ (8008474 <HAL_IncTick+0x24>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4413      	add	r3, r2
 8008460:	4a04      	ldr	r2, [pc, #16]	@ (8008474 <HAL_IncTick+0x24>)
 8008462:	6013      	str	r3, [r2, #0]
}
 8008464:	bf00      	nop
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	200000e4 	.word	0x200000e4
 8008474:	2000084c 	.word	0x2000084c

08008478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008478:	b480      	push	{r7}
 800847a:	af00      	add	r7, sp, #0
  return uwTick;
 800847c:	4b03      	ldr	r3, [pc, #12]	@ (800848c <HAL_GetTick+0x14>)
 800847e:	681b      	ldr	r3, [r3, #0]
}
 8008480:	4618      	mov	r0, r3
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	2000084c 	.word	0x2000084c

08008490 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008490:	b480      	push	{r7}
 8008492:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008494:	4b03      	ldr	r3, [pc, #12]	@ (80084a4 <HAL_GetTickPrio+0x14>)
 8008496:	681b      	ldr	r3, [r3, #0]
}
 8008498:	4618      	mov	r0, r3
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	200000e0 	.word	0x200000e0

080084a8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80084a8:	b480      	push	{r7}
 80084aa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80084ac:	4b03      	ldr	r3, [pc, #12]	@ (80084bc <HAL_GetTickFreq+0x14>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	200000e4 	.word	0x200000e4

080084c0 <__NVIC_SetPriorityGrouping>:
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f003 0307 	and.w	r3, r3, #7
 80084ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008504 <__NVIC_SetPriorityGrouping+0x44>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084d6:	68ba      	ldr	r2, [r7, #8]
 80084d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80084dc:	4013      	ands	r3, r2
 80084de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80084e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80084ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80084f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80084f2:	4a04      	ldr	r2, [pc, #16]	@ (8008504 <__NVIC_SetPriorityGrouping+0x44>)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	60d3      	str	r3, [r2, #12]
}
 80084f8:	bf00      	nop
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	e000ed00 	.word	0xe000ed00

08008508 <__NVIC_GetPriorityGrouping>:
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800850c:	4b04      	ldr	r3, [pc, #16]	@ (8008520 <__NVIC_GetPriorityGrouping+0x18>)
 800850e:	68db      	ldr	r3, [r3, #12]
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	f003 0307 	and.w	r3, r3, #7
}
 8008516:	4618      	mov	r0, r3
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr
 8008520:	e000ed00 	.word	0xe000ed00

08008524 <__NVIC_EnableIRQ>:
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	4603      	mov	r3, r0
 800852c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800852e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008532:	2b00      	cmp	r3, #0
 8008534:	db0b      	blt.n	800854e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008536:	79fb      	ldrb	r3, [r7, #7]
 8008538:	f003 021f 	and.w	r2, r3, #31
 800853c:	4907      	ldr	r1, [pc, #28]	@ (800855c <__NVIC_EnableIRQ+0x38>)
 800853e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008542:	095b      	lsrs	r3, r3, #5
 8008544:	2001      	movs	r0, #1
 8008546:	fa00 f202 	lsl.w	r2, r0, r2
 800854a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800854e:	bf00      	nop
 8008550:	370c      	adds	r7, #12
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	e000e100 	.word	0xe000e100

08008560 <__NVIC_DisableIRQ>:
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	4603      	mov	r3, r0
 8008568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800856a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800856e:	2b00      	cmp	r3, #0
 8008570:	db12      	blt.n	8008598 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008572:	79fb      	ldrb	r3, [r7, #7]
 8008574:	f003 021f 	and.w	r2, r3, #31
 8008578:	490a      	ldr	r1, [pc, #40]	@ (80085a4 <__NVIC_DisableIRQ+0x44>)
 800857a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857e:	095b      	lsrs	r3, r3, #5
 8008580:	2001      	movs	r0, #1
 8008582:	fa00 f202 	lsl.w	r2, r0, r2
 8008586:	3320      	adds	r3, #32
 8008588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800858c:	f3bf 8f4f 	dsb	sy
}
 8008590:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008592:	f3bf 8f6f 	isb	sy
}
 8008596:	bf00      	nop
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr
 80085a4:	e000e100 	.word	0xe000e100

080085a8 <__NVIC_SetPendingIRQ>:
{
 80085a8:	b480      	push	{r7}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	4603      	mov	r3, r0
 80085b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	db0c      	blt.n	80085d4 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085ba:	79fb      	ldrb	r3, [r7, #7]
 80085bc:	f003 021f 	and.w	r2, r3, #31
 80085c0:	4907      	ldr	r1, [pc, #28]	@ (80085e0 <__NVIC_SetPendingIRQ+0x38>)
 80085c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085c6:	095b      	lsrs	r3, r3, #5
 80085c8:	2001      	movs	r0, #1
 80085ca:	fa00 f202 	lsl.w	r2, r0, r2
 80085ce:	3340      	adds	r3, #64	@ 0x40
 80085d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80085d4:	bf00      	nop
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr
 80085e0:	e000e100 	.word	0xe000e100

080085e4 <__NVIC_ClearPendingIRQ>:
{
 80085e4:	b480      	push	{r7}
 80085e6:	b083      	sub	sp, #12
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	db0c      	blt.n	8008610 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	f003 021f 	and.w	r2, r3, #31
 80085fc:	4907      	ldr	r1, [pc, #28]	@ (800861c <__NVIC_ClearPendingIRQ+0x38>)
 80085fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008602:	095b      	lsrs	r3, r3, #5
 8008604:	2001      	movs	r0, #1
 8008606:	fa00 f202 	lsl.w	r2, r0, r2
 800860a:	3360      	adds	r3, #96	@ 0x60
 800860c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008610:	bf00      	nop
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr
 800861c:	e000e100 	.word	0xe000e100

08008620 <__NVIC_SetPriority>:
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	4603      	mov	r3, r0
 8008628:	6039      	str	r1, [r7, #0]
 800862a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800862c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008630:	2b00      	cmp	r3, #0
 8008632:	db0a      	blt.n	800864a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	b2da      	uxtb	r2, r3
 8008638:	490c      	ldr	r1, [pc, #48]	@ (800866c <__NVIC_SetPriority+0x4c>)
 800863a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800863e:	0112      	lsls	r2, r2, #4
 8008640:	b2d2      	uxtb	r2, r2
 8008642:	440b      	add	r3, r1
 8008644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008648:	e00a      	b.n	8008660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	b2da      	uxtb	r2, r3
 800864e:	4908      	ldr	r1, [pc, #32]	@ (8008670 <__NVIC_SetPriority+0x50>)
 8008650:	79fb      	ldrb	r3, [r7, #7]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	3b04      	subs	r3, #4
 8008658:	0112      	lsls	r2, r2, #4
 800865a:	b2d2      	uxtb	r2, r2
 800865c:	440b      	add	r3, r1
 800865e:	761a      	strb	r2, [r3, #24]
}
 8008660:	bf00      	nop
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	e000e100 	.word	0xe000e100
 8008670:	e000ed00 	.word	0xe000ed00

08008674 <NVIC_EncodePriority>:
{
 8008674:	b480      	push	{r7}
 8008676:	b089      	sub	sp, #36	@ 0x24
 8008678:	af00      	add	r7, sp, #0
 800867a:	60f8      	str	r0, [r7, #12]
 800867c:	60b9      	str	r1, [r7, #8]
 800867e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f1c3 0307 	rsb	r3, r3, #7
 800868e:	2b04      	cmp	r3, #4
 8008690:	bf28      	it	cs
 8008692:	2304      	movcs	r3, #4
 8008694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	3304      	adds	r3, #4
 800869a:	2b06      	cmp	r3, #6
 800869c:	d902      	bls.n	80086a4 <NVIC_EncodePriority+0x30>
 800869e:	69fb      	ldr	r3, [r7, #28]
 80086a0:	3b03      	subs	r3, #3
 80086a2:	e000      	b.n	80086a6 <NVIC_EncodePriority+0x32>
 80086a4:	2300      	movs	r3, #0
 80086a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	69bb      	ldr	r3, [r7, #24]
 80086ae:	fa02 f303 	lsl.w	r3, r2, r3
 80086b2:	43da      	mvns	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	401a      	ands	r2, r3
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80086bc:	f04f 31ff 	mov.w	r1, #4294967295
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	43d9      	mvns	r1, r3
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80086cc:	4313      	orrs	r3, r2
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3724      	adds	r7, #36	@ 0x24
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
	...

080086dc <SysTick_Config>:
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80086ec:	d301      	bcc.n	80086f2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80086ee:	2301      	movs	r3, #1
 80086f0:	e00f      	b.n	8008712 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086f2:	4a0a      	ldr	r2, [pc, #40]	@ (800871c <SysTick_Config+0x40>)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	3b01      	subs	r3, #1
 80086f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086fa:	210f      	movs	r1, #15
 80086fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008700:	f7ff ff8e 	bl	8008620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008704:	4b05      	ldr	r3, [pc, #20]	@ (800871c <SysTick_Config+0x40>)
 8008706:	2200      	movs	r2, #0
 8008708:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800870a:	4b04      	ldr	r3, [pc, #16]	@ (800871c <SysTick_Config+0x40>)
 800870c:	2207      	movs	r2, #7
 800870e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
 800871a:	bf00      	nop
 800871c:	e000e010 	.word	0xe000e010

08008720 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b082      	sub	sp, #8
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f7ff fec9 	bl	80084c0 <__NVIC_SetPriorityGrouping>
}
 800872e:	bf00      	nop
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}

08008736 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008736:	b580      	push	{r7, lr}
 8008738:	b086      	sub	sp, #24
 800873a:	af00      	add	r7, sp, #0
 800873c:	4603      	mov	r3, r0
 800873e:	60b9      	str	r1, [r7, #8]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008744:	f7ff fee0 	bl	8008508 <__NVIC_GetPriorityGrouping>
 8008748:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	6978      	ldr	r0, [r7, #20]
 8008750:	f7ff ff90 	bl	8008674 <NVIC_EncodePriority>
 8008754:	4602      	mov	r2, r0
 8008756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f7ff ff5f 	bl	8008620 <__NVIC_SetPriority>
}
 8008762:	bf00      	nop
 8008764:	3718      	adds	r7, #24
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b082      	sub	sp, #8
 800876e:	af00      	add	r7, sp, #0
 8008770:	4603      	mov	r3, r0
 8008772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008778:	4618      	mov	r0, r3
 800877a:	f7ff fed3 	bl	8008524 <__NVIC_EnableIRQ>
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	4603      	mov	r3, r0
 800878e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fee3 	bl	8008560 <__NVIC_DisableIRQ>
}
 800879a:	bf00      	nop
 800879c:	3708      	adds	r7, #8
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff ff96 	bl	80086dc <SysTick_Config>
 80087b0:	4603      	mov	r3, r0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	4603      	mov	r3, r0
 80087c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80087c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7ff feed 	bl	80085a8 <__NVIC_SetPendingIRQ>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b082      	sub	sp, #8
 80087da:	af00      	add	r7, sp, #0
 80087dc:	4603      	mov	r3, r0
 80087de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80087e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7ff fefd 	bl	80085e4 <__NVIC_ClearPendingIRQ>
}
 80087ea:	bf00      	nop
 80087ec:	3708      	adds	r7, #8
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
	...

080087f4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e08e      	b.n	8008924 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	4b47      	ldr	r3, [pc, #284]	@ (800892c <HAL_DMA_Init+0x138>)
 800880e:	429a      	cmp	r2, r3
 8008810:	d80f      	bhi.n	8008832 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	461a      	mov	r2, r3
 8008818:	4b45      	ldr	r3, [pc, #276]	@ (8008930 <HAL_DMA_Init+0x13c>)
 800881a:	4413      	add	r3, r2
 800881c:	4a45      	ldr	r2, [pc, #276]	@ (8008934 <HAL_DMA_Init+0x140>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	091b      	lsrs	r3, r3, #4
 8008824:	009a      	lsls	r2, r3, #2
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a42      	ldr	r2, [pc, #264]	@ (8008938 <HAL_DMA_Init+0x144>)
 800882e:	641a      	str	r2, [r3, #64]	@ 0x40
 8008830:	e00e      	b.n	8008850 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	4b40      	ldr	r3, [pc, #256]	@ (800893c <HAL_DMA_Init+0x148>)
 800883a:	4413      	add	r3, r2
 800883c:	4a3d      	ldr	r2, [pc, #244]	@ (8008934 <HAL_DMA_Init+0x140>)
 800883e:	fba2 2303 	umull	r2, r3, r2, r3
 8008842:	091b      	lsrs	r3, r3, #4
 8008844:	009a      	lsls	r2, r3, #2
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a3c      	ldr	r2, [pc, #240]	@ (8008940 <HAL_DMA_Init+0x14c>)
 800884e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800886a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008874:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008880:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800888c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a1b      	ldr	r3, [r3, #32]
 8008892:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008894:	68fa      	ldr	r2, [r7, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f8fe 	bl	8008aa4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80088b0:	d102      	bne.n	80088b8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	685a      	ldr	r2, [r3, #4]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088c0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80088c4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80088ce:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d010      	beq.n	80088fa <HAL_DMA_Init+0x106>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b04      	cmp	r3, #4
 80088de:	d80c      	bhi.n	80088fa <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f91d 	bl	8008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088ea:	2200      	movs	r2, #0
 80088ec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80088f6:	605a      	str	r2, [r3, #4]
 80088f8:	e008      	b.n	800890c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008922:	2300      	movs	r3, #0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3710      	adds	r7, #16
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	40020407 	.word	0x40020407
 8008930:	bffdfff8 	.word	0xbffdfff8
 8008934:	cccccccd 	.word	0xcccccccd
 8008938:	40020000 	.word	0x40020000
 800893c:	bffdfbf8 	.word	0xbffdfbf8
 8008940:	40020400 	.word	0x40020400

08008944 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008960:	f003 031c 	and.w	r3, r3, #28
 8008964:	2204      	movs	r2, #4
 8008966:	409a      	lsls	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4013      	ands	r3, r2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d026      	beq.n	80089be <HAL_DMA_IRQHandler+0x7a>
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d021      	beq.n	80089be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0320 	and.w	r3, r3, #32
 8008984:	2b00      	cmp	r3, #0
 8008986:	d107      	bne.n	8008998 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f022 0204 	bic.w	r2, r2, #4
 8008996:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800899c:	f003 021c 	and.w	r2, r3, #28
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a4:	2104      	movs	r1, #4
 80089a6:	fa01 f202 	lsl.w	r2, r1, r2
 80089aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d071      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80089bc:	e06c      	b.n	8008a98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c2:	f003 031c 	and.w	r3, r3, #28
 80089c6:	2202      	movs	r2, #2
 80089c8:	409a      	lsls	r2, r3
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4013      	ands	r3, r2
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d02e      	beq.n	8008a30 <HAL_DMA_IRQHandler+0xec>
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f003 0302 	and.w	r3, r3, #2
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d029      	beq.n	8008a30 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0320 	and.w	r3, r3, #32
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10b      	bne.n	8008a02 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 020a 	bic.w	r2, r2, #10
 80089f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a06:	f003 021c 	and.w	r2, r3, #28
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a0e:	2102      	movs	r1, #2
 8008a10:	fa01 f202 	lsl.w	r2, r1, r2
 8008a14:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d038      	beq.n	8008a98 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008a2e:	e033      	b.n	8008a98 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a34:	f003 031c 	and.w	r3, r3, #28
 8008a38:	2208      	movs	r2, #8
 8008a3a:	409a      	lsls	r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d02a      	beq.n	8008a9a <HAL_DMA_IRQHandler+0x156>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 0308 	and.w	r3, r3, #8
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d025      	beq.n	8008a9a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f022 020e 	bic.w	r2, r2, #14
 8008a5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a62:	f003 021c 	and.w	r2, r3, #28
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a6a:	2101      	movs	r1, #1
 8008a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8008a70:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d004      	beq.n	8008a9a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a98:	bf00      	nop
 8008a9a:	bf00      	nop
}
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	461a      	mov	r2, r3
 8008ab2:	4b17      	ldr	r3, [pc, #92]	@ (8008b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d80a      	bhi.n	8008ace <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008abc:	089b      	lsrs	r3, r3, #2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008ac4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	6493      	str	r3, [r2, #72]	@ 0x48
 8008acc:	e007      	b.n	8008ade <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ad2:	089b      	lsrs	r3, r3, #2
 8008ad4:	009a      	lsls	r2, r3, #2
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008ad8:	4413      	add	r3, r2
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	b2db      	uxtb	r3, r3
 8008ae4:	3b08      	subs	r3, #8
 8008ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8008b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8008aec:	091b      	lsrs	r3, r3, #4
 8008aee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a0a      	ldr	r2, [pc, #40]	@ (8008b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008af4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f003 031f 	and.w	r3, r3, #31
 8008afc:	2201      	movs	r2, #1
 8008afe:	409a      	lsls	r2, r3
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008b04:	bf00      	nop
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	40020407 	.word	0x40020407
 8008b14:	4002081c 	.word	0x4002081c
 8008b18:	cccccccd 	.word	0xcccccccd
 8008b1c:	40020880 	.word	0x40020880

08008b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b30:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008b32:	68fa      	ldr	r2, [r7, #12]
 8008b34:	4b0b      	ldr	r3, [pc, #44]	@ (8008b64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008b36:	4413      	add	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a09      	ldr	r2, [pc, #36]	@ (8008b68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008b44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2201      	movs	r2, #1
 8008b50:	409a      	lsls	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	1000823f 	.word	0x1000823f
 8008b68:	40020940 	.word	0x40020940

08008b6c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b087      	sub	sp, #28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008b7a:	e14c      	b.n	8008e16 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	2101      	movs	r1, #1
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	fa01 f303 	lsl.w	r3, r1, r3
 8008b88:	4013      	ands	r3, r2
 8008b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 813e 	beq.w	8008e10 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f003 0303 	and.w	r3, r3, #3
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d005      	beq.n	8008bac <HAL_GPIO_Init+0x40>
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f003 0303 	and.w	r3, r3, #3
 8008ba8:	2b02      	cmp	r3, #2
 8008baa:	d130      	bne.n	8008c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	005b      	lsls	r3, r3, #1
 8008bb6:	2203      	movs	r2, #3
 8008bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbc:	43db      	mvns	r3, r3
 8008bbe:	693a      	ldr	r2, [r7, #16]
 8008bc0:	4013      	ands	r3, r2
 8008bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	68da      	ldr	r2, [r3, #12]
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	005b      	lsls	r3, r3, #1
 8008bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd0:	693a      	ldr	r2, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008be2:	2201      	movs	r2, #1
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	fa02 f303 	lsl.w	r3, r2, r3
 8008bea:	43db      	mvns	r3, r3
 8008bec:	693a      	ldr	r2, [r7, #16]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	091b      	lsrs	r3, r3, #4
 8008bf8:	f003 0201 	and.w	r2, r3, #1
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	693a      	ldr	r2, [r7, #16]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	f003 0303 	and.w	r3, r3, #3
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d017      	beq.n	8008c4a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	005b      	lsls	r3, r3, #1
 8008c24:	2203      	movs	r2, #3
 8008c26:	fa02 f303 	lsl.w	r3, r2, r3
 8008c2a:	43db      	mvns	r3, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	4013      	ands	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	689a      	ldr	r2, [r3, #8]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	005b      	lsls	r3, r3, #1
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	f003 0303 	and.w	r3, r3, #3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d123      	bne.n	8008c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	08da      	lsrs	r2, r3, #3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3208      	adds	r2, #8
 8008c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	220f      	movs	r2, #15
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	43db      	mvns	r3, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4013      	ands	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	691a      	ldr	r2, [r3, #16]
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f003 0307 	and.w	r3, r3, #7
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	08da      	lsrs	r2, r3, #3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3208      	adds	r2, #8
 8008c98:	6939      	ldr	r1, [r7, #16]
 8008c9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	005b      	lsls	r3, r3, #1
 8008ca8:	2203      	movs	r2, #3
 8008caa:	fa02 f303 	lsl.w	r3, r2, r3
 8008cae:	43db      	mvns	r3, r3
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f003 0203 	and.w	r2, r3, #3
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	693a      	ldr	r2, [r7, #16]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	693a      	ldr	r2, [r7, #16]
 8008cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8098 	beq.w	8008e10 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008ce0:	4a54      	ldr	r2, [pc, #336]	@ (8008e34 <HAL_GPIO_Init+0x2c8>)
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	089b      	lsrs	r3, r3, #2
 8008ce6:	3302      	adds	r3, #2
 8008ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f003 0303 	and.w	r3, r3, #3
 8008cf4:	009b      	lsls	r3, r3, #2
 8008cf6:	220f      	movs	r2, #15
 8008cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4013      	ands	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d0a:	d019      	beq.n	8008d40 <HAL_GPIO_Init+0x1d4>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e38 <HAL_GPIO_Init+0x2cc>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d013      	beq.n	8008d3c <HAL_GPIO_Init+0x1d0>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a49      	ldr	r2, [pc, #292]	@ (8008e3c <HAL_GPIO_Init+0x2d0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d00d      	beq.n	8008d38 <HAL_GPIO_Init+0x1cc>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a48      	ldr	r2, [pc, #288]	@ (8008e40 <HAL_GPIO_Init+0x2d4>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d007      	beq.n	8008d34 <HAL_GPIO_Init+0x1c8>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a47      	ldr	r2, [pc, #284]	@ (8008e44 <HAL_GPIO_Init+0x2d8>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d101      	bne.n	8008d30 <HAL_GPIO_Init+0x1c4>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	e008      	b.n	8008d42 <HAL_GPIO_Init+0x1d6>
 8008d30:	2307      	movs	r3, #7
 8008d32:	e006      	b.n	8008d42 <HAL_GPIO_Init+0x1d6>
 8008d34:	2303      	movs	r3, #3
 8008d36:	e004      	b.n	8008d42 <HAL_GPIO_Init+0x1d6>
 8008d38:	2302      	movs	r3, #2
 8008d3a:	e002      	b.n	8008d42 <HAL_GPIO_Init+0x1d6>
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e000      	b.n	8008d42 <HAL_GPIO_Init+0x1d6>
 8008d40:	2300      	movs	r3, #0
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	f002 0203 	and.w	r2, r2, #3
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	4093      	lsls	r3, r2
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008d52:	4938      	ldr	r1, [pc, #224]	@ (8008e34 <HAL_GPIO_Init+0x2c8>)
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	089b      	lsrs	r3, r3, #2
 8008d58:	3302      	adds	r3, #2
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d60:	4b39      	ldr	r3, [pc, #228]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	43db      	mvns	r3, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d003      	beq.n	8008d84 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008d7c:	693a      	ldr	r2, [r7, #16]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4313      	orrs	r3, r2
 8008d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008d84:	4a30      	ldr	r2, [pc, #192]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008d8a:	4b2f      	ldr	r3, [pc, #188]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	43db      	mvns	r3, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	685b      	ldr	r3, [r3, #4]
 8008d9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d003      	beq.n	8008dae <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dae:	4a26      	ldr	r2, [pc, #152]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008db4:	4b24      	ldr	r3, [pc, #144]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	43db      	mvns	r3, r3
 8008dc0:	693a      	ldr	r2, [r7, #16]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008dda:	4a1b      	ldr	r2, [pc, #108]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8008de2:	4b19      	ldr	r3, [pc, #100]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	693a      	ldr	r2, [r7, #16]
 8008df0:	4013      	ands	r3, r2
 8008df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d003      	beq.n	8008e08 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008e00:	693a      	ldr	r2, [r7, #16]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e08:	4a0f      	ldr	r2, [pc, #60]	@ (8008e48 <HAL_GPIO_Init+0x2dc>)
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	3301      	adds	r3, #1
 8008e14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	681a      	ldr	r2, [r3, #0]
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f47f aeab 	bne.w	8008b7c <HAL_GPIO_Init+0x10>
  }
}
 8008e26:	bf00      	nop
 8008e28:	bf00      	nop
 8008e2a:	371c      	adds	r7, #28
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e32:	4770      	bx	lr
 8008e34:	40010000 	.word	0x40010000
 8008e38:	48000400 	.word	0x48000400
 8008e3c:	48000800 	.word	0x48000800
 8008e40:	48000c00 	.word	0x48000c00
 8008e44:	48001000 	.word	0x48001000
 8008e48:	58000800 	.word	0x58000800

08008e4c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
 8008e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e56:	2300      	movs	r3, #0
 8008e58:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8008e5a:	e0bb      	b.n	8008fd4 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	683a      	ldr	r2, [r7, #0]
 8008e66:	4013      	ands	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 80ae 	beq.w	8008fce <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8008e72:	4a5f      	ldr	r2, [pc, #380]	@ (8008ff0 <HAL_GPIO_DeInit+0x1a4>)
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	089b      	lsrs	r3, r3, #2
 8008e78:	3302      	adds	r3, #2
 8008e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e7e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	f003 0303 	and.w	r3, r3, #3
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	220f      	movs	r2, #15
 8008e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4013      	ands	r3, r2
 8008e92:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008e9a:	d019      	beq.n	8008ed0 <HAL_GPIO_DeInit+0x84>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a55      	ldr	r2, [pc, #340]	@ (8008ff4 <HAL_GPIO_DeInit+0x1a8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d013      	beq.n	8008ecc <HAL_GPIO_DeInit+0x80>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a54      	ldr	r2, [pc, #336]	@ (8008ff8 <HAL_GPIO_DeInit+0x1ac>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d00d      	beq.n	8008ec8 <HAL_GPIO_DeInit+0x7c>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a53      	ldr	r2, [pc, #332]	@ (8008ffc <HAL_GPIO_DeInit+0x1b0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d007      	beq.n	8008ec4 <HAL_GPIO_DeInit+0x78>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a52      	ldr	r2, [pc, #328]	@ (8009000 <HAL_GPIO_DeInit+0x1b4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d101      	bne.n	8008ec0 <HAL_GPIO_DeInit+0x74>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	e008      	b.n	8008ed2 <HAL_GPIO_DeInit+0x86>
 8008ec0:	2307      	movs	r3, #7
 8008ec2:	e006      	b.n	8008ed2 <HAL_GPIO_DeInit+0x86>
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	e004      	b.n	8008ed2 <HAL_GPIO_DeInit+0x86>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	e002      	b.n	8008ed2 <HAL_GPIO_DeInit+0x86>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e000      	b.n	8008ed2 <HAL_GPIO_DeInit+0x86>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	f002 0203 	and.w	r2, r2, #3
 8008ed8:	0092      	lsls	r2, r2, #2
 8008eda:	4093      	lsls	r3, r2
 8008edc:	68fa      	ldr	r2, [r7, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d136      	bne.n	8008f50 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8008ee2:	4b48      	ldr	r3, [pc, #288]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008ee4:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	43db      	mvns	r3, r3
 8008eec:	4945      	ldr	r1, [pc, #276]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008eee:	4013      	ands	r3, r2
 8008ef0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8008ef4:	4b43      	ldr	r3, [pc, #268]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008ef6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	43db      	mvns	r3, r3
 8008efe:	4941      	ldr	r1, [pc, #260]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8008f06:	4b3f      	ldr	r3, [pc, #252]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	43db      	mvns	r3, r3
 8008f0e:	493d      	ldr	r1, [pc, #244]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008f10:	4013      	ands	r3, r2
 8008f12:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8008f14:	4b3b      	ldr	r3, [pc, #236]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008f16:	685a      	ldr	r2, [r3, #4]
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	43db      	mvns	r3, r3
 8008f1c:	4939      	ldr	r1, [pc, #228]	@ (8009004 <HAL_GPIO_DeInit+0x1b8>)
 8008f1e:	4013      	ands	r3, r2
 8008f20:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	f003 0303 	and.w	r3, r3, #3
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	220f      	movs	r2, #15
 8008f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f30:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8008f32:	4a2f      	ldr	r2, [pc, #188]	@ (8008ff0 <HAL_GPIO_DeInit+0x1a4>)
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	089b      	lsrs	r3, r3, #2
 8008f38:	3302      	adds	r3, #2
 8008f3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	43da      	mvns	r2, r3
 8008f42:	482b      	ldr	r0, [pc, #172]	@ (8008ff0 <HAL_GPIO_DeInit+0x1a4>)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	089b      	lsrs	r3, r3, #2
 8008f48:	400a      	ands	r2, r1
 8008f4a:	3302      	adds	r3, #2
 8008f4c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	2103      	movs	r1, #3
 8008f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f5e:	431a      	orrs	r2, r3
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	08da      	lsrs	r2, r3, #3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	3208      	adds	r2, #8
 8008f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	220f      	movs	r2, #15
 8008f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7e:	43db      	mvns	r3, r3
 8008f80:	697a      	ldr	r2, [r7, #20]
 8008f82:	08d2      	lsrs	r2, r2, #3
 8008f84:	4019      	ands	r1, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	3208      	adds	r2, #8
 8008f8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	68da      	ldr	r2, [r3, #12]
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	005b      	lsls	r3, r3, #1
 8008f96:	2103      	movs	r1, #3
 8008f98:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9c:	43db      	mvns	r3, r3
 8008f9e:	401a      	ands	r2, r3
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	685a      	ldr	r2, [r3, #4]
 8008fa8:	2101      	movs	r1, #1
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	401a      	ands	r2, r3
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	005b      	lsls	r3, r3, #1
 8008fc0:	2103      	movs	r1, #3
 8008fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fc6:	43db      	mvns	r3, r3
 8008fc8:	401a      	ands	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	609a      	str	r2, [r3, #8]
    }

    position++;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8008fd4:	683a      	ldr	r2, [r7, #0]
 8008fd6:	697b      	ldr	r3, [r7, #20]
 8008fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f47f af3d 	bne.w	8008e5c <HAL_GPIO_DeInit+0x10>
  }
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	371c      	adds	r7, #28
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr
 8008ff0:	40010000 	.word	0x40010000
 8008ff4:	48000400 	.word	0x48000400
 8008ff8:	48000800 	.word	0x48000800
 8008ffc:	48000c00 	.word	0x48000c00
 8009000:	48001000 	.word	0x48001000
 8009004:	58000800 	.word	0x58000800

08009008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
 8009014:	4613      	mov	r3, r2
 8009016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009018:	787b      	ldrb	r3, [r7, #1]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800901e:	887a      	ldrh	r2, [r7, #2]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009024:	e002      	b.n	800902c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009026:	887a      	ldrh	r2, [r7, #2]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800902c:	bf00      	nop
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800903e:	4b0a      	ldr	r3, [pc, #40]	@ (8009068 <HAL_HSEM_IRQHandler+0x30>)
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009044:	4b08      	ldr	r3, [pc, #32]	@ (8009068 <HAL_HSEM_IRQHandler+0x30>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	43db      	mvns	r3, r3
 800904c:	4906      	ldr	r1, [pc, #24]	@ (8009068 <HAL_HSEM_IRQHandler+0x30>)
 800904e:	4013      	ands	r3, r2
 8009050:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009052:	4a05      	ldr	r2, [pc, #20]	@ (8009068 <HAL_HSEM_IRQHandler+0x30>)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f807 	bl	800906c <HAL_HSEM_FreeCallback>
}
 800905e:	bf00      	nop
 8009060:	3708      	adds	r7, #8
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	58001500 	.word	0x58001500

0800906c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d101      	bne.n	8009092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800908e:	2301      	movs	r3, #1
 8009090:	e08d      	b.n	80091ae <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8b4 	bl	8009214 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2224      	movs	r2, #36	@ 0x24
 80090b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f022 0201 	bic.w	r2, r2, #1
 80090c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80090d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80090e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d107      	bne.n	80090fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	689a      	ldr	r2, [r3, #8]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80090f6:	609a      	str	r2, [r3, #8]
 80090f8:	e006      	b.n	8009108 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	689a      	ldr	r2, [r3, #8]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009106:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b02      	cmp	r3, #2
 800910e:	d108      	bne.n	8009122 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685a      	ldr	r2, [r3, #4]
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800911e:	605a      	str	r2, [r3, #4]
 8009120:	e007      	b.n	8009132 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	685a      	ldr	r2, [r3, #4]
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009130:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	687a      	ldr	r2, [r7, #4]
 800913a:	6812      	ldr	r2, [r2, #0]
 800913c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009140:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009144:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009154:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	691a      	ldr	r2, [r3, #16]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	699b      	ldr	r3, [r3, #24]
 8009166:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	430a      	orrs	r2, r1
 800916e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	69d9      	ldr	r1, [r3, #28]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1a      	ldr	r2, [r3, #32]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	430a      	orrs	r2, r1
 800917e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f042 0201 	orr.w	r2, r2, #1
 800918e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3708      	adds	r7, #8
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d101      	bne.n	80091c8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e021      	b.n	800920c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2224      	movs	r2, #36	@ 0x24
 80091cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f022 0201 	bic.w	r2, r2, #1
 80091de:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 f821 	bl	8009228 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2200      	movs	r2, #0
 80091f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800920a:	2300      	movs	r3, #0
}
 800920c:	4618      	mov	r0, r3
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b088      	sub	sp, #32
 8009240:	af02      	add	r7, sp, #8
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	4608      	mov	r0, r1
 8009246:	4611      	mov	r1, r2
 8009248:	461a      	mov	r2, r3
 800924a:	4603      	mov	r3, r0
 800924c:	817b      	strh	r3, [r7, #10]
 800924e:	460b      	mov	r3, r1
 8009250:	813b      	strh	r3, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b20      	cmp	r3, #32
 8009260:	f040 80f9 	bne.w	8009456 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009264:	6a3b      	ldr	r3, [r7, #32]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d002      	beq.n	8009270 <HAL_I2C_Mem_Write+0x34>
 800926a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d105      	bne.n	800927c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009276:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0ed      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <HAL_I2C_Mem_Write+0x4e>
 8009286:	2302      	movs	r3, #2
 8009288:	e0e6      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2201      	movs	r2, #1
 800928e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009292:	f7ff f8f1 	bl	8008478 <HAL_GetTick>
 8009296:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	9300      	str	r3, [sp, #0]
 800929c:	2319      	movs	r3, #25
 800929e:	2201      	movs	r2, #1
 80092a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80092a4:	68f8      	ldr	r0, [r7, #12]
 80092a6:	f000 fadd 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d001      	beq.n	80092b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e0d1      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2221      	movs	r2, #33	@ 0x21
 80092b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	2240      	movs	r2, #64	@ 0x40
 80092c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a3a      	ldr	r2, [r7, #32]
 80092ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80092d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092dc:	88f8      	ldrh	r0, [r7, #6]
 80092de:	893a      	ldrh	r2, [r7, #8]
 80092e0:	8979      	ldrh	r1, [r7, #10]
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	9301      	str	r3, [sp, #4]
 80092e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e8:	9300      	str	r3, [sp, #0]
 80092ea:	4603      	mov	r3, r0
 80092ec:	68f8      	ldr	r0, [r7, #12]
 80092ee:	f000 f9ed 	bl	80096cc <I2C_RequestMemoryWrite>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e0a9      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009308:	b29b      	uxth	r3, r3
 800930a:	2bff      	cmp	r3, #255	@ 0xff
 800930c:	d90e      	bls.n	800932c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	22ff      	movs	r2, #255	@ 0xff
 8009312:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009318:	b2da      	uxtb	r2, r3
 800931a:	8979      	ldrh	r1, [r7, #10]
 800931c:	2300      	movs	r3, #0
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009324:	68f8      	ldr	r0, [r7, #12]
 8009326:	f000 fc61 	bl	8009bec <I2C_TransferConfig>
 800932a:	e00f      	b.n	800934c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009330:	b29a      	uxth	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800933a:	b2da      	uxtb	r2, r3
 800933c:	8979      	ldrh	r1, [r7, #10]
 800933e:	2300      	movs	r3, #0
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f000 fc50 	bl	8009bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009350:	68f8      	ldr	r0, [r7, #12]
 8009352:	f000 fae0 	bl	8009916 <I2C_WaitOnTXISFlagUntilTimeout>
 8009356:	4603      	mov	r3, r0
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e07b      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009364:	781a      	ldrb	r2, [r3, #0]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800937a:	b29b      	uxth	r3, r3
 800937c:	3b01      	subs	r3, #1
 800937e:	b29a      	uxth	r2, r3
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009388:	3b01      	subs	r3, #1
 800938a:	b29a      	uxth	r2, r3
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009394:	b29b      	uxth	r3, r3
 8009396:	2b00      	cmp	r3, #0
 8009398:	d034      	beq.n	8009404 <HAL_I2C_Mem_Write+0x1c8>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d130      	bne.n	8009404 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80093a2:	697b      	ldr	r3, [r7, #20]
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	2200      	movs	r2, #0
 80093aa:	2180      	movs	r1, #128	@ 0x80
 80093ac:	68f8      	ldr	r0, [r7, #12]
 80093ae:	f000 fa59 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80093b8:	2301      	movs	r3, #1
 80093ba:	e04d      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	2bff      	cmp	r3, #255	@ 0xff
 80093c4:	d90e      	bls.n	80093e4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	22ff      	movs	r2, #255	@ 0xff
 80093ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	8979      	ldrh	r1, [r7, #10]
 80093d4:	2300      	movs	r3, #0
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fc05 	bl	8009bec <I2C_TransferConfig>
 80093e2:	e00f      	b.n	8009404 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093e8:	b29a      	uxth	r2, r3
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093f2:	b2da      	uxtb	r2, r3
 80093f4:	8979      	ldrh	r1, [r7, #10]
 80093f6:	2300      	movs	r3, #0
 80093f8:	9300      	str	r3, [sp, #0]
 80093fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fbf4 	bl	8009bec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009408:	b29b      	uxth	r3, r3
 800940a:	2b00      	cmp	r3, #0
 800940c:	d19e      	bne.n	800934c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 fac6 	bl	80099a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d001      	beq.n	8009422 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e01a      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	2220      	movs	r2, #32
 8009428:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6859      	ldr	r1, [r3, #4]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	4b0a      	ldr	r3, [pc, #40]	@ (8009460 <HAL_I2C_Mem_Write+0x224>)
 8009436:	400b      	ands	r3, r1
 8009438:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2220      	movs	r2, #32
 800943e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	2200      	movs	r2, #0
 800944e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009452:	2300      	movs	r3, #0
 8009454:	e000      	b.n	8009458 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009456:	2302      	movs	r3, #2
  }
}
 8009458:	4618      	mov	r0, r3
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	fe00e800 	.word	0xfe00e800

08009464 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b088      	sub	sp, #32
 8009468:	af02      	add	r7, sp, #8
 800946a:	60f8      	str	r0, [r7, #12]
 800946c:	4608      	mov	r0, r1
 800946e:	4611      	mov	r1, r2
 8009470:	461a      	mov	r2, r3
 8009472:	4603      	mov	r3, r0
 8009474:	817b      	strh	r3, [r7, #10]
 8009476:	460b      	mov	r3, r1
 8009478:	813b      	strh	r3, [r7, #8]
 800947a:	4613      	mov	r3, r2
 800947c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009484:	b2db      	uxtb	r3, r3
 8009486:	2b20      	cmp	r3, #32
 8009488:	f040 80fd 	bne.w	8009686 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800948c:	6a3b      	ldr	r3, [r7, #32]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d002      	beq.n	8009498 <HAL_I2C_Mem_Read+0x34>
 8009492:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009494:	2b00      	cmp	r3, #0
 8009496:	d105      	bne.n	80094a4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800949e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e0f1      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_I2C_Mem_Read+0x4e>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e0ea      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80094ba:	f7fe ffdd 	bl	8008478 <HAL_GetTick>
 80094be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	9300      	str	r3, [sp, #0]
 80094c4:	2319      	movs	r3, #25
 80094c6:	2201      	movs	r2, #1
 80094c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 f9c9 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e0d5      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2222      	movs	r2, #34	@ 0x22
 80094e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	2240      	movs	r2, #64	@ 0x40
 80094e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6a3a      	ldr	r2, [r7, #32]
 80094f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80094fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009504:	88f8      	ldrh	r0, [r7, #6]
 8009506:	893a      	ldrh	r2, [r7, #8]
 8009508:	8979      	ldrh	r1, [r7, #10]
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	9301      	str	r3, [sp, #4]
 800950e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009510:	9300      	str	r3, [sp, #0]
 8009512:	4603      	mov	r3, r0
 8009514:	68f8      	ldr	r0, [r7, #12]
 8009516:	f000 f92d 	bl	8009774 <I2C_RequestMemoryRead>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e0ad      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009530:	b29b      	uxth	r3, r3
 8009532:	2bff      	cmp	r3, #255	@ 0xff
 8009534:	d90e      	bls.n	8009554 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	22ff      	movs	r2, #255	@ 0xff
 800953a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009540:	b2da      	uxtb	r2, r3
 8009542:	8979      	ldrh	r1, [r7, #10]
 8009544:	4b52      	ldr	r3, [pc, #328]	@ (8009690 <HAL_I2C_Mem_Read+0x22c>)
 8009546:	9300      	str	r3, [sp, #0]
 8009548:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	f000 fb4d 	bl	8009bec <I2C_TransferConfig>
 8009552:	e00f      	b.n	8009574 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009562:	b2da      	uxtb	r2, r3
 8009564:	8979      	ldrh	r1, [r7, #10]
 8009566:	4b4a      	ldr	r3, [pc, #296]	@ (8009690 <HAL_I2C_Mem_Read+0x22c>)
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f000 fb3c 	bl	8009bec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	9300      	str	r3, [sp, #0]
 8009578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800957a:	2200      	movs	r2, #0
 800957c:	2104      	movs	r1, #4
 800957e:	68f8      	ldr	r0, [r7, #12]
 8009580:	f000 f970 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e07c      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009598:	b2d2      	uxtb	r2, r2
 800959a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095a0:	1c5a      	adds	r2, r3, #1
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095aa:	3b01      	subs	r3, #1
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	3b01      	subs	r3, #1
 80095ba:	b29a      	uxth	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d034      	beq.n	8009634 <HAL_I2C_Mem_Read+0x1d0>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d130      	bne.n	8009634 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	2200      	movs	r2, #0
 80095da:	2180      	movs	r1, #128	@ 0x80
 80095dc:	68f8      	ldr	r0, [r7, #12]
 80095de:	f000 f941 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	e04d      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	2bff      	cmp	r3, #255	@ 0xff
 80095f4:	d90e      	bls.n	8009614 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	22ff      	movs	r2, #255	@ 0xff
 80095fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009600:	b2da      	uxtb	r2, r3
 8009602:	8979      	ldrh	r1, [r7, #10]
 8009604:	2300      	movs	r3, #0
 8009606:	9300      	str	r3, [sp, #0]
 8009608:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800960c:	68f8      	ldr	r0, [r7, #12]
 800960e:	f000 faed 	bl	8009bec <I2C_TransferConfig>
 8009612:	e00f      	b.n	8009634 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009618:	b29a      	uxth	r2, r3
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009622:	b2da      	uxtb	r2, r3
 8009624:	8979      	ldrh	r1, [r7, #10]
 8009626:	2300      	movs	r3, #0
 8009628:	9300      	str	r3, [sp, #0]
 800962a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 fadc 	bl	8009bec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009638:	b29b      	uxth	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d19a      	bne.n	8009574 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f000 f9ae 	bl	80099a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d001      	beq.n	8009652 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e01a      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2220      	movs	r2, #32
 8009658:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6859      	ldr	r1, [r3, #4]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	4b0b      	ldr	r3, [pc, #44]	@ (8009694 <HAL_I2C_Mem_Read+0x230>)
 8009666:	400b      	ands	r3, r1
 8009668:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	2220      	movs	r2, #32
 800966e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	2200      	movs	r2, #0
 800967e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009682:	2300      	movs	r3, #0
 8009684:	e000      	b.n	8009688 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009686:	2302      	movs	r3, #2
  }
}
 8009688:	4618      	mov	r0, r3
 800968a:	3718      	adds	r7, #24
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}
 8009690:	80002400 	.word	0x80002400
 8009694:	fe00e800 	.word	0xfe00e800

08009698 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80096a6:	b2db      	uxtb	r3, r3
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	370c      	adds	r7, #12
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr

080096b4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	370c      	adds	r7, #12
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af02      	add	r7, sp, #8
 80096d2:	60f8      	str	r0, [r7, #12]
 80096d4:	4608      	mov	r0, r1
 80096d6:	4611      	mov	r1, r2
 80096d8:	461a      	mov	r2, r3
 80096da:	4603      	mov	r3, r0
 80096dc:	817b      	strh	r3, [r7, #10]
 80096de:	460b      	mov	r3, r1
 80096e0:	813b      	strh	r3, [r7, #8]
 80096e2:	4613      	mov	r3, r2
 80096e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80096e6:	88fb      	ldrh	r3, [r7, #6]
 80096e8:	b2da      	uxtb	r2, r3
 80096ea:	8979      	ldrh	r1, [r7, #10]
 80096ec:	4b20      	ldr	r3, [pc, #128]	@ (8009770 <I2C_RequestMemoryWrite+0xa4>)
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 fa79 	bl	8009bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	69b9      	ldr	r1, [r7, #24]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 f909 	bl	8009916 <I2C_WaitOnTXISFlagUntilTimeout>
 8009704:	4603      	mov	r3, r0
 8009706:	2b00      	cmp	r3, #0
 8009708:	d001      	beq.n	800970e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e02c      	b.n	8009768 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d105      	bne.n	8009720 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009714:	893b      	ldrh	r3, [r7, #8]
 8009716:	b2da      	uxtb	r2, r3
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	629a      	str	r2, [r3, #40]	@ 0x28
 800971e:	e015      	b.n	800974c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009720:	893b      	ldrh	r3, [r7, #8]
 8009722:	0a1b      	lsrs	r3, r3, #8
 8009724:	b29b      	uxth	r3, r3
 8009726:	b2da      	uxtb	r2, r3
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800972e:	69fa      	ldr	r2, [r7, #28]
 8009730:	69b9      	ldr	r1, [r7, #24]
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f8ef 	bl	8009916 <I2C_WaitOnTXISFlagUntilTimeout>
 8009738:	4603      	mov	r3, r0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d001      	beq.n	8009742 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e012      	b.n	8009768 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009742:	893b      	ldrh	r3, [r7, #8]
 8009744:	b2da      	uxtb	r2, r3
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	9300      	str	r3, [sp, #0]
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	2200      	movs	r2, #0
 8009754:	2180      	movs	r1, #128	@ 0x80
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f000 f884 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	80002000 	.word	0x80002000

08009774 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b086      	sub	sp, #24
 8009778:	af02      	add	r7, sp, #8
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	4608      	mov	r0, r1
 800977e:	4611      	mov	r1, r2
 8009780:	461a      	mov	r2, r3
 8009782:	4603      	mov	r3, r0
 8009784:	817b      	strh	r3, [r7, #10]
 8009786:	460b      	mov	r3, r1
 8009788:	813b      	strh	r3, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800978e:	88fb      	ldrh	r3, [r7, #6]
 8009790:	b2da      	uxtb	r2, r3
 8009792:	8979      	ldrh	r1, [r7, #10]
 8009794:	4b20      	ldr	r3, [pc, #128]	@ (8009818 <I2C_RequestMemoryRead+0xa4>)
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	2300      	movs	r3, #0
 800979a:	68f8      	ldr	r0, [r7, #12]
 800979c:	f000 fa26 	bl	8009bec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097a0:	69fa      	ldr	r2, [r7, #28]
 80097a2:	69b9      	ldr	r1, [r7, #24]
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f8b6 	bl	8009916 <I2C_WaitOnTXISFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e02c      	b.n	800980e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097b4:	88fb      	ldrh	r3, [r7, #6]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d105      	bne.n	80097c6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097ba:	893b      	ldrh	r3, [r7, #8]
 80097bc:	b2da      	uxtb	r2, r3
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	629a      	str	r2, [r3, #40]	@ 0x28
 80097c4:	e015      	b.n	80097f2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80097c6:	893b      	ldrh	r3, [r7, #8]
 80097c8:	0a1b      	lsrs	r3, r3, #8
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	b2da      	uxtb	r2, r3
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	69b9      	ldr	r1, [r7, #24]
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 f89c 	bl	8009916 <I2C_WaitOnTXISFlagUntilTimeout>
 80097de:	4603      	mov	r3, r0
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d001      	beq.n	80097e8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
 80097e6:	e012      	b.n	800980e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80097e8:	893b      	ldrh	r3, [r7, #8]
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2140      	movs	r1, #64	@ 0x40
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f000 f831 	bl	8009864 <I2C_WaitOnFlagUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800980c:	2300      	movs	r3, #0
}
 800980e:	4618      	mov	r0, r3
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	80002000 	.word	0x80002000

0800981c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	f003 0302 	and.w	r3, r3, #2
 800982e:	2b02      	cmp	r3, #2
 8009830:	d103      	bne.n	800983a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2200      	movs	r2, #0
 8009838:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b01      	cmp	r3, #1
 8009846:	d007      	beq.n	8009858 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	699a      	ldr	r2, [r3, #24]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f042 0201 	orr.w	r2, r2, #1
 8009856:	619a      	str	r2, [r3, #24]
  }
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	4613      	mov	r3, r2
 8009872:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009874:	e03b      	b.n	80098ee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009876:	69ba      	ldr	r2, [r7, #24]
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f000 f8d6 	bl	8009a2c <I2C_IsErrorOccurred>
 8009880:	4603      	mov	r3, r0
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e041      	b.n	800990e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009890:	d02d      	beq.n	80098ee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009892:	f7fe fdf1 	bl	8008478 <HAL_GetTick>
 8009896:	4602      	mov	r2, r0
 8009898:	69bb      	ldr	r3, [r7, #24]
 800989a:	1ad3      	subs	r3, r2, r3
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d302      	bcc.n	80098a8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d122      	bne.n	80098ee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	699a      	ldr	r2, [r3, #24]
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	4013      	ands	r3, r2
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	bf0c      	ite	eq
 80098b8:	2301      	moveq	r3, #1
 80098ba:	2300      	movne	r3, #0
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	461a      	mov	r2, r3
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	429a      	cmp	r2, r3
 80098c4:	d113      	bne.n	80098ee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ca:	f043 0220 	orr.w	r2, r3, #32
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2220      	movs	r2, #32
 80098d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e00f      	b.n	800990e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699a      	ldr	r2, [r3, #24]
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	4013      	ands	r3, r2
 80098f8:	68ba      	ldr	r2, [r7, #8]
 80098fa:	429a      	cmp	r2, r3
 80098fc:	bf0c      	ite	eq
 80098fe:	2301      	moveq	r3, #1
 8009900:	2300      	movne	r3, #0
 8009902:	b2db      	uxtb	r3, r3
 8009904:	461a      	mov	r2, r3
 8009906:	79fb      	ldrb	r3, [r7, #7]
 8009908:	429a      	cmp	r2, r3
 800990a:	d0b4      	beq.n	8009876 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b084      	sub	sp, #16
 800991a:	af00      	add	r7, sp, #0
 800991c:	60f8      	str	r0, [r7, #12]
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009922:	e033      	b.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 f87f 	bl	8009a2c <I2C_IsErrorOccurred>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e031      	b.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800993e:	d025      	beq.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009940:	f7fe fd9a 	bl	8008478 <HAL_GetTick>
 8009944:	4602      	mov	r2, r0
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	1ad3      	subs	r3, r2, r3
 800994a:	68ba      	ldr	r2, [r7, #8]
 800994c:	429a      	cmp	r2, r3
 800994e:	d302      	bcc.n	8009956 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d11a      	bne.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f003 0302 	and.w	r3, r3, #2
 8009960:	2b02      	cmp	r3, #2
 8009962:	d013      	beq.n	800998c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009968:	f043 0220 	orr.w	r2, r3, #32
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2220      	movs	r2, #32
 8009974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2200      	movs	r2, #0
 800997c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009988:	2301      	movs	r3, #1
 800998a:	e007      	b.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	699b      	ldr	r3, [r3, #24]
 8009992:	f003 0302 	and.w	r3, r3, #2
 8009996:	2b02      	cmp	r3, #2
 8009998:	d1c4      	bne.n	8009924 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80099b0:	e02f      	b.n	8009a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	68b9      	ldr	r1, [r7, #8]
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f000 f838 	bl	8009a2c <I2C_IsErrorOccurred>
 80099bc:	4603      	mov	r3, r0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e02d      	b.n	8009a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099c6:	f7fe fd57 	bl	8008478 <HAL_GetTick>
 80099ca:	4602      	mov	r2, r0
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	1ad3      	subs	r3, r2, r3
 80099d0:	68ba      	ldr	r2, [r7, #8]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d302      	bcc.n	80099dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d11a      	bne.n	8009a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	699b      	ldr	r3, [r3, #24]
 80099e2:	f003 0320 	and.w	r3, r3, #32
 80099e6:	2b20      	cmp	r3, #32
 80099e8:	d013      	beq.n	8009a12 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ee:	f043 0220 	orr.w	r2, r3, #32
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e007      	b.n	8009a22 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	f003 0320 	and.w	r3, r3, #32
 8009a1c:	2b20      	cmp	r3, #32
 8009a1e:	d1c8      	bne.n	80099b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009a20:	2300      	movs	r3, #0
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	3710      	adds	r7, #16
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
	...

08009a2c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08a      	sub	sp, #40	@ 0x28
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	f003 0310 	and.w	r3, r3, #16
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d068      	beq.n	8009b2a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2210      	movs	r2, #16
 8009a5e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009a60:	e049      	b.n	8009af6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a62:	68bb      	ldr	r3, [r7, #8]
 8009a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a68:	d045      	beq.n	8009af6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009a6a:	f7fe fd05 	bl	8008478 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d302      	bcc.n	8009a80 <I2C_IsErrorOccurred+0x54>
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d13a      	bne.n	8009af6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a8a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009a92:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aa2:	d121      	bne.n	8009ae8 <I2C_IsErrorOccurred+0xbc>
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009aaa:	d01d      	beq.n	8009ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009aac:	7cfb      	ldrb	r3, [r7, #19]
 8009aae:	2b20      	cmp	r3, #32
 8009ab0:	d01a      	beq.n	8009ae8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ac0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009ac2:	f7fe fcd9 	bl	8008478 <HAL_GetTick>
 8009ac6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ac8:	e00e      	b.n	8009ae8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009aca:	f7fe fcd5 	bl	8008478 <HAL_GetTick>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	69fb      	ldr	r3, [r7, #28]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	2b19      	cmp	r3, #25
 8009ad6:	d907      	bls.n	8009ae8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	f043 0320 	orr.w	r3, r3, #32
 8009ade:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8009ae6:	e006      	b.n	8009af6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	699b      	ldr	r3, [r3, #24]
 8009aee:	f003 0320 	and.w	r3, r3, #32
 8009af2:	2b20      	cmp	r3, #32
 8009af4:	d1e9      	bne.n	8009aca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 0320 	and.w	r3, r3, #32
 8009b00:	2b20      	cmp	r3, #32
 8009b02:	d003      	beq.n	8009b0c <I2C_IsErrorOccurred+0xe0>
 8009b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d0aa      	beq.n	8009a62 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d103      	bne.n	8009b1c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	f043 0304 	orr.w	r3, r3, #4
 8009b22:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009b24:	2301      	movs	r3, #1
 8009b26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	699b      	ldr	r3, [r3, #24]
 8009b30:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00b      	beq.n	8009b54 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009b3c:	6a3b      	ldr	r3, [r7, #32]
 8009b3e:	f043 0301 	orr.w	r3, r3, #1
 8009b42:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b4c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009b5e:	6a3b      	ldr	r3, [r7, #32]
 8009b60:	f043 0308 	orr.w	r3, r3, #8
 8009b64:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b70:	2301      	movs	r3, #1
 8009b72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d00b      	beq.n	8009b98 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	f043 0302 	orr.w	r3, r3, #2
 8009b86:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d01c      	beq.n	8009bda <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	f7ff fe3b 	bl	800981c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	6859      	ldr	r1, [r3, #4]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	4b0d      	ldr	r3, [pc, #52]	@ (8009be8 <I2C_IsErrorOccurred+0x1bc>)
 8009bb2:	400b      	ands	r3, r1
 8009bb4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	431a      	orrs	r2, r3
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	2220      	movs	r2, #32
 8009bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009bda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3728      	adds	r7, #40	@ 0x28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	bd80      	pop	{r7, pc}
 8009be6:	bf00      	nop
 8009be8:	fe00e800 	.word	0xfe00e800

08009bec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b087      	sub	sp, #28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	60f8      	str	r0, [r7, #12]
 8009bf4:	607b      	str	r3, [r7, #4]
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	817b      	strh	r3, [r7, #10]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009bfe:	897b      	ldrh	r3, [r7, #10]
 8009c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c04:	7a7b      	ldrb	r3, [r7, #9]
 8009c06:	041b      	lsls	r3, r3, #16
 8009c08:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c0c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009c1a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	6a3b      	ldr	r3, [r7, #32]
 8009c24:	0d5b      	lsrs	r3, r3, #21
 8009c26:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8009c2a:	4b08      	ldr	r3, [pc, #32]	@ (8009c4c <I2C_TransferConfig+0x60>)
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	43db      	mvns	r3, r3
 8009c30:	ea02 0103 	and.w	r1, r2, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	697a      	ldr	r2, [r7, #20]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009c3e:	bf00      	nop
 8009c40:	371c      	adds	r7, #28
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	03ff63ff 	.word	0x03ff63ff

08009c50 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d138      	bne.n	8009cd8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d101      	bne.n	8009c74 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009c70:	2302      	movs	r3, #2
 8009c72:	e032      	b.n	8009cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2201      	movs	r2, #1
 8009c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2224      	movs	r2, #36	@ 0x24
 8009c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0201 	bic.w	r2, r2, #1
 8009c92:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	681a      	ldr	r2, [r3, #0]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009ca2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	6819      	ldr	r1, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	430a      	orrs	r2, r1
 8009cb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f042 0201 	orr.w	r2, r2, #1
 8009cc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2220      	movs	r2, #32
 8009cc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	e000      	b.n	8009cda <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009cd8:	2302      	movs	r3, #2
  }
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr

08009ce6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ce6:	b480      	push	{r7}
 8009ce8:	b085      	sub	sp, #20
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cf6:	b2db      	uxtb	r3, r3
 8009cf8:	2b20      	cmp	r3, #32
 8009cfa:	d139      	bne.n	8009d70 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009d02:	2b01      	cmp	r3, #1
 8009d04:	d101      	bne.n	8009d0a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009d06:	2302      	movs	r3, #2
 8009d08:	e033      	b.n	8009d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2224      	movs	r2, #36	@ 0x24
 8009d16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0201 	bic.w	r2, r2, #1
 8009d28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8009d38:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f042 0201 	orr.w	r2, r2, #1
 8009d5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2200      	movs	r2, #0
 8009d68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e000      	b.n	8009d72 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009d70:	2302      	movs	r3, #2
  }
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
	...

08009d80 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d01e      	beq.n	8009dd0 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8009d92:	4b13      	ldr	r3, [pc, #76]	@ (8009de0 <HAL_IPCC_Init+0x60>)
 8009d94:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d102      	bne.n	8009da8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f7f9 f87a 	bl	8002e9c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8009da8:	68b8      	ldr	r0, [r7, #8]
 8009daa:	f000 f85b 	bl	8009e64 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f82c 	bl	8009e18 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8009dce:	e001      	b.n	8009dd4 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	58000c00 	.word	0x58000c00

08009de4 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009de4:	b480      	push	{r7}
 8009de6:	b085      	sub	sp, #20
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	60f8      	str	r0, [r7, #12]
 8009dec:	60b9      	str	r1, [r7, #8]
 8009dee:	4613      	mov	r3, r2
 8009df0:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8009df2:	bf00      	nop
 8009df4:	3714      	adds	r7, #20
 8009df6:	46bd      	mov	sp, r7
 8009df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfc:	4770      	bx	lr

08009dfe <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8009dfe:	b480      	push	{r7}
 8009e00:	b085      	sub	sp, #20
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	3714      	adds	r7, #20
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b085      	sub	sp, #20
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009e20:	2300      	movs	r3, #0
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	e00f      	b.n	8009e46 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009e26:	687a      	ldr	r2, [r7, #4]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	4413      	add	r3, r2
 8009e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8009e5c <IPCC_SetDefaultCallbacks+0x44>)
 8009e30:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	3306      	adds	r3, #6
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	4a08      	ldr	r2, [pc, #32]	@ (8009e60 <IPCC_SetDefaultCallbacks+0x48>)
 8009e3e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	3301      	adds	r3, #1
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2b05      	cmp	r3, #5
 8009e4a:	d9ec      	bls.n	8009e26 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009e4c:	bf00      	nop
 8009e4e:	bf00      	nop
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	08009de5 	.word	0x08009de5
 8009e60:	08009dff 	.word	0x08009dff

08009e64 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8009e78:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	223f      	movs	r2, #63	@ 0x3f
 8009e7e:	609a      	str	r2, [r3, #8]
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e0c0      	b.n	800a020 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d106      	bne.n	8009eb8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7f9 f8be 	bl	8003034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2203      	movs	r2, #3
 8009ebc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f002 fe31 	bl	800cb2c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009eca:	2300      	movs	r3, #0
 8009ecc:	73fb      	strb	r3, [r7, #15]
 8009ece:	e03e      	b.n	8009f4e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009ed0:	7bfa      	ldrb	r2, [r7, #15]
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	4613      	mov	r3, r2
 8009ed6:	009b      	lsls	r3, r3, #2
 8009ed8:	4413      	add	r3, r2
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	440b      	add	r3, r1
 8009ede:	3311      	adds	r3, #17
 8009ee0:	2201      	movs	r2, #1
 8009ee2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009ee4:	7bfa      	ldrb	r2, [r7, #15]
 8009ee6:	6879      	ldr	r1, [r7, #4]
 8009ee8:	4613      	mov	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	00db      	lsls	r3, r3, #3
 8009ef0:	440b      	add	r3, r1
 8009ef2:	3310      	adds	r3, #16
 8009ef4:	7bfa      	ldrb	r2, [r7, #15]
 8009ef6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ef8:	7bfa      	ldrb	r2, [r7, #15]
 8009efa:	6879      	ldr	r1, [r7, #4]
 8009efc:	4613      	mov	r3, r2
 8009efe:	009b      	lsls	r3, r3, #2
 8009f00:	4413      	add	r3, r2
 8009f02:	00db      	lsls	r3, r3, #3
 8009f04:	440b      	add	r3, r1
 8009f06:	3313      	adds	r3, #19
 8009f08:	2200      	movs	r2, #0
 8009f0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009f0c:	7bfa      	ldrb	r2, [r7, #15]
 8009f0e:	6879      	ldr	r1, [r7, #4]
 8009f10:	4613      	mov	r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	4413      	add	r3, r2
 8009f16:	00db      	lsls	r3, r3, #3
 8009f18:	440b      	add	r3, r1
 8009f1a:	3320      	adds	r3, #32
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009f20:	7bfa      	ldrb	r2, [r7, #15]
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	440b      	add	r3, r1
 8009f2e:	3324      	adds	r3, #36	@ 0x24
 8009f30:	2200      	movs	r2, #0
 8009f32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009f34:	7bfb      	ldrb	r3, [r7, #15]
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	1c5a      	adds	r2, r3, #1
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4413      	add	r3, r2
 8009f40:	00db      	lsls	r3, r3, #3
 8009f42:	440b      	add	r3, r1
 8009f44:	2200      	movs	r2, #0
 8009f46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f48:	7bfb      	ldrb	r3, [r7, #15]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	73fb      	strb	r3, [r7, #15]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	791b      	ldrb	r3, [r3, #4]
 8009f52:	7bfa      	ldrb	r2, [r7, #15]
 8009f54:	429a      	cmp	r2, r3
 8009f56:	d3bb      	bcc.n	8009ed0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
 8009f5c:	e044      	b.n	8009fe8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009f5e:	7bfa      	ldrb	r2, [r7, #15]
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	00db      	lsls	r3, r3, #3
 8009f6a:	440b      	add	r3, r1
 8009f6c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8009f70:	2200      	movs	r2, #0
 8009f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009f74:	7bfa      	ldrb	r2, [r7, #15]
 8009f76:	6879      	ldr	r1, [r7, #4]
 8009f78:	4613      	mov	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	4413      	add	r3, r2
 8009f7e:	00db      	lsls	r3, r3, #3
 8009f80:	440b      	add	r3, r1
 8009f82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009f86:	7bfa      	ldrb	r2, [r7, #15]
 8009f88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009f8a:	7bfa      	ldrb	r2, [r7, #15]
 8009f8c:	6879      	ldr	r1, [r7, #4]
 8009f8e:	4613      	mov	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	4413      	add	r3, r2
 8009f94:	00db      	lsls	r3, r3, #3
 8009f96:	440b      	add	r3, r1
 8009f98:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009fa0:	7bfa      	ldrb	r2, [r7, #15]
 8009fa2:	6879      	ldr	r1, [r7, #4]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	440b      	add	r3, r1
 8009fae:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009fb6:	7bfa      	ldrb	r2, [r7, #15]
 8009fb8:	6879      	ldr	r1, [r7, #4]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	009b      	lsls	r3, r3, #2
 8009fbe:	4413      	add	r3, r2
 8009fc0:	00db      	lsls	r3, r3, #3
 8009fc2:	440b      	add	r3, r1
 8009fc4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009fc8:	2200      	movs	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009fcc:	7bfa      	ldrb	r2, [r7, #15]
 8009fce:	6879      	ldr	r1, [r7, #4]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	00db      	lsls	r3, r3, #3
 8009fd8:	440b      	add	r3, r1
 8009fda:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	73fb      	strb	r3, [r7, #15]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	791b      	ldrb	r3, [r3, #4]
 8009fec:	7bfa      	ldrb	r2, [r7, #15]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d3b5      	bcc.n	8009f5e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6818      	ldr	r0, [r3, #0]
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009ffe:	f002 fdb0 	bl	800cb62 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	7a9b      	ldrb	r3, [r3, #10]
 800a014:	2b01      	cmp	r3, #1
 800a016:	d102      	bne.n	800a01e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f805 	bl	800a028 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800a01e:	2300      	movs	r3, #0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a04c:	b29b      	uxth	r3, r3
 800a04e:	f043 0301 	orr.w	r3, r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a060:	b29b      	uxth	r3, r3
 800a062:	f043 0302 	orr.w	r3, r3, #2
 800a066:	b29a      	uxth	r2, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a06e:	2300      	movs	r3, #0
}
 800a070:	4618      	mov	r0, r3
 800a072:	3714      	adds	r7, #20
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a080:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a04      	ldr	r2, [pc, #16]	@ (800a098 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a086:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a08a:	6013      	str	r3, [r2, #0]
}
 800a08c:	bf00      	nop
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	58000400 	.word	0x58000400

0800a09c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a0a0:	4b04      	ldr	r3, [pc, #16]	@ (800a0b4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	58000400 	.word	0x58000400

0800a0b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a0bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0ca:	d101      	bne.n	800a0d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	e000      	b.n	800a0d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a0d0:	2300      	movs	r3, #0
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0da:	4770      	bx	lr

0800a0dc <LL_RCC_HSE_Enable>:
{
 800a0dc:	b480      	push	{r7}
 800a0de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a0e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a0ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0ee:	6013      	str	r3, [r2, #0]
}
 800a0f0:	bf00      	nop
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <LL_RCC_HSE_Disable>:
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a0fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a108:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a10c:	6013      	str	r3, [r2, #0]
}
 800a10e:	bf00      	nop
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <LL_RCC_HSE_IsReady>:
{
 800a118:	b480      	push	{r7}
 800a11a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a11c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a126:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a12a:	d101      	bne.n	800a130 <LL_RCC_HSE_IsReady+0x18>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e000      	b.n	800a132 <LL_RCC_HSE_IsReady+0x1a>
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <LL_RCC_HSI_Enable>:
{
 800a13c:	b480      	push	{r7}
 800a13e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a14a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a14e:	6013      	str	r3, [r2, #0]
}
 800a150:	bf00      	nop
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <LL_RCC_HSI_Disable>:
{
 800a15a:	b480      	push	{r7}
 800a15c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a15e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a16c:	6013      	str	r3, [r2, #0]
}
 800a16e:	bf00      	nop
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <LL_RCC_HSI_IsReady>:
{
 800a178:	b480      	push	{r7}
 800a17a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a17c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a186:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a18a:	d101      	bne.n	800a190 <LL_RCC_HSI_IsReady+0x18>
 800a18c:	2301      	movs	r3, #1
 800a18e:	e000      	b.n	800a192 <LL_RCC_HSI_IsReady+0x1a>
 800a190:	2300      	movs	r3, #0
}
 800a192:	4618      	mov	r0, r3
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <LL_RCC_HSI_SetCalibTrimming>:
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a1a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1a8:	685b      	ldr	r3, [r3, #4]
 800a1aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	061b      	lsls	r3, r3, #24
 800a1b2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	604b      	str	r3, [r1, #4]
}
 800a1ba:	bf00      	nop
 800a1bc:	370c      	adds	r7, #12
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr

0800a1c6 <LL_RCC_HSI48_Enable>:
{
 800a1c6:	b480      	push	{r7}
 800a1c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a1ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1d6:	f043 0301 	orr.w	r3, r3, #1
 800a1da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a1de:	bf00      	nop
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <LL_RCC_HSI48_Disable>:
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a1ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1f8:	f023 0301 	bic.w	r3, r3, #1
 800a1fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a200:	bf00      	nop
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <LL_RCC_HSI48_IsReady>:
{
 800a20a:	b480      	push	{r7}
 800a20c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a20e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a212:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a216:	f003 0302 	and.w	r3, r3, #2
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d101      	bne.n	800a222 <LL_RCC_HSI48_IsReady+0x18>
 800a21e:	2301      	movs	r3, #1
 800a220:	e000      	b.n	800a224 <LL_RCC_HSI48_IsReady+0x1a>
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <LL_RCC_LSE_Enable>:
{
 800a22e:	b480      	push	{r7}
 800a230:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a23a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a23e:	f043 0301 	orr.w	r3, r3, #1
 800a242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a246:	bf00      	nop
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <LL_RCC_LSE_Disable>:
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a25c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a260:	f023 0301 	bic.w	r3, r3, #1
 800a264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a268:	bf00      	nop
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <LL_RCC_LSE_EnableBypass>:
{
 800a272:	b480      	push	{r7}
 800a274:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a27a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a27e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a282:	f043 0304 	orr.w	r3, r3, #4
 800a286:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a28a:	bf00      	nop
 800a28c:	46bd      	mov	sp, r7
 800a28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a292:	4770      	bx	lr

0800a294 <LL_RCC_LSE_DisableBypass>:
{
 800a294:	b480      	push	{r7}
 800a296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a298:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a29c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2a4:	f023 0304 	bic.w	r3, r3, #4
 800a2a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a2ac:	bf00      	nop
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr

0800a2b6 <LL_RCC_LSE_IsReady>:
{
 800a2b6:	b480      	push	{r7}
 800a2b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a2ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2c2:	f003 0302 	and.w	r3, r3, #2
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d101      	bne.n	800a2ce <LL_RCC_LSE_IsReady+0x18>
 800a2ca:	2301      	movs	r3, #1
 800a2cc:	e000      	b.n	800a2d0 <LL_RCC_LSE_IsReady+0x1a>
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr

0800a2da <LL_RCC_LSI1_Enable>:
{
 800a2da:	b480      	push	{r7}
 800a2dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a2de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a2f2:	bf00      	nop
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <LL_RCC_LSI1_Disable>:
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a304:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a308:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a30c:	f023 0301 	bic.w	r3, r3, #1
 800a310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a314:	bf00      	nop
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <LL_RCC_LSI1_IsReady>:
{
 800a31e:	b480      	push	{r7}
 800a320:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d101      	bne.n	800a336 <LL_RCC_LSI1_IsReady+0x18>
 800a332:	2301      	movs	r3, #1
 800a334:	e000      	b.n	800a338 <LL_RCC_LSI1_IsReady+0x1a>
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	46bd      	mov	sp, r7
 800a33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a340:	4770      	bx	lr

0800a342 <LL_RCC_LSI2_Enable>:
{
 800a342:	b480      	push	{r7}
 800a344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a34a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a34e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a352:	f043 0304 	orr.w	r3, r3, #4
 800a356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a35a:	bf00      	nop
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <LL_RCC_LSI2_Disable>:
{
 800a364:	b480      	push	{r7}
 800a366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a368:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a36c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a370:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a374:	f023 0304 	bic.w	r3, r3, #4
 800a378:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a37c:	bf00      	nop
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <LL_RCC_LSI2_IsReady>:
{
 800a386:	b480      	push	{r7}
 800a388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a38a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a38e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a392:	f003 0308 	and.w	r3, r3, #8
 800a396:	2b08      	cmp	r3, #8
 800a398:	d101      	bne.n	800a39e <LL_RCC_LSI2_IsReady+0x18>
 800a39a:	2301      	movs	r3, #1
 800a39c:	e000      	b.n	800a3a0 <LL_RCC_LSI2_IsReady+0x1a>
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <LL_RCC_LSI2_SetTrimming>:
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a3b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a3ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	021b      	lsls	r3, r3, #8
 800a3c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <LL_RCC_MSI_Enable>:
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a3dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3e6:	f043 0301 	orr.w	r3, r3, #1
 800a3ea:	6013      	str	r3, [r2, #0]
}
 800a3ec:	bf00      	nop
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <LL_RCC_MSI_Disable>:
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a404:	f023 0301 	bic.w	r3, r3, #1
 800a408:	6013      	str	r3, [r2, #0]
}
 800a40a:	bf00      	nop
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <LL_RCC_MSI_IsReady>:
{
 800a414:	b480      	push	{r7}
 800a416:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 0302 	and.w	r3, r3, #2
 800a422:	2b02      	cmp	r3, #2
 800a424:	d101      	bne.n	800a42a <LL_RCC_MSI_IsReady+0x16>
 800a426:	2301      	movs	r3, #1
 800a428:	e000      	b.n	800a42c <LL_RCC_MSI_IsReady+0x18>
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <LL_RCC_MSI_SetRange>:
{
 800a436:	b480      	push	{r7}
 800a438:	b083      	sub	sp, #12
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a43e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a448:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4313      	orrs	r3, r2
 800a450:	600b      	str	r3, [r1, #0]
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <LL_RCC_MSI_GetRange>:
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a46e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2bb0      	cmp	r3, #176	@ 0xb0
 800a474:	d901      	bls.n	800a47a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800a476:	23b0      	movs	r3, #176	@ 0xb0
 800a478:	607b      	str	r3, [r7, #4]
  return msiRange;
 800a47a:	687b      	ldr	r3, [r7, #4]
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <LL_RCC_MSI_SetCalibTrimming>:
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	021b      	lsls	r3, r3, #8
 800a49e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	604b      	str	r3, [r1, #4]
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <LL_RCC_SetSysClkSource>:
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a4ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	f023 0203 	bic.w	r2, r3, #3
 800a4c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	608b      	str	r3, [r1, #8]
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <LL_RCC_GetSysClkSource>:
{
 800a4da:	b480      	push	{r7}
 800a4dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a4de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f003 030c 	and.w	r3, r3, #12
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <LL_RCC_SetAHBPrescaler>:
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a4fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a504:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	608b      	str	r3, [r1, #8]
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <LL_C2_RCC_SetAHBPrescaler>:
{
 800a51a:	b480      	push	{r7}
 800a51c:	b083      	sub	sp, #12
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a526:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a52a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a52e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	4313      	orrs	r3, r2
 800a536:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a53a:	bf00      	nop
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <LL_RCC_SetAHB4Prescaler>:
{
 800a546:	b480      	push	{r7}
 800a548:	b083      	sub	sp, #12
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a54e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a552:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a556:	f023 020f 	bic.w	r2, r3, #15
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	091b      	lsrs	r3, r3, #4
 800a55e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a562:	4313      	orrs	r3, r2
 800a564:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a568:	bf00      	nop
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <LL_RCC_SetAPB1Prescaler>:
{
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a580:	689b      	ldr	r3, [r3, #8]
 800a582:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a586:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4313      	orrs	r3, r2
 800a58e:	608b      	str	r3, [r1, #8]
}
 800a590:	bf00      	nop
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <LL_RCC_SetAPB2Prescaler>:
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a5a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a5ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4313      	orrs	r3, r2
 800a5b6:	608b      	str	r3, [r1, #8]
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <LL_RCC_GetAHBPrescaler>:
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a5c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <LL_RCC_GetAHB4Prescaler>:
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5e8:	011b      	lsls	r3, r3, #4
 800a5ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <LL_RCC_GetAPB1Prescaler>:
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a5fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a606:	4618      	mov	r0, r3
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <LL_RCC_GetAPB2Prescaler>:
{
 800a610:	b480      	push	{r7}
 800a612:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a614:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a61e:	4618      	mov	r0, r3
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <LL_RCC_PLL_Enable>:
{
 800a628:	b480      	push	{r7}
 800a62a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a62c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a63a:	6013      	str	r3, [r2, #0]
}
 800a63c:	bf00      	nop
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr

0800a646 <LL_RCC_PLL_Disable>:
{
 800a646:	b480      	push	{r7}
 800a648:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a64a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a654:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a658:	6013      	str	r3, [r2, #0]
}
 800a65a:	bf00      	nop
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <LL_RCC_PLL_IsReady>:
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a672:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a676:	d101      	bne.n	800a67c <LL_RCC_PLL_IsReady+0x18>
 800a678:	2301      	movs	r3, #1
 800a67a:	e000      	b.n	800a67e <LL_RCC_PLL_IsReady+0x1a>
 800a67c:	2300      	movs	r3, #0
}
 800a67e:	4618      	mov	r0, r3
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <LL_RCC_PLL_GetN>:
{
 800a688:	b480      	push	{r7}
 800a68a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a68c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	0a1b      	lsrs	r3, r3, #8
 800a694:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a698:	4618      	mov	r0, r3
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <LL_RCC_PLL_GetR>:
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a6a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <LL_RCC_PLL_GetDivider>:
{
 800a6ba:	b480      	push	{r7}
 800a6bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a6be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6c2:	68db      	ldr	r3, [r3, #12]
 800a6c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <LL_RCC_PLL_GetMainSource>:
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a6d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	f003 0303 	and.w	r3, r3, #3
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <LL_RCC_IsActiveFlag_HPRE>:
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a6ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6fc:	d101      	bne.n	800a702 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a6fe:	2301      	movs	r3, #1
 800a700:	e000      	b.n	800a704 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a702:	2300      	movs	r3, #0
}
 800a704:	4618      	mov	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800a70e:	b480      	push	{r7}
 800a710:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a712:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a716:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a71a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a71e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a722:	d101      	bne.n	800a728 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a724:	2301      	movs	r3, #1
 800a726:	e000      	b.n	800a72a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a728:	2300      	movs	r3, #0
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800a734:	b480      	push	{r7}
 800a736:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a738:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a73c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a740:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a748:	d101      	bne.n	800a74e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a74a:	2301      	movs	r3, #1
 800a74c:	e000      	b.n	800a750 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr

0800a75a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800a75a:	b480      	push	{r7}
 800a75c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a75e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a768:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a76c:	d101      	bne.n	800a772 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <LL_RCC_IsActiveFlag_PPRE2>:
{
 800a77e:	b480      	push	{r7}
 800a780:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a782:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a78c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a790:	d101      	bne.n	800a796 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a792:	2301      	movs	r3, #1
 800a794:	e000      	b.n	800a798 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr
	...

0800a7a4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a7a4:	b590      	push	{r4, r7, lr}
 800a7a6:	b08d      	sub	sp, #52	@ 0x34
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d101      	bne.n	800a7b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	e363      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f003 0320 	and.w	r3, r3, #32
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 808d 	beq.w	800a8de <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7c4:	f7ff fe89 	bl	800a4da <LL_RCC_GetSysClkSource>
 800a7c8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7ca:	f7ff ff82 	bl	800a6d2 <LL_RCC_PLL_GetMainSource>
 800a7ce:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <HAL_RCC_OscConfig+0x3e>
 800a7d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d8:	2b0c      	cmp	r3, #12
 800a7da:	d147      	bne.n	800a86c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d144      	bne.n	800a86c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	69db      	ldr	r3, [r3, #28]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	e347      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a7f2:	f7ff fe34 	bl	800a45e <LL_RCC_MSI_GetRange>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	429c      	cmp	r4, r3
 800a7fa:	d914      	bls.n	800a826 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fd2f 	bl	800b264 <RCC_SetFlashLatencyFromMSIRange>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d001      	beq.n	800a810 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a80c:	2301      	movs	r3, #1
 800a80e:	e336      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a814:	4618      	mov	r0, r3
 800a816:	f7ff fe0e 	bl	800a436 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	4618      	mov	r0, r3
 800a820:	f7ff fe32 	bl	800a488 <LL_RCC_MSI_SetCalibTrimming>
 800a824:	e013      	b.n	800a84e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7ff fe03 	bl	800a436 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6a1b      	ldr	r3, [r3, #32]
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff fe27 	bl	800a488 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fd10 	bl	800b264 <RCC_SetFlashLatencyFromMSIRange>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	e317      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a84e:	f000 fcc9 	bl	800b1e4 <HAL_RCC_GetHCLKFreq>
 800a852:	4603      	mov	r3, r0
 800a854:	4aa4      	ldr	r2, [pc, #656]	@ (800aae8 <HAL_RCC_OscConfig+0x344>)
 800a856:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a858:	4ba4      	ldr	r3, [pc, #656]	@ (800aaec <HAL_RCC_OscConfig+0x348>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd fdbd 	bl	80083dc <HAL_InitTick>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d039      	beq.n	800a8dc <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a868:	2301      	movs	r3, #1
 800a86a:	e308      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	69db      	ldr	r3, [r3, #28]
 800a870:	2b00      	cmp	r3, #0
 800a872:	d01e      	beq.n	800a8b2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a874:	f7ff fdb0 	bl	800a3d8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a878:	f7fd fdfe 	bl	8008478 <HAL_GetTick>
 800a87c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a87e:	e008      	b.n	800a892 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a880:	f7fd fdfa 	bl	8008478 <HAL_GetTick>
 800a884:	4602      	mov	r2, r0
 800a886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a888:	1ad3      	subs	r3, r2, r3
 800a88a:	2b02      	cmp	r3, #2
 800a88c:	d901      	bls.n	800a892 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a88e:	2303      	movs	r3, #3
 800a890:	e2f5      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a892:	f7ff fdbf 	bl	800a414 <LL_RCC_MSI_IsReady>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d0f1      	beq.n	800a880 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	f7ff fdc8 	bl	800a436 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7ff fdec 	bl	800a488 <LL_RCC_MSI_SetCalibTrimming>
 800a8b0:	e015      	b.n	800a8de <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a8b2:	f7ff fda0 	bl	800a3f6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a8b6:	f7fd fddf 	bl	8008478 <HAL_GetTick>
 800a8ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a8bc:	e008      	b.n	800a8d0 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8be:	f7fd fddb 	bl	8008478 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d901      	bls.n	800a8d0 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e2d6      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a8d0:	f7ff fda0 	bl	800a414 <LL_RCC_MSI_IsReady>
 800a8d4:	4603      	mov	r3, r0
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d1f1      	bne.n	800a8be <HAL_RCC_OscConfig+0x11a>
 800a8da:	e000      	b.n	800a8de <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a8dc:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d047      	beq.n	800a97a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ea:	f7ff fdf6 	bl	800a4da <LL_RCC_GetSysClkSource>
 800a8ee:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8f0:	f7ff feef 	bl	800a6d2 <LL_RCC_PLL_GetMainSource>
 800a8f4:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a8f6:	6a3b      	ldr	r3, [r7, #32]
 800a8f8:	2b08      	cmp	r3, #8
 800a8fa:	d005      	beq.n	800a908 <HAL_RCC_OscConfig+0x164>
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	2b0c      	cmp	r3, #12
 800a900:	d108      	bne.n	800a914 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	2b03      	cmp	r3, #3
 800a906:	d105      	bne.n	800a914 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d134      	bne.n	800a97a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	e2b4      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	685b      	ldr	r3, [r3, #4]
 800a918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a91c:	d102      	bne.n	800a924 <HAL_RCC_OscConfig+0x180>
 800a91e:	f7ff fbdd 	bl	800a0dc <LL_RCC_HSE_Enable>
 800a922:	e001      	b.n	800a928 <HAL_RCC_OscConfig+0x184>
 800a924:	f7ff fbe9 	bl	800a0fa <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d012      	beq.n	800a956 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a930:	f7fd fda2 	bl	8008478 <HAL_GetTick>
 800a934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a936:	e008      	b.n	800a94a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a938:	f7fd fd9e 	bl	8008478 <HAL_GetTick>
 800a93c:	4602      	mov	r2, r0
 800a93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a940:	1ad3      	subs	r3, r2, r3
 800a942:	2b64      	cmp	r3, #100	@ 0x64
 800a944:	d901      	bls.n	800a94a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e299      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a94a:	f7ff fbe5 	bl	800a118 <LL_RCC_HSE_IsReady>
 800a94e:	4603      	mov	r3, r0
 800a950:	2b00      	cmp	r3, #0
 800a952:	d0f1      	beq.n	800a938 <HAL_RCC_OscConfig+0x194>
 800a954:	e011      	b.n	800a97a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a956:	f7fd fd8f 	bl	8008478 <HAL_GetTick>
 800a95a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a95c:	e008      	b.n	800a970 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a95e:	f7fd fd8b 	bl	8008478 <HAL_GetTick>
 800a962:	4602      	mov	r2, r0
 800a964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	2b64      	cmp	r3, #100	@ 0x64
 800a96a:	d901      	bls.n	800a970 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a96c:	2303      	movs	r3, #3
 800a96e:	e286      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a970:	f7ff fbd2 	bl	800a118 <LL_RCC_HSE_IsReady>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1f1      	bne.n	800a95e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f003 0302 	and.w	r3, r3, #2
 800a982:	2b00      	cmp	r3, #0
 800a984:	d04c      	beq.n	800aa20 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a986:	f7ff fda8 	bl	800a4da <LL_RCC_GetSysClkSource>
 800a98a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a98c:	f7ff fea1 	bl	800a6d2 <LL_RCC_PLL_GetMainSource>
 800a990:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	2b04      	cmp	r3, #4
 800a996:	d005      	beq.n	800a9a4 <HAL_RCC_OscConfig+0x200>
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	2b0c      	cmp	r3, #12
 800a99c:	d10e      	bne.n	800a9bc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b02      	cmp	r3, #2
 800a9a2:	d10b      	bne.n	800a9bc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e266      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	691b      	ldr	r3, [r3, #16]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fbf1 	bl	800a19c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a9ba:	e031      	b.n	800aa20 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	68db      	ldr	r3, [r3, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d019      	beq.n	800a9f8 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9c4:	f7ff fbba 	bl	800a13c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9c8:	f7fd fd56 	bl	8008478 <HAL_GetTick>
 800a9cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9ce:	e008      	b.n	800a9e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9d0:	f7fd fd52 	bl	8008478 <HAL_GetTick>
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	2b02      	cmp	r3, #2
 800a9dc:	d901      	bls.n	800a9e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	e24d      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9e2:	f7ff fbc9 	bl	800a178 <LL_RCC_HSI_IsReady>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d0f1      	beq.n	800a9d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	691b      	ldr	r3, [r3, #16]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fbd3 	bl	800a19c <LL_RCC_HSI_SetCalibTrimming>
 800a9f6:	e013      	b.n	800aa20 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9f8:	f7ff fbaf 	bl	800a15a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9fc:	f7fd fd3c 	bl	8008478 <HAL_GetTick>
 800aa00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa02:	e008      	b.n	800aa16 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa04:	f7fd fd38 	bl	8008478 <HAL_GetTick>
 800aa08:	4602      	mov	r2, r0
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa0c:	1ad3      	subs	r3, r2, r3
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d901      	bls.n	800aa16 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800aa12:	2303      	movs	r3, #3
 800aa14:	e233      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800aa16:	f7ff fbaf 	bl	800a178 <LL_RCC_HSI_IsReady>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1f1      	bne.n	800aa04 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f003 0308 	and.w	r3, r3, #8
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	f000 80a3 	beq.w	800ab80 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	695b      	ldr	r3, [r3, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d076      	beq.n	800ab30 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f003 0310 	and.w	r3, r3, #16
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d046      	beq.n	800aadc <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aa4e:	f7ff fc66 	bl	800a31e <LL_RCC_LSI1_IsReady>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d113      	bne.n	800aa80 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aa58:	f7ff fc3f 	bl	800a2da <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa5c:	f7fd fd0c 	bl	8008478 <HAL_GetTick>
 800aa60:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa62:	e008      	b.n	800aa76 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aa64:	f7fd fd08 	bl	8008478 <HAL_GetTick>
 800aa68:	4602      	mov	r2, r0
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa6c:	1ad3      	subs	r3, r2, r3
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d901      	bls.n	800aa76 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aa72:	2303      	movs	r3, #3
 800aa74:	e203      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa76:	f7ff fc52 	bl	800a31e <LL_RCC_LSI1_IsReady>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0f1      	beq.n	800aa64 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800aa80:	f7ff fc5f 	bl	800a342 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa84:	f7fd fcf8 	bl	8008478 <HAL_GetTick>
 800aa88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa8a:	e008      	b.n	800aa9e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aa8c:	f7fd fcf4 	bl	8008478 <HAL_GetTick>
 800aa90:	4602      	mov	r2, r0
 800aa92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b03      	cmp	r3, #3
 800aa98:	d901      	bls.n	800aa9e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e1ef      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa9e:	f7ff fc72 	bl	800a386 <LL_RCC_LSI2_IsReady>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0f1      	beq.n	800aa8c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7ff fc7c 	bl	800a3aa <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800aab2:	f7ff fc23 	bl	800a2fc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab6:	f7fd fcdf 	bl	8008478 <HAL_GetTick>
 800aaba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aabc:	e008      	b.n	800aad0 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aabe:	f7fd fcdb 	bl	8008478 <HAL_GetTick>
 800aac2:	4602      	mov	r2, r0
 800aac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac6:	1ad3      	subs	r3, r2, r3
 800aac8:	2b02      	cmp	r3, #2
 800aaca:	d901      	bls.n	800aad0 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800aacc:	2303      	movs	r3, #3
 800aace:	e1d6      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aad0:	f7ff fc25 	bl	800a31e <LL_RCC_LSI1_IsReady>
 800aad4:	4603      	mov	r3, r0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1f1      	bne.n	800aabe <HAL_RCC_OscConfig+0x31a>
 800aada:	e051      	b.n	800ab80 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800aadc:	f7ff fbfd 	bl	800a2da <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aae0:	f7fd fcca 	bl	8008478 <HAL_GetTick>
 800aae4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aae6:	e00c      	b.n	800ab02 <HAL_RCC_OscConfig+0x35e>
 800aae8:	20000008 	.word	0x20000008
 800aaec:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aaf0:	f7fd fcc2 	bl	8008478 <HAL_GetTick>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf8:	1ad3      	subs	r3, r2, r3
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	d901      	bls.n	800ab02 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800aafe:	2303      	movs	r3, #3
 800ab00:	e1bd      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800ab02:	f7ff fc0c 	bl	800a31e <LL_RCC_LSI1_IsReady>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d0f1      	beq.n	800aaf0 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800ab0c:	f7ff fc2a 	bl	800a364 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab10:	e008      	b.n	800ab24 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab12:	f7fd fcb1 	bl	8008478 <HAL_GetTick>
 800ab16:	4602      	mov	r2, r0
 800ab18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab1a:	1ad3      	subs	r3, r2, r3
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d901      	bls.n	800ab24 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e1ac      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab24:	f7ff fc2f 	bl	800a386 <LL_RCC_LSI2_IsReady>
 800ab28:	4603      	mov	r3, r0
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d1f1      	bne.n	800ab12 <HAL_RCC_OscConfig+0x36e>
 800ab2e:	e027      	b.n	800ab80 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ab30:	f7ff fc18 	bl	800a364 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab34:	f7fd fca0 	bl	8008478 <HAL_GetTick>
 800ab38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab3a:	e008      	b.n	800ab4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab3c:	f7fd fc9c 	bl	8008478 <HAL_GetTick>
 800ab40:	4602      	mov	r2, r0
 800ab42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d901      	bls.n	800ab4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e197      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab4e:	f7ff fc1a 	bl	800a386 <LL_RCC_LSI2_IsReady>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d1f1      	bne.n	800ab3c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ab58:	f7ff fbd0 	bl	800a2fc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab5c:	f7fd fc8c 	bl	8008478 <HAL_GetTick>
 800ab60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab62:	e008      	b.n	800ab76 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab64:	f7fd fc88 	bl	8008478 <HAL_GetTick>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab6c:	1ad3      	subs	r3, r2, r3
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d901      	bls.n	800ab76 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ab72:	2303      	movs	r3, #3
 800ab74:	e183      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab76:	f7ff fbd2 	bl	800a31e <LL_RCC_LSI1_IsReady>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d1f1      	bne.n	800ab64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d05b      	beq.n	800ac44 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab8c:	4ba7      	ldr	r3, [pc, #668]	@ (800ae2c <HAL_RCC_OscConfig+0x688>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d114      	bne.n	800abc2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ab98:	f7ff fa70 	bl	800a07c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab9c:	f7fd fc6c 	bl	8008478 <HAL_GetTick>
 800aba0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aba2:	e008      	b.n	800abb6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aba4:	f7fd fc68 	bl	8008478 <HAL_GetTick>
 800aba8:	4602      	mov	r2, r0
 800abaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d901      	bls.n	800abb6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800abb2:	2303      	movs	r3, #3
 800abb4:	e163      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800abb6:	4b9d      	ldr	r3, [pc, #628]	@ (800ae2c <HAL_RCC_OscConfig+0x688>)
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d0f0      	beq.n	800aba4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	689b      	ldr	r3, [r3, #8]
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d102      	bne.n	800abd0 <HAL_RCC_OscConfig+0x42c>
 800abca:	f7ff fb30 	bl	800a22e <LL_RCC_LSE_Enable>
 800abce:	e00c      	b.n	800abea <HAL_RCC_OscConfig+0x446>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d104      	bne.n	800abe2 <HAL_RCC_OscConfig+0x43e>
 800abd8:	f7ff fb4b 	bl	800a272 <LL_RCC_LSE_EnableBypass>
 800abdc:	f7ff fb27 	bl	800a22e <LL_RCC_LSE_Enable>
 800abe0:	e003      	b.n	800abea <HAL_RCC_OscConfig+0x446>
 800abe2:	f7ff fb35 	bl	800a250 <LL_RCC_LSE_Disable>
 800abe6:	f7ff fb55 	bl	800a294 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	689b      	ldr	r3, [r3, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d014      	beq.n	800ac1c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abf2:	f7fd fc41 	bl	8008478 <HAL_GetTick>
 800abf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800abf8:	e00a      	b.n	800ac10 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abfa:	f7fd fc3d 	bl	8008478 <HAL_GetTick>
 800abfe:	4602      	mov	r2, r0
 800ac00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac02:	1ad3      	subs	r3, r2, r3
 800ac04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d901      	bls.n	800ac10 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ac0c:	2303      	movs	r3, #3
 800ac0e:	e136      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ac10:	f7ff fb51 	bl	800a2b6 <LL_RCC_LSE_IsReady>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d0ef      	beq.n	800abfa <HAL_RCC_OscConfig+0x456>
 800ac1a:	e013      	b.n	800ac44 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac1c:	f7fd fc2c 	bl	8008478 <HAL_GetTick>
 800ac20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac22:	e00a      	b.n	800ac3a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac24:	f7fd fc28 	bl	8008478 <HAL_GetTick>
 800ac28:	4602      	mov	r2, r0
 800ac2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac2c:	1ad3      	subs	r3, r2, r3
 800ac2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d901      	bls.n	800ac3a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e121      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac3a:	f7ff fb3c 	bl	800a2b6 <LL_RCC_LSE_IsReady>
 800ac3e:	4603      	mov	r3, r0
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d1ef      	bne.n	800ac24 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d02c      	beq.n	800acaa <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d014      	beq.n	800ac82 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac58:	f7ff fab5 	bl	800a1c6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac5c:	f7fd fc0c 	bl	8008478 <HAL_GetTick>
 800ac60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac62:	e008      	b.n	800ac76 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac64:	f7fd fc08 	bl	8008478 <HAL_GetTick>
 800ac68:	4602      	mov	r2, r0
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6c:	1ad3      	subs	r3, r2, r3
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d901      	bls.n	800ac76 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ac72:	2303      	movs	r3, #3
 800ac74:	e103      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac76:	f7ff fac8 	bl	800a20a <LL_RCC_HSI48_IsReady>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d0f1      	beq.n	800ac64 <HAL_RCC_OscConfig+0x4c0>
 800ac80:	e013      	b.n	800acaa <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac82:	f7ff fab1 	bl	800a1e8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac86:	f7fd fbf7 	bl	8008478 <HAL_GetTick>
 800ac8a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ac8c:	e008      	b.n	800aca0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac8e:	f7fd fbf3 	bl	8008478 <HAL_GetTick>
 800ac92:	4602      	mov	r2, r0
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	2b02      	cmp	r3, #2
 800ac9a:	d901      	bls.n	800aca0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ac9c:	2303      	movs	r3, #3
 800ac9e:	e0ee      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800aca0:	f7ff fab3 	bl	800a20a <LL_RCC_HSI48_IsReady>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d1f1      	bne.n	800ac8e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acae:	2b00      	cmp	r3, #0
 800acb0:	f000 80e4 	beq.w	800ae7c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800acb4:	f7ff fc11 	bl	800a4da <LL_RCC_GetSysClkSource>
 800acb8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800acba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acc6:	2b02      	cmp	r3, #2
 800acc8:	f040 80b4 	bne.w	800ae34 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f003 0203 	and.w	r2, r3, #3
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d123      	bne.n	800ad22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ace4:	429a      	cmp	r2, r3
 800ace6:	d11c      	bne.n	800ad22 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	0a1b      	lsrs	r3, r3, #8
 800acec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d114      	bne.n	800ad22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d10d      	bne.n	800ad22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d106      	bne.n	800ad22 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d05d      	beq.n	800adde <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	2b0c      	cmp	r3, #12
 800ad26:	d058      	beq.n	800adda <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ad28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d001      	beq.n	800ad3a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ad36:	2301      	movs	r3, #1
 800ad38:	e0a1      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ad3a:	f7ff fc84 	bl	800a646 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad3e:	f7fd fb9b 	bl	8008478 <HAL_GetTick>
 800ad42:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad44:	e008      	b.n	800ad58 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad46:	f7fd fb97 	bl	8008478 <HAL_GetTick>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad4e:	1ad3      	subs	r3, r2, r3
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d901      	bls.n	800ad58 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e092      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1ef      	bne.n	800ad46 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad6a:	68da      	ldr	r2, [r3, #12]
 800ad6c:	4b30      	ldr	r3, [pc, #192]	@ (800ae30 <HAL_RCC_OscConfig+0x68c>)
 800ad6e:	4013      	ands	r3, r2
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ad78:	4311      	orrs	r1, r2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad7e:	0212      	lsls	r2, r2, #8
 800ad80:	4311      	orrs	r1, r2
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ad86:	4311      	orrs	r1, r2
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ad8c:	4311      	orrs	r1, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ad92:	430a      	orrs	r2, r1
 800ad94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad98:	4313      	orrs	r3, r2
 800ad9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ad9c:	f7ff fc44 	bl	800a628 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ada0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800adb0:	f7fd fb62 	bl	8008478 <HAL_GetTick>
 800adb4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adb6:	e008      	b.n	800adca <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adb8:	f7fd fb5e 	bl	8008478 <HAL_GetTick>
 800adbc:	4602      	mov	r2, r0
 800adbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2b02      	cmp	r3, #2
 800adc4:	d901      	bls.n	800adca <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800adc6:	2303      	movs	r3, #3
 800adc8:	e059      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800add4:	2b00      	cmp	r3, #0
 800add6:	d0ef      	beq.n	800adb8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800add8:	e050      	b.n	800ae7c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e04f      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d147      	bne.n	800ae7c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800adec:	f7ff fc1c 	bl	800a628 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800adf0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adf4:	68db      	ldr	r3, [r3, #12]
 800adf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adfe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ae00:	f7fd fb3a 	bl	8008478 <HAL_GetTick>
 800ae04:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae06:	e008      	b.n	800ae1a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae08:	f7fd fb36 	bl	8008478 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d901      	bls.n	800ae1a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e031      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d0ef      	beq.n	800ae08 <HAL_RCC_OscConfig+0x664>
 800ae28:	e028      	b.n	800ae7c <HAL_RCC_OscConfig+0x6d8>
 800ae2a:	bf00      	nop
 800ae2c:	58000400 	.word	0x58000400
 800ae30:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	2b0c      	cmp	r3, #12
 800ae38:	d01e      	beq.n	800ae78 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae3a:	f7ff fc04 	bl	800a646 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae3e:	f7fd fb1b 	bl	8008478 <HAL_GetTick>
 800ae42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae44:	e008      	b.n	800ae58 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae46:	f7fd fb17 	bl	8008478 <HAL_GetTick>
 800ae4a:	4602      	mov	r2, r0
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae4e:	1ad3      	subs	r3, r2, r3
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d901      	bls.n	800ae58 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ae54:	2303      	movs	r3, #3
 800ae56:	e012      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d1ef      	bne.n	800ae46 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ae66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae6a:	68da      	ldr	r2, [r3, #12]
 800ae6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae70:	4b05      	ldr	r3, [pc, #20]	@ (800ae88 <HAL_RCC_OscConfig+0x6e4>)
 800ae72:	4013      	ands	r3, r2
 800ae74:	60cb      	str	r3, [r1, #12]
 800ae76:	e001      	b.n	800ae7c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ae78:	2301      	movs	r3, #1
 800ae7a:	e000      	b.n	800ae7e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ae7c:	2300      	movs	r3, #0
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3734      	adds	r7, #52	@ 0x34
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd90      	pop	{r4, r7, pc}
 800ae86:	bf00      	nop
 800ae88:	eefefffc 	.word	0xeefefffc

0800ae8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e12d      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aea0:	4b98      	ldr	r3, [pc, #608]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0307 	and.w	r3, r3, #7
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d91b      	bls.n	800aee6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aeae:	4b95      	ldr	r3, [pc, #596]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	f023 0207 	bic.w	r2, r3, #7
 800aeb6:	4993      	ldr	r1, [pc, #588]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aebe:	f7fd fadb 	bl	8008478 <HAL_GetTick>
 800aec2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aec4:	e008      	b.n	800aed8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800aec6:	f7fd fad7 	bl	8008478 <HAL_GetTick>
 800aeca:	4602      	mov	r2, r0
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d901      	bls.n	800aed8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800aed4:	2303      	movs	r3, #3
 800aed6:	e111      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aed8:	4b8a      	ldr	r3, [pc, #552]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 0307 	and.w	r3, r3, #7
 800aee0:	683a      	ldr	r2, [r7, #0]
 800aee2:	429a      	cmp	r2, r3
 800aee4:	d1ef      	bne.n	800aec6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f003 0302 	and.w	r3, r3, #2
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d016      	beq.n	800af20 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	689b      	ldr	r3, [r3, #8]
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7ff fafb 	bl	800a4f2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aefc:	f7fd fabc 	bl	8008478 <HAL_GetTick>
 800af00:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af02:	e008      	b.n	800af16 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af04:	f7fd fab8 	bl	8008478 <HAL_GetTick>
 800af08:	4602      	mov	r2, r0
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	1ad3      	subs	r3, r2, r3
 800af0e:	2b02      	cmp	r3, #2
 800af10:	d901      	bls.n	800af16 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800af12:	2303      	movs	r3, #3
 800af14:	e0f2      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800af16:	f7ff fbe8 	bl	800a6ea <LL_RCC_IsActiveFlag_HPRE>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d0f1      	beq.n	800af04 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	f003 0320 	and.w	r3, r3, #32
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d016      	beq.n	800af5a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	695b      	ldr	r3, [r3, #20]
 800af30:	4618      	mov	r0, r3
 800af32:	f7ff faf2 	bl	800a51a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af36:	f7fd fa9f 	bl	8008478 <HAL_GetTick>
 800af3a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af3c:	e008      	b.n	800af50 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af3e:	f7fd fa9b 	bl	8008478 <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	2b02      	cmp	r3, #2
 800af4a:	d901      	bls.n	800af50 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800af4c:	2303      	movs	r3, #3
 800af4e:	e0d5      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af50:	f7ff fbdd 	bl	800a70e <LL_RCC_IsActiveFlag_C2HPRE>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d0f1      	beq.n	800af3e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af62:	2b00      	cmp	r3, #0
 800af64:	d016      	beq.n	800af94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f7ff faeb 	bl	800a546 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af70:	f7fd fa82 	bl	8008478 <HAL_GetTick>
 800af74:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af76:	e008      	b.n	800af8a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af78:	f7fd fa7e 	bl	8008478 <HAL_GetTick>
 800af7c:	4602      	mov	r2, r0
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1ad3      	subs	r3, r2, r3
 800af82:	2b02      	cmp	r3, #2
 800af84:	d901      	bls.n	800af8a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800af86:	2303      	movs	r3, #3
 800af88:	e0b8      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af8a:	f7ff fbd3 	bl	800a734 <LL_RCC_IsActiveFlag_SHDHPRE>
 800af8e:	4603      	mov	r3, r0
 800af90:	2b00      	cmp	r3, #0
 800af92:	d0f1      	beq.n	800af78 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d016      	beq.n	800afce <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7ff fae5 	bl	800a574 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afaa:	f7fd fa65 	bl	8008478 <HAL_GetTick>
 800afae:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afb2:	f7fd fa61 	bl	8008478 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e09b      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800afc4:	f7ff fbc9 	bl	800a75a <LL_RCC_IsActiveFlag_PPRE1>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d0f1      	beq.n	800afb2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0308 	and.w	r3, r3, #8
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d017      	beq.n	800b00a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	00db      	lsls	r3, r3, #3
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7ff fadb 	bl	800a59c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afe6:	f7fd fa47 	bl	8008478 <HAL_GetTick>
 800afea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800afec:	e008      	b.n	800b000 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afee:	f7fd fa43 	bl	8008478 <HAL_GetTick>
 800aff2:	4602      	mov	r2, r0
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	1ad3      	subs	r3, r2, r3
 800aff8:	2b02      	cmp	r3, #2
 800affa:	d901      	bls.n	800b000 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800affc:	2303      	movs	r3, #3
 800affe:	e07d      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b000:	f7ff fbbd 	bl	800a77e <LL_RCC_IsActiveFlag_PPRE2>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d0f1      	beq.n	800afee <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f003 0301 	and.w	r3, r3, #1
 800b012:	2b00      	cmp	r3, #0
 800b014:	d043      	beq.n	800b09e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d106      	bne.n	800b02c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b01e:	f7ff f87b 	bl	800a118 <LL_RCC_HSE_IsReady>
 800b022:	4603      	mov	r3, r0
 800b024:	2b00      	cmp	r3, #0
 800b026:	d11e      	bne.n	800b066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b028:	2301      	movs	r3, #1
 800b02a:	e067      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	2b03      	cmp	r3, #3
 800b032:	d106      	bne.n	800b042 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b034:	f7ff fb16 	bl	800a664 <LL_RCC_PLL_IsReady>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d113      	bne.n	800b066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b03e:	2301      	movs	r3, #1
 800b040:	e05c      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	685b      	ldr	r3, [r3, #4]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d106      	bne.n	800b058 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b04a:	f7ff f9e3 	bl	800a414 <LL_RCC_MSI_IsReady>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d108      	bne.n	800b066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b054:	2301      	movs	r3, #1
 800b056:	e051      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b058:	f7ff f88e 	bl	800a178 <LL_RCC_HSI_IsReady>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d101      	bne.n	800b066 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b062:	2301      	movs	r3, #1
 800b064:	e04a      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f7ff fa21 	bl	800a4b2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b070:	f7fd fa02 	bl	8008478 <HAL_GetTick>
 800b074:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b076:	e00a      	b.n	800b08e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b078:	f7fd f9fe 	bl	8008478 <HAL_GetTick>
 800b07c:	4602      	mov	r2, r0
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	1ad3      	subs	r3, r2, r3
 800b082:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b086:	4293      	cmp	r3, r2
 800b088:	d901      	bls.n	800b08e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b08a:	2303      	movs	r3, #3
 800b08c:	e036      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b08e:	f7ff fa24 	bl	800a4da <LL_RCC_GetSysClkSource>
 800b092:	4602      	mov	r2, r0
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d1ec      	bne.n	800b078 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b09e:	4b19      	ldr	r3, [pc, #100]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0307 	and.w	r3, r3, #7
 800b0a6:	683a      	ldr	r2, [r7, #0]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d21b      	bcs.n	800b0e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0ac:	4b15      	ldr	r3, [pc, #84]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f023 0207 	bic.w	r2, r3, #7
 800b0b4:	4913      	ldr	r1, [pc, #76]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	4313      	orrs	r3, r2
 800b0ba:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0bc:	f7fd f9dc 	bl	8008478 <HAL_GetTick>
 800b0c0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0c2:	e008      	b.n	800b0d6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b0c4:	f7fd f9d8 	bl	8008478 <HAL_GetTick>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	1ad3      	subs	r3, r2, r3
 800b0ce:	2b02      	cmp	r3, #2
 800b0d0:	d901      	bls.n	800b0d6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b0d2:	2303      	movs	r3, #3
 800b0d4:	e012      	b.n	800b0fc <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b104 <HAL_RCC_ClockConfig+0x278>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f003 0307 	and.w	r3, r3, #7
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d1ef      	bne.n	800b0c4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b0e4:	f000 f87e 	bl	800b1e4 <HAL_RCC_GetHCLKFreq>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	4a07      	ldr	r2, [pc, #28]	@ (800b108 <HAL_RCC_ClockConfig+0x27c>)
 800b0ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b0ee:	f7fd f9cf 	bl	8008490 <HAL_GetTickPrio>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fd f971 	bl	80083dc <HAL_InitTick>
 800b0fa:	4603      	mov	r3, r0
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	3710      	adds	r7, #16
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}
 800b104:	58004000 	.word	0x58004000
 800b108:	20000008 	.word	0x20000008

0800b10c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b10c:	b590      	push	{r4, r7, lr}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b112:	f7ff f9e2 	bl	800a4da <LL_RCC_GetSysClkSource>
 800b116:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d10a      	bne.n	800b134 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b11e:	f7ff f99e 	bl	800a45e <LL_RCC_MSI_GetRange>
 800b122:	4603      	mov	r3, r0
 800b124:	091b      	lsrs	r3, r3, #4
 800b126:	f003 030f 	and.w	r3, r3, #15
 800b12a:	4a2b      	ldr	r2, [pc, #172]	@ (800b1d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b12c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b130:	60fb      	str	r3, [r7, #12]
 800b132:	e04b      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2b04      	cmp	r3, #4
 800b138:	d102      	bne.n	800b140 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b13a:	4b28      	ldr	r3, [pc, #160]	@ (800b1dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e045      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b08      	cmp	r3, #8
 800b144:	d10a      	bne.n	800b15c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b146:	f7fe ffb7 	bl	800a0b8 <LL_RCC_HSE_IsEnabledDiv2>
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d102      	bne.n	800b156 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b150:	4b22      	ldr	r3, [pc, #136]	@ (800b1dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	e03a      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b156:	4b22      	ldr	r3, [pc, #136]	@ (800b1e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e037      	b.n	800b1cc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b15c:	f7ff fab9 	bl	800a6d2 <LL_RCC_PLL_GetMainSource>
 800b160:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b02      	cmp	r3, #2
 800b166:	d003      	beq.n	800b170 <HAL_RCC_GetSysClockFreq+0x64>
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d003      	beq.n	800b176 <HAL_RCC_GetSysClockFreq+0x6a>
 800b16e:	e00d      	b.n	800b18c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b170:	4b1a      	ldr	r3, [pc, #104]	@ (800b1dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800b172:	60bb      	str	r3, [r7, #8]
        break;
 800b174:	e015      	b.n	800b1a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b176:	f7fe ff9f 	bl	800a0b8 <LL_RCC_HSE_IsEnabledDiv2>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b01      	cmp	r3, #1
 800b17e:	d102      	bne.n	800b186 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b180:	4b16      	ldr	r3, [pc, #88]	@ (800b1dc <HAL_RCC_GetSysClockFreq+0xd0>)
 800b182:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b184:	e00d      	b.n	800b1a2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b186:	4b16      	ldr	r3, [pc, #88]	@ (800b1e0 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b188:	60bb      	str	r3, [r7, #8]
        break;
 800b18a:	e00a      	b.n	800b1a2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b18c:	f7ff f967 	bl	800a45e <LL_RCC_MSI_GetRange>
 800b190:	4603      	mov	r3, r0
 800b192:	091b      	lsrs	r3, r3, #4
 800b194:	f003 030f 	and.w	r3, r3, #15
 800b198:	4a0f      	ldr	r2, [pc, #60]	@ (800b1d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b19a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b19e:	60bb      	str	r3, [r7, #8]
        break;
 800b1a0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b1a2:	f7ff fa71 	bl	800a688 <LL_RCC_PLL_GetN>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	fb03 f402 	mul.w	r4, r3, r2
 800b1ae:	f7ff fa84 	bl	800a6ba <LL_RCC_PLL_GetDivider>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	091b      	lsrs	r3, r3, #4
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	fbb4 f4f3 	udiv	r4, r4, r3
 800b1bc:	f7ff fa71 	bl	800a6a2 <LL_RCC_PLL_GetR>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	0f5b      	lsrs	r3, r3, #29
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	fbb4 f3f3 	udiv	r3, r4, r3
 800b1ca:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3714      	adds	r7, #20
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd90      	pop	{r4, r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	08013cb4 	.word	0x08013cb4
 800b1dc:	00f42400 	.word	0x00f42400
 800b1e0:	01e84800 	.word	0x01e84800

0800b1e4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1e4:	b598      	push	{r3, r4, r7, lr}
 800b1e6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b1e8:	f7ff ff90 	bl	800b10c <HAL_RCC_GetSysClockFreq>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	f7ff f9e9 	bl	800a5c4 <LL_RCC_GetAHBPrescaler>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	091b      	lsrs	r3, r3, #4
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	4a03      	ldr	r2, [pc, #12]	@ (800b208 <HAL_RCC_GetHCLKFreq+0x24>)
 800b1fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b200:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b204:	4618      	mov	r0, r3
 800b206:	bd98      	pop	{r3, r4, r7, pc}
 800b208:	08013c54 	.word	0x08013c54

0800b20c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b20c:	b598      	push	{r3, r4, r7, lr}
 800b20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b210:	f7ff ffe8 	bl	800b1e4 <HAL_RCC_GetHCLKFreq>
 800b214:	4604      	mov	r4, r0
 800b216:	f7ff f9ef 	bl	800a5f8 <LL_RCC_GetAPB1Prescaler>
 800b21a:	4603      	mov	r3, r0
 800b21c:	0a1b      	lsrs	r3, r3, #8
 800b21e:	f003 0307 	and.w	r3, r3, #7
 800b222:	4a04      	ldr	r2, [pc, #16]	@ (800b234 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b228:	f003 031f 	and.w	r3, r3, #31
 800b22c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b230:	4618      	mov	r0, r3
 800b232:	bd98      	pop	{r3, r4, r7, pc}
 800b234:	08013c94 	.word	0x08013c94

0800b238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b238:	b598      	push	{r3, r4, r7, lr}
 800b23a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b23c:	f7ff ffd2 	bl	800b1e4 <HAL_RCC_GetHCLKFreq>
 800b240:	4604      	mov	r4, r0
 800b242:	f7ff f9e5 	bl	800a610 <LL_RCC_GetAPB2Prescaler>
 800b246:	4603      	mov	r3, r0
 800b248:	0adb      	lsrs	r3, r3, #11
 800b24a:	f003 0307 	and.w	r3, r3, #7
 800b24e:	4a04      	ldr	r2, [pc, #16]	@ (800b260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b254:	f003 031f 	and.w	r3, r3, #31
 800b258:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	bd98      	pop	{r3, r4, r7, pc}
 800b260:	08013c94 	.word	0x08013c94

0800b264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b264:	b590      	push	{r4, r7, lr}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2bb0      	cmp	r3, #176	@ 0xb0
 800b270:	d903      	bls.n	800b27a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b272:	4b15      	ldr	r3, [pc, #84]	@ (800b2c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	60fb      	str	r3, [r7, #12]
 800b278:	e007      	b.n	800b28a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	091b      	lsrs	r3, r3, #4
 800b27e:	f003 030f 	and.w	r3, r3, #15
 800b282:	4a11      	ldr	r2, [pc, #68]	@ (800b2c8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b288:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b28a:	f7ff f9a7 	bl	800a5dc <LL_RCC_GetAHB4Prescaler>
 800b28e:	4603      	mov	r3, r0
 800b290:	091b      	lsrs	r3, r3, #4
 800b292:	f003 030f 	and.w	r3, r3, #15
 800b296:	4a0d      	ldr	r2, [pc, #52]	@ (800b2cc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2a2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	4a0a      	ldr	r2, [pc, #40]	@ (800b2d0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b2a8:	fba2 2303 	umull	r2, r3, r2, r3
 800b2ac:	0c9c      	lsrs	r4, r3, #18
 800b2ae:	f7fe fef5 	bl	800a09c <HAL_PWREx_GetVoltageRange>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	4620      	mov	r0, r4
 800b2b8:	f000 f80c 	bl	800b2d4 <RCC_SetFlashLatency>
 800b2bc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd90      	pop	{r4, r7, pc}
 800b2c6:	bf00      	nop
 800b2c8:	08013cb4 	.word	0x08013cb4
 800b2cc:	08013c54 	.word	0x08013c54
 800b2d0:	431bde83 	.word	0x431bde83

0800b2d4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b2d4:	b590      	push	{r4, r7, lr}
 800b2d6:	b093      	sub	sp, #76	@ 0x4c
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b2de:	4b37      	ldr	r3, [pc, #220]	@ (800b3bc <RCC_SetFlashLatency+0xe8>)
 800b2e0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b2e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b2ea:	4a35      	ldr	r2, [pc, #212]	@ (800b3c0 <RCC_SetFlashLatency+0xec>)
 800b2ec:	f107 031c 	add.w	r3, r7, #28
 800b2f0:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2f6:	4b33      	ldr	r3, [pc, #204]	@ (800b3c4 <RCC_SetFlashLatency+0xf0>)
 800b2f8:	f107 040c 	add.w	r4, r7, #12
 800b2fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b302:	2300      	movs	r3, #0
 800b304:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b30c:	d11a      	bne.n	800b344 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b30e:	2300      	movs	r3, #0
 800b310:	643b      	str	r3, [r7, #64]	@ 0x40
 800b312:	e013      	b.n	800b33c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b314:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	3348      	adds	r3, #72	@ 0x48
 800b31a:	443b      	add	r3, r7
 800b31c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	429a      	cmp	r2, r3
 800b324:	d807      	bhi.n	800b336 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b326:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b328:	009b      	lsls	r3, r3, #2
 800b32a:	3348      	adds	r3, #72	@ 0x48
 800b32c:	443b      	add	r3, r7
 800b32e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b332:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b334:	e020      	b.n	800b378 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b338:	3301      	adds	r3, #1
 800b33a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b33e:	2b03      	cmp	r3, #3
 800b340:	d9e8      	bls.n	800b314 <RCC_SetFlashLatency+0x40>
 800b342:	e019      	b.n	800b378 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b348:	e013      	b.n	800b372 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b34c:	009b      	lsls	r3, r3, #2
 800b34e:	3348      	adds	r3, #72	@ 0x48
 800b350:	443b      	add	r3, r7
 800b352:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b356:	687a      	ldr	r2, [r7, #4]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d807      	bhi.n	800b36c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	3348      	adds	r3, #72	@ 0x48
 800b362:	443b      	add	r3, r7
 800b364:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b368:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b36a:	e005      	b.n	800b378 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b36c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b36e:	3301      	adds	r3, #1
 800b370:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b374:	2b02      	cmp	r3, #2
 800b376:	d9e8      	bls.n	800b34a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b378:	4b13      	ldr	r3, [pc, #76]	@ (800b3c8 <RCC_SetFlashLatency+0xf4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f023 0207 	bic.w	r2, r3, #7
 800b380:	4911      	ldr	r1, [pc, #68]	@ (800b3c8 <RCC_SetFlashLatency+0xf4>)
 800b382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b384:	4313      	orrs	r3, r2
 800b386:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b388:	f7fd f876 	bl	8008478 <HAL_GetTick>
 800b38c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b38e:	e008      	b.n	800b3a2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b390:	f7fd f872 	bl	8008478 <HAL_GetTick>
 800b394:	4602      	mov	r2, r0
 800b396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d901      	bls.n	800b3a2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e007      	b.n	800b3b2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b3a2:	4b09      	ldr	r3, [pc, #36]	@ (800b3c8 <RCC_SetFlashLatency+0xf4>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b3ac:	429a      	cmp	r2, r3
 800b3ae:	d1ef      	bne.n	800b390 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b3b0:	2300      	movs	r3, #0
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	374c      	adds	r7, #76	@ 0x4c
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	bd90      	pop	{r4, r7, pc}
 800b3ba:	bf00      	nop
 800b3bc:	08012984 	.word	0x08012984
 800b3c0:	08012994 	.word	0x08012994
 800b3c4:	080129a0 	.word	0x080129a0
 800b3c8:	58004000 	.word	0x58004000

0800b3cc <LL_RCC_LSE_IsEnabled>:
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3d8:	f003 0301 	and.w	r3, r3, #1
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d101      	bne.n	800b3e4 <LL_RCC_LSE_IsEnabled+0x18>
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	e000      	b.n	800b3e6 <LL_RCC_LSE_IsEnabled+0x1a>
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <LL_RCC_LSE_IsReady>:
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b3f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3fc:	f003 0302 	and.w	r3, r3, #2
 800b400:	2b02      	cmp	r3, #2
 800b402:	d101      	bne.n	800b408 <LL_RCC_LSE_IsReady+0x18>
 800b404:	2301      	movs	r3, #1
 800b406:	e000      	b.n	800b40a <LL_RCC_LSE_IsReady+0x1a>
 800b408:	2300      	movs	r3, #0
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <LL_RCC_MSI_EnablePLLMode>:
{
 800b414:	b480      	push	{r7}
 800b416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800b418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b422:	f043 0304 	orr.w	r3, r3, #4
 800b426:	6013      	str	r3, [r2, #0]
}
 800b428:	bf00      	nop
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr

0800b432 <LL_RCC_SetRFWKPClockSource>:
{
 800b432:	b480      	push	{r7}
 800b434:	b083      	sub	sp, #12
 800b436:	af00      	add	r7, sp, #0
 800b438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b43a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b43e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b442:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b446:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <LL_RCC_SetSMPSClockSource>:
{
 800b45e:	b480      	push	{r7}
 800b460:	b083      	sub	sp, #12
 800b462:	af00      	add	r7, sp, #0
 800b464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b466:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46c:	f023 0203 	bic.w	r2, r3, #3
 800b470:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	4313      	orrs	r3, r2
 800b478:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b47a:	bf00      	nop
 800b47c:	370c      	adds	r7, #12
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <LL_RCC_SetSMPSPrescaler>:
{
 800b486:	b480      	push	{r7}
 800b488:	b083      	sub	sp, #12
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b48e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b494:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b498:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b4a2:	bf00      	nop
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <LL_RCC_SetUSARTClockSource>:
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b083      	sub	sp, #12
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b4b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4be:	f023 0203 	bic.w	r2, r3, #3
 800b4c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4313      	orrs	r3, r2
 800b4ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4ce:	bf00      	nop
 800b4d0:	370c      	adds	r7, #12
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <LL_RCC_SetLPUARTClockSource>:
{
 800b4da:	b480      	push	{r7}
 800b4dc:	b083      	sub	sp, #12
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b4e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <LL_RCC_SetI2CClockSource>:
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b50e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b512:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	091b      	lsrs	r3, r3, #4
 800b51a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b51e:	43db      	mvns	r3, r3
 800b520:	401a      	ands	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	011b      	lsls	r3, r3, #4
 800b526:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b52a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b52e:	4313      	orrs	r3, r2
 800b530:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b534:	bf00      	nop
 800b536:	370c      	adds	r7, #12
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr

0800b540 <LL_RCC_SetLPTIMClockSource>:
{
 800b540:	b480      	push	{r7}
 800b542:	b083      	sub	sp, #12
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b548:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b54c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	0c1b      	lsrs	r3, r3, #16
 800b554:	041b      	lsls	r3, r3, #16
 800b556:	43db      	mvns	r3, r3
 800b558:	401a      	ands	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	041b      	lsls	r3, r3, #16
 800b55e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b562:	4313      	orrs	r3, r2
 800b564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <LL_RCC_SetSAIClockSource>:
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b57c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b584:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b588:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4313      	orrs	r3, r2
 800b590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b594:	bf00      	nop
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <LL_RCC_SetRNGClockSource>:
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b083      	sub	sp, #12
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b5a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5b0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b5b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5c0:	bf00      	nop
 800b5c2:	370c      	adds	r7, #12
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ca:	4770      	bx	lr

0800b5cc <LL_RCC_SetCLK48ClockSource>:
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b5d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5dc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b5e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <LL_RCC_SetUSBClockSource>:
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f7ff ffe3 	bl	800b5cc <LL_RCC_SetCLK48ClockSource>
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <LL_RCC_SetADCClockSource>:
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b61a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b61e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b622:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4313      	orrs	r3, r2
 800b62a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b62e:	bf00      	nop
 800b630:	370c      	adds	r7, #12
 800b632:	46bd      	mov	sp, r7
 800b634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b638:	4770      	bx	lr

0800b63a <LL_RCC_SetRTCClockSource>:
{
 800b63a:	b480      	push	{r7}
 800b63c:	b083      	sub	sp, #12
 800b63e:	af00      	add	r7, sp, #0
 800b640:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b642:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b646:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b64a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b64e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	4313      	orrs	r3, r2
 800b656:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b65a:	bf00      	nop
 800b65c:	370c      	adds	r7, #12
 800b65e:	46bd      	mov	sp, r7
 800b660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b664:	4770      	bx	lr

0800b666 <LL_RCC_GetRTCClockSource>:
{
 800b666:	b480      	push	{r7}
 800b668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b66a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b66e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b672:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b676:	4618      	mov	r0, r3
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <LL_RCC_ForceBackupDomainReset>:
{
 800b680:	b480      	push	{r7}
 800b682:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b684:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b68c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b698:	bf00      	nop
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b6a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b6b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b6ba:	bf00      	nop
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <LL_RCC_PLLSAI1_Enable>:
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b6c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6d2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b6d6:	6013      	str	r3, [r2, #0]
}
 800b6d8:	bf00      	nop
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr

0800b6e2 <LL_RCC_PLLSAI1_Disable>:
{
 800b6e2:	b480      	push	{r7}
 800b6e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b6e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6f0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6f4:	6013      	str	r3, [r2, #0]
}
 800b6f6:	bf00      	nop
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr

0800b700 <LL_RCC_PLLSAI1_IsReady>:
{
 800b700:	b480      	push	{r7}
 800b702:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b704:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b70e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b712:	d101      	bne.n	800b718 <LL_RCC_PLLSAI1_IsReady+0x18>
 800b714:	2301      	movs	r3, #1
 800b716:	e000      	b.n	800b71a <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	46bd      	mov	sp, r7
 800b71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b722:	4770      	bx	lr

0800b724 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b088      	sub	sp, #32
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b72c:	2300      	movs	r3, #0
 800b72e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b730:	2300      	movs	r3, #0
 800b732:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d034      	beq.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b744:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b748:	d021      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b74a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b74e:	d81b      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b750:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b754:	d01d      	beq.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b75a:	d815      	bhi.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00b      	beq.n	800b778 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b760:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b764:	d110      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b774:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b776:	e00d      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 f94d 	bl	800ba1c <RCCEx_PLLSAI1_ConfigNP>
 800b782:	4603      	mov	r3, r0
 800b784:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b786:	e005      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b788:	2301      	movs	r3, #1
 800b78a:	77fb      	strb	r3, [r7, #31]
        break;
 800b78c:	e002      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b78e:	bf00      	nop
 800b790:	e000      	b.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b792:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b794:	7ffb      	ldrb	r3, [r7, #31]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d105      	bne.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f7ff fee8 	bl	800b574 <LL_RCC_SetSAIClockSource>
 800b7a4:	e001      	b.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7a6:	7ffb      	ldrb	r3, [r7, #31]
 800b7a8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d046      	beq.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b7b6:	f7ff ff56 	bl	800b666 <LL_RCC_GetRTCClockSource>
 800b7ba:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7c0:	69ba      	ldr	r2, [r7, #24]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d03c      	beq.n	800b840 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b7c6:	f7fe fc59 	bl	800a07c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d105      	bne.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7ff ff30 	bl	800b63a <LL_RCC_SetRTCClockSource>
 800b7da:	e02e      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b7dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7e4:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b7e6:	f7ff ff4b 	bl	800b680 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b7ea:	f7ff ff5a 	bl	800b6a2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b7fc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b806:	f7ff fde1 	bl	800b3cc <LL_RCC_LSE_IsEnabled>
 800b80a:	4603      	mov	r3, r0
 800b80c:	2b01      	cmp	r3, #1
 800b80e:	d114      	bne.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b810:	f7fc fe32 	bl	8008478 <HAL_GetTick>
 800b814:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b816:	e00b      	b.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b818:	f7fc fe2e 	bl	8008478 <HAL_GetTick>
 800b81c:	4602      	mov	r2, r0
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b826:	4293      	cmp	r3, r2
 800b828:	d902      	bls.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	77fb      	strb	r3, [r7, #31]
              break;
 800b82e:	e004      	b.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b830:	f7ff fdde 	bl	800b3f0 <LL_RCC_LSE_IsReady>
 800b834:	4603      	mov	r3, r0
 800b836:	2b01      	cmp	r3, #1
 800b838:	d1ee      	bne.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b83a:	7ffb      	ldrb	r3, [r7, #31]
 800b83c:	77bb      	strb	r3, [r7, #30]
 800b83e:	e001      	b.n	800b844 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b840:	7ffb      	ldrb	r3, [r7, #31]
 800b842:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d004      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4618      	mov	r0, r3
 800b856:	f7ff fe2a 	bl	800b4ae <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d004      	beq.n	800b870 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	69db      	ldr	r3, [r3, #28]
 800b86a:	4618      	mov	r0, r3
 800b86c:	f7ff fe35 	bl	800b4da <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f003 0310 	and.w	r3, r3, #16
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d004      	beq.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fe5d 	bl	800b540 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	f003 0320 	and.w	r3, r3, #32
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d004      	beq.n	800b89c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b896:	4618      	mov	r0, r3
 800b898:	f7ff fe52 	bl	800b540 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d004      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	f7ff fe2a 	bl	800b506 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0308 	and.w	r3, r3, #8
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d004      	beq.n	800b8c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fe1f 	bl	800b506 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d022      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7ff fe8d 	bl	800b5f8 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8e6:	d107      	bne.n	800b8f8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b8e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8f6:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b900:	d10b      	bne.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3304      	adds	r3, #4
 800b906:	4618      	mov	r0, r3
 800b908:	f000 f8e3 	bl	800bad2 <RCCEx_PLLSAI1_ConfigNQ>
 800b90c:	4603      	mov	r3, r0
 800b90e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b910:	7ffb      	ldrb	r3, [r7, #31]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d001      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b916:	7ffb      	ldrb	r3, [r7, #31]
 800b918:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b922:	2b00      	cmp	r3, #0
 800b924:	d02b      	beq.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b92e:	d008      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b938:	d003      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d105      	bne.n	800b94e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b946:	4618      	mov	r0, r3
 800b948:	f7ff fe2a 	bl	800b5a0 <LL_RCC_SetRNGClockSource>
 800b94c:	e00a      	b.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b952:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b956:	60fb      	str	r3, [r7, #12]
 800b958:	2000      	movs	r0, #0
 800b95a:	f7ff fe21 	bl	800b5a0 <LL_RCC_SetRNGClockSource>
 800b95e:	68f8      	ldr	r0, [r7, #12]
 800b960:	f7ff fe34 	bl	800b5cc <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b968:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b96c:	d107      	bne.n	800b97e <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b978:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b97c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b986:	2b00      	cmp	r3, #0
 800b988:	d022      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b98e:	4618      	mov	r0, r3
 800b990:	f7ff fe3d 	bl	800b60e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b99c:	d107      	bne.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b99e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b9a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b9ac:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9b6:	d10b      	bne.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	3304      	adds	r3, #4
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f000 f8e3 	bl	800bb88 <RCCEx_PLLSAI1_ConfigNR>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b9c6:	7ffb      	ldrb	r3, [r7, #31]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d001      	beq.n	800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800b9cc:	7ffb      	ldrb	r3, [r7, #31]
 800b9ce:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d004      	beq.n	800b9e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f7ff fd26 	bl	800b432 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d009      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff fd45 	bl	800b486 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7ff fd2c 	bl	800b45e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ba06:	7fbb      	ldrb	r3, [r7, #30]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3720      	adds	r7, #32
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800ba14:	f7ff fcfe 	bl	800b414 <LL_RCC_MSI_EnablePLLMode>
}
 800ba18:	bf00      	nop
 800ba1a:	bd80      	pop	{r7, pc}

0800ba1c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b084      	sub	sp, #16
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba28:	f7ff fe5b 	bl	800b6e2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba2c:	f7fc fd24 	bl	8008478 <HAL_GetTick>
 800ba30:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba32:	e009      	b.n	800ba48 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba34:	f7fc fd20 	bl	8008478 <HAL_GetTick>
 800ba38:	4602      	mov	r2, r0
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d902      	bls.n	800ba48 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ba42:	2303      	movs	r3, #3
 800ba44:	73fb      	strb	r3, [r7, #15]
      break;
 800ba46:	e004      	b.n	800ba52 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba48:	f7ff fe5a 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d1f0      	bne.n	800ba34 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d137      	bne.n	800bac8 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ba58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	021b      	lsls	r3, r3, #8
 800ba68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ba70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba82:	4313      	orrs	r3, r2
 800ba84:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ba86:	f7ff fe1d 	bl	800b6c4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba8a:	f7fc fcf5 	bl	8008478 <HAL_GetTick>
 800ba8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba90:	e009      	b.n	800baa6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba92:	f7fc fcf1 	bl	8008478 <HAL_GetTick>
 800ba96:	4602      	mov	r2, r0
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	2b02      	cmp	r3, #2
 800ba9e:	d902      	bls.n	800baa6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800baa0:	2303      	movs	r3, #3
 800baa2:	73fb      	strb	r3, [r7, #15]
        break;
 800baa4:	e004      	b.n	800bab0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800baa6:	f7ff fe2b 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800baaa:	4603      	mov	r3, r0
 800baac:	2b01      	cmp	r3, #1
 800baae:	d1f0      	bne.n	800ba92 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800bab0:	7bfb      	ldrb	r3, [r7, #15]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d108      	bne.n	800bac8 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bab6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baba:	691a      	ldr	r2, [r3, #16]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	691b      	ldr	r3, [r3, #16]
 800bac0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bac4:	4313      	orrs	r3, r2
 800bac6:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bade:	f7ff fe00 	bl	800b6e2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bae2:	f7fc fcc9 	bl	8008478 <HAL_GetTick>
 800bae6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bae8:	e009      	b.n	800bafe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baea:	f7fc fcc5 	bl	8008478 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	2b02      	cmp	r3, #2
 800baf6:	d902      	bls.n	800bafe <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800baf8:	2303      	movs	r3, #3
 800bafa:	73fb      	strb	r3, [r7, #15]
      break;
 800bafc:	e004      	b.n	800bb08 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bafe:	f7ff fdff 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800bb02:	4603      	mov	r3, r0
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1f0      	bne.n	800baea <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bb08:	7bfb      	ldrb	r3, [r7, #15]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d137      	bne.n	800bb7e <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb12:	691b      	ldr	r3, [r3, #16]
 800bb14:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	021b      	lsls	r3, r3, #8
 800bb1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb22:	4313      	orrs	r3, r2
 800bb24:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bb26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bb3c:	f7ff fdc2 	bl	800b6c4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb40:	f7fc fc9a 	bl	8008478 <HAL_GetTick>
 800bb44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb46:	e009      	b.n	800bb5c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb48:	f7fc fc96 	bl	8008478 <HAL_GetTick>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	1ad3      	subs	r3, r2, r3
 800bb52:	2b02      	cmp	r3, #2
 800bb54:	d902      	bls.n	800bb5c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb56:	2303      	movs	r3, #3
 800bb58:	73fb      	strb	r3, [r7, #15]
        break;
 800bb5a:	e004      	b.n	800bb66 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb5c:	f7ff fdd0 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d1f0      	bne.n	800bb48 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d108      	bne.n	800bb7e <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb70:	691a      	ldr	r2, [r3, #16]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb7a:	4313      	orrs	r3, r2
 800bb7c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3710      	adds	r7, #16
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb90:	2300      	movs	r3, #0
 800bb92:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb94:	f7ff fda5 	bl	800b6e2 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb98:	f7fc fc6e 	bl	8008478 <HAL_GetTick>
 800bb9c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb9e:	e009      	b.n	800bbb4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bba0:	f7fc fc6a 	bl	8008478 <HAL_GetTick>
 800bba4:	4602      	mov	r2, r0
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	1ad3      	subs	r3, r2, r3
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d902      	bls.n	800bbb4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bbae:	2303      	movs	r3, #3
 800bbb0:	73fb      	strb	r3, [r7, #15]
      break;
 800bbb2:	e004      	b.n	800bbbe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bbb4:	f7ff fda4 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1f0      	bne.n	800bba0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d137      	bne.n	800bc34 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bbc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	021b      	lsls	r3, r3, #8
 800bbd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bbdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe0:	691b      	ldr	r3, [r3, #16]
 800bbe2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bbf2:	f7ff fd67 	bl	800b6c4 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbf6:	f7fc fc3f 	bl	8008478 <HAL_GetTick>
 800bbfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbfc:	e009      	b.n	800bc12 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbfe:	f7fc fc3b 	bl	8008478 <HAL_GetTick>
 800bc02:	4602      	mov	r2, r0
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	1ad3      	subs	r3, r2, r3
 800bc08:	2b02      	cmp	r3, #2
 800bc0a:	d902      	bls.n	800bc12 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bc0c:	2303      	movs	r3, #3
 800bc0e:	73fb      	strb	r3, [r7, #15]
        break;
 800bc10:	e004      	b.n	800bc1c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bc12:	f7ff fd75 	bl	800b700 <LL_RCC_PLLSAI1_IsReady>
 800bc16:	4603      	mov	r3, r0
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d1f0      	bne.n	800bbfe <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bc1c:	7bfb      	ldrb	r3, [r7, #15]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d108      	bne.n	800bc34 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bc22:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc26:	691a      	ldr	r2, [r3, #16]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	691b      	ldr	r3, [r3, #16]
 800bc2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc30:	4313      	orrs	r3, r2
 800bc32:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bc34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
	...

0800bc40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d101      	bne.n	800bc52 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e09f      	b.n	800bd92 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800bc58:	b2db      	uxtb	r3, r3
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d106      	bne.n	800bc6c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f7f7 f93c 	bl	8002ee4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2202      	movs	r2, #2
 800bc70:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800bc74:	4b49      	ldr	r3, [pc, #292]	@ (800bd9c <HAL_RTC_Init+0x15c>)
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	f003 0310 	and.w	r3, r3, #16
 800bc7c:	2b10      	cmp	r3, #16
 800bc7e:	d07e      	beq.n	800bd7e <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	22ca      	movs	r2, #202	@ 0xca
 800bc86:	625a      	str	r2, [r3, #36]	@ 0x24
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2253      	movs	r2, #83	@ 0x53
 800bc8e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800bc90:	6878      	ldr	r0, [r7, #4]
 800bc92:	f000 f8ab 	bl	800bdec <RTC_EnterInitMode>
 800bc96:	4603      	mov	r3, r0
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d00a      	beq.n	800bcb2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	22ff      	movs	r2, #255	@ 0xff
 800bca2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2204      	movs	r2, #4
 800bca8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800bcac:	2301      	movs	r3, #1
 800bcae:	73fb      	strb	r3, [r7, #15]
 800bcb0:	e067      	b.n	800bd82 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	689b      	ldr	r3, [r3, #8]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	6812      	ldr	r2, [r2, #0]
 800bcbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bcc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bcc4:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	6899      	ldr	r1, [r3, #8]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685a      	ldr	r2, [r3, #4]
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	691b      	ldr	r3, [r3, #16]
 800bcd4:	431a      	orrs	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	699b      	ldr	r3, [r3, #24]
 800bcda:	431a      	orrs	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	430a      	orrs	r2, r1
 800bce2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	68d2      	ldr	r2, [r2, #12]
 800bcec:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	6919      	ldr	r1, [r3, #16]
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	041a      	lsls	r2, r3, #16
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	430a      	orrs	r2, r1
 800bd00:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68da      	ldr	r2, [r3, #12]
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bd10:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f022 0203 	bic.w	r2, r2, #3
 800bd20:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	69da      	ldr	r2, [r3, #28]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	695b      	ldr	r3, [r3, #20]
 800bd30:	431a      	orrs	r2, r3
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	430a      	orrs	r2, r1
 800bd38:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	f003 0320 	and.w	r3, r3, #32
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d113      	bne.n	800bd70 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 f829 	bl	800bda0 <HAL_RTC_WaitForSynchro>
 800bd4e:	4603      	mov	r3, r0
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d00d      	beq.n	800bd70 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	22ff      	movs	r2, #255	@ 0xff
 800bd5a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2204      	movs	r2, #4
 800bd60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e010      	b.n	800bd92 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	22ff      	movs	r2, #255	@ 0xff
 800bd76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800bd78:	2300      	movs	r3, #0
 800bd7a:	73fb      	strb	r3, [r7, #15]
 800bd7c:	e001      	b.n	800bd82 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800bd82:	7bfb      	ldrb	r3, [r7, #15]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d103      	bne.n	800bd90 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800bd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3710      	adds	r7, #16
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	40002800 	.word	0x40002800

0800bda0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bdb6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800bdb8:	f7fc fb5e 	bl	8008478 <HAL_GetTick>
 800bdbc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bdbe:	e009      	b.n	800bdd4 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bdc0:	f7fc fb5a 	bl	8008478 <HAL_GetTick>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	1ad3      	subs	r3, r2, r3
 800bdca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bdce:	d901      	bls.n	800bdd4 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	e007      	b.n	800bde4 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68db      	ldr	r3, [r3, #12]
 800bdda:	f003 0320 	and.w	r3, r3, #32
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d0ee      	beq.n	800bdc0 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	68db      	ldr	r3, [r3, #12]
 800bdfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d119      	bne.n	800be36 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	f04f 32ff 	mov.w	r2, #4294967295
 800be0a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800be0c:	f7fc fb34 	bl	8008478 <HAL_GetTick>
 800be10:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800be12:	e009      	b.n	800be28 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800be14:	f7fc fb30 	bl	8008478 <HAL_GetTick>
 800be18:	4602      	mov	r2, r0
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	1ad3      	subs	r3, r2, r3
 800be1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be22:	d901      	bls.n	800be28 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800be24:	2303      	movs	r3, #3
 800be26:	e007      	b.n	800be38 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68db      	ldr	r3, [r3, #12]
 800be2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be32:	2b00      	cmp	r3, #0
 800be34:	d0ee      	beq.n	800be14 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b086      	sub	sp, #24
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d101      	bne.n	800be5a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800be56:	2302      	movs	r3, #2
 800be58:	e0a8      	b.n	800bfac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2201      	movs	r2, #1
 800be5e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2202      	movs	r2, #2
 800be66:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	22ca      	movs	r2, #202	@ 0xca
 800be70:	625a      	str	r2, [r3, #36]	@ 0x24
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	2253      	movs	r2, #83	@ 0x53
 800be78:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	689b      	ldr	r3, [r3, #8]
 800be80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800be84:	2b00      	cmp	r3, #0
 800be86:	d020      	beq.n	800beca <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800be88:	f7fc faf6 	bl	8008478 <HAL_GetTick>
 800be8c:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800be8e:	e015      	b.n	800bebc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800be90:	f7fc faf2 	bl	8008478 <HAL_GetTick>
 800be94:	4602      	mov	r2, r0
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800be9e:	d90d      	bls.n	800bebc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	22ff      	movs	r2, #255	@ 0xff
 800bea6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2203      	movs	r2, #3
 800beac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800beb8:	2303      	movs	r3, #3
 800beba:	e077      	b.n	800bfac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	f003 0304 	and.w	r3, r3, #4
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1e2      	bne.n	800be90 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	689a      	ldr	r2, [r3, #8]
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bed8:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	b2da      	uxtb	r2, r3
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800beea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800beec:	f7fc fac4 	bl	8008478 <HAL_GetTick>
 800bef0:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bef2:	e015      	b.n	800bf20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800bef4:	f7fc fac0 	bl	8008478 <HAL_GetTick>
 800bef8:	4602      	mov	r2, r0
 800befa:	697b      	ldr	r3, [r7, #20]
 800befc:	1ad3      	subs	r3, r2, r3
 800befe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800bf02:	d90d      	bls.n	800bf20 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	22ff      	movs	r2, #255	@ 0xff
 800bf0a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2203      	movs	r2, #3
 800bf10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	2200      	movs	r2, #0
 800bf18:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e045      	b.n	800bfac <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	f003 0304 	and.w	r3, r3, #4
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0e2      	beq.n	800bef4 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	68ba      	ldr	r2, [r7, #8]
 800bf34:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	689a      	ldr	r2, [r3, #8]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f022 0207 	bic.w	r2, r2, #7
 800bf44:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6899      	ldr	r1, [r3, #8]
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	430a      	orrs	r2, r1
 800bf54:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800bf56:	4b17      	ldr	r3, [pc, #92]	@ (800bfb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf5c:	4a15      	ldr	r2, [pc, #84]	@ (800bfb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800bf66:	4b13      	ldr	r3, [pc, #76]	@ (800bfb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4a12      	ldr	r2, [pc, #72]	@ (800bfb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800bf6c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bf70:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	689a      	ldr	r2, [r3, #8]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf80:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689a      	ldr	r2, [r3, #8]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800bf90:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	22ff      	movs	r2, #255	@ 0xff
 800bf98:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3718      	adds	r7, #24
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}
 800bfb4:	58000800 	.word	0x58000800

0800bfb8 <LL_RCC_GetUSARTClockSource>:
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800bfc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfc4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	4013      	ands	r3, r2
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	370c      	adds	r7, #12
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr

0800bfd8 <LL_RCC_GetLPUARTClockSource>:
{
 800bfd8:	b480      	push	{r7}
 800bfda:	b083      	sub	sp, #12
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800bfe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfe4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	4013      	ands	r3, r2
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b082      	sub	sp, #8
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d101      	bne.n	800c00a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c006:	2301      	movs	r3, #1
 800c008:	e042      	b.n	800c090 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c010:	2b00      	cmp	r3, #0
 800c012:	d106      	bne.n	800c022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2200      	movs	r2, #0
 800c018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7f6 ff97 	bl	8002f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2224      	movs	r2, #36	@ 0x24
 800c026:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f022 0201 	bic.w	r2, r2, #1
 800c038:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f000 fa50 	bl	800c4e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f825 	bl	800c098 <UART_SetConfig>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	e01b      	b.n	800c090 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689a      	ldr	r2, [r3, #8]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f042 0201 	orr.w	r2, r2, #1
 800c086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c088:	6878      	ldr	r0, [r7, #4]
 800c08a:	f000 facf 	bl	800c62c <UART_CheckIdleState>
 800c08e:	4603      	mov	r3, r0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c09c:	b08c      	sub	sp, #48	@ 0x30
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	689a      	ldr	r2, [r3, #8]
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	691b      	ldr	r3, [r3, #16]
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	695b      	ldr	r3, [r3, #20]
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	69db      	ldr	r3, [r3, #28]
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	4baf      	ldr	r3, [pc, #700]	@ (800c384 <UART_SetConfig+0x2ec>)
 800c0c8:	4013      	ands	r3, r2
 800c0ca:	697a      	ldr	r2, [r7, #20]
 800c0cc:	6812      	ldr	r2, [r2, #0]
 800c0ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c0d0:	430b      	orrs	r3, r1
 800c0d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	68da      	ldr	r2, [r3, #12]
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	430a      	orrs	r2, r1
 800c0e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c0ea:	697b      	ldr	r3, [r7, #20]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4aa4      	ldr	r2, [pc, #656]	@ (800c388 <UART_SetConfig+0x2f0>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d004      	beq.n	800c104 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	6a1b      	ldr	r3, [r3, #32]
 800c0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c100:	4313      	orrs	r3, r2
 800c102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c104:	697b      	ldr	r3, [r7, #20]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	689b      	ldr	r3, [r3, #8]
 800c10a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c10e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c112:	697a      	ldr	r2, [r7, #20]
 800c114:	6812      	ldr	r2, [r2, #0]
 800c116:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c118:	430b      	orrs	r3, r1
 800c11a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c122:	f023 010f 	bic.w	r1, r3, #15
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	430a      	orrs	r2, r1
 800c130:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	4a95      	ldr	r2, [pc, #596]	@ (800c38c <UART_SetConfig+0x2f4>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d125      	bne.n	800c188 <UART_SetConfig+0xf0>
 800c13c:	2003      	movs	r0, #3
 800c13e:	f7ff ff3b 	bl	800bfb8 <LL_RCC_GetUSARTClockSource>
 800c142:	4603      	mov	r3, r0
 800c144:	2b03      	cmp	r3, #3
 800c146:	d81b      	bhi.n	800c180 <UART_SetConfig+0xe8>
 800c148:	a201      	add	r2, pc, #4	@ (adr r2, 800c150 <UART_SetConfig+0xb8>)
 800c14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14e:	bf00      	nop
 800c150:	0800c161 	.word	0x0800c161
 800c154:	0800c171 	.word	0x0800c171
 800c158:	0800c169 	.word	0x0800c169
 800c15c:	0800c179 	.word	0x0800c179
 800c160:	2301      	movs	r3, #1
 800c162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c166:	e042      	b.n	800c1ee <UART_SetConfig+0x156>
 800c168:	2302      	movs	r3, #2
 800c16a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c16e:	e03e      	b.n	800c1ee <UART_SetConfig+0x156>
 800c170:	2304      	movs	r3, #4
 800c172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c176:	e03a      	b.n	800c1ee <UART_SetConfig+0x156>
 800c178:	2308      	movs	r3, #8
 800c17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c17e:	e036      	b.n	800c1ee <UART_SetConfig+0x156>
 800c180:	2310      	movs	r3, #16
 800c182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c186:	e032      	b.n	800c1ee <UART_SetConfig+0x156>
 800c188:	697b      	ldr	r3, [r7, #20]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	4a7e      	ldr	r2, [pc, #504]	@ (800c388 <UART_SetConfig+0x2f0>)
 800c18e:	4293      	cmp	r3, r2
 800c190:	d12a      	bne.n	800c1e8 <UART_SetConfig+0x150>
 800c192:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c196:	f7ff ff1f 	bl	800bfd8 <LL_RCC_GetLPUARTClockSource>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1a0:	d01a      	beq.n	800c1d8 <UART_SetConfig+0x140>
 800c1a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c1a6:	d81b      	bhi.n	800c1e0 <UART_SetConfig+0x148>
 800c1a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1ac:	d00c      	beq.n	800c1c8 <UART_SetConfig+0x130>
 800c1ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c1b2:	d815      	bhi.n	800c1e0 <UART_SetConfig+0x148>
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d003      	beq.n	800c1c0 <UART_SetConfig+0x128>
 800c1b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1bc:	d008      	beq.n	800c1d0 <UART_SetConfig+0x138>
 800c1be:	e00f      	b.n	800c1e0 <UART_SetConfig+0x148>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1c6:	e012      	b.n	800c1ee <UART_SetConfig+0x156>
 800c1c8:	2302      	movs	r3, #2
 800c1ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1ce:	e00e      	b.n	800c1ee <UART_SetConfig+0x156>
 800c1d0:	2304      	movs	r3, #4
 800c1d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1d6:	e00a      	b.n	800c1ee <UART_SetConfig+0x156>
 800c1d8:	2308      	movs	r3, #8
 800c1da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1de:	e006      	b.n	800c1ee <UART_SetConfig+0x156>
 800c1e0:	2310      	movs	r3, #16
 800c1e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c1e6:	e002      	b.n	800c1ee <UART_SetConfig+0x156>
 800c1e8:	2310      	movs	r3, #16
 800c1ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a65      	ldr	r2, [pc, #404]	@ (800c388 <UART_SetConfig+0x2f0>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	f040 8097 	bne.w	800c328 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c1fa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c1fe:	2b08      	cmp	r3, #8
 800c200:	d823      	bhi.n	800c24a <UART_SetConfig+0x1b2>
 800c202:	a201      	add	r2, pc, #4	@ (adr r2, 800c208 <UART_SetConfig+0x170>)
 800c204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c208:	0800c22d 	.word	0x0800c22d
 800c20c:	0800c24b 	.word	0x0800c24b
 800c210:	0800c235 	.word	0x0800c235
 800c214:	0800c24b 	.word	0x0800c24b
 800c218:	0800c23b 	.word	0x0800c23b
 800c21c:	0800c24b 	.word	0x0800c24b
 800c220:	0800c24b 	.word	0x0800c24b
 800c224:	0800c24b 	.word	0x0800c24b
 800c228:	0800c243 	.word	0x0800c243
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c22c:	f7fe ffee 	bl	800b20c <HAL_RCC_GetPCLK1Freq>
 800c230:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c232:	e010      	b.n	800c256 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c234:	4b56      	ldr	r3, [pc, #344]	@ (800c390 <UART_SetConfig+0x2f8>)
 800c236:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c238:	e00d      	b.n	800c256 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c23a:	f7fe ff67 	bl	800b10c <HAL_RCC_GetSysClockFreq>
 800c23e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c240:	e009      	b.n	800c256 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c242:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c246:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c248:	e005      	b.n	800c256 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c24e:	2301      	movs	r3, #1
 800c250:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c254:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 812b 	beq.w	800c4b4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c262:	4a4c      	ldr	r2, [pc, #304]	@ (800c394 <UART_SetConfig+0x2fc>)
 800c264:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c268:	461a      	mov	r2, r3
 800c26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c270:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	685a      	ldr	r2, [r3, #4]
 800c276:	4613      	mov	r3, r2
 800c278:	005b      	lsls	r3, r3, #1
 800c27a:	4413      	add	r3, r2
 800c27c:	69ba      	ldr	r2, [r7, #24]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d305      	bcc.n	800c28e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	685b      	ldr	r3, [r3, #4]
 800c286:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c288:	69ba      	ldr	r2, [r7, #24]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d903      	bls.n	800c296 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c294:	e10e      	b.n	800c4b4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c298:	2200      	movs	r2, #0
 800c29a:	60bb      	str	r3, [r7, #8]
 800c29c:	60fa      	str	r2, [r7, #12]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2a2:	4a3c      	ldr	r2, [pc, #240]	@ (800c394 <UART_SetConfig+0x2fc>)
 800c2a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	607a      	str	r2, [r7, #4]
 800c2b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2b8:	f7f4 fb50 	bl	800095c <__aeabi_uldivmod>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4610      	mov	r0, r2
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	020b      	lsls	r3, r1, #8
 800c2ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c2d2:	0202      	lsls	r2, r0, #8
 800c2d4:	6979      	ldr	r1, [r7, #20]
 800c2d6:	6849      	ldr	r1, [r1, #4]
 800c2d8:	0849      	lsrs	r1, r1, #1
 800c2da:	2000      	movs	r0, #0
 800c2dc:	460c      	mov	r4, r1
 800c2de:	4605      	mov	r5, r0
 800c2e0:	eb12 0804 	adds.w	r8, r2, r4
 800c2e4:	eb43 0905 	adc.w	r9, r3, r5
 800c2e8:	697b      	ldr	r3, [r7, #20]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	469a      	mov	sl, r3
 800c2f0:	4693      	mov	fp, r2
 800c2f2:	4652      	mov	r2, sl
 800c2f4:	465b      	mov	r3, fp
 800c2f6:	4640      	mov	r0, r8
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	f7f4 fb2f 	bl	800095c <__aeabi_uldivmod>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4613      	mov	r3, r2
 800c304:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c306:	6a3b      	ldr	r3, [r7, #32]
 800c308:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c30c:	d308      	bcc.n	800c320 <UART_SetConfig+0x288>
 800c30e:	6a3b      	ldr	r3, [r7, #32]
 800c310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c314:	d204      	bcs.n	800c320 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	6a3a      	ldr	r2, [r7, #32]
 800c31c:	60da      	str	r2, [r3, #12]
 800c31e:	e0c9      	b.n	800c4b4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c320:	2301      	movs	r3, #1
 800c322:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c326:	e0c5      	b.n	800c4b4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	69db      	ldr	r3, [r3, #28]
 800c32c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c330:	d16d      	bne.n	800c40e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c332:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c336:	3b01      	subs	r3, #1
 800c338:	2b07      	cmp	r3, #7
 800c33a:	d82d      	bhi.n	800c398 <UART_SetConfig+0x300>
 800c33c:	a201      	add	r2, pc, #4	@ (adr r2, 800c344 <UART_SetConfig+0x2ac>)
 800c33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c342:	bf00      	nop
 800c344:	0800c365 	.word	0x0800c365
 800c348:	0800c36d 	.word	0x0800c36d
 800c34c:	0800c399 	.word	0x0800c399
 800c350:	0800c373 	.word	0x0800c373
 800c354:	0800c399 	.word	0x0800c399
 800c358:	0800c399 	.word	0x0800c399
 800c35c:	0800c399 	.word	0x0800c399
 800c360:	0800c37b 	.word	0x0800c37b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c364:	f7fe ff68 	bl	800b238 <HAL_RCC_GetPCLK2Freq>
 800c368:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c36a:	e01b      	b.n	800c3a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c36c:	4b08      	ldr	r3, [pc, #32]	@ (800c390 <UART_SetConfig+0x2f8>)
 800c36e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c370:	e018      	b.n	800c3a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c372:	f7fe fecb 	bl	800b10c <HAL_RCC_GetSysClockFreq>
 800c376:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c378:	e014      	b.n	800c3a4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c37a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c37e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c380:	e010      	b.n	800c3a4 <UART_SetConfig+0x30c>
 800c382:	bf00      	nop
 800c384:	cfff69f3 	.word	0xcfff69f3
 800c388:	40008000 	.word	0x40008000
 800c38c:	40013800 	.word	0x40013800
 800c390:	00f42400 	.word	0x00f42400
 800c394:	08013cf4 	.word	0x08013cf4
      default:
        pclk = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c39c:	2301      	movs	r3, #1
 800c39e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c3a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 8084 	beq.w	800c4b4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c3b0:	4a4b      	ldr	r2, [pc, #300]	@ (800c4e0 <UART_SetConfig+0x448>)
 800c3b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3be:	005a      	lsls	r2, r3, #1
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	085b      	lsrs	r3, r3, #1
 800c3c6:	441a      	add	r2, r3
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c3d0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	2b0f      	cmp	r3, #15
 800c3d6:	d916      	bls.n	800c406 <UART_SetConfig+0x36e>
 800c3d8:	6a3b      	ldr	r3, [r7, #32]
 800c3da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c3de:	d212      	bcs.n	800c406 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c3e0:	6a3b      	ldr	r3, [r7, #32]
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	f023 030f 	bic.w	r3, r3, #15
 800c3e8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c3ea:	6a3b      	ldr	r3, [r7, #32]
 800c3ec:	085b      	lsrs	r3, r3, #1
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	f003 0307 	and.w	r3, r3, #7
 800c3f4:	b29a      	uxth	r2, r3
 800c3f6:	8bfb      	ldrh	r3, [r7, #30]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	8bfa      	ldrh	r2, [r7, #30]
 800c402:	60da      	str	r2, [r3, #12]
 800c404:	e056      	b.n	800c4b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c40c:	e052      	b.n	800c4b4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c40e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c412:	3b01      	subs	r3, #1
 800c414:	2b07      	cmp	r3, #7
 800c416:	d822      	bhi.n	800c45e <UART_SetConfig+0x3c6>
 800c418:	a201      	add	r2, pc, #4	@ (adr r2, 800c420 <UART_SetConfig+0x388>)
 800c41a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c41e:	bf00      	nop
 800c420:	0800c441 	.word	0x0800c441
 800c424:	0800c449 	.word	0x0800c449
 800c428:	0800c45f 	.word	0x0800c45f
 800c42c:	0800c44f 	.word	0x0800c44f
 800c430:	0800c45f 	.word	0x0800c45f
 800c434:	0800c45f 	.word	0x0800c45f
 800c438:	0800c45f 	.word	0x0800c45f
 800c43c:	0800c457 	.word	0x0800c457
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c440:	f7fe fefa 	bl	800b238 <HAL_RCC_GetPCLK2Freq>
 800c444:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c446:	e010      	b.n	800c46a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c448:	4b26      	ldr	r3, [pc, #152]	@ (800c4e4 <UART_SetConfig+0x44c>)
 800c44a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c44c:	e00d      	b.n	800c46a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c44e:	f7fe fe5d 	bl	800b10c <HAL_RCC_GetSysClockFreq>
 800c452:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c454:	e009      	b.n	800c46a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c456:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c45a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c45c:	e005      	b.n	800c46a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800c45e:	2300      	movs	r3, #0
 800c460:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c462:	2301      	movs	r3, #1
 800c464:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c468:	bf00      	nop
    }

    if (pclk != 0U)
 800c46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d021      	beq.n	800c4b4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c474:	4a1a      	ldr	r2, [pc, #104]	@ (800c4e0 <UART_SetConfig+0x448>)
 800c476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c47a:	461a      	mov	r2, r3
 800c47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c47e:	fbb3 f2f2 	udiv	r2, r3, r2
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	685b      	ldr	r3, [r3, #4]
 800c486:	085b      	lsrs	r3, r3, #1
 800c488:	441a      	add	r2, r3
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	685b      	ldr	r3, [r3, #4]
 800c48e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c492:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	2b0f      	cmp	r3, #15
 800c498:	d909      	bls.n	800c4ae <UART_SetConfig+0x416>
 800c49a:	6a3b      	ldr	r3, [r7, #32]
 800c49c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4a0:	d205      	bcs.n	800c4ae <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	60da      	str	r2, [r3, #12]
 800c4ac:	e002      	b.n	800c4b4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2201      	movs	r2, #1
 800c4b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c4d0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3730      	adds	r7, #48	@ 0x30
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c4de:	bf00      	nop
 800c4e0:	08013cf4 	.word	0x08013cf4
 800c4e4:	00f42400 	.word	0x00f42400

0800c4e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b083      	sub	sp, #12
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4f4:	f003 0308 	and.w	r3, r3, #8
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00a      	beq.n	800c512 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	430a      	orrs	r2, r1
 800c510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c516:	f003 0301 	and.w	r3, r3, #1
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d00a      	beq.n	800c534 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	685b      	ldr	r3, [r3, #4]
 800c524:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	430a      	orrs	r2, r1
 800c532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c538:	f003 0302 	and.w	r3, r3, #2
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d00a      	beq.n	800c556 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	685b      	ldr	r3, [r3, #4]
 800c546:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	430a      	orrs	r2, r1
 800c554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c55a:	f003 0304 	and.w	r3, r3, #4
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d00a      	beq.n	800c578 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	430a      	orrs	r2, r1
 800c576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c57c:	f003 0310 	and.w	r3, r3, #16
 800c580:	2b00      	cmp	r3, #0
 800c582:	d00a      	beq.n	800c59a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689b      	ldr	r3, [r3, #8]
 800c58a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	430a      	orrs	r2, r1
 800c598:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c59e:	f003 0320 	and.w	r3, r3, #32
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00a      	beq.n	800c5bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	689b      	ldr	r3, [r3, #8]
 800c5ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	430a      	orrs	r2, r1
 800c5ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c5c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d01a      	beq.n	800c5fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e6:	d10a      	bne.n	800c5fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	430a      	orrs	r2, r1
 800c5fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c606:	2b00      	cmp	r3, #0
 800c608:	d00a      	beq.n	800c620 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	430a      	orrs	r2, r1
 800c61e:	605a      	str	r2, [r3, #4]
  }
}
 800c620:	bf00      	nop
 800c622:	370c      	adds	r7, #12
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b098      	sub	sp, #96	@ 0x60
 800c630:	af02      	add	r7, sp, #8
 800c632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2200      	movs	r2, #0
 800c638:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c63c:	f7fb ff1c 	bl	8008478 <HAL_GetTick>
 800c640:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f003 0308 	and.w	r3, r3, #8
 800c64c:	2b08      	cmp	r3, #8
 800c64e:	d12f      	bne.n	800c6b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c658:	2200      	movs	r2, #0
 800c65a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f88e 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d022      	beq.n	800c6b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c672:	e853 3f00 	ldrex	r3, [r3]
 800c676:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c67a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c67e:	653b      	str	r3, [r7, #80]	@ 0x50
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	461a      	mov	r2, r3
 800c686:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c688:	647b      	str	r3, [r7, #68]	@ 0x44
 800c68a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c68c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c68e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c690:	e841 2300 	strex	r3, r2, [r1]
 800c694:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d1e6      	bne.n	800c66a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2220      	movs	r2, #32
 800c6a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	e063      	b.n	800c778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0304 	and.w	r3, r3, #4
 800c6ba:	2b04      	cmp	r3, #4
 800c6bc:	d149      	bne.n	800c752 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c6be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c6c2:	9300      	str	r3, [sp, #0]
 800c6c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c6cc:	6878      	ldr	r0, [r7, #4]
 800c6ce:	f000 f857 	bl	800c780 <UART_WaitOnFlagUntilTimeout>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d03c      	beq.n	800c752 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	623b      	str	r3, [r7, #32]
   return(result);
 800c6e6:	6a3b      	ldr	r3, [r7, #32]
 800c6e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c6ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c6f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c6fe:	e841 2300 	strex	r3, r2, [r1]
 800c702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c706:	2b00      	cmp	r3, #0
 800c708:	d1e6      	bne.n	800c6d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	3308      	adds	r3, #8
 800c710:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	e853 3f00 	ldrex	r3, [r3]
 800c718:	60fb      	str	r3, [r7, #12]
   return(result);
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f023 0301 	bic.w	r3, r3, #1
 800c720:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	3308      	adds	r3, #8
 800c728:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c72a:	61fa      	str	r2, [r7, #28]
 800c72c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c72e:	69b9      	ldr	r1, [r7, #24]
 800c730:	69fa      	ldr	r2, [r7, #28]
 800c732:	e841 2300 	strex	r3, r2, [r1]
 800c736:	617b      	str	r3, [r7, #20]
   return(result);
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d1e5      	bne.n	800c70a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2220      	movs	r2, #32
 800c742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c74e:	2303      	movs	r3, #3
 800c750:	e012      	b.n	800c778 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2220      	movs	r2, #32
 800c756:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2220      	movs	r2, #32
 800c75e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2200      	movs	r2, #0
 800c76c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c776:	2300      	movs	r3, #0
}
 800c778:	4618      	mov	r0, r3
 800c77a:	3758      	adds	r7, #88	@ 0x58
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b084      	sub	sp, #16
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	603b      	str	r3, [r7, #0]
 800c78c:	4613      	mov	r3, r2
 800c78e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c790:	e04f      	b.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c798:	d04b      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c79a:	f7fb fe6d 	bl	8008478 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d302      	bcc.n	800c7b0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d101      	bne.n	800c7b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c7b0:	2303      	movs	r3, #3
 800c7b2:	e04e      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f003 0304 	and.w	r3, r3, #4
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d037      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	2b80      	cmp	r3, #128	@ 0x80
 800c7c6:	d034      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b40      	cmp	r3, #64	@ 0x40
 800c7cc:	d031      	beq.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	f003 0308 	and.w	r3, r3, #8
 800c7d8:	2b08      	cmp	r3, #8
 800c7da:	d110      	bne.n	800c7fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2208      	movs	r2, #8
 800c7e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 f838 	bl	800c85a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2208      	movs	r2, #8
 800c7ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e029      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	69db      	ldr	r3, [r3, #28]
 800c804:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c808:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c80c:	d111      	bne.n	800c832 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c816:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c818:	68f8      	ldr	r0, [r7, #12]
 800c81a:	f000 f81e 	bl	800c85a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2220      	movs	r2, #32
 800c822:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2200      	movs	r2, #0
 800c82a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c82e:	2303      	movs	r3, #3
 800c830:	e00f      	b.n	800c852 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	69da      	ldr	r2, [r3, #28]
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	4013      	ands	r3, r2
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	429a      	cmp	r2, r3
 800c840:	bf0c      	ite	eq
 800c842:	2301      	moveq	r3, #1
 800c844:	2300      	movne	r3, #0
 800c846:	b2db      	uxtb	r3, r3
 800c848:	461a      	mov	r2, r3
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d0a0      	beq.n	800c792 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}

0800c85a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b095      	sub	sp, #84	@ 0x54
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86a:	e853 3f00 	ldrex	r3, [r3]
 800c86e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	461a      	mov	r2, r3
 800c87e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c880:	643b      	str	r3, [r7, #64]	@ 0x40
 800c882:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c888:	e841 2300 	strex	r3, r2, [r1]
 800c88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1e6      	bne.n	800c862 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3308      	adds	r3, #8
 800c89a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	e853 3f00 	ldrex	r3, [r3]
 800c8a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c8aa:	f023 0301 	bic.w	r3, r3, #1
 800c8ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8c0:	e841 2300 	strex	r3, r2, [r1]
 800c8c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d1e3      	bne.n	800c894 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8d0:	2b01      	cmp	r3, #1
 800c8d2:	d118      	bne.n	800c906 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	f023 0310 	bic.w	r3, r3, #16
 800c8e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c8f2:	61bb      	str	r3, [r7, #24]
 800c8f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f6:	6979      	ldr	r1, [r7, #20]
 800c8f8:	69ba      	ldr	r2, [r7, #24]
 800c8fa:	e841 2300 	strex	r3, r2, [r1]
 800c8fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d1e6      	bne.n	800c8d4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2220      	movs	r2, #32
 800c90a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800c91a:	bf00      	nop
 800c91c:	3754      	adds	r7, #84	@ 0x54
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr

0800c926 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c926:	b480      	push	{r7}
 800c928:	b085      	sub	sp, #20
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c934:	2b01      	cmp	r3, #1
 800c936:	d101      	bne.n	800c93c <HAL_UARTEx_DisableFifoMode+0x16>
 800c938:	2302      	movs	r3, #2
 800c93a:	e027      	b.n	800c98c <HAL_UARTEx_DisableFifoMode+0x66>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2201      	movs	r2, #1
 800c940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2224      	movs	r2, #36	@ 0x24
 800c948:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f022 0201 	bic.w	r2, r2, #1
 800c962:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c96a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2200      	movs	r2, #0
 800c970:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2220      	movs	r2, #32
 800c97e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2200      	movs	r2, #0
 800c986:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c98a:	2300      	movs	r3, #0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3714      	adds	r7, #20
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b084      	sub	sp, #16
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d101      	bne.n	800c9b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e02d      	b.n	800ca0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2224      	movs	r2, #36	@ 0x24
 800c9bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	681a      	ldr	r2, [r3, #0]
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f022 0201 	bic.w	r2, r2, #1
 800c9d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	683a      	ldr	r2, [r7, #0]
 800c9e8:	430a      	orrs	r2, r1
 800c9ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f84f 	bl	800ca90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2220      	movs	r2, #32
 800c9fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b084      	sub	sp, #16
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ca24:	2b01      	cmp	r3, #1
 800ca26:	d101      	bne.n	800ca2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ca28:	2302      	movs	r3, #2
 800ca2a:	e02d      	b.n	800ca88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2201      	movs	r2, #1
 800ca30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2224      	movs	r2, #36	@ 0x24
 800ca38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f022 0201 	bic.w	r2, r2, #1
 800ca52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	683a      	ldr	r2, [r7, #0]
 800ca64:	430a      	orrs	r2, r1
 800ca66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f811 	bl	800ca90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2220      	movs	r2, #32
 800ca7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	2200      	movs	r2, #0
 800ca82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3710      	adds	r7, #16
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d108      	bne.n	800cab2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cab0:	e031      	b.n	800cb16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cab2:	2308      	movs	r3, #8
 800cab4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cab6:	2308      	movs	r3, #8
 800cab8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	0e5b      	lsrs	r3, r3, #25
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	f003 0307 	and.w	r3, r3, #7
 800cac8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	689b      	ldr	r3, [r3, #8]
 800cad0:	0f5b      	lsrs	r3, r3, #29
 800cad2:	b2db      	uxtb	r3, r3
 800cad4:	f003 0307 	and.w	r3, r3, #7
 800cad8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cada:	7bbb      	ldrb	r3, [r7, #14]
 800cadc:	7b3a      	ldrb	r2, [r7, #12]
 800cade:	4911      	ldr	r1, [pc, #68]	@ (800cb24 <UARTEx_SetNbDataToProcess+0x94>)
 800cae0:	5c8a      	ldrb	r2, [r1, r2]
 800cae2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800cae6:	7b3a      	ldrb	r2, [r7, #12]
 800cae8:	490f      	ldr	r1, [pc, #60]	@ (800cb28 <UARTEx_SetNbDataToProcess+0x98>)
 800caea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800caec:	fb93 f3f2 	sdiv	r3, r3, r2
 800caf0:	b29a      	uxth	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800caf8:	7bfb      	ldrb	r3, [r7, #15]
 800cafa:	7b7a      	ldrb	r2, [r7, #13]
 800cafc:	4909      	ldr	r1, [pc, #36]	@ (800cb24 <UARTEx_SetNbDataToProcess+0x94>)
 800cafe:	5c8a      	ldrb	r2, [r1, r2]
 800cb00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cb04:	7b7a      	ldrb	r2, [r7, #13]
 800cb06:	4908      	ldr	r1, [pc, #32]	@ (800cb28 <UARTEx_SetNbDataToProcess+0x98>)
 800cb08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cb0a:	fb93 f3f2 	sdiv	r3, r3, r2
 800cb0e:	b29a      	uxth	r2, r3
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800cb16:	bf00      	nop
 800cb18:	3714      	adds	r7, #20
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb20:	4770      	bx	lr
 800cb22:	bf00      	nop
 800cb24:	08013d0c 	.word	0x08013d0c
 800cb28:	08013d14 	.word	0x08013d14

0800cb2c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cb34:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cb38:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cb40:	b29a      	uxth	r2, r3
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	43db      	mvns	r3, r3
 800cb48:	b29b      	uxth	r3, r3
 800cb4a:	4013      	ands	r3, r2
 800cb4c:	b29a      	uxth	r2, r3
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cb54:	2300      	movs	r3, #0
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3714      	adds	r7, #20
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr

0800cb62 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cb62:	b480      	push	{r7}
 800cb64:	b085      	sub	sp, #20
 800cb66:	af00      	add	r7, sp, #0
 800cb68:	60f8      	str	r0, [r7, #12]
 800cb6a:	1d3b      	adds	r3, r7, #4
 800cb6c:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2201      	movs	r2, #1
 800cb74:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2200      	movs	r2, #0
 800cb7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2200      	movs	r2, #0
 800cb84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cb90:	2300      	movs	r3, #0
}
 800cb92:	4618      	mov	r0, r3
 800cb94:	3714      	adds	r7, #20
 800cb96:	46bd      	mov	sp, r7
 800cb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9c:	4770      	bx	lr

0800cb9e <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800cb9e:	b580      	push	{r7, lr}
 800cba0:	b088      	sub	sp, #32
 800cba2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800cba4:	2300      	movs	r3, #0
 800cba6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cba8:	f107 0308 	add.w	r3, r7, #8
 800cbac:	2218      	movs	r2, #24
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f001 f92d 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbb6:	233f      	movs	r3, #63	@ 0x3f
 800cbb8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800cbba:	2381      	movs	r3, #129	@ 0x81
 800cbbc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800cbbe:	1dfb      	adds	r3, r7, #7
 800cbc0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800cbc2:	2301      	movs	r3, #1
 800cbc4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbc6:	f107 0308 	add.w	r3, r7, #8
 800cbca:	2100      	movs	r1, #0
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f001 fba9 	bl	800e324 <hci_send_req>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	da01      	bge.n	800cbdc <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800cbd8:	23ff      	movs	r3, #255	@ 0xff
 800cbda:	e000      	b.n	800cbde <aci_gap_set_non_discoverable+0x40>
  return status;
 800cbdc:	79fb      	ldrb	r3, [r7, #7]
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3720      	adds	r7, #32
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800cbe6:	b5b0      	push	{r4, r5, r7, lr}
 800cbe8:	b0ce      	sub	sp, #312	@ 0x138
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	4605      	mov	r5, r0
 800cbee:	460c      	mov	r4, r1
 800cbf0:	4610      	mov	r0, r2
 800cbf2:	4619      	mov	r1, r3
 800cbf4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cbf8:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800cbfc:	462a      	mov	r2, r5
 800cbfe:	701a      	strb	r2, [r3, #0]
 800cc00:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc04:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800cc08:	4622      	mov	r2, r4
 800cc0a:	801a      	strh	r2, [r3, #0]
 800cc0c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc10:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800cc14:	4602      	mov	r2, r0
 800cc16:	801a      	strh	r2, [r3, #0]
 800cc18:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc1c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800cc20:	460a      	mov	r2, r1
 800cc22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800cc24:	f107 0310 	add.w	r3, r7, #16
 800cc28:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800cc2c:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cc30:	3308      	adds	r3, #8
 800cc32:	f107 0210 	add.w	r2, r7, #16
 800cc36:	4413      	add	r3, r2
 800cc38:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800cc3c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cc40:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cc44:	4413      	add	r3, r2
 800cc46:	3309      	adds	r3, #9
 800cc48:	f107 0210 	add.w	r2, r7, #16
 800cc4c:	4413      	add	r3, r2
 800cc4e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cc52:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cc56:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800cc64:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc68:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc6c:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800cc70:	7812      	ldrb	r2, [r2, #0]
 800cc72:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800cc74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc78:	3301      	adds	r3, #1
 800cc7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800cc7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc82:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cc86:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800cc8a:	8812      	ldrh	r2, [r2, #0]
 800cc8c:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800cc90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cc94:	3302      	adds	r3, #2
 800cc96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800cc9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cc9e:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800cca2:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800cca6:	8812      	ldrh	r2, [r2, #0]
 800cca8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800ccac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccb0:	3302      	adds	r3, #2
 800ccb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800ccb6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccba:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ccbe:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ccc2:	7812      	ldrb	r2, [r2, #0]
 800ccc4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ccc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccca:	3301      	adds	r3, #1
 800cccc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800ccd0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccd4:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ccd8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ccda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccde:	3301      	adds	r3, #1
 800cce0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800cce4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800cce8:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ccec:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800ccee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ccf2:	3301      	adds	r3, #1
 800ccf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800ccf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ccfc:	3308      	adds	r3, #8
 800ccfe:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800cd02:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800cd06:	4618      	mov	r0, r3
 800cd08:	f001 f872 	bl	800ddf0 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800cd0c:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800cd10:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd14:	4413      	add	r3, r2
 800cd16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800cd1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd1e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd22:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800cd24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd28:	3301      	adds	r3, #1
 800cd2a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800cd2e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800cd32:	3301      	adds	r3, #1
 800cd34:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800cd38:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f001 f857 	bl	800ddf0 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800cd42:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800cd46:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800cd4a:	4413      	add	r3, r2
 800cd4c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800cd50:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd54:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800cd58:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800cd5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd5e:	3302      	adds	r3, #2
 800cd60:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800cd64:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cd68:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800cd6c:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800cd6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd72:	3302      	adds	r3, #2
 800cd74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cd78:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cd7c:	2218      	movs	r2, #24
 800cd7e:	2100      	movs	r1, #0
 800cd80:	4618      	mov	r0, r3
 800cd82:	f001 f845 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cd86:	233f      	movs	r3, #63	@ 0x3f
 800cd88:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800cd8c:	2383      	movs	r3, #131	@ 0x83
 800cd8e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cd92:	f107 0310 	add.w	r3, r7, #16
 800cd96:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cd9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cd9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cda2:	f107 030f 	add.w	r3, r7, #15
 800cda6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cdaa:	2301      	movs	r3, #1
 800cdac:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cdb0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cdb4:	2100      	movs	r1, #0
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f001 fab4 	bl	800e324 <hci_send_req>
 800cdbc:	4603      	mov	r3, r0
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	da01      	bge.n	800cdc6 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800cdc2:	23ff      	movs	r3, #255	@ 0xff
 800cdc4:	e004      	b.n	800cdd0 <aci_gap_set_discoverable+0x1ea>
  return status;
 800cdc6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800cdca:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdce:	781b      	ldrb	r3, [r3, #0]
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bdb0      	pop	{r4, r5, r7, pc}

0800cdda <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b0cc      	sub	sp, #304	@ 0x130
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	4602      	mov	r2, r0
 800cde2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cde6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800cdea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800cdec:	f107 0310 	add.w	r3, r7, #16
 800cdf0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cdf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cdf8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ce00:	2300      	movs	r3, #0
 800ce02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800ce06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ce0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ce0e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ce12:	7812      	ldrb	r2, [r2, #0]
 800ce14:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ce16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce1a:	3301      	adds	r3, #1
 800ce1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ce20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce24:	2218      	movs	r2, #24
 800ce26:	2100      	movs	r1, #0
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f000 fff1 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ce2e:	233f      	movs	r3, #63	@ 0x3f
 800ce30:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ce34:	2385      	movs	r3, #133	@ 0x85
 800ce36:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ce3a:	f107 0310 	add.w	r3, r7, #16
 800ce3e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ce42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ce46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ce4a:	f107 030f 	add.w	r3, r7, #15
 800ce4e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ce52:	2301      	movs	r3, #1
 800ce54:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ce58:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f001 fa60 	bl	800e324 <hci_send_req>
 800ce64:	4603      	mov	r3, r0
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	da01      	bge.n	800ce6e <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ce6a:	23ff      	movs	r3, #255	@ 0xff
 800ce6c:	e004      	b.n	800ce78 <aci_gap_set_io_capability+0x9e>
  return status;
 800ce6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ce76:	781b      	ldrb	r3, [r3, #0]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ce82:	b5b0      	push	{r4, r5, r7, lr}
 800ce84:	b0cc      	sub	sp, #304	@ 0x130
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	4605      	mov	r5, r0
 800ce8a:	460c      	mov	r4, r1
 800ce8c:	4610      	mov	r0, r2
 800ce8e:	4619      	mov	r1, r3
 800ce90:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ce94:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ce98:	462a      	mov	r2, r5
 800ce9a:	701a      	strb	r2, [r3, #0]
 800ce9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cea0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800cea4:	4622      	mov	r2, r4
 800cea6:	701a      	strb	r2, [r3, #0]
 800cea8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ceac:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	701a      	strb	r2, [r3, #0]
 800ceb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ceb8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800cebc:	460a      	mov	r2, r1
 800cebe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800cec0:	f107 0310 	add.w	r3, r7, #16
 800cec4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800cec8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cecc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ced0:	2200      	movs	r2, #0
 800ced2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ced4:	2300      	movs	r3, #0
 800ced6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ceda:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cede:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cee2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800cee6:	7812      	ldrb	r2, [r2, #0]
 800cee8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ceea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ceee:	3301      	adds	r3, #1
 800cef0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800cef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cef8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cefc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800cf00:	7812      	ldrb	r2, [r2, #0]
 800cf02:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800cf04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf08:	3301      	adds	r3, #1
 800cf0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800cf0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf12:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf16:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800cf1a:	7812      	ldrb	r2, [r2, #0]
 800cf1c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800cf1e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf22:	3301      	adds	r3, #1
 800cf24:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800cf28:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf2c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800cf30:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800cf34:	7812      	ldrb	r2, [r2, #0]
 800cf36:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800cf38:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800cf42:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf46:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800cf4a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800cf4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf50:	3301      	adds	r3, #1
 800cf52:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800cf56:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf5a:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800cf5e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800cf60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf64:	3301      	adds	r3, #1
 800cf66:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800cf6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf6e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800cf72:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800cf74:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf78:	3301      	adds	r3, #1
 800cf7a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800cf7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf82:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800cf86:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800cf8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cf8e:	3304      	adds	r3, #4
 800cf90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800cf94:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800cf98:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800cf9c:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800cf9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cfa8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfac:	2218      	movs	r2, #24
 800cfae:	2100      	movs	r1, #0
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 ff2d 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800cfb6:	233f      	movs	r3, #63	@ 0x3f
 800cfb8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800cfbc:	2386      	movs	r3, #134	@ 0x86
 800cfbe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800cfc2:	f107 0310 	add.w	r3, r7, #16
 800cfc6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800cfca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800cfce:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800cfd2:	f107 030f 	add.w	r3, r7, #15
 800cfd6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800cfda:	2301      	movs	r3, #1
 800cfdc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cfe0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f001 f99c 	bl	800e324 <hci_send_req>
 800cfec:	4603      	mov	r3, r0
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	da01      	bge.n	800cff6 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800cff2:	23ff      	movs	r3, #255	@ 0xff
 800cff4:	e004      	b.n	800d000 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800cff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800cffa:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800cffe:	781b      	ldrb	r3, [r3, #0]
}
 800d000:	4618      	mov	r0, r3
 800d002:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d006:	46bd      	mov	sp, r7
 800d008:	bdb0      	pop	{r4, r5, r7, pc}

0800d00a <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800d00a:	b580      	push	{r7, lr}
 800d00c:	b0cc      	sub	sp, #304	@ 0x130
 800d00e:	af00      	add	r7, sp, #0
 800d010:	4602      	mov	r2, r0
 800d012:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d016:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d01a:	6019      	str	r1, [r3, #0]
 800d01c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d020:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d024:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800d026:	f107 0310 	add.w	r3, r7, #16
 800d02a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d02e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d032:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d036:	2200      	movs	r2, #0
 800d038:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d03a:	2300      	movs	r3, #0
 800d03c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d040:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d044:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d048:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d04c:	8812      	ldrh	r2, [r2, #0]
 800d04e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d050:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d054:	3302      	adds	r3, #2
 800d056:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800d05a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d05e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d062:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d066:	6812      	ldr	r2, [r2, #0]
 800d068:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800d06c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d070:	3304      	adds	r3, #4
 800d072:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d076:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d07a:	2218      	movs	r2, #24
 800d07c:	2100      	movs	r1, #0
 800d07e:	4618      	mov	r0, r3
 800d080:	f000 fec6 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d084:	233f      	movs	r3, #63	@ 0x3f
 800d086:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800d08a:	2388      	movs	r3, #136	@ 0x88
 800d08c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d090:	f107 0310 	add.w	r3, r7, #16
 800d094:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d098:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d09c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d0a0:	f107 030f 	add.w	r3, r7, #15
 800d0a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d0ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f001 f935 	bl	800e324 <hci_send_req>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	da01      	bge.n	800d0c4 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800d0c0:	23ff      	movs	r3, #255	@ 0xff
 800d0c2:	e004      	b.n	800d0ce <aci_gap_pass_key_resp+0xc4>
  return status;
 800d0c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d0cc:	781b      	ldrb	r3, [r3, #0]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}

0800d0d8 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d0d8:	b590      	push	{r4, r7, lr}
 800d0da:	b0cd      	sub	sp, #308	@ 0x134
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d0e8:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0f2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	701a      	strb	r2, [r3, #0]
 800d0fa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d0fe:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d102:	4602      	mov	r2, r0
 800d104:	701a      	strb	r2, [r3, #0]
 800d106:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d10a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d10e:	460a      	mov	r2, r1
 800d110:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d112:	f107 0310 	add.w	r3, r7, #16
 800d116:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d11a:	f107 0308 	add.w	r3, r7, #8
 800d11e:	2207      	movs	r2, #7
 800d120:	2100      	movs	r1, #0
 800d122:	4618      	mov	r0, r3
 800d124:	f000 fe74 	bl	800de10 <Osal_MemSet>
  int index_input = 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800d12e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d132:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d136:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d13a:	7812      	ldrb	r2, [r2, #0]
 800d13c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d13e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d142:	3301      	adds	r3, #1
 800d144:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d148:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d14c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d150:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d154:	7812      	ldrb	r2, [r2, #0]
 800d156:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d158:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d15c:	3301      	adds	r3, #1
 800d15e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d162:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d166:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d16a:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d16e:	7812      	ldrb	r2, [r2, #0]
 800d170:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d172:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d176:	3301      	adds	r3, #1
 800d178:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d17c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d180:	2218      	movs	r2, #24
 800d182:	2100      	movs	r1, #0
 800d184:	4618      	mov	r0, r3
 800d186:	f000 fe43 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d18a:	233f      	movs	r3, #63	@ 0x3f
 800d18c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800d190:	238a      	movs	r3, #138	@ 0x8a
 800d192:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d196:	f107 0310 	add.w	r3, r7, #16
 800d19a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d19e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d1a2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d1a6:	f107 0308 	add.w	r3, r7, #8
 800d1aa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d1ae:	2307      	movs	r3, #7
 800d1b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f001 f8b2 	bl	800e324 <hci_send_req>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	da01      	bge.n	800d1ca <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800d1c6:	23ff      	movs	r3, #255	@ 0xff
 800d1c8:	e02e      	b.n	800d228 <aci_gap_init+0x150>
  if ( resp.Status )
 800d1ca:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1ce:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d005      	beq.n	800d1e4 <aci_gap_init+0x10c>
    return resp.Status;
 800d1d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1dc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	e021      	b.n	800d228 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800d1e4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1e8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d1ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d1f0:	b29a      	uxth	r2, r3
 800d1f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d1f6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d1fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d202:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d206:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800d210:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d212:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d216:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800d21a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d21e:	b29a      	uxth	r2, r3
 800d220:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800d224:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd90      	pop	{r4, r7, pc}

0800d232 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d232:	b580      	push	{r7, lr}
 800d234:	b0cc      	sub	sp, #304	@ 0x130
 800d236:	af00      	add	r7, sp, #0
 800d238:	4602      	mov	r2, r0
 800d23a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d23e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d242:	6019      	str	r1, [r3, #0]
 800d244:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d248:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d24c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d24e:	f107 0310 	add.w	r3, r7, #16
 800d252:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d256:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d25a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d262:	2300      	movs	r3, #0
 800d264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d268:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d26c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d270:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800d274:	7812      	ldrb	r2, [r2, #0]
 800d276:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d278:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d27c:	3301      	adds	r3, #1
 800d27e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d282:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d286:	1c58      	adds	r0, r3, #1
 800d288:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d28c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d290:	781a      	ldrb	r2, [r3, #0]
 800d292:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d296:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800d29a:	6819      	ldr	r1, [r3, #0]
 800d29c:	f000 fda8 	bl	800ddf0 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d2a0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d2a4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d2ae:	4413      	add	r3, r2
 800d2b0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d2b4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2b8:	2218      	movs	r2, #24
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f000 fda7 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d2c2:	233f      	movs	r3, #63	@ 0x3f
 800d2c4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800d2c8:	238e      	movs	r3, #142	@ 0x8e
 800d2ca:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d2ce:	f107 0310 	add.w	r3, r7, #16
 800d2d2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d2da:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d2de:	f107 030f 	add.w	r3, r7, #15
 800d2e2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d2e6:	2301      	movs	r3, #1
 800d2e8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d2ec:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d2f0:	2100      	movs	r1, #0
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f001 f816 	bl	800e324 <hci_send_req>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	da01      	bge.n	800d302 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800d2fe:	23ff      	movs	r3, #255	@ 0xff
 800d300:	e004      	b.n	800d30c <aci_gap_update_adv_data+0xda>
  return status;
 800d302:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d306:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d30a:	781b      	ldrb	r3, [r3, #0]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800d316:	b580      	push	{r7, lr}
 800d318:	b088      	sub	sp, #32
 800d31a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d320:	f107 0308 	add.w	r3, r7, #8
 800d324:	2218      	movs	r2, #24
 800d326:	2100      	movs	r1, #0
 800d328:	4618      	mov	r0, r3
 800d32a:	f000 fd71 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d32e:	233f      	movs	r3, #63	@ 0x3f
 800d330:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d332:	2392      	movs	r3, #146	@ 0x92
 800d334:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d336:	1dfb      	adds	r3, r7, #7
 800d338:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d33a:	2301      	movs	r3, #1
 800d33c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d33e:	f107 0308 	add.w	r3, r7, #8
 800d342:	2100      	movs	r1, #0
 800d344:	4618      	mov	r0, r3
 800d346:	f000 ffed 	bl	800e324 <hci_send_req>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	da01      	bge.n	800d354 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d350:	23ff      	movs	r3, #255	@ 0xff
 800d352:	e000      	b.n	800d356 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800d354:	79fb      	ldrb	r3, [r7, #7]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3720      	adds	r7, #32
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}

0800d35e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d35e:	b580      	push	{r7, lr}
 800d360:	b0cc      	sub	sp, #304	@ 0x130
 800d362:	af00      	add	r7, sp, #0
 800d364:	4602      	mov	r2, r0
 800d366:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d36a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d36e:	801a      	strh	r2, [r3, #0]
 800d370:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d374:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800d378:	460a      	mov	r2, r1
 800d37a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d37c:	f107 0310 	add.w	r3, r7, #16
 800d380:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d384:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d388:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d38c:	2200      	movs	r2, #0
 800d38e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d396:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d39a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d39e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d3a2:	8812      	ldrh	r2, [r2, #0]
 800d3a4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d3a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3aa:	3302      	adds	r3, #2
 800d3ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d3b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d3b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d3b8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800d3bc:	7812      	ldrb	r2, [r2, #0]
 800d3be:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d3c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3c4:	3301      	adds	r3, #1
 800d3c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d3ce:	2218      	movs	r2, #24
 800d3d0:	2100      	movs	r1, #0
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 fd1c 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3d8:	233f      	movs	r3, #63	@ 0x3f
 800d3da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800d3de:	23a5      	movs	r3, #165	@ 0xa5
 800d3e0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d3e4:	f107 0310 	add.w	r3, r7, #16
 800d3e8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d3ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d3f0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d3f4:	f107 030f 	add.w	r3, r7, #15
 800d3f8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d402:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d406:	2100      	movs	r1, #0
 800d408:	4618      	mov	r0, r3
 800d40a:	f000 ff8b 	bl	800e324 <hci_send_req>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	da01      	bge.n	800d418 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800d414:	23ff      	movs	r3, #255	@ 0xff
 800d416:	e004      	b.n	800d422 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800d418:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d41c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d420:	781b      	ldrb	r3, [r3, #0]
}
 800d422:	4618      	mov	r0, r3
 800d424:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b088      	sub	sp, #32
 800d430:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d432:	2300      	movs	r3, #0
 800d434:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d436:	f107 0308 	add.w	r3, r7, #8
 800d43a:	2218      	movs	r2, #24
 800d43c:	2100      	movs	r1, #0
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 fce6 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d444:	233f      	movs	r3, #63	@ 0x3f
 800d446:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d448:	f240 1301 	movw	r3, #257	@ 0x101
 800d44c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d44e:	1dfb      	adds	r3, r7, #7
 800d450:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d452:	2301      	movs	r3, #1
 800d454:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d456:	f107 0308 	add.w	r3, r7, #8
 800d45a:	2100      	movs	r1, #0
 800d45c:	4618      	mov	r0, r3
 800d45e:	f000 ff61 	bl	800e324 <hci_send_req>
 800d462:	4603      	mov	r3, r0
 800d464:	2b00      	cmp	r3, #0
 800d466:	da01      	bge.n	800d46c <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d468:	23ff      	movs	r3, #255	@ 0xff
 800d46a:	e000      	b.n	800d46e <aci_gatt_init+0x42>
  return status;
 800d46c:	79fb      	ldrb	r3, [r7, #7]
}
 800d46e:	4618      	mov	r0, r3
 800d470:	3720      	adds	r7, #32
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}

0800d476 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d476:	b590      	push	{r4, r7, lr}
 800d478:	b0cf      	sub	sp, #316	@ 0x13c
 800d47a:	af00      	add	r7, sp, #0
 800d47c:	4604      	mov	r4, r0
 800d47e:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800d482:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800d486:	6001      	str	r1, [r0, #0]
 800d488:	4610      	mov	r0, r2
 800d48a:	4619      	mov	r1, r3
 800d48c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d490:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d494:	4622      	mov	r2, r4
 800d496:	701a      	strb	r2, [r3, #0]
 800d498:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d49c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d4a0:	4602      	mov	r2, r0
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4a8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d4ac:	460a      	mov	r2, r1
 800d4ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d4b0:	f107 0310 	add.w	r3, r7, #16
 800d4b4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d4b8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4bc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4c0:	781b      	ldrb	r3, [r3, #0]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d00a      	beq.n	800d4dc <aci_gatt_add_service+0x66>
 800d4c6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d4ca:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	2b02      	cmp	r3, #2
 800d4d2:	d101      	bne.n	800d4d8 <aci_gatt_add_service+0x62>
 800d4d4:	2311      	movs	r3, #17
 800d4d6:	e002      	b.n	800d4de <aci_gatt_add_service+0x68>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	e000      	b.n	800d4de <aci_gatt_add_service+0x68>
 800d4dc:	2303      	movs	r3, #3
 800d4de:	f107 0210 	add.w	r2, r7, #16
 800d4e2:	4413      	add	r3, r2
 800d4e4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d4e8:	f107 030c 	add.w	r3, r7, #12
 800d4ec:	2203      	movs	r2, #3
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f000 fc8d 	bl	800de10 <Osal_MemSet>
  int index_input = 0;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d4fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d500:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d504:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800d508:	7812      	ldrb	r2, [r2, #0]
 800d50a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d50c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d510:	3301      	adds	r3, #1
 800d512:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d516:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d51a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d002      	beq.n	800d52a <aci_gatt_add_service+0xb4>
 800d524:	2b02      	cmp	r3, #2
 800d526:	d004      	beq.n	800d532 <aci_gatt_add_service+0xbc>
 800d528:	e007      	b.n	800d53a <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800d52a:	2302      	movs	r3, #2
 800d52c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d530:	e005      	b.n	800d53e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800d532:	2310      	movs	r3, #16
 800d534:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800d538:	e001      	b.n	800d53e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800d53a:	2397      	movs	r3, #151	@ 0x97
 800d53c:	e06c      	b.n	800d618 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d53e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d542:	1c58      	adds	r0, r3, #1
 800d544:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800d548:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d54c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d550:	6819      	ldr	r1, [r3, #0]
 800d552:	f000 fc4d 	bl	800ddf0 <Osal_MemCpy>
    index_input += size;
 800d556:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800d55a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d55e:	4413      	add	r3, r2
 800d560:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800d564:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d568:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d56c:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d570:	7812      	ldrb	r2, [r2, #0]
 800d572:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d574:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d578:	3301      	adds	r3, #1
 800d57a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d57e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d582:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800d586:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d58a:	7812      	ldrb	r2, [r2, #0]
 800d58c:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d58e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d592:	3301      	adds	r3, #1
 800d594:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d598:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d59c:	2218      	movs	r2, #24
 800d59e:	2100      	movs	r1, #0
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f000 fc35 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d5a6:	233f      	movs	r3, #63	@ 0x3f
 800d5a8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800d5ac:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800d5b0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d5b4:	f107 0310 	add.w	r3, r7, #16
 800d5b8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d5bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d5c0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800d5c4:	f107 030c 	add.w	r3, r7, #12
 800d5c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800d5cc:	2303      	movs	r3, #3
 800d5ce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d5d2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d5d6:	2100      	movs	r1, #0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f000 fea3 	bl	800e324 <hci_send_req>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	da01      	bge.n	800d5e8 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800d5e4:	23ff      	movs	r3, #255	@ 0xff
 800d5e6:	e017      	b.n	800d618 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800d5e8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5ec:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5f0:	781b      	ldrb	r3, [r3, #0]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d005      	beq.n	800d602 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800d5f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d5fa:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	e00a      	b.n	800d618 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800d602:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800d606:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d60a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d60e:	b29a      	uxth	r2, r3
 800d610:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800d614:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd90      	pop	{r4, r7, pc}

0800d622 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800d622:	b590      	push	{r4, r7, lr}
 800d624:	b0d1      	sub	sp, #324	@ 0x144
 800d626:	af00      	add	r7, sp, #0
 800d628:	4604      	mov	r4, r0
 800d62a:	4608      	mov	r0, r1
 800d62c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800d630:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800d634:	600a      	str	r2, [r1, #0]
 800d636:	4619      	mov	r1, r3
 800d638:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d63c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800d640:	4622      	mov	r2, r4
 800d642:	801a      	strh	r2, [r3, #0]
 800d644:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d648:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d64c:	4602      	mov	r2, r0
 800d64e:	701a      	strb	r2, [r3, #0]
 800d650:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d654:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800d658:	460a      	mov	r2, r1
 800d65a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800d65c:	f107 0318 	add.w	r3, r7, #24
 800d660:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800d664:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d668:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	2b01      	cmp	r3, #1
 800d670:	d00a      	beq.n	800d688 <aci_gatt_add_char+0x66>
 800d672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d676:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b02      	cmp	r3, #2
 800d67e:	d101      	bne.n	800d684 <aci_gatt_add_char+0x62>
 800d680:	2313      	movs	r3, #19
 800d682:	e002      	b.n	800d68a <aci_gatt_add_char+0x68>
 800d684:	2303      	movs	r3, #3
 800d686:	e000      	b.n	800d68a <aci_gatt_add_char+0x68>
 800d688:	2305      	movs	r3, #5
 800d68a:	f107 0218 	add.w	r2, r7, #24
 800d68e:	4413      	add	r3, r2
 800d690:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d694:	f107 0314 	add.w	r3, r7, #20
 800d698:	2203      	movs	r2, #3
 800d69a:	2100      	movs	r1, #0
 800d69c:	4618      	mov	r0, r3
 800d69e:	f000 fbb7 	bl	800de10 <Osal_MemSet>
  int index_input = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800d6a8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6ac:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d6b0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800d6b4:	8812      	ldrh	r2, [r2, #0]
 800d6b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d6b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6bc:	3302      	adds	r3, #2
 800d6be:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800d6c2:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d6c6:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d6ca:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800d6ce:	7812      	ldrb	r2, [r2, #0]
 800d6d0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d6d2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d6d6:	3301      	adds	r3, #1
 800d6d8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800d6dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d6e0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	2b01      	cmp	r3, #1
 800d6e8:	d002      	beq.n	800d6f0 <aci_gatt_add_char+0xce>
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d004      	beq.n	800d6f8 <aci_gatt_add_char+0xd6>
 800d6ee:	e007      	b.n	800d700 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800d6f0:	2302      	movs	r3, #2
 800d6f2:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6f6:	e005      	b.n	800d704 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800d6f8:	2310      	movs	r3, #16
 800d6fa:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800d6fe:	e001      	b.n	800d704 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800d700:	2397      	movs	r3, #151	@ 0x97
 800d702:	e091      	b.n	800d828 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800d704:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800d708:	1cd8      	adds	r0, r3, #3
 800d70a:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800d70e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d712:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800d716:	6819      	ldr	r1, [r3, #0]
 800d718:	f000 fb6a 	bl	800ddf0 <Osal_MemCpy>
    index_input += size;
 800d71c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800d720:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800d724:	4413      	add	r3, r2
 800d726:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800d72a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d72e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800d732:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800d736:	8812      	ldrh	r2, [r2, #0]
 800d738:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d73a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d73e:	3302      	adds	r3, #2
 800d740:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800d744:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d748:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800d74c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800d74e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d752:	3301      	adds	r3, #1
 800d754:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800d758:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d75c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800d760:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800d762:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d766:	3301      	adds	r3, #1
 800d768:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800d76c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d770:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800d774:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800d776:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d77a:	3301      	adds	r3, #1
 800d77c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800d780:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d784:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800d788:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800d78a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d78e:	3301      	adds	r3, #1
 800d790:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800d794:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800d798:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800d79c:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800d79e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7a8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d7ac:	2218      	movs	r2, #24
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 fb2d 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7b6:	233f      	movs	r3, #63	@ 0x3f
 800d7b8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800d7bc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d7c0:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800d7c4:	f107 0318 	add.w	r3, r7, #24
 800d7c8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800d7cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800d7d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800d7d4:	f107 0314 	add.w	r3, r7, #20
 800d7d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800d7dc:	2303      	movs	r3, #3
 800d7de:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7e2:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800d7e6:	2100      	movs	r1, #0
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 fd9b 	bl	800e324 <hci_send_req>
 800d7ee:	4603      	mov	r3, r0
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	da01      	bge.n	800d7f8 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800d7f4:	23ff      	movs	r3, #255	@ 0xff
 800d7f6:	e017      	b.n	800d828 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800d7f8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d7fc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d005      	beq.n	800d812 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800d806:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d80a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d80e:	781b      	ldrb	r3, [r3, #0]
 800d810:	e00a      	b.n	800d828 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800d812:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800d816:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d81a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d81e:	b29a      	uxth	r2, r3
 800d820:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800d824:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd90      	pop	{r4, r7, pc}

0800d832 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800d832:	b5b0      	push	{r4, r5, r7, lr}
 800d834:	b0cc      	sub	sp, #304	@ 0x130
 800d836:	af00      	add	r7, sp, #0
 800d838:	4605      	mov	r5, r0
 800d83a:	460c      	mov	r4, r1
 800d83c:	4610      	mov	r0, r2
 800d83e:	4619      	mov	r1, r3
 800d840:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d844:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d848:	462a      	mov	r2, r5
 800d84a:	801a      	strh	r2, [r3, #0]
 800d84c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d850:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800d854:	4622      	mov	r2, r4
 800d856:	801a      	strh	r2, [r3, #0]
 800d858:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d85c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800d860:	4602      	mov	r2, r0
 800d862:	701a      	strb	r2, [r3, #0]
 800d864:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d868:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d86c:	460a      	mov	r2, r1
 800d86e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800d870:	f107 0310 	add.w	r3, r7, #16
 800d874:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d878:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d87c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d880:	2200      	movs	r2, #0
 800d882:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d884:	2300      	movs	r3, #0
 800d886:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800d88a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d88e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d892:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d896:	8812      	ldrh	r2, [r2, #0]
 800d898:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d89a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d89e:	3302      	adds	r3, #2
 800d8a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800d8a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8a8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8ac:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800d8b0:	8812      	ldrh	r2, [r2, #0]
 800d8b2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800d8b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8b8:	3302      	adds	r3, #2
 800d8ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800d8be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8c2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8c6:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800d8ca:	7812      	ldrb	r2, [r2, #0]
 800d8cc:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d8ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800d8d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8dc:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d8e0:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800d8e4:	7812      	ldrb	r2, [r2, #0]
 800d8e6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d8e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800d8f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d8f6:	1d98      	adds	r0, r3, #6
 800d8f8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d8fc:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d900:	781b      	ldrb	r3, [r3, #0]
 800d902:	461a      	mov	r2, r3
 800d904:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800d908:	f000 fa72 	bl	800ddf0 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800d90c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d910:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800d91a:	4413      	add	r3, r2
 800d91c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d924:	2218      	movs	r2, #24
 800d926:	2100      	movs	r1, #0
 800d928:	4618      	mov	r0, r3
 800d92a:	f000 fa71 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d92e:	233f      	movs	r3, #63	@ 0x3f
 800d930:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800d934:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800d938:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d93c:	f107 0310 	add.w	r3, r7, #16
 800d940:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d944:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d948:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d94c:	f107 030f 	add.w	r3, r7, #15
 800d950:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d954:	2301      	movs	r3, #1
 800d956:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d95a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d95e:	2100      	movs	r1, #0
 800d960:	4618      	mov	r0, r3
 800d962:	f000 fcdf 	bl	800e324 <hci_send_req>
 800d966:	4603      	mov	r3, r0
 800d968:	2b00      	cmp	r3, #0
 800d96a:	da01      	bge.n	800d970 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800d96c:	23ff      	movs	r3, #255	@ 0xff
 800d96e:	e004      	b.n	800d97a <aci_gatt_update_char_value+0x148>
  return status;
 800d970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d974:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d978:	781b      	ldrb	r3, [r3, #0]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800d980:	46bd      	mov	sp, r7
 800d982:	bdb0      	pop	{r4, r5, r7, pc}

0800d984 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b0cc      	sub	sp, #304	@ 0x130
 800d988:	af00      	add	r7, sp, #0
 800d98a:	4602      	mov	r2, r0
 800d98c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d990:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800d994:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800d996:	f107 0310 	add.w	r3, r7, #16
 800d99a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800d99e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800d9a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d9b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800d9b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800d9b8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800d9bc:	8812      	ldrh	r2, [r2, #0]
 800d9be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d9c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9c4:	3302      	adds	r3, #2
 800d9c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800d9ce:	2218      	movs	r2, #24
 800d9d0:	2100      	movs	r1, #0
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f000 fa1c 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9d8:	233f      	movs	r3, #63	@ 0x3f
 800d9da:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800d9de:	f240 1325 	movw	r3, #293	@ 0x125
 800d9e2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800d9e6:	f107 0310 	add.w	r3, r7, #16
 800d9ea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800d9ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d9f2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800d9f6:	f107 030f 	add.w	r3, r7, #15
 800d9fa:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800d9fe:	2301      	movs	r3, #1
 800da00:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da04:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800da08:	2100      	movs	r1, #0
 800da0a:	4618      	mov	r0, r3
 800da0c:	f000 fc8a 	bl	800e324 <hci_send_req>
 800da10:	4603      	mov	r3, r0
 800da12:	2b00      	cmp	r3, #0
 800da14:	da01      	bge.n	800da1a <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800da16:	23ff      	movs	r3, #255	@ 0xff
 800da18:	e004      	b.n	800da24 <aci_gatt_confirm_indication+0xa0>
  return status;
 800da1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da1e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da22:	781b      	ldrb	r3, [r3, #0]
}
 800da24:	4618      	mov	r0, r3
 800da26:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800da2a:	46bd      	mov	sp, r7
 800da2c:	bd80      	pop	{r7, pc}

0800da2e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800da2e:	b580      	push	{r7, lr}
 800da30:	b0cc      	sub	sp, #304	@ 0x130
 800da32:	af00      	add	r7, sp, #0
 800da34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da38:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800da3c:	601a      	str	r2, [r3, #0]
 800da3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da42:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800da46:	4602      	mov	r2, r0
 800da48:	701a      	strb	r2, [r3, #0]
 800da4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800da52:	460a      	mov	r2, r1
 800da54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800da56:	f107 0310 	add.w	r3, r7, #16
 800da5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800da62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800da66:	2200      	movs	r2, #0
 800da68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800da70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da78:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800da7c:	7812      	ldrb	r2, [r2, #0]
 800da7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800da80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da84:	3301      	adds	r3, #1
 800da86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800da8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800da8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800da92:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800da96:	7812      	ldrb	r2, [r2, #0]
 800da98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800da9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800da9e:	3301      	adds	r3, #1
 800daa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800daa4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800daa8:	1c98      	adds	r0, r3, #2
 800daaa:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800daae:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dab2:	781a      	ldrb	r2, [r3, #0]
 800dab4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dab8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800dabc:	6819      	ldr	r1, [r3, #0]
 800dabe:	f000 f997 	bl	800ddf0 <Osal_MemCpy>
  index_input += Length;
 800dac2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dac6:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800dad0:	4413      	add	r3, r2
 800dad2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dad6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dada:	2218      	movs	r2, #24
 800dadc:	2100      	movs	r1, #0
 800dade:	4618      	mov	r0, r3
 800dae0:	f000 f996 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dae4:	233f      	movs	r3, #63	@ 0x3f
 800dae6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800daea:	230c      	movs	r3, #12
 800daec:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800daf0:	f107 0310 	add.w	r3, r7, #16
 800daf4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800daf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dafc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800db00:	f107 030f 	add.w	r3, r7, #15
 800db04:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800db08:	2301      	movs	r3, #1
 800db0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800db0e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800db12:	2100      	movs	r1, #0
 800db14:	4618      	mov	r0, r3
 800db16:	f000 fc05 	bl	800e324 <hci_send_req>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	da01      	bge.n	800db24 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800db20:	23ff      	movs	r3, #255	@ 0xff
 800db22:	e004      	b.n	800db2e <aci_hal_write_config_data+0x100>
  return status;
 800db24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db28:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db2c:	781b      	ldrb	r3, [r3, #0]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b0cc      	sub	sp, #304	@ 0x130
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	4602      	mov	r2, r0
 800db40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800db48:	701a      	strb	r2, [r3, #0]
 800db4a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db4e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800db52:	460a      	mov	r2, r1
 800db54:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800db56:	f107 0310 	add.w	r3, r7, #16
 800db5a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800db5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800db62:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800db66:	2200      	movs	r2, #0
 800db68:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800db70:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db74:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db78:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800db7c:	7812      	ldrb	r2, [r2, #0]
 800db7e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800db80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db84:	3301      	adds	r3, #1
 800db86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800db8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db8e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800db92:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800db96:	7812      	ldrb	r2, [r2, #0]
 800db98:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800db9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db9e:	3301      	adds	r3, #1
 800dba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dba4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dba8:	2218      	movs	r2, #24
 800dbaa:	2100      	movs	r1, #0
 800dbac:	4618      	mov	r0, r3
 800dbae:	f000 f92f 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbb2:	233f      	movs	r3, #63	@ 0x3f
 800dbb4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800dbb8:	230f      	movs	r3, #15
 800dbba:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dbbe:	f107 0310 	add.w	r3, r7, #16
 800dbc2:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dbc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbca:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dbce:	f107 030f 	add.w	r3, r7, #15
 800dbd2:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbdc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbe0:	2100      	movs	r1, #0
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f000 fb9e 	bl	800e324 <hci_send_req>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	da01      	bge.n	800dbf2 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800dbee:	23ff      	movs	r3, #255	@ 0xff
 800dbf0:	e004      	b.n	800dbfc <aci_hal_set_tx_power_level+0xc4>
  return status;
 800dbf2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dbf6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dbfa:	781b      	ldrb	r3, [r3, #0]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b0cc      	sub	sp, #304	@ 0x130
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	4602      	mov	r2, r0
 800dc0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dc16:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800dc18:	f107 0310 	add.w	r3, r7, #16
 800dc1c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc24:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc28:	2200      	movs	r2, #0
 800dc2a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800dc32:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc36:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc3a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dc3e:	8812      	ldrh	r2, [r2, #0]
 800dc40:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dc42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc46:	3302      	adds	r3, #2
 800dc48:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc4c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc50:	2218      	movs	r2, #24
 800dc52:	2100      	movs	r1, #0
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 f8db 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc5a:	233f      	movs	r3, #63	@ 0x3f
 800dc5c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800dc60:	2318      	movs	r3, #24
 800dc62:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc72:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc76:	f107 030f 	add.w	r3, r7, #15
 800dc7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc84:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc88:	2100      	movs	r1, #0
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f000 fb4a 	bl	800e324 <hci_send_req>
 800dc90:	4603      	mov	r3, r0
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	da01      	bge.n	800dc9a <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800dc96:	23ff      	movs	r3, #255	@ 0xff
 800dc98:	e004      	b.n	800dca4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800dc9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dca2:	781b      	ldrb	r3, [r3, #0]
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b088      	sub	sp, #32
 800dcb2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcb8:	f107 0308 	add.w	r3, r7, #8
 800dcbc:	2218      	movs	r2, #24
 800dcbe:	2100      	movs	r1, #0
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f000 f8a5 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x03;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800dcca:	2303      	movs	r3, #3
 800dccc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800dcce:	1dfb      	adds	r3, r7, #7
 800dcd0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800dcd2:	2301      	movs	r3, #1
 800dcd4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dcd6:	f107 0308 	add.w	r3, r7, #8
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fb21 	bl	800e324 <hci_send_req>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	da01      	bge.n	800dcec <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800dce8:	23ff      	movs	r3, #255	@ 0xff
 800dcea:	e000      	b.n	800dcee <hci_reset+0x40>
  return status;
 800dcec:	79fb      	ldrb	r3, [r7, #7]
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3720      	adds	r7, #32
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dcf6:	b590      	push	{r4, r7, lr}
 800dcf8:	b0cd      	sub	sp, #308	@ 0x134
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	4608      	mov	r0, r1
 800dd00:	4611      	mov	r1, r2
 800dd02:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd06:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dd0a:	4622      	mov	r2, r4
 800dd0c:	701a      	strb	r2, [r3, #0]
 800dd0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd12:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dd16:	4602      	mov	r2, r0
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd1e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dd22:	460a      	mov	r2, r1
 800dd24:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800dd26:	f107 0310 	add.w	r3, r7, #16
 800dd2a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd32:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800dd40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd48:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dd4c:	7812      	ldrb	r2, [r2, #0]
 800dd4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd54:	3301      	adds	r3, #1
 800dd56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800dd5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd62:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd66:	7812      	ldrb	r2, [r2, #0]
 800dd68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd6e:	3301      	adds	r3, #1
 800dd70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800dd74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd7c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dd80:	7812      	ldrb	r2, [r2, #0]
 800dd82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd88:	3301      	adds	r3, #1
 800dd8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dd8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dd92:	2218      	movs	r2, #24
 800dd94:	2100      	movs	r1, #0
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 f83a 	bl	800de10 <Osal_MemSet>
  rq.ogf = 0x08;
 800dd9c:	2308      	movs	r3, #8
 800dd9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800dda2:	2331      	movs	r3, #49	@ 0x31
 800dda4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dda8:	f107 0310 	add.w	r3, r7, #16
 800ddac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ddb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ddb8:	f107 030f 	add.w	r3, r7, #15
 800ddbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ddca:	2100      	movs	r1, #0
 800ddcc:	4618      	mov	r0, r3
 800ddce:	f000 faa9 	bl	800e324 <hci_send_req>
 800ddd2:	4603      	mov	r3, r0
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	da01      	bge.n	800dddc <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ddd8:	23ff      	movs	r3, #255	@ 0xff
 800ddda:	e004      	b.n	800dde6 <hci_le_set_default_phy+0xf0>
  return status;
 800dddc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dde0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dde4:	781b      	ldrb	r3, [r3, #0]
}
 800dde6:	4618      	mov	r0, r3
 800dde8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}

0800ddf0 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b084      	sub	sp, #16
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800ddfc:	687a      	ldr	r2, [r7, #4]
 800ddfe:	68b9      	ldr	r1, [r7, #8]
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f003 fc36 	bl	8011672 <memcpy>
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800de1c:	687a      	ldr	r2, [r7, #4]
 800de1e:	68b9      	ldr	r1, [r7, #8]
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f003 fb95 	bl	8011550 <memset>
 800de26:	4603      	mov	r3, r0
}
 800de28:	4618      	mov	r0, r3
 800de2a:	3710      	adds	r7, #16
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}

0800de30 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800de30:	b480      	push	{r7}
 800de32:	af00      	add	r7, sp, #0
  return;
 800de34:	bf00      	nop
}
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800de3e:	b480      	push	{r7}
 800de40:	af00      	add	r7, sp, #0
  return;
 800de42:	bf00      	nop
}
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr

0800de4c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800de4c:	b480      	push	{r7}
 800de4e:	af00      	add	r7, sp, #0
  return;
 800de50:	bf00      	nop
}
 800de52:	46bd      	mov	sp, r7
 800de54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de58:	4770      	bx	lr

0800de5a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800de5a:	b480      	push	{r7}
 800de5c:	af00      	add	r7, sp, #0
  return;
 800de5e:	bf00      	nop
}
 800de60:	46bd      	mov	sp, r7
 800de62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de66:	4770      	bx	lr

0800de68 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800de68:	b480      	push	{r7}
 800de6a:	af00      	add	r7, sp, #0
  return;
 800de6c:	bf00      	nop
}
 800de6e:	46bd      	mov	sp, r7
 800de70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de74:	4770      	bx	lr

0800de76 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800de76:	b480      	push	{r7}
 800de78:	af00      	add	r7, sp, #0
  return;
 800de7a:	bf00      	nop
}
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800de84:	b480      	push	{r7}
 800de86:	af00      	add	r7, sp, #0
  return;
 800de88:	bf00      	nop
}
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800de92:	b480      	push	{r7}
 800de94:	af00      	add	r7, sp, #0
  return;
 800de96:	bf00      	nop
}
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800dea0:	b480      	push	{r7}
 800dea2:	af00      	add	r7, sp, #0
  return;
 800dea4:	bf00      	nop
}
 800dea6:	46bd      	mov	sp, r7
 800dea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deac:	4770      	bx	lr

0800deae <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800deae:	b480      	push	{r7}
 800deb0:	af00      	add	r7, sp, #0
  return;
 800deb2:	bf00      	nop
}
 800deb4:	46bd      	mov	sp, r7
 800deb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deba:	4770      	bx	lr

0800debc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0
  return;
 800dec0:	bf00      	nop
}
 800dec2:	46bd      	mov	sp, r7
 800dec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec8:	4770      	bx	lr

0800deca <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800deca:	b480      	push	{r7}
 800decc:	af00      	add	r7, sp, #0
  return;
 800dece:	bf00      	nop
}
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ded8:	b480      	push	{r7}
 800deda:	af00      	add	r7, sp, #0
  return;
 800dedc:	bf00      	nop
}
 800dede:	46bd      	mov	sp, r7
 800dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee4:	4770      	bx	lr

0800dee6 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800dee6:	b480      	push	{r7}
 800dee8:	af00      	add	r7, sp, #0
  return;
 800deea:	bf00      	nop
}
 800deec:	46bd      	mov	sp, r7
 800deee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def2:	4770      	bx	lr

0800def4 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800def4:	b480      	push	{r7}
 800def6:	af00      	add	r7, sp, #0
  return;
 800def8:	bf00      	nop
}
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr

0800df02 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800df02:	b480      	push	{r7}
 800df04:	af00      	add	r7, sp, #0
  return;
 800df06:	bf00      	nop
}
 800df08:	46bd      	mov	sp, r7
 800df0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df0e:	4770      	bx	lr

0800df10 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800df10:	b480      	push	{r7}
 800df12:	af00      	add	r7, sp, #0
  return;
 800df14:	bf00      	nop
}
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
	...

0800df20 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800df20:	b580      	push	{r7, lr}
 800df22:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800df24:	4b04      	ldr	r3, [pc, #16]	@ (800df38 <SVCCTL_Init+0x18>)
 800df26:	2200      	movs	r2, #0
 800df28:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800df2a:	4b04      	ldr	r3, [pc, #16]	@ (800df3c <SVCCTL_Init+0x1c>)
 800df2c:	2200      	movs	r2, #0
 800df2e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800df30:	f000 f806 	bl	800df40 <SVCCTL_SvcInit>

  return;
 800df34:	bf00      	nop
}
 800df36:	bd80      	pop	{r7, pc}
 800df38:	2000016c 	.word	0x2000016c
 800df3c:	2000018c 	.word	0x2000018c

0800df40 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	af00      	add	r7, sp, #0
  BAS_Init();
 800df44:	f7ff ff74 	bl	800de30 <BAS_Init>

  BLS_Init();
 800df48:	f7ff ff79 	bl	800de3e <BLS_Init>

  CRS_STM_Init();
 800df4c:	f7ff ff7e 	bl	800de4c <CRS_STM_Init>

  DIS_Init();
 800df50:	f7ff ff83 	bl	800de5a <DIS_Init>

  EDS_STM_Init();
 800df54:	f7ff ff88 	bl	800de68 <EDS_STM_Init>

  HIDS_Init();
 800df58:	f7ff ff8d 	bl	800de76 <HIDS_Init>

  HRS_Init();
 800df5c:	f7ff ff92 	bl	800de84 <HRS_Init>

  HTS_Init();
 800df60:	f7ff ff97 	bl	800de92 <HTS_Init>

  IAS_Init();
 800df64:	f7ff ff9c 	bl	800dea0 <IAS_Init>

  LLS_Init();
 800df68:	f7ff ffa1 	bl	800deae <LLS_Init>

  TPS_Init();
 800df6c:	f7ff ffa6 	bl	800debc <TPS_Init>

  MOTENV_STM_Init();
 800df70:	f7ff ffab 	bl	800deca <MOTENV_STM_Init>

  P2PS_STM_Init();
 800df74:	f7ff ffb0 	bl	800ded8 <P2PS_STM_Init>

  ZDD_STM_Init();
 800df78:	f7ff ffb5 	bl	800dee6 <ZDD_STM_Init>

  OTAS_STM_Init();
 800df7c:	f7ff ffba 	bl	800def4 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800df80:	f7ff ffc6 	bl	800df10 <BVOPUS_STM_Init>

  MESH_Init();
 800df84:	f7ff ffbd 	bl	800df02 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800df88:	f002 fa54 	bl	8010434 <SVCCTL_InitCustomSvc>
  
  return;
 800df8c:	bf00      	nop
}
 800df8e:	bd80      	pop	{r7, pc}

0800df90 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800df90:	b480      	push	{r7}
 800df92:	b083      	sub	sp, #12
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800df98:	4b09      	ldr	r3, [pc, #36]	@ (800dfc0 <SVCCTL_RegisterSvcHandler+0x30>)
 800df9a:	7f1b      	ldrb	r3, [r3, #28]
 800df9c:	4619      	mov	r1, r3
 800df9e:	4a08      	ldr	r2, [pc, #32]	@ (800dfc0 <SVCCTL_RegisterSvcHandler+0x30>)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800dfa6:	4b06      	ldr	r3, [pc, #24]	@ (800dfc0 <SVCCTL_RegisterSvcHandler+0x30>)
 800dfa8:	7f1b      	ldrb	r3, [r3, #28]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	b2da      	uxtb	r2, r3
 800dfae:	4b04      	ldr	r3, [pc, #16]	@ (800dfc0 <SVCCTL_RegisterSvcHandler+0x30>)
 800dfb0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800dfb2:	bf00      	nop
}
 800dfb4:	370c      	adds	r7, #12
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfbc:	4770      	bx	lr
 800dfbe:	bf00      	nop
 800dfc0:	2000016c 	.word	0x2000016c

0800dfc4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b086      	sub	sp, #24
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3301      	adds	r3, #1
 800dfd0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800dfd6:	693b      	ldr	r3, [r7, #16]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	2bff      	cmp	r3, #255	@ 0xff
 800dfdc:	d125      	bne.n	800e02a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800dfde:	693b      	ldr	r3, [r7, #16]
 800dfe0:	3302      	adds	r3, #2
 800dfe2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dfee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800dff2:	d118      	bne.n	800e026 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800dff4:	2300      	movs	r3, #0
 800dff6:	757b      	strb	r3, [r7, #21]
 800dff8:	e00d      	b.n	800e016 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800dffa:	7d7b      	ldrb	r3, [r7, #21]
 800dffc:	4a1a      	ldr	r2, [pc, #104]	@ (800e068 <SVCCTL_UserEvtRx+0xa4>)
 800dffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	4798      	blx	r3
 800e006:	4603      	mov	r3, r0
 800e008:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e00a:	7dfb      	ldrb	r3, [r7, #23]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d108      	bne.n	800e022 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e010:	7d7b      	ldrb	r3, [r7, #21]
 800e012:	3301      	adds	r3, #1
 800e014:	757b      	strb	r3, [r7, #21]
 800e016:	4b14      	ldr	r3, [pc, #80]	@ (800e068 <SVCCTL_UserEvtRx+0xa4>)
 800e018:	7f1b      	ldrb	r3, [r3, #28]
 800e01a:	7d7a      	ldrb	r2, [r7, #21]
 800e01c:	429a      	cmp	r2, r3
 800e01e:	d3ec      	bcc.n	800dffa <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e020:	e002      	b.n	800e028 <SVCCTL_UserEvtRx+0x64>
              break;
 800e022:	bf00      	nop
          break;
 800e024:	e000      	b.n	800e028 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e026:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e028:	e000      	b.n	800e02c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e02a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e02c:	7dfb      	ldrb	r3, [r7, #23]
 800e02e:	2b02      	cmp	r3, #2
 800e030:	d00f      	beq.n	800e052 <SVCCTL_UserEvtRx+0x8e>
 800e032:	2b02      	cmp	r3, #2
 800e034:	dc10      	bgt.n	800e058 <SVCCTL_UserEvtRx+0x94>
 800e036:	2b00      	cmp	r3, #0
 800e038:	d002      	beq.n	800e040 <SVCCTL_UserEvtRx+0x7c>
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	d006      	beq.n	800e04c <SVCCTL_UserEvtRx+0x88>
 800e03e:	e00b      	b.n	800e058 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e040:	6878      	ldr	r0, [r7, #4]
 800e042:	f000 fffb 	bl	800f03c <SVCCTL_App_Notification>
 800e046:	4603      	mov	r3, r0
 800e048:	75bb      	strb	r3, [r7, #22]
      break;
 800e04a:	e008      	b.n	800e05e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e04c:	2301      	movs	r3, #1
 800e04e:	75bb      	strb	r3, [r7, #22]
      break;
 800e050:	e005      	b.n	800e05e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e052:	2300      	movs	r3, #0
 800e054:	75bb      	strb	r3, [r7, #22]
      break;
 800e056:	e002      	b.n	800e05e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e058:	2301      	movs	r3, #1
 800e05a:	75bb      	strb	r3, [r7, #22]
      break;
 800e05c:	bf00      	nop
  }

  return (return_status);
 800e05e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e060:	4618      	mov	r0, r3
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	2000016c 	.word	0x2000016c

0800e06c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e074:	f107 030c 	add.w	r3, r7, #12
 800e078:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	212e      	movs	r1, #46	@ 0x2e
 800e084:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800e088:	f000 fae8 	bl	800e65c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e08c:	69fb      	ldr	r3, [r7, #28]
 800e08e:	330b      	adds	r3, #11
 800e090:	78db      	ldrb	r3, [r3, #3]
}
 800e092:	4618      	mov	r0, r3
 800e094:	3720      	adds	r7, #32
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}

0800e09a <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b088      	sub	sp, #32
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0a2:	f107 030c 	add.w	r3, r7, #12
 800e0a6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	210f      	movs	r1, #15
 800e0b2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800e0b6:	f000 fad1 	bl	800e65c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	330b      	adds	r3, #11
 800e0be:	78db      	ldrb	r3, [r3, #3]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0d0:	f107 030c 	add.w	r3, r7, #12
 800e0d4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	687a      	ldr	r2, [r7, #4]
 800e0da:	2110      	movs	r1, #16
 800e0dc:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800e0e0:	f000 fabc 	bl	800e65c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	330b      	adds	r3, #11
 800e0e8:	78db      	ldrb	r3, [r3, #3]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3720      	adds	r7, #32
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
	...

0800e0f4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b08b      	sub	sp, #44	@ 0x2c
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800e100:	2300      	movs	r3, #0
 800e102:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800e104:	2300      	movs	r3, #0
 800e106:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800e10c:	2300      	movs	r3, #0
 800e10e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800e110:	2300      	movs	r3, #0
 800e112:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800e114:	2300      	movs	r3, #0
 800e116:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800e118:	2300      	movs	r3, #0
 800e11a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800e11c:	4b4a      	ldr	r3, [pc, #296]	@ (800e248 <SHCI_GetWirelessFwInfo+0x154>)
 800e11e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e120:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800e124:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e12e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800e136:	68bb      	ldr	r3, [r7, #8]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	4a44      	ldr	r2, [pc, #272]	@ (800e24c <SHCI_GetWirelessFwInfo+0x158>)
 800e13c:	4293      	cmp	r3, r2
 800e13e:	d10f      	bne.n	800e160 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800e140:	68bb      	ldr	r3, [r7, #8]
 800e142:	695b      	ldr	r3, [r3, #20]
 800e144:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800e146:	68bb      	ldr	r3, [r7, #8]
 800e148:	699b      	ldr	r3, [r3, #24]
 800e14a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	69db      	ldr	r3, [r3, #28]
 800e150:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	68db      	ldr	r3, [r3, #12]
 800e156:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800e158:	68bb      	ldr	r3, [r7, #8]
 800e15a:	691b      	ldr	r3, [r3, #16]
 800e15c:	617b      	str	r3, [r7, #20]
 800e15e:	e01a      	b.n	800e196 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800e160:	693b      	ldr	r3, [r7, #16]
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800e168:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800e16c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	695b      	ldr	r3, [r3, #20]
 800e17c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	699b      	ldr	r3, [r3, #24]
 800e184:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	685b      	ldr	r3, [r3, #4]
 800e18c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	689b      	ldr	r3, [r3, #8]
 800e194:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e198:	0e1b      	lsrs	r3, r3, #24
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e1a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1a2:	0c1b      	lsrs	r3, r3, #16
 800e1a4:	b2da      	uxtb	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1ac:	0a1b      	lsrs	r3, r3, #8
 800e1ae:	b2da      	uxtb	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1b6:	091b      	lsrs	r3, r3, #4
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	f003 030f 	and.w	r3, r3, #15
 800e1be:	b2da      	uxtb	r2, r3
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800e1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	f003 030f 	and.w	r3, r3, #15
 800e1cc:	b2da      	uxtb	r2, r3
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e1d2:	6a3b      	ldr	r3, [r7, #32]
 800e1d4:	0e1b      	lsrs	r3, r3, #24
 800e1d6:	b2da      	uxtb	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e1dc:	6a3b      	ldr	r3, [r7, #32]
 800e1de:	0c1b      	lsrs	r3, r3, #16
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800e1e6:	6a3b      	ldr	r3, [r7, #32]
 800e1e8:	0a1b      	lsrs	r3, r3, #8
 800e1ea:	b2da      	uxtb	r2, r3
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e1f0:	6a3b      	ldr	r3, [r7, #32]
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	b2da      	uxtb	r2, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800e200:	69bb      	ldr	r3, [r7, #24]
 800e202:	0e1b      	lsrs	r3, r3, #24
 800e204:	b2da      	uxtb	r2, r3
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800e20a:	69bb      	ldr	r3, [r7, #24]
 800e20c:	0c1b      	lsrs	r3, r3, #16
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800e214:	69bb      	ldr	r3, [r7, #24]
 800e216:	0a1b      	lsrs	r3, r3, #8
 800e218:	b2da      	uxtb	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	0e1b      	lsrs	r3, r3, #24
 800e222:	b2da      	uxtb	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	0c1b      	lsrs	r3, r3, #16
 800e22c:	b2da      	uxtb	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	b2da      	uxtb	r2, r3
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800e23a:	2300      	movs	r3, #0
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	372c      	adds	r7, #44	@ 0x2c
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	58004000 	.word	0x58004000
 800e24c:	a94656b9 	.word	0xa94656b9

0800e250 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	4a08      	ldr	r2, [pc, #32]	@ (800e280 <hci_init+0x30>)
 800e260:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e262:	4a08      	ldr	r2, [pc, #32]	@ (800e284 <hci_init+0x34>)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e268:	4806      	ldr	r0, [pc, #24]	@ (800e284 <hci_init+0x34>)
 800e26a:	f000 f979 	bl	800e560 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f000 f8da 	bl	800e42c <TlInit>

  return;
 800e278:	bf00      	nop
}
 800e27a:	3708      	adds	r7, #8
 800e27c:	46bd      	mov	sp, r7
 800e27e:	bd80      	pop	{r7, pc}
 800e280:	20000878 	.word	0x20000878
 800e284:	20000850 	.word	0x20000850

0800e288 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b084      	sub	sp, #16
 800e28c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e28e:	4822      	ldr	r0, [pc, #136]	@ (800e318 <hci_user_evt_proc+0x90>)
 800e290:	f000 fd5a 	bl	800ed48 <LST_is_empty>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d12b      	bne.n	800e2f2 <hci_user_evt_proc+0x6a>
 800e29a:	4b20      	ldr	r3, [pc, #128]	@ (800e31c <hci_user_evt_proc+0x94>)
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d027      	beq.n	800e2f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e2a2:	f107 030c 	add.w	r3, r7, #12
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	481b      	ldr	r0, [pc, #108]	@ (800e318 <hci_user_evt_proc+0x90>)
 800e2aa:	f000 fddc 	bl	800ee66 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e2ae:	4b1c      	ldr	r3, [pc, #112]	@ (800e320 <hci_user_evt_proc+0x98>)
 800e2b0:	69db      	ldr	r3, [r3, #28]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00c      	beq.n	800e2d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e2ba:	2301      	movs	r3, #1
 800e2bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e2be:	4b18      	ldr	r3, [pc, #96]	@ (800e320 <hci_user_evt_proc+0x98>)
 800e2c0:	69db      	ldr	r3, [r3, #28]
 800e2c2:	1d3a      	adds	r2, r7, #4
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e2c8:	793a      	ldrb	r2, [r7, #4]
 800e2ca:	4b14      	ldr	r3, [pc, #80]	@ (800e31c <hci_user_evt_proc+0x94>)
 800e2cc:	701a      	strb	r2, [r3, #0]
 800e2ce:	e002      	b.n	800e2d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e2d0:	4b12      	ldr	r3, [pc, #72]	@ (800e31c <hci_user_evt_proc+0x94>)
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e2d6:	4b11      	ldr	r3, [pc, #68]	@ (800e31c <hci_user_evt_proc+0x94>)
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d004      	beq.n	800e2e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f000 fc0d 	bl	800eb00 <TL_MM_EvtDone>
 800e2e6:	e004      	b.n	800e2f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	480a      	ldr	r0, [pc, #40]	@ (800e318 <hci_user_evt_proc+0x90>)
 800e2ee:	f000 fd4d 	bl	800ed8c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e2f2:	4809      	ldr	r0, [pc, #36]	@ (800e318 <hci_user_evt_proc+0x90>)
 800e2f4:	f000 fd28 	bl	800ed48 <LST_is_empty>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d107      	bne.n	800e30e <hci_user_evt_proc+0x86>
 800e2fe:	4b07      	ldr	r3, [pc, #28]	@ (800e31c <hci_user_evt_proc+0x94>)
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d003      	beq.n	800e30e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e306:	4804      	ldr	r0, [pc, #16]	@ (800e318 <hci_user_evt_proc+0x90>)
 800e308:	f001 fd46 	bl	800fd98 <hci_notify_asynch_evt>
  }


  return;
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
}
 800e310:	3710      	adds	r7, #16
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	20000194 	.word	0x20000194
 800e31c:	200001a0 	.word	0x200001a0
 800e320:	20000850 	.word	0x20000850

0800e324 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b088      	sub	sp, #32
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
 800e32c:	460b      	mov	r3, r1
 800e32e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e330:	2000      	movs	r0, #0
 800e332:	f000 f8d1 	bl	800e4d8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e336:	2300      	movs	r3, #0
 800e338:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	885b      	ldrh	r3, [r3, #2]
 800e33e:	b21b      	sxth	r3, r3
 800e340:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e344:	b21a      	sxth	r2, r3
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	881b      	ldrh	r3, [r3, #0]
 800e34a:	029b      	lsls	r3, r3, #10
 800e34c:	b21b      	sxth	r3, r3
 800e34e:	4313      	orrs	r3, r2
 800e350:	b21b      	sxth	r3, r3
 800e352:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800e354:	4b33      	ldr	r3, [pc, #204]	@ (800e424 <hci_send_req+0x100>)
 800e356:	2201      	movs	r2, #1
 800e358:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	68db      	ldr	r3, [r3, #12]
 800e35e:	b2d9      	uxtb	r1, r3
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	689a      	ldr	r2, [r3, #8]
 800e364:	8bbb      	ldrh	r3, [r7, #28]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f890 	bl	800e48c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e36c:	e04e      	b.n	800e40c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e36e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e372:	f001 fd28 	bl	800fdc6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e376:	e043      	b.n	800e400 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e378:	f107 030c 	add.w	r3, r7, #12
 800e37c:	4619      	mov	r1, r3
 800e37e:	482a      	ldr	r0, [pc, #168]	@ (800e428 <hci_send_req+0x104>)
 800e380:	f000 fd71 	bl	800ee66 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	7a5b      	ldrb	r3, [r3, #9]
 800e388:	2b0f      	cmp	r3, #15
 800e38a:	d114      	bne.n	800e3b6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	330b      	adds	r3, #11
 800e390:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e392:	693b      	ldr	r3, [r7, #16]
 800e394:	885b      	ldrh	r3, [r3, #2]
 800e396:	b29b      	uxth	r3, r3
 800e398:	8bba      	ldrh	r2, [r7, #28]
 800e39a:	429a      	cmp	r2, r3
 800e39c:	d104      	bne.n	800e3a8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	693a      	ldr	r2, [r7, #16]
 800e3a4:	7812      	ldrb	r2, [r2, #0]
 800e3a6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e3a8:	693b      	ldr	r3, [r7, #16]
 800e3aa:	785b      	ldrb	r3, [r3, #1]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d027      	beq.n	800e400 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	77fb      	strb	r3, [r7, #31]
 800e3b4:	e024      	b.n	800e400 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	330b      	adds	r3, #11
 800e3ba:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e3bc:	69bb      	ldr	r3, [r7, #24]
 800e3be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	8bba      	ldrh	r2, [r7, #28]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d114      	bne.n	800e3f4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	7a9b      	ldrb	r3, [r3, #10]
 800e3ce:	3b03      	subs	r3, #3
 800e3d0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	695a      	ldr	r2, [r3, #20]
 800e3d6:	7dfb      	ldrb	r3, [r7, #23]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	bfa8      	it	ge
 800e3dc:	461a      	movge	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6918      	ldr	r0, [r3, #16]
 800e3e6:	69bb      	ldr	r3, [r7, #24]
 800e3e8:	1cd9      	adds	r1, r3, #3
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	695b      	ldr	r3, [r3, #20]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	f003 f93f 	bl	8011672 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e3f4:	69bb      	ldr	r3, [r7, #24]
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d001      	beq.n	800e400 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e400:	4809      	ldr	r0, [pc, #36]	@ (800e428 <hci_send_req+0x104>)
 800e402:	f000 fca1 	bl	800ed48 <LST_is_empty>
 800e406:	4603      	mov	r3, r0
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d0b5      	beq.n	800e378 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e40c:	7ffb      	ldrb	r3, [r7, #31]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d0ad      	beq.n	800e36e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e412:	2001      	movs	r0, #1
 800e414:	f000 f860 	bl	800e4d8 <NotifyCmdStatus>

  return 0;
 800e418:	2300      	movs	r3, #0
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3720      	adds	r7, #32
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	2000087c 	.word	0x2000087c
 800e428:	20000870 	.word	0x20000870

0800e42c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b086      	sub	sp, #24
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e434:	480f      	ldr	r0, [pc, #60]	@ (800e474 <TlInit+0x48>)
 800e436:	f000 fc77 	bl	800ed28 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e43a:	4a0f      	ldr	r2, [pc, #60]	@ (800e478 <TlInit+0x4c>)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e440:	480e      	ldr	r0, [pc, #56]	@ (800e47c <TlInit+0x50>)
 800e442:	f000 fc71 	bl	800ed28 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e446:	4b0e      	ldr	r3, [pc, #56]	@ (800e480 <TlInit+0x54>)
 800e448:	2201      	movs	r2, #1
 800e44a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e44c:	4b0d      	ldr	r3, [pc, #52]	@ (800e484 <TlInit+0x58>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d00a      	beq.n	800e46a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e458:	4b0b      	ldr	r3, [pc, #44]	@ (800e488 <TlInit+0x5c>)
 800e45a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e45c:	4b09      	ldr	r3, [pc, #36]	@ (800e484 <TlInit+0x58>)
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f107 0208 	add.w	r2, r7, #8
 800e464:	4610      	mov	r0, r2
 800e466:	4798      	blx	r3
  }

  return;
 800e468:	bf00      	nop
 800e46a:	bf00      	nop
}
 800e46c:	3718      	adds	r7, #24
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}
 800e472:	bf00      	nop
 800e474:	20000870 	.word	0x20000870
 800e478:	2000019c 	.word	0x2000019c
 800e47c:	20000194 	.word	0x20000194
 800e480:	200001a0 	.word	0x200001a0
 800e484:	20000850 	.word	0x20000850
 800e488:	0800e519 	.word	0x0800e519

0800e48c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e48c:	b580      	push	{r7, lr}
 800e48e:	b082      	sub	sp, #8
 800e490:	af00      	add	r7, sp, #0
 800e492:	4603      	mov	r3, r0
 800e494:	603a      	str	r2, [r7, #0]
 800e496:	80fb      	strh	r3, [r7, #6]
 800e498:	460b      	mov	r3, r1
 800e49a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e49c:	4b0c      	ldr	r3, [pc, #48]	@ (800e4d0 <SendCmd+0x44>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	88fa      	ldrh	r2, [r7, #6]
 800e4a2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e4a6:	4b0a      	ldr	r3, [pc, #40]	@ (800e4d0 <SendCmd+0x44>)
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	797a      	ldrb	r2, [r7, #5]
 800e4ac:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e4ae:	4b08      	ldr	r3, [pc, #32]	@ (800e4d0 <SendCmd+0x44>)
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	330c      	adds	r3, #12
 800e4b4:	797a      	ldrb	r2, [r7, #5]
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f003 f8da 	bl	8011672 <memcpy>

  hciContext.io.Send(0,0);
 800e4be:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <SendCmd+0x48>)
 800e4c0:	691b      	ldr	r3, [r3, #16]
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	2000      	movs	r0, #0
 800e4c6:	4798      	blx	r3

  return;
 800e4c8:	bf00      	nop
}
 800e4ca:	3708      	adds	r7, #8
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	2000019c 	.word	0x2000019c
 800e4d4:	20000850 	.word	0x20000850

0800e4d8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b082      	sub	sp, #8
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	4603      	mov	r3, r0
 800e4e0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e4e2:	79fb      	ldrb	r3, [r7, #7]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d108      	bne.n	800e4fa <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800e514 <NotifyCmdStatus+0x3c>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d00d      	beq.n	800e50c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e4f0:	4b08      	ldr	r3, [pc, #32]	@ (800e514 <NotifyCmdStatus+0x3c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	2000      	movs	r0, #0
 800e4f6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e4f8:	e008      	b.n	800e50c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e4fa:	4b06      	ldr	r3, [pc, #24]	@ (800e514 <NotifyCmdStatus+0x3c>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d004      	beq.n	800e50c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e502:	4b04      	ldr	r3, [pc, #16]	@ (800e514 <NotifyCmdStatus+0x3c>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2001      	movs	r0, #1
 800e508:	4798      	blx	r3
  return;
 800e50a:	bf00      	nop
 800e50c:	bf00      	nop
}
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20000878 	.word	0x20000878

0800e518 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e518:	b580      	push	{r7, lr}
 800e51a:	b082      	sub	sp, #8
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	7a5b      	ldrb	r3, [r3, #9]
 800e524:	2b0f      	cmp	r3, #15
 800e526:	d003      	beq.n	800e530 <TlEvtReceived+0x18>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	7a5b      	ldrb	r3, [r3, #9]
 800e52c:	2b0e      	cmp	r3, #14
 800e52e:	d107      	bne.n	800e540 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e530:	6879      	ldr	r1, [r7, #4]
 800e532:	4809      	ldr	r0, [pc, #36]	@ (800e558 <TlEvtReceived+0x40>)
 800e534:	f000 fc50 	bl	800edd8 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e538:	2000      	movs	r0, #0
 800e53a:	f001 fc39 	bl	800fdb0 <hci_cmd_resp_release>
 800e53e:	e006      	b.n	800e54e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e540:	6879      	ldr	r1, [r7, #4]
 800e542:	4806      	ldr	r0, [pc, #24]	@ (800e55c <TlEvtReceived+0x44>)
 800e544:	f000 fc48 	bl	800edd8 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e548:	4804      	ldr	r0, [pc, #16]	@ (800e55c <TlEvtReceived+0x44>)
 800e54a:	f001 fc25 	bl	800fd98 <hci_notify_asynch_evt>
  }

  return;
 800e54e:	bf00      	nop
}
 800e550:	3708      	adds	r7, #8
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	20000870 	.word	0x20000870
 800e55c:	20000194 	.word	0x20000194

0800e560 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e560:	b480      	push	{r7}
 800e562:	b083      	sub	sp, #12
 800e564:	af00      	add	r7, sp, #0
 800e566:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	4a05      	ldr	r2, [pc, #20]	@ (800e580 <hci_register_io_bus+0x20>)
 800e56c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	4a04      	ldr	r2, [pc, #16]	@ (800e584 <hci_register_io_bus+0x24>)
 800e572:	611a      	str	r2, [r3, #16]

  return;
 800e574:	bf00      	nop
}
 800e576:	370c      	adds	r7, #12
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr
 800e580:	0800e879 	.word	0x0800e879
 800e584:	0800e8e1 	.word	0x0800e8e1

0800e588 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	685b      	ldr	r3, [r3, #4]
 800e596:	4a08      	ldr	r2, [pc, #32]	@ (800e5b8 <shci_init+0x30>)
 800e598:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e59a:	4a08      	ldr	r2, [pc, #32]	@ (800e5bc <shci_init+0x34>)
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e5a0:	4806      	ldr	r0, [pc, #24]	@ (800e5bc <shci_init+0x34>)
 800e5a2:	f000 f915 	bl	800e7d0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 f898 	bl	800e6e0 <TlInit>

  return;
 800e5b0:	bf00      	nop
}
 800e5b2:	3708      	adds	r7, #8
 800e5b4:	46bd      	mov	sp, r7
 800e5b6:	bd80      	pop	{r7, pc}
 800e5b8:	200008a0 	.word	0x200008a0
 800e5bc:	20000880 	.word	0x20000880

0800e5c0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e5c6:	4822      	ldr	r0, [pc, #136]	@ (800e650 <shci_user_evt_proc+0x90>)
 800e5c8:	f000 fbbe 	bl	800ed48 <LST_is_empty>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d12b      	bne.n	800e62a <shci_user_evt_proc+0x6a>
 800e5d2:	4b20      	ldr	r3, [pc, #128]	@ (800e654 <shci_user_evt_proc+0x94>)
 800e5d4:	781b      	ldrb	r3, [r3, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d027      	beq.n	800e62a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e5da:	f107 030c 	add.w	r3, r7, #12
 800e5de:	4619      	mov	r1, r3
 800e5e0:	481b      	ldr	r0, [pc, #108]	@ (800e650 <shci_user_evt_proc+0x90>)
 800e5e2:	f000 fc40 	bl	800ee66 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e5e6:	4b1c      	ldr	r3, [pc, #112]	@ (800e658 <shci_user_evt_proc+0x98>)
 800e5e8:	69db      	ldr	r3, [r3, #28]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d00c      	beq.n	800e608 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e5f6:	4b18      	ldr	r3, [pc, #96]	@ (800e658 <shci_user_evt_proc+0x98>)
 800e5f8:	69db      	ldr	r3, [r3, #28]
 800e5fa:	1d3a      	adds	r2, r7, #4
 800e5fc:	4610      	mov	r0, r2
 800e5fe:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e600:	793a      	ldrb	r2, [r7, #4]
 800e602:	4b14      	ldr	r3, [pc, #80]	@ (800e654 <shci_user_evt_proc+0x94>)
 800e604:	701a      	strb	r2, [r3, #0]
 800e606:	e002      	b.n	800e60e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e608:	4b12      	ldr	r3, [pc, #72]	@ (800e654 <shci_user_evt_proc+0x94>)
 800e60a:	2201      	movs	r2, #1
 800e60c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e60e:	4b11      	ldr	r3, [pc, #68]	@ (800e654 <shci_user_evt_proc+0x94>)
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d004      	beq.n	800e620 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	4618      	mov	r0, r3
 800e61a:	f000 fa71 	bl	800eb00 <TL_MM_EvtDone>
 800e61e:	e004      	b.n	800e62a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	4619      	mov	r1, r3
 800e624:	480a      	ldr	r0, [pc, #40]	@ (800e650 <shci_user_evt_proc+0x90>)
 800e626:	f000 fbb1 	bl	800ed8c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e62a:	4809      	ldr	r0, [pc, #36]	@ (800e650 <shci_user_evt_proc+0x90>)
 800e62c:	f000 fb8c 	bl	800ed48 <LST_is_empty>
 800e630:	4603      	mov	r3, r0
 800e632:	2b00      	cmp	r3, #0
 800e634:	d107      	bne.n	800e646 <shci_user_evt_proc+0x86>
 800e636:	4b07      	ldr	r3, [pc, #28]	@ (800e654 <shci_user_evt_proc+0x94>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d003      	beq.n	800e646 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e63e:	4804      	ldr	r0, [pc, #16]	@ (800e650 <shci_user_evt_proc+0x90>)
 800e640:	f7f3 fb05 	bl	8001c4e <shci_notify_asynch_evt>
  }


  return;
 800e644:	bf00      	nop
 800e646:	bf00      	nop
}
 800e648:	3710      	adds	r7, #16
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}
 800e64e:	bf00      	nop
 800e650:	200001a4 	.word	0x200001a4
 800e654:	200001b4 	.word	0x200001b4
 800e658:	20000880 	.word	0x20000880

0800e65c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	60ba      	str	r2, [r7, #8]
 800e664:	607b      	str	r3, [r7, #4]
 800e666:	4603      	mov	r3, r0
 800e668:	81fb      	strh	r3, [r7, #14]
 800e66a:	460b      	mov	r3, r1
 800e66c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e66e:	2000      	movs	r0, #0
 800e670:	f000 f868 	bl	800e744 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e674:	4b17      	ldr	r3, [pc, #92]	@ (800e6d4 <shci_send+0x78>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	89fa      	ldrh	r2, [r7, #14]
 800e67a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e67e:	4b15      	ldr	r3, [pc, #84]	@ (800e6d4 <shci_send+0x78>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	7b7a      	ldrb	r2, [r7, #13]
 800e684:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e686:	4b13      	ldr	r3, [pc, #76]	@ (800e6d4 <shci_send+0x78>)
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	330c      	adds	r3, #12
 800e68c:	7b7a      	ldrb	r2, [r7, #13]
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	4618      	mov	r0, r3
 800e692:	f002 ffee 	bl	8011672 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800e696:	4b10      	ldr	r3, [pc, #64]	@ (800e6d8 <shci_send+0x7c>)
 800e698:	2201      	movs	r2, #1
 800e69a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800e69c:	4b0f      	ldr	r3, [pc, #60]	@ (800e6dc <shci_send+0x80>)
 800e69e:	691b      	ldr	r3, [r3, #16]
 800e6a0:	2100      	movs	r1, #0
 800e6a2:	2000      	movs	r0, #0
 800e6a4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e6a6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800e6aa:	f7f3 fae7 	bl	8001c7c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f103 0008 	add.w	r0, r3, #8
 800e6b4:	4b07      	ldr	r3, [pc, #28]	@ (800e6d4 <shci_send+0x78>)
 800e6b6:	6819      	ldr	r1, [r3, #0]
 800e6b8:	4b06      	ldr	r3, [pc, #24]	@ (800e6d4 <shci_send+0x78>)
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	789b      	ldrb	r3, [r3, #2]
 800e6be:	3303      	adds	r3, #3
 800e6c0:	461a      	mov	r2, r3
 800e6c2:	f002 ffd6 	bl	8011672 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	f000 f83c 	bl	800e744 <Cmd_SetStatus>

  return;
 800e6cc:	bf00      	nop
}
 800e6ce:	3710      	adds	r7, #16
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bd80      	pop	{r7, pc}
 800e6d4:	200001b0 	.word	0x200001b0
 800e6d8:	200008a4 	.word	0x200008a4
 800e6dc:	20000880 	.word	0x20000880

0800e6e0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b086      	sub	sp, #24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e6e8:	4a10      	ldr	r2, [pc, #64]	@ (800e72c <TlInit+0x4c>)
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e6ee:	4810      	ldr	r0, [pc, #64]	@ (800e730 <TlInit+0x50>)
 800e6f0:	f000 fb1a 	bl	800ed28 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	f000 f825 	bl	800e744 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e6fa:	4b0e      	ldr	r3, [pc, #56]	@ (800e734 <TlInit+0x54>)
 800e6fc:	2201      	movs	r2, #1
 800e6fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e700:	4b0d      	ldr	r3, [pc, #52]	@ (800e738 <TlInit+0x58>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00c      	beq.n	800e722 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e70c:	4b0b      	ldr	r3, [pc, #44]	@ (800e73c <TlInit+0x5c>)
 800e70e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e710:	4b0b      	ldr	r3, [pc, #44]	@ (800e740 <TlInit+0x60>)
 800e712:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e714:	4b08      	ldr	r3, [pc, #32]	@ (800e738 <TlInit+0x58>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f107 020c 	add.w	r2, r7, #12
 800e71c:	4610      	mov	r0, r2
 800e71e:	4798      	blx	r3
  }

  return;
 800e720:	bf00      	nop
 800e722:	bf00      	nop
}
 800e724:	3718      	adds	r7, #24
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	200001b0 	.word	0x200001b0
 800e730:	200001a4 	.word	0x200001a4
 800e734:	200001b4 	.word	0x200001b4
 800e738:	20000880 	.word	0x20000880
 800e73c:	0800e795 	.word	0x0800e795
 800e740:	0800e7ad 	.word	0x0800e7ad

0800e744 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
 800e74a:	4603      	mov	r3, r0
 800e74c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e74e:	79fb      	ldrb	r3, [r7, #7]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d10b      	bne.n	800e76c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e754:	4b0d      	ldr	r3, [pc, #52]	@ (800e78c <Cmd_SetStatus+0x48>)
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d003      	beq.n	800e764 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e75c:	4b0b      	ldr	r3, [pc, #44]	@ (800e78c <Cmd_SetStatus+0x48>)
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	2000      	movs	r0, #0
 800e762:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e764:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <Cmd_SetStatus+0x4c>)
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e76a:	e00b      	b.n	800e784 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e76c:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <Cmd_SetStatus+0x4c>)
 800e76e:	2201      	movs	r2, #1
 800e770:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e772:	4b06      	ldr	r3, [pc, #24]	@ (800e78c <Cmd_SetStatus+0x48>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	d004      	beq.n	800e784 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e77a:	4b04      	ldr	r3, [pc, #16]	@ (800e78c <Cmd_SetStatus+0x48>)
 800e77c:	681b      	ldr	r3, [r3, #0]
 800e77e:	2001      	movs	r0, #1
 800e780:	4798      	blx	r3
  return;
 800e782:	bf00      	nop
 800e784:	bf00      	nop
}
 800e786:	3708      	adds	r7, #8
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}
 800e78c:	200008a0 	.word	0x200008a0
 800e790:	200001ac 	.word	0x200001ac

0800e794 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e79c:	2000      	movs	r0, #0
 800e79e:	f7f3 fa62 	bl	8001c66 <shci_cmd_resp_release>

  return;
 800e7a2:	bf00      	nop
}
 800e7a4:	3708      	adds	r7, #8
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b082      	sub	sp, #8
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e7b4:	6879      	ldr	r1, [r7, #4]
 800e7b6:	4805      	ldr	r0, [pc, #20]	@ (800e7cc <TlUserEvtReceived+0x20>)
 800e7b8:	f000 fb0e 	bl	800edd8 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e7bc:	4803      	ldr	r0, [pc, #12]	@ (800e7cc <TlUserEvtReceived+0x20>)
 800e7be:	f7f3 fa46 	bl	8001c4e <shci_notify_asynch_evt>

  return;
 800e7c2:	bf00      	nop
}
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	bf00      	nop
 800e7cc:	200001a4 	.word	0x200001a4

0800e7d0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a05      	ldr	r2, [pc, #20]	@ (800e7f0 <shci_register_io_bus+0x20>)
 800e7dc:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4a04      	ldr	r2, [pc, #16]	@ (800e7f4 <shci_register_io_bus+0x24>)
 800e7e2:	611a      	str	r2, [r3, #16]

  return;
 800e7e4:	bf00      	nop
}
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	0800e98d 	.word	0x0800e98d
 800e7f4:	0800e9e1 	.word	0x0800e9e1

0800e7f8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e7fc:	f002 f948 	bl	8010a90 <HW_IPCC_Enable>

  return;
 800e800:	bf00      	nop
}
 800e802:	bd80      	pop	{r7, pc}

0800e804 <TL_Init>:


void TL_Init( void )
{
 800e804:	b580      	push	{r7, lr}
 800e806:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e808:	4b10      	ldr	r3, [pc, #64]	@ (800e84c <TL_Init+0x48>)
 800e80a:	4a11      	ldr	r2, [pc, #68]	@ (800e850 <TL_Init+0x4c>)
 800e80c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e80e:	4b0f      	ldr	r3, [pc, #60]	@ (800e84c <TL_Init+0x48>)
 800e810:	4a10      	ldr	r2, [pc, #64]	@ (800e854 <TL_Init+0x50>)
 800e812:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e814:	4b0d      	ldr	r3, [pc, #52]	@ (800e84c <TL_Init+0x48>)
 800e816:	4a10      	ldr	r2, [pc, #64]	@ (800e858 <TL_Init+0x54>)
 800e818:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e81a:	4b0c      	ldr	r3, [pc, #48]	@ (800e84c <TL_Init+0x48>)
 800e81c:	4a0f      	ldr	r2, [pc, #60]	@ (800e85c <TL_Init+0x58>)
 800e81e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e820:	4b0a      	ldr	r3, [pc, #40]	@ (800e84c <TL_Init+0x48>)
 800e822:	4a0f      	ldr	r2, [pc, #60]	@ (800e860 <TL_Init+0x5c>)
 800e824:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e826:	4b09      	ldr	r3, [pc, #36]	@ (800e84c <TL_Init+0x48>)
 800e828:	4a0e      	ldr	r2, [pc, #56]	@ (800e864 <TL_Init+0x60>)
 800e82a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e82c:	4b07      	ldr	r3, [pc, #28]	@ (800e84c <TL_Init+0x48>)
 800e82e:	4a0e      	ldr	r2, [pc, #56]	@ (800e868 <TL_Init+0x64>)
 800e830:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e832:	4b06      	ldr	r3, [pc, #24]	@ (800e84c <TL_Init+0x48>)
 800e834:	4a0d      	ldr	r2, [pc, #52]	@ (800e86c <TL_Init+0x68>)
 800e836:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e838:	4b04      	ldr	r3, [pc, #16]	@ (800e84c <TL_Init+0x48>)
 800e83a:	4a0d      	ldr	r2, [pc, #52]	@ (800e870 <TL_Init+0x6c>)
 800e83c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e83e:	4b03      	ldr	r3, [pc, #12]	@ (800e84c <TL_Init+0x48>)
 800e840:	4a0c      	ldr	r2, [pc, #48]	@ (800e874 <TL_Init+0x70>)
 800e842:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e844:	f002 f938 	bl	8010ab8 <HW_IPCC_Init>

  return;
 800e848:	bf00      	nop
}
 800e84a:	bd80      	pop	{r7, pc}
 800e84c:	20030000 	.word	0x20030000
 800e850:	20030028 	.word	0x20030028
 800e854:	20030048 	.word	0x20030048
 800e858:	20030058 	.word	0x20030058
 800e85c:	20030068 	.word	0x20030068
 800e860:	20030070 	.word	0x20030070
 800e864:	20030078 	.word	0x20030078
 800e868:	20030080 	.word	0x20030080
 800e86c:	2003009c 	.word	0x2003009c
 800e870:	200300a0 	.word	0x200300a0
 800e874:	200300ac 	.word	0x200300ac

0800e878 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e884:	4811      	ldr	r0, [pc, #68]	@ (800e8cc <TL_BLE_Init+0x54>)
 800e886:	f000 fa4f 	bl	800ed28 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e88a:	4b11      	ldr	r3, [pc, #68]	@ (800e8d0 <TL_BLE_Init+0x58>)
 800e88c:	685b      	ldr	r3, [r3, #4]
 800e88e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	689a      	ldr	r2, [r3, #8]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	68da      	ldr	r2, [r3, #12]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	4a0c      	ldr	r2, [pc, #48]	@ (800e8d4 <TL_BLE_Init+0x5c>)
 800e8a4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	4a08      	ldr	r2, [pc, #32]	@ (800e8cc <TL_BLE_Init+0x54>)
 800e8aa:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e8ac:	f002 f91a 	bl	8010ae4 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4a08      	ldr	r2, [pc, #32]	@ (800e8d8 <TL_BLE_Init+0x60>)
 800e8b6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	4a07      	ldr	r2, [pc, #28]	@ (800e8dc <TL_BLE_Init+0x64>)
 800e8be:	6013      	str	r3, [r2, #0]

  return 0;
 800e8c0:	2300      	movs	r3, #0
}
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
 800e8ca:	bf00      	nop
 800e8cc:	200300c8 	.word	0x200300c8
 800e8d0:	20030000 	.word	0x20030000
 800e8d4:	20030a58 	.word	0x20030a58
 800e8d8:	200008b0 	.word	0x200008b0
 800e8dc:	200008b4 	.word	0x200008b4

0800e8e0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e8e0:	b580      	push	{r7, lr}
 800e8e2:	b082      	sub	sp, #8
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
 800e8e8:	460b      	mov	r3, r1
 800e8ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e8ec:	4b09      	ldr	r3, [pc, #36]	@ (800e914 <TL_BLE_SendCmd+0x34>)
 800e8ee:	685b      	ldr	r3, [r3, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	2201      	movs	r2, #1
 800e8f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e8f6:	4b07      	ldr	r3, [pc, #28]	@ (800e914 <TL_BLE_SendCmd+0x34>)
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	2001      	movs	r0, #1
 800e900:	f000 f96c 	bl	800ebdc <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e904:	f002 f8f8 	bl	8010af8 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e908:	2300      	movs	r3, #0
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3708      	adds	r7, #8
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	20030000 	.word	0x20030000

0800e918 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b082      	sub	sp, #8
 800e91c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e91e:	e01c      	b.n	800e95a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e920:	1d3b      	adds	r3, r7, #4
 800e922:	4619      	mov	r1, r3
 800e924:	4812      	ldr	r0, [pc, #72]	@ (800e970 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e926:	f000 fa9e 	bl	800ee66 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	7a5b      	ldrb	r3, [r3, #9]
 800e92e:	2b0f      	cmp	r3, #15
 800e930:	d003      	beq.n	800e93a <HW_IPCC_BLE_RxEvtNot+0x22>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	7a5b      	ldrb	r3, [r3, #9]
 800e936:	2b0e      	cmp	r3, #14
 800e938:	d105      	bne.n	800e946 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4619      	mov	r1, r3
 800e93e:	2002      	movs	r0, #2
 800e940:	f000 f94c 	bl	800ebdc <OutputDbgTrace>
 800e944:	e004      	b.n	800e950 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	4619      	mov	r1, r3
 800e94a:	2003      	movs	r0, #3
 800e94c:	f000 f946 	bl	800ebdc <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e950:	4b08      	ldr	r3, [pc, #32]	@ (800e974 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	687a      	ldr	r2, [r7, #4]
 800e956:	4610      	mov	r0, r2
 800e958:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e95a:	4805      	ldr	r0, [pc, #20]	@ (800e970 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e95c:	f000 f9f4 	bl	800ed48 <LST_is_empty>
 800e960:	4603      	mov	r3, r0
 800e962:	2b00      	cmp	r3, #0
 800e964:	d0dc      	beq.n	800e920 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e966:	bf00      	nop
}
 800e968:	3708      	adds	r7, #8
 800e96a:	46bd      	mov	sp, r7
 800e96c:	bd80      	pop	{r7, pc}
 800e96e:	bf00      	nop
 800e970:	200300c8 	.word	0x200300c8
 800e974:	200008b0 	.word	0x200008b0

0800e978 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e97c:	4b02      	ldr	r3, [pc, #8]	@ (800e988 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4798      	blx	r3

  return;
 800e982:	bf00      	nop
}
 800e984:	bd80      	pop	{r7, pc}
 800e986:	bf00      	nop
 800e988:	200008b4 	.word	0x200008b4

0800e98c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b084      	sub	sp, #16
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e998:	480d      	ldr	r0, [pc, #52]	@ (800e9d0 <TL_SYS_Init+0x44>)
 800e99a:	f000 f9c5 	bl	800ed28 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e99e:	4b0d      	ldr	r3, [pc, #52]	@ (800e9d4 <TL_SYS_Init+0x48>)
 800e9a0:	68db      	ldr	r3, [r3, #12]
 800e9a2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	689a      	ldr	r2, [r3, #8]
 800e9a8:	68bb      	ldr	r3, [r7, #8]
 800e9aa:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	4a08      	ldr	r2, [pc, #32]	@ (800e9d0 <TL_SYS_Init+0x44>)
 800e9b0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e9b2:	f002 f8c3 	bl	8010b3c <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a07      	ldr	r2, [pc, #28]	@ (800e9d8 <TL_SYS_Init+0x4c>)
 800e9bc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	4a06      	ldr	r2, [pc, #24]	@ (800e9dc <TL_SYS_Init+0x50>)
 800e9c4:	6013      	str	r3, [r2, #0]

  return 0;
 800e9c6:	2300      	movs	r3, #0
}
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	200300d0 	.word	0x200300d0
 800e9d4:	20030000 	.word	0x20030000
 800e9d8:	200008b8 	.word	0x200008b8
 800e9dc:	200008bc 	.word	0x200008bc

0800e9e0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	460b      	mov	r3, r1
 800e9ea:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e9ec:	4b09      	ldr	r3, [pc, #36]	@ (800ea14 <TL_SYS_SendCmd+0x34>)
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	2210      	movs	r2, #16
 800e9f4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e9f6:	4b07      	ldr	r3, [pc, #28]	@ (800ea14 <TL_SYS_SendCmd+0x34>)
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4619      	mov	r1, r3
 800e9fe:	2004      	movs	r0, #4
 800ea00:	f000 f8ec 	bl	800ebdc <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800ea04:	f002 f8a4 	bl	8010b50 <HW_IPCC_SYS_SendCmd>

  return 0;
 800ea08:	2300      	movs	r3, #0
}
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	20030000 	.word	0x20030000

0800ea18 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea1c:	4b07      	ldr	r3, [pc, #28]	@ (800ea3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea1e:	68db      	ldr	r3, [r3, #12]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	4619      	mov	r1, r3
 800ea24:	2005      	movs	r0, #5
 800ea26:	f000 f8d9 	bl	800ebdc <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800ea2a:	4b05      	ldr	r3, [pc, #20]	@ (800ea40 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	4a03      	ldr	r2, [pc, #12]	@ (800ea3c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800ea30:	68d2      	ldr	r2, [r2, #12]
 800ea32:	6812      	ldr	r2, [r2, #0]
 800ea34:	4610      	mov	r0, r2
 800ea36:	4798      	blx	r3

  return;
 800ea38:	bf00      	nop
}
 800ea3a:	bd80      	pop	{r7, pc}
 800ea3c:	20030000 	.word	0x20030000
 800ea40:	200008b8 	.word	0x200008b8

0800ea44 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b082      	sub	sp, #8
 800ea48:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea4a:	e00e      	b.n	800ea6a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800ea4c:	1d3b      	adds	r3, r7, #4
 800ea4e:	4619      	mov	r1, r3
 800ea50:	480b      	ldr	r0, [pc, #44]	@ (800ea80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea52:	f000 fa08 	bl	800ee66 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4619      	mov	r1, r3
 800ea5a:	2006      	movs	r0, #6
 800ea5c:	f000 f8be 	bl	800ebdc <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800ea60:	4b08      	ldr	r3, [pc, #32]	@ (800ea84 <HW_IPCC_SYS_EvtNot+0x40>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	687a      	ldr	r2, [r7, #4]
 800ea66:	4610      	mov	r0, r2
 800ea68:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800ea6a:	4805      	ldr	r0, [pc, #20]	@ (800ea80 <HW_IPCC_SYS_EvtNot+0x3c>)
 800ea6c:	f000 f96c 	bl	800ed48 <LST_is_empty>
 800ea70:	4603      	mov	r3, r0
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0ea      	beq.n	800ea4c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800ea76:	bf00      	nop
}
 800ea78:	3708      	adds	r7, #8
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
 800ea7e:	bf00      	nop
 800ea80:	200300d0 	.word	0x200300d0
 800ea84:	200008bc 	.word	0x200008bc

0800ea88 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800ea90:	4817      	ldr	r0, [pc, #92]	@ (800eaf0 <TL_MM_Init+0x68>)
 800ea92:	f000 f949 	bl	800ed28 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800ea96:	4817      	ldr	r0, [pc, #92]	@ (800eaf4 <TL_MM_Init+0x6c>)
 800ea98:	f000 f946 	bl	800ed28 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800ea9c:	4b16      	ldr	r3, [pc, #88]	@ (800eaf8 <TL_MM_Init+0x70>)
 800ea9e:	691b      	ldr	r3, [r3, #16]
 800eaa0:	4a16      	ldr	r2, [pc, #88]	@ (800eafc <TL_MM_Init+0x74>)
 800eaa2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800eaa4:	4b15      	ldr	r3, [pc, #84]	@ (800eafc <TL_MM_Init+0x74>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	687a      	ldr	r2, [r7, #4]
 800eaaa:	6892      	ldr	r2, [r2, #8]
 800eaac:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800eaae:	4b13      	ldr	r3, [pc, #76]	@ (800eafc <TL_MM_Init+0x74>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	68d2      	ldr	r2, [r2, #12]
 800eab6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800eab8:	4b10      	ldr	r3, [pc, #64]	@ (800eafc <TL_MM_Init+0x74>)
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	4a0c      	ldr	r2, [pc, #48]	@ (800eaf0 <TL_MM_Init+0x68>)
 800eabe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800eac0:	4b0e      	ldr	r3, [pc, #56]	@ (800eafc <TL_MM_Init+0x74>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	687a      	ldr	r2, [r7, #4]
 800eac6:	6812      	ldr	r2, [r2, #0]
 800eac8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800eaca:	4b0c      	ldr	r3, [pc, #48]	@ (800eafc <TL_MM_Init+0x74>)
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	6852      	ldr	r2, [r2, #4]
 800ead2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800ead4:	4b09      	ldr	r3, [pc, #36]	@ (800eafc <TL_MM_Init+0x74>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	687a      	ldr	r2, [r7, #4]
 800eada:	6912      	ldr	r2, [r2, #16]
 800eadc:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800eade:	4b07      	ldr	r3, [pc, #28]	@ (800eafc <TL_MM_Init+0x74>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	687a      	ldr	r2, [r7, #4]
 800eae4:	6952      	ldr	r2, [r2, #20]
 800eae6:	619a      	str	r2, [r3, #24]

  return;
 800eae8:	bf00      	nop
}
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}
 800eaf0:	200300b8 	.word	0x200300b8
 800eaf4:	200008a8 	.word	0x200008a8
 800eaf8:	20030000 	.word	0x20030000
 800eafc:	200008c0 	.word	0x200008c0

0800eb00 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800eb08:	6879      	ldr	r1, [r7, #4]
 800eb0a:	4807      	ldr	r0, [pc, #28]	@ (800eb28 <TL_MM_EvtDone+0x28>)
 800eb0c:	f000 f964 	bl	800edd8 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800eb10:	6879      	ldr	r1, [r7, #4]
 800eb12:	2000      	movs	r0, #0
 800eb14:	f000 f862 	bl	800ebdc <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800eb18:	4804      	ldr	r0, [pc, #16]	@ (800eb2c <TL_MM_EvtDone+0x2c>)
 800eb1a:	f002 f83f 	bl	8010b9c <HW_IPCC_MM_SendFreeBuf>

  return;
 800eb1e:	bf00      	nop
}
 800eb20:	3708      	adds	r7, #8
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	200008a8 	.word	0x200008a8
 800eb2c:	0800eb31 	.word	0x0800eb31

0800eb30 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb36:	e00c      	b.n	800eb52 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800eb38:	1d3b      	adds	r3, r7, #4
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	480a      	ldr	r0, [pc, #40]	@ (800eb68 <SendFreeBuf+0x38>)
 800eb3e:	f000 f992 	bl	800ee66 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800eb42:	4b0a      	ldr	r3, [pc, #40]	@ (800eb6c <SendFreeBuf+0x3c>)
 800eb44:	691b      	ldr	r3, [r3, #16]
 800eb46:	691b      	ldr	r3, [r3, #16]
 800eb48:	687a      	ldr	r2, [r7, #4]
 800eb4a:	4611      	mov	r1, r2
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	f000 f943 	bl	800edd8 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800eb52:	4805      	ldr	r0, [pc, #20]	@ (800eb68 <SendFreeBuf+0x38>)
 800eb54:	f000 f8f8 	bl	800ed48 <LST_is_empty>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d0ec      	beq.n	800eb38 <SendFreeBuf+0x8>
  }

  return;
 800eb5e:	bf00      	nop
}
 800eb60:	3708      	adds	r7, #8
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	200008a8 	.word	0x200008a8
 800eb6c:	20030000 	.word	0x20030000

0800eb70 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800eb74:	4805      	ldr	r0, [pc, #20]	@ (800eb8c <TL_TRACES_Init+0x1c>)
 800eb76:	f000 f8d7 	bl	800ed28 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800eb7a:	4b05      	ldr	r3, [pc, #20]	@ (800eb90 <TL_TRACES_Init+0x20>)
 800eb7c:	695b      	ldr	r3, [r3, #20]
 800eb7e:	4a03      	ldr	r2, [pc, #12]	@ (800eb8c <TL_TRACES_Init+0x1c>)
 800eb80:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800eb82:	f002 f841 	bl	8010c08 <HW_IPCC_TRACES_Init>

  return;
 800eb86:	bf00      	nop
}
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	200300c0 	.word	0x200300c0
 800eb90:	20030000 	.word	0x20030000

0800eb94 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800eb9a:	e008      	b.n	800ebae <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800eb9c:	1d3b      	adds	r3, r7, #4
 800eb9e:	4619      	mov	r1, r3
 800eba0:	4808      	ldr	r0, [pc, #32]	@ (800ebc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800eba2:	f000 f960 	bl	800ee66 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f000 f80d 	bl	800ebc8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ebae:	4805      	ldr	r0, [pc, #20]	@ (800ebc4 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ebb0:	f000 f8ca 	bl	800ed48 <LST_is_empty>
 800ebb4:	4603      	mov	r3, r0
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d0f0      	beq.n	800eb9c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800ebba:	bf00      	nop
}
 800ebbc:	3708      	adds	r7, #8
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}
 800ebc2:	bf00      	nop
 800ebc4:	200300c0 	.word	0x200300c0

0800ebc8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800ebd0:	bf00      	nop
 800ebd2:	370c      	adds	r7, #12
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebda:	4770      	bx	lr

0800ebdc <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b085      	sub	sp, #20
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	6039      	str	r1, [r7, #0]
 800ebe6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ebe8:	79fb      	ldrb	r3, [r7, #7]
 800ebea:	2b06      	cmp	r3, #6
 800ebec:	d845      	bhi.n	800ec7a <OutputDbgTrace+0x9e>
 800ebee:	a201      	add	r2, pc, #4	@ (adr r2, 800ebf4 <OutputDbgTrace+0x18>)
 800ebf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebf4:	0800ec11 	.word	0x0800ec11
 800ebf8:	0800ec35 	.word	0x0800ec35
 800ebfc:	0800ec3b 	.word	0x0800ec3b
 800ec00:	0800ec4f 	.word	0x0800ec4f
 800ec04:	0800ec5b 	.word	0x0800ec5b
 800ec08:	0800ec61 	.word	0x0800ec61
 800ec0c:	0800ec6f 	.word	0x0800ec6f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	7a5b      	ldrb	r3, [r3, #9]
 800ec18:	2bff      	cmp	r3, #255	@ 0xff
 800ec1a:	d005      	beq.n	800ec28 <OutputDbgTrace+0x4c>
 800ec1c:	2bff      	cmp	r3, #255	@ 0xff
 800ec1e:	dc05      	bgt.n	800ec2c <OutputDbgTrace+0x50>
 800ec20:	2b0e      	cmp	r3, #14
 800ec22:	d005      	beq.n	800ec30 <OutputDbgTrace+0x54>
 800ec24:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800ec26:	e001      	b.n	800ec2c <OutputDbgTrace+0x50>
          break;
 800ec28:	bf00      	nop
 800ec2a:	e027      	b.n	800ec7c <OutputDbgTrace+0xa0>
          break;
 800ec2c:	bf00      	nop
 800ec2e:	e025      	b.n	800ec7c <OutputDbgTrace+0xa0>
          break;
 800ec30:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800ec32:	e023      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec34:	683b      	ldr	r3, [r7, #0]
 800ec36:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec38:	e020      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	7a5b      	ldrb	r3, [r3, #9]
 800ec42:	2b0e      	cmp	r3, #14
 800ec44:	d001      	beq.n	800ec4a <OutputDbgTrace+0x6e>
 800ec46:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec48:	e000      	b.n	800ec4c <OutputDbgTrace+0x70>
          break;
 800ec4a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec4c:	e016      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec4e:	683b      	ldr	r3, [r7, #0]
 800ec50:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	7a5b      	ldrb	r3, [r3, #9]
 800ec56:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec58:	e010      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800ec5e:	e00d      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec60:	683b      	ldr	r3, [r7, #0]
 800ec62:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	7a5b      	ldrb	r3, [r3, #9]
 800ec68:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800ec6a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec6c:	e006      	b.n	800ec7c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	7a5b      	ldrb	r3, [r3, #9]
 800ec76:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800ec78:	e000      	b.n	800ec7c <OutputDbgTrace+0xa0>

    default:
      break;
 800ec7a:	bf00      	nop
  }

  return;
 800ec7c:	bf00      	nop
}
 800ec7e:	3714      	adds	r7, #20
 800ec80:	46bd      	mov	sp, r7
 800ec82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec86:	4770      	bx	lr

0800ec88 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800ec94:	215c      	movs	r1, #92	@ 0x5c
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f002 fc62 	bl	8011560 <strrchr>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d007      	beq.n	800ecb2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800eca2:	215c      	movs	r1, #92	@ 0x5c
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f002 fc5b 	bl	8011560 <strrchr>
 800ecaa:	4603      	mov	r3, r0
 800ecac:	3301      	adds	r3, #1
 800ecae:	60fb      	str	r3, [r7, #12]
 800ecb0:	e00d      	b.n	800ecce <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800ecb2:	212f      	movs	r1, #47	@ 0x2f
 800ecb4:	6878      	ldr	r0, [r7, #4]
 800ecb6:	f002 fc53 	bl	8011560 <strrchr>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d006      	beq.n	800ecce <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800ecc0:	212f      	movs	r1, #47	@ 0x2f
 800ecc2:	6878      	ldr	r0, [r7, #4]
 800ecc4:	f002 fc4c 	bl	8011560 <strrchr>
 800ecc8:	4603      	mov	r3, r0
 800ecca:	3301      	adds	r3, #1
 800eccc:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800ecce:	68fb      	ldr	r3, [r7, #12]
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3710      	adds	r7, #16
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ecd8:	b480      	push	{r7}
 800ecda:	b085      	sub	sp, #20
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	4603      	mov	r3, r0
 800ece0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ece2:	4b0f      	ldr	r3, [pc, #60]	@ (800ed20 <OTP_Read+0x48>)
 800ece4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ece6:	e002      	b.n	800ecee <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	3b08      	subs	r3, #8
 800ecec:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	3307      	adds	r3, #7
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	79fa      	ldrb	r2, [r7, #7]
 800ecf6:	429a      	cmp	r2, r3
 800ecf8:	d003      	beq.n	800ed02 <OTP_Read+0x2a>
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	4a09      	ldr	r2, [pc, #36]	@ (800ed24 <OTP_Read+0x4c>)
 800ecfe:	4293      	cmp	r3, r2
 800ed00:	d1f2      	bne.n	800ece8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	3307      	adds	r3, #7
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	79fa      	ldrb	r2, [r7, #7]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d001      	beq.n	800ed12 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ed0e:	2300      	movs	r3, #0
 800ed10:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ed12:	68fb      	ldr	r3, [r7, #12]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3714      	adds	r7, #20
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1e:	4770      	bx	lr
 800ed20:	1fff73f8 	.word	0x1fff73f8
 800ed24:	1fff7000 	.word	0x1fff7000

0800ed28 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	687a      	ldr	r2, [r7, #4]
 800ed34:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	605a      	str	r2, [r3, #4]
}
 800ed3c:	bf00      	nop
 800ed3e:	370c      	adds	r7, #12
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr

0800ed48 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ed48:	b480      	push	{r7}
 800ed4a:	b087      	sub	sp, #28
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed50:	f3ef 8310 	mrs	r3, PRIMASK
 800ed54:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed56:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ed5a:	b672      	cpsid	i
}
 800ed5c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d102      	bne.n	800ed6e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800ed68:	2301      	movs	r3, #1
 800ed6a:	75fb      	strb	r3, [r7, #23]
 800ed6c:	e001      	b.n	800ed72 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	75fb      	strb	r3, [r7, #23]
 800ed72:	693b      	ldr	r3, [r7, #16]
 800ed74:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed76:	68bb      	ldr	r3, [r7, #8]
 800ed78:	f383 8810 	msr	PRIMASK, r3
}
 800ed7c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800ed7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	371c      	adds	r7, #28
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b087      	sub	sp, #28
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed96:	f3ef 8310 	mrs	r3, PRIMASK
 800ed9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ed9c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ed9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eda0:	b672      	cpsid	i
}
 800eda2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	687a      	ldr	r2, [r7, #4]
 800edb0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	683a      	ldr	r2, [r7, #0]
 800edb6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	683a      	ldr	r2, [r7, #0]
 800edbe:	605a      	str	r2, [r3, #4]
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	f383 8810 	msr	PRIMASK, r3
}
 800edca:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800edcc:	bf00      	nop
 800edce:	371c      	adds	r7, #28
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800edd8:	b480      	push	{r7}
 800edda:	b087      	sub	sp, #28
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
 800ede0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede2:	f3ef 8310 	mrs	r3, PRIMASK
 800ede6:	60fb      	str	r3, [r7, #12]
  return(result);
 800ede8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800edea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800edec:	b672      	cpsid	i
}
 800edee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	687a      	ldr	r2, [r7, #4]
 800edf4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	685a      	ldr	r2, [r3, #4]
 800edfa:	683b      	ldr	r3, [r7, #0]
 800edfc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	683a      	ldr	r2, [r7, #0]
 800ee02:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	685b      	ldr	r3, [r3, #4]
 800ee08:	683a      	ldr	r2, [r7, #0]
 800ee0a:	601a      	str	r2, [r3, #0]
 800ee0c:	697b      	ldr	r3, [r7, #20]
 800ee0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	f383 8810 	msr	PRIMASK, r3
}
 800ee16:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee18:	bf00      	nop
 800ee1a:	371c      	adds	r7, #28
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800ee24:	b480      	push	{r7}
 800ee26:	b087      	sub	sp, #28
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee2c:	f3ef 8310 	mrs	r3, PRIMASK
 800ee30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee32:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee36:	b672      	cpsid	i
}
 800ee38:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	685b      	ldr	r3, [r3, #4]
 800ee3e:	687a      	ldr	r2, [r7, #4]
 800ee40:	6812      	ldr	r2, [r2, #0]
 800ee42:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6852      	ldr	r2, [r2, #4]
 800ee4c:	605a      	str	r2, [r3, #4]
 800ee4e:	697b      	ldr	r3, [r7, #20]
 800ee50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee52:	693b      	ldr	r3, [r7, #16]
 800ee54:	f383 8810 	msr	PRIMASK, r3
}
 800ee58:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee5a:	bf00      	nop
 800ee5c:	371c      	adds	r7, #28
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr

0800ee66 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b086      	sub	sp, #24
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee70:	f3ef 8310 	mrs	r3, PRIMASK
 800ee74:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee76:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800ee78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ee7a:	b672      	cpsid	i
}
 800ee7c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7ff ffca 	bl	800ee24 <LST_remove_node>
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	f383 8810 	msr	PRIMASK, r3
}
 800ee9a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800ee9c:	bf00      	nop
 800ee9e:	3718      	adds	r7, #24
 800eea0:	46bd      	mov	sp, r7
 800eea2:	bd80      	pop	{r7, pc}

0800eea4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800eea4:	b480      	push	{r7}
 800eea6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800eea8:	4b03      	ldr	r3, [pc, #12]	@ (800eeb8 <LL_FLASH_GetUDN+0x14>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	1fff7580 	.word	0x1fff7580

0800eebc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800eebc:	b480      	push	{r7}
 800eebe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800eec0:	4b03      	ldr	r3, [pc, #12]	@ (800eed0 <LL_FLASH_GetDeviceID+0x14>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	b2db      	uxtb	r3, r3
}
 800eec6:	4618      	mov	r0, r3
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	1fff7584 	.word	0x1fff7584

0800eed4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800eed4:	b480      	push	{r7}
 800eed6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800eed8:	4b03      	ldr	r3, [pc, #12]	@ (800eee8 <LL_FLASH_GetSTCompanyID+0x14>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	0a1b      	lsrs	r3, r3, #8
}
 800eede:	4618      	mov	r0, r3
 800eee0:	46bd      	mov	sp, r7
 800eee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee6:	4770      	bx	lr
 800eee8:	1fff7584 	.word	0x1fff7584

0800eeec <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800eeec:	b5b0      	push	{r4, r5, r7, lr}
 800eeee:	b090      	sub	sp, #64	@ 0x40
 800eef0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800eef2:	2392      	movs	r3, #146	@ 0x92
 800eef4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800eef8:	4b45      	ldr	r3, [pc, #276]	@ (800f010 <APP_BLE_Init+0x124>)
 800eefa:	1d3c      	adds	r4, r7, #4
 800eefc:	461d      	mov	r5, r3
 800eefe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ef08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ef0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ef0e:	c403      	stmia	r4!, {r0, r1}
 800ef10:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800ef12:	f000 fb85 	bl	800f620 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800ef16:	2101      	movs	r1, #1
 800ef18:	2002      	movs	r0, #2
 800ef1a:	f001 fe9d 	bl	8010c58 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800ef1e:	4a3d      	ldr	r2, [pc, #244]	@ (800f014 <APP_BLE_Init+0x128>)
 800ef20:	2100      	movs	r1, #0
 800ef22:	2002      	movs	r0, #2
 800ef24:	f001 ffc4 	bl	8010eb0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800ef28:	1d3b      	adds	r3, r7, #4
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7ff f89e 	bl	800e06c <SHCI_C2_BLE_Init>
 800ef30:	4603      	mov	r3, r0
 800ef32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800ef36:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d012      	beq.n	800ef64 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800ef3e:	4836      	ldr	r0, [pc, #216]	@ (800f018 <APP_BLE_Init+0x12c>)
 800ef40:	f7ff fea2 	bl	800ec88 <DbgTraceGetFileName>
 800ef44:	4601      	mov	r1, r0
 800ef46:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800ef4a:	4a34      	ldr	r2, [pc, #208]	@ (800f01c <APP_BLE_Init+0x130>)
 800ef4c:	4834      	ldr	r0, [pc, #208]	@ (800f020 <APP_BLE_Init+0x134>)
 800ef4e:	f002 f9af 	bl	80112b0 <iprintf>
 800ef52:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800ef56:	4619      	mov	r1, r3
 800ef58:	4832      	ldr	r0, [pc, #200]	@ (800f024 <APP_BLE_Init+0x138>)
 800ef5a:	f002 f9a9 	bl	80112b0 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800ef5e:	f7f3 ff11 	bl	8002d84 <Error_Handler>
 800ef62:	e00c      	b.n	800ef7e <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800ef64:	482c      	ldr	r0, [pc, #176]	@ (800f018 <APP_BLE_Init+0x12c>)
 800ef66:	f7ff fe8f 	bl	800ec88 <DbgTraceGetFileName>
 800ef6a:	4601      	mov	r1, r0
 800ef6c:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800ef70:	4a2a      	ldr	r2, [pc, #168]	@ (800f01c <APP_BLE_Init+0x130>)
 800ef72:	482b      	ldr	r0, [pc, #172]	@ (800f020 <APP_BLE_Init+0x134>)
 800ef74:	f002 f99c 	bl	80112b0 <iprintf>
 800ef78:	482b      	ldr	r0, [pc, #172]	@ (800f028 <APP_BLE_Init+0x13c>)
 800ef7a:	f002 f999 	bl	80112b0 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800ef7e:	f000 fb65 	bl	800f64c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800ef82:	f7fe ffcd 	bl	800df20 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800ef86:	4b29      	ldr	r3, [pc, #164]	@ (800f02c <APP_BLE_Init+0x140>)
 800ef88:	2200      	movs	r2, #0
 800ef8a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800ef8e:	4b27      	ldr	r3, [pc, #156]	@ (800f02c <APP_BLE_Init+0x140>)
 800ef90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ef94:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800ef96:	4a26      	ldr	r2, [pc, #152]	@ (800f030 <APP_BLE_Init+0x144>)
 800ef98:	2100      	movs	r1, #0
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	f001 ff88 	bl	8010eb0 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800efa0:	2006      	movs	r0, #6
 800efa2:	f7fe fe30 	bl	800dc06 <aci_hal_set_radio_activity_mask>
 800efa6:	4603      	mov	r3, r0
 800efa8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800efac:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d010      	beq.n	800efd6 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800efb4:	4818      	ldr	r0, [pc, #96]	@ (800f018 <APP_BLE_Init+0x12c>)
 800efb6:	f7ff fe67 	bl	800ec88 <DbgTraceGetFileName>
 800efba:	4601      	mov	r1, r0
 800efbc:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800efc0:	4a16      	ldr	r2, [pc, #88]	@ (800f01c <APP_BLE_Init+0x130>)
 800efc2:	4817      	ldr	r0, [pc, #92]	@ (800f020 <APP_BLE_Init+0x134>)
 800efc4:	f002 f974 	bl	80112b0 <iprintf>
 800efc8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800efcc:	4619      	mov	r1, r3
 800efce:	4819      	ldr	r0, [pc, #100]	@ (800f034 <APP_BLE_Init+0x148>)
 800efd0:	f002 f96e 	bl	80112b0 <iprintf>
 800efd4:	e00c      	b.n	800eff0 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800efd6:	4810      	ldr	r0, [pc, #64]	@ (800f018 <APP_BLE_Init+0x12c>)
 800efd8:	f7ff fe56 	bl	800ec88 <DbgTraceGetFileName>
 800efdc:	4601      	mov	r1, r0
 800efde:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800efe2:	4a0e      	ldr	r2, [pc, #56]	@ (800f01c <APP_BLE_Init+0x130>)
 800efe4:	480e      	ldr	r0, [pc, #56]	@ (800f020 <APP_BLE_Init+0x134>)
 800efe6:	f002 f963 	bl	80112b0 <iprintf>
 800efea:	4813      	ldr	r0, [pc, #76]	@ (800f038 <APP_BLE_Init+0x14c>)
 800efec:	f002 f960 	bl	80112b0 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800eff0:	f000 ff74 	bl	800fedc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800eff4:	4b0d      	ldr	r3, [pc, #52]	@ (800f02c <APP_BLE_Init+0x140>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800effa:	4b0c      	ldr	r3, [pc, #48]	@ (800f02c <APP_BLE_Init+0x140>)
 800effc:	2200      	movs	r2, #0
 800effe:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800f000:	2001      	movs	r0, #1
 800f002:	f000 fdb7 	bl	800fb74 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800f006:	bf00      	nop
}
 800f008:	3740      	adds	r7, #64	@ 0x40
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bdb0      	pop	{r4, r5, r7, pc}
 800f00e:	bf00      	nop
 800f010:	08012abc 	.word	0x08012abc
 800f014:	0800e289 	.word	0x0800e289
 800f018:	080129b0 	.word	0x080129b0
 800f01c:	08013d44 	.word	0x08013d44
 800f020:	080129cc 	.word	0x080129cc
 800f024:	080129e0 	.word	0x080129e0
 800f028:	08012a18 	.word	0x08012a18
 800f02c:	200008cc 	.word	0x200008cc
 800f030:	0800fcf9 	.word	0x0800fcf9
 800f034:	08012a40 	.word	0x08012a40
 800f038:	08012a84 	.word	0x08012a84

0800f03c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800f03c:	b5b0      	push	{r4, r5, r7, lr}
 800f03e:	b08e      	sub	sp, #56	@ 0x38
 800f040:	af04      	add	r7, sp, #16
 800f042:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800f044:	2392      	movs	r3, #146	@ 0x92
 800f046:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	3301      	adds	r3, #1
 800f04e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800f050:	6a3b      	ldr	r3, [r7, #32]
 800f052:	781b      	ldrb	r3, [r3, #0]
 800f054:	2bff      	cmp	r3, #255	@ 0xff
 800f056:	f000 811d 	beq.w	800f294 <SVCCTL_App_Notification+0x258>
 800f05a:	2bff      	cmp	r3, #255	@ 0xff
 800f05c:	f300 8286 	bgt.w	800f56c <SVCCTL_App_Notification+0x530>
 800f060:	2b05      	cmp	r3, #5
 800f062:	d002      	beq.n	800f06a <SVCCTL_App_Notification+0x2e>
 800f064:	2b3e      	cmp	r3, #62	@ 0x3e
 800f066:	d042      	beq.n	800f0ee <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800f068:	e280      	b.n	800f56c <SVCCTL_App_Notification+0x530>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800f06a:	6a3b      	ldr	r3, [r7, #32]
 800f06c:	3302      	adds	r3, #2
 800f06e:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f076:	b29a      	uxth	r2, r3
 800f078:	4bb6      	ldr	r3, [pc, #728]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f07a:	8adb      	ldrh	r3, [r3, #22]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d128      	bne.n	800f0d2 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800f080:	4bb4      	ldr	r3, [pc, #720]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f082:	2200      	movs	r2, #0
 800f084:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800f086:	4bb3      	ldr	r3, [pc, #716]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f088:	2200      	movs	r2, #0
 800f08a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800f08e:	48b2      	ldr	r0, [pc, #712]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f090:	f7ff fdfa 	bl	800ec88 <DbgTraceGetFileName>
 800f094:	4601      	mov	r1, r0
 800f096:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800f09a:	4ab0      	ldr	r2, [pc, #704]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f09c:	48b0      	ldr	r0, [pc, #704]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f09e:	f002 f907 	bl	80112b0 <iprintf>
 800f0a2:	48b0      	ldr	r0, [pc, #704]	@ (800f364 <SVCCTL_App_Notification+0x328>)
 800f0a4:	f002 f974 	bl	8011390 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800f0a8:	48ab      	ldr	r0, [pc, #684]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f0aa:	f7ff fded 	bl	800ec88 <DbgTraceGetFileName>
 800f0ae:	4601      	mov	r1, r0
 800f0b0:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800f0b4:	4aa9      	ldr	r2, [pc, #676]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f0b6:	48aa      	ldr	r0, [pc, #680]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f0b8:	f002 f8fa 	bl	80112b0 <iprintf>
 800f0bc:	68bb      	ldr	r3, [r7, #8]
 800f0be:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	78db      	ldrb	r3, [r3, #3]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	48a6      	ldr	r0, [pc, #664]	@ (800f368 <SVCCTL_App_Notification+0x32c>)
 800f0ce:	f002 f8ef 	bl	80112b0 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800f0d2:	2001      	movs	r0, #1
 800f0d4:	f000 fd4e 	bl	800fb74 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800f0d8:	4ba4      	ldr	r3, [pc, #656]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f0da:	2201      	movs	r2, #1
 800f0dc:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f0de:	4b9d      	ldr	r3, [pc, #628]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f0e0:	8ada      	ldrh	r2, [r3, #22]
 800f0e2:	4ba2      	ldr	r3, [pc, #648]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f0e4:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800f0e6:	48a1      	ldr	r0, [pc, #644]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f0e8:	f000 fee4 	bl	800feb4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800f0ec:	e241      	b.n	800f572 <SVCCTL_App_Notification+0x536>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800f0ee:	6a3b      	ldr	r3, [r7, #32]
 800f0f0:	3302      	adds	r3, #2
 800f0f2:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800f0f4:	697b      	ldr	r3, [r7, #20]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d042      	beq.n	800f182 <SVCCTL_App_Notification+0x146>
 800f0fc:	2b03      	cmp	r3, #3
 800f0fe:	f040 80c7 	bne.w	800f290 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	3301      	adds	r3, #1
 800f106:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800f108:	4893      	ldr	r0, [pc, #588]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f10a:	f7ff fdbd 	bl	800ec88 <DbgTraceGetFileName>
 800f10e:	4601      	mov	r1, r0
 800f110:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800f114:	4a91      	ldr	r2, [pc, #580]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f116:	4892      	ldr	r0, [pc, #584]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f118:	f002 f8ca 	bl	80112b0 <iprintf>
 800f11c:	4894      	ldr	r0, [pc, #592]	@ (800f370 <SVCCTL_App_Notification+0x334>)
 800f11e:	f002 f937 	bl	8011390 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f122:	488d      	ldr	r0, [pc, #564]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f124:	f7ff fdb0 	bl	800ec88 <DbgTraceGetFileName>
 800f128:	4601      	mov	r1, r0
 800f12a:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800f12e:	4a8b      	ldr	r2, [pc, #556]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f130:	488b      	ldr	r0, [pc, #556]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f132:	f002 f8bd 	bl	80112b0 <iprintf>
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f13c:	b29b      	uxth	r3, r3
 800f13e:	4618      	mov	r0, r3
 800f140:	f7f1 faf2 	bl	8000728 <__aeabi_i2d>
 800f144:	f04f 0200 	mov.w	r2, #0
 800f148:	4b8a      	ldr	r3, [pc, #552]	@ (800f374 <SVCCTL_App_Notification+0x338>)
 800f14a:	f7f1 f871 	bl	8000230 <__aeabi_dmul>
 800f14e:	4602      	mov	r2, r0
 800f150:	460b      	mov	r3, r1
 800f152:	4610      	mov	r0, r2
 800f154:	4619      	mov	r1, r3
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	461c      	mov	r4, r3
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800f166:	b29b      	uxth	r3, r3
 800f168:	461a      	mov	r2, r3
 800f16a:	4613      	mov	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	005b      	lsls	r3, r3, #1
 800f172:	9301      	str	r3, [sp, #4]
 800f174:	9400      	str	r4, [sp, #0]
 800f176:	4602      	mov	r2, r0
 800f178:	460b      	mov	r3, r1
 800f17a:	487f      	ldr	r0, [pc, #508]	@ (800f378 <SVCCTL_App_Notification+0x33c>)
 800f17c:	f002 f898 	bl	80112b0 <iprintf>
          break;
 800f180:	e087      	b.n	800f292 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	3301      	adds	r3, #1
 800f186:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800f188:	4873      	ldr	r0, [pc, #460]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f18a:	f7ff fd7d 	bl	800ec88 <DbgTraceGetFileName>
 800f18e:	4601      	mov	r1, r0
 800f190:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800f194:	4a71      	ldr	r2, [pc, #452]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f196:	4872      	ldr	r0, [pc, #456]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f198:	f002 f88a 	bl	80112b0 <iprintf>
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f1a2:	b29b      	uxth	r3, r3
 800f1a4:	4619      	mov	r1, r3
 800f1a6:	4875      	ldr	r0, [pc, #468]	@ (800f37c <SVCCTL_App_Notification+0x340>)
 800f1a8:	f002 f882 	bl	80112b0 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800f1ac:	486a      	ldr	r0, [pc, #424]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f1ae:	f7ff fd6b 	bl	800ec88 <DbgTraceGetFileName>
 800f1b2:	4601      	mov	r1, r0
 800f1b4:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800f1b8:	4a68      	ldr	r2, [pc, #416]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f1ba:	4869      	ldr	r0, [pc, #420]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f1bc:	f002 f878 	bl	80112b0 <iprintf>
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	7a9b      	ldrb	r3, [r3, #10]
 800f1c4:	4618      	mov	r0, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	7a5b      	ldrb	r3, [r3, #9]
 800f1ca:	461c      	mov	r4, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	7a1b      	ldrb	r3, [r3, #8]
 800f1d0:	461d      	mov	r5, r3
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	79db      	ldrb	r3, [r3, #7]
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	799b      	ldrb	r3, [r3, #6]
 800f1dc:	4619      	mov	r1, r3
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	795b      	ldrb	r3, [r3, #5]
 800f1e2:	9302      	str	r3, [sp, #8]
 800f1e4:	9101      	str	r1, [sp, #4]
 800f1e6:	9200      	str	r2, [sp, #0]
 800f1e8:	462b      	mov	r3, r5
 800f1ea:	4622      	mov	r2, r4
 800f1ec:	4601      	mov	r1, r0
 800f1ee:	4864      	ldr	r0, [pc, #400]	@ (800f380 <SVCCTL_App_Notification+0x344>)
 800f1f0:	f002 f85e 	bl	80112b0 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800f1f4:	4858      	ldr	r0, [pc, #352]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f1f6:	f7ff fd47 	bl	800ec88 <DbgTraceGetFileName>
 800f1fa:	4601      	mov	r1, r0
 800f1fc:	f240 13fd 	movw	r3, #509	@ 0x1fd
 800f200:	4a56      	ldr	r2, [pc, #344]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f202:	4857      	ldr	r0, [pc, #348]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f204:	f002 f854 	bl	80112b0 <iprintf>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800f20e:	b29b      	uxth	r3, r3
 800f210:	4618      	mov	r0, r3
 800f212:	f7f1 fa89 	bl	8000728 <__aeabi_i2d>
 800f216:	f04f 0200 	mov.w	r2, #0
 800f21a:	4b56      	ldr	r3, [pc, #344]	@ (800f374 <SVCCTL_App_Notification+0x338>)
 800f21c:	f7f1 f808 	bl	8000230 <__aeabi_dmul>
 800f220:	4602      	mov	r2, r0
 800f222:	460b      	mov	r3, r1
 800f224:	4610      	mov	r0, r2
 800f226:	4619      	mov	r1, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 800f22e:	b29b      	uxth	r3, r3
 800f230:	461c      	mov	r4, r3
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 800f238:	b29b      	uxth	r3, r3
 800f23a:	461a      	mov	r2, r3
 800f23c:	4613      	mov	r3, r2
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4413      	add	r3, r2
 800f242:	005b      	lsls	r3, r3, #1
 800f244:	9301      	str	r3, [sp, #4]
 800f246:	9400      	str	r4, [sp, #0]
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	484a      	ldr	r0, [pc, #296]	@ (800f378 <SVCCTL_App_Notification+0x33c>)
 800f24e:	f002 f82f 	bl	80112b0 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800f252:	4b40      	ldr	r3, [pc, #256]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f254:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f258:	2b04      	cmp	r3, #4
 800f25a:	d104      	bne.n	800f266 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 800f25c:	4b3d      	ldr	r3, [pc, #244]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f25e:	2206      	movs	r2, #6
 800f260:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 800f264:	e003      	b.n	800f26e <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800f266:	4b3b      	ldr	r3, [pc, #236]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f268:	2205      	movs	r2, #5
 800f26a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f274:	b29a      	uxth	r2, r3
 800f276:	4b37      	ldr	r3, [pc, #220]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f278:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 800f27a:	4b3c      	ldr	r3, [pc, #240]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f27c:	2200      	movs	r2, #0
 800f27e:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800f280:	4b34      	ldr	r3, [pc, #208]	@ (800f354 <SVCCTL_App_Notification+0x318>)
 800f282:	8ada      	ldrh	r2, [r3, #22]
 800f284:	4b39      	ldr	r3, [pc, #228]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f286:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 800f288:	4838      	ldr	r0, [pc, #224]	@ (800f36c <SVCCTL_App_Notification+0x330>)
 800f28a:	f000 fe13 	bl	800feb4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 800f28e:	e000      	b.n	800f292 <SVCCTL_App_Notification+0x256>
          break;
 800f290:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 800f292:	e16e      	b.n	800f572 <SVCCTL_App_Notification+0x536>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 800f294:	6a3b      	ldr	r3, [r7, #32]
 800f296:	3302      	adds	r3, #2
 800f298:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 800f29a:	69fb      	ldr	r3, [r7, #28]
 800f29c:	881b      	ldrh	r3, [r3, #0]
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f2a4:	4293      	cmp	r3, r2
 800f2a6:	f000 814a 	beq.w	800f53e <SVCCTL_App_Notification+0x502>
 800f2aa:	f640 420e 	movw	r2, #3086	@ 0xc0e
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	f300 815e 	bgt.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2b8:	f000 8154 	beq.w	800f564 <SVCCTL_App_Notification+0x528>
 800f2bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800f2c0:	f300 8156 	bgt.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2c4:	2b04      	cmp	r3, #4
 800f2c6:	f000 814f 	beq.w	800f568 <SVCCTL_App_Notification+0x52c>
 800f2ca:	2b04      	cmp	r3, #4
 800f2cc:	f2c0 8150 	blt.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2d0:	f240 420a 	movw	r2, #1034	@ 0x40a
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	f300 814b 	bgt.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f2de:	f340 8147 	ble.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2e2:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 800f2e6:	2b09      	cmp	r3, #9
 800f2e8:	f200 8142 	bhi.w	800f570 <SVCCTL_App_Notification+0x534>
 800f2ec:	a201      	add	r2, pc, #4	@ (adr r2, 800f2f4 <SVCCTL_App_Notification+0x2b8>)
 800f2ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2f2:	bf00      	nop
 800f2f4:	0800f4b9 	.word	0x0800f4b9
 800f2f8:	0800f38d 	.word	0x0800f38d
 800f2fc:	0800f571 	.word	0x0800f571
 800f300:	0800f571 	.word	0x0800f571
 800f304:	0800f571 	.word	0x0800f571
 800f308:	0800f571 	.word	0x0800f571
 800f30c:	0800f31d 	.word	0x0800f31d
 800f310:	0800f571 	.word	0x0800f571
 800f314:	0800f3ff 	.word	0x0800f3ff
 800f318:	0800f339 	.word	0x0800f339
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 800f31c:	480e      	ldr	r0, [pc, #56]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f31e:	f7ff fcb3 	bl	800ec88 <DbgTraceGetFileName>
 800f322:	4601      	mov	r1, r0
 800f324:	f240 233f 	movw	r3, #575	@ 0x23f
 800f328:	4a0c      	ldr	r2, [pc, #48]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f32a:	480d      	ldr	r0, [pc, #52]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f32c:	f001 ffc0 	bl	80112b0 <iprintf>
 800f330:	4814      	ldr	r0, [pc, #80]	@ (800f384 <SVCCTL_App_Notification+0x348>)
 800f332:	f001 ffbd 	bl	80112b0 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 800f336:	e118      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 800f338:	4807      	ldr	r0, [pc, #28]	@ (800f358 <SVCCTL_App_Notification+0x31c>)
 800f33a:	f7ff fca5 	bl	800ec88 <DbgTraceGetFileName>
 800f33e:	4601      	mov	r1, r0
 800f340:	f240 234f 	movw	r3, #591	@ 0x24f
 800f344:	4a05      	ldr	r2, [pc, #20]	@ (800f35c <SVCCTL_App_Notification+0x320>)
 800f346:	4806      	ldr	r0, [pc, #24]	@ (800f360 <SVCCTL_App_Notification+0x324>)
 800f348:	f001 ffb2 	bl	80112b0 <iprintf>
 800f34c:	480e      	ldr	r0, [pc, #56]	@ (800f388 <SVCCTL_App_Notification+0x34c>)
 800f34e:	f002 f81f 	bl	8011390 <puts>
          break;
 800f352:	e10a      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
 800f354:	200008cc 	.word	0x200008cc
 800f358:	080129b0 	.word	0x080129b0
 800f35c:	08013d54 	.word	0x08013d54
 800f360:	080129cc 	.word	0x080129cc
 800f364:	08012af8 	.word	0x08012af8
 800f368:	08012b24 	.word	0x08012b24
 800f36c:	20000950 	.word	0x20000950
 800f370:	08012b60 	.word	0x08012b60
 800f374:	3ff40000 	.word	0x3ff40000
 800f378:	08012b94 	.word	0x08012b94
 800f37c:	08012c00 	.word	0x08012c00
 800f380:	08012c48 	.word	0x08012c48
 800f384:	08012c98 	.word	0x08012c98
 800f388:	08012cc0 	.word	0x08012cc0
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 800f38c:	487b      	ldr	r0, [pc, #492]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f38e:	f7ff fc7b 	bl	800ec88 <DbgTraceGetFileName>
 800f392:	4601      	mov	r1, r0
 800f394:	f240 2356 	movw	r3, #598	@ 0x256
 800f398:	4a79      	ldr	r2, [pc, #484]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f39a:	487a      	ldr	r0, [pc, #488]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f39c:	f001 ff88 	bl	80112b0 <iprintf>
 800f3a0:	4879      	ldr	r0, [pc, #484]	@ (800f588 <SVCCTL_App_Notification+0x54c>)
 800f3a2:	f001 fff5 	bl	8011390 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 800f3a6:	4b79      	ldr	r3, [pc, #484]	@ (800f58c <SVCCTL_App_Notification+0x550>)
 800f3a8:	8adb      	ldrh	r3, [r3, #22]
 800f3aa:	4979      	ldr	r1, [pc, #484]	@ (800f590 <SVCCTL_App_Notification+0x554>)
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7fd fe2c 	bl	800d00a <aci_gap_pass_key_resp>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800f3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d010      	beq.n	800f3e2 <SVCCTL_App_Notification+0x3a6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 800f3c0:	486e      	ldr	r0, [pc, #440]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f3c2:	f7ff fc61 	bl	800ec88 <DbgTraceGetFileName>
 800f3c6:	4601      	mov	r1, r0
 800f3c8:	f240 235b 	movw	r3, #603	@ 0x25b
 800f3cc:	4a6c      	ldr	r2, [pc, #432]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f3ce:	486d      	ldr	r0, [pc, #436]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f3d0:	f001 ff6e 	bl	80112b0 <iprintf>
 800f3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f3d8:	4619      	mov	r1, r3
 800f3da:	486e      	ldr	r0, [pc, #440]	@ (800f594 <SVCCTL_App_Notification+0x558>)
 800f3dc:	f001 ff68 	bl	80112b0 <iprintf>
          break;
 800f3e0:	e0c3      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 800f3e2:	4866      	ldr	r0, [pc, #408]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f3e4:	f7ff fc50 	bl	800ec88 <DbgTraceGetFileName>
 800f3e8:	4601      	mov	r1, r0
 800f3ea:	f240 235f 	movw	r3, #607	@ 0x25f
 800f3ee:	4a64      	ldr	r2, [pc, #400]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f3f0:	4864      	ldr	r0, [pc, #400]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f3f2:	f001 ff5d 	bl	80112b0 <iprintf>
 800f3f6:	4868      	ldr	r0, [pc, #416]	@ (800f598 <SVCCTL_App_Notification+0x55c>)
 800f3f8:	f001 ffca 	bl	8011390 <puts>
          break;
 800f3fc:	e0b5      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 800f3fe:	485f      	ldr	r0, [pc, #380]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f400:	f7ff fc42 	bl	800ec88 <DbgTraceGetFileName>
 800f404:	4601      	mov	r1, r0
 800f406:	f240 2367 	movw	r3, #615	@ 0x267
 800f40a:	4a5d      	ldr	r2, [pc, #372]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f40c:	485d      	ldr	r0, [pc, #372]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f40e:	f001 ff4f 	bl	80112b0 <iprintf>
 800f412:	4862      	ldr	r0, [pc, #392]	@ (800f59c <SVCCTL_App_Notification+0x560>)
 800f414:	f001 ffbc 	bl	8011390 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 800f418:	4858      	ldr	r0, [pc, #352]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f41a:	f7ff fc35 	bl	800ec88 <DbgTraceGetFileName>
 800f41e:	4601      	mov	r1, r0
 800f420:	f44f 731a 	mov.w	r3, #616	@ 0x268
 800f424:	4a56      	ldr	r2, [pc, #344]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f426:	4857      	ldr	r0, [pc, #348]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f428:	f001 ff42 	bl	80112b0 <iprintf>
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	3302      	adds	r3, #2
 800f430:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f434:	4619      	mov	r1, r3
 800f436:	485a      	ldr	r0, [pc, #360]	@ (800f5a0 <SVCCTL_App_Notification+0x564>)
 800f438:	f001 ff3a 	bl	80112b0 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 800f43c:	484f      	ldr	r0, [pc, #316]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f43e:	f7ff fc23 	bl	800ec88 <DbgTraceGetFileName>
 800f442:	4601      	mov	r1, r0
 800f444:	f240 236a 	movw	r3, #618	@ 0x26a
 800f448:	4a4d      	ldr	r2, [pc, #308]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f44a:	484e      	ldr	r0, [pc, #312]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f44c:	f001 ff30 	bl	80112b0 <iprintf>
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	3302      	adds	r3, #2
 800f454:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f458:	4619      	mov	r1, r3
 800f45a:	4852      	ldr	r0, [pc, #328]	@ (800f5a4 <SVCCTL_App_Notification+0x568>)
 800f45c:	f001 ff28 	bl	80112b0 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 800f460:	4b4a      	ldr	r3, [pc, #296]	@ (800f58c <SVCCTL_App_Notification+0x550>)
 800f462:	8adb      	ldrh	r3, [r3, #22]
 800f464:	2101      	movs	r1, #1
 800f466:	4618      	mov	r0, r3
 800f468:	f7fd ff79 	bl	800d35e <aci_gap_numeric_comparison_value_confirm_yesno>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 800f472:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f476:	2b00      	cmp	r3, #0
 800f478:	d010      	beq.n	800f49c <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 800f47a:	4840      	ldr	r0, [pc, #256]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f47c:	f7ff fc04 	bl	800ec88 <DbgTraceGetFileName>
 800f480:	4601      	mov	r1, r0
 800f482:	f240 236f 	movw	r3, #623	@ 0x26f
 800f486:	4a3e      	ldr	r2, [pc, #248]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f488:	483e      	ldr	r0, [pc, #248]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f48a:	f001 ff11 	bl	80112b0 <iprintf>
 800f48e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f492:	4619      	mov	r1, r3
 800f494:	4844      	ldr	r0, [pc, #272]	@ (800f5a8 <SVCCTL_App_Notification+0x56c>)
 800f496:	f001 ff0b 	bl	80112b0 <iprintf>
          break;
 800f49a:	e066      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 800f49c:	4837      	ldr	r0, [pc, #220]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f49e:	f7ff fbf3 	bl	800ec88 <DbgTraceGetFileName>
 800f4a2:	4601      	mov	r1, r0
 800f4a4:	f240 2373 	movw	r3, #627	@ 0x273
 800f4a8:	4a35      	ldr	r2, [pc, #212]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f4aa:	4836      	ldr	r0, [pc, #216]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f4ac:	f001 ff00 	bl	80112b0 <iprintf>
 800f4b0:	483e      	ldr	r0, [pc, #248]	@ (800f5ac <SVCCTL_App_Notification+0x570>)
 800f4b2:	f001 ff6d 	bl	8011390 <puts>
          break;
 800f4b6:	e058      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	3302      	adds	r3, #2
 800f4bc:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 800f4be:	482f      	ldr	r0, [pc, #188]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f4c0:	f7ff fbe2 	bl	800ec88 <DbgTraceGetFileName>
 800f4c4:	4601      	mov	r1, r0
 800f4c6:	f240 237d 	movw	r3, #637	@ 0x27d
 800f4ca:	4a2d      	ldr	r2, [pc, #180]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f4cc:	482d      	ldr	r0, [pc, #180]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f4ce:	f001 feef 	bl	80112b0 <iprintf>
 800f4d2:	4837      	ldr	r0, [pc, #220]	@ (800f5b0 <SVCCTL_App_Notification+0x574>)
 800f4d4:	f001 ff5c 	bl	8011390 <puts>
          if (p_pairing_complete->Status != 0)
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	789b      	ldrb	r3, [r3, #2]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d013      	beq.n	800f508 <SVCCTL_App_Notification+0x4cc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 800f4e0:	4826      	ldr	r0, [pc, #152]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f4e2:	f7ff fbd1 	bl	800ec88 <DbgTraceGetFileName>
 800f4e6:	4601      	mov	r1, r0
 800f4e8:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800f4ec:	4a24      	ldr	r2, [pc, #144]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f4ee:	4825      	ldr	r0, [pc, #148]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f4f0:	f001 fede 	bl	80112b0 <iprintf>
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	789b      	ldrb	r3, [r3, #2]
 800f4f8:	4619      	mov	r1, r3
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	78db      	ldrb	r3, [r3, #3]
 800f4fe:	461a      	mov	r2, r3
 800f500:	482c      	ldr	r0, [pc, #176]	@ (800f5b4 <SVCCTL_App_Notification+0x578>)
 800f502:	f001 fed5 	bl	80112b0 <iprintf>
 800f506:	e00c      	b.n	800f522 <SVCCTL_App_Notification+0x4e6>
            APP_DBG_MSG("     - Pairing Success\n");
 800f508:	481c      	ldr	r0, [pc, #112]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f50a:	f7ff fbbd 	bl	800ec88 <DbgTraceGetFileName>
 800f50e:	4601      	mov	r1, r0
 800f510:	f44f 7321 	mov.w	r3, #644	@ 0x284
 800f514:	4a1a      	ldr	r2, [pc, #104]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f516:	481b      	ldr	r0, [pc, #108]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f518:	f001 feca 	bl	80112b0 <iprintf>
 800f51c:	4826      	ldr	r0, [pc, #152]	@ (800f5b8 <SVCCTL_App_Notification+0x57c>)
 800f51e:	f001 ff37 	bl	8011390 <puts>
          APP_DBG_MSG("\n");
 800f522:	4816      	ldr	r0, [pc, #88]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f524:	f7ff fbb0 	bl	800ec88 <DbgTraceGetFileName>
 800f528:	4601      	mov	r1, r0
 800f52a:	f240 2386 	movw	r3, #646	@ 0x286
 800f52e:	4a14      	ldr	r2, [pc, #80]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f530:	4814      	ldr	r0, [pc, #80]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f532:	f001 febd 	bl	80112b0 <iprintf>
 800f536:	200a      	movs	r0, #10
 800f538:	f001 fecc 	bl	80112d4 <putchar>
          break;
 800f53c:	e015      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 800f53e:	480f      	ldr	r0, [pc, #60]	@ (800f57c <SVCCTL_App_Notification+0x540>)
 800f540:	f7ff fba2 	bl	800ec88 <DbgTraceGetFileName>
 800f544:	4601      	mov	r1, r0
 800f546:	f240 238f 	movw	r3, #655	@ 0x28f
 800f54a:	4a0d      	ldr	r2, [pc, #52]	@ (800f580 <SVCCTL_App_Notification+0x544>)
 800f54c:	480d      	ldr	r0, [pc, #52]	@ (800f584 <SVCCTL_App_Notification+0x548>)
 800f54e:	f001 feaf 	bl	80112b0 <iprintf>
 800f552:	481a      	ldr	r0, [pc, #104]	@ (800f5bc <SVCCTL_App_Notification+0x580>)
 800f554:	f001 feac 	bl	80112b0 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800f558:	4b0c      	ldr	r3, [pc, #48]	@ (800f58c <SVCCTL_App_Notification+0x550>)
 800f55a:	8adb      	ldrh	r3, [r3, #22]
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7fe fa11 	bl	800d984 <aci_gatt_confirm_indication>
        break;
 800f562:	e002      	b.n	800f56a <SVCCTL_App_Notification+0x52e>
          break;
 800f564:	bf00      	nop
 800f566:	e003      	b.n	800f570 <SVCCTL_App_Notification+0x534>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 800f568:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f56a:	e001      	b.n	800f570 <SVCCTL_App_Notification+0x534>
      break;
 800f56c:	bf00      	nop
 800f56e:	e000      	b.n	800f572 <SVCCTL_App_Notification+0x536>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 800f570:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 800f572:	2301      	movs	r3, #1
}
 800f574:	4618      	mov	r0, r3
 800f576:	3728      	adds	r7, #40	@ 0x28
 800f578:	46bd      	mov	sp, r7
 800f57a:	bdb0      	pop	{r4, r5, r7, pc}
 800f57c:	080129b0 	.word	0x080129b0
 800f580:	08013d54 	.word	0x08013d54
 800f584:	080129cc 	.word	0x080129cc
 800f588:	08012cf0 	.word	0x08012cf0
 800f58c:	200008cc 	.word	0x200008cc
 800f590:	0001b207 	.word	0x0001b207
 800f594:	08012d18 	.word	0x08012d18
 800f598:	08012d4c 	.word	0x08012d4c
 800f59c:	08012d74 	.word	0x08012d74
 800f5a0:	08012da8 	.word	0x08012da8
 800f5a4:	08012dc4 	.word	0x08012dc4
 800f5a8:	08012ddc 	.word	0x08012ddc
 800f5ac:	08012e2c 	.word	0x08012e2c
 800f5b0:	08012e74 	.word	0x08012e74
 800f5b4:	08012ea0 	.word	0x08012ea0
 800f5b8:	08012edc 	.word	0x08012edc
 800f5bc:	08012ef4 	.word	0x08012ef4

0800f5c0 <MVT_REF_fin>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void MVT_REF_fin(void)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_fin();
 800f5c4:	f000 fc9c 	bl	800ff00 <FSVC_MVT_REF_fin>
}
 800f5c8:	bf00      	nop
 800f5ca:	bd80      	pop	{r7, pc}

0800f5cc <MVT_REF_vide>:
void MVT_REF_vide(void)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_vide();
 800f5d0:	f000 fca4 	bl	800ff1c <FSVC_MVT_REF_vide>
}
 800f5d4:	bf00      	nop
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <MVT_REF_validation_succes>:

void MVT_REF_validation_succes(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_succes();
 800f5dc:	f000 fcac 	bl	800ff38 <FSVC_MVT_REF_validation_succes>
}
 800f5e0:	bf00      	nop
 800f5e2:	bd80      	pop	{r7, pc}

0800f5e4 <MVT_REF_validation_fail>:
void MVT_REF_validation_fail(void)
{
 800f5e4:	b580      	push	{r7, lr}
 800f5e6:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_fail();
 800f5e8:	f000 fcb4 	bl	800ff54 <FSVC_MVT_REF_validation_fail>
}
 800f5ec:	bf00      	nop
 800f5ee:	bd80      	pop	{r7, pc}

0800f5f0 <MVT_REF_validation_vide>:
void MVT_REF_validation_vide(void)
{
 800f5f0:	b580      	push	{r7, lr}
 800f5f2:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_vide();
 800f5f4:	f000 fcbc 	bl	800ff70 <FSVC_MVT_REF_validation_vide>
}
 800f5f8:	bf00      	nop
 800f5fa:	bd80      	pop	{r7, pc}

0800f5fc <MVT_vide>:

void MVT_vide(void)
{
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	af00      	add	r7, sp, #0
	FSVC_MVT_vide();
 800f600:	f000 fcc4 	bl	800ff8c <FSVC_MVT_vide>
}
 800f604:	bf00      	nop
 800f606:	bd80      	pop	{r7, pc}

0800f608 <MVT_valide>:
void MVT_valide(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	af00      	add	r7, sp, #0
	FSVC_MVT_valide();
 800f60c:	f000 fccc 	bl	800ffa8 <FSVC_MVT_valide>
}
 800f610:	bf00      	nop
 800f612:	bd80      	pop	{r7, pc}

0800f614 <MVT_non_valide>:
void MVT_non_valide(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
	FSVC_MVT_non_valide();
 800f618:	f000 fcd4 	bl	800ffc4 <FSVC_MVT_non_valide>
}
 800f61c:	bf00      	nop
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800f626:	4b06      	ldr	r3, [pc, #24]	@ (800f640 <Ble_Tl_Init+0x20>)
 800f628:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800f62a:	4b06      	ldr	r3, [pc, #24]	@ (800f644 <Ble_Tl_Init+0x24>)
 800f62c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800f62e:	463b      	mov	r3, r7
 800f630:	4619      	mov	r1, r3
 800f632:	4805      	ldr	r0, [pc, #20]	@ (800f648 <Ble_Tl_Init+0x28>)
 800f634:	f7fe fe0c 	bl	800e250 <hci_init>

  return;
 800f638:	bf00      	nop
}
 800f63a:	3708      	adds	r7, #8
 800f63c:	46bd      	mov	sp, r7
 800f63e:	bd80      	pop	{r7, pc}
 800f640:	200300d8 	.word	0x200300d8
 800f644:	0800fe15 	.word	0x0800fe15
 800f648:	0800fddd 	.word	0x0800fddd

0800f64c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 800f64c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64e:	b08d      	sub	sp, #52	@ 0x34
 800f650:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 800f652:	2300      	movs	r3, #0
 800f654:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800f656:	2392      	movs	r3, #146	@ 0x92
 800f658:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 800f65a:	48a3      	ldr	r0, [pc, #652]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f65c:	f7ff fb14 	bl	800ec88 <DbgTraceGetFileName>
 800f660:	4601      	mov	r1, r0
 800f662:	f240 23ed 	movw	r3, #749	@ 0x2ed
 800f666:	4aa1      	ldr	r2, [pc, #644]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f668:	48a1      	ldr	r0, [pc, #644]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f66a:	f001 fe21 	bl	80112b0 <iprintf>
 800f66e:	48a1      	ldr	r0, [pc, #644]	@ (800f8f4 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 800f670:	f001 fe8e 	bl	8011390 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 800f674:	f7fe fb1b 	bl	800dcae <hci_reset>
 800f678:	4603      	mov	r3, r0
 800f67a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f67c:	7dfb      	ldrb	r3, [r7, #23]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d00f      	beq.n	800f6a2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 800f682:	4899      	ldr	r0, [pc, #612]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f684:	f7ff fb00 	bl	800ec88 <DbgTraceGetFileName>
 800f688:	4601      	mov	r1, r0
 800f68a:	f240 23f6 	movw	r3, #758	@ 0x2f6
 800f68e:	4a97      	ldr	r2, [pc, #604]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f690:	4897      	ldr	r0, [pc, #604]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f692:	f001 fe0d 	bl	80112b0 <iprintf>
 800f696:	7dfb      	ldrb	r3, [r7, #23]
 800f698:	4619      	mov	r1, r3
 800f69a:	4897      	ldr	r0, [pc, #604]	@ (800f8f8 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 800f69c:	f001 fe08 	bl	80112b0 <iprintf>
 800f6a0:	e00c      	b.n	800f6bc <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 800f6a2:	4891      	ldr	r0, [pc, #580]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6a4:	f7ff faf0 	bl	800ec88 <DbgTraceGetFileName>
 800f6a8:	4601      	mov	r1, r0
 800f6aa:	f240 23fa 	movw	r3, #762	@ 0x2fa
 800f6ae:	4a8f      	ldr	r2, [pc, #572]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f6b0:	488f      	ldr	r0, [pc, #572]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f6b2:	f001 fdfd 	bl	80112b0 <iprintf>
 800f6b6:	4891      	ldr	r0, [pc, #580]	@ (800f8fc <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 800f6b8:	f001 fe6a 	bl	8011390 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 800f6bc:	f000 fad8 	bl	800fc70 <BleGetBdAddress>
 800f6c0:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 800f6c2:	693a      	ldr	r2, [r7, #16]
 800f6c4:	2106      	movs	r1, #6
 800f6c6:	2000      	movs	r0, #0
 800f6c8:	f7fe f9b1 	bl	800da2e <aci_hal_write_config_data>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f6d0:	7dfb      	ldrb	r3, [r7, #23]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d00f      	beq.n	800f6f6 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800f6d6:	4884      	ldr	r0, [pc, #528]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6d8:	f7ff fad6 	bl	800ec88 <DbgTraceGetFileName>
 800f6dc:	4601      	mov	r1, r0
 800f6de:	f44f 7341 	mov.w	r3, #772	@ 0x304
 800f6e2:	4a82      	ldr	r2, [pc, #520]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f6e4:	4882      	ldr	r0, [pc, #520]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f6e6:	f001 fde3 	bl	80112b0 <iprintf>
 800f6ea:	7dfb      	ldrb	r3, [r7, #23]
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	4884      	ldr	r0, [pc, #528]	@ (800f900 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 800f6f0:	f001 fdde 	bl	80112b0 <iprintf>
 800f6f4:	e035      	b.n	800f762 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 800f6f6:	487c      	ldr	r0, [pc, #496]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f6f8:	f7ff fac6 	bl	800ec88 <DbgTraceGetFileName>
 800f6fc:	4601      	mov	r1, r0
 800f6fe:	f44f 7342 	mov.w	r3, #776	@ 0x308
 800f702:	4a7a      	ldr	r2, [pc, #488]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f704:	487a      	ldr	r0, [pc, #488]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f706:	f001 fdd3 	bl	80112b0 <iprintf>
 800f70a:	487e      	ldr	r0, [pc, #504]	@ (800f904 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 800f70c:	f001 fe40 	bl	8011390 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 800f710:	4875      	ldr	r0, [pc, #468]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f712:	f7ff fab9 	bl	800ec88 <DbgTraceGetFileName>
 800f716:	4601      	mov	r1, r0
 800f718:	f240 3309 	movw	r3, #777	@ 0x309
 800f71c:	4a73      	ldr	r2, [pc, #460]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f71e:	4874      	ldr	r0, [pc, #464]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f720:	f001 fdc6 	bl	80112b0 <iprintf>
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	3305      	adds	r3, #5
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	4618      	mov	r0, r3
 800f72c:	693b      	ldr	r3, [r7, #16]
 800f72e:	3304      	adds	r3, #4
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	461c      	mov	r4, r3
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	3303      	adds	r3, #3
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	461d      	mov	r5, r3
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	3302      	adds	r3, #2
 800f740:	781b      	ldrb	r3, [r3, #0]
 800f742:	461a      	mov	r2, r3
 800f744:	693b      	ldr	r3, [r7, #16]
 800f746:	3301      	adds	r3, #1
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	4619      	mov	r1, r3
 800f74c:	693b      	ldr	r3, [r7, #16]
 800f74e:	781b      	ldrb	r3, [r3, #0]
 800f750:	9302      	str	r3, [sp, #8]
 800f752:	9101      	str	r1, [sp, #4]
 800f754:	9200      	str	r2, [sp, #0]
 800f756:	462b      	mov	r3, r5
 800f758:	4622      	mov	r2, r4
 800f75a:	4601      	mov	r1, r0
 800f75c:	486a      	ldr	r0, [pc, #424]	@ (800f908 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 800f75e:	f001 fda7 	bl	80112b0 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 800f762:	4a6a      	ldr	r2, [pc, #424]	@ (800f90c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 800f764:	2110      	movs	r1, #16
 800f766:	2018      	movs	r0, #24
 800f768:	f7fe f961 	bl	800da2e <aci_hal_write_config_data>
 800f76c:	4603      	mov	r3, r0
 800f76e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f770:	7dfb      	ldrb	r3, [r7, #23]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d00f      	beq.n	800f796 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 800f776:	485c      	ldr	r0, [pc, #368]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f778:	f7ff fa86 	bl	800ec88 <DbgTraceGetFileName>
 800f77c:	4601      	mov	r1, r0
 800f77e:	f240 3353 	movw	r3, #851	@ 0x353
 800f782:	4a5a      	ldr	r2, [pc, #360]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f784:	485a      	ldr	r0, [pc, #360]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f786:	f001 fd93 	bl	80112b0 <iprintf>
 800f78a:	7dfb      	ldrb	r3, [r7, #23]
 800f78c:	4619      	mov	r1, r3
 800f78e:	4860      	ldr	r0, [pc, #384]	@ (800f910 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 800f790:	f001 fd8e 	bl	80112b0 <iprintf>
 800f794:	e00c      	b.n	800f7b0 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 800f796:	4854      	ldr	r0, [pc, #336]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f798:	f7ff fa76 	bl	800ec88 <DbgTraceGetFileName>
 800f79c:	4601      	mov	r1, r0
 800f79e:	f240 3357 	movw	r3, #855	@ 0x357
 800f7a2:	4a52      	ldr	r2, [pc, #328]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f7a4:	4852      	ldr	r0, [pc, #328]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f7a6:	f001 fd83 	bl	80112b0 <iprintf>
 800f7aa:	485a      	ldr	r0, [pc, #360]	@ (800f914 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 800f7ac:	f001 fdf0 	bl	8011390 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 800f7b0:	4a59      	ldr	r2, [pc, #356]	@ (800f918 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 800f7b2:	2110      	movs	r1, #16
 800f7b4:	2008      	movs	r0, #8
 800f7b6:	f7fe f93a 	bl	800da2e <aci_hal_write_config_data>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f7be:	7dfb      	ldrb	r3, [r7, #23]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d00f      	beq.n	800f7e4 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 800f7c4:	4848      	ldr	r0, [pc, #288]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f7c6:	f7ff fa5f 	bl	800ec88 <DbgTraceGetFileName>
 800f7ca:	4601      	mov	r1, r0
 800f7cc:	f44f 7358 	mov.w	r3, #864	@ 0x360
 800f7d0:	4a46      	ldr	r2, [pc, #280]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f7d2:	4847      	ldr	r0, [pc, #284]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f7d4:	f001 fd6c 	bl	80112b0 <iprintf>
 800f7d8:	7dfb      	ldrb	r3, [r7, #23]
 800f7da:	4619      	mov	r1, r3
 800f7dc:	484f      	ldr	r0, [pc, #316]	@ (800f91c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 800f7de:	f001 fd67 	bl	80112b0 <iprintf>
 800f7e2:	e00c      	b.n	800f7fe <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 800f7e4:	4840      	ldr	r0, [pc, #256]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f7e6:	f7ff fa4f 	bl	800ec88 <DbgTraceGetFileName>
 800f7ea:	4601      	mov	r1, r0
 800f7ec:	f44f 7359 	mov.w	r3, #868	@ 0x364
 800f7f0:	4a3e      	ldr	r2, [pc, #248]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f7f2:	483f      	ldr	r0, [pc, #252]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f7f4:	f001 fd5c 	bl	80112b0 <iprintf>
 800f7f8:	4849      	ldr	r0, [pc, #292]	@ (800f920 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 800f7fa:	f001 fdc9 	bl	8011390 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800f7fe:	2118      	movs	r1, #24
 800f800:	2001      	movs	r0, #1
 800f802:	f7fe f999 	bl	800db38 <aci_hal_set_tx_power_level>
 800f806:	4603      	mov	r3, r0
 800f808:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f80a:	7dfb      	ldrb	r3, [r7, #23]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00f      	beq.n	800f830 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 800f810:	4835      	ldr	r0, [pc, #212]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f812:	f7ff fa39 	bl	800ec88 <DbgTraceGetFileName>
 800f816:	4601      	mov	r1, r0
 800f818:	f240 336d 	movw	r3, #877	@ 0x36d
 800f81c:	4a33      	ldr	r2, [pc, #204]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f81e:	4834      	ldr	r0, [pc, #208]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f820:	f001 fd46 	bl	80112b0 <iprintf>
 800f824:	7dfb      	ldrb	r3, [r7, #23]
 800f826:	4619      	mov	r1, r3
 800f828:	483e      	ldr	r0, [pc, #248]	@ (800f924 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 800f82a:	f001 fd41 	bl	80112b0 <iprintf>
 800f82e:	e00c      	b.n	800f84a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 800f830:	482d      	ldr	r0, [pc, #180]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f832:	f7ff fa29 	bl	800ec88 <DbgTraceGetFileName>
 800f836:	4601      	mov	r1, r0
 800f838:	f240 3371 	movw	r3, #881	@ 0x371
 800f83c:	4a2b      	ldr	r2, [pc, #172]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f83e:	482c      	ldr	r0, [pc, #176]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f840:	f001 fd36 	bl	80112b0 <iprintf>
 800f844:	4838      	ldr	r0, [pc, #224]	@ (800f928 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 800f846:	f001 fda3 	bl	8011390 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 800f84a:	f7fd fdef 	bl	800d42c <aci_gatt_init>
 800f84e:	4603      	mov	r3, r0
 800f850:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f852:	7dfb      	ldrb	r3, [r7, #23]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d00f      	beq.n	800f878 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 800f858:	4823      	ldr	r0, [pc, #140]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f85a:	f7ff fa15 	bl	800ec88 <DbgTraceGetFileName>
 800f85e:	4601      	mov	r1, r0
 800f860:	f240 337a 	movw	r3, #890	@ 0x37a
 800f864:	4a21      	ldr	r2, [pc, #132]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f866:	4822      	ldr	r0, [pc, #136]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f868:	f001 fd22 	bl	80112b0 <iprintf>
 800f86c:	7dfb      	ldrb	r3, [r7, #23]
 800f86e:	4619      	mov	r1, r3
 800f870:	482e      	ldr	r0, [pc, #184]	@ (800f92c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 800f872:	f001 fd1d 	bl	80112b0 <iprintf>
 800f876:	e00c      	b.n	800f892 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 800f878:	481b      	ldr	r0, [pc, #108]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f87a:	f7ff fa05 	bl	800ec88 <DbgTraceGetFileName>
 800f87e:	4601      	mov	r1, r0
 800f880:	f240 337e 	movw	r3, #894	@ 0x37e
 800f884:	4a19      	ldr	r2, [pc, #100]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f886:	481a      	ldr	r0, [pc, #104]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f888:	f001 fd12 	bl	80112b0 <iprintf>
 800f88c:	4828      	ldr	r0, [pc, #160]	@ (800f930 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 800f88e:	f001 fd7f 	bl	8011390 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 800f892:	2300      	movs	r3, #0
 800f894:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800f896:	7bfb      	ldrb	r3, [r7, #15]
 800f898:	f043 0301 	orr.w	r3, r3, #1
 800f89c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 800f89e:	7bfb      	ldrb	r3, [r7, #15]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d069      	beq.n	800f978 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 800f8a4:	4b23      	ldr	r3, [pc, #140]	@ (800f934 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 800f8a6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 800f8a8:	1dba      	adds	r2, r7, #6
 800f8aa:	7bf8      	ldrb	r0, [r7, #15]
 800f8ac:	1cbb      	adds	r3, r7, #2
 800f8ae:	9301      	str	r3, [sp, #4]
 800f8b0:	1d3b      	adds	r3, r7, #4
 800f8b2:	9300      	str	r3, [sp, #0]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	2203      	movs	r2, #3
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	f7fd fc0d 	bl	800d0d8 <aci_gap_init>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 800f8c2:	7dfb      	ldrb	r3, [r7, #23]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d039      	beq.n	800f93c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 800f8c8:	4807      	ldr	r0, [pc, #28]	@ (800f8e8 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 800f8ca:	f7ff f9dd 	bl	800ec88 <DbgTraceGetFileName>
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	f240 339e 	movw	r3, #926	@ 0x39e
 800f8d4:	4a05      	ldr	r2, [pc, #20]	@ (800f8ec <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 800f8d6:	4806      	ldr	r0, [pc, #24]	@ (800f8f0 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 800f8d8:	f001 fcea 	bl	80112b0 <iprintf>
 800f8dc:	7dfb      	ldrb	r3, [r7, #23]
 800f8de:	4619      	mov	r1, r3
 800f8e0:	4815      	ldr	r0, [pc, #84]	@ (800f938 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 800f8e2:	f001 fce5 	bl	80112b0 <iprintf>
 800f8e6:	e036      	b.n	800f956 <Ble_Hci_Gap_Gatt_Init+0x30a>
 800f8e8:	080129b0 	.word	0x080129b0
 800f8ec:	08013d6c 	.word	0x08013d6c
 800f8f0:	080129cc 	.word	0x080129cc
 800f8f4:	08012f1c 	.word	0x08012f1c
 800f8f8:	08012f48 	.word	0x08012f48
 800f8fc:	08012f78 	.word	0x08012f78
 800f900:	08012f98 	.word	0x08012f98
 800f904:	08012ff4 	.word	0x08012ff4
 800f908:	08013040 	.word	0x08013040
 800f90c:	08013d24 	.word	0x08013d24
 800f910:	0801307c 	.word	0x0801307c
 800f914:	080130d4 	.word	0x080130d4
 800f918:	08013d34 	.word	0x08013d34
 800f91c:	0801311c 	.word	0x0801311c
 800f920:	08013174 	.word	0x08013174
 800f924:	080131bc 	.word	0x080131bc
 800f928:	080131fc 	.word	0x080131fc
 800f92c:	0801322c 	.word	0x0801322c
 800f930:	08013260 	.word	0x08013260
 800f934:	08013284 	.word	0x08013284
 800f938:	08013288 	.word	0x08013288
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 800f93c:	487e      	ldr	r0, [pc, #504]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f93e:	f7ff f9a3 	bl	800ec88 <DbgTraceGetFileName>
 800f942:	4601      	mov	r1, r0
 800f944:	f240 33a2 	movw	r3, #930	@ 0x3a2
 800f948:	4a7c      	ldr	r2, [pc, #496]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f94a:	487d      	ldr	r0, [pc, #500]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f94c:	f001 fcb0 	bl	80112b0 <iprintf>
 800f950:	487c      	ldr	r0, [pc, #496]	@ (800fb44 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 800f952:	f001 fd1d 	bl	8011390 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 800f956:	88fc      	ldrh	r4, [r7, #6]
 800f958:	88bd      	ldrh	r5, [r7, #4]
 800f95a:	68b8      	ldr	r0, [r7, #8]
 800f95c:	f7f0 fc10 	bl	8000180 <strlen>
 800f960:	4603      	mov	r3, r0
 800f962:	b2da      	uxtb	r2, r3
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	9300      	str	r3, [sp, #0]
 800f968:	4613      	mov	r3, r2
 800f96a:	2200      	movs	r2, #0
 800f96c:	4629      	mov	r1, r5
 800f96e:	4620      	mov	r0, r4
 800f970:	f7fd ff5f 	bl	800d832 <aci_gatt_update_char_value>
 800f974:	4603      	mov	r3, r0
 800f976:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 800f978:	88f8      	ldrh	r0, [r7, #6]
 800f97a:	8879      	ldrh	r1, [r7, #2]
 800f97c:	463b      	mov	r3, r7
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	2302      	movs	r3, #2
 800f982:	2200      	movs	r2, #0
 800f984:	f7fd ff55 	bl	800d832 <aci_gatt_update_char_value>
 800f988:	4603      	mov	r3, r0
 800f98a:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 800f98c:	2202      	movs	r2, #2
 800f98e:	2102      	movs	r1, #2
 800f990:	2000      	movs	r0, #0
 800f992:	f7fe f9b0 	bl	800dcf6 <hci_le_set_default_phy>
 800f996:	4603      	mov	r3, r0
 800f998:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f99a:	7dfb      	ldrb	r3, [r7, #23]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d00f      	beq.n	800f9c0 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 800f9a0:	4865      	ldr	r0, [pc, #404]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f9a2:	f7ff f971 	bl	800ec88 <DbgTraceGetFileName>
 800f9a6:	4601      	mov	r1, r0
 800f9a8:	f44f 7371 	mov.w	r3, #964	@ 0x3c4
 800f9ac:	4a63      	ldr	r2, [pc, #396]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f9ae:	4864      	ldr	r0, [pc, #400]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f9b0:	f001 fc7e 	bl	80112b0 <iprintf>
 800f9b4:	7dfb      	ldrb	r3, [r7, #23]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4863      	ldr	r0, [pc, #396]	@ (800fb48 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 800f9ba:	f001 fc79 	bl	80112b0 <iprintf>
 800f9be:	e00c      	b.n	800f9da <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 800f9c0:	485d      	ldr	r0, [pc, #372]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f9c2:	f7ff f961 	bl	800ec88 <DbgTraceGetFileName>
 800f9c6:	4601      	mov	r1, r0
 800f9c8:	f44f 7372 	mov.w	r3, #968	@ 0x3c8
 800f9cc:	4a5b      	ldr	r2, [pc, #364]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800f9ce:	485c      	ldr	r0, [pc, #368]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800f9d0:	f001 fc6e 	bl	80112b0 <iprintf>
 800f9d4:	485d      	ldr	r0, [pc, #372]	@ (800fb4c <Ble_Hci_Gap_Gatt_Init+0x500>)
 800f9d6:	f001 fcdb 	bl	8011390 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 800f9da:	4b5d      	ldr	r3, [pc, #372]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f9dc:	2201      	movs	r2, #1
 800f9de:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 800f9e0:	4b5b      	ldr	r3, [pc, #364]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800f9e2:	781b      	ldrb	r3, [r3, #0]
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	f7fd f9f8 	bl	800cdda <aci_gap_set_io_capability>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 800f9ee:	7dfb      	ldrb	r3, [r7, #23]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d00f      	beq.n	800fa14 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 800f9f4:	4850      	ldr	r0, [pc, #320]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800f9f6:	f7ff f947 	bl	800ec88 <DbgTraceGetFileName>
 800f9fa:	4601      	mov	r1, r0
 800f9fc:	f240 33d2 	movw	r3, #978	@ 0x3d2
 800fa00:	4a4e      	ldr	r2, [pc, #312]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa02:	484f      	ldr	r0, [pc, #316]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa04:	f001 fc54 	bl	80112b0 <iprintf>
 800fa08:	7dfb      	ldrb	r3, [r7, #23]
 800fa0a:	4619      	mov	r1, r3
 800fa0c:	4851      	ldr	r0, [pc, #324]	@ (800fb54 <Ble_Hci_Gap_Gatt_Init+0x508>)
 800fa0e:	f001 fc4f 	bl	80112b0 <iprintf>
 800fa12:	e00c      	b.n	800fa2e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 800fa14:	4848      	ldr	r0, [pc, #288]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fa16:	f7ff f937 	bl	800ec88 <DbgTraceGetFileName>
 800fa1a:	4601      	mov	r1, r0
 800fa1c:	f240 33d6 	movw	r3, #982	@ 0x3d6
 800fa20:	4a46      	ldr	r2, [pc, #280]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa22:	4847      	ldr	r0, [pc, #284]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa24:	f001 fc44 	bl	80112b0 <iprintf>
 800fa28:	484b      	ldr	r0, [pc, #300]	@ (800fb58 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 800fa2a:	f001 fcb1 	bl	8011390 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 800fa2e:	4b48      	ldr	r3, [pc, #288]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa30:	2201      	movs	r2, #1
 800fa32:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 800fa34:	4b46      	ldr	r3, [pc, #280]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa36:	2208      	movs	r2, #8
 800fa38:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 800fa3a:	4b45      	ldr	r3, [pc, #276]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa3c:	2210      	movs	r2, #16
 800fa3e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 800fa40:	4b43      	ldr	r3, [pc, #268]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa42:	2200      	movs	r2, #0
 800fa44:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 800fa46:	4b42      	ldr	r3, [pc, #264]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa48:	4a44      	ldr	r2, [pc, #272]	@ (800fb5c <Ble_Hci_Gap_Gatt_Init+0x510>)
 800fa4a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 800fa4c:	4b40      	ldr	r3, [pc, #256]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa4e:	2200      	movs	r2, #0
 800fa50:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 800fa52:	4b3f      	ldr	r3, [pc, #252]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa54:	789c      	ldrb	r4, [r3, #2]
 800fa56:	4b3e      	ldr	r3, [pc, #248]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa58:	785d      	ldrb	r5, [r3, #1]
 800fa5a:	4b3d      	ldr	r3, [pc, #244]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa5c:	791b      	ldrb	r3, [r3, #4]
 800fa5e:	4a3c      	ldr	r2, [pc, #240]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa60:	7952      	ldrb	r2, [r2, #5]
 800fa62:	493b      	ldr	r1, [pc, #236]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa64:	78c9      	ldrb	r1, [r1, #3]
 800fa66:	483a      	ldr	r0, [pc, #232]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fa68:	6880      	ldr	r0, [r0, #8]
 800fa6a:	2600      	movs	r6, #0
 800fa6c:	9604      	str	r6, [sp, #16]
 800fa6e:	9003      	str	r0, [sp, #12]
 800fa70:	9102      	str	r1, [sp, #8]
 800fa72:	9201      	str	r2, [sp, #4]
 800fa74:	9300      	str	r3, [sp, #0]
 800fa76:	2300      	movs	r3, #0
 800fa78:	2201      	movs	r2, #1
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f7fd fa00 	bl	800ce82 <aci_gap_set_authentication_requirement>
 800fa82:	4603      	mov	r3, r0
 800fa84:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 800fa86:	7dfb      	ldrb	r3, [r7, #23]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d00f      	beq.n	800faac <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 800fa8c:	482a      	ldr	r0, [pc, #168]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fa8e:	f7ff f8fb 	bl	800ec88 <DbgTraceGetFileName>
 800fa92:	4601      	mov	r1, r0
 800fa94:	f240 33f1 	movw	r3, #1009	@ 0x3f1
 800fa98:	4a28      	ldr	r2, [pc, #160]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fa9a:	4829      	ldr	r0, [pc, #164]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fa9c:	f001 fc08 	bl	80112b0 <iprintf>
 800faa0:	7dfb      	ldrb	r3, [r7, #23]
 800faa2:	4619      	mov	r1, r3
 800faa4:	482e      	ldr	r0, [pc, #184]	@ (800fb60 <Ble_Hci_Gap_Gatt_Init+0x514>)
 800faa6:	f001 fc03 	bl	80112b0 <iprintf>
 800faaa:	e00c      	b.n	800fac6 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 800faac:	4822      	ldr	r0, [pc, #136]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800faae:	f7ff f8eb 	bl	800ec88 <DbgTraceGetFileName>
 800fab2:	4601      	mov	r1, r0
 800fab4:	f240 33f5 	movw	r3, #1013	@ 0x3f5
 800fab8:	4a20      	ldr	r2, [pc, #128]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800faba:	4821      	ldr	r0, [pc, #132]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fabc:	f001 fbf8 	bl	80112b0 <iprintf>
 800fac0:	4828      	ldr	r0, [pc, #160]	@ (800fb64 <Ble_Hci_Gap_Gatt_Init+0x518>)
 800fac2:	f001 fc65 	bl	8011390 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800fac6:	4b22      	ldr	r3, [pc, #136]	@ (800fb50 <Ble_Hci_Gap_Gatt_Init+0x504>)
 800fac8:	789b      	ldrb	r3, [r3, #2]
 800faca:	2b00      	cmp	r3, #0
 800facc:	d023      	beq.n	800fb16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 800face:	f7fd fc22 	bl	800d316 <aci_gap_configure_filter_accept_list>
 800fad2:	4603      	mov	r3, r0
 800fad4:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800fad6:	7dfb      	ldrb	r3, [r7, #23]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00f      	beq.n	800fafc <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 800fadc:	4816      	ldr	r0, [pc, #88]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fade:	f7ff f8d3 	bl	800ec88 <DbgTraceGetFileName>
 800fae2:	4601      	mov	r1, r0
 800fae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fae8:	4a14      	ldr	r2, [pc, #80]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800faea:	4815      	ldr	r0, [pc, #84]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800faec:	f001 fbe0 	bl	80112b0 <iprintf>
 800faf0:	7dfb      	ldrb	r3, [r7, #23]
 800faf2:	4619      	mov	r1, r3
 800faf4:	481c      	ldr	r0, [pc, #112]	@ (800fb68 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 800faf6:	f001 fbdb 	bl	80112b0 <iprintf>
 800fafa:	e00c      	b.n	800fb16 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800fafc:	480e      	ldr	r0, [pc, #56]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fafe:	f7ff f8c3 	bl	800ec88 <DbgTraceGetFileName>
 800fb02:	4601      	mov	r1, r0
 800fb04:	f240 4304 	movw	r3, #1028	@ 0x404
 800fb08:	4a0c      	ldr	r2, [pc, #48]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb0a:	480d      	ldr	r0, [pc, #52]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb0c:	f001 fbd0 	bl	80112b0 <iprintf>
 800fb10:	4816      	ldr	r0, [pc, #88]	@ (800fb6c <Ble_Hci_Gap_Gatt_Init+0x520>)
 800fb12:	f001 fc3d 	bl	8011390 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 800fb16:	4808      	ldr	r0, [pc, #32]	@ (800fb38 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 800fb18:	f7ff f8b6 	bl	800ec88 <DbgTraceGetFileName>
 800fb1c:	4601      	mov	r1, r0
 800fb1e:	f240 4307 	movw	r3, #1031	@ 0x407
 800fb22:	4a06      	ldr	r2, [pc, #24]	@ (800fb3c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 800fb24:	4806      	ldr	r0, [pc, #24]	@ (800fb40 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 800fb26:	f001 fbc3 	bl	80112b0 <iprintf>
 800fb2a:	4811      	ldr	r0, [pc, #68]	@ (800fb70 <Ble_Hci_Gap_Gatt_Init+0x524>)
 800fb2c:	f001 fbc0 	bl	80112b0 <iprintf>
}
 800fb30:	bf00      	nop
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb38:	080129b0 	.word	0x080129b0
 800fb3c:	08013d6c 	.word	0x08013d6c
 800fb40:	080129cc 	.word	0x080129cc
 800fb44:	080132b8 	.word	0x080132b8
 800fb48:	080132d8 	.word	0x080132d8
 800fb4c:	08013314 	.word	0x08013314
 800fb50:	200008cc 	.word	0x200008cc
 800fb54:	08013340 	.word	0x08013340
 800fb58:	08013380 	.word	0x08013380
 800fb5c:	0001b207 	.word	0x0001b207
 800fb60:	080133b0 	.word	0x080133b0
 800fb64:	080133fc 	.word	0x080133fc
 800fb68:	08013438 	.word	0x08013438
 800fb6c:	08013478 	.word	0x08013478
 800fb70:	080134a8 	.word	0x080134a8

0800fb74 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b08c      	sub	sp, #48	@ 0x30
 800fb78:	af08      	add	r7, sp, #32
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fb7e:	2392      	movs	r3, #146	@ 0x92
 800fb80:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 800fb82:	4a32      	ldr	r2, [pc, #200]	@ (800fc4c <Adv_Request+0xd8>)
 800fb84:	79fb      	ldrb	r3, [r7, #7]
 800fb86:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	9306      	str	r3, [sp, #24]
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9305      	str	r3, [sp, #20]
 800fb92:	2300      	movs	r3, #0
 800fb94:	9304      	str	r3, [sp, #16]
 800fb96:	2300      	movs	r3, #0
 800fb98:	9303      	str	r3, [sp, #12]
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	9302      	str	r3, [sp, #8]
 800fb9e:	2300      	movs	r3, #0
 800fba0:	9301      	str	r3, [sp, #4]
 800fba2:	2300      	movs	r3, #0
 800fba4:	9300      	str	r3, [sp, #0]
 800fba6:	2300      	movs	r3, #0
 800fba8:	22a0      	movs	r2, #160	@ 0xa0
 800fbaa:	2180      	movs	r1, #128	@ 0x80
 800fbac:	2000      	movs	r0, #0
 800fbae:	f7fd f81a 	bl	800cbe6 <aci_gap_set_discoverable>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800fbb6:	7bfb      	ldrb	r3, [r7, #15]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d00f      	beq.n	800fbdc <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 800fbbc:	4824      	ldr	r0, [pc, #144]	@ (800fc50 <Adv_Request+0xdc>)
 800fbbe:	f7ff f863 	bl	800ec88 <DbgTraceGetFileName>
 800fbc2:	4601      	mov	r1, r0
 800fbc4:	f240 431d 	movw	r3, #1053	@ 0x41d
 800fbc8:	4a22      	ldr	r2, [pc, #136]	@ (800fc54 <Adv_Request+0xe0>)
 800fbca:	4823      	ldr	r0, [pc, #140]	@ (800fc58 <Adv_Request+0xe4>)
 800fbcc:	f001 fb70 	bl	80112b0 <iprintf>
 800fbd0:	7bfb      	ldrb	r3, [r7, #15]
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	4821      	ldr	r0, [pc, #132]	@ (800fc5c <Adv_Request+0xe8>)
 800fbd6:	f001 fb6b 	bl	80112b0 <iprintf>
 800fbda:	e00c      	b.n	800fbf6 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 800fbdc:	481c      	ldr	r0, [pc, #112]	@ (800fc50 <Adv_Request+0xdc>)
 800fbde:	f7ff f853 	bl	800ec88 <DbgTraceGetFileName>
 800fbe2:	4601      	mov	r1, r0
 800fbe4:	f240 4321 	movw	r3, #1057	@ 0x421
 800fbe8:	4a1a      	ldr	r2, [pc, #104]	@ (800fc54 <Adv_Request+0xe0>)
 800fbea:	481b      	ldr	r0, [pc, #108]	@ (800fc58 <Adv_Request+0xe4>)
 800fbec:	f001 fb60 	bl	80112b0 <iprintf>
 800fbf0:	481b      	ldr	r0, [pc, #108]	@ (800fc60 <Adv_Request+0xec>)
 800fbf2:	f001 fbcd 	bl	8011390 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 800fbf6:	491b      	ldr	r1, [pc, #108]	@ (800fc64 <Adv_Request+0xf0>)
 800fbf8:	201b      	movs	r0, #27
 800fbfa:	f7fd fb1a 	bl	800d232 <aci_gap_update_adv_data>
 800fbfe:	4603      	mov	r3, r0
 800fc00:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 800fc02:	7bfb      	ldrb	r3, [r7, #15]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d00f      	beq.n	800fc28 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800fc08:	4811      	ldr	r0, [pc, #68]	@ (800fc50 <Adv_Request+0xdc>)
 800fc0a:	f7ff f83d 	bl	800ec88 <DbgTraceGetFileName>
 800fc0e:	4601      	mov	r1, r0
 800fc10:	f240 432c 	movw	r3, #1068	@ 0x42c
 800fc14:	4a0f      	ldr	r2, [pc, #60]	@ (800fc54 <Adv_Request+0xe0>)
 800fc16:	4810      	ldr	r0, [pc, #64]	@ (800fc58 <Adv_Request+0xe4>)
 800fc18:	f001 fb4a 	bl	80112b0 <iprintf>
 800fc1c:	7bfb      	ldrb	r3, [r7, #15]
 800fc1e:	4619      	mov	r1, r3
 800fc20:	4811      	ldr	r0, [pc, #68]	@ (800fc68 <Adv_Request+0xf4>)
 800fc22:	f001 fb45 	bl	80112b0 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 800fc26:	e00d      	b.n	800fc44 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800fc28:	4809      	ldr	r0, [pc, #36]	@ (800fc50 <Adv_Request+0xdc>)
 800fc2a:	f7ff f82d 	bl	800ec88 <DbgTraceGetFileName>
 800fc2e:	4601      	mov	r1, r0
 800fc30:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800fc34:	4a07      	ldr	r2, [pc, #28]	@ (800fc54 <Adv_Request+0xe0>)
 800fc36:	4808      	ldr	r0, [pc, #32]	@ (800fc58 <Adv_Request+0xe4>)
 800fc38:	f001 fb3a 	bl	80112b0 <iprintf>
 800fc3c:	480b      	ldr	r0, [pc, #44]	@ (800fc6c <Adv_Request+0xf8>)
 800fc3e:	f001 fb37 	bl	80112b0 <iprintf>
  return;
 800fc42:	bf00      	nop
}
 800fc44:	3710      	adds	r7, #16
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	200008cc 	.word	0x200008cc
 800fc50:	080129b0 	.word	0x080129b0
 800fc54:	08013d84 	.word	0x08013d84
 800fc58:	080129cc 	.word	0x080129cc
 800fc5c:	080134d4 	.word	0x080134d4
 800fc60:	0801350c 	.word	0x0801350c
 800fc64:	200000e8 	.word	0x200000e8
 800fc68:	08013534 	.word	0x08013534
 800fc6c:	08013568 	.word	0x08013568

0800fc70 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 800fc76:	f7ff f915 	bl	800eea4 <LL_FLASH_GetUDN>
 800fc7a:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc82:	d023      	beq.n	800fccc <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 800fc84:	f7ff f926 	bl	800eed4 <LL_FLASH_GetSTCompanyID>
 800fc88:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 800fc8a:	f7ff f917 	bl	800eebc <LL_FLASH_GetDeviceID>
 800fc8e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	b2da      	uxtb	r2, r3
 800fc94:	4b16      	ldr	r3, [pc, #88]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fc96:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	0a1b      	lsrs	r3, r3, #8
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	4b14      	ldr	r3, [pc, #80]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fca0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	b2da      	uxtb	r2, r3
 800fca6:	4b12      	ldr	r3, [pc, #72]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fca8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	b2da      	uxtb	r2, r3
 800fcae:	4b10      	ldr	r3, [pc, #64]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fcb0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	0a1b      	lsrs	r3, r3, #8
 800fcb6:	b2da      	uxtb	r2, r3
 800fcb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fcba:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 800fcbc:	68bb      	ldr	r3, [r7, #8]
 800fcbe:	0c1b      	lsrs	r3, r3, #16
 800fcc0:	b2da      	uxtb	r2, r3
 800fcc2:	4b0b      	ldr	r3, [pc, #44]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fcc4:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 800fcc6:	4b0a      	ldr	r3, [pc, #40]	@ (800fcf0 <BleGetBdAddress+0x80>)
 800fcc8:	617b      	str	r3, [r7, #20]
 800fcca:	e00b      	b.n	800fce4 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 800fccc:	2000      	movs	r0, #0
 800fcce:	f7ff f803 	bl	800ecd8 <OTP_Read>
 800fcd2:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d002      	beq.n	800fce0 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	617b      	str	r3, [r7, #20]
 800fcde:	e001      	b.n	800fce4 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800fce0:	4b04      	ldr	r3, [pc, #16]	@ (800fcf4 <BleGetBdAddress+0x84>)
 800fce2:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 800fce4:	697b      	ldr	r3, [r7, #20]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3718      	adds	r7, #24
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200008c4 	.word	0x200008c4
 800fcf4:	08013d1c 	.word	0x08013d1c

0800fcf8 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 800fcfe:	4b1f      	ldr	r3, [pc, #124]	@ (800fd7c <Adv_Cancel+0x84>)
 800fd00:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800fd04:	2b05      	cmp	r3, #5
 800fd06:	d035      	beq.n	800fd74 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fd08:	2392      	movs	r3, #146	@ 0x92
 800fd0a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800fd0c:	f7fc ff47 	bl	800cb9e <aci_gap_set_non_discoverable>
 800fd10:	4603      	mov	r3, r0
 800fd12:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fd14:	4b19      	ldr	r3, [pc, #100]	@ (800fd7c <Adv_Cancel+0x84>)
 800fd16:	2200      	movs	r2, #0
 800fd18:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00d      	beq.n	800fd3e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 800fd22:	4817      	ldr	r0, [pc, #92]	@ (800fd80 <Adv_Cancel+0x88>)
 800fd24:	f7fe ffb0 	bl	800ec88 <DbgTraceGetFileName>
 800fd28:	4601      	mov	r1, r0
 800fd2a:	f240 437e 	movw	r3, #1150	@ 0x47e
 800fd2e:	4a15      	ldr	r2, [pc, #84]	@ (800fd84 <Adv_Cancel+0x8c>)
 800fd30:	4815      	ldr	r0, [pc, #84]	@ (800fd88 <Adv_Cancel+0x90>)
 800fd32:	f001 fabd 	bl	80112b0 <iprintf>
 800fd36:	4815      	ldr	r0, [pc, #84]	@ (800fd8c <Adv_Cancel+0x94>)
 800fd38:	f001 faba 	bl	80112b0 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800fd3c:	e01a      	b.n	800fd74 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 800fd3e:	4810      	ldr	r0, [pc, #64]	@ (800fd80 <Adv_Cancel+0x88>)
 800fd40:	f7fe ffa2 	bl	800ec88 <DbgTraceGetFileName>
 800fd44:	4601      	mov	r1, r0
 800fd46:	f240 4382 	movw	r3, #1154	@ 0x482
 800fd4a:	4a0e      	ldr	r2, [pc, #56]	@ (800fd84 <Adv_Cancel+0x8c>)
 800fd4c:	480e      	ldr	r0, [pc, #56]	@ (800fd88 <Adv_Cancel+0x90>)
 800fd4e:	f001 faaf 	bl	80112b0 <iprintf>
 800fd52:	480f      	ldr	r0, [pc, #60]	@ (800fd90 <Adv_Cancel+0x98>)
 800fd54:	f001 faac 	bl	80112b0 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 800fd58:	4809      	ldr	r0, [pc, #36]	@ (800fd80 <Adv_Cancel+0x88>)
 800fd5a:	f7fe ff95 	bl	800ec88 <DbgTraceGetFileName>
 800fd5e:	4601      	mov	r1, r0
 800fd60:	f240 4383 	movw	r3, #1155	@ 0x483
 800fd64:	4a07      	ldr	r2, [pc, #28]	@ (800fd84 <Adv_Cancel+0x8c>)
 800fd66:	4808      	ldr	r0, [pc, #32]	@ (800fd88 <Adv_Cancel+0x90>)
 800fd68:	f001 faa2 	bl	80112b0 <iprintf>
 800fd6c:	4809      	ldr	r0, [pc, #36]	@ (800fd94 <Adv_Cancel+0x9c>)
 800fd6e:	f001 fa9f 	bl	80112b0 <iprintf>
  return;
 800fd72:	bf00      	nop
 800fd74:	bf00      	nop
}
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	200008cc 	.word	0x200008cc
 800fd80:	080129b0 	.word	0x080129b0
 800fd84:	08013d90 	.word	0x08013d90
 800fd88:	080129cc 	.word	0x080129cc
 800fd8c:	08013590 	.word	0x08013590
 800fd90:	080135b4 	.word	0x080135b4
 800fd94:	080135bc 	.word	0x080135bc

0800fd98 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b082      	sub	sp, #8
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 800fda0:	2100      	movs	r1, #0
 800fda2:	2002      	movs	r0, #2
 800fda4:	f001 f8a6 	bl	8010ef4 <UTIL_SEQ_SetTask>

  return;
 800fda8:	bf00      	nop
}
 800fdaa:	3708      	adds	r7, #8
 800fdac:	46bd      	mov	sp, r7
 800fdae:	bd80      	pop	{r7, pc}

0800fdb0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b082      	sub	sp, #8
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800fdb8:	2001      	movs	r0, #1
 800fdba:	f001 f907 	bl	8010fcc <UTIL_SEQ_SetEvt>

  return;
 800fdbe:	bf00      	nop
}
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800fdce:	2001      	movs	r0, #1
 800fdd0:	f001 f91c 	bl	801100c <UTIL_SEQ_WaitEvt>

  return;
 800fdd4:	bf00      	nop
}
 800fdd6:	3708      	adds	r7, #8
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bd80      	pop	{r7, pc}

0800fddc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	3308      	adds	r3, #8
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fe f8e8 	bl	800dfc4 <SVCCTL_UserEvtRx>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d003      	beq.n	800fe06 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	2201      	movs	r2, #1
 800fe02:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 800fe04:	e003      	b.n	800fe0e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	701a      	strb	r2, [r3, #0]
  return;
 800fe0c:	bf00      	nop
}
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800fe1e:	79fb      	ldrb	r3, [r7, #7]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d002      	beq.n	800fe2a <BLE_StatusNot+0x16>
 800fe24:	2b01      	cmp	r3, #1
 800fe26:	d006      	beq.n	800fe36 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 800fe28:	e00b      	b.n	800fe42 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800fe2a:	2307      	movs	r3, #7
 800fe2c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800fe2e:	68f8      	ldr	r0, [r7, #12]
 800fe30:	f001 f88c 	bl	8010f4c <UTIL_SEQ_PauseTask>
      break;
 800fe34:	e005      	b.n	800fe42 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800fe36:	2307      	movs	r3, #7
 800fe38:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f001 f8a6 	bl	8010f8c <UTIL_SEQ_ResumeTask>
      break;
 800fe40:	bf00      	nop
  }

  return;
 800fe42:	bf00      	nop
}
 800fe44:	3710      	adds	r7, #16
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}
	...

0800fe4c <Custom_STM_App_Notification>:
static void Custom_Appli_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	b082      	sub	sp, #8
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	2b04      	cmp	r3, #4
 800fe5a:	d822      	bhi.n	800fea2 <Custom_STM_App_Notification+0x56>
 800fe5c:	a201      	add	r2, pc, #4	@ (adr r2, 800fe64 <Custom_STM_App_Notification+0x18>)
 800fe5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe62:	bf00      	nop
 800fe64:	0800fe79 	.word	0x0800fe79
 800fe68:	0800fe85 	.word	0x0800fe85
 800fe6c:	0800fea3 	.word	0x0800fea3
 800fe70:	0800fe8d 	.word	0x0800fe8d
 800fe74:	0800fea3 	.word	0x0800fea3
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Mvt_def */
    case CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 1;
 800fe78:	4b0c      	ldr	r3, [pc, #48]	@ (800feac <Custom_STM_App_Notification+0x60>)
 800fe7a:	2201      	movs	r2, #1
 800fe7c:	701a      	strb	r2, [r3, #0]
    	    	Custom_Mvt_rep_Send_Notification();
 800fe7e:	f000 f8c3 	bl	8010008 <Custom_Mvt_rep_Send_Notification>
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
      break;
 800fe82:	e00f      	b.n	800fea4 <Custom_STM_App_Notification+0x58>

    case CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 0;
 800fe84:	4b09      	ldr	r3, [pc, #36]	@ (800feac <Custom_STM_App_Notification+0x60>)
 800fe86:	2200      	movs	r2, #0
 800fe88:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
      break;
 800fe8a:	e00b      	b.n	800fea4 <Custom_STM_App_Notification+0x58>
      /* USER CODE END CUSTOM_STM_APPEL_APP_READ_EVT */
      break;

    case CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
    	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6859      	ldr	r1, [r3, #4]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	7a1b      	ldrb	r3, [r3, #8]
 800fe94:	461a      	mov	r2, r3
 800fe96:	4806      	ldr	r0, [pc, #24]	@ (800feb0 <Custom_STM_App_Notification+0x64>)
 800fe98:	f001 fbeb 	bl	8011672 <memcpy>
    	Custom_Appli_Update_Char();
 800fe9c:	f000 fa0c 	bl	80102b8 <Custom_Appli_Update_Char>
      /* USER CODE END CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
      break;
 800fea0:	e000      	b.n	800fea4 <Custom_STM_App_Notification+0x58>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 800fea2:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 800fea4:	bf00      	nop
}
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	20000954 	.word	0x20000954
 800feb0:	20000958 	.word	0x20000958

0800feb4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 800feb4:	b480      	push	{r7}
 800feb6:	b083      	sub	sp, #12
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	781b      	ldrb	r3, [r3, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d002      	beq.n	800feca <Custom_APP_Notification+0x16>
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	d002      	beq.n	800fece <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 800fec8:	e002      	b.n	800fed0 <Custom_APP_Notification+0x1c>
      break;
 800feca:	bf00      	nop
 800fecc:	e000      	b.n	800fed0 <Custom_APP_Notification+0x1c>
      break;
 800fece:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 800fed0:	bf00      	nop
}
 800fed2:	370c      	adds	r7, #12
 800fed4:	46bd      	mov	sp, r7
 800fed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feda:	4770      	bx	lr

0800fedc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.rep_status = 0;
 800fee0:	4b05      	ldr	r3, [pc, #20]	@ (800fef8 <Custom_APP_Init+0x1c>)
 800fee2:	2200      	movs	r2, #0
 800fee4:	705a      	strb	r2, [r3, #1]
		UTIL_SEQ_RegTask(1<<CFG_TASK_ACC_rep_ID, UTIL_SEQ_RFU, Custom_Mvt_rep_Send_Notification);
 800fee6:	4a05      	ldr	r2, [pc, #20]	@ (800fefc <Custom_APP_Init+0x20>)
 800fee8:	2100      	movs	r1, #0
 800feea:	2004      	movs	r0, #4
 800feec:	f000 ffe0 	bl	8010eb0 <UTIL_SEQ_RegTask>
		Custom_Mvt_rep_Update_Char();
 800fef0:	f000 f876 	bl	800ffe0 <Custom_Mvt_rep_Update_Char>
  /* USER CODE END CUSTOM_APP_Init */
  return;
 800fef4:	bf00      	nop
}
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	20000954 	.word	0x20000954
 800fefc:	08010009 	.word	0x08010009

0800ff00 <FSVC_MVT_REF_fin>:

/* USER CODE BEGIN FD */
void FSVC_MVT_REF_fin(void)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff04:	2100      	movs	r1, #0
 800ff06:	2004      	movs	r0, #4
 800ff08:	f000 fff4 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 1;
 800ff0c:	4b02      	ldr	r3, [pc, #8]	@ (800ff18 <FSVC_MVT_REF_fin+0x18>)
 800ff0e:	2201      	movs	r2, #1
 800ff10:	705a      	strb	r2, [r3, #1]

  return;
 800ff12:	bf00      	nop
}
 800ff14:	bd80      	pop	{r7, pc}
 800ff16:	bf00      	nop
 800ff18:	20000954 	.word	0x20000954

0800ff1c <FSVC_MVT_REF_vide>:
void FSVC_MVT_REF_vide(void)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff20:	2100      	movs	r1, #0
 800ff22:	2004      	movs	r0, #4
 800ff24:	f000 ffe6 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 2;
 800ff28:	4b02      	ldr	r3, [pc, #8]	@ (800ff34 <FSVC_MVT_REF_vide+0x18>)
 800ff2a:	2202      	movs	r2, #2
 800ff2c:	705a      	strb	r2, [r3, #1]

  return;
 800ff2e:	bf00      	nop
}
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	20000954 	.word	0x20000954

0800ff38 <FSVC_MVT_REF_validation_succes>:
void FSVC_MVT_REF_validation_succes(void)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff3c:	2100      	movs	r1, #0
 800ff3e:	2004      	movs	r0, #4
 800ff40:	f000 ffd8 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 3;
 800ff44:	4b02      	ldr	r3, [pc, #8]	@ (800ff50 <FSVC_MVT_REF_validation_succes+0x18>)
 800ff46:	2203      	movs	r2, #3
 800ff48:	705a      	strb	r2, [r3, #1]

  return;
 800ff4a:	bf00      	nop
}
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	20000954 	.word	0x20000954

0800ff54 <FSVC_MVT_REF_validation_fail>:
void FSVC_MVT_REF_validation_fail(void)
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff58:	2100      	movs	r1, #0
 800ff5a:	2004      	movs	r0, #4
 800ff5c:	f000 ffca 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 4;
 800ff60:	4b02      	ldr	r3, [pc, #8]	@ (800ff6c <FSVC_MVT_REF_validation_fail+0x18>)
 800ff62:	2204      	movs	r2, #4
 800ff64:	705a      	strb	r2, [r3, #1]

  return;
 800ff66:	bf00      	nop
}
 800ff68:	bd80      	pop	{r7, pc}
 800ff6a:	bf00      	nop
 800ff6c:	20000954 	.word	0x20000954

0800ff70 <FSVC_MVT_REF_validation_vide>:
void FSVC_MVT_REF_validation_vide(void)
{
 800ff70:	b580      	push	{r7, lr}
 800ff72:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff74:	2100      	movs	r1, #0
 800ff76:	2004      	movs	r0, #4
 800ff78:	f000 ffbc 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 5;
 800ff7c:	4b02      	ldr	r3, [pc, #8]	@ (800ff88 <FSVC_MVT_REF_validation_vide+0x18>)
 800ff7e:	2205      	movs	r2, #5
 800ff80:	705a      	strb	r2, [r3, #1]

  return;
 800ff82:	bf00      	nop
}
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	20000954 	.word	0x20000954

0800ff8c <FSVC_MVT_vide>:
void FSVC_MVT_vide(void)
{
 800ff8c:	b580      	push	{r7, lr}
 800ff8e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ff90:	2100      	movs	r1, #0
 800ff92:	2004      	movs	r0, #4
 800ff94:	f000 ffae 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 6;
 800ff98:	4b02      	ldr	r3, [pc, #8]	@ (800ffa4 <FSVC_MVT_vide+0x18>)
 800ff9a:	2206      	movs	r2, #6
 800ff9c:	705a      	strb	r2, [r3, #1]

  return;
 800ff9e:	bf00      	nop
}
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	20000954 	.word	0x20000954

0800ffa8 <FSVC_MVT_valide>:
void FSVC_MVT_valide(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ffac:	2100      	movs	r1, #0
 800ffae:	2004      	movs	r0, #4
 800ffb0:	f000 ffa0 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 7;
 800ffb4:	4b02      	ldr	r3, [pc, #8]	@ (800ffc0 <FSVC_MVT_valide+0x18>)
 800ffb6:	2207      	movs	r2, #7
 800ffb8:	705a      	strb	r2, [r3, #1]

  return;
 800ffba:	bf00      	nop
}
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	20000954 	.word	0x20000954

0800ffc4 <FSVC_MVT_non_valide>:
void FSVC_MVT_non_valide(void)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 800ffc8:	2100      	movs	r1, #0
 800ffca:	2004      	movs	r0, #4
 800ffcc:	f000 ff92 	bl	8010ef4 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 8;
 800ffd0:	4b02      	ldr	r3, [pc, #8]	@ (800ffdc <FSVC_MVT_non_valide+0x18>)
 800ffd2:	2208      	movs	r2, #8
 800ffd4:	705a      	strb	r2, [r3, #1]

  return;
 800ffd6:	bf00      	nop
}
 800ffd8:	bd80      	pop	{r7, pc}
 800ffda:	bf00      	nop
 800ffdc:	20000954 	.word	0x20000954

0800ffe0 <Custom_Mvt_rep_Update_Char>:
 *
 *************************************************************/

/* Mvt_def */
void Custom_Mvt_rep_Update_Char(void) /* Property Read */
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mvt_rep_UC_1*/

  /* USER CODE END Mvt_rep_UC_1*/

  if (updateflag != 0)
 800ffea:	79fb      	ldrb	r3, [r7, #7]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d004      	beq.n	800fffa <Custom_Mvt_rep_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)UpdateCharData);
 800fff0:	4904      	ldr	r1, [pc, #16]	@ (8010004 <Custom_Mvt_rep_Update_Char+0x24>)
 800fff2:	2000      	movs	r0, #0
 800fff4:	f000 fb44 	bl	8010680 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mvt_rep_UC_Last*/

  /* USER CODE END Mvt_rep_UC_Last*/
  return;
 800fff8:	bf00      	nop
 800fffa:	bf00      	nop
}
 800fffc:	3708      	adds	r7, #8
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	20000958 	.word	0x20000958

08010008 <Custom_Mvt_rep_Send_Notification>:

void Custom_Mvt_rep_Send_Notification(void) /* Property Notification */
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b090      	sub	sp, #64	@ 0x40
 801000c:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* USER CODE BEGIN Mvt_rep_NS_1*/
  if (Custom_App_Context.Mvt_rep_Notification_Status == 1)
 8010014:	4b94      	ldr	r3, [pc, #592]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b01      	cmp	r3, #1
 801001a:	f040 810a 	bne.w	8010232 <Custom_Mvt_rep_Send_Notification+0x22a>
  	{
  	  updateflag = 1;
 801001e:	2301      	movs	r3, #1
 8010020:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  	  if(Custom_App_Context.rep_status == 1)
 8010024:	4b90      	ldr	r3, [pc, #576]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 8010026:	785b      	ldrb	r3, [r3, #1]
 8010028:	2b01      	cmp	r3, #1
 801002a:	d11c      	bne.n	8010066 <Custom_Mvt_rep_Send_Notification+0x5e>
  	  {

  		  char rep_ref_fin[] = "finr";
 801002c:	4a8f      	ldr	r2, [pc, #572]	@ (801026c <Custom_Mvt_rep_Send_Notification+0x264>)
 801002e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010036:	6018      	str	r0, [r3, #0]
 8010038:	3304      	adds	r3, #4
 801003a:	7019      	strb	r1, [r3, #0]
  		 		  memcpy(&NotifyCharData[0], &rep_ref_fin, sizeof(rep_ref_fin));
 801003c:	4b8c      	ldr	r3, [pc, #560]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 801003e:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8010042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010046:	6018      	str	r0, [r3, #0]
 8010048:	3304      	adds	r3, #4
 801004a:	7019      	strb	r1, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_fin good \n");
 801004c:	4889      	ldr	r0, [pc, #548]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 801004e:	f7fe fe1b 	bl	800ec88 <DbgTraceGetFileName>
 8010052:	4601      	mov	r1, r0
 8010054:	f240 1323 	movw	r3, #291	@ 0x123
 8010058:	4a87      	ldr	r2, [pc, #540]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 801005a:	4888      	ldr	r0, [pc, #544]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 801005c:	f001 f928 	bl	80112b0 <iprintf>
 8010060:	4887      	ldr	r0, [pc, #540]	@ (8010280 <Custom_Mvt_rep_Send_Notification+0x278>)
 8010062:	f001 f995 	bl	8011390 <puts>
  	  }
  	  if(Custom_App_Context.rep_status == 2)
 8010066:	4b80      	ldr	r3, [pc, #512]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 8010068:	785b      	ldrb	r3, [r3, #1]
 801006a:	2b02      	cmp	r3, #2
 801006c:	d11c      	bne.n	80100a8 <Custom_Mvt_rep_Send_Notification+0xa0>
  		  {

  			  char rep_ref_vide[] = "refv";
 801006e:	4a85      	ldr	r2, [pc, #532]	@ (8010284 <Custom_Mvt_rep_Send_Notification+0x27c>)
 8010070:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010078:	6018      	str	r0, [r3, #0]
 801007a:	3304      	adds	r3, #4
 801007c:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_ref_vide, sizeof(rep_ref_vide));
 801007e:	4b7c      	ldr	r3, [pc, #496]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010080:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010084:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010088:	6018      	str	r0, [r3, #0]
 801008a:	3304      	adds	r3, #4
 801008c:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 801008e:	4879      	ldr	r0, [pc, #484]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010090:	f7fe fdfa 	bl	800ec88 <DbgTraceGetFileName>
 8010094:	4601      	mov	r1, r0
 8010096:	f44f 7395 	mov.w	r3, #298	@ 0x12a
 801009a:	4a77      	ldr	r2, [pc, #476]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 801009c:	4877      	ldr	r0, [pc, #476]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 801009e:	f001 f907 	bl	80112b0 <iprintf>
 80100a2:	4879      	ldr	r0, [pc, #484]	@ (8010288 <Custom_Mvt_rep_Send_Notification+0x280>)
 80100a4:	f001 f974 	bl	8011390 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 3)
 80100a8:	4b6f      	ldr	r3, [pc, #444]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 80100aa:	785b      	ldrb	r3, [r3, #1]
 80100ac:	2b03      	cmp	r3, #3
 80100ae:	d11c      	bne.n	80100ea <Custom_Mvt_rep_Send_Notification+0xe2>
  		  {

  			  char validation_succes[] = "vals";
 80100b0:	4a76      	ldr	r2, [pc, #472]	@ (801028c <Custom_Mvt_rep_Send_Notification+0x284>)
 80100b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80100b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100ba:	6018      	str	r0, [r3, #0]
 80100bc:	3304      	adds	r3, #4
 80100be:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_succes, sizeof(validation_succes));
 80100c0:	4b6b      	ldr	r3, [pc, #428]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 80100c2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80100c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100ca:	6018      	str	r0, [r3, #0]
 80100cc:	3304      	adds	r3, #4
 80100ce:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 80100d0:	4868      	ldr	r0, [pc, #416]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80100d2:	f7fe fdd9 	bl	800ec88 <DbgTraceGetFileName>
 80100d6:	4601      	mov	r1, r0
 80100d8:	f240 1331 	movw	r3, #305	@ 0x131
 80100dc:	4a66      	ldr	r2, [pc, #408]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 80100de:	4867      	ldr	r0, [pc, #412]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 80100e0:	f001 f8e6 	bl	80112b0 <iprintf>
 80100e4:	486a      	ldr	r0, [pc, #424]	@ (8010290 <Custom_Mvt_rep_Send_Notification+0x288>)
 80100e6:	f001 f953 	bl	8011390 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 4)
 80100ea:	4b5f      	ldr	r3, [pc, #380]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 80100ec:	785b      	ldrb	r3, [r3, #1]
 80100ee:	2b04      	cmp	r3, #4
 80100f0:	d11c      	bne.n	801012c <Custom_Mvt_rep_Send_Notification+0x124>
  		  {

  			  char validation_fail[] = "valf";
 80100f2:	4a68      	ldr	r2, [pc, #416]	@ (8010294 <Custom_Mvt_rep_Send_Notification+0x28c>)
 80100f4:	f107 0320 	add.w	r3, r7, #32
 80100f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80100fc:	6018      	str	r0, [r3, #0]
 80100fe:	3304      	adds	r3, #4
 8010100:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_fail, sizeof(validation_fail));
 8010102:	4b5b      	ldr	r3, [pc, #364]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010104:	f107 0220 	add.w	r2, r7, #32
 8010108:	e892 0003 	ldmia.w	r2, {r0, r1}
 801010c:	6018      	str	r0, [r3, #0]
 801010e:	3304      	adds	r3, #4
 8010110:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_fail good \n");
 8010112:	4858      	ldr	r0, [pc, #352]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010114:	f7fe fdb8 	bl	800ec88 <DbgTraceGetFileName>
 8010118:	4601      	mov	r1, r0
 801011a:	f44f 739c 	mov.w	r3, #312	@ 0x138
 801011e:	4a56      	ldr	r2, [pc, #344]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 8010120:	4856      	ldr	r0, [pc, #344]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 8010122:	f001 f8c5 	bl	80112b0 <iprintf>
 8010126:	485c      	ldr	r0, [pc, #368]	@ (8010298 <Custom_Mvt_rep_Send_Notification+0x290>)
 8010128:	f001 f932 	bl	8011390 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 5)
 801012c:	4b4e      	ldr	r3, [pc, #312]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 801012e:	785b      	ldrb	r3, [r3, #1]
 8010130:	2b05      	cmp	r3, #5
 8010132:	d11c      	bne.n	801016e <Custom_Mvt_rep_Send_Notification+0x166>
  		  {

  			  char validation_vide[] = "valv";
 8010134:	4a59      	ldr	r2, [pc, #356]	@ (801029c <Custom_Mvt_rep_Send_Notification+0x294>)
 8010136:	f107 0318 	add.w	r3, r7, #24
 801013a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801013e:	6018      	str	r0, [r3, #0]
 8010140:	3304      	adds	r3, #4
 8010142:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_vide, sizeof(validation_vide));
 8010144:	4b4a      	ldr	r3, [pc, #296]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010146:	f107 0218 	add.w	r2, r7, #24
 801014a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801014e:	6018      	str	r0, [r3, #0]
 8010150:	3304      	adds	r3, #4
 8010152:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_vide good \n");
 8010154:	4847      	ldr	r0, [pc, #284]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010156:	f7fe fd97 	bl	800ec88 <DbgTraceGetFileName>
 801015a:	4601      	mov	r1, r0
 801015c:	f240 133f 	movw	r3, #319	@ 0x13f
 8010160:	4a45      	ldr	r2, [pc, #276]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 8010162:	4846      	ldr	r0, [pc, #280]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 8010164:	f001 f8a4 	bl	80112b0 <iprintf>
 8010168:	484d      	ldr	r0, [pc, #308]	@ (80102a0 <Custom_Mvt_rep_Send_Notification+0x298>)
 801016a:	f001 f911 	bl	8011390 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 6)
 801016e:	4b3e      	ldr	r3, [pc, #248]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 8010170:	785b      	ldrb	r3, [r3, #1]
 8010172:	2b06      	cmp	r3, #6
 8010174:	d11c      	bne.n	80101b0 <Custom_Mvt_rep_Send_Notification+0x1a8>
  		  {

  			  char rep_vide[] = "repv";
 8010176:	4a4b      	ldr	r2, [pc, #300]	@ (80102a4 <Custom_Mvt_rep_Send_Notification+0x29c>)
 8010178:	f107 0310 	add.w	r3, r7, #16
 801017c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010180:	6018      	str	r0, [r3, #0]
 8010182:	3304      	adds	r3, #4
 8010184:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_vide, sizeof(rep_vide));
 8010186:	4b3a      	ldr	r3, [pc, #232]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010188:	f107 0210 	add.w	r2, r7, #16
 801018c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010190:	6018      	str	r0, [r3, #0]
 8010192:	3304      	adds	r3, #4
 8010194:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_vide good \n");
 8010196:	4837      	ldr	r0, [pc, #220]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010198:	f7fe fd76 	bl	800ec88 <DbgTraceGetFileName>
 801019c:	4601      	mov	r1, r0
 801019e:	f44f 73a3 	mov.w	r3, #326	@ 0x146
 80101a2:	4a35      	ldr	r2, [pc, #212]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 80101a4:	4835      	ldr	r0, [pc, #212]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 80101a6:	f001 f883 	bl	80112b0 <iprintf>
 80101aa:	483f      	ldr	r0, [pc, #252]	@ (80102a8 <Custom_Mvt_rep_Send_Notification+0x2a0>)
 80101ac:	f001 f8f0 	bl	8011390 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 7)
 80101b0:	4b2d      	ldr	r3, [pc, #180]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 80101b2:	785b      	ldrb	r3, [r3, #1]
 80101b4:	2b07      	cmp	r3, #7
 80101b6:	d11c      	bne.n	80101f2 <Custom_Mvt_rep_Send_Notification+0x1ea>
  			  {

  				  char rep_valide[] = "ahah";
 80101b8:	4a3c      	ldr	r2, [pc, #240]	@ (80102ac <Custom_Mvt_rep_Send_Notification+0x2a4>)
 80101ba:	f107 0308 	add.w	r3, r7, #8
 80101be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101c2:	6018      	str	r0, [r3, #0]
 80101c4:	3304      	adds	r3, #4
 80101c6:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_valide, sizeof(rep_valide));
 80101c8:	4b29      	ldr	r3, [pc, #164]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 80101ca:	f107 0208 	add.w	r2, r7, #8
 80101ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80101d2:	6018      	str	r0, [r3, #0]
 80101d4:	3304      	adds	r3, #4
 80101d6:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 80101d8:	4826      	ldr	r0, [pc, #152]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80101da:	f7fe fd55 	bl	800ec88 <DbgTraceGetFileName>
 80101de:	4601      	mov	r1, r0
 80101e0:	f240 134d 	movw	r3, #333	@ 0x14d
 80101e4:	4a24      	ldr	r2, [pc, #144]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 80101e6:	4825      	ldr	r0, [pc, #148]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 80101e8:	f001 f862 	bl	80112b0 <iprintf>
 80101ec:	4826      	ldr	r0, [pc, #152]	@ (8010288 <Custom_Mvt_rep_Send_Notification+0x280>)
 80101ee:	f001 f8cf 	bl	8011390 <puts>
  			  }
  		  if(Custom_App_Context.rep_status == 8)
 80101f2:	4b1d      	ldr	r3, [pc, #116]	@ (8010268 <Custom_Mvt_rep_Send_Notification+0x260>)
 80101f4:	785b      	ldrb	r3, [r3, #1]
 80101f6:	2b08      	cmp	r3, #8
 80101f8:	d128      	bne.n	801024c <Custom_Mvt_rep_Send_Notification+0x244>
  			  {

  				  char rep_non_valide[] = "ihih";
 80101fa:	4a2d      	ldr	r2, [pc, #180]	@ (80102b0 <Custom_Mvt_rep_Send_Notification+0x2a8>)
 80101fc:	463b      	mov	r3, r7
 80101fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010202:	6018      	str	r0, [r3, #0]
 8010204:	3304      	adds	r3, #4
 8010206:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_non_valide, sizeof(rep_non_valide));
 8010208:	4b19      	ldr	r3, [pc, #100]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 801020a:	463a      	mov	r2, r7
 801020c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010210:	6018      	str	r0, [r3, #0]
 8010212:	3304      	adds	r3, #4
 8010214:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 8010216:	4817      	ldr	r0, [pc, #92]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010218:	f7fe fd36 	bl	800ec88 <DbgTraceGetFileName>
 801021c:	4601      	mov	r1, r0
 801021e:	f44f 73aa 	mov.w	r3, #340	@ 0x154
 8010222:	4a15      	ldr	r2, [pc, #84]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 8010224:	4815      	ldr	r0, [pc, #84]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 8010226:	f001 f843 	bl	80112b0 <iprintf>
 801022a:	4819      	ldr	r0, [pc, #100]	@ (8010290 <Custom_Mvt_rep_Send_Notification+0x288>)
 801022c:	f001 f8b0 	bl	8011390 <puts>
 8010230:	e00c      	b.n	801024c <Custom_Mvt_rep_Send_Notification+0x244>
  			  }
  	}
	else
	{
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 8010232:	4810      	ldr	r0, [pc, #64]	@ (8010274 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010234:	f7fe fd28 	bl	800ec88 <DbgTraceGetFileName>
 8010238:	4601      	mov	r1, r0
 801023a:	f240 1359 	movw	r3, #345	@ 0x159
 801023e:	4a0e      	ldr	r2, [pc, #56]	@ (8010278 <Custom_Mvt_rep_Send_Notification+0x270>)
 8010240:	480e      	ldr	r0, [pc, #56]	@ (801027c <Custom_Mvt_rep_Send_Notification+0x274>)
 8010242:	f001 f835 	bl	80112b0 <iprintf>
 8010246:	481b      	ldr	r0, [pc, #108]	@ (80102b4 <Custom_Mvt_rep_Send_Notification+0x2ac>)
 8010248:	f001 f8a2 	bl	8011390 <puts>
	}
  /* USER CODE END Mvt_rep_NS_1*/

  if (updateflag != 0)
 801024c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010250:	2b00      	cmp	r3, #0
 8010252:	d004      	beq.n	801025e <Custom_Mvt_rep_Send_Notification+0x256>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)NotifyCharData);
 8010254:	4906      	ldr	r1, [pc, #24]	@ (8010270 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010256:	2000      	movs	r0, #0
 8010258:	f000 fa12 	bl	8010680 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Mvt_rep_NS_Last*/

  /* USER CODE END Mvt_rep_NS_Last*/

  return;
 801025c:	bf00      	nop
 801025e:	bf00      	nop
}
 8010260:	3740      	adds	r7, #64	@ 0x40
 8010262:	46bd      	mov	sp, r7
 8010264:	bd80      	pop	{r7, pc}
 8010266:	bf00      	nop
 8010268:	20000954 	.word	0x20000954
 801026c:	080137e8 	.word	0x080137e8
 8010270:	20000a50 	.word	0x20000a50
 8010274:	080135d8 	.word	0x080135d8
 8010278:	08013d9c 	.word	0x08013d9c
 801027c:	080135f8 	.word	0x080135f8
 8010280:	0801360c 	.word	0x0801360c
 8010284:	080137f0 	.word	0x080137f0
 8010288:	0801364c 	.word	0x0801364c
 801028c:	080137f8 	.word	0x080137f8
 8010290:	08013690 	.word	0x08013690
 8010294:	08013800 	.word	0x08013800
 8010298:	080136d8 	.word	0x080136d8
 801029c:	08013808 	.word	0x08013808
 80102a0:	0801371c 	.word	0x0801371c
 80102a4:	08013810 	.word	0x08013810
 80102a8:	08013760 	.word	0x08013760
 80102ac:	08013818 	.word	0x08013818
 80102b0:	08013820 	.word	0x08013820
 80102b4:	080137a0 	.word	0x080137a0

080102b8 <Custom_Appli_Update_Char>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Custom_Appli_Update_Char()/* Property writed */
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	af00      	add	r7, sp, #0
	Custom_STM_App_Update_Char(CUSTOM_STM_APPEL_APP, (uint8_t *)UpdateCharData);
 80102bc:	4902      	ldr	r1, [pc, #8]	@ (80102c8 <Custom_Appli_Update_Char+0x10>)
 80102be:	2001      	movs	r0, #1
 80102c0:	f000 f9de 	bl	8010680 <Custom_STM_App_Update_Char>
	  return;
 80102c4:	bf00      	nop
}
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	20000958 	.word	0x20000958

080102cc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80102cc:	b580      	push	{r7, lr}
 80102ce:	b08c      	sub	sp, #48	@ 0x30
 80102d0:	af00      	add	r7, sp, #0
 80102d2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80102d4:	2300      	movs	r3, #0
 80102d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	3301      	adds	r3, #1
 80102de:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80102e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e2:	781b      	ldrb	r3, [r3, #0]
 80102e4:	2bff      	cmp	r3, #255	@ 0xff
 80102e6:	f040 809b 	bne.w	8010420 <Custom_STM_Event_Handler+0x154>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80102ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ec:	3302      	adds	r3, #2
 80102ee:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 80102f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102f2:	881b      	ldrh	r3, [r3, #0]
 80102f4:	b29b      	uxth	r3, r3
 80102f6:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 80102fa:	2b1a      	cmp	r3, #26
 80102fc:	f200 808c 	bhi.w	8010418 <Custom_STM_Event_Handler+0x14c>
 8010300:	a201      	add	r2, pc, #4	@ (adr r2, 8010308 <Custom_STM_Event_Handler+0x3c>)
 8010302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010306:	bf00      	nop
 8010308:	08010375 	.word	0x08010375
 801030c:	08010419 	.word	0x08010419
 8010310:	08010419 	.word	0x08010419
 8010314:	08010419 	.word	0x08010419
 8010318:	08010419 	.word	0x08010419
 801031c:	08010419 	.word	0x08010419
 8010320:	08010419 	.word	0x08010419
 8010324:	08010419 	.word	0x08010419
 8010328:	08010419 	.word	0x08010419
 801032c:	08010419 	.word	0x08010419
 8010330:	08010419 	.word	0x08010419
 8010334:	08010419 	.word	0x08010419
 8010338:	08010419 	.word	0x08010419
 801033c:	08010419 	.word	0x08010419
 8010340:	08010419 	.word	0x08010419
 8010344:	08010419 	.word	0x08010419
 8010348:	08010419 	.word	0x08010419
 801034c:	08010419 	.word	0x08010419
 8010350:	08010419 	.word	0x08010419
 8010354:	08010419 	.word	0x08010419
 8010358:	08010419 	.word	0x08010419
 801035c:	08010419 	.word	0x08010419
 8010360:	08010419 	.word	0x08010419
 8010364:	08010419 	.word	0x08010419
 8010368:	08010419 	.word	0x08010419
 801036c:	08010419 	.word	0x08010419
 8010370:	080103fb 	.word	0x080103fb
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8010374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010376:	3302      	adds	r3, #2
 8010378:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	885b      	ldrh	r3, [r3, #2]
 801037e:	b29b      	uxth	r3, r3
 8010380:	461a      	mov	r2, r3
 8010382:	4b2b      	ldr	r3, [pc, #172]	@ (8010430 <Custom_STM_Event_Handler+0x164>)
 8010384:	885b      	ldrh	r3, [r3, #2]
 8010386:	3302      	adds	r3, #2
 8010388:	429a      	cmp	r2, r3
 801038a:	d119      	bne.n	80103c0 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801038c:	2301      	movs	r3, #1
 801038e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8010392:	69fb      	ldr	r3, [r7, #28]
 8010394:	7a1b      	ldrb	r3, [r3, #8]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d002      	beq.n	80103a0 <Custom_STM_Event_Handler+0xd4>
 801039a:	2b01      	cmp	r3, #1
 801039c:	d008      	beq.n	80103b0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 801039e:	e02b      	b.n	80103f8 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT;
 80103a0:	2301      	movs	r3, #1
 80103a2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80103a4:	f107 0308 	add.w	r3, r7, #8
 80103a8:	4618      	mov	r0, r3
 80103aa:	f7ff fd4f 	bl	800fe4c <Custom_STM_App_Notification>
                break;
 80103ae:	e023      	b.n	80103f8 <Custom_STM_Event_Handler+0x12c>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT;
 80103b0:	2300      	movs	r3, #0
 80103b2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80103b4:	f107 0308 	add.w	r3, r7, #8
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7ff fd47 	bl	800fe4c <Custom_STM_App_Notification>
                break;
 80103be:	e01b      	b.n	80103f8 <Custom_STM_Event_Handler+0x12c>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	885b      	ldrh	r3, [r3, #2]
 80103c4:	b29b      	uxth	r3, r3
 80103c6:	461a      	mov	r2, r3
 80103c8:	4b19      	ldr	r3, [pc, #100]	@ (8010430 <Custom_STM_Event_Handler+0x164>)
 80103ca:	889b      	ldrh	r3, [r3, #4]
 80103cc:	3301      	adds	r3, #1
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d124      	bne.n	801041c <Custom_STM_Event_Handler+0x150>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80103d2:	2301      	movs	r3, #1
 80103d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT;
 80103d8:	2303      	movs	r3, #3
 80103da:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80103dc:	69fb      	ldr	r3, [r7, #28]
 80103de:	88db      	ldrh	r3, [r3, #6]
 80103e0:	b29b      	uxth	r3, r3
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80103e6:	69fb      	ldr	r3, [r7, #28]
 80103e8:	3308      	adds	r3, #8
 80103ea:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 80103ec:	f107 0308 	add.w	r3, r7, #8
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7ff fd2b 	bl	800fe4c <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80103f6:	e011      	b.n	801041c <Custom_STM_Event_Handler+0x150>
 80103f8:	e010      	b.n	801041c <Custom_STM_Event_Handler+0x150>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80103fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80103fc:	3302      	adds	r3, #2
 80103fe:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8010400:	2304      	movs	r3, #4
 8010402:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8010404:	6a3b      	ldr	r3, [r7, #32]
 8010406:	881b      	ldrh	r3, [r3, #0]
 8010408:	b29b      	uxth	r3, r3
 801040a:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801040c:	f107 0308 	add.w	r3, r7, #8
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff fd1b 	bl	800fe4c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8010416:	e002      	b.n	801041e <Custom_STM_Event_Handler+0x152>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8010418:	bf00      	nop
 801041a:	e002      	b.n	8010422 <Custom_STM_Event_Handler+0x156>
          break;
 801041c:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801041e:	e000      	b.n	8010422 <Custom_STM_Event_Handler+0x156>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 8010420:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8010422:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8010426:	4618      	mov	r0, r3
 8010428:	3730      	adds	r7, #48	@ 0x30
 801042a:	46bd      	mov	sp, r7
 801042c:	bd80      	pop	{r7, pc}
 801042e:	bf00      	nop
 8010430:	20000b48 	.word	0x20000b48

08010434 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b08c      	sub	sp, #48	@ 0x30
 8010438:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801043a:	2392      	movs	r3, #146	@ 0x92
 801043c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801043e:	4881      	ldr	r0, [pc, #516]	@ (8010644 <SVCCTL_InitCustomSvc+0x210>)
 8010440:	f7fd fda6 	bl	800df90 <SVCCTL_RegisterSvcHandler>
   *                              = 6
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 6;
 8010444:	2306      	movs	r3, #6
 8010446:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MVT_DEF_UUID(uuid.Char_UUID_128);
 8010448:	238f      	movs	r3, #143	@ 0x8f
 801044a:	713b      	strb	r3, [r7, #4]
 801044c:	23e5      	movs	r3, #229	@ 0xe5
 801044e:	717b      	strb	r3, [r7, #5]
 8010450:	23b3      	movs	r3, #179	@ 0xb3
 8010452:	71bb      	strb	r3, [r7, #6]
 8010454:	23d5      	movs	r3, #213	@ 0xd5
 8010456:	71fb      	strb	r3, [r7, #7]
 8010458:	232e      	movs	r3, #46	@ 0x2e
 801045a:	723b      	strb	r3, [r7, #8]
 801045c:	237f      	movs	r3, #127	@ 0x7f
 801045e:	727b      	strb	r3, [r7, #9]
 8010460:	234a      	movs	r3, #74	@ 0x4a
 8010462:	72bb      	strb	r3, [r7, #10]
 8010464:	2398      	movs	r3, #152	@ 0x98
 8010466:	72fb      	strb	r3, [r7, #11]
 8010468:	232a      	movs	r3, #42	@ 0x2a
 801046a:	733b      	strb	r3, [r7, #12]
 801046c:	2348      	movs	r3, #72	@ 0x48
 801046e:	737b      	strb	r3, [r7, #13]
 8010470:	237a      	movs	r3, #122	@ 0x7a
 8010472:	73bb      	strb	r3, [r7, #14]
 8010474:	23cc      	movs	r3, #204	@ 0xcc
 8010476:	73fb      	strb	r3, [r7, #15]
 8010478:	2300      	movs	r3, #0
 801047a:	743b      	strb	r3, [r7, #16]
 801047c:	2300      	movs	r3, #0
 801047e:	747b      	strb	r3, [r7, #17]
 8010480:	2300      	movs	r3, #0
 8010482:	74bb      	strb	r3, [r7, #18]
 8010484:	2300      	movs	r3, #0
 8010486:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 8010488:	7dbb      	ldrb	r3, [r7, #22]
 801048a:	1d39      	adds	r1, r7, #4
 801048c:	4a6e      	ldr	r2, [pc, #440]	@ (8010648 <SVCCTL_InitCustomSvc+0x214>)
 801048e:	9200      	str	r2, [sp, #0]
 8010490:	2201      	movs	r2, #1
 8010492:	2002      	movs	r0, #2
 8010494:	f7fc ffef 	bl	800d476 <aci_gatt_add_service>
 8010498:	4603      	mov	r3, r0
 801049a:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMvt_DefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801049c:	7dfb      	ldrb	r3, [r7, #23]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d00f      	beq.n	80104c2 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: mvt_def, error code: 0x%x \n\r", ret);
 80104a2:	486a      	ldr	r0, [pc, #424]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 80104a4:	f7fe fbf0 	bl	800ec88 <DbgTraceGetFileName>
 80104a8:	4601      	mov	r1, r0
 80104aa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80104ae:	4a68      	ldr	r2, [pc, #416]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 80104b0:	4868      	ldr	r0, [pc, #416]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 80104b2:	f000 fefd 	bl	80112b0 <iprintf>
 80104b6:	7dfb      	ldrb	r3, [r7, #23]
 80104b8:	4619      	mov	r1, r3
 80104ba:	4867      	ldr	r0, [pc, #412]	@ (8010658 <SVCCTL_InitCustomSvc+0x224>)
 80104bc:	f000 fef8 	bl	80112b0 <iprintf>
 80104c0:	e00c      	b.n	80104dc <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: mvt_def \n\r");
 80104c2:	4862      	ldr	r0, [pc, #392]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 80104c4:	f7fe fbe0 	bl	800ec88 <DbgTraceGetFileName>
 80104c8:	4601      	mov	r1, r0
 80104ca:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80104ce:	4a60      	ldr	r2, [pc, #384]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 80104d0:	4860      	ldr	r0, [pc, #384]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 80104d2:	f000 feed 	bl	80112b0 <iprintf>
 80104d6:	4861      	ldr	r0, [pc, #388]	@ (801065c <SVCCTL_InitCustomSvc+0x228>)
 80104d8:	f000 feea 	bl	80112b0 <iprintf>
  }

  /**
   *  Mvt_rep
   */
  COPY_MVT_REP_UUID(uuid.Char_UUID_128);
 80104dc:	2319      	movs	r3, #25
 80104de:	713b      	strb	r3, [r7, #4]
 80104e0:	23ed      	movs	r3, #237	@ 0xed
 80104e2:	717b      	strb	r3, [r7, #5]
 80104e4:	2382      	movs	r3, #130	@ 0x82
 80104e6:	71bb      	strb	r3, [r7, #6]
 80104e8:	23ae      	movs	r3, #174	@ 0xae
 80104ea:	71fb      	strb	r3, [r7, #7]
 80104ec:	23ed      	movs	r3, #237	@ 0xed
 80104ee:	723b      	strb	r3, [r7, #8]
 80104f0:	2321      	movs	r3, #33	@ 0x21
 80104f2:	727b      	strb	r3, [r7, #9]
 80104f4:	234c      	movs	r3, #76	@ 0x4c
 80104f6:	72bb      	strb	r3, [r7, #10]
 80104f8:	239d      	movs	r3, #157	@ 0x9d
 80104fa:	72fb      	strb	r3, [r7, #11]
 80104fc:	2341      	movs	r3, #65	@ 0x41
 80104fe:	733b      	strb	r3, [r7, #12]
 8010500:	2345      	movs	r3, #69	@ 0x45
 8010502:	737b      	strb	r3, [r7, #13]
 8010504:	2322      	movs	r3, #34	@ 0x22
 8010506:	73bb      	strb	r3, [r7, #14]
 8010508:	238e      	movs	r3, #142	@ 0x8e
 801050a:	73fb      	strb	r3, [r7, #15]
 801050c:	23cd      	movs	r3, #205	@ 0xcd
 801050e:	743b      	strb	r3, [r7, #16]
 8010510:	23ab      	movs	r3, #171	@ 0xab
 8010512:	747b      	strb	r3, [r7, #17]
 8010514:	2300      	movs	r3, #0
 8010516:	74bb      	strb	r3, [r7, #18]
 8010518:	2300      	movs	r3, #0
 801051a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 801051c:	4b4a      	ldr	r3, [pc, #296]	@ (8010648 <SVCCTL_InitCustomSvc+0x214>)
 801051e:	8818      	ldrh	r0, [r3, #0]
 8010520:	4b4f      	ldr	r3, [pc, #316]	@ (8010660 <SVCCTL_InitCustomSvc+0x22c>)
 8010522:	781b      	ldrb	r3, [r3, #0]
 8010524:	4619      	mov	r1, r3
 8010526:	1d3a      	adds	r2, r7, #4
 8010528:	4b4e      	ldr	r3, [pc, #312]	@ (8010664 <SVCCTL_InitCustomSvc+0x230>)
 801052a:	9305      	str	r3, [sp, #20]
 801052c:	2301      	movs	r3, #1
 801052e:	9304      	str	r3, [sp, #16]
 8010530:	2310      	movs	r3, #16
 8010532:	9303      	str	r3, [sp, #12]
 8010534:	2301      	movs	r3, #1
 8010536:	9302      	str	r3, [sp, #8]
 8010538:	2300      	movs	r3, #0
 801053a:	9301      	str	r3, [sp, #4]
 801053c:	2310      	movs	r3, #16
 801053e:	9300      	str	r3, [sp, #0]
 8010540:	460b      	mov	r3, r1
 8010542:	2102      	movs	r1, #2
 8010544:	f7fd f86d 	bl	800d622 <aci_gatt_add_char>
 8010548:	4603      	mov	r3, r0
 801054a:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMvt_RepHdle));
  if (ret != BLE_STATUS_SUCCESS)
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d00f      	beq.n	8010572 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MVT_REP, error code: 0x%x \n\r", ret);
 8010552:	483e      	ldr	r0, [pc, #248]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 8010554:	f7fe fb98 	bl	800ec88 <DbgTraceGetFileName>
 8010558:	4601      	mov	r1, r0
 801055a:	f44f 73ab 	mov.w	r3, #342	@ 0x156
 801055e:	4a3c      	ldr	r2, [pc, #240]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 8010560:	483c      	ldr	r0, [pc, #240]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 8010562:	f000 fea5 	bl	80112b0 <iprintf>
 8010566:	7dfb      	ldrb	r3, [r7, #23]
 8010568:	4619      	mov	r1, r3
 801056a:	483f      	ldr	r0, [pc, #252]	@ (8010668 <SVCCTL_InitCustomSvc+0x234>)
 801056c:	f000 fea0 	bl	80112b0 <iprintf>
 8010570:	e00c      	b.n	801058c <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MVT_REP \n\r");
 8010572:	4836      	ldr	r0, [pc, #216]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 8010574:	f7fe fb88 	bl	800ec88 <DbgTraceGetFileName>
 8010578:	4601      	mov	r1, r0
 801057a:	f44f 73ad 	mov.w	r3, #346	@ 0x15a
 801057e:	4a34      	ldr	r2, [pc, #208]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 8010580:	4834      	ldr	r0, [pc, #208]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 8010582:	f000 fe95 	bl	80112b0 <iprintf>
 8010586:	4839      	ldr	r0, [pc, #228]	@ (801066c <SVCCTL_InitCustomSvc+0x238>)
 8010588:	f000 fe92 	bl	80112b0 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Appel_app
   */
  COPY_APPEL_APP_UUID(uuid.Char_UUID_128);
 801058c:	2319      	movs	r3, #25
 801058e:	713b      	strb	r3, [r7, #4]
 8010590:	23ed      	movs	r3, #237	@ 0xed
 8010592:	717b      	strb	r3, [r7, #5]
 8010594:	2382      	movs	r3, #130	@ 0x82
 8010596:	71bb      	strb	r3, [r7, #6]
 8010598:	23ae      	movs	r3, #174	@ 0xae
 801059a:	71fb      	strb	r3, [r7, #7]
 801059c:	23ed      	movs	r3, #237	@ 0xed
 801059e:	723b      	strb	r3, [r7, #8]
 80105a0:	2321      	movs	r3, #33	@ 0x21
 80105a2:	727b      	strb	r3, [r7, #9]
 80105a4:	234c      	movs	r3, #76	@ 0x4c
 80105a6:	72bb      	strb	r3, [r7, #10]
 80105a8:	239d      	movs	r3, #157	@ 0x9d
 80105aa:	72fb      	strb	r3, [r7, #11]
 80105ac:	2341      	movs	r3, #65	@ 0x41
 80105ae:	733b      	strb	r3, [r7, #12]
 80105b0:	2345      	movs	r3, #69	@ 0x45
 80105b2:	737b      	strb	r3, [r7, #13]
 80105b4:	2322      	movs	r3, #34	@ 0x22
 80105b6:	73bb      	strb	r3, [r7, #14]
 80105b8:	238e      	movs	r3, #142	@ 0x8e
 80105ba:	73fb      	strb	r3, [r7, #15]
 80105bc:	2334      	movs	r3, #52	@ 0x34
 80105be:	743b      	strb	r3, [r7, #16]
 80105c0:	2312      	movs	r3, #18
 80105c2:	747b      	strb	r3, [r7, #17]
 80105c4:	2300      	movs	r3, #0
 80105c6:	74bb      	strb	r3, [r7, #18]
 80105c8:	2300      	movs	r3, #0
 80105ca:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 80105cc:	4b1e      	ldr	r3, [pc, #120]	@ (8010648 <SVCCTL_InitCustomSvc+0x214>)
 80105ce:	8818      	ldrh	r0, [r3, #0]
 80105d0:	4b27      	ldr	r3, [pc, #156]	@ (8010670 <SVCCTL_InitCustomSvc+0x23c>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	4619      	mov	r1, r3
 80105d6:	1d3a      	adds	r2, r7, #4
 80105d8:	4b26      	ldr	r3, [pc, #152]	@ (8010674 <SVCCTL_InitCustomSvc+0x240>)
 80105da:	9305      	str	r3, [sp, #20]
 80105dc:	2301      	movs	r3, #1
 80105de:	9304      	str	r3, [sp, #16]
 80105e0:	2310      	movs	r3, #16
 80105e2:	9303      	str	r3, [sp, #12]
 80105e4:	2301      	movs	r3, #1
 80105e6:	9302      	str	r3, [sp, #8]
 80105e8:	2300      	movs	r3, #0
 80105ea:	9301      	str	r3, [sp, #4]
 80105ec:	2306      	movs	r3, #6
 80105ee:	9300      	str	r3, [sp, #0]
 80105f0:	460b      	mov	r3, r1
 80105f2:	2102      	movs	r1, #2
 80105f4:	f7fd f815 	bl	800d622 <aci_gatt_add_char>
 80105f8:	4603      	mov	r3, r0
 80105fa:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAppel_AppHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80105fc:	7dfb      	ldrb	r3, [r7, #23]
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d00f      	beq.n	8010622 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : APPEL_APP, error code: 0x%x \n\r", ret);
 8010602:	4812      	ldr	r0, [pc, #72]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 8010604:	f7fe fb40 	bl	800ec88 <DbgTraceGetFileName>
 8010608:	4601      	mov	r1, r0
 801060a:	f44f 73b8 	mov.w	r3, #368	@ 0x170
 801060e:	4a10      	ldr	r2, [pc, #64]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 8010610:	4810      	ldr	r0, [pc, #64]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 8010612:	f000 fe4d 	bl	80112b0 <iprintf>
 8010616:	7dfb      	ldrb	r3, [r7, #23]
 8010618:	4619      	mov	r1, r3
 801061a:	4817      	ldr	r0, [pc, #92]	@ (8010678 <SVCCTL_InitCustomSvc+0x244>)
 801061c:	f000 fe48 	bl	80112b0 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8010620:	e00d      	b.n	801063e <SVCCTL_InitCustomSvc+0x20a>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : APPEL_APP \n\r");
 8010622:	480a      	ldr	r0, [pc, #40]	@ (801064c <SVCCTL_InitCustomSvc+0x218>)
 8010624:	f7fe fb30 	bl	800ec88 <DbgTraceGetFileName>
 8010628:	4601      	mov	r1, r0
 801062a:	f44f 73ba 	mov.w	r3, #372	@ 0x174
 801062e:	4a08      	ldr	r2, [pc, #32]	@ (8010650 <SVCCTL_InitCustomSvc+0x21c>)
 8010630:	4808      	ldr	r0, [pc, #32]	@ (8010654 <SVCCTL_InitCustomSvc+0x220>)
 8010632:	f000 fe3d 	bl	80112b0 <iprintf>
 8010636:	4811      	ldr	r0, [pc, #68]	@ (801067c <SVCCTL_InitCustomSvc+0x248>)
 8010638:	f000 fe3a 	bl	80112b0 <iprintf>
  return;
 801063c:	bf00      	nop
}
 801063e:	3718      	adds	r7, #24
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	080102cd 	.word	0x080102cd
 8010648:	20000b48 	.word	0x20000b48
 801064c:	08013828 	.word	0x08013828
 8010650:	08013dc0 	.word	0x08013dc0
 8010654:	08013848 	.word	0x08013848
 8010658:	0801385c 	.word	0x0801385c
 801065c:	080138a4 	.word	0x080138a4
 8010660:	20000103 	.word	0x20000103
 8010664:	20000b4a 	.word	0x20000b4a
 8010668:	080138d8 	.word	0x080138d8
 801066c:	08013920 	.word	0x08013920
 8010670:	20000104 	.word	0x20000104
 8010674:	20000b4c 	.word	0x20000b4c
 8010678:	08013954 	.word	0x08013954
 801067c:	0801399c 	.word	0x0801399c

08010680 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b086      	sub	sp, #24
 8010684:	af02      	add	r7, sp, #8
 8010686:	4603      	mov	r3, r0
 8010688:	6039      	str	r1, [r7, #0]
 801068a:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801068c:	2392      	movs	r3, #146	@ 0x92
 801068e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8010690:	79fb      	ldrb	r3, [r7, #7]
 8010692:	2b00      	cmp	r3, #0
 8010694:	d002      	beq.n	801069c <Custom_STM_App_Update_Char+0x1c>
 8010696:	2b01      	cmp	r3, #1
 8010698:	d02f      	beq.n	80106fa <Custom_STM_App_Update_Char+0x7a>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_2*/
      break;

    default:
      break;
 801069a:	e066      	b.n	801076a <Custom_STM_App_Update_Char+0xea>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 801069c:	4b35      	ldr	r3, [pc, #212]	@ (8010774 <Custom_STM_App_Update_Char+0xf4>)
 801069e:	8818      	ldrh	r0, [r3, #0]
 80106a0:	4b34      	ldr	r3, [pc, #208]	@ (8010774 <Custom_STM_App_Update_Char+0xf4>)
 80106a2:	8859      	ldrh	r1, [r3, #2]
 80106a4:	4b34      	ldr	r3, [pc, #208]	@ (8010778 <Custom_STM_App_Update_Char+0xf8>)
 80106a6:	781a      	ldrb	r2, [r3, #0]
 80106a8:	683b      	ldr	r3, [r7, #0]
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	4613      	mov	r3, r2
 80106ae:	2200      	movs	r2, #0
 80106b0:	f7fd f8bf 	bl	800d832 <aci_gatt_update_char_value>
 80106b4:	4603      	mov	r3, r0
 80106b6:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80106b8:	7bfb      	ldrb	r3, [r7, #15]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00f      	beq.n	80106de <Custom_STM_App_Update_Char+0x5e>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MVT_REP command, result : 0x%x \n\r", ret);
 80106be:	482f      	ldr	r0, [pc, #188]	@ (801077c <Custom_STM_App_Update_Char+0xfc>)
 80106c0:	f7fe fae2 	bl	800ec88 <DbgTraceGetFileName>
 80106c4:	4601      	mov	r1, r0
 80106c6:	f240 139b 	movw	r3, #411	@ 0x19b
 80106ca:	4a2d      	ldr	r2, [pc, #180]	@ (8010780 <Custom_STM_App_Update_Char+0x100>)
 80106cc:	482d      	ldr	r0, [pc, #180]	@ (8010784 <Custom_STM_App_Update_Char+0x104>)
 80106ce:	f000 fdef 	bl	80112b0 <iprintf>
 80106d2:	7bfb      	ldrb	r3, [r7, #15]
 80106d4:	4619      	mov	r1, r3
 80106d6:	482c      	ldr	r0, [pc, #176]	@ (8010788 <Custom_STM_App_Update_Char+0x108>)
 80106d8:	f000 fdea 	bl	80112b0 <iprintf>
      break;
 80106dc:	e045      	b.n	801076a <Custom_STM_App_Update_Char+0xea>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MVT_REP command\n\r");
 80106de:	4827      	ldr	r0, [pc, #156]	@ (801077c <Custom_STM_App_Update_Char+0xfc>)
 80106e0:	f7fe fad2 	bl	800ec88 <DbgTraceGetFileName>
 80106e4:	4601      	mov	r1, r0
 80106e6:	f240 139f 	movw	r3, #415	@ 0x19f
 80106ea:	4a25      	ldr	r2, [pc, #148]	@ (8010780 <Custom_STM_App_Update_Char+0x100>)
 80106ec:	4825      	ldr	r0, [pc, #148]	@ (8010784 <Custom_STM_App_Update_Char+0x104>)
 80106ee:	f000 fddf 	bl	80112b0 <iprintf>
 80106f2:	4826      	ldr	r0, [pc, #152]	@ (801078c <Custom_STM_App_Update_Char+0x10c>)
 80106f4:	f000 fddc 	bl	80112b0 <iprintf>
      break;
 80106f8:	e037      	b.n	801076a <Custom_STM_App_Update_Char+0xea>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 80106fa:	4b1e      	ldr	r3, [pc, #120]	@ (8010774 <Custom_STM_App_Update_Char+0xf4>)
 80106fc:	8818      	ldrh	r0, [r3, #0]
 80106fe:	4b1d      	ldr	r3, [pc, #116]	@ (8010774 <Custom_STM_App_Update_Char+0xf4>)
 8010700:	8899      	ldrh	r1, [r3, #4]
 8010702:	4b23      	ldr	r3, [pc, #140]	@ (8010790 <Custom_STM_App_Update_Char+0x110>)
 8010704:	781a      	ldrb	r2, [r3, #0]
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	9300      	str	r3, [sp, #0]
 801070a:	4613      	mov	r3, r2
 801070c:	2200      	movs	r2, #0
 801070e:	f7fd f890 	bl	800d832 <aci_gatt_update_char_value>
 8010712:	4603      	mov	r3, r0
 8010714:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8010716:	7bfb      	ldrb	r3, [r7, #15]
 8010718:	2b00      	cmp	r3, #0
 801071a:	d00f      	beq.n	801073c <Custom_STM_App_Update_Char+0xbc>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value APPEL_APP command, result : 0x%x \n\r", ret);
 801071c:	4817      	ldr	r0, [pc, #92]	@ (801077c <Custom_STM_App_Update_Char+0xfc>)
 801071e:	f7fe fab3 	bl	800ec88 <DbgTraceGetFileName>
 8010722:	4601      	mov	r1, r0
 8010724:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8010728:	4a15      	ldr	r2, [pc, #84]	@ (8010780 <Custom_STM_App_Update_Char+0x100>)
 801072a:	4816      	ldr	r0, [pc, #88]	@ (8010784 <Custom_STM_App_Update_Char+0x104>)
 801072c:	f000 fdc0 	bl	80112b0 <iprintf>
 8010730:	7bfb      	ldrb	r3, [r7, #15]
 8010732:	4619      	mov	r1, r3
 8010734:	4817      	ldr	r0, [pc, #92]	@ (8010794 <Custom_STM_App_Update_Char+0x114>)
 8010736:	f000 fdbb 	bl	80112b0 <iprintf>
 801073a:	e00c      	b.n	8010756 <Custom_STM_App_Update_Char+0xd6>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value APPEL_APP command\n\r");
 801073c:	480f      	ldr	r0, [pc, #60]	@ (801077c <Custom_STM_App_Update_Char+0xfc>)
 801073e:	f7fe faa3 	bl	800ec88 <DbgTraceGetFileName>
 8010742:	4601      	mov	r1, r0
 8010744:	f44f 73d9 	mov.w	r3, #434	@ 0x1b2
 8010748:	4a0d      	ldr	r2, [pc, #52]	@ (8010780 <Custom_STM_App_Update_Char+0x100>)
 801074a:	480e      	ldr	r0, [pc, #56]	@ (8010784 <Custom_STM_App_Update_Char+0x104>)
 801074c:	f000 fdb0 	bl	80112b0 <iprintf>
 8010750:	4811      	ldr	r0, [pc, #68]	@ (8010798 <Custom_STM_App_Update_Char+0x118>)
 8010752:	f000 fdad 	bl	80112b0 <iprintf>
      printf("%u\n", pPayload[0]);
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	4619      	mov	r1, r3
 801075c:	480f      	ldr	r0, [pc, #60]	@ (801079c <Custom_STM_App_Update_Char+0x11c>)
 801075e:	f000 fda7 	bl	80112b0 <iprintf>
      global_payload_pointer = pPayload;
 8010762:	4a0f      	ldr	r2, [pc, #60]	@ (80107a0 <Custom_STM_App_Update_Char+0x120>)
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	6013      	str	r3, [r2, #0]
      break;
 8010768:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801076a:	7bfb      	ldrb	r3, [r7, #15]
}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	20000b48 	.word	0x20000b48
 8010778:	20000103 	.word	0x20000103
 801077c:	08013828 	.word	0x08013828
 8010780:	08013dd8 	.word	0x08013dd8
 8010784:	08013848 	.word	0x08013848
 8010788:	080139d4 	.word	0x080139d4
 801078c:	08013a1c 	.word	0x08013a1c
 8010790:	20000104 	.word	0x20000104
 8010794:	08013a54 	.word	0x08013a54
 8010798:	08013aa0 	.word	0x08013aa0
 801079c:	08013adc 	.word	0x08013adc
 80107a0:	20000b50 	.word	0x20000b50

080107a4 <LL_PWR_EnableBootC2>:
{
 80107a4:	b480      	push	{r7}
 80107a6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80107a8:	4b05      	ldr	r3, [pc, #20]	@ (80107c0 <LL_PWR_EnableBootC2+0x1c>)
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	4a04      	ldr	r2, [pc, #16]	@ (80107c0 <LL_PWR_EnableBootC2+0x1c>)
 80107ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80107b2:	60d3      	str	r3, [r2, #12]
}
 80107b4:	bf00      	nop
 80107b6:	46bd      	mov	sp, r7
 80107b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107bc:	4770      	bx	lr
 80107be:	bf00      	nop
 80107c0:	58000400 	.word	0x58000400

080107c4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80107c4:	b480      	push	{r7}
 80107c6:	b083      	sub	sp, #12
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80107cc:	4b06      	ldr	r3, [pc, #24]	@ (80107e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80107ce:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80107d2:	4905      	ldr	r1, [pc, #20]	@ (80107e8 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	4313      	orrs	r3, r2
 80107d8:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80107dc:	bf00      	nop
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	58000800 	.word	0x58000800

080107ec <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80107f4:	4b05      	ldr	r3, [pc, #20]	@ (801080c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80107f6:	6a1a      	ldr	r2, [r3, #32]
 80107f8:	4904      	ldr	r1, [pc, #16]	@ (801080c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	4313      	orrs	r3, r2
 80107fe:	620b      	str	r3, [r1, #32]
}
 8010800:	bf00      	nop
 8010802:	370c      	adds	r7, #12
 8010804:	46bd      	mov	sp, r7
 8010806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080a:	4770      	bx	lr
 801080c:	58000800 	.word	0x58000800

08010810 <LL_AHB3_GRP1_EnableClock>:
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8010818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801081c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801081e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4313      	orrs	r3, r2
 8010826:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8010828:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801082c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	4013      	ands	r3, r2
 8010832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010834:	68fb      	ldr	r3, [r7, #12]
}
 8010836:	bf00      	nop
 8010838:	3714      	adds	r7, #20
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8010842:	b480      	push	{r7}
 8010844:	b085      	sub	sp, #20
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801084a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801084e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010852:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	4313      	orrs	r3, r2
 801085a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 801085e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8010862:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4013      	ands	r3, r2
 801086a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 801086c:	68fb      	ldr	r3, [r7, #12]
}
 801086e:	bf00      	nop
 8010870:	3714      	adds	r7, #20
 8010872:	46bd      	mov	sp, r7
 8010874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010878:	4770      	bx	lr

0801087a <LL_C1_IPCC_EnableIT_TXF>:
{
 801087a:	b480      	push	{r7}
 801087c:	b083      	sub	sp, #12
 801087e:	af00      	add	r7, sp, #0
 8010880:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	601a      	str	r2, [r3, #0]
}
 801088e:	bf00      	nop
 8010890:	370c      	adds	r7, #12
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr

0801089a <LL_C1_IPCC_EnableIT_RXO>:
{
 801089a:	b480      	push	{r7}
 801089c:	b083      	sub	sp, #12
 801089e:	af00      	add	r7, sp, #0
 80108a0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	f043 0201 	orr.w	r2, r3, #1
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	601a      	str	r2, [r3, #0]
}
 80108ae:	bf00      	nop
 80108b0:	370c      	adds	r7, #12
 80108b2:	46bd      	mov	sp, r7
 80108b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b8:	4770      	bx	lr

080108ba <LL_C1_IPCC_EnableTransmitChannel>:
{
 80108ba:	b480      	push	{r7}
 80108bc:	b083      	sub	sp, #12
 80108be:	af00      	add	r7, sp, #0
 80108c0:	6078      	str	r0, [r7, #4]
 80108c2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	685a      	ldr	r2, [r3, #4]
 80108c8:	683b      	ldr	r3, [r7, #0]
 80108ca:	041b      	lsls	r3, r3, #16
 80108cc:	43db      	mvns	r3, r3
 80108ce:	401a      	ands	r2, r3
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	605a      	str	r2, [r3, #4]
}
 80108d4:	bf00      	nop
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108de:	4770      	bx	lr

080108e0 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80108e0:	b480      	push	{r7}
 80108e2:	b083      	sub	sp, #12
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	685a      	ldr	r2, [r3, #4]
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	041b      	lsls	r3, r3, #16
 80108f2:	431a      	orrs	r2, r3
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	605a      	str	r2, [r3, #4]
}
 80108f8:	bf00      	nop
 80108fa:	370c      	adds	r7, #12
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	685a      	ldr	r2, [r3, #4]
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	43db      	mvns	r3, r3
 8010916:	401a      	ands	r2, r3
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	605a      	str	r2, [r3, #4]
}
 801091c:	bf00      	nop
 801091e:	370c      	adds	r7, #12
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr

08010928 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8010928:	b480      	push	{r7}
 801092a:	b083      	sub	sp, #12
 801092c:	af00      	add	r7, sp, #0
 801092e:	6078      	str	r0, [r7, #4]
 8010930:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	609a      	str	r2, [r3, #8]
}
 8010938:	bf00      	nop
 801093a:	370c      	adds	r7, #12
 801093c:	46bd      	mov	sp, r7
 801093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010942:	4770      	bx	lr

08010944 <LL_C1_IPCC_SetFlag_CHx>:
{
 8010944:	b480      	push	{r7}
 8010946:	b083      	sub	sp, #12
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	041a      	lsls	r2, r3, #16
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	609a      	str	r2, [r3, #8]
}
 8010956:	bf00      	nop
 8010958:	370c      	adds	r7, #12
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr

08010962 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8010962:	b480      	push	{r7}
 8010964:	b083      	sub	sp, #12
 8010966:	af00      	add	r7, sp, #0
 8010968:	6078      	str	r0, [r7, #4]
 801096a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	68da      	ldr	r2, [r3, #12]
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	4013      	ands	r3, r2
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d101      	bne.n	801097e <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801097a:	2301      	movs	r3, #1
 801097c:	e000      	b.n	8010980 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 801097e:	2300      	movs	r3, #0
}
 8010980:	4618      	mov	r0, r3
 8010982:	370c      	adds	r7, #12
 8010984:	46bd      	mov	sp, r7
 8010986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098a:	4770      	bx	lr

0801098c <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
 8010994:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	69da      	ldr	r2, [r3, #28]
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	4013      	ands	r3, r2
 801099e:	683a      	ldr	r2, [r7, #0]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	d101      	bne.n	80109a8 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80109a4:	2301      	movs	r3, #1
 80109a6:	e000      	b.n	80109aa <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	370c      	adds	r7, #12
 80109ae:	46bd      	mov	sp, r7
 80109b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b4:	4770      	bx	lr
	...

080109b8 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80109bc:	2102      	movs	r1, #2
 80109be:	4818      	ldr	r0, [pc, #96]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 80109c0:	f7ff ffe4 	bl	801098c <LL_C2_IPCC_IsActiveFlag_CHx>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d008      	beq.n	80109dc <HW_IPCC_Rx_Handler+0x24>
 80109ca:	4b15      	ldr	r3, [pc, #84]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 80109cc:	685b      	ldr	r3, [r3, #4]
 80109ce:	f003 0302 	and.w	r3, r3, #2
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d102      	bne.n	80109dc <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80109d6:	f000 f8d5 	bl	8010b84 <HW_IPCC_SYS_EvtHandler>
 80109da:	e01e      	b.n	8010a1a <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80109dc:	2101      	movs	r1, #1
 80109de:	4810      	ldr	r0, [pc, #64]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 80109e0:	f7ff ffd4 	bl	801098c <LL_C2_IPCC_IsActiveFlag_CHx>
 80109e4:	4603      	mov	r3, r0
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d008      	beq.n	80109fc <HW_IPCC_Rx_Handler+0x44>
 80109ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 80109ec:	685b      	ldr	r3, [r3, #4]
 80109ee:	f003 0301 	and.w	r3, r3, #1
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d102      	bne.n	80109fc <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80109f6:	f000 f889 	bl	8010b0c <HW_IPCC_BLE_EvtHandler>
 80109fa:	e00e      	b.n	8010a1a <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80109fc:	2108      	movs	r1, #8
 80109fe:	4808      	ldr	r0, [pc, #32]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 8010a00:	f7ff ffc4 	bl	801098c <LL_C2_IPCC_IsActiveFlag_CHx>
 8010a04:	4603      	mov	r3, r0
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d008      	beq.n	8010a1c <HW_IPCC_Rx_Handler+0x64>
 8010a0a:	4b05      	ldr	r3, [pc, #20]	@ (8010a20 <HW_IPCC_Rx_Handler+0x68>)
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	f003 0308 	and.w	r3, r3, #8
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d102      	bne.n	8010a1c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8010a16:	f000 f901 	bl	8010c1c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8010a1a:	bf00      	nop
 8010a1c:	bf00      	nop
}
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	58000c00 	.word	0x58000c00

08010a24 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8010a28:	2102      	movs	r1, #2
 8010a2a:	4818      	ldr	r0, [pc, #96]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a2c:	f7ff ff99 	bl	8010962 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d108      	bne.n	8010a48 <HW_IPCC_Tx_Handler+0x24>
 8010a36:	4b15      	ldr	r3, [pc, #84]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d102      	bne.n	8010a48 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8010a42:	f000 f893 	bl	8010b6c <HW_IPCC_SYS_CmdEvtHandler>
 8010a46:	e01e      	b.n	8010a86 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8010a48:	2108      	movs	r1, #8
 8010a4a:	4810      	ldr	r0, [pc, #64]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a4c:	f7ff ff89 	bl	8010962 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d108      	bne.n	8010a68 <HW_IPCC_Tx_Handler+0x44>
 8010a56:	4b0d      	ldr	r3, [pc, #52]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a58:	685b      	ldr	r3, [r3, #4]
 8010a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d102      	bne.n	8010a68 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8010a62:	f000 f8bd 	bl	8010be0 <HW_IPCC_MM_FreeBufHandler>
 8010a66:	e00e      	b.n	8010a86 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8010a68:	2120      	movs	r1, #32
 8010a6a:	4808      	ldr	r0, [pc, #32]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a6c:	f7ff ff79 	bl	8010962 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010a70:	4603      	mov	r3, r0
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d108      	bne.n	8010a88 <HW_IPCC_Tx_Handler+0x64>
 8010a76:	4b05      	ldr	r3, [pc, #20]	@ (8010a8c <HW_IPCC_Tx_Handler+0x68>)
 8010a78:	685b      	ldr	r3, [r3, #4]
 8010a7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d102      	bne.n	8010a88 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8010a82:	f000 f84f 	bl	8010b24 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8010a86:	bf00      	nop
 8010a88:	bf00      	nop
}
 8010a8a:	bd80      	pop	{r7, pc}
 8010a8c:	58000c00 	.word	0x58000c00

08010a90 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8010a90:	b580      	push	{r7, lr}
 8010a92:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8010a94:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010a98:	f7ff fed3 	bl	8010842 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8010a9c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010aa0:	f7ff fea4 	bl	80107ec <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8010aa4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8010aa8:	f7ff fe8c 	bl	80107c4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8010aac:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8010aae:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8010ab0:	f7ff fe78 	bl	80107a4 <LL_PWR_EnableBootC2>

  return;
 8010ab4:	bf00      	nop
}
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8010abc:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8010ac0:	f7ff fea6 	bl	8010810 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8010ac4:	4806      	ldr	r0, [pc, #24]	@ (8010ae0 <HW_IPCC_Init+0x28>)
 8010ac6:	f7ff fee8 	bl	801089a <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8010aca:	4805      	ldr	r0, [pc, #20]	@ (8010ae0 <HW_IPCC_Init+0x28>)
 8010acc:	f7ff fed5 	bl	801087a <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8010ad0:	202c      	movs	r0, #44	@ 0x2c
 8010ad2:	f7f7 fe4a 	bl	800876a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8010ad6:	202d      	movs	r0, #45	@ 0x2d
 8010ad8:	f7f7 fe47 	bl	800876a <HAL_NVIC_EnableIRQ>

  return;
 8010adc:	bf00      	nop
}
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	58000c00 	.word	0x58000c00

08010ae4 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010ae8:	2101      	movs	r1, #1
 8010aea:	4802      	ldr	r0, [pc, #8]	@ (8010af4 <HW_IPCC_BLE_Init+0x10>)
 8010aec:	f7ff ff0a 	bl	8010904 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010af0:	bf00      	nop
}
 8010af2:	bd80      	pop	{r7, pc}
 8010af4:	58000c00 	.word	0x58000c00

08010af8 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8010afc:	2101      	movs	r1, #1
 8010afe:	4802      	ldr	r0, [pc, #8]	@ (8010b08 <HW_IPCC_BLE_SendCmd+0x10>)
 8010b00:	f7ff ff20 	bl	8010944 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010b04:	bf00      	nop
}
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	58000c00 	.word	0x58000c00

08010b0c <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8010b10:	f7fd ff02 	bl	800e918 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8010b14:	2101      	movs	r1, #1
 8010b16:	4802      	ldr	r0, [pc, #8]	@ (8010b20 <HW_IPCC_BLE_EvtHandler+0x14>)
 8010b18:	f7ff ff06 	bl	8010928 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010b1c:	bf00      	nop
}
 8010b1e:	bd80      	pop	{r7, pc}
 8010b20:	58000c00 	.word	0x58000c00

08010b24 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8010b28:	2120      	movs	r1, #32
 8010b2a:	4803      	ldr	r0, [pc, #12]	@ (8010b38 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8010b2c:	f7ff fed8 	bl	80108e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8010b30:	f7fd ff22 	bl	800e978 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8010b34:	bf00      	nop
}
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	58000c00 	.word	0x58000c00

08010b3c <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010b40:	2102      	movs	r1, #2
 8010b42:	4802      	ldr	r0, [pc, #8]	@ (8010b4c <HW_IPCC_SYS_Init+0x10>)
 8010b44:	f7ff fede 	bl	8010904 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010b48:	bf00      	nop
}
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	58000c00 	.word	0x58000c00

08010b50 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010b54:	2102      	movs	r1, #2
 8010b56:	4804      	ldr	r0, [pc, #16]	@ (8010b68 <HW_IPCC_SYS_SendCmd+0x18>)
 8010b58:	f7ff fef4 	bl	8010944 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010b5c:	2102      	movs	r1, #2
 8010b5e:	4802      	ldr	r0, [pc, #8]	@ (8010b68 <HW_IPCC_SYS_SendCmd+0x18>)
 8010b60:	f7ff feab 	bl	80108ba <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8010b64:	bf00      	nop
}
 8010b66:	bd80      	pop	{r7, pc}
 8010b68:	58000c00 	.word	0x58000c00

08010b6c <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8010b70:	2102      	movs	r1, #2
 8010b72:	4803      	ldr	r0, [pc, #12]	@ (8010b80 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8010b74:	f7ff feb4 	bl	80108e0 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8010b78:	f7fd ff4e 	bl	800ea18 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8010b7c:	bf00      	nop
}
 8010b7e:	bd80      	pop	{r7, pc}
 8010b80:	58000c00 	.word	0x58000c00

08010b84 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8010b88:	f7fd ff5c 	bl	800ea44 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8010b8c:	2102      	movs	r1, #2
 8010b8e:	4802      	ldr	r0, [pc, #8]	@ (8010b98 <HW_IPCC_SYS_EvtHandler+0x14>)
 8010b90:	f7ff feca 	bl	8010928 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010b94:	bf00      	nop
}
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	58000c00 	.word	0x58000c00

08010b9c <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8010b9c:	b580      	push	{r7, lr}
 8010b9e:	b082      	sub	sp, #8
 8010ba0:	af00      	add	r7, sp, #0
 8010ba2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8010ba4:	2108      	movs	r1, #8
 8010ba6:	480c      	ldr	r0, [pc, #48]	@ (8010bd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010ba8:	f7ff fedb 	bl	8010962 <LL_C1_IPCC_IsActiveFlag_CHx>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d007      	beq.n	8010bc2 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8010bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8010bdc <HW_IPCC_MM_SendFreeBuf+0x40>)
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010bb8:	2108      	movs	r1, #8
 8010bba:	4807      	ldr	r0, [pc, #28]	@ (8010bd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010bbc:	f7ff fe7d 	bl	80108ba <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8010bc0:	e006      	b.n	8010bd0 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010bc6:	2108      	movs	r1, #8
 8010bc8:	4803      	ldr	r0, [pc, #12]	@ (8010bd8 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8010bca:	f7ff febb 	bl	8010944 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8010bce:	bf00      	nop
}
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}
 8010bd6:	bf00      	nop
 8010bd8:	58000c00 	.word	0x58000c00
 8010bdc:	20000b54 	.word	0x20000b54

08010be0 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010be4:	2108      	movs	r1, #8
 8010be6:	4806      	ldr	r0, [pc, #24]	@ (8010c00 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010be8:	f7ff fe7a 	bl	80108e0 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8010bec:	4b05      	ldr	r3, [pc, #20]	@ (8010c04 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8010bf2:	2108      	movs	r1, #8
 8010bf4:	4802      	ldr	r0, [pc, #8]	@ (8010c00 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8010bf6:	f7ff fea5 	bl	8010944 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8010bfa:	bf00      	nop
}
 8010bfc:	bd80      	pop	{r7, pc}
 8010bfe:	bf00      	nop
 8010c00:	58000c00 	.word	0x58000c00
 8010c04:	20000b54 	.word	0x20000b54

08010c08 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010c0c:	2108      	movs	r1, #8
 8010c0e:	4802      	ldr	r0, [pc, #8]	@ (8010c18 <HW_IPCC_TRACES_Init+0x10>)
 8010c10:	f7ff fe78 	bl	8010904 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8010c14:	bf00      	nop
}
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	58000c00 	.word	0x58000c00

08010c1c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8010c20:	f7fd ffb8 	bl	800eb94 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8010c24:	2108      	movs	r1, #8
 8010c26:	4802      	ldr	r0, [pc, #8]	@ (8010c30 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8010c28:	f7ff fe7e 	bl	8010928 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8010c2c:	bf00      	nop
}
 8010c2e:	bd80      	pop	{r7, pc}
 8010c30:	58000c00 	.word	0x58000c00

08010c34 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8010c34:	b480      	push	{r7}
 8010c36:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8010c38:	4b05      	ldr	r3, [pc, #20]	@ (8010c50 <UTIL_LPM_Init+0x1c>)
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8010c3e:	4b05      	ldr	r3, [pc, #20]	@ (8010c54 <UTIL_LPM_Init+0x20>)
 8010c40:	2200      	movs	r2, #0
 8010c42:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8010c44:	bf00      	nop
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr
 8010c4e:	bf00      	nop
 8010c50:	20000b58 	.word	0x20000b58
 8010c54:	20000b5c 	.word	0x20000b5c

08010c58 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8010c58:	b480      	push	{r7}
 8010c5a:	b087      	sub	sp, #28
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	6078      	str	r0, [r7, #4]
 8010c60:	460b      	mov	r3, r1
 8010c62:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c64:	f3ef 8310 	mrs	r3, PRIMASK
 8010c68:	613b      	str	r3, [r7, #16]
  return(result);
 8010c6a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8010c6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c6e:	b672      	cpsid	i
}
 8010c70:	bf00      	nop
  
  switch(state)
 8010c72:	78fb      	ldrb	r3, [r7, #3]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d008      	beq.n	8010c8a <UTIL_LPM_SetOffMode+0x32>
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d10e      	bne.n	8010c9a <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8010c7c:	4b0d      	ldr	r3, [pc, #52]	@ (8010cb4 <UTIL_LPM_SetOffMode+0x5c>)
 8010c7e:	681a      	ldr	r2, [r3, #0]
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	4313      	orrs	r3, r2
 8010c84:	4a0b      	ldr	r2, [pc, #44]	@ (8010cb4 <UTIL_LPM_SetOffMode+0x5c>)
 8010c86:	6013      	str	r3, [r2, #0]
      break;
 8010c88:	e008      	b.n	8010c9c <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	43da      	mvns	r2, r3
 8010c8e:	4b09      	ldr	r3, [pc, #36]	@ (8010cb4 <UTIL_LPM_SetOffMode+0x5c>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	4013      	ands	r3, r2
 8010c94:	4a07      	ldr	r2, [pc, #28]	@ (8010cb4 <UTIL_LPM_SetOffMode+0x5c>)
 8010c96:	6013      	str	r3, [r2, #0]
      break;
 8010c98:	e000      	b.n	8010c9c <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8010c9a:	bf00      	nop
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	f383 8810 	msr	PRIMASK, r3
}
 8010ca6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8010ca8:	bf00      	nop
 8010caa:	371c      	adds	r7, #28
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr
 8010cb4:	20000b5c 	.word	0x20000b5c

08010cb8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b090      	sub	sp, #64	@ 0x40
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8010cc0:	4b73      	ldr	r3, [pc, #460]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8010cc6:	4b72      	ldr	r3, [pc, #456]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010cc8:	681a      	ldr	r2, [r3, #0]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	4013      	ands	r3, r2
 8010cce:	4a70      	ldr	r2, [pc, #448]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010cd0:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8010cd2:	4b70      	ldr	r3, [pc, #448]	@ (8010e94 <UTIL_SEQ_Run+0x1dc>)
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010cd8:	4b6f      	ldr	r3, [pc, #444]	@ (8010e98 <UTIL_SEQ_Run+0x1e0>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8010cde:	4b6f      	ldr	r3, [pc, #444]	@ (8010e9c <UTIL_SEQ_Run+0x1e4>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8010ce4:	4b6e      	ldr	r3, [pc, #440]	@ (8010ea0 <UTIL_SEQ_Run+0x1e8>)
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010cea:	e08d      	b.n	8010e08 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8010cec:	2300      	movs	r3, #0
 8010cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010cf0:	e002      	b.n	8010cf8 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8010cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8010cf8:	4a6a      	ldr	r2, [pc, #424]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010cfc:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d02:	401a      	ands	r2, r3
 8010d04:	4b62      	ldr	r3, [pc, #392]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	4013      	ands	r3, r2
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d0f1      	beq.n	8010cf2 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8010d0e:	4a65      	ldr	r2, [pc, #404]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d12:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d18:	401a      	ands	r2, r3
 8010d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	4013      	ands	r3, r2
 8010d20:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8010d22:	4a60      	ldr	r2, [pc, #384]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d26:	00db      	lsls	r3, r3, #3
 8010d28:	4413      	add	r3, r2
 8010d2a:	685a      	ldr	r2, [r3, #4]
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d2e:	4013      	ands	r3, r2
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d106      	bne.n	8010d42 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8010d34:	4a5b      	ldr	r2, [pc, #364]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d38:	00db      	lsls	r3, r3, #3
 8010d3a:	4413      	add	r3, r2
 8010d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8010d40:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8010d42:	4a58      	ldr	r2, [pc, #352]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d46:	00db      	lsls	r3, r3, #3
 8010d48:	4413      	add	r3, r2
 8010d4a:	685a      	ldr	r2, [r3, #4]
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d4e:	4013      	ands	r3, r2
 8010d50:	4618      	mov	r0, r3
 8010d52:	f000 f9b3 	bl	80110bc <SEQ_BitPosition>
 8010d56:	4603      	mov	r3, r0
 8010d58:	461a      	mov	r2, r3
 8010d5a:	4b53      	ldr	r3, [pc, #332]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010d5c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8010d5e:	4a51      	ldr	r2, [pc, #324]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d62:	00db      	lsls	r3, r3, #3
 8010d64:	4413      	add	r3, r2
 8010d66:	685a      	ldr	r2, [r3, #4]
 8010d68:	4b4f      	ldr	r3, [pc, #316]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2101      	movs	r1, #1
 8010d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d72:	43db      	mvns	r3, r3
 8010d74:	401a      	ands	r2, r3
 8010d76:	494b      	ldr	r1, [pc, #300]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010d78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d7a:	00db      	lsls	r3, r3, #3
 8010d7c:	440b      	add	r3, r1
 8010d7e:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d80:	f3ef 8310 	mrs	r3, PRIMASK
 8010d84:	61bb      	str	r3, [r7, #24]
  return(result);
 8010d86:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010d88:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8010d8a:	b672      	cpsid	i
}
 8010d8c:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8010d8e:	4b46      	ldr	r3, [pc, #280]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	2201      	movs	r2, #1
 8010d94:	fa02 f303 	lsl.w	r3, r2, r3
 8010d98:	43da      	mvns	r2, r3
 8010d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e94 <UTIL_SEQ_Run+0x1dc>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	4013      	ands	r3, r2
 8010da0:	4a3c      	ldr	r2, [pc, #240]	@ (8010e94 <UTIL_SEQ_Run+0x1dc>)
 8010da2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010da4:	2302      	movs	r3, #2
 8010da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010da8:	e013      	b.n	8010dd2 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8010daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dac:	3b01      	subs	r3, #1
 8010dae:	4a3d      	ldr	r2, [pc, #244]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010db0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8010db4:	4b3c      	ldr	r3, [pc, #240]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2201      	movs	r2, #1
 8010dba:	fa02 f303 	lsl.w	r3, r2, r3
 8010dbe:	43da      	mvns	r2, r3
 8010dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dc2:	3b01      	subs	r3, #1
 8010dc4:	400a      	ands	r2, r1
 8010dc6:	4937      	ldr	r1, [pc, #220]	@ (8010ea4 <UTIL_SEQ_Run+0x1ec>)
 8010dc8:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010dcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d1e8      	bne.n	8010daa <UTIL_SEQ_Run+0xf2>
 8010dd8:	6a3b      	ldr	r3, [r7, #32]
 8010dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ddc:	697b      	ldr	r3, [r7, #20]
 8010dde:	f383 8810 	msr	PRIMASK, r3
}
 8010de2:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010de4:	4b30      	ldr	r3, [pc, #192]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a30      	ldr	r2, [pc, #192]	@ (8010eac <UTIL_SEQ_Run+0x1f4>)
 8010dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dee:	4798      	blx	r3

    local_taskset = TaskSet;
 8010df0:	4b28      	ldr	r3, [pc, #160]	@ (8010e94 <UTIL_SEQ_Run+0x1dc>)
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8010df6:	4b28      	ldr	r3, [pc, #160]	@ (8010e98 <UTIL_SEQ_Run+0x1e0>)
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8010dfc:	4b27      	ldr	r3, [pc, #156]	@ (8010e9c <UTIL_SEQ_Run+0x1e4>)
 8010dfe:	681b      	ldr	r3, [r3, #0]
 8010e00:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8010e02:	4b27      	ldr	r3, [pc, #156]	@ (8010ea0 <UTIL_SEQ_Run+0x1e8>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8010e08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e0c:	401a      	ands	r2, r3
 8010e0e:	4b20      	ldr	r3, [pc, #128]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4013      	ands	r3, r2
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d005      	beq.n	8010e24 <UTIL_SEQ_Run+0x16c>
 8010e18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e1c:	4013      	ands	r3, r2
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	f43f af64 	beq.w	8010cec <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010e24:	4b20      	ldr	r3, [pc, #128]	@ (8010ea8 <UTIL_SEQ_Run+0x1f0>)
 8010e26:	f04f 32ff 	mov.w	r2, #4294967295
 8010e2a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010e2c:	f000 f938 	bl	80110a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e30:	f3ef 8310 	mrs	r3, PRIMASK
 8010e34:	613b      	str	r3, [r7, #16]
  return(result);
 8010e36:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8010e38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010e3a:	b672      	cpsid	i
}
 8010e3c:	bf00      	nop
  local_taskset = TaskSet;
 8010e3e:	4b15      	ldr	r3, [pc, #84]	@ (8010e94 <UTIL_SEQ_Run+0x1dc>)
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010e44:	4b14      	ldr	r3, [pc, #80]	@ (8010e98 <UTIL_SEQ_Run+0x1e0>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8010e4a:	4b14      	ldr	r3, [pc, #80]	@ (8010e9c <UTIL_SEQ_Run+0x1e4>)
 8010e4c:	681b      	ldr	r3, [r3, #0]
 8010e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010e50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e54:	401a      	ands	r2, r3
 8010e56:	4b0e      	ldr	r3, [pc, #56]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4013      	ands	r3, r2
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d107      	bne.n	8010e70 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8010e60:	4b0f      	ldr	r3, [pc, #60]	@ (8010ea0 <UTIL_SEQ_Run+0x1e8>)
 8010e62:	681a      	ldr	r2, [r3, #0]
 8010e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e66:	4013      	ands	r3, r2
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d101      	bne.n	8010e70 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8010e6c:	f7f0 fedb 	bl	8001c26 <UTIL_SEQ_Idle>
 8010e70:	69fb      	ldr	r3, [r7, #28]
 8010e72:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f383 8810 	msr	PRIMASK, r3
}
 8010e7a:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8010e7c:	f000 f917 	bl	80110ae <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8010e80:	4a03      	ldr	r2, [pc, #12]	@ (8010e90 <UTIL_SEQ_Run+0x1d8>)
 8010e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e84:	6013      	str	r3, [r2, #0]

  return;
 8010e86:	bf00      	nop
}
 8010e88:	3740      	adds	r7, #64	@ 0x40
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	bd80      	pop	{r7, pc}
 8010e8e:	bf00      	nop
 8010e90:	2000010c 	.word	0x2000010c
 8010e94:	20000b60 	.word	0x20000b60
 8010e98:	20000b64 	.word	0x20000b64
 8010e9c:	20000108 	.word	0x20000108
 8010ea0:	20000b68 	.word	0x20000b68
 8010ea4:	20000bf0 	.word	0x20000bf0
 8010ea8:	20000b6c 	.word	0x20000b6c
 8010eac:	20000b70 	.word	0x20000b70

08010eb0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8010ec0:	617b      	str	r3, [r7, #20]
  return(result);
 8010ec2:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010ec4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ec6:	b672      	cpsid	i
}
 8010ec8:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f000 f8f6 	bl	80110bc <SEQ_BitPosition>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	4a06      	ldr	r2, [pc, #24]	@ (8010ef0 <UTIL_SEQ_RegTask+0x40>)
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ee0:	69bb      	ldr	r3, [r7, #24]
 8010ee2:	f383 8810 	msr	PRIMASK, r3
}
 8010ee6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8010ee8:	bf00      	nop
}
 8010eea:	3720      	adds	r7, #32
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20000b70 	.word	0x20000b70

08010ef4 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010ef4:	b480      	push	{r7}
 8010ef6:	b087      	sub	sp, #28
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010efe:	f3ef 8310 	mrs	r3, PRIMASK
 8010f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f04:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010f06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f08:	b672      	cpsid	i
}
 8010f0a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8010f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8010f44 <UTIL_SEQ_SetTask+0x50>)
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4313      	orrs	r3, r2
 8010f14:	4a0b      	ldr	r2, [pc, #44]	@ (8010f44 <UTIL_SEQ_SetTask+0x50>)
 8010f16:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8010f18:	4a0b      	ldr	r2, [pc, #44]	@ (8010f48 <UTIL_SEQ_SetTask+0x54>)
 8010f1a:	683b      	ldr	r3, [r7, #0]
 8010f1c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	431a      	orrs	r2, r3
 8010f24:	4908      	ldr	r1, [pc, #32]	@ (8010f48 <UTIL_SEQ_SetTask+0x54>)
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010f2c:	697b      	ldr	r3, [r7, #20]
 8010f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	f383 8810 	msr	PRIMASK, r3
}
 8010f36:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010f38:	bf00      	nop
}
 8010f3a:	371c      	adds	r7, #28
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f42:	4770      	bx	lr
 8010f44:	20000b60 	.word	0x20000b60
 8010f48:	20000bf0 	.word	0x20000bf0

08010f4c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b087      	sub	sp, #28
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f54:	f3ef 8310 	mrs	r3, PRIMASK
 8010f58:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f5a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010f5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f5e:	b672      	cpsid	i
}
 8010f60:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	43da      	mvns	r2, r3
 8010f66:	4b08      	ldr	r3, [pc, #32]	@ (8010f88 <UTIL_SEQ_PauseTask+0x3c>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	4013      	ands	r3, r2
 8010f6c:	4a06      	ldr	r2, [pc, #24]	@ (8010f88 <UTIL_SEQ_PauseTask+0x3c>)
 8010f6e:	6013      	str	r3, [r2, #0]
 8010f70:	697b      	ldr	r3, [r7, #20]
 8010f72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f74:	693b      	ldr	r3, [r7, #16]
 8010f76:	f383 8810 	msr	PRIMASK, r3
}
 8010f7a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010f7c:	bf00      	nop
}
 8010f7e:	371c      	adds	r7, #28
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr
 8010f88:	20000108 	.word	0x20000108

08010f8c <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b087      	sub	sp, #28
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f94:	f3ef 8310 	mrs	r3, PRIMASK
 8010f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f9a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010f9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010f9e:	b672      	cpsid	i
}
 8010fa0:	bf00      	nop

  TaskMask |= TaskId_bm;
 8010fa2:	4b09      	ldr	r3, [pc, #36]	@ (8010fc8 <UTIL_SEQ_ResumeTask+0x3c>)
 8010fa4:	681a      	ldr	r2, [r3, #0]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	4a07      	ldr	r2, [pc, #28]	@ (8010fc8 <UTIL_SEQ_ResumeTask+0x3c>)
 8010fac:	6013      	str	r3, [r2, #0]
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	f383 8810 	msr	PRIMASK, r3
}
 8010fb8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010fba:	bf00      	nop
}
 8010fbc:	371c      	adds	r7, #28
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc4:	4770      	bx	lr
 8010fc6:	bf00      	nop
 8010fc8:	20000108 	.word	0x20000108

08010fcc <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010fcc:	b480      	push	{r7}
 8010fce:	b087      	sub	sp, #28
 8010fd0:	af00      	add	r7, sp, #0
 8010fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8010fd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8010fda:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8010fdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010fde:	b672      	cpsid	i
}
 8010fe0:	bf00      	nop

  EvtSet |= EvtId_bm;
 8010fe2:	4b09      	ldr	r3, [pc, #36]	@ (8011008 <UTIL_SEQ_SetEvt+0x3c>)
 8010fe4:	681a      	ldr	r2, [r3, #0]
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	4313      	orrs	r3, r2
 8010fea:	4a07      	ldr	r2, [pc, #28]	@ (8011008 <UTIL_SEQ_SetEvt+0x3c>)
 8010fec:	6013      	str	r3, [r2, #0]
 8010fee:	697b      	ldr	r3, [r7, #20]
 8010ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ff2:	693b      	ldr	r3, [r7, #16]
 8010ff4:	f383 8810 	msr	PRIMASK, r3
}
 8010ff8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8010ffa:	bf00      	nop
}
 8010ffc:	371c      	adds	r7, #28
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr
 8011006:	bf00      	nop
 8011008:	20000b64 	.word	0x20000b64

0801100c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b088      	sub	sp, #32
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8011014:	4b1f      	ldr	r3, [pc, #124]	@ (8011094 <UTIL_SEQ_WaitEvt+0x88>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801101a:	4b1e      	ldr	r3, [pc, #120]	@ (8011094 <UTIL_SEQ_WaitEvt+0x88>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011022:	d102      	bne.n	801102a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8011024:	2300      	movs	r3, #0
 8011026:	61fb      	str	r3, [r7, #28]
 8011028:	e005      	b.n	8011036 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801102a:	4b1a      	ldr	r3, [pc, #104]	@ (8011094 <UTIL_SEQ_WaitEvt+0x88>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	2201      	movs	r2, #1
 8011030:	fa02 f303 	lsl.w	r3, r2, r3
 8011034:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8011036:	4b18      	ldr	r3, [pc, #96]	@ (8011098 <UTIL_SEQ_WaitEvt+0x8c>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 801103c:	4a16      	ldr	r2, [pc, #88]	@ (8011098 <UTIL_SEQ_WaitEvt+0x8c>)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8011042:	e003      	b.n	801104c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8011044:	6879      	ldr	r1, [r7, #4]
 8011046:	69f8      	ldr	r0, [r7, #28]
 8011048:	f7f0 fdf4 	bl	8001c34 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 801104c:	4b13      	ldr	r3, [pc, #76]	@ (801109c <UTIL_SEQ_WaitEvt+0x90>)
 801104e:	681a      	ldr	r2, [r3, #0]
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	4013      	ands	r3, r2
 8011054:	2b00      	cmp	r3, #0
 8011056:	d0f5      	beq.n	8011044 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8011058:	4a0e      	ldr	r2, [pc, #56]	@ (8011094 <UTIL_SEQ_WaitEvt+0x88>)
 801105a:	69bb      	ldr	r3, [r7, #24]
 801105c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801105e:	f3ef 8310 	mrs	r3, PRIMASK
 8011062:	60bb      	str	r3, [r7, #8]
  return(result);
 8011064:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8011068:	b672      	cpsid	i
}
 801106a:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	43da      	mvns	r2, r3
 8011070:	4b0a      	ldr	r3, [pc, #40]	@ (801109c <UTIL_SEQ_WaitEvt+0x90>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4013      	ands	r3, r2
 8011076:	4a09      	ldr	r2, [pc, #36]	@ (801109c <UTIL_SEQ_WaitEvt+0x90>)
 8011078:	6013      	str	r3, [r2, #0]
 801107a:	693b      	ldr	r3, [r7, #16]
 801107c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	f383 8810 	msr	PRIMASK, r3
}
 8011084:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8011086:	4a04      	ldr	r2, [pc, #16]	@ (8011098 <UTIL_SEQ_WaitEvt+0x8c>)
 8011088:	697b      	ldr	r3, [r7, #20]
 801108a:	6013      	str	r3, [r2, #0]
  return;
 801108c:	bf00      	nop
}
 801108e:	3720      	adds	r7, #32
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	20000b6c 	.word	0x20000b6c
 8011098:	20000b68 	.word	0x20000b68
 801109c:	20000b64 	.word	0x20000b64

080110a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80110a0:	b480      	push	{r7}
 80110a2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80110a4:	bf00      	nop
}
 80110a6:	46bd      	mov	sp, r7
 80110a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ac:	4770      	bx	lr

080110ae <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80110ae:	b480      	push	{r7}
 80110b0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80110b2:	bf00      	nop
}
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80110c4:	2300      	movs	r3, #0
 80110c6:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110d2:	d204      	bcs.n	80110de <SEQ_BitPosition+0x22>
 80110d4:	2310      	movs	r3, #16
 80110d6:	73fb      	strb	r3, [r7, #15]
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	041b      	lsls	r3, r3, #16
 80110dc:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80110e4:	d205      	bcs.n	80110f2 <SEQ_BitPosition+0x36>
 80110e6:	7bfb      	ldrb	r3, [r7, #15]
 80110e8:	3308      	adds	r3, #8
 80110ea:	73fb      	strb	r3, [r7, #15]
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	021b      	lsls	r3, r3, #8
 80110f0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80110f2:	68bb      	ldr	r3, [r7, #8]
 80110f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80110f8:	d205      	bcs.n	8011106 <SEQ_BitPosition+0x4a>
 80110fa:	7bfb      	ldrb	r3, [r7, #15]
 80110fc:	3304      	adds	r3, #4
 80110fe:	73fb      	strb	r3, [r7, #15]
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	011b      	lsls	r3, r3, #4
 8011104:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	0f1b      	lsrs	r3, r3, #28
 801110a:	4a07      	ldr	r2, [pc, #28]	@ (8011128 <SEQ_BitPosition+0x6c>)
 801110c:	5cd2      	ldrb	r2, [r2, r3]
 801110e:	7bfb      	ldrb	r3, [r7, #15]
 8011110:	4413      	add	r3, r2
 8011112:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8011114:	7bfb      	ldrb	r3, [r7, #15]
 8011116:	f1c3 031f 	rsb	r3, r3, #31
 801111a:	b2db      	uxtb	r3, r3
}
 801111c:	4618      	mov	r0, r3
 801111e:	3714      	adds	r7, #20
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr
 8011128:	08013df4 	.word	0x08013df4

0801112c <std>:
 801112c:	2300      	movs	r3, #0
 801112e:	b510      	push	{r4, lr}
 8011130:	4604      	mov	r4, r0
 8011132:	e9c0 3300 	strd	r3, r3, [r0]
 8011136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801113a:	6083      	str	r3, [r0, #8]
 801113c:	8181      	strh	r1, [r0, #12]
 801113e:	6643      	str	r3, [r0, #100]	@ 0x64
 8011140:	81c2      	strh	r2, [r0, #14]
 8011142:	6183      	str	r3, [r0, #24]
 8011144:	4619      	mov	r1, r3
 8011146:	2208      	movs	r2, #8
 8011148:	305c      	adds	r0, #92	@ 0x5c
 801114a:	f000 fa01 	bl	8011550 <memset>
 801114e:	4b0d      	ldr	r3, [pc, #52]	@ (8011184 <std+0x58>)
 8011150:	6263      	str	r3, [r4, #36]	@ 0x24
 8011152:	4b0d      	ldr	r3, [pc, #52]	@ (8011188 <std+0x5c>)
 8011154:	62a3      	str	r3, [r4, #40]	@ 0x28
 8011156:	4b0d      	ldr	r3, [pc, #52]	@ (801118c <std+0x60>)
 8011158:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801115a:	4b0d      	ldr	r3, [pc, #52]	@ (8011190 <std+0x64>)
 801115c:	6323      	str	r3, [r4, #48]	@ 0x30
 801115e:	4b0d      	ldr	r3, [pc, #52]	@ (8011194 <std+0x68>)
 8011160:	6224      	str	r4, [r4, #32]
 8011162:	429c      	cmp	r4, r3
 8011164:	d006      	beq.n	8011174 <std+0x48>
 8011166:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801116a:	4294      	cmp	r4, r2
 801116c:	d002      	beq.n	8011174 <std+0x48>
 801116e:	33d0      	adds	r3, #208	@ 0xd0
 8011170:	429c      	cmp	r4, r3
 8011172:	d105      	bne.n	8011180 <std+0x54>
 8011174:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8011178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801117c:	f000 ba76 	b.w	801166c <__retarget_lock_init_recursive>
 8011180:	bd10      	pop	{r4, pc}
 8011182:	bf00      	nop
 8011184:	080113a1 	.word	0x080113a1
 8011188:	080113c3 	.word	0x080113c3
 801118c:	080113fb 	.word	0x080113fb
 8011190:	0801141f 	.word	0x0801141f
 8011194:	20000c00 	.word	0x20000c00

08011198 <stdio_exit_handler>:
 8011198:	4a02      	ldr	r2, [pc, #8]	@ (80111a4 <stdio_exit_handler+0xc>)
 801119a:	4903      	ldr	r1, [pc, #12]	@ (80111a8 <stdio_exit_handler+0x10>)
 801119c:	4803      	ldr	r0, [pc, #12]	@ (80111ac <stdio_exit_handler+0x14>)
 801119e:	f000 b869 	b.w	8011274 <_fwalk_sglue>
 80111a2:	bf00      	nop
 80111a4:	20000110 	.word	0x20000110
 80111a8:	08011f29 	.word	0x08011f29
 80111ac:	20000120 	.word	0x20000120

080111b0 <cleanup_stdio>:
 80111b0:	6841      	ldr	r1, [r0, #4]
 80111b2:	4b0c      	ldr	r3, [pc, #48]	@ (80111e4 <cleanup_stdio+0x34>)
 80111b4:	4299      	cmp	r1, r3
 80111b6:	b510      	push	{r4, lr}
 80111b8:	4604      	mov	r4, r0
 80111ba:	d001      	beq.n	80111c0 <cleanup_stdio+0x10>
 80111bc:	f000 feb4 	bl	8011f28 <_fflush_r>
 80111c0:	68a1      	ldr	r1, [r4, #8]
 80111c2:	4b09      	ldr	r3, [pc, #36]	@ (80111e8 <cleanup_stdio+0x38>)
 80111c4:	4299      	cmp	r1, r3
 80111c6:	d002      	beq.n	80111ce <cleanup_stdio+0x1e>
 80111c8:	4620      	mov	r0, r4
 80111ca:	f000 fead 	bl	8011f28 <_fflush_r>
 80111ce:	68e1      	ldr	r1, [r4, #12]
 80111d0:	4b06      	ldr	r3, [pc, #24]	@ (80111ec <cleanup_stdio+0x3c>)
 80111d2:	4299      	cmp	r1, r3
 80111d4:	d004      	beq.n	80111e0 <cleanup_stdio+0x30>
 80111d6:	4620      	mov	r0, r4
 80111d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80111dc:	f000 bea4 	b.w	8011f28 <_fflush_r>
 80111e0:	bd10      	pop	{r4, pc}
 80111e2:	bf00      	nop
 80111e4:	20000c00 	.word	0x20000c00
 80111e8:	20000c68 	.word	0x20000c68
 80111ec:	20000cd0 	.word	0x20000cd0

080111f0 <global_stdio_init.part.0>:
 80111f0:	b510      	push	{r4, lr}
 80111f2:	4b0b      	ldr	r3, [pc, #44]	@ (8011220 <global_stdio_init.part.0+0x30>)
 80111f4:	4c0b      	ldr	r4, [pc, #44]	@ (8011224 <global_stdio_init.part.0+0x34>)
 80111f6:	4a0c      	ldr	r2, [pc, #48]	@ (8011228 <global_stdio_init.part.0+0x38>)
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	4620      	mov	r0, r4
 80111fc:	2200      	movs	r2, #0
 80111fe:	2104      	movs	r1, #4
 8011200:	f7ff ff94 	bl	801112c <std>
 8011204:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011208:	2201      	movs	r2, #1
 801120a:	2109      	movs	r1, #9
 801120c:	f7ff ff8e 	bl	801112c <std>
 8011210:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011214:	2202      	movs	r2, #2
 8011216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801121a:	2112      	movs	r1, #18
 801121c:	f7ff bf86 	b.w	801112c <std>
 8011220:	20000d38 	.word	0x20000d38
 8011224:	20000c00 	.word	0x20000c00
 8011228:	08011199 	.word	0x08011199

0801122c <__sfp_lock_acquire>:
 801122c:	4801      	ldr	r0, [pc, #4]	@ (8011234 <__sfp_lock_acquire+0x8>)
 801122e:	f000 ba1e 	b.w	801166e <__retarget_lock_acquire_recursive>
 8011232:	bf00      	nop
 8011234:	20000d41 	.word	0x20000d41

08011238 <__sfp_lock_release>:
 8011238:	4801      	ldr	r0, [pc, #4]	@ (8011240 <__sfp_lock_release+0x8>)
 801123a:	f000 ba19 	b.w	8011670 <__retarget_lock_release_recursive>
 801123e:	bf00      	nop
 8011240:	20000d41 	.word	0x20000d41

08011244 <__sinit>:
 8011244:	b510      	push	{r4, lr}
 8011246:	4604      	mov	r4, r0
 8011248:	f7ff fff0 	bl	801122c <__sfp_lock_acquire>
 801124c:	6a23      	ldr	r3, [r4, #32]
 801124e:	b11b      	cbz	r3, 8011258 <__sinit+0x14>
 8011250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011254:	f7ff bff0 	b.w	8011238 <__sfp_lock_release>
 8011258:	4b04      	ldr	r3, [pc, #16]	@ (801126c <__sinit+0x28>)
 801125a:	6223      	str	r3, [r4, #32]
 801125c:	4b04      	ldr	r3, [pc, #16]	@ (8011270 <__sinit+0x2c>)
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	2b00      	cmp	r3, #0
 8011262:	d1f5      	bne.n	8011250 <__sinit+0xc>
 8011264:	f7ff ffc4 	bl	80111f0 <global_stdio_init.part.0>
 8011268:	e7f2      	b.n	8011250 <__sinit+0xc>
 801126a:	bf00      	nop
 801126c:	080111b1 	.word	0x080111b1
 8011270:	20000d38 	.word	0x20000d38

08011274 <_fwalk_sglue>:
 8011274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011278:	4607      	mov	r7, r0
 801127a:	4688      	mov	r8, r1
 801127c:	4614      	mov	r4, r2
 801127e:	2600      	movs	r6, #0
 8011280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011284:	f1b9 0901 	subs.w	r9, r9, #1
 8011288:	d505      	bpl.n	8011296 <_fwalk_sglue+0x22>
 801128a:	6824      	ldr	r4, [r4, #0]
 801128c:	2c00      	cmp	r4, #0
 801128e:	d1f7      	bne.n	8011280 <_fwalk_sglue+0xc>
 8011290:	4630      	mov	r0, r6
 8011292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011296:	89ab      	ldrh	r3, [r5, #12]
 8011298:	2b01      	cmp	r3, #1
 801129a:	d907      	bls.n	80112ac <_fwalk_sglue+0x38>
 801129c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80112a0:	3301      	adds	r3, #1
 80112a2:	d003      	beq.n	80112ac <_fwalk_sglue+0x38>
 80112a4:	4629      	mov	r1, r5
 80112a6:	4638      	mov	r0, r7
 80112a8:	47c0      	blx	r8
 80112aa:	4306      	orrs	r6, r0
 80112ac:	3568      	adds	r5, #104	@ 0x68
 80112ae:	e7e9      	b.n	8011284 <_fwalk_sglue+0x10>

080112b0 <iprintf>:
 80112b0:	b40f      	push	{r0, r1, r2, r3}
 80112b2:	b507      	push	{r0, r1, r2, lr}
 80112b4:	4906      	ldr	r1, [pc, #24]	@ (80112d0 <iprintf+0x20>)
 80112b6:	ab04      	add	r3, sp, #16
 80112b8:	6808      	ldr	r0, [r1, #0]
 80112ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80112be:	6881      	ldr	r1, [r0, #8]
 80112c0:	9301      	str	r3, [sp, #4]
 80112c2:	f000 fb07 	bl	80118d4 <_vfiprintf_r>
 80112c6:	b003      	add	sp, #12
 80112c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80112cc:	b004      	add	sp, #16
 80112ce:	4770      	bx	lr
 80112d0:	2000011c 	.word	0x2000011c

080112d4 <putchar>:
 80112d4:	4b02      	ldr	r3, [pc, #8]	@ (80112e0 <putchar+0xc>)
 80112d6:	4601      	mov	r1, r0
 80112d8:	6818      	ldr	r0, [r3, #0]
 80112da:	6882      	ldr	r2, [r0, #8]
 80112dc:	f000 beae 	b.w	801203c <_putc_r>
 80112e0:	2000011c 	.word	0x2000011c

080112e4 <_puts_r>:
 80112e4:	6a03      	ldr	r3, [r0, #32]
 80112e6:	b570      	push	{r4, r5, r6, lr}
 80112e8:	6884      	ldr	r4, [r0, #8]
 80112ea:	4605      	mov	r5, r0
 80112ec:	460e      	mov	r6, r1
 80112ee:	b90b      	cbnz	r3, 80112f4 <_puts_r+0x10>
 80112f0:	f7ff ffa8 	bl	8011244 <__sinit>
 80112f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80112f6:	07db      	lsls	r3, r3, #31
 80112f8:	d405      	bmi.n	8011306 <_puts_r+0x22>
 80112fa:	89a3      	ldrh	r3, [r4, #12]
 80112fc:	0598      	lsls	r0, r3, #22
 80112fe:	d402      	bmi.n	8011306 <_puts_r+0x22>
 8011300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011302:	f000 f9b4 	bl	801166e <__retarget_lock_acquire_recursive>
 8011306:	89a3      	ldrh	r3, [r4, #12]
 8011308:	0719      	lsls	r1, r3, #28
 801130a:	d502      	bpl.n	8011312 <_puts_r+0x2e>
 801130c:	6923      	ldr	r3, [r4, #16]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d135      	bne.n	801137e <_puts_r+0x9a>
 8011312:	4621      	mov	r1, r4
 8011314:	4628      	mov	r0, r5
 8011316:	f000 f8c5 	bl	80114a4 <__swsetup_r>
 801131a:	b380      	cbz	r0, 801137e <_puts_r+0x9a>
 801131c:	f04f 35ff 	mov.w	r5, #4294967295
 8011320:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011322:	07da      	lsls	r2, r3, #31
 8011324:	d405      	bmi.n	8011332 <_puts_r+0x4e>
 8011326:	89a3      	ldrh	r3, [r4, #12]
 8011328:	059b      	lsls	r3, r3, #22
 801132a:	d402      	bmi.n	8011332 <_puts_r+0x4e>
 801132c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801132e:	f000 f99f 	bl	8011670 <__retarget_lock_release_recursive>
 8011332:	4628      	mov	r0, r5
 8011334:	bd70      	pop	{r4, r5, r6, pc}
 8011336:	2b00      	cmp	r3, #0
 8011338:	da04      	bge.n	8011344 <_puts_r+0x60>
 801133a:	69a2      	ldr	r2, [r4, #24]
 801133c:	429a      	cmp	r2, r3
 801133e:	dc17      	bgt.n	8011370 <_puts_r+0x8c>
 8011340:	290a      	cmp	r1, #10
 8011342:	d015      	beq.n	8011370 <_puts_r+0x8c>
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	1c5a      	adds	r2, r3, #1
 8011348:	6022      	str	r2, [r4, #0]
 801134a:	7019      	strb	r1, [r3, #0]
 801134c:	68a3      	ldr	r3, [r4, #8]
 801134e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011352:	3b01      	subs	r3, #1
 8011354:	60a3      	str	r3, [r4, #8]
 8011356:	2900      	cmp	r1, #0
 8011358:	d1ed      	bne.n	8011336 <_puts_r+0x52>
 801135a:	2b00      	cmp	r3, #0
 801135c:	da11      	bge.n	8011382 <_puts_r+0x9e>
 801135e:	4622      	mov	r2, r4
 8011360:	210a      	movs	r1, #10
 8011362:	4628      	mov	r0, r5
 8011364:	f000 f85f 	bl	8011426 <__swbuf_r>
 8011368:	3001      	adds	r0, #1
 801136a:	d0d7      	beq.n	801131c <_puts_r+0x38>
 801136c:	250a      	movs	r5, #10
 801136e:	e7d7      	b.n	8011320 <_puts_r+0x3c>
 8011370:	4622      	mov	r2, r4
 8011372:	4628      	mov	r0, r5
 8011374:	f000 f857 	bl	8011426 <__swbuf_r>
 8011378:	3001      	adds	r0, #1
 801137a:	d1e7      	bne.n	801134c <_puts_r+0x68>
 801137c:	e7ce      	b.n	801131c <_puts_r+0x38>
 801137e:	3e01      	subs	r6, #1
 8011380:	e7e4      	b.n	801134c <_puts_r+0x68>
 8011382:	6823      	ldr	r3, [r4, #0]
 8011384:	1c5a      	adds	r2, r3, #1
 8011386:	6022      	str	r2, [r4, #0]
 8011388:	220a      	movs	r2, #10
 801138a:	701a      	strb	r2, [r3, #0]
 801138c:	e7ee      	b.n	801136c <_puts_r+0x88>
	...

08011390 <puts>:
 8011390:	4b02      	ldr	r3, [pc, #8]	@ (801139c <puts+0xc>)
 8011392:	4601      	mov	r1, r0
 8011394:	6818      	ldr	r0, [r3, #0]
 8011396:	f7ff bfa5 	b.w	80112e4 <_puts_r>
 801139a:	bf00      	nop
 801139c:	2000011c 	.word	0x2000011c

080113a0 <__sread>:
 80113a0:	b510      	push	{r4, lr}
 80113a2:	460c      	mov	r4, r1
 80113a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113a8:	f000 f912 	bl	80115d0 <_read_r>
 80113ac:	2800      	cmp	r0, #0
 80113ae:	bfab      	itete	ge
 80113b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80113b2:	89a3      	ldrhlt	r3, [r4, #12]
 80113b4:	181b      	addge	r3, r3, r0
 80113b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80113ba:	bfac      	ite	ge
 80113bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80113be:	81a3      	strhlt	r3, [r4, #12]
 80113c0:	bd10      	pop	{r4, pc}

080113c2 <__swrite>:
 80113c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113c6:	461f      	mov	r7, r3
 80113c8:	898b      	ldrh	r3, [r1, #12]
 80113ca:	05db      	lsls	r3, r3, #23
 80113cc:	4605      	mov	r5, r0
 80113ce:	460c      	mov	r4, r1
 80113d0:	4616      	mov	r6, r2
 80113d2:	d505      	bpl.n	80113e0 <__swrite+0x1e>
 80113d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80113d8:	2302      	movs	r3, #2
 80113da:	2200      	movs	r2, #0
 80113dc:	f000 f8e6 	bl	80115ac <_lseek_r>
 80113e0:	89a3      	ldrh	r3, [r4, #12]
 80113e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80113ea:	81a3      	strh	r3, [r4, #12]
 80113ec:	4632      	mov	r2, r6
 80113ee:	463b      	mov	r3, r7
 80113f0:	4628      	mov	r0, r5
 80113f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80113f6:	f000 b8fd 	b.w	80115f4 <_write_r>

080113fa <__sseek>:
 80113fa:	b510      	push	{r4, lr}
 80113fc:	460c      	mov	r4, r1
 80113fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011402:	f000 f8d3 	bl	80115ac <_lseek_r>
 8011406:	1c43      	adds	r3, r0, #1
 8011408:	89a3      	ldrh	r3, [r4, #12]
 801140a:	bf15      	itete	ne
 801140c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801140e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8011416:	81a3      	strheq	r3, [r4, #12]
 8011418:	bf18      	it	ne
 801141a:	81a3      	strhne	r3, [r4, #12]
 801141c:	bd10      	pop	{r4, pc}

0801141e <__sclose>:
 801141e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011422:	f000 b8b3 	b.w	801158c <_close_r>

08011426 <__swbuf_r>:
 8011426:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011428:	460e      	mov	r6, r1
 801142a:	4614      	mov	r4, r2
 801142c:	4605      	mov	r5, r0
 801142e:	b118      	cbz	r0, 8011438 <__swbuf_r+0x12>
 8011430:	6a03      	ldr	r3, [r0, #32]
 8011432:	b90b      	cbnz	r3, 8011438 <__swbuf_r+0x12>
 8011434:	f7ff ff06 	bl	8011244 <__sinit>
 8011438:	69a3      	ldr	r3, [r4, #24]
 801143a:	60a3      	str	r3, [r4, #8]
 801143c:	89a3      	ldrh	r3, [r4, #12]
 801143e:	071a      	lsls	r2, r3, #28
 8011440:	d501      	bpl.n	8011446 <__swbuf_r+0x20>
 8011442:	6923      	ldr	r3, [r4, #16]
 8011444:	b943      	cbnz	r3, 8011458 <__swbuf_r+0x32>
 8011446:	4621      	mov	r1, r4
 8011448:	4628      	mov	r0, r5
 801144a:	f000 f82b 	bl	80114a4 <__swsetup_r>
 801144e:	b118      	cbz	r0, 8011458 <__swbuf_r+0x32>
 8011450:	f04f 37ff 	mov.w	r7, #4294967295
 8011454:	4638      	mov	r0, r7
 8011456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011458:	6823      	ldr	r3, [r4, #0]
 801145a:	6922      	ldr	r2, [r4, #16]
 801145c:	1a98      	subs	r0, r3, r2
 801145e:	6963      	ldr	r3, [r4, #20]
 8011460:	b2f6      	uxtb	r6, r6
 8011462:	4283      	cmp	r3, r0
 8011464:	4637      	mov	r7, r6
 8011466:	dc05      	bgt.n	8011474 <__swbuf_r+0x4e>
 8011468:	4621      	mov	r1, r4
 801146a:	4628      	mov	r0, r5
 801146c:	f000 fd5c 	bl	8011f28 <_fflush_r>
 8011470:	2800      	cmp	r0, #0
 8011472:	d1ed      	bne.n	8011450 <__swbuf_r+0x2a>
 8011474:	68a3      	ldr	r3, [r4, #8]
 8011476:	3b01      	subs	r3, #1
 8011478:	60a3      	str	r3, [r4, #8]
 801147a:	6823      	ldr	r3, [r4, #0]
 801147c:	1c5a      	adds	r2, r3, #1
 801147e:	6022      	str	r2, [r4, #0]
 8011480:	701e      	strb	r6, [r3, #0]
 8011482:	6962      	ldr	r2, [r4, #20]
 8011484:	1c43      	adds	r3, r0, #1
 8011486:	429a      	cmp	r2, r3
 8011488:	d004      	beq.n	8011494 <__swbuf_r+0x6e>
 801148a:	89a3      	ldrh	r3, [r4, #12]
 801148c:	07db      	lsls	r3, r3, #31
 801148e:	d5e1      	bpl.n	8011454 <__swbuf_r+0x2e>
 8011490:	2e0a      	cmp	r6, #10
 8011492:	d1df      	bne.n	8011454 <__swbuf_r+0x2e>
 8011494:	4621      	mov	r1, r4
 8011496:	4628      	mov	r0, r5
 8011498:	f000 fd46 	bl	8011f28 <_fflush_r>
 801149c:	2800      	cmp	r0, #0
 801149e:	d0d9      	beq.n	8011454 <__swbuf_r+0x2e>
 80114a0:	e7d6      	b.n	8011450 <__swbuf_r+0x2a>
	...

080114a4 <__swsetup_r>:
 80114a4:	b538      	push	{r3, r4, r5, lr}
 80114a6:	4b29      	ldr	r3, [pc, #164]	@ (801154c <__swsetup_r+0xa8>)
 80114a8:	4605      	mov	r5, r0
 80114aa:	6818      	ldr	r0, [r3, #0]
 80114ac:	460c      	mov	r4, r1
 80114ae:	b118      	cbz	r0, 80114b8 <__swsetup_r+0x14>
 80114b0:	6a03      	ldr	r3, [r0, #32]
 80114b2:	b90b      	cbnz	r3, 80114b8 <__swsetup_r+0x14>
 80114b4:	f7ff fec6 	bl	8011244 <__sinit>
 80114b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114bc:	0719      	lsls	r1, r3, #28
 80114be:	d422      	bmi.n	8011506 <__swsetup_r+0x62>
 80114c0:	06da      	lsls	r2, r3, #27
 80114c2:	d407      	bmi.n	80114d4 <__swsetup_r+0x30>
 80114c4:	2209      	movs	r2, #9
 80114c6:	602a      	str	r2, [r5, #0]
 80114c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80114cc:	81a3      	strh	r3, [r4, #12]
 80114ce:	f04f 30ff 	mov.w	r0, #4294967295
 80114d2:	e033      	b.n	801153c <__swsetup_r+0x98>
 80114d4:	0758      	lsls	r0, r3, #29
 80114d6:	d512      	bpl.n	80114fe <__swsetup_r+0x5a>
 80114d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80114da:	b141      	cbz	r1, 80114ee <__swsetup_r+0x4a>
 80114dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80114e0:	4299      	cmp	r1, r3
 80114e2:	d002      	beq.n	80114ea <__swsetup_r+0x46>
 80114e4:	4628      	mov	r0, r5
 80114e6:	f000 f8d3 	bl	8011690 <_free_r>
 80114ea:	2300      	movs	r3, #0
 80114ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80114ee:	89a3      	ldrh	r3, [r4, #12]
 80114f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80114f4:	81a3      	strh	r3, [r4, #12]
 80114f6:	2300      	movs	r3, #0
 80114f8:	6063      	str	r3, [r4, #4]
 80114fa:	6923      	ldr	r3, [r4, #16]
 80114fc:	6023      	str	r3, [r4, #0]
 80114fe:	89a3      	ldrh	r3, [r4, #12]
 8011500:	f043 0308 	orr.w	r3, r3, #8
 8011504:	81a3      	strh	r3, [r4, #12]
 8011506:	6923      	ldr	r3, [r4, #16]
 8011508:	b94b      	cbnz	r3, 801151e <__swsetup_r+0x7a>
 801150a:	89a3      	ldrh	r3, [r4, #12]
 801150c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011510:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011514:	d003      	beq.n	801151e <__swsetup_r+0x7a>
 8011516:	4621      	mov	r1, r4
 8011518:	4628      	mov	r0, r5
 801151a:	f000 fd53 	bl	8011fc4 <__smakebuf_r>
 801151e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011522:	f013 0201 	ands.w	r2, r3, #1
 8011526:	d00a      	beq.n	801153e <__swsetup_r+0x9a>
 8011528:	2200      	movs	r2, #0
 801152a:	60a2      	str	r2, [r4, #8]
 801152c:	6962      	ldr	r2, [r4, #20]
 801152e:	4252      	negs	r2, r2
 8011530:	61a2      	str	r2, [r4, #24]
 8011532:	6922      	ldr	r2, [r4, #16]
 8011534:	b942      	cbnz	r2, 8011548 <__swsetup_r+0xa4>
 8011536:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801153a:	d1c5      	bne.n	80114c8 <__swsetup_r+0x24>
 801153c:	bd38      	pop	{r3, r4, r5, pc}
 801153e:	0799      	lsls	r1, r3, #30
 8011540:	bf58      	it	pl
 8011542:	6962      	ldrpl	r2, [r4, #20]
 8011544:	60a2      	str	r2, [r4, #8]
 8011546:	e7f4      	b.n	8011532 <__swsetup_r+0x8e>
 8011548:	2000      	movs	r0, #0
 801154a:	e7f7      	b.n	801153c <__swsetup_r+0x98>
 801154c:	2000011c 	.word	0x2000011c

08011550 <memset>:
 8011550:	4402      	add	r2, r0
 8011552:	4603      	mov	r3, r0
 8011554:	4293      	cmp	r3, r2
 8011556:	d100      	bne.n	801155a <memset+0xa>
 8011558:	4770      	bx	lr
 801155a:	f803 1b01 	strb.w	r1, [r3], #1
 801155e:	e7f9      	b.n	8011554 <memset+0x4>

08011560 <strrchr>:
 8011560:	b538      	push	{r3, r4, r5, lr}
 8011562:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8011566:	4603      	mov	r3, r0
 8011568:	d10e      	bne.n	8011588 <strrchr+0x28>
 801156a:	4621      	mov	r1, r4
 801156c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011570:	f000 bd98 	b.w	80120a4 <strchr>
 8011574:	1c43      	adds	r3, r0, #1
 8011576:	4605      	mov	r5, r0
 8011578:	4621      	mov	r1, r4
 801157a:	4618      	mov	r0, r3
 801157c:	f000 fd92 	bl	80120a4 <strchr>
 8011580:	2800      	cmp	r0, #0
 8011582:	d1f7      	bne.n	8011574 <strrchr+0x14>
 8011584:	4628      	mov	r0, r5
 8011586:	bd38      	pop	{r3, r4, r5, pc}
 8011588:	2500      	movs	r5, #0
 801158a:	e7f5      	b.n	8011578 <strrchr+0x18>

0801158c <_close_r>:
 801158c:	b538      	push	{r3, r4, r5, lr}
 801158e:	4d06      	ldr	r5, [pc, #24]	@ (80115a8 <_close_r+0x1c>)
 8011590:	2300      	movs	r3, #0
 8011592:	4604      	mov	r4, r0
 8011594:	4608      	mov	r0, r1
 8011596:	602b      	str	r3, [r5, #0]
 8011598:	f7f1 ffc9 	bl	800352e <_close>
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d102      	bne.n	80115a6 <_close_r+0x1a>
 80115a0:	682b      	ldr	r3, [r5, #0]
 80115a2:	b103      	cbz	r3, 80115a6 <_close_r+0x1a>
 80115a4:	6023      	str	r3, [r4, #0]
 80115a6:	bd38      	pop	{r3, r4, r5, pc}
 80115a8:	20000d3c 	.word	0x20000d3c

080115ac <_lseek_r>:
 80115ac:	b538      	push	{r3, r4, r5, lr}
 80115ae:	4d07      	ldr	r5, [pc, #28]	@ (80115cc <_lseek_r+0x20>)
 80115b0:	4604      	mov	r4, r0
 80115b2:	4608      	mov	r0, r1
 80115b4:	4611      	mov	r1, r2
 80115b6:	2200      	movs	r2, #0
 80115b8:	602a      	str	r2, [r5, #0]
 80115ba:	461a      	mov	r2, r3
 80115bc:	f7f1 ffde 	bl	800357c <_lseek>
 80115c0:	1c43      	adds	r3, r0, #1
 80115c2:	d102      	bne.n	80115ca <_lseek_r+0x1e>
 80115c4:	682b      	ldr	r3, [r5, #0]
 80115c6:	b103      	cbz	r3, 80115ca <_lseek_r+0x1e>
 80115c8:	6023      	str	r3, [r4, #0]
 80115ca:	bd38      	pop	{r3, r4, r5, pc}
 80115cc:	20000d3c 	.word	0x20000d3c

080115d0 <_read_r>:
 80115d0:	b538      	push	{r3, r4, r5, lr}
 80115d2:	4d07      	ldr	r5, [pc, #28]	@ (80115f0 <_read_r+0x20>)
 80115d4:	4604      	mov	r4, r0
 80115d6:	4608      	mov	r0, r1
 80115d8:	4611      	mov	r1, r2
 80115da:	2200      	movs	r2, #0
 80115dc:	602a      	str	r2, [r5, #0]
 80115de:	461a      	mov	r2, r3
 80115e0:	f7f1 ff88 	bl	80034f4 <_read>
 80115e4:	1c43      	adds	r3, r0, #1
 80115e6:	d102      	bne.n	80115ee <_read_r+0x1e>
 80115e8:	682b      	ldr	r3, [r5, #0]
 80115ea:	b103      	cbz	r3, 80115ee <_read_r+0x1e>
 80115ec:	6023      	str	r3, [r4, #0]
 80115ee:	bd38      	pop	{r3, r4, r5, pc}
 80115f0:	20000d3c 	.word	0x20000d3c

080115f4 <_write_r>:
 80115f4:	b538      	push	{r3, r4, r5, lr}
 80115f6:	4d07      	ldr	r5, [pc, #28]	@ (8011614 <_write_r+0x20>)
 80115f8:	4604      	mov	r4, r0
 80115fa:	4608      	mov	r0, r1
 80115fc:	4611      	mov	r1, r2
 80115fe:	2200      	movs	r2, #0
 8011600:	602a      	str	r2, [r5, #0]
 8011602:	461a      	mov	r2, r3
 8011604:	f7ef fb49 	bl	8000c9a <_write>
 8011608:	1c43      	adds	r3, r0, #1
 801160a:	d102      	bne.n	8011612 <_write_r+0x1e>
 801160c:	682b      	ldr	r3, [r5, #0]
 801160e:	b103      	cbz	r3, 8011612 <_write_r+0x1e>
 8011610:	6023      	str	r3, [r4, #0]
 8011612:	bd38      	pop	{r3, r4, r5, pc}
 8011614:	20000d3c 	.word	0x20000d3c

08011618 <__errno>:
 8011618:	4b01      	ldr	r3, [pc, #4]	@ (8011620 <__errno+0x8>)
 801161a:	6818      	ldr	r0, [r3, #0]
 801161c:	4770      	bx	lr
 801161e:	bf00      	nop
 8011620:	2000011c 	.word	0x2000011c

08011624 <__libc_init_array>:
 8011624:	b570      	push	{r4, r5, r6, lr}
 8011626:	4d0d      	ldr	r5, [pc, #52]	@ (801165c <__libc_init_array+0x38>)
 8011628:	4c0d      	ldr	r4, [pc, #52]	@ (8011660 <__libc_init_array+0x3c>)
 801162a:	1b64      	subs	r4, r4, r5
 801162c:	10a4      	asrs	r4, r4, #2
 801162e:	2600      	movs	r6, #0
 8011630:	42a6      	cmp	r6, r4
 8011632:	d109      	bne.n	8011648 <__libc_init_array+0x24>
 8011634:	4d0b      	ldr	r5, [pc, #44]	@ (8011664 <__libc_init_array+0x40>)
 8011636:	4c0c      	ldr	r4, [pc, #48]	@ (8011668 <__libc_init_array+0x44>)
 8011638:	f000 fdf2 	bl	8012220 <_init>
 801163c:	1b64      	subs	r4, r4, r5
 801163e:	10a4      	asrs	r4, r4, #2
 8011640:	2600      	movs	r6, #0
 8011642:	42a6      	cmp	r6, r4
 8011644:	d105      	bne.n	8011652 <__libc_init_array+0x2e>
 8011646:	bd70      	pop	{r4, r5, r6, pc}
 8011648:	f855 3b04 	ldr.w	r3, [r5], #4
 801164c:	4798      	blx	r3
 801164e:	3601      	adds	r6, #1
 8011650:	e7ee      	b.n	8011630 <__libc_init_array+0xc>
 8011652:	f855 3b04 	ldr.w	r3, [r5], #4
 8011656:	4798      	blx	r3
 8011658:	3601      	adds	r6, #1
 801165a:	e7f2      	b.n	8011642 <__libc_init_array+0x1e>
 801165c:	08013e40 	.word	0x08013e40
 8011660:	08013e40 	.word	0x08013e40
 8011664:	08013e40 	.word	0x08013e40
 8011668:	08013e44 	.word	0x08013e44

0801166c <__retarget_lock_init_recursive>:
 801166c:	4770      	bx	lr

0801166e <__retarget_lock_acquire_recursive>:
 801166e:	4770      	bx	lr

08011670 <__retarget_lock_release_recursive>:
 8011670:	4770      	bx	lr

08011672 <memcpy>:
 8011672:	440a      	add	r2, r1
 8011674:	4291      	cmp	r1, r2
 8011676:	f100 33ff 	add.w	r3, r0, #4294967295
 801167a:	d100      	bne.n	801167e <memcpy+0xc>
 801167c:	4770      	bx	lr
 801167e:	b510      	push	{r4, lr}
 8011680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011688:	4291      	cmp	r1, r2
 801168a:	d1f9      	bne.n	8011680 <memcpy+0xe>
 801168c:	bd10      	pop	{r4, pc}
	...

08011690 <_free_r>:
 8011690:	b538      	push	{r3, r4, r5, lr}
 8011692:	4605      	mov	r5, r0
 8011694:	2900      	cmp	r1, #0
 8011696:	d041      	beq.n	801171c <_free_r+0x8c>
 8011698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801169c:	1f0c      	subs	r4, r1, #4
 801169e:	2b00      	cmp	r3, #0
 80116a0:	bfb8      	it	lt
 80116a2:	18e4      	addlt	r4, r4, r3
 80116a4:	f000 f8e0 	bl	8011868 <__malloc_lock>
 80116a8:	4a1d      	ldr	r2, [pc, #116]	@ (8011720 <_free_r+0x90>)
 80116aa:	6813      	ldr	r3, [r2, #0]
 80116ac:	b933      	cbnz	r3, 80116bc <_free_r+0x2c>
 80116ae:	6063      	str	r3, [r4, #4]
 80116b0:	6014      	str	r4, [r2, #0]
 80116b2:	4628      	mov	r0, r5
 80116b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80116b8:	f000 b8dc 	b.w	8011874 <__malloc_unlock>
 80116bc:	42a3      	cmp	r3, r4
 80116be:	d908      	bls.n	80116d2 <_free_r+0x42>
 80116c0:	6820      	ldr	r0, [r4, #0]
 80116c2:	1821      	adds	r1, r4, r0
 80116c4:	428b      	cmp	r3, r1
 80116c6:	bf01      	itttt	eq
 80116c8:	6819      	ldreq	r1, [r3, #0]
 80116ca:	685b      	ldreq	r3, [r3, #4]
 80116cc:	1809      	addeq	r1, r1, r0
 80116ce:	6021      	streq	r1, [r4, #0]
 80116d0:	e7ed      	b.n	80116ae <_free_r+0x1e>
 80116d2:	461a      	mov	r2, r3
 80116d4:	685b      	ldr	r3, [r3, #4]
 80116d6:	b10b      	cbz	r3, 80116dc <_free_r+0x4c>
 80116d8:	42a3      	cmp	r3, r4
 80116da:	d9fa      	bls.n	80116d2 <_free_r+0x42>
 80116dc:	6811      	ldr	r1, [r2, #0]
 80116de:	1850      	adds	r0, r2, r1
 80116e0:	42a0      	cmp	r0, r4
 80116e2:	d10b      	bne.n	80116fc <_free_r+0x6c>
 80116e4:	6820      	ldr	r0, [r4, #0]
 80116e6:	4401      	add	r1, r0
 80116e8:	1850      	adds	r0, r2, r1
 80116ea:	4283      	cmp	r3, r0
 80116ec:	6011      	str	r1, [r2, #0]
 80116ee:	d1e0      	bne.n	80116b2 <_free_r+0x22>
 80116f0:	6818      	ldr	r0, [r3, #0]
 80116f2:	685b      	ldr	r3, [r3, #4]
 80116f4:	6053      	str	r3, [r2, #4]
 80116f6:	4408      	add	r0, r1
 80116f8:	6010      	str	r0, [r2, #0]
 80116fa:	e7da      	b.n	80116b2 <_free_r+0x22>
 80116fc:	d902      	bls.n	8011704 <_free_r+0x74>
 80116fe:	230c      	movs	r3, #12
 8011700:	602b      	str	r3, [r5, #0]
 8011702:	e7d6      	b.n	80116b2 <_free_r+0x22>
 8011704:	6820      	ldr	r0, [r4, #0]
 8011706:	1821      	adds	r1, r4, r0
 8011708:	428b      	cmp	r3, r1
 801170a:	bf04      	itt	eq
 801170c:	6819      	ldreq	r1, [r3, #0]
 801170e:	685b      	ldreq	r3, [r3, #4]
 8011710:	6063      	str	r3, [r4, #4]
 8011712:	bf04      	itt	eq
 8011714:	1809      	addeq	r1, r1, r0
 8011716:	6021      	streq	r1, [r4, #0]
 8011718:	6054      	str	r4, [r2, #4]
 801171a:	e7ca      	b.n	80116b2 <_free_r+0x22>
 801171c:	bd38      	pop	{r3, r4, r5, pc}
 801171e:	bf00      	nop
 8011720:	20000d48 	.word	0x20000d48

08011724 <sbrk_aligned>:
 8011724:	b570      	push	{r4, r5, r6, lr}
 8011726:	4e0f      	ldr	r6, [pc, #60]	@ (8011764 <sbrk_aligned+0x40>)
 8011728:	460c      	mov	r4, r1
 801172a:	6831      	ldr	r1, [r6, #0]
 801172c:	4605      	mov	r5, r0
 801172e:	b911      	cbnz	r1, 8011736 <sbrk_aligned+0x12>
 8011730:	f000 fce8 	bl	8012104 <_sbrk_r>
 8011734:	6030      	str	r0, [r6, #0]
 8011736:	4621      	mov	r1, r4
 8011738:	4628      	mov	r0, r5
 801173a:	f000 fce3 	bl	8012104 <_sbrk_r>
 801173e:	1c43      	adds	r3, r0, #1
 8011740:	d103      	bne.n	801174a <sbrk_aligned+0x26>
 8011742:	f04f 34ff 	mov.w	r4, #4294967295
 8011746:	4620      	mov	r0, r4
 8011748:	bd70      	pop	{r4, r5, r6, pc}
 801174a:	1cc4      	adds	r4, r0, #3
 801174c:	f024 0403 	bic.w	r4, r4, #3
 8011750:	42a0      	cmp	r0, r4
 8011752:	d0f8      	beq.n	8011746 <sbrk_aligned+0x22>
 8011754:	1a21      	subs	r1, r4, r0
 8011756:	4628      	mov	r0, r5
 8011758:	f000 fcd4 	bl	8012104 <_sbrk_r>
 801175c:	3001      	adds	r0, #1
 801175e:	d1f2      	bne.n	8011746 <sbrk_aligned+0x22>
 8011760:	e7ef      	b.n	8011742 <sbrk_aligned+0x1e>
 8011762:	bf00      	nop
 8011764:	20000d44 	.word	0x20000d44

08011768 <_malloc_r>:
 8011768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801176c:	1ccd      	adds	r5, r1, #3
 801176e:	f025 0503 	bic.w	r5, r5, #3
 8011772:	3508      	adds	r5, #8
 8011774:	2d0c      	cmp	r5, #12
 8011776:	bf38      	it	cc
 8011778:	250c      	movcc	r5, #12
 801177a:	2d00      	cmp	r5, #0
 801177c:	4606      	mov	r6, r0
 801177e:	db01      	blt.n	8011784 <_malloc_r+0x1c>
 8011780:	42a9      	cmp	r1, r5
 8011782:	d904      	bls.n	801178e <_malloc_r+0x26>
 8011784:	230c      	movs	r3, #12
 8011786:	6033      	str	r3, [r6, #0]
 8011788:	2000      	movs	r0, #0
 801178a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801178e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011864 <_malloc_r+0xfc>
 8011792:	f000 f869 	bl	8011868 <__malloc_lock>
 8011796:	f8d8 3000 	ldr.w	r3, [r8]
 801179a:	461c      	mov	r4, r3
 801179c:	bb44      	cbnz	r4, 80117f0 <_malloc_r+0x88>
 801179e:	4629      	mov	r1, r5
 80117a0:	4630      	mov	r0, r6
 80117a2:	f7ff ffbf 	bl	8011724 <sbrk_aligned>
 80117a6:	1c43      	adds	r3, r0, #1
 80117a8:	4604      	mov	r4, r0
 80117aa:	d158      	bne.n	801185e <_malloc_r+0xf6>
 80117ac:	f8d8 4000 	ldr.w	r4, [r8]
 80117b0:	4627      	mov	r7, r4
 80117b2:	2f00      	cmp	r7, #0
 80117b4:	d143      	bne.n	801183e <_malloc_r+0xd6>
 80117b6:	2c00      	cmp	r4, #0
 80117b8:	d04b      	beq.n	8011852 <_malloc_r+0xea>
 80117ba:	6823      	ldr	r3, [r4, #0]
 80117bc:	4639      	mov	r1, r7
 80117be:	4630      	mov	r0, r6
 80117c0:	eb04 0903 	add.w	r9, r4, r3
 80117c4:	f000 fc9e 	bl	8012104 <_sbrk_r>
 80117c8:	4581      	cmp	r9, r0
 80117ca:	d142      	bne.n	8011852 <_malloc_r+0xea>
 80117cc:	6821      	ldr	r1, [r4, #0]
 80117ce:	1a6d      	subs	r5, r5, r1
 80117d0:	4629      	mov	r1, r5
 80117d2:	4630      	mov	r0, r6
 80117d4:	f7ff ffa6 	bl	8011724 <sbrk_aligned>
 80117d8:	3001      	adds	r0, #1
 80117da:	d03a      	beq.n	8011852 <_malloc_r+0xea>
 80117dc:	6823      	ldr	r3, [r4, #0]
 80117de:	442b      	add	r3, r5
 80117e0:	6023      	str	r3, [r4, #0]
 80117e2:	f8d8 3000 	ldr.w	r3, [r8]
 80117e6:	685a      	ldr	r2, [r3, #4]
 80117e8:	bb62      	cbnz	r2, 8011844 <_malloc_r+0xdc>
 80117ea:	f8c8 7000 	str.w	r7, [r8]
 80117ee:	e00f      	b.n	8011810 <_malloc_r+0xa8>
 80117f0:	6822      	ldr	r2, [r4, #0]
 80117f2:	1b52      	subs	r2, r2, r5
 80117f4:	d420      	bmi.n	8011838 <_malloc_r+0xd0>
 80117f6:	2a0b      	cmp	r2, #11
 80117f8:	d917      	bls.n	801182a <_malloc_r+0xc2>
 80117fa:	1961      	adds	r1, r4, r5
 80117fc:	42a3      	cmp	r3, r4
 80117fe:	6025      	str	r5, [r4, #0]
 8011800:	bf18      	it	ne
 8011802:	6059      	strne	r1, [r3, #4]
 8011804:	6863      	ldr	r3, [r4, #4]
 8011806:	bf08      	it	eq
 8011808:	f8c8 1000 	streq.w	r1, [r8]
 801180c:	5162      	str	r2, [r4, r5]
 801180e:	604b      	str	r3, [r1, #4]
 8011810:	4630      	mov	r0, r6
 8011812:	f000 f82f 	bl	8011874 <__malloc_unlock>
 8011816:	f104 000b 	add.w	r0, r4, #11
 801181a:	1d23      	adds	r3, r4, #4
 801181c:	f020 0007 	bic.w	r0, r0, #7
 8011820:	1ac2      	subs	r2, r0, r3
 8011822:	bf1c      	itt	ne
 8011824:	1a1b      	subne	r3, r3, r0
 8011826:	50a3      	strne	r3, [r4, r2]
 8011828:	e7af      	b.n	801178a <_malloc_r+0x22>
 801182a:	6862      	ldr	r2, [r4, #4]
 801182c:	42a3      	cmp	r3, r4
 801182e:	bf0c      	ite	eq
 8011830:	f8c8 2000 	streq.w	r2, [r8]
 8011834:	605a      	strne	r2, [r3, #4]
 8011836:	e7eb      	b.n	8011810 <_malloc_r+0xa8>
 8011838:	4623      	mov	r3, r4
 801183a:	6864      	ldr	r4, [r4, #4]
 801183c:	e7ae      	b.n	801179c <_malloc_r+0x34>
 801183e:	463c      	mov	r4, r7
 8011840:	687f      	ldr	r7, [r7, #4]
 8011842:	e7b6      	b.n	80117b2 <_malloc_r+0x4a>
 8011844:	461a      	mov	r2, r3
 8011846:	685b      	ldr	r3, [r3, #4]
 8011848:	42a3      	cmp	r3, r4
 801184a:	d1fb      	bne.n	8011844 <_malloc_r+0xdc>
 801184c:	2300      	movs	r3, #0
 801184e:	6053      	str	r3, [r2, #4]
 8011850:	e7de      	b.n	8011810 <_malloc_r+0xa8>
 8011852:	230c      	movs	r3, #12
 8011854:	6033      	str	r3, [r6, #0]
 8011856:	4630      	mov	r0, r6
 8011858:	f000 f80c 	bl	8011874 <__malloc_unlock>
 801185c:	e794      	b.n	8011788 <_malloc_r+0x20>
 801185e:	6005      	str	r5, [r0, #0]
 8011860:	e7d6      	b.n	8011810 <_malloc_r+0xa8>
 8011862:	bf00      	nop
 8011864:	20000d48 	.word	0x20000d48

08011868 <__malloc_lock>:
 8011868:	4801      	ldr	r0, [pc, #4]	@ (8011870 <__malloc_lock+0x8>)
 801186a:	f7ff bf00 	b.w	801166e <__retarget_lock_acquire_recursive>
 801186e:	bf00      	nop
 8011870:	20000d40 	.word	0x20000d40

08011874 <__malloc_unlock>:
 8011874:	4801      	ldr	r0, [pc, #4]	@ (801187c <__malloc_unlock+0x8>)
 8011876:	f7ff befb 	b.w	8011670 <__retarget_lock_release_recursive>
 801187a:	bf00      	nop
 801187c:	20000d40 	.word	0x20000d40

08011880 <__sfputc_r>:
 8011880:	6893      	ldr	r3, [r2, #8]
 8011882:	3b01      	subs	r3, #1
 8011884:	2b00      	cmp	r3, #0
 8011886:	b410      	push	{r4}
 8011888:	6093      	str	r3, [r2, #8]
 801188a:	da08      	bge.n	801189e <__sfputc_r+0x1e>
 801188c:	6994      	ldr	r4, [r2, #24]
 801188e:	42a3      	cmp	r3, r4
 8011890:	db01      	blt.n	8011896 <__sfputc_r+0x16>
 8011892:	290a      	cmp	r1, #10
 8011894:	d103      	bne.n	801189e <__sfputc_r+0x1e>
 8011896:	f85d 4b04 	ldr.w	r4, [sp], #4
 801189a:	f7ff bdc4 	b.w	8011426 <__swbuf_r>
 801189e:	6813      	ldr	r3, [r2, #0]
 80118a0:	1c58      	adds	r0, r3, #1
 80118a2:	6010      	str	r0, [r2, #0]
 80118a4:	7019      	strb	r1, [r3, #0]
 80118a6:	4608      	mov	r0, r1
 80118a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118ac:	4770      	bx	lr

080118ae <__sfputs_r>:
 80118ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118b0:	4606      	mov	r6, r0
 80118b2:	460f      	mov	r7, r1
 80118b4:	4614      	mov	r4, r2
 80118b6:	18d5      	adds	r5, r2, r3
 80118b8:	42ac      	cmp	r4, r5
 80118ba:	d101      	bne.n	80118c0 <__sfputs_r+0x12>
 80118bc:	2000      	movs	r0, #0
 80118be:	e007      	b.n	80118d0 <__sfputs_r+0x22>
 80118c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80118c4:	463a      	mov	r2, r7
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7ff ffda 	bl	8011880 <__sfputc_r>
 80118cc:	1c43      	adds	r3, r0, #1
 80118ce:	d1f3      	bne.n	80118b8 <__sfputs_r+0xa>
 80118d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118d4 <_vfiprintf_r>:
 80118d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d8:	460d      	mov	r5, r1
 80118da:	b09d      	sub	sp, #116	@ 0x74
 80118dc:	4614      	mov	r4, r2
 80118de:	4698      	mov	r8, r3
 80118e0:	4606      	mov	r6, r0
 80118e2:	b118      	cbz	r0, 80118ec <_vfiprintf_r+0x18>
 80118e4:	6a03      	ldr	r3, [r0, #32]
 80118e6:	b90b      	cbnz	r3, 80118ec <_vfiprintf_r+0x18>
 80118e8:	f7ff fcac 	bl	8011244 <__sinit>
 80118ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80118ee:	07d9      	lsls	r1, r3, #31
 80118f0:	d405      	bmi.n	80118fe <_vfiprintf_r+0x2a>
 80118f2:	89ab      	ldrh	r3, [r5, #12]
 80118f4:	059a      	lsls	r2, r3, #22
 80118f6:	d402      	bmi.n	80118fe <_vfiprintf_r+0x2a>
 80118f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80118fa:	f7ff feb8 	bl	801166e <__retarget_lock_acquire_recursive>
 80118fe:	89ab      	ldrh	r3, [r5, #12]
 8011900:	071b      	lsls	r3, r3, #28
 8011902:	d501      	bpl.n	8011908 <_vfiprintf_r+0x34>
 8011904:	692b      	ldr	r3, [r5, #16]
 8011906:	b99b      	cbnz	r3, 8011930 <_vfiprintf_r+0x5c>
 8011908:	4629      	mov	r1, r5
 801190a:	4630      	mov	r0, r6
 801190c:	f7ff fdca 	bl	80114a4 <__swsetup_r>
 8011910:	b170      	cbz	r0, 8011930 <_vfiprintf_r+0x5c>
 8011912:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011914:	07dc      	lsls	r4, r3, #31
 8011916:	d504      	bpl.n	8011922 <_vfiprintf_r+0x4e>
 8011918:	f04f 30ff 	mov.w	r0, #4294967295
 801191c:	b01d      	add	sp, #116	@ 0x74
 801191e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011922:	89ab      	ldrh	r3, [r5, #12]
 8011924:	0598      	lsls	r0, r3, #22
 8011926:	d4f7      	bmi.n	8011918 <_vfiprintf_r+0x44>
 8011928:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801192a:	f7ff fea1 	bl	8011670 <__retarget_lock_release_recursive>
 801192e:	e7f3      	b.n	8011918 <_vfiprintf_r+0x44>
 8011930:	2300      	movs	r3, #0
 8011932:	9309      	str	r3, [sp, #36]	@ 0x24
 8011934:	2320      	movs	r3, #32
 8011936:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801193a:	f8cd 800c 	str.w	r8, [sp, #12]
 801193e:	2330      	movs	r3, #48	@ 0x30
 8011940:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011af0 <_vfiprintf_r+0x21c>
 8011944:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011948:	f04f 0901 	mov.w	r9, #1
 801194c:	4623      	mov	r3, r4
 801194e:	469a      	mov	sl, r3
 8011950:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011954:	b10a      	cbz	r2, 801195a <_vfiprintf_r+0x86>
 8011956:	2a25      	cmp	r2, #37	@ 0x25
 8011958:	d1f9      	bne.n	801194e <_vfiprintf_r+0x7a>
 801195a:	ebba 0b04 	subs.w	fp, sl, r4
 801195e:	d00b      	beq.n	8011978 <_vfiprintf_r+0xa4>
 8011960:	465b      	mov	r3, fp
 8011962:	4622      	mov	r2, r4
 8011964:	4629      	mov	r1, r5
 8011966:	4630      	mov	r0, r6
 8011968:	f7ff ffa1 	bl	80118ae <__sfputs_r>
 801196c:	3001      	adds	r0, #1
 801196e:	f000 80a7 	beq.w	8011ac0 <_vfiprintf_r+0x1ec>
 8011972:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011974:	445a      	add	r2, fp
 8011976:	9209      	str	r2, [sp, #36]	@ 0x24
 8011978:	f89a 3000 	ldrb.w	r3, [sl]
 801197c:	2b00      	cmp	r3, #0
 801197e:	f000 809f 	beq.w	8011ac0 <_vfiprintf_r+0x1ec>
 8011982:	2300      	movs	r3, #0
 8011984:	f04f 32ff 	mov.w	r2, #4294967295
 8011988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801198c:	f10a 0a01 	add.w	sl, sl, #1
 8011990:	9304      	str	r3, [sp, #16]
 8011992:	9307      	str	r3, [sp, #28]
 8011994:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011998:	931a      	str	r3, [sp, #104]	@ 0x68
 801199a:	4654      	mov	r4, sl
 801199c:	2205      	movs	r2, #5
 801199e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119a2:	4853      	ldr	r0, [pc, #332]	@ (8011af0 <_vfiprintf_r+0x21c>)
 80119a4:	f7ee fbf4 	bl	8000190 <memchr>
 80119a8:	9a04      	ldr	r2, [sp, #16]
 80119aa:	b9d8      	cbnz	r0, 80119e4 <_vfiprintf_r+0x110>
 80119ac:	06d1      	lsls	r1, r2, #27
 80119ae:	bf44      	itt	mi
 80119b0:	2320      	movmi	r3, #32
 80119b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119b6:	0713      	lsls	r3, r2, #28
 80119b8:	bf44      	itt	mi
 80119ba:	232b      	movmi	r3, #43	@ 0x2b
 80119bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80119c0:	f89a 3000 	ldrb.w	r3, [sl]
 80119c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80119c6:	d015      	beq.n	80119f4 <_vfiprintf_r+0x120>
 80119c8:	9a07      	ldr	r2, [sp, #28]
 80119ca:	4654      	mov	r4, sl
 80119cc:	2000      	movs	r0, #0
 80119ce:	f04f 0c0a 	mov.w	ip, #10
 80119d2:	4621      	mov	r1, r4
 80119d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80119d8:	3b30      	subs	r3, #48	@ 0x30
 80119da:	2b09      	cmp	r3, #9
 80119dc:	d94b      	bls.n	8011a76 <_vfiprintf_r+0x1a2>
 80119de:	b1b0      	cbz	r0, 8011a0e <_vfiprintf_r+0x13a>
 80119e0:	9207      	str	r2, [sp, #28]
 80119e2:	e014      	b.n	8011a0e <_vfiprintf_r+0x13a>
 80119e4:	eba0 0308 	sub.w	r3, r0, r8
 80119e8:	fa09 f303 	lsl.w	r3, r9, r3
 80119ec:	4313      	orrs	r3, r2
 80119ee:	9304      	str	r3, [sp, #16]
 80119f0:	46a2      	mov	sl, r4
 80119f2:	e7d2      	b.n	801199a <_vfiprintf_r+0xc6>
 80119f4:	9b03      	ldr	r3, [sp, #12]
 80119f6:	1d19      	adds	r1, r3, #4
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	9103      	str	r1, [sp, #12]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	bfbb      	ittet	lt
 8011a00:	425b      	neglt	r3, r3
 8011a02:	f042 0202 	orrlt.w	r2, r2, #2
 8011a06:	9307      	strge	r3, [sp, #28]
 8011a08:	9307      	strlt	r3, [sp, #28]
 8011a0a:	bfb8      	it	lt
 8011a0c:	9204      	strlt	r2, [sp, #16]
 8011a0e:	7823      	ldrb	r3, [r4, #0]
 8011a10:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a12:	d10a      	bne.n	8011a2a <_vfiprintf_r+0x156>
 8011a14:	7863      	ldrb	r3, [r4, #1]
 8011a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a18:	d132      	bne.n	8011a80 <_vfiprintf_r+0x1ac>
 8011a1a:	9b03      	ldr	r3, [sp, #12]
 8011a1c:	1d1a      	adds	r2, r3, #4
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	9203      	str	r2, [sp, #12]
 8011a22:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011a26:	3402      	adds	r4, #2
 8011a28:	9305      	str	r3, [sp, #20]
 8011a2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011b00 <_vfiprintf_r+0x22c>
 8011a2e:	7821      	ldrb	r1, [r4, #0]
 8011a30:	2203      	movs	r2, #3
 8011a32:	4650      	mov	r0, sl
 8011a34:	f7ee fbac 	bl	8000190 <memchr>
 8011a38:	b138      	cbz	r0, 8011a4a <_vfiprintf_r+0x176>
 8011a3a:	9b04      	ldr	r3, [sp, #16]
 8011a3c:	eba0 000a 	sub.w	r0, r0, sl
 8011a40:	2240      	movs	r2, #64	@ 0x40
 8011a42:	4082      	lsls	r2, r0
 8011a44:	4313      	orrs	r3, r2
 8011a46:	3401      	adds	r4, #1
 8011a48:	9304      	str	r3, [sp, #16]
 8011a4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a4e:	4829      	ldr	r0, [pc, #164]	@ (8011af4 <_vfiprintf_r+0x220>)
 8011a50:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011a54:	2206      	movs	r2, #6
 8011a56:	f7ee fb9b 	bl	8000190 <memchr>
 8011a5a:	2800      	cmp	r0, #0
 8011a5c:	d03f      	beq.n	8011ade <_vfiprintf_r+0x20a>
 8011a5e:	4b26      	ldr	r3, [pc, #152]	@ (8011af8 <_vfiprintf_r+0x224>)
 8011a60:	bb1b      	cbnz	r3, 8011aaa <_vfiprintf_r+0x1d6>
 8011a62:	9b03      	ldr	r3, [sp, #12]
 8011a64:	3307      	adds	r3, #7
 8011a66:	f023 0307 	bic.w	r3, r3, #7
 8011a6a:	3308      	adds	r3, #8
 8011a6c:	9303      	str	r3, [sp, #12]
 8011a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011a70:	443b      	add	r3, r7
 8011a72:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a74:	e76a      	b.n	801194c <_vfiprintf_r+0x78>
 8011a76:	fb0c 3202 	mla	r2, ip, r2, r3
 8011a7a:	460c      	mov	r4, r1
 8011a7c:	2001      	movs	r0, #1
 8011a7e:	e7a8      	b.n	80119d2 <_vfiprintf_r+0xfe>
 8011a80:	2300      	movs	r3, #0
 8011a82:	3401      	adds	r4, #1
 8011a84:	9305      	str	r3, [sp, #20]
 8011a86:	4619      	mov	r1, r3
 8011a88:	f04f 0c0a 	mov.w	ip, #10
 8011a8c:	4620      	mov	r0, r4
 8011a8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a92:	3a30      	subs	r2, #48	@ 0x30
 8011a94:	2a09      	cmp	r2, #9
 8011a96:	d903      	bls.n	8011aa0 <_vfiprintf_r+0x1cc>
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d0c6      	beq.n	8011a2a <_vfiprintf_r+0x156>
 8011a9c:	9105      	str	r1, [sp, #20]
 8011a9e:	e7c4      	b.n	8011a2a <_vfiprintf_r+0x156>
 8011aa0:	fb0c 2101 	mla	r1, ip, r1, r2
 8011aa4:	4604      	mov	r4, r0
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e7f0      	b.n	8011a8c <_vfiprintf_r+0x1b8>
 8011aaa:	ab03      	add	r3, sp, #12
 8011aac:	9300      	str	r3, [sp, #0]
 8011aae:	462a      	mov	r2, r5
 8011ab0:	4b12      	ldr	r3, [pc, #72]	@ (8011afc <_vfiprintf_r+0x228>)
 8011ab2:	a904      	add	r1, sp, #16
 8011ab4:	4630      	mov	r0, r6
 8011ab6:	f3af 8000 	nop.w
 8011aba:	4607      	mov	r7, r0
 8011abc:	1c78      	adds	r0, r7, #1
 8011abe:	d1d6      	bne.n	8011a6e <_vfiprintf_r+0x19a>
 8011ac0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ac2:	07d9      	lsls	r1, r3, #31
 8011ac4:	d405      	bmi.n	8011ad2 <_vfiprintf_r+0x1fe>
 8011ac6:	89ab      	ldrh	r3, [r5, #12]
 8011ac8:	059a      	lsls	r2, r3, #22
 8011aca:	d402      	bmi.n	8011ad2 <_vfiprintf_r+0x1fe>
 8011acc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011ace:	f7ff fdcf 	bl	8011670 <__retarget_lock_release_recursive>
 8011ad2:	89ab      	ldrh	r3, [r5, #12]
 8011ad4:	065b      	lsls	r3, r3, #25
 8011ad6:	f53f af1f 	bmi.w	8011918 <_vfiprintf_r+0x44>
 8011ada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011adc:	e71e      	b.n	801191c <_vfiprintf_r+0x48>
 8011ade:	ab03      	add	r3, sp, #12
 8011ae0:	9300      	str	r3, [sp, #0]
 8011ae2:	462a      	mov	r2, r5
 8011ae4:	4b05      	ldr	r3, [pc, #20]	@ (8011afc <_vfiprintf_r+0x228>)
 8011ae6:	a904      	add	r1, sp, #16
 8011ae8:	4630      	mov	r0, r6
 8011aea:	f000 f879 	bl	8011be0 <_printf_i>
 8011aee:	e7e4      	b.n	8011aba <_vfiprintf_r+0x1e6>
 8011af0:	08013e04 	.word	0x08013e04
 8011af4:	08013e0e 	.word	0x08013e0e
 8011af8:	00000000 	.word	0x00000000
 8011afc:	080118af 	.word	0x080118af
 8011b00:	08013e0a 	.word	0x08013e0a

08011b04 <_printf_common>:
 8011b04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b08:	4616      	mov	r6, r2
 8011b0a:	4698      	mov	r8, r3
 8011b0c:	688a      	ldr	r2, [r1, #8]
 8011b0e:	690b      	ldr	r3, [r1, #16]
 8011b10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011b14:	4293      	cmp	r3, r2
 8011b16:	bfb8      	it	lt
 8011b18:	4613      	movlt	r3, r2
 8011b1a:	6033      	str	r3, [r6, #0]
 8011b1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011b20:	4607      	mov	r7, r0
 8011b22:	460c      	mov	r4, r1
 8011b24:	b10a      	cbz	r2, 8011b2a <_printf_common+0x26>
 8011b26:	3301      	adds	r3, #1
 8011b28:	6033      	str	r3, [r6, #0]
 8011b2a:	6823      	ldr	r3, [r4, #0]
 8011b2c:	0699      	lsls	r1, r3, #26
 8011b2e:	bf42      	ittt	mi
 8011b30:	6833      	ldrmi	r3, [r6, #0]
 8011b32:	3302      	addmi	r3, #2
 8011b34:	6033      	strmi	r3, [r6, #0]
 8011b36:	6825      	ldr	r5, [r4, #0]
 8011b38:	f015 0506 	ands.w	r5, r5, #6
 8011b3c:	d106      	bne.n	8011b4c <_printf_common+0x48>
 8011b3e:	f104 0a19 	add.w	sl, r4, #25
 8011b42:	68e3      	ldr	r3, [r4, #12]
 8011b44:	6832      	ldr	r2, [r6, #0]
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	42ab      	cmp	r3, r5
 8011b4a:	dc26      	bgt.n	8011b9a <_printf_common+0x96>
 8011b4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011b50:	6822      	ldr	r2, [r4, #0]
 8011b52:	3b00      	subs	r3, #0
 8011b54:	bf18      	it	ne
 8011b56:	2301      	movne	r3, #1
 8011b58:	0692      	lsls	r2, r2, #26
 8011b5a:	d42b      	bmi.n	8011bb4 <_printf_common+0xb0>
 8011b5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011b60:	4641      	mov	r1, r8
 8011b62:	4638      	mov	r0, r7
 8011b64:	47c8      	blx	r9
 8011b66:	3001      	adds	r0, #1
 8011b68:	d01e      	beq.n	8011ba8 <_printf_common+0xa4>
 8011b6a:	6823      	ldr	r3, [r4, #0]
 8011b6c:	6922      	ldr	r2, [r4, #16]
 8011b6e:	f003 0306 	and.w	r3, r3, #6
 8011b72:	2b04      	cmp	r3, #4
 8011b74:	bf02      	ittt	eq
 8011b76:	68e5      	ldreq	r5, [r4, #12]
 8011b78:	6833      	ldreq	r3, [r6, #0]
 8011b7a:	1aed      	subeq	r5, r5, r3
 8011b7c:	68a3      	ldr	r3, [r4, #8]
 8011b7e:	bf0c      	ite	eq
 8011b80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b84:	2500      	movne	r5, #0
 8011b86:	4293      	cmp	r3, r2
 8011b88:	bfc4      	itt	gt
 8011b8a:	1a9b      	subgt	r3, r3, r2
 8011b8c:	18ed      	addgt	r5, r5, r3
 8011b8e:	2600      	movs	r6, #0
 8011b90:	341a      	adds	r4, #26
 8011b92:	42b5      	cmp	r5, r6
 8011b94:	d11a      	bne.n	8011bcc <_printf_common+0xc8>
 8011b96:	2000      	movs	r0, #0
 8011b98:	e008      	b.n	8011bac <_printf_common+0xa8>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	4652      	mov	r2, sl
 8011b9e:	4641      	mov	r1, r8
 8011ba0:	4638      	mov	r0, r7
 8011ba2:	47c8      	blx	r9
 8011ba4:	3001      	adds	r0, #1
 8011ba6:	d103      	bne.n	8011bb0 <_printf_common+0xac>
 8011ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8011bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bb0:	3501      	adds	r5, #1
 8011bb2:	e7c6      	b.n	8011b42 <_printf_common+0x3e>
 8011bb4:	18e1      	adds	r1, r4, r3
 8011bb6:	1c5a      	adds	r2, r3, #1
 8011bb8:	2030      	movs	r0, #48	@ 0x30
 8011bba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8011bbe:	4422      	add	r2, r4
 8011bc0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011bc4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011bc8:	3302      	adds	r3, #2
 8011bca:	e7c7      	b.n	8011b5c <_printf_common+0x58>
 8011bcc:	2301      	movs	r3, #1
 8011bce:	4622      	mov	r2, r4
 8011bd0:	4641      	mov	r1, r8
 8011bd2:	4638      	mov	r0, r7
 8011bd4:	47c8      	blx	r9
 8011bd6:	3001      	adds	r0, #1
 8011bd8:	d0e6      	beq.n	8011ba8 <_printf_common+0xa4>
 8011bda:	3601      	adds	r6, #1
 8011bdc:	e7d9      	b.n	8011b92 <_printf_common+0x8e>
	...

08011be0 <_printf_i>:
 8011be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011be4:	7e0f      	ldrb	r7, [r1, #24]
 8011be6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011be8:	2f78      	cmp	r7, #120	@ 0x78
 8011bea:	4691      	mov	r9, r2
 8011bec:	4680      	mov	r8, r0
 8011bee:	460c      	mov	r4, r1
 8011bf0:	469a      	mov	sl, r3
 8011bf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011bf6:	d807      	bhi.n	8011c08 <_printf_i+0x28>
 8011bf8:	2f62      	cmp	r7, #98	@ 0x62
 8011bfa:	d80a      	bhi.n	8011c12 <_printf_i+0x32>
 8011bfc:	2f00      	cmp	r7, #0
 8011bfe:	f000 80d2 	beq.w	8011da6 <_printf_i+0x1c6>
 8011c02:	2f58      	cmp	r7, #88	@ 0x58
 8011c04:	f000 80b9 	beq.w	8011d7a <_printf_i+0x19a>
 8011c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011c10:	e03a      	b.n	8011c88 <_printf_i+0xa8>
 8011c12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011c16:	2b15      	cmp	r3, #21
 8011c18:	d8f6      	bhi.n	8011c08 <_printf_i+0x28>
 8011c1a:	a101      	add	r1, pc, #4	@ (adr r1, 8011c20 <_printf_i+0x40>)
 8011c1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c20:	08011c79 	.word	0x08011c79
 8011c24:	08011c8d 	.word	0x08011c8d
 8011c28:	08011c09 	.word	0x08011c09
 8011c2c:	08011c09 	.word	0x08011c09
 8011c30:	08011c09 	.word	0x08011c09
 8011c34:	08011c09 	.word	0x08011c09
 8011c38:	08011c8d 	.word	0x08011c8d
 8011c3c:	08011c09 	.word	0x08011c09
 8011c40:	08011c09 	.word	0x08011c09
 8011c44:	08011c09 	.word	0x08011c09
 8011c48:	08011c09 	.word	0x08011c09
 8011c4c:	08011d8d 	.word	0x08011d8d
 8011c50:	08011cb7 	.word	0x08011cb7
 8011c54:	08011d47 	.word	0x08011d47
 8011c58:	08011c09 	.word	0x08011c09
 8011c5c:	08011c09 	.word	0x08011c09
 8011c60:	08011daf 	.word	0x08011daf
 8011c64:	08011c09 	.word	0x08011c09
 8011c68:	08011cb7 	.word	0x08011cb7
 8011c6c:	08011c09 	.word	0x08011c09
 8011c70:	08011c09 	.word	0x08011c09
 8011c74:	08011d4f 	.word	0x08011d4f
 8011c78:	6833      	ldr	r3, [r6, #0]
 8011c7a:	1d1a      	adds	r2, r3, #4
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	6032      	str	r2, [r6, #0]
 8011c80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011c84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011c88:	2301      	movs	r3, #1
 8011c8a:	e09d      	b.n	8011dc8 <_printf_i+0x1e8>
 8011c8c:	6833      	ldr	r3, [r6, #0]
 8011c8e:	6820      	ldr	r0, [r4, #0]
 8011c90:	1d19      	adds	r1, r3, #4
 8011c92:	6031      	str	r1, [r6, #0]
 8011c94:	0606      	lsls	r6, r0, #24
 8011c96:	d501      	bpl.n	8011c9c <_printf_i+0xbc>
 8011c98:	681d      	ldr	r5, [r3, #0]
 8011c9a:	e003      	b.n	8011ca4 <_printf_i+0xc4>
 8011c9c:	0645      	lsls	r5, r0, #25
 8011c9e:	d5fb      	bpl.n	8011c98 <_printf_i+0xb8>
 8011ca0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011ca4:	2d00      	cmp	r5, #0
 8011ca6:	da03      	bge.n	8011cb0 <_printf_i+0xd0>
 8011ca8:	232d      	movs	r3, #45	@ 0x2d
 8011caa:	426d      	negs	r5, r5
 8011cac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011cb0:	4859      	ldr	r0, [pc, #356]	@ (8011e18 <_printf_i+0x238>)
 8011cb2:	230a      	movs	r3, #10
 8011cb4:	e011      	b.n	8011cda <_printf_i+0xfa>
 8011cb6:	6821      	ldr	r1, [r4, #0]
 8011cb8:	6833      	ldr	r3, [r6, #0]
 8011cba:	0608      	lsls	r0, r1, #24
 8011cbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8011cc0:	d402      	bmi.n	8011cc8 <_printf_i+0xe8>
 8011cc2:	0649      	lsls	r1, r1, #25
 8011cc4:	bf48      	it	mi
 8011cc6:	b2ad      	uxthmi	r5, r5
 8011cc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8011cca:	4853      	ldr	r0, [pc, #332]	@ (8011e18 <_printf_i+0x238>)
 8011ccc:	6033      	str	r3, [r6, #0]
 8011cce:	bf14      	ite	ne
 8011cd0:	230a      	movne	r3, #10
 8011cd2:	2308      	moveq	r3, #8
 8011cd4:	2100      	movs	r1, #0
 8011cd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011cda:	6866      	ldr	r6, [r4, #4]
 8011cdc:	60a6      	str	r6, [r4, #8]
 8011cde:	2e00      	cmp	r6, #0
 8011ce0:	bfa2      	ittt	ge
 8011ce2:	6821      	ldrge	r1, [r4, #0]
 8011ce4:	f021 0104 	bicge.w	r1, r1, #4
 8011ce8:	6021      	strge	r1, [r4, #0]
 8011cea:	b90d      	cbnz	r5, 8011cf0 <_printf_i+0x110>
 8011cec:	2e00      	cmp	r6, #0
 8011cee:	d04b      	beq.n	8011d88 <_printf_i+0x1a8>
 8011cf0:	4616      	mov	r6, r2
 8011cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8011cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8011cfa:	5dc7      	ldrb	r7, [r0, r7]
 8011cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011d00:	462f      	mov	r7, r5
 8011d02:	42bb      	cmp	r3, r7
 8011d04:	460d      	mov	r5, r1
 8011d06:	d9f4      	bls.n	8011cf2 <_printf_i+0x112>
 8011d08:	2b08      	cmp	r3, #8
 8011d0a:	d10b      	bne.n	8011d24 <_printf_i+0x144>
 8011d0c:	6823      	ldr	r3, [r4, #0]
 8011d0e:	07df      	lsls	r7, r3, #31
 8011d10:	d508      	bpl.n	8011d24 <_printf_i+0x144>
 8011d12:	6923      	ldr	r3, [r4, #16]
 8011d14:	6861      	ldr	r1, [r4, #4]
 8011d16:	4299      	cmp	r1, r3
 8011d18:	bfde      	ittt	le
 8011d1a:	2330      	movle	r3, #48	@ 0x30
 8011d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8011d24:	1b92      	subs	r2, r2, r6
 8011d26:	6122      	str	r2, [r4, #16]
 8011d28:	f8cd a000 	str.w	sl, [sp]
 8011d2c:	464b      	mov	r3, r9
 8011d2e:	aa03      	add	r2, sp, #12
 8011d30:	4621      	mov	r1, r4
 8011d32:	4640      	mov	r0, r8
 8011d34:	f7ff fee6 	bl	8011b04 <_printf_common>
 8011d38:	3001      	adds	r0, #1
 8011d3a:	d14a      	bne.n	8011dd2 <_printf_i+0x1f2>
 8011d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8011d40:	b004      	add	sp, #16
 8011d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d46:	6823      	ldr	r3, [r4, #0]
 8011d48:	f043 0320 	orr.w	r3, r3, #32
 8011d4c:	6023      	str	r3, [r4, #0]
 8011d4e:	4833      	ldr	r0, [pc, #204]	@ (8011e1c <_printf_i+0x23c>)
 8011d50:	2778      	movs	r7, #120	@ 0x78
 8011d52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8011d56:	6823      	ldr	r3, [r4, #0]
 8011d58:	6831      	ldr	r1, [r6, #0]
 8011d5a:	061f      	lsls	r7, r3, #24
 8011d5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8011d60:	d402      	bmi.n	8011d68 <_printf_i+0x188>
 8011d62:	065f      	lsls	r7, r3, #25
 8011d64:	bf48      	it	mi
 8011d66:	b2ad      	uxthmi	r5, r5
 8011d68:	6031      	str	r1, [r6, #0]
 8011d6a:	07d9      	lsls	r1, r3, #31
 8011d6c:	bf44      	itt	mi
 8011d6e:	f043 0320 	orrmi.w	r3, r3, #32
 8011d72:	6023      	strmi	r3, [r4, #0]
 8011d74:	b11d      	cbz	r5, 8011d7e <_printf_i+0x19e>
 8011d76:	2310      	movs	r3, #16
 8011d78:	e7ac      	b.n	8011cd4 <_printf_i+0xf4>
 8011d7a:	4827      	ldr	r0, [pc, #156]	@ (8011e18 <_printf_i+0x238>)
 8011d7c:	e7e9      	b.n	8011d52 <_printf_i+0x172>
 8011d7e:	6823      	ldr	r3, [r4, #0]
 8011d80:	f023 0320 	bic.w	r3, r3, #32
 8011d84:	6023      	str	r3, [r4, #0]
 8011d86:	e7f6      	b.n	8011d76 <_printf_i+0x196>
 8011d88:	4616      	mov	r6, r2
 8011d8a:	e7bd      	b.n	8011d08 <_printf_i+0x128>
 8011d8c:	6833      	ldr	r3, [r6, #0]
 8011d8e:	6825      	ldr	r5, [r4, #0]
 8011d90:	6961      	ldr	r1, [r4, #20]
 8011d92:	1d18      	adds	r0, r3, #4
 8011d94:	6030      	str	r0, [r6, #0]
 8011d96:	062e      	lsls	r6, r5, #24
 8011d98:	681b      	ldr	r3, [r3, #0]
 8011d9a:	d501      	bpl.n	8011da0 <_printf_i+0x1c0>
 8011d9c:	6019      	str	r1, [r3, #0]
 8011d9e:	e002      	b.n	8011da6 <_printf_i+0x1c6>
 8011da0:	0668      	lsls	r0, r5, #25
 8011da2:	d5fb      	bpl.n	8011d9c <_printf_i+0x1bc>
 8011da4:	8019      	strh	r1, [r3, #0]
 8011da6:	2300      	movs	r3, #0
 8011da8:	6123      	str	r3, [r4, #16]
 8011daa:	4616      	mov	r6, r2
 8011dac:	e7bc      	b.n	8011d28 <_printf_i+0x148>
 8011dae:	6833      	ldr	r3, [r6, #0]
 8011db0:	1d1a      	adds	r2, r3, #4
 8011db2:	6032      	str	r2, [r6, #0]
 8011db4:	681e      	ldr	r6, [r3, #0]
 8011db6:	6862      	ldr	r2, [r4, #4]
 8011db8:	2100      	movs	r1, #0
 8011dba:	4630      	mov	r0, r6
 8011dbc:	f7ee f9e8 	bl	8000190 <memchr>
 8011dc0:	b108      	cbz	r0, 8011dc6 <_printf_i+0x1e6>
 8011dc2:	1b80      	subs	r0, r0, r6
 8011dc4:	6060      	str	r0, [r4, #4]
 8011dc6:	6863      	ldr	r3, [r4, #4]
 8011dc8:	6123      	str	r3, [r4, #16]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011dd0:	e7aa      	b.n	8011d28 <_printf_i+0x148>
 8011dd2:	6923      	ldr	r3, [r4, #16]
 8011dd4:	4632      	mov	r2, r6
 8011dd6:	4649      	mov	r1, r9
 8011dd8:	4640      	mov	r0, r8
 8011dda:	47d0      	blx	sl
 8011ddc:	3001      	adds	r0, #1
 8011dde:	d0ad      	beq.n	8011d3c <_printf_i+0x15c>
 8011de0:	6823      	ldr	r3, [r4, #0]
 8011de2:	079b      	lsls	r3, r3, #30
 8011de4:	d413      	bmi.n	8011e0e <_printf_i+0x22e>
 8011de6:	68e0      	ldr	r0, [r4, #12]
 8011de8:	9b03      	ldr	r3, [sp, #12]
 8011dea:	4298      	cmp	r0, r3
 8011dec:	bfb8      	it	lt
 8011dee:	4618      	movlt	r0, r3
 8011df0:	e7a6      	b.n	8011d40 <_printf_i+0x160>
 8011df2:	2301      	movs	r3, #1
 8011df4:	4632      	mov	r2, r6
 8011df6:	4649      	mov	r1, r9
 8011df8:	4640      	mov	r0, r8
 8011dfa:	47d0      	blx	sl
 8011dfc:	3001      	adds	r0, #1
 8011dfe:	d09d      	beq.n	8011d3c <_printf_i+0x15c>
 8011e00:	3501      	adds	r5, #1
 8011e02:	68e3      	ldr	r3, [r4, #12]
 8011e04:	9903      	ldr	r1, [sp, #12]
 8011e06:	1a5b      	subs	r3, r3, r1
 8011e08:	42ab      	cmp	r3, r5
 8011e0a:	dcf2      	bgt.n	8011df2 <_printf_i+0x212>
 8011e0c:	e7eb      	b.n	8011de6 <_printf_i+0x206>
 8011e0e:	2500      	movs	r5, #0
 8011e10:	f104 0619 	add.w	r6, r4, #25
 8011e14:	e7f5      	b.n	8011e02 <_printf_i+0x222>
 8011e16:	bf00      	nop
 8011e18:	08013e15 	.word	0x08013e15
 8011e1c:	08013e26 	.word	0x08013e26

08011e20 <__sflush_r>:
 8011e20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e28:	0716      	lsls	r6, r2, #28
 8011e2a:	4605      	mov	r5, r0
 8011e2c:	460c      	mov	r4, r1
 8011e2e:	d454      	bmi.n	8011eda <__sflush_r+0xba>
 8011e30:	684b      	ldr	r3, [r1, #4]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dc02      	bgt.n	8011e3c <__sflush_r+0x1c>
 8011e36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	dd48      	ble.n	8011ece <__sflush_r+0xae>
 8011e3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e3e:	2e00      	cmp	r6, #0
 8011e40:	d045      	beq.n	8011ece <__sflush_r+0xae>
 8011e42:	2300      	movs	r3, #0
 8011e44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011e48:	682f      	ldr	r7, [r5, #0]
 8011e4a:	6a21      	ldr	r1, [r4, #32]
 8011e4c:	602b      	str	r3, [r5, #0]
 8011e4e:	d030      	beq.n	8011eb2 <__sflush_r+0x92>
 8011e50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011e52:	89a3      	ldrh	r3, [r4, #12]
 8011e54:	0759      	lsls	r1, r3, #29
 8011e56:	d505      	bpl.n	8011e64 <__sflush_r+0x44>
 8011e58:	6863      	ldr	r3, [r4, #4]
 8011e5a:	1ad2      	subs	r2, r2, r3
 8011e5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011e5e:	b10b      	cbz	r3, 8011e64 <__sflush_r+0x44>
 8011e60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011e62:	1ad2      	subs	r2, r2, r3
 8011e64:	2300      	movs	r3, #0
 8011e66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011e68:	6a21      	ldr	r1, [r4, #32]
 8011e6a:	4628      	mov	r0, r5
 8011e6c:	47b0      	blx	r6
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	89a3      	ldrh	r3, [r4, #12]
 8011e72:	d106      	bne.n	8011e82 <__sflush_r+0x62>
 8011e74:	6829      	ldr	r1, [r5, #0]
 8011e76:	291d      	cmp	r1, #29
 8011e78:	d82b      	bhi.n	8011ed2 <__sflush_r+0xb2>
 8011e7a:	4a2a      	ldr	r2, [pc, #168]	@ (8011f24 <__sflush_r+0x104>)
 8011e7c:	410a      	asrs	r2, r1
 8011e7e:	07d6      	lsls	r6, r2, #31
 8011e80:	d427      	bmi.n	8011ed2 <__sflush_r+0xb2>
 8011e82:	2200      	movs	r2, #0
 8011e84:	6062      	str	r2, [r4, #4]
 8011e86:	04d9      	lsls	r1, r3, #19
 8011e88:	6922      	ldr	r2, [r4, #16]
 8011e8a:	6022      	str	r2, [r4, #0]
 8011e8c:	d504      	bpl.n	8011e98 <__sflush_r+0x78>
 8011e8e:	1c42      	adds	r2, r0, #1
 8011e90:	d101      	bne.n	8011e96 <__sflush_r+0x76>
 8011e92:	682b      	ldr	r3, [r5, #0]
 8011e94:	b903      	cbnz	r3, 8011e98 <__sflush_r+0x78>
 8011e96:	6560      	str	r0, [r4, #84]	@ 0x54
 8011e98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011e9a:	602f      	str	r7, [r5, #0]
 8011e9c:	b1b9      	cbz	r1, 8011ece <__sflush_r+0xae>
 8011e9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011ea2:	4299      	cmp	r1, r3
 8011ea4:	d002      	beq.n	8011eac <__sflush_r+0x8c>
 8011ea6:	4628      	mov	r0, r5
 8011ea8:	f7ff fbf2 	bl	8011690 <_free_r>
 8011eac:	2300      	movs	r3, #0
 8011eae:	6363      	str	r3, [r4, #52]	@ 0x34
 8011eb0:	e00d      	b.n	8011ece <__sflush_r+0xae>
 8011eb2:	2301      	movs	r3, #1
 8011eb4:	4628      	mov	r0, r5
 8011eb6:	47b0      	blx	r6
 8011eb8:	4602      	mov	r2, r0
 8011eba:	1c50      	adds	r0, r2, #1
 8011ebc:	d1c9      	bne.n	8011e52 <__sflush_r+0x32>
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d0c6      	beq.n	8011e52 <__sflush_r+0x32>
 8011ec4:	2b1d      	cmp	r3, #29
 8011ec6:	d001      	beq.n	8011ecc <__sflush_r+0xac>
 8011ec8:	2b16      	cmp	r3, #22
 8011eca:	d11e      	bne.n	8011f0a <__sflush_r+0xea>
 8011ecc:	602f      	str	r7, [r5, #0]
 8011ece:	2000      	movs	r0, #0
 8011ed0:	e022      	b.n	8011f18 <__sflush_r+0xf8>
 8011ed2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011ed6:	b21b      	sxth	r3, r3
 8011ed8:	e01b      	b.n	8011f12 <__sflush_r+0xf2>
 8011eda:	690f      	ldr	r7, [r1, #16]
 8011edc:	2f00      	cmp	r7, #0
 8011ede:	d0f6      	beq.n	8011ece <__sflush_r+0xae>
 8011ee0:	0793      	lsls	r3, r2, #30
 8011ee2:	680e      	ldr	r6, [r1, #0]
 8011ee4:	bf08      	it	eq
 8011ee6:	694b      	ldreq	r3, [r1, #20]
 8011ee8:	600f      	str	r7, [r1, #0]
 8011eea:	bf18      	it	ne
 8011eec:	2300      	movne	r3, #0
 8011eee:	eba6 0807 	sub.w	r8, r6, r7
 8011ef2:	608b      	str	r3, [r1, #8]
 8011ef4:	f1b8 0f00 	cmp.w	r8, #0
 8011ef8:	dde9      	ble.n	8011ece <__sflush_r+0xae>
 8011efa:	6a21      	ldr	r1, [r4, #32]
 8011efc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011efe:	4643      	mov	r3, r8
 8011f00:	463a      	mov	r2, r7
 8011f02:	4628      	mov	r0, r5
 8011f04:	47b0      	blx	r6
 8011f06:	2800      	cmp	r0, #0
 8011f08:	dc08      	bgt.n	8011f1c <__sflush_r+0xfc>
 8011f0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011f12:	81a3      	strh	r3, [r4, #12]
 8011f14:	f04f 30ff 	mov.w	r0, #4294967295
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	4407      	add	r7, r0
 8011f1e:	eba8 0800 	sub.w	r8, r8, r0
 8011f22:	e7e7      	b.n	8011ef4 <__sflush_r+0xd4>
 8011f24:	dfbffffe 	.word	0xdfbffffe

08011f28 <_fflush_r>:
 8011f28:	b538      	push	{r3, r4, r5, lr}
 8011f2a:	690b      	ldr	r3, [r1, #16]
 8011f2c:	4605      	mov	r5, r0
 8011f2e:	460c      	mov	r4, r1
 8011f30:	b913      	cbnz	r3, 8011f38 <_fflush_r+0x10>
 8011f32:	2500      	movs	r5, #0
 8011f34:	4628      	mov	r0, r5
 8011f36:	bd38      	pop	{r3, r4, r5, pc}
 8011f38:	b118      	cbz	r0, 8011f42 <_fflush_r+0x1a>
 8011f3a:	6a03      	ldr	r3, [r0, #32]
 8011f3c:	b90b      	cbnz	r3, 8011f42 <_fflush_r+0x1a>
 8011f3e:	f7ff f981 	bl	8011244 <__sinit>
 8011f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d0f3      	beq.n	8011f32 <_fflush_r+0xa>
 8011f4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011f4c:	07d0      	lsls	r0, r2, #31
 8011f4e:	d404      	bmi.n	8011f5a <_fflush_r+0x32>
 8011f50:	0599      	lsls	r1, r3, #22
 8011f52:	d402      	bmi.n	8011f5a <_fflush_r+0x32>
 8011f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f56:	f7ff fb8a 	bl	801166e <__retarget_lock_acquire_recursive>
 8011f5a:	4628      	mov	r0, r5
 8011f5c:	4621      	mov	r1, r4
 8011f5e:	f7ff ff5f 	bl	8011e20 <__sflush_r>
 8011f62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011f64:	07da      	lsls	r2, r3, #31
 8011f66:	4605      	mov	r5, r0
 8011f68:	d4e4      	bmi.n	8011f34 <_fflush_r+0xc>
 8011f6a:	89a3      	ldrh	r3, [r4, #12]
 8011f6c:	059b      	lsls	r3, r3, #22
 8011f6e:	d4e1      	bmi.n	8011f34 <_fflush_r+0xc>
 8011f70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011f72:	f7ff fb7d 	bl	8011670 <__retarget_lock_release_recursive>
 8011f76:	e7dd      	b.n	8011f34 <_fflush_r+0xc>

08011f78 <__swhatbuf_r>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	460c      	mov	r4, r1
 8011f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f80:	2900      	cmp	r1, #0
 8011f82:	b096      	sub	sp, #88	@ 0x58
 8011f84:	4615      	mov	r5, r2
 8011f86:	461e      	mov	r6, r3
 8011f88:	da0d      	bge.n	8011fa6 <__swhatbuf_r+0x2e>
 8011f8a:	89a3      	ldrh	r3, [r4, #12]
 8011f8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011f90:	f04f 0100 	mov.w	r1, #0
 8011f94:	bf14      	ite	ne
 8011f96:	2340      	movne	r3, #64	@ 0x40
 8011f98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011f9c:	2000      	movs	r0, #0
 8011f9e:	6031      	str	r1, [r6, #0]
 8011fa0:	602b      	str	r3, [r5, #0]
 8011fa2:	b016      	add	sp, #88	@ 0x58
 8011fa4:	bd70      	pop	{r4, r5, r6, pc}
 8011fa6:	466a      	mov	r2, sp
 8011fa8:	f000 f88a 	bl	80120c0 <_fstat_r>
 8011fac:	2800      	cmp	r0, #0
 8011fae:	dbec      	blt.n	8011f8a <__swhatbuf_r+0x12>
 8011fb0:	9901      	ldr	r1, [sp, #4]
 8011fb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011fb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011fba:	4259      	negs	r1, r3
 8011fbc:	4159      	adcs	r1, r3
 8011fbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011fc2:	e7eb      	b.n	8011f9c <__swhatbuf_r+0x24>

08011fc4 <__smakebuf_r>:
 8011fc4:	898b      	ldrh	r3, [r1, #12]
 8011fc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011fc8:	079d      	lsls	r5, r3, #30
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460c      	mov	r4, r1
 8011fce:	d507      	bpl.n	8011fe0 <__smakebuf_r+0x1c>
 8011fd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011fd4:	6023      	str	r3, [r4, #0]
 8011fd6:	6123      	str	r3, [r4, #16]
 8011fd8:	2301      	movs	r3, #1
 8011fda:	6163      	str	r3, [r4, #20]
 8011fdc:	b003      	add	sp, #12
 8011fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe0:	ab01      	add	r3, sp, #4
 8011fe2:	466a      	mov	r2, sp
 8011fe4:	f7ff ffc8 	bl	8011f78 <__swhatbuf_r>
 8011fe8:	9f00      	ldr	r7, [sp, #0]
 8011fea:	4605      	mov	r5, r0
 8011fec:	4639      	mov	r1, r7
 8011fee:	4630      	mov	r0, r6
 8011ff0:	f7ff fbba 	bl	8011768 <_malloc_r>
 8011ff4:	b948      	cbnz	r0, 801200a <__smakebuf_r+0x46>
 8011ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011ffa:	059a      	lsls	r2, r3, #22
 8011ffc:	d4ee      	bmi.n	8011fdc <__smakebuf_r+0x18>
 8011ffe:	f023 0303 	bic.w	r3, r3, #3
 8012002:	f043 0302 	orr.w	r3, r3, #2
 8012006:	81a3      	strh	r3, [r4, #12]
 8012008:	e7e2      	b.n	8011fd0 <__smakebuf_r+0xc>
 801200a:	89a3      	ldrh	r3, [r4, #12]
 801200c:	6020      	str	r0, [r4, #0]
 801200e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012012:	81a3      	strh	r3, [r4, #12]
 8012014:	9b01      	ldr	r3, [sp, #4]
 8012016:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801201a:	b15b      	cbz	r3, 8012034 <__smakebuf_r+0x70>
 801201c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012020:	4630      	mov	r0, r6
 8012022:	f000 f85f 	bl	80120e4 <_isatty_r>
 8012026:	b128      	cbz	r0, 8012034 <__smakebuf_r+0x70>
 8012028:	89a3      	ldrh	r3, [r4, #12]
 801202a:	f023 0303 	bic.w	r3, r3, #3
 801202e:	f043 0301 	orr.w	r3, r3, #1
 8012032:	81a3      	strh	r3, [r4, #12]
 8012034:	89a3      	ldrh	r3, [r4, #12]
 8012036:	431d      	orrs	r5, r3
 8012038:	81a5      	strh	r5, [r4, #12]
 801203a:	e7cf      	b.n	8011fdc <__smakebuf_r+0x18>

0801203c <_putc_r>:
 801203c:	b570      	push	{r4, r5, r6, lr}
 801203e:	460d      	mov	r5, r1
 8012040:	4614      	mov	r4, r2
 8012042:	4606      	mov	r6, r0
 8012044:	b118      	cbz	r0, 801204e <_putc_r+0x12>
 8012046:	6a03      	ldr	r3, [r0, #32]
 8012048:	b90b      	cbnz	r3, 801204e <_putc_r+0x12>
 801204a:	f7ff f8fb 	bl	8011244 <__sinit>
 801204e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012050:	07d8      	lsls	r0, r3, #31
 8012052:	d405      	bmi.n	8012060 <_putc_r+0x24>
 8012054:	89a3      	ldrh	r3, [r4, #12]
 8012056:	0599      	lsls	r1, r3, #22
 8012058:	d402      	bmi.n	8012060 <_putc_r+0x24>
 801205a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801205c:	f7ff fb07 	bl	801166e <__retarget_lock_acquire_recursive>
 8012060:	68a3      	ldr	r3, [r4, #8]
 8012062:	3b01      	subs	r3, #1
 8012064:	2b00      	cmp	r3, #0
 8012066:	60a3      	str	r3, [r4, #8]
 8012068:	da05      	bge.n	8012076 <_putc_r+0x3a>
 801206a:	69a2      	ldr	r2, [r4, #24]
 801206c:	4293      	cmp	r3, r2
 801206e:	db12      	blt.n	8012096 <_putc_r+0x5a>
 8012070:	b2eb      	uxtb	r3, r5
 8012072:	2b0a      	cmp	r3, #10
 8012074:	d00f      	beq.n	8012096 <_putc_r+0x5a>
 8012076:	6823      	ldr	r3, [r4, #0]
 8012078:	1c5a      	adds	r2, r3, #1
 801207a:	6022      	str	r2, [r4, #0]
 801207c:	701d      	strb	r5, [r3, #0]
 801207e:	b2ed      	uxtb	r5, r5
 8012080:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012082:	07da      	lsls	r2, r3, #31
 8012084:	d405      	bmi.n	8012092 <_putc_r+0x56>
 8012086:	89a3      	ldrh	r3, [r4, #12]
 8012088:	059b      	lsls	r3, r3, #22
 801208a:	d402      	bmi.n	8012092 <_putc_r+0x56>
 801208c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801208e:	f7ff faef 	bl	8011670 <__retarget_lock_release_recursive>
 8012092:	4628      	mov	r0, r5
 8012094:	bd70      	pop	{r4, r5, r6, pc}
 8012096:	4629      	mov	r1, r5
 8012098:	4622      	mov	r2, r4
 801209a:	4630      	mov	r0, r6
 801209c:	f7ff f9c3 	bl	8011426 <__swbuf_r>
 80120a0:	4605      	mov	r5, r0
 80120a2:	e7ed      	b.n	8012080 <_putc_r+0x44>

080120a4 <strchr>:
 80120a4:	b2c9      	uxtb	r1, r1
 80120a6:	4603      	mov	r3, r0
 80120a8:	4618      	mov	r0, r3
 80120aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120ae:	b112      	cbz	r2, 80120b6 <strchr+0x12>
 80120b0:	428a      	cmp	r2, r1
 80120b2:	d1f9      	bne.n	80120a8 <strchr+0x4>
 80120b4:	4770      	bx	lr
 80120b6:	2900      	cmp	r1, #0
 80120b8:	bf18      	it	ne
 80120ba:	2000      	movne	r0, #0
 80120bc:	4770      	bx	lr
	...

080120c0 <_fstat_r>:
 80120c0:	b538      	push	{r3, r4, r5, lr}
 80120c2:	4d07      	ldr	r5, [pc, #28]	@ (80120e0 <_fstat_r+0x20>)
 80120c4:	2300      	movs	r3, #0
 80120c6:	4604      	mov	r4, r0
 80120c8:	4608      	mov	r0, r1
 80120ca:	4611      	mov	r1, r2
 80120cc:	602b      	str	r3, [r5, #0]
 80120ce:	f7f1 fa3a 	bl	8003546 <_fstat>
 80120d2:	1c43      	adds	r3, r0, #1
 80120d4:	d102      	bne.n	80120dc <_fstat_r+0x1c>
 80120d6:	682b      	ldr	r3, [r5, #0]
 80120d8:	b103      	cbz	r3, 80120dc <_fstat_r+0x1c>
 80120da:	6023      	str	r3, [r4, #0]
 80120dc:	bd38      	pop	{r3, r4, r5, pc}
 80120de:	bf00      	nop
 80120e0:	20000d3c 	.word	0x20000d3c

080120e4 <_isatty_r>:
 80120e4:	b538      	push	{r3, r4, r5, lr}
 80120e6:	4d06      	ldr	r5, [pc, #24]	@ (8012100 <_isatty_r+0x1c>)
 80120e8:	2300      	movs	r3, #0
 80120ea:	4604      	mov	r4, r0
 80120ec:	4608      	mov	r0, r1
 80120ee:	602b      	str	r3, [r5, #0]
 80120f0:	f7f1 fa39 	bl	8003566 <_isatty>
 80120f4:	1c43      	adds	r3, r0, #1
 80120f6:	d102      	bne.n	80120fe <_isatty_r+0x1a>
 80120f8:	682b      	ldr	r3, [r5, #0]
 80120fa:	b103      	cbz	r3, 80120fe <_isatty_r+0x1a>
 80120fc:	6023      	str	r3, [r4, #0]
 80120fe:	bd38      	pop	{r3, r4, r5, pc}
 8012100:	20000d3c 	.word	0x20000d3c

08012104 <_sbrk_r>:
 8012104:	b538      	push	{r3, r4, r5, lr}
 8012106:	4d06      	ldr	r5, [pc, #24]	@ (8012120 <_sbrk_r+0x1c>)
 8012108:	2300      	movs	r3, #0
 801210a:	4604      	mov	r4, r0
 801210c:	4608      	mov	r0, r1
 801210e:	602b      	str	r3, [r5, #0]
 8012110:	f7f1 fa42 	bl	8003598 <_sbrk>
 8012114:	1c43      	adds	r3, r0, #1
 8012116:	d102      	bne.n	801211e <_sbrk_r+0x1a>
 8012118:	682b      	ldr	r3, [r5, #0]
 801211a:	b103      	cbz	r3, 801211e <_sbrk_r+0x1a>
 801211c:	6023      	str	r3, [r4, #0]
 801211e:	bd38      	pop	{r3, r4, r5, pc}
 8012120:	20000d3c 	.word	0x20000d3c

08012124 <fmax>:
 8012124:	b508      	push	{r3, lr}
 8012126:	ed2d 8b04 	vpush	{d8-d9}
 801212a:	eeb0 8a40 	vmov.f32	s16, s0
 801212e:	eef0 8a60 	vmov.f32	s17, s1
 8012132:	eeb0 9a41 	vmov.f32	s18, s2
 8012136:	eef0 9a61 	vmov.f32	s19, s3
 801213a:	f000 f847 	bl	80121cc <__fpclassifyd>
 801213e:	b950      	cbnz	r0, 8012156 <fmax+0x32>
 8012140:	eeb0 8a49 	vmov.f32	s16, s18
 8012144:	eef0 8a69 	vmov.f32	s17, s19
 8012148:	eeb0 0a48 	vmov.f32	s0, s16
 801214c:	eef0 0a68 	vmov.f32	s1, s17
 8012150:	ecbd 8b04 	vpop	{d8-d9}
 8012154:	bd08      	pop	{r3, pc}
 8012156:	eeb0 0a49 	vmov.f32	s0, s18
 801215a:	eef0 0a69 	vmov.f32	s1, s19
 801215e:	f000 f835 	bl	80121cc <__fpclassifyd>
 8012162:	2800      	cmp	r0, #0
 8012164:	d0f0      	beq.n	8012148 <fmax+0x24>
 8012166:	ec53 2b19 	vmov	r2, r3, d9
 801216a:	ec51 0b18 	vmov	r0, r1, d8
 801216e:	f7ee fbc3 	bl	80008f8 <__aeabi_dcmpgt>
 8012172:	2800      	cmp	r0, #0
 8012174:	d0e4      	beq.n	8012140 <fmax+0x1c>
 8012176:	e7e7      	b.n	8012148 <fmax+0x24>

08012178 <fmin>:
 8012178:	b508      	push	{r3, lr}
 801217a:	ed2d 8b04 	vpush	{d8-d9}
 801217e:	eeb0 8a40 	vmov.f32	s16, s0
 8012182:	eef0 8a60 	vmov.f32	s17, s1
 8012186:	eeb0 9a41 	vmov.f32	s18, s2
 801218a:	eef0 9a61 	vmov.f32	s19, s3
 801218e:	f000 f81d 	bl	80121cc <__fpclassifyd>
 8012192:	b950      	cbnz	r0, 80121aa <fmin+0x32>
 8012194:	eeb0 8a49 	vmov.f32	s16, s18
 8012198:	eef0 8a69 	vmov.f32	s17, s19
 801219c:	eeb0 0a48 	vmov.f32	s0, s16
 80121a0:	eef0 0a68 	vmov.f32	s1, s17
 80121a4:	ecbd 8b04 	vpop	{d8-d9}
 80121a8:	bd08      	pop	{r3, pc}
 80121aa:	eeb0 0a49 	vmov.f32	s0, s18
 80121ae:	eef0 0a69 	vmov.f32	s1, s19
 80121b2:	f000 f80b 	bl	80121cc <__fpclassifyd>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d0f0      	beq.n	801219c <fmin+0x24>
 80121ba:	ec53 2b19 	vmov	r2, r3, d9
 80121be:	ec51 0b18 	vmov	r0, r1, d8
 80121c2:	f7ee fb7b 	bl	80008bc <__aeabi_dcmplt>
 80121c6:	2800      	cmp	r0, #0
 80121c8:	d0e4      	beq.n	8012194 <fmin+0x1c>
 80121ca:	e7e7      	b.n	801219c <fmin+0x24>

080121cc <__fpclassifyd>:
 80121cc:	ec51 0b10 	vmov	r0, r1, d0
 80121d0:	b510      	push	{r4, lr}
 80121d2:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80121d6:	460b      	mov	r3, r1
 80121d8:	d019      	beq.n	801220e <__fpclassifyd+0x42>
 80121da:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80121de:	490e      	ldr	r1, [pc, #56]	@ (8012218 <__fpclassifyd+0x4c>)
 80121e0:	428a      	cmp	r2, r1
 80121e2:	d90e      	bls.n	8012202 <__fpclassifyd+0x36>
 80121e4:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80121e8:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 80121ec:	428a      	cmp	r2, r1
 80121ee:	d908      	bls.n	8012202 <__fpclassifyd+0x36>
 80121f0:	4a0a      	ldr	r2, [pc, #40]	@ (801221c <__fpclassifyd+0x50>)
 80121f2:	4213      	tst	r3, r2
 80121f4:	d007      	beq.n	8012206 <__fpclassifyd+0x3a>
 80121f6:	4294      	cmp	r4, r2
 80121f8:	d107      	bne.n	801220a <__fpclassifyd+0x3e>
 80121fa:	fab0 f080 	clz	r0, r0
 80121fe:	0940      	lsrs	r0, r0, #5
 8012200:	bd10      	pop	{r4, pc}
 8012202:	2004      	movs	r0, #4
 8012204:	e7fc      	b.n	8012200 <__fpclassifyd+0x34>
 8012206:	2003      	movs	r0, #3
 8012208:	e7fa      	b.n	8012200 <__fpclassifyd+0x34>
 801220a:	2000      	movs	r0, #0
 801220c:	e7f8      	b.n	8012200 <__fpclassifyd+0x34>
 801220e:	2800      	cmp	r0, #0
 8012210:	d1ee      	bne.n	80121f0 <__fpclassifyd+0x24>
 8012212:	2002      	movs	r0, #2
 8012214:	e7f4      	b.n	8012200 <__fpclassifyd+0x34>
 8012216:	bf00      	nop
 8012218:	7fdfffff 	.word	0x7fdfffff
 801221c:	7ff00000 	.word	0x7ff00000

08012220 <_init>:
 8012220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012222:	bf00      	nop
 8012224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012226:	bc08      	pop	{r3}
 8012228:	469e      	mov	lr, r3
 801222a:	4770      	bx	lr

0801222c <_fini>:
 801222c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801222e:	bf00      	nop
 8012230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012232:	bc08      	pop	{r3}
 8012234:	469e      	mov	lr, r3
 8012236:	4770      	bx	lr
