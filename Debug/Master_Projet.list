
Master_Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001320c  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ddc  0801334c  0801334c  0001434c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08015128  08015128  00016128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08015130  08015130  00016130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08015134  08015134  00016134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000164  20000008  08015138  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000016c  0801529c  0001716c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001a4  080152d1  000171a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bfc  200001b8  080152e2  000171b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  080152e2  00017db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00018000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00018000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  080152e2  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   00052b10  00000000  00000000  00017a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000896d  00000000  00000000  0006a5a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00004868  00000000  00000000  00072f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000037ab  00000000  00000000  00077780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00032d02  00000000  00000000  0007af2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00047db8  00000000  00000000  000adc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0011e793  00000000  00000000  000f59e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  00214178  2**0
                  CONTENTS, READONLY
 23 .debug_frame  00013f90  00000000  00000000  002141bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000062  00000000  00000000  0022814c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001b8 	.word	0x200001b8
 800015c:	00000000 	.word	0x00000000
 8000160:	08013334 	.word	0x08013334

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001bc 	.word	0x200001bc
 800017c:	08013334 	.word	0x08013334

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_dmul>:
 8000230:	b570      	push	{r4, r5, r6, lr}
 8000232:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000236:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800023a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800023e:	bf1d      	ittte	ne
 8000240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000244:	ea94 0f0c 	teqne	r4, ip
 8000248:	ea95 0f0c 	teqne	r5, ip
 800024c:	f000 f8de 	bleq	800040c <__aeabi_dmul+0x1dc>
 8000250:	442c      	add	r4, r5
 8000252:	ea81 0603 	eor.w	r6, r1, r3
 8000256:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800025a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800025e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000262:	bf18      	it	ne
 8000264:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000268:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800026c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000270:	d038      	beq.n	80002e4 <__aeabi_dmul+0xb4>
 8000272:	fba0 ce02 	umull	ip, lr, r0, r2
 8000276:	f04f 0500 	mov.w	r5, #0
 800027a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800027e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000282:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000286:	f04f 0600 	mov.w	r6, #0
 800028a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800028e:	f09c 0f00 	teq	ip, #0
 8000292:	bf18      	it	ne
 8000294:	f04e 0e01 	orrne.w	lr, lr, #1
 8000298:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800029c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002a0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002a4:	d204      	bcs.n	80002b0 <__aeabi_dmul+0x80>
 80002a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002aa:	416d      	adcs	r5, r5
 80002ac:	eb46 0606 	adc.w	r6, r6, r6
 80002b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002c4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002c8:	bf88      	it	hi
 80002ca:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002ce:	d81e      	bhi.n	800030e <__aeabi_dmul+0xde>
 80002d0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002d4:	bf08      	it	eq
 80002d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002da:	f150 0000 	adcs.w	r0, r0, #0
 80002de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002e2:	bd70      	pop	{r4, r5, r6, pc}
 80002e4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002e8:	ea46 0101 	orr.w	r1, r6, r1
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	ea81 0103 	eor.w	r1, r1, r3
 80002f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f8:	bfc2      	ittt	gt
 80002fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000302:	bd70      	popgt	{r4, r5, r6, pc}
 8000304:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000308:	f04f 0e00 	mov.w	lr, #0
 800030c:	3c01      	subs	r4, #1
 800030e:	f300 80ab 	bgt.w	8000468 <__aeabi_dmul+0x238>
 8000312:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000316:	bfde      	ittt	le
 8000318:	2000      	movle	r0, #0
 800031a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800031e:	bd70      	pople	{r4, r5, r6, pc}
 8000320:	f1c4 0400 	rsb	r4, r4, #0
 8000324:	3c20      	subs	r4, #32
 8000326:	da35      	bge.n	8000394 <__aeabi_dmul+0x164>
 8000328:	340c      	adds	r4, #12
 800032a:	dc1b      	bgt.n	8000364 <__aeabi_dmul+0x134>
 800032c:	f104 0414 	add.w	r4, r4, #20
 8000330:	f1c4 0520 	rsb	r5, r4, #32
 8000334:	fa00 f305 	lsl.w	r3, r0, r5
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea40 0002 	orr.w	r0, r0, r2
 8000344:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000348:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000350:	fa21 f604 	lsr.w	r6, r1, r4
 8000354:	eb42 0106 	adc.w	r1, r2, r6
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f1c4 040c 	rsb	r4, r4, #12
 8000368:	f1c4 0520 	rsb	r5, r4, #32
 800036c:	fa00 f304 	lsl.w	r3, r0, r4
 8000370:	fa20 f005 	lsr.w	r0, r0, r5
 8000374:	fa01 f204 	lsl.w	r2, r1, r4
 8000378:	ea40 0002 	orr.w	r0, r0, r2
 800037c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000380:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800038c:	bf08      	it	eq
 800038e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000392:	bd70      	pop	{r4, r5, r6, pc}
 8000394:	f1c4 0520 	rsb	r5, r4, #32
 8000398:	fa00 f205 	lsl.w	r2, r0, r5
 800039c:	ea4e 0e02 	orr.w	lr, lr, r2
 80003a0:	fa20 f304 	lsr.w	r3, r0, r4
 80003a4:	fa01 f205 	lsl.w	r2, r1, r5
 80003a8:	ea43 0302 	orr.w	r3, r3, r2
 80003ac:	fa21 f004 	lsr.w	r0, r1, r4
 80003b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	fa21 f204 	lsr.w	r2, r1, r4
 80003b8:	ea20 0002 	bic.w	r0, r0, r2
 80003bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003c4:	bf08      	it	eq
 80003c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ca:	bd70      	pop	{r4, r5, r6, pc}
 80003cc:	f094 0f00 	teq	r4, #0
 80003d0:	d10f      	bne.n	80003f2 <__aeabi_dmul+0x1c2>
 80003d2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003d6:	0040      	lsls	r0, r0, #1
 80003d8:	eb41 0101 	adc.w	r1, r1, r1
 80003dc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003e0:	bf08      	it	eq
 80003e2:	3c01      	subeq	r4, #1
 80003e4:	d0f7      	beq.n	80003d6 <__aeabi_dmul+0x1a6>
 80003e6:	ea41 0106 	orr.w	r1, r1, r6
 80003ea:	f095 0f00 	teq	r5, #0
 80003ee:	bf18      	it	ne
 80003f0:	4770      	bxne	lr
 80003f2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003f6:	0052      	lsls	r2, r2, #1
 80003f8:	eb43 0303 	adc.w	r3, r3, r3
 80003fc:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000400:	bf08      	it	eq
 8000402:	3d01      	subeq	r5, #1
 8000404:	d0f7      	beq.n	80003f6 <__aeabi_dmul+0x1c6>
 8000406:	ea43 0306 	orr.w	r3, r3, r6
 800040a:	4770      	bx	lr
 800040c:	ea94 0f0c 	teq	r4, ip
 8000410:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000414:	bf18      	it	ne
 8000416:	ea95 0f0c 	teqne	r5, ip
 800041a:	d00c      	beq.n	8000436 <__aeabi_dmul+0x206>
 800041c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000420:	bf18      	it	ne
 8000422:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000426:	d1d1      	bne.n	80003cc <__aeabi_dmul+0x19c>
 8000428:	ea81 0103 	eor.w	r1, r1, r3
 800042c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd70      	pop	{r4, r5, r6, pc}
 8000436:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800043a:	bf06      	itte	eq
 800043c:	4610      	moveq	r0, r2
 800043e:	4619      	moveq	r1, r3
 8000440:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000444:	d019      	beq.n	800047a <__aeabi_dmul+0x24a>
 8000446:	ea94 0f0c 	teq	r4, ip
 800044a:	d102      	bne.n	8000452 <__aeabi_dmul+0x222>
 800044c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000450:	d113      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000452:	ea95 0f0c 	teq	r5, ip
 8000456:	d105      	bne.n	8000464 <__aeabi_dmul+0x234>
 8000458:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800045c:	bf1c      	itt	ne
 800045e:	4610      	movne	r0, r2
 8000460:	4619      	movne	r1, r3
 8000462:	d10a      	bne.n	800047a <__aeabi_dmul+0x24a>
 8000464:	ea81 0103 	eor.w	r1, r1, r3
 8000468:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd70      	pop	{r4, r5, r6, pc}
 800047a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800047e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000482:	bd70      	pop	{r4, r5, r6, pc}

08000484 <__aeabi_drsub>:
 8000484:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000488:	e002      	b.n	8000490 <__adddf3>
 800048a:	bf00      	nop

0800048c <__aeabi_dsub>:
 800048c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000490 <__adddf3>:
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000496:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	bf1f      	itttt	ne
 80004a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b6:	f000 80e2 	beq.w	800067e <__adddf3+0x1ee>
 80004ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004c2:	bfb8      	it	lt
 80004c4:	426d      	neglt	r5, r5
 80004c6:	dd0c      	ble.n	80004e2 <__adddf3+0x52>
 80004c8:	442c      	add	r4, r5
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	ea82 0000 	eor.w	r0, r2, r0
 80004d6:	ea83 0101 	eor.w	r1, r3, r1
 80004da:	ea80 0202 	eor.w	r2, r0, r2
 80004de:	ea81 0303 	eor.w	r3, r1, r3
 80004e2:	2d36      	cmp	r5, #54	@ 0x36
 80004e4:	bf88      	it	hi
 80004e6:	bd30      	pophi	{r4, r5, pc}
 80004e8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004f0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x70>
 80004fa:	4240      	negs	r0, r0
 80004fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000500:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000504:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000508:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800050c:	d002      	beq.n	8000514 <__adddf3+0x84>
 800050e:	4252      	negs	r2, r2
 8000510:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000514:	ea94 0f05 	teq	r4, r5
 8000518:	f000 80a7 	beq.w	800066a <__adddf3+0x1da>
 800051c:	f1a4 0401 	sub.w	r4, r4, #1
 8000520:	f1d5 0e20 	rsbs	lr, r5, #32
 8000524:	db0d      	blt.n	8000542 <__adddf3+0xb2>
 8000526:	fa02 fc0e 	lsl.w	ip, r2, lr
 800052a:	fa22 f205 	lsr.w	r2, r2, r5
 800052e:	1880      	adds	r0, r0, r2
 8000530:	f141 0100 	adc.w	r1, r1, #0
 8000534:	fa03 f20e 	lsl.w	r2, r3, lr
 8000538:	1880      	adds	r0, r0, r2
 800053a:	fa43 f305 	asr.w	r3, r3, r5
 800053e:	4159      	adcs	r1, r3
 8000540:	e00e      	b.n	8000560 <__adddf3+0xd0>
 8000542:	f1a5 0520 	sub.w	r5, r5, #32
 8000546:	f10e 0e20 	add.w	lr, lr, #32
 800054a:	2a01      	cmp	r2, #1
 800054c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000550:	bf28      	it	cs
 8000552:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000556:	fa43 f305 	asr.w	r3, r3, r5
 800055a:	18c0      	adds	r0, r0, r3
 800055c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000560:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000564:	d507      	bpl.n	8000576 <__adddf3+0xe6>
 8000566:	f04f 0e00 	mov.w	lr, #0
 800056a:	f1dc 0c00 	rsbs	ip, ip, #0
 800056e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000572:	eb6e 0101 	sbc.w	r1, lr, r1
 8000576:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800057a:	d31b      	bcc.n	80005b4 <__adddf3+0x124>
 800057c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000580:	d30c      	bcc.n	800059c <__adddf3+0x10c>
 8000582:	0849      	lsrs	r1, r1, #1
 8000584:	ea5f 0030 	movs.w	r0, r0, rrx
 8000588:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800058c:	f104 0401 	add.w	r4, r4, #1
 8000590:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000594:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000598:	f080 809a 	bcs.w	80006d0 <__adddf3+0x240>
 800059c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005a0:	bf08      	it	eq
 80005a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005a6:	f150 0000 	adcs.w	r0, r0, #0
 80005aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ae:	ea41 0105 	orr.w	r1, r1, r5
 80005b2:	bd30      	pop	{r4, r5, pc}
 80005b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b8:	4140      	adcs	r0, r0
 80005ba:	eb41 0101 	adc.w	r1, r1, r1
 80005be:	3c01      	subs	r4, #1
 80005c0:	bf28      	it	cs
 80005c2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005c6:	d2e9      	bcs.n	800059c <__adddf3+0x10c>
 80005c8:	f091 0f00 	teq	r1, #0
 80005cc:	bf04      	itt	eq
 80005ce:	4601      	moveq	r1, r0
 80005d0:	2000      	moveq	r0, #0
 80005d2:	fab1 f381 	clz	r3, r1
 80005d6:	bf08      	it	eq
 80005d8:	3320      	addeq	r3, #32
 80005da:	f1a3 030b 	sub.w	r3, r3, #11
 80005de:	f1b3 0220 	subs.w	r2, r3, #32
 80005e2:	da0c      	bge.n	80005fe <__adddf3+0x16e>
 80005e4:	320c      	adds	r2, #12
 80005e6:	dd08      	ble.n	80005fa <__adddf3+0x16a>
 80005e8:	f102 0c14 	add.w	ip, r2, #20
 80005ec:	f1c2 020c 	rsb	r2, r2, #12
 80005f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005f4:	fa21 f102 	lsr.w	r1, r1, r2
 80005f8:	e00c      	b.n	8000614 <__adddf3+0x184>
 80005fa:	f102 0214 	add.w	r2, r2, #20
 80005fe:	bfd8      	it	le
 8000600:	f1c2 0c20 	rsble	ip, r2, #32
 8000604:	fa01 f102 	lsl.w	r1, r1, r2
 8000608:	fa20 fc0c 	lsr.w	ip, r0, ip
 800060c:	bfdc      	itt	le
 800060e:	ea41 010c 	orrle.w	r1, r1, ip
 8000612:	4090      	lslle	r0, r2
 8000614:	1ae4      	subs	r4, r4, r3
 8000616:	bfa2      	ittt	ge
 8000618:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800061c:	4329      	orrge	r1, r5
 800061e:	bd30      	popge	{r4, r5, pc}
 8000620:	ea6f 0404 	mvn.w	r4, r4
 8000624:	3c1f      	subs	r4, #31
 8000626:	da1c      	bge.n	8000662 <__adddf3+0x1d2>
 8000628:	340c      	adds	r4, #12
 800062a:	dc0e      	bgt.n	800064a <__adddf3+0x1ba>
 800062c:	f104 0414 	add.w	r4, r4, #20
 8000630:	f1c4 0220 	rsb	r2, r4, #32
 8000634:	fa20 f004 	lsr.w	r0, r0, r4
 8000638:	fa01 f302 	lsl.w	r3, r1, r2
 800063c:	ea40 0003 	orr.w	r0, r0, r3
 8000640:	fa21 f304 	lsr.w	r3, r1, r4
 8000644:	ea45 0103 	orr.w	r1, r5, r3
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	f1c4 040c 	rsb	r4, r4, #12
 800064e:	f1c4 0220 	rsb	r2, r4, #32
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 f304 	lsl.w	r3, r1, r4
 800065a:	ea40 0003 	orr.w	r0, r0, r3
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	fa21 f004 	lsr.w	r0, r1, r4
 8000666:	4629      	mov	r1, r5
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	f094 0f00 	teq	r4, #0
 800066e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000672:	bf06      	itte	eq
 8000674:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000678:	3401      	addeq	r4, #1
 800067a:	3d01      	subne	r5, #1
 800067c:	e74e      	b.n	800051c <__adddf3+0x8c>
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf18      	it	ne
 8000684:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000688:	d029      	beq.n	80006de <__adddf3+0x24e>
 800068a:	ea94 0f05 	teq	r4, r5
 800068e:	bf08      	it	eq
 8000690:	ea90 0f02 	teqeq	r0, r2
 8000694:	d005      	beq.n	80006a2 <__adddf3+0x212>
 8000696:	ea54 0c00 	orrs.w	ip, r4, r0
 800069a:	bf04      	itt	eq
 800069c:	4619      	moveq	r1, r3
 800069e:	4610      	moveq	r0, r2
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	ea91 0f03 	teq	r1, r3
 80006a6:	bf1e      	ittt	ne
 80006a8:	2100      	movne	r1, #0
 80006aa:	2000      	movne	r0, #0
 80006ac:	bd30      	popne	{r4, r5, pc}
 80006ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006b2:	d105      	bne.n	80006c0 <__adddf3+0x230>
 80006b4:	0040      	lsls	r0, r0, #1
 80006b6:	4149      	adcs	r1, r1
 80006b8:	bf28      	it	cs
 80006ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006c4:	bf3c      	itt	cc
 80006c6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ca:	bd30      	popcc	{r4, r5, pc}
 80006cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006d0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006d4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf1a      	itte	ne
 80006e4:	4619      	movne	r1, r3
 80006e6:	4610      	movne	r0, r2
 80006e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ec:	bf1c      	itt	ne
 80006ee:	460b      	movne	r3, r1
 80006f0:	4602      	movne	r2, r0
 80006f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006f6:	bf06      	itte	eq
 80006f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006fc:	ea91 0f03 	teqeq	r1, r3
 8000700:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	bf00      	nop

08000708 <__aeabi_ui2d>:
 8000708:	f090 0f00 	teq	r0, #0
 800070c:	bf04      	itt	eq
 800070e:	2100      	moveq	r1, #0
 8000710:	4770      	bxeq	lr
 8000712:	b530      	push	{r4, r5, lr}
 8000714:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000718:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800071c:	f04f 0500 	mov.w	r5, #0
 8000720:	f04f 0100 	mov.w	r1, #0
 8000724:	e750      	b.n	80005c8 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_i2d>:
 8000728:	f090 0f00 	teq	r0, #0
 800072c:	bf04      	itt	eq
 800072e:	2100      	moveq	r1, #0
 8000730:	4770      	bxeq	lr
 8000732:	b530      	push	{r4, r5, lr}
 8000734:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000738:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800073c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000740:	bf48      	it	mi
 8000742:	4240      	negmi	r0, r0
 8000744:	f04f 0100 	mov.w	r1, #0
 8000748:	e73e      	b.n	80005c8 <__adddf3+0x138>
 800074a:	bf00      	nop

0800074c <__aeabi_f2d>:
 800074c:	0042      	lsls	r2, r0, #1
 800074e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000752:	ea4f 0131 	mov.w	r1, r1, rrx
 8000756:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800075a:	bf1f      	itttt	ne
 800075c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000760:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000764:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000768:	4770      	bxne	lr
 800076a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800076e:	bf08      	it	eq
 8000770:	4770      	bxeq	lr
 8000772:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000776:	bf04      	itt	eq
 8000778:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800077c:	4770      	bxeq	lr
 800077e:	b530      	push	{r4, r5, lr}
 8000780:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000784:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000788:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	e71c      	b.n	80005c8 <__adddf3+0x138>
 800078e:	bf00      	nop

08000790 <__aeabi_ul2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f04f 0500 	mov.w	r5, #0
 800079e:	e00a      	b.n	80007b6 <__aeabi_l2d+0x16>

080007a0 <__aeabi_l2d>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	b530      	push	{r4, r5, lr}
 80007aa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ae:	d502      	bpl.n	80007b6 <__aeabi_l2d+0x16>
 80007b0:	4240      	negs	r0, r0
 80007b2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007ba:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007be:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007c2:	f43f aed8 	beq.w	8000576 <__adddf3+0xe6>
 80007c6:	f04f 0203 	mov.w	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007d6:	bf18      	it	ne
 80007d8:	3203      	addne	r2, #3
 80007da:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007de:	f1c2 0320 	rsb	r3, r2, #32
 80007e2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007e6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ea:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ee:	ea40 000e 	orr.w	r0, r0, lr
 80007f2:	fa21 f102 	lsr.w	r1, r1, r2
 80007f6:	4414      	add	r4, r2
 80007f8:	e6bd      	b.n	8000576 <__adddf3+0xe6>
 80007fa:	bf00      	nop

080007fc <__gedf2>:
 80007fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000800:	e006      	b.n	8000810 <__cmpdf2+0x4>
 8000802:	bf00      	nop

08000804 <__ledf2>:
 8000804:	f04f 0c01 	mov.w	ip, #1
 8000808:	e002      	b.n	8000810 <__cmpdf2+0x4>
 800080a:	bf00      	nop

0800080c <__cmpdf2>:
 800080c:	f04f 0c01 	mov.w	ip, #1
 8000810:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800081c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000826:	d01b      	beq.n	8000860 <__cmpdf2+0x54>
 8000828:	b001      	add	sp, #4
 800082a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800082e:	bf0c      	ite	eq
 8000830:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000834:	ea91 0f03 	teqne	r1, r3
 8000838:	bf02      	ittt	eq
 800083a:	ea90 0f02 	teqeq	r0, r2
 800083e:	2000      	moveq	r0, #0
 8000840:	4770      	bxeq	lr
 8000842:	f110 0f00 	cmn.w	r0, #0
 8000846:	ea91 0f03 	teq	r1, r3
 800084a:	bf58      	it	pl
 800084c:	4299      	cmppl	r1, r3
 800084e:	bf08      	it	eq
 8000850:	4290      	cmpeq	r0, r2
 8000852:	bf2c      	ite	cs
 8000854:	17d8      	asrcs	r0, r3, #31
 8000856:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800085a:	f040 0001 	orr.w	r0, r0, #1
 800085e:	4770      	bx	lr
 8000860:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000864:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000868:	d102      	bne.n	8000870 <__cmpdf2+0x64>
 800086a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800086e:	d107      	bne.n	8000880 <__cmpdf2+0x74>
 8000870:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000874:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000878:	d1d6      	bne.n	8000828 <__cmpdf2+0x1c>
 800087a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800087e:	d0d3      	beq.n	8000828 <__cmpdf2+0x1c>
 8000880:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop

08000888 <__aeabi_cdrcmple>:
 8000888:	4684      	mov	ip, r0
 800088a:	4610      	mov	r0, r2
 800088c:	4662      	mov	r2, ip
 800088e:	468c      	mov	ip, r1
 8000890:	4619      	mov	r1, r3
 8000892:	4663      	mov	r3, ip
 8000894:	e000      	b.n	8000898 <__aeabi_cdcmpeq>
 8000896:	bf00      	nop

08000898 <__aeabi_cdcmpeq>:
 8000898:	b501      	push	{r0, lr}
 800089a:	f7ff ffb7 	bl	800080c <__cmpdf2>
 800089e:	2800      	cmp	r0, #0
 80008a0:	bf48      	it	mi
 80008a2:	f110 0f00 	cmnmi.w	r0, #0
 80008a6:	bd01      	pop	{r0, pc}

080008a8 <__aeabi_dcmpeq>:
 80008a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008ac:	f7ff fff4 	bl	8000898 <__aeabi_cdcmpeq>
 80008b0:	bf0c      	ite	eq
 80008b2:	2001      	moveq	r0, #1
 80008b4:	2000      	movne	r0, #0
 80008b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ba:	bf00      	nop

080008bc <__aeabi_dcmplt>:
 80008bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008c0:	f7ff ffea 	bl	8000898 <__aeabi_cdcmpeq>
 80008c4:	bf34      	ite	cc
 80008c6:	2001      	movcc	r0, #1
 80008c8:	2000      	movcs	r0, #0
 80008ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ce:	bf00      	nop

080008d0 <__aeabi_dcmple>:
 80008d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d4:	f7ff ffe0 	bl	8000898 <__aeabi_cdcmpeq>
 80008d8:	bf94      	ite	ls
 80008da:	2001      	movls	r0, #1
 80008dc:	2000      	movhi	r0, #0
 80008de:	f85d fb08 	ldr.w	pc, [sp], #8
 80008e2:	bf00      	nop

080008e4 <__aeabi_dcmpge>:
 80008e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e8:	f7ff ffce 	bl	8000888 <__aeabi_cdrcmple>
 80008ec:	bf94      	ite	ls
 80008ee:	2001      	movls	r0, #1
 80008f0:	2000      	movhi	r0, #0
 80008f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f6:	bf00      	nop

080008f8 <__aeabi_dcmpgt>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff ffc4 	bl	8000888 <__aeabi_cdrcmple>
 8000900:	bf34      	ite	cc
 8000902:	2001      	movcc	r0, #1
 8000904:	2000      	movcs	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_d2iz>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000914:	d215      	bcs.n	8000942 <__aeabi_d2iz+0x36>
 8000916:	d511      	bpl.n	800093c <__aeabi_d2iz+0x30>
 8000918:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800091c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000920:	d912      	bls.n	8000948 <__aeabi_d2iz+0x3c>
 8000922:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000926:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800092a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800092e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000932:	fa23 f002 	lsr.w	r0, r3, r2
 8000936:	bf18      	it	ne
 8000938:	4240      	negne	r0, r0
 800093a:	4770      	bx	lr
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	4770      	bx	lr
 8000942:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000946:	d105      	bne.n	8000954 <__aeabi_d2iz+0x48>
 8000948:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800094c:	bf08      	it	eq
 800094e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000952:	4770      	bx	lr
 8000954:	f04f 0000 	mov.w	r0, #0
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b96a 	b.w	8000c48 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9d08      	ldr	r5, [sp, #32]
 8000992:	460c      	mov	r4, r1
 8000994:	2b00      	cmp	r3, #0
 8000996:	d14e      	bne.n	8000a36 <__udivmoddi4+0xaa>
 8000998:	4694      	mov	ip, r2
 800099a:	458c      	cmp	ip, r1
 800099c:	4686      	mov	lr, r0
 800099e:	fab2 f282 	clz	r2, r2
 80009a2:	d962      	bls.n	8000a6a <__udivmoddi4+0xde>
 80009a4:	b14a      	cbz	r2, 80009ba <__udivmoddi4+0x2e>
 80009a6:	f1c2 0320 	rsb	r3, r2, #32
 80009aa:	4091      	lsls	r1, r2
 80009ac:	fa20 f303 	lsr.w	r3, r0, r3
 80009b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b4:	4319      	orrs	r1, r3
 80009b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80009ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009be:	fa1f f68c 	uxth.w	r6, ip
 80009c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80009c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009ca:	fb07 1114 	mls	r1, r7, r4, r1
 80009ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009d2:	fb04 f106 	mul.w	r1, r4, r6
 80009d6:	4299      	cmp	r1, r3
 80009d8:	d90a      	bls.n	80009f0 <__udivmoddi4+0x64>
 80009da:	eb1c 0303 	adds.w	r3, ip, r3
 80009de:	f104 30ff 	add.w	r0, r4, #4294967295
 80009e2:	f080 8112 	bcs.w	8000c0a <__udivmoddi4+0x27e>
 80009e6:	4299      	cmp	r1, r3
 80009e8:	f240 810f 	bls.w	8000c0a <__udivmoddi4+0x27e>
 80009ec:	3c02      	subs	r4, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	1a59      	subs	r1, r3, r1
 80009f2:	fa1f f38e 	uxth.w	r3, lr
 80009f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80009fa:	fb07 1110 	mls	r1, r7, r0, r1
 80009fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a02:	fb00 f606 	mul.w	r6, r0, r6
 8000a06:	429e      	cmp	r6, r3
 8000a08:	d90a      	bls.n	8000a20 <__udivmoddi4+0x94>
 8000a0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a12:	f080 80fc 	bcs.w	8000c0e <__udivmoddi4+0x282>
 8000a16:	429e      	cmp	r6, r3
 8000a18:	f240 80f9 	bls.w	8000c0e <__udivmoddi4+0x282>
 8000a1c:	4463      	add	r3, ip
 8000a1e:	3802      	subs	r0, #2
 8000a20:	1b9b      	subs	r3, r3, r6
 8000a22:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a26:	2100      	movs	r1, #0
 8000a28:	b11d      	cbz	r5, 8000a32 <__udivmoddi4+0xa6>
 8000a2a:	40d3      	lsrs	r3, r2
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	428b      	cmp	r3, r1
 8000a38:	d905      	bls.n	8000a46 <__udivmoddi4+0xba>
 8000a3a:	b10d      	cbz	r5, 8000a40 <__udivmoddi4+0xb4>
 8000a3c:	e9c5 0100 	strd	r0, r1, [r5]
 8000a40:	2100      	movs	r1, #0
 8000a42:	4608      	mov	r0, r1
 8000a44:	e7f5      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a46:	fab3 f183 	clz	r1, r3
 8000a4a:	2900      	cmp	r1, #0
 8000a4c:	d146      	bne.n	8000adc <__udivmoddi4+0x150>
 8000a4e:	42a3      	cmp	r3, r4
 8000a50:	d302      	bcc.n	8000a58 <__udivmoddi4+0xcc>
 8000a52:	4290      	cmp	r0, r2
 8000a54:	f0c0 80f0 	bcc.w	8000c38 <__udivmoddi4+0x2ac>
 8000a58:	1a86      	subs	r6, r0, r2
 8000a5a:	eb64 0303 	sbc.w	r3, r4, r3
 8000a5e:	2001      	movs	r0, #1
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d0e6      	beq.n	8000a32 <__udivmoddi4+0xa6>
 8000a64:	e9c5 6300 	strd	r6, r3, [r5]
 8000a68:	e7e3      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	f040 8090 	bne.w	8000b90 <__udivmoddi4+0x204>
 8000a70:	eba1 040c 	sub.w	r4, r1, ip
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	fa1f f78c 	uxth.w	r7, ip
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000a82:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a86:	fb08 4416 	mls	r4, r8, r6, r4
 8000a8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a8e:	fb07 f006 	mul.w	r0, r7, r6
 8000a92:	4298      	cmp	r0, r3
 8000a94:	d908      	bls.n	8000aa8 <__udivmoddi4+0x11c>
 8000a96:	eb1c 0303 	adds.w	r3, ip, r3
 8000a9a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a9e:	d202      	bcs.n	8000aa6 <__udivmoddi4+0x11a>
 8000aa0:	4298      	cmp	r0, r3
 8000aa2:	f200 80cd 	bhi.w	8000c40 <__udivmoddi4+0x2b4>
 8000aa6:	4626      	mov	r6, r4
 8000aa8:	1a1c      	subs	r4, r3, r0
 8000aaa:	fa1f f38e 	uxth.w	r3, lr
 8000aae:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ab2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ab6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aba:	fb00 f707 	mul.w	r7, r0, r7
 8000abe:	429f      	cmp	r7, r3
 8000ac0:	d908      	bls.n	8000ad4 <__udivmoddi4+0x148>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000aca:	d202      	bcs.n	8000ad2 <__udivmoddi4+0x146>
 8000acc:	429f      	cmp	r7, r3
 8000ace:	f200 80b0 	bhi.w	8000c32 <__udivmoddi4+0x2a6>
 8000ad2:	4620      	mov	r0, r4
 8000ad4:	1bdb      	subs	r3, r3, r7
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	e7a5      	b.n	8000a28 <__udivmoddi4+0x9c>
 8000adc:	f1c1 0620 	rsb	r6, r1, #32
 8000ae0:	408b      	lsls	r3, r1
 8000ae2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ae6:	431f      	orrs	r7, r3
 8000ae8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000aec:	fa04 f301 	lsl.w	r3, r4, r1
 8000af0:	ea43 030c 	orr.w	r3, r3, ip
 8000af4:	40f4      	lsrs	r4, r6
 8000af6:	fa00 f801 	lsl.w	r8, r0, r1
 8000afa:	0c38      	lsrs	r0, r7, #16
 8000afc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b00:	fbb4 fef0 	udiv	lr, r4, r0
 8000b04:	fa1f fc87 	uxth.w	ip, r7
 8000b08:	fb00 441e 	mls	r4, r0, lr, r4
 8000b0c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b10:	fb0e f90c 	mul.w	r9, lr, ip
 8000b14:	45a1      	cmp	r9, r4
 8000b16:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1a:	d90a      	bls.n	8000b32 <__udivmoddi4+0x1a6>
 8000b1c:	193c      	adds	r4, r7, r4
 8000b1e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b22:	f080 8084 	bcs.w	8000c2e <__udivmoddi4+0x2a2>
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	f240 8081 	bls.w	8000c2e <__udivmoddi4+0x2a2>
 8000b2c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b30:	443c      	add	r4, r7
 8000b32:	eba4 0409 	sub.w	r4, r4, r9
 8000b36:	fa1f f983 	uxth.w	r9, r3
 8000b3a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b3e:	fb00 4413 	mls	r4, r0, r3, r4
 8000b42:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b46:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b4a:	45a4      	cmp	ip, r4
 8000b4c:	d907      	bls.n	8000b5e <__udivmoddi4+0x1d2>
 8000b4e:	193c      	adds	r4, r7, r4
 8000b50:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b54:	d267      	bcs.n	8000c26 <__udivmoddi4+0x29a>
 8000b56:	45a4      	cmp	ip, r4
 8000b58:	d965      	bls.n	8000c26 <__udivmoddi4+0x29a>
 8000b5a:	3b02      	subs	r3, #2
 8000b5c:	443c      	add	r4, r7
 8000b5e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b62:	fba0 9302 	umull	r9, r3, r0, r2
 8000b66:	eba4 040c 	sub.w	r4, r4, ip
 8000b6a:	429c      	cmp	r4, r3
 8000b6c:	46ce      	mov	lr, r9
 8000b6e:	469c      	mov	ip, r3
 8000b70:	d351      	bcc.n	8000c16 <__udivmoddi4+0x28a>
 8000b72:	d04e      	beq.n	8000c12 <__udivmoddi4+0x286>
 8000b74:	b155      	cbz	r5, 8000b8c <__udivmoddi4+0x200>
 8000b76:	ebb8 030e 	subs.w	r3, r8, lr
 8000b7a:	eb64 040c 	sbc.w	r4, r4, ip
 8000b7e:	fa04 f606 	lsl.w	r6, r4, r6
 8000b82:	40cb      	lsrs	r3, r1
 8000b84:	431e      	orrs	r6, r3
 8000b86:	40cc      	lsrs	r4, r1
 8000b88:	e9c5 6400 	strd	r6, r4, [r5]
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e750      	b.n	8000a32 <__udivmoddi4+0xa6>
 8000b90:	f1c2 0320 	rsb	r3, r2, #32
 8000b94:	fa20 f103 	lsr.w	r1, r0, r3
 8000b98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b9c:	fa24 f303 	lsr.w	r3, r4, r3
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	430c      	orrs	r4, r1
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bac:	fa1f f78c 	uxth.w	r7, ip
 8000bb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb4:	fb08 3110 	mls	r1, r8, r0, r3
 8000bb8:	0c23      	lsrs	r3, r4, #16
 8000bba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bbe:	fb00 f107 	mul.w	r1, r0, r7
 8000bc2:	4299      	cmp	r1, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x24c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f100 36ff 	add.w	r6, r0, #4294967295
 8000bce:	d22c      	bcs.n	8000c2a <__udivmoddi4+0x29e>
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d92a      	bls.n	8000c2a <__udivmoddi4+0x29e>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	4463      	add	r3, ip
 8000bd8:	1a5b      	subs	r3, r3, r1
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000be0:	fb08 3311 	mls	r3, r8, r1, r3
 8000be4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be8:	fb01 f307 	mul.w	r3, r1, r7
 8000bec:	42a3      	cmp	r3, r4
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x276>
 8000bf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bf4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000bf8:	d213      	bcs.n	8000c22 <__udivmoddi4+0x296>
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	d911      	bls.n	8000c22 <__udivmoddi4+0x296>
 8000bfe:	3902      	subs	r1, #2
 8000c00:	4464      	add	r4, ip
 8000c02:	1ae4      	subs	r4, r4, r3
 8000c04:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c08:	e739      	b.n	8000a7e <__udivmoddi4+0xf2>
 8000c0a:	4604      	mov	r4, r0
 8000c0c:	e6f0      	b.n	80009f0 <__udivmoddi4+0x64>
 8000c0e:	4608      	mov	r0, r1
 8000c10:	e706      	b.n	8000a20 <__udivmoddi4+0x94>
 8000c12:	45c8      	cmp	r8, r9
 8000c14:	d2ae      	bcs.n	8000b74 <__udivmoddi4+0x1e8>
 8000c16:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c1a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c1e:	3801      	subs	r0, #1
 8000c20:	e7a8      	b.n	8000b74 <__udivmoddi4+0x1e8>
 8000c22:	4631      	mov	r1, r6
 8000c24:	e7ed      	b.n	8000c02 <__udivmoddi4+0x276>
 8000c26:	4603      	mov	r3, r0
 8000c28:	e799      	b.n	8000b5e <__udivmoddi4+0x1d2>
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	e7d4      	b.n	8000bd8 <__udivmoddi4+0x24c>
 8000c2e:	46d6      	mov	lr, sl
 8000c30:	e77f      	b.n	8000b32 <__udivmoddi4+0x1a6>
 8000c32:	4463      	add	r3, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	e74d      	b.n	8000ad4 <__udivmoddi4+0x148>
 8000c38:	4606      	mov	r6, r0
 8000c3a:	4623      	mov	r3, r4
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	e70f      	b.n	8000a60 <__udivmoddi4+0xd4>
 8000c40:	3e02      	subs	r6, #2
 8000c42:	4463      	add	r3, ip
 8000c44:	e730      	b.n	8000aa8 <__udivmoddi4+0x11c>
 8000c46:	bf00      	nop

08000c48 <__aeabi_idiv0>:
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d013      	beq.n	8000c8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000c64:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000c6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d00b      	beq.n	8000c8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000c74:	e000      	b.n	8000c78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000c76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000c78:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f9      	beq.n	8000c76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000c82:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000c8c:	687b      	ldr	r3, [r7, #4]
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <_write>:
bool exerciseEnded = false;
bool fin_seance = false;
int validMovements = 0;
int invalidMovements = 0;

int _write(int file, char *ptr, int len) {
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b086      	sub	sp, #24
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	60f8      	str	r0, [r7, #12]
 8000ca2:	60b9      	str	r1, [r7, #8]
 8000ca4:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	e009      	b.n	8000cc0 <_write+0x26>
		ITM_SendChar(*ptr++);
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ffc9 	bl	8000c4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697a      	ldr	r2, [r7, #20]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	dbf1      	blt.n	8000cac <_write+0x12>
	}
	return len;
 8000cc8:	687b      	ldr	r3, [r7, #4]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3718      	adds	r7, #24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_MEMS_Init>:

void MX_MEMS_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	Init_Sensors();
 8000cd8:	f000 f92c 	bl	8000f34 <Init_Sensors>
	CalibrateSensors();
 8000cdc:	f000 f978 	bl	8000fd0 <CalibrateSensors>
	// Initialisation des structures BenchRep
	referenceMovement.maxAmplitudeZ = 0;
 8000ce0:	4b09      	ldr	r3, [pc, #36]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	referenceMovement.minAmplitudeZ = 0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	605a      	str	r2, [r3, #4]
	referenceMovement.duration = 0;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <MX_MEMS_Init+0x34>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]

	currentMovement.maxAmplitudeZ = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
	currentMovement.minAmplitudeZ = 0;
 8000cf8:	4b04      	ldr	r3, [pc, #16]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	605a      	str	r2, [r3, #4]
	currentMovement.duration = 0;
 8000cfe:	4b03      	ldr	r3, [pc, #12]	@ (8000d0c <MX_MEMS_Init+0x38>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000204 	.word	0x20000204
 8000d0c:	20000214 	.word	0x20000214

08000d10 <MX_MEMS_Process>:


void MX_MEMS_Process() {
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af06      	add	r7, sp, #24
    switch (etat) {
 8000d16:	4b73      	ldr	r3, [pc, #460]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	f200 80de 	bhi.w	8000edc <MX_MEMS_Process+0x1cc>
 8000d20:	a201      	add	r2, pc, #4	@ (adr r2, 8000d28 <MX_MEMS_Process+0x18>)
 8000d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d26:	bf00      	nop
 8000d28:	08000d41 	.word	0x08000d41
 8000d2c:	08000d65 	.word	0x08000d65
 8000d30:	08000d83 	.word	0x08000d83
 8000d34:	08000dbf 	.word	0x08000dbf
 8000d38:	08000e2d 	.word	0x08000e2d
 8000d3c:	08000eb7 	.word	0x08000eb7
        case INITIALISATION:
            // Initialisation des variables
            validMovements = 0;
 8000d40:	4b69      	ldr	r3, [pc, #420]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
            invalidMovements = 0;
 8000d46:	4b69      	ldr	r3, [pc, #420]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
            MX_MEMS_Init();
 8000d4c:	f7ff ffc2 	bl	8000cd4 <MX_MEMS_Init>
            isExerciseStarted = false;
 8000d50:	4b67      	ldr	r3, [pc, #412]	@ (8000ef0 <MX_MEMS_Process+0x1e0>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	701a      	strb	r2, [r3, #0]
            exerciseEnded = false;
 8000d56:	4b67      	ldr	r3, [pc, #412]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	701a      	strb	r2, [r3, #0]
            etat = ATTENTE_DEMARRAGE;
 8000d5c:	4b61      	ldr	r3, [pc, #388]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
            break;
 8000d62:	e0bb      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case ATTENTE_DEMARRAGE:
            // Attente du signal pour démarrer un nouvel exercice
            if (!isExerciseStarted) {
 8000d64:	4b62      	ldr	r3, [pc, #392]	@ (8000ef0 <MX_MEMS_Process+0x1e0>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f083 0301 	eor.w	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80af 	beq.w	8000ed2 <MX_MEMS_Process+0x1c2>
                printf("Nouvel exercice détecté, préparation à l'enregistrement...\n");
 8000d74:	4860      	ldr	r0, [pc, #384]	@ (8000ef8 <MX_MEMS_Process+0x1e8>)
 8000d76:	f011 fb95 	bl	80124a4 <puts>
                etat = ENREGISTREMENT_REFERENCE;
 8000d7a:	4b5a      	ldr	r3, [pc, #360]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000d7c:	2202      	movs	r2, #2
 8000d7e:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000d80:	e0a7      	b.n	8000ed2 <MX_MEMS_Process+0x1c2>

        case ENREGISTREMENT_REFERENCE:
            // Enregistrement du mouvement de référence
            printf("Enregistrement du mouvement...\n");
 8000d82:	485e      	ldr	r0, [pc, #376]	@ (8000efc <MX_MEMS_Process+0x1ec>)
 8000d84:	f011 fb8e 	bl	80124a4 <puts>
            if (!recordBenchRep(&referenceMovement)) {
 8000d88:	485d      	ldr	r0, [pc, #372]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000d8a:	f000 f9b9 	bl	8001100 <recordBenchRep>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	f083 0301 	eor.w	r3, r3, #1
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d008      	beq.n	8000dac <MX_MEMS_Process+0x9c>
                printf("Aucun mouvement de référence détecté, fin de la tentative.\n");
 8000d9a:	485a      	ldr	r0, [pc, #360]	@ (8000f04 <MX_MEMS_Process+0x1f4>)
 8000d9c:	f011 fb82 	bl	80124a4 <puts>
                MVT_REF_vide();
 8000da0:	f00f fb34 	bl	801040c <MVT_REF_vide>
                etat = INITIALISATION;
 8000da4:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Mouvement de référence enregistré. En attente de validation...\n");
                MVT_REF_fin();
                etat = VALIDATION_REFERENCE;
            }
            break;
 8000daa:	e097      	b.n	8000edc <MX_MEMS_Process+0x1cc>
                printf("Mouvement de référence enregistré. En attente de validation...\n");
 8000dac:	4856      	ldr	r0, [pc, #344]	@ (8000f08 <MX_MEMS_Process+0x1f8>)
 8000dae:	f011 fb79 	bl	80124a4 <puts>
                MVT_REF_fin();
 8000db2:	f00f fb25 	bl	8010400 <MVT_REF_fin>
                etat = VALIDATION_REFERENCE;
 8000db6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000db8:	2203      	movs	r2, #3
 8000dba:	701a      	strb	r2, [r3, #0]
            break;
 8000dbc:	e08e      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case VALIDATION_REFERENCE:
            // Validation du mouvement de référence
            printf("Enregistrement du mouvement pour validation...\n");
 8000dbe:	4853      	ldr	r0, [pc, #332]	@ (8000f0c <MX_MEMS_Process+0x1fc>)
 8000dc0:	f011 fb70 	bl	80124a4 <puts>
            if (!recordBenchRep(&currentMovement)) {
 8000dc4:	4852      	ldr	r0, [pc, #328]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000dc6:	f000 f99b 	bl	8001100 <recordBenchRep>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	f083 0301 	eor.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d008      	beq.n	8000de8 <MX_MEMS_Process+0xd8>
                printf("Aucun mouvement détecté pour validation, veuillez réessayer.\n");
 8000dd6:	484f      	ldr	r0, [pc, #316]	@ (8000f14 <MX_MEMS_Process+0x204>)
 8000dd8:	f011 fb64 	bl	80124a4 <puts>
                MVT_REF_validation_vide();
 8000ddc:	f00f fb28 	bl	8010430 <MVT_REF_validation_vide>
                etat = ENREGISTREMENT_REFERENCE;
 8000de0:	4b40      	ldr	r3, [pc, #256]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000de2:	2202      	movs	r2, #2
 8000de4:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
                MVT_REF_validation_fail();
                etat = ENREGISTREMENT_REFERENCE;
            }
            break;
 8000de6:	e079      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000de8:	4d45      	ldr	r5, [pc, #276]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000dea:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000dee:	9304      	str	r3, [sp, #16]
 8000df0:	4b47      	ldr	r3, [pc, #284]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000df2:	466c      	mov	r4, sp
 8000df4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000df6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000dfa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dfe:	f000 fa4f 	bl	80012a0 <compareBenchReps>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d008      	beq.n	8000e1a <MX_MEMS_Process+0x10a>
                printf("Validation réussie. Commencement des répétitions.\n");
 8000e08:	4843      	ldr	r0, [pc, #268]	@ (8000f18 <MX_MEMS_Process+0x208>)
 8000e0a:	f011 fb4b 	bl	80124a4 <puts>
                MVT_REF_validation_succes();
 8000e0e:	f00f fb03 	bl	8010418 <MVT_REF_validation_succes>
                etat = ENREGISTREMENT_REPETITIONS;
 8000e12:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e14:	2204      	movs	r2, #4
 8000e16:	701a      	strb	r2, [r3, #0]
            break;
 8000e18:	e060      	b.n	8000edc <MX_MEMS_Process+0x1cc>
                printf("Validation échouée, veuillez réenregistrer le mouvement de référence.\n");
 8000e1a:	4840      	ldr	r0, [pc, #256]	@ (8000f1c <MX_MEMS_Process+0x20c>)
 8000e1c:	f011 fb42 	bl	80124a4 <puts>
                MVT_REF_validation_fail();
 8000e20:	f00f fb00 	bl	8010424 <MVT_REF_validation_fail>
                etat = ENREGISTREMENT_REFERENCE;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	701a      	strb	r2, [r3, #0]
            break;
 8000e2a:	e057      	b.n	8000edc <MX_MEMS_Process+0x1cc>

        case ENREGISTREMENT_REPETITIONS:
            // Enregistrement des répétitions jusqu'à la fin de la série
            if (!exerciseEnded) {
 8000e2c:	4b31      	ldr	r3, [pc, #196]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	f083 0301 	eor.w	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d04d      	beq.n	8000ed6 <MX_MEMS_Process+0x1c6>
                printf("Enregistrement d'une nouvelle répétition...\n");
 8000e3a:	4839      	ldr	r0, [pc, #228]	@ (8000f20 <MX_MEMS_Process+0x210>)
 8000e3c:	f011 fb32 	bl	80124a4 <puts>
                if (!recordBenchRep(&currentMovement)) {
 8000e40:	4833      	ldr	r0, [pc, #204]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000e42:	f000 f95d 	bl	8001100 <recordBenchRep>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f083 0301 	eor.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d00b      	beq.n	8000e6a <MX_MEMS_Process+0x15a>
                    printf("Fin de la série détectée après une période d'inactivité.\n");
 8000e52:	4834      	ldr	r0, [pc, #208]	@ (8000f24 <MX_MEMS_Process+0x214>)
 8000e54:	f011 fb26 	bl	80124a4 <puts>
                    MVT_vide();
 8000e58:	f00f faf0 	bl	801043c <MVT_vide>
                    exerciseEnded = true;
 8000e5c:	4b25      	ldr	r3, [pc, #148]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
                    etat = ATTENTE_SERIE;
 8000e62:	4b20      	ldr	r3, [pc, #128]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000e64:	2205      	movs	r2, #5
 8000e66:	701a      	strb	r2, [r3, #0]
                    invalidMovements++;
                    printf("Répétition non valide.\n");
                    MVT_non_valide();
                }
            }
            break;
 8000e68:	e035      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>
                } else if (compareBenchReps(referenceMovement, currentMovement, TOLERANCE)) {
 8000e6a:	4d25      	ldr	r5, [pc, #148]	@ (8000f00 <MX_MEMS_Process+0x1f0>)
 8000e6c:	f44f 7316 	mov.w	r3, #600	@ 0x258
 8000e70:	9304      	str	r3, [sp, #16]
 8000e72:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <MX_MEMS_Process+0x200>)
 8000e74:	466c      	mov	r4, sp
 8000e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000e7c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e80:	f000 fa0e 	bl	80012a0 <compareBenchReps>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00a      	beq.n	8000ea0 <MX_MEMS_Process+0x190>
                    validMovements++;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a15      	ldr	r2, [pc, #84]	@ (8000ee8 <MX_MEMS_Process+0x1d8>)
 8000e92:	6013      	str	r3, [r2, #0]
                    printf("Répétition valide.\n");
 8000e94:	4824      	ldr	r0, [pc, #144]	@ (8000f28 <MX_MEMS_Process+0x218>)
 8000e96:	f011 fb05 	bl	80124a4 <puts>
                    MVT_valide();
 8000e9a:	f00f fad5 	bl	8010448 <MVT_valide>
            break;
 8000e9e:	e01a      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>
                    invalidMovements++;
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	4a11      	ldr	r2, [pc, #68]	@ (8000eec <MX_MEMS_Process+0x1dc>)
 8000ea8:	6013      	str	r3, [r2, #0]
                    printf("Répétition non valide.\n");
 8000eaa:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <MX_MEMS_Process+0x21c>)
 8000eac:	f011 fafa 	bl	80124a4 <puts>
                    MVT_non_valide();
 8000eb0:	f00f fad0 	bl	8010454 <MVT_non_valide>
            break;
 8000eb4:	e00f      	b.n	8000ed6 <MX_MEMS_Process+0x1c6>

        case ATTENTE_SERIE:
            // Attente d'une nouvelle série
            if (exerciseEnded) {
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d00d      	beq.n	8000eda <MX_MEMS_Process+0x1ca>
                printf("Prêt pour une nouvelle série.\n");
 8000ebe:	481c      	ldr	r0, [pc, #112]	@ (8000f30 <MX_MEMS_Process+0x220>)
 8000ec0:	f011 faf0 	bl	80124a4 <puts>
                exerciseEnded = false;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <MX_MEMS_Process+0x1e4>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	701a      	strb	r2, [r3, #0]
                etat = ENREGISTREMENT_REPETITIONS;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_MEMS_Process+0x1d4>)
 8000ecc:	2204      	movs	r2, #4
 8000ece:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ed0:	e003      	b.n	8000eda <MX_MEMS_Process+0x1ca>
            break;
 8000ed2:	bf00      	nop
 8000ed4:	e002      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            break;
 8000ed6:	bf00      	nop
 8000ed8:	e000      	b.n	8000edc <MX_MEMS_Process+0x1cc>
            break;
 8000eda:	bf00      	nop
    }
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	20000224 	.word	0x20000224
 8000ee8:	20000228 	.word	0x20000228
 8000eec:	2000022c 	.word	0x2000022c
 8000ef0:	20000225 	.word	0x20000225
 8000ef4:	20000226 	.word	0x20000226
 8000ef8:	0801334c 	.word	0x0801334c
 8000efc:	0801338c 	.word	0x0801338c
 8000f00:	20000204 	.word	0x20000204
 8000f04:	080133ac 	.word	0x080133ac
 8000f08:	080133ec 	.word	0x080133ec
 8000f0c:	08013430 	.word	0x08013430
 8000f10:	20000214 	.word	0x20000214
 8000f14:	08013460 	.word	0x08013460
 8000f18:	080134a0 	.word	0x080134a0
 8000f1c:	080134d8 	.word	0x080134d8
 8000f20:	08013524 	.word	0x08013524
 8000f24:	08013554 	.word	0x08013554
 8000f28:	08013594 	.word	0x08013594
 8000f2c:	080135ac 	.word	0x080135ac
 8000f30:	080135c8 	.word	0x080135c8

08000f34 <Init_Sensors>:


void Init_Sensors(void) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_Init();
 8000f38:	f001 fcb1 	bl	800289e <BSP_SENSOR_ACC_Init>
	BSP_SENSOR_GYR_Init();
 8000f3c:	f001 fcb7 	bl	80028ae <BSP_SENSOR_GYR_Init>

	BSP_SENSOR_ACC_SetOutputDataRate(ACC_ODR);
 8000f40:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8000f54 <Init_Sensors+0x20>
 8000f44:	f001 fcd5 	bl	80028f2 <BSP_SENSOR_ACC_SetOutputDataRate>
	BSP_SENSOR_ACC_SetFullScale(ACC_FS);
 8000f48:	2004      	movs	r0, #4
 8000f4a:	f001 fce1 	bl	8002910 <BSP_SENSOR_ACC_SetFullScale>
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	42480000 	.word	0x42480000

08000f58 <ReadSensorData>:

void ReadSensorData(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
	BSP_SENSOR_ACC_GetAxes(&AccValue);
 8000f5c:	4818      	ldr	r0, [pc, #96]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f5e:	f001 fcae 	bl	80028be <BSP_SENSOR_ACC_GetAxes>
	BSP_SENSOR_GYR_GetAxes(&GyrValue);
 8000f62:	4818      	ldr	r0, [pc, #96]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f64:	f001 fcb8 	bl	80028d8 <BSP_SENSOR_GYR_GetAxes>

	// Appliquer le décalage après la calibration
	AccValue.x -= AccOffset.x;
 8000f68:	4b15      	ldr	r3, [pc, #84]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b16      	ldr	r3, [pc, #88]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f74:	6013      	str	r3, [r2, #0]
	AccValue.y -= AccOffset.y;
 8000f76:	4b12      	ldr	r3, [pc, #72]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f78:	685a      	ldr	r2, [r3, #4]
 8000f7a:	4b13      	ldr	r3, [pc, #76]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f82:	6053      	str	r3, [r2, #4]
	AccValue.z -= AccOffset.z;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f86:	689a      	ldr	r2, [r3, #8]
 8000f88:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc8 <ReadSensorData+0x70>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8000fc0 <ReadSensorData+0x68>)
 8000f90:	6093      	str	r3, [r2, #8]

	GyrValue.x -= GyrOffset.x;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	4b0d      	ldr	r3, [pc, #52]	@ (8000fcc <ReadSensorData+0x74>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	4a09      	ldr	r2, [pc, #36]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000f9e:	6013      	str	r3, [r2, #0]
	GyrValue.y -= GyrOffset.y;
 8000fa0:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	4b09      	ldr	r3, [pc, #36]	@ (8000fcc <ReadSensorData+0x74>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fac:	6053      	str	r3, [r2, #4]
	GyrValue.z -= GyrOffset.z;
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	4b06      	ldr	r3, [pc, #24]	@ (8000fcc <ReadSensorData+0x74>)
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	4a02      	ldr	r2, [pc, #8]	@ (8000fc4 <ReadSensorData+0x6c>)
 8000fba:	6093      	str	r3, [r2, #8]
}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	200001d4 	.word	0x200001d4
 8000fc4:	200001e0 	.word	0x200001e0
 8000fc8:	200001ec 	.word	0x200001ec
 8000fcc:	200001f8 	.word	0x200001f8

08000fd0 <CalibrateSensors>:
	printf("Gyroscope [X: %ld, Y: %ld, Z: %ld]\n", (long) GyrValue.x,
			(long) GyrValue.y, (long) GyrValue.z);
	HAL_Delay(2000);
}

void CalibrateSensors(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	CalibrateAccelerometer();
 8000fd4:	f000 f804 	bl	8000fe0 <CalibrateAccelerometer>
	CalibrateGyroscope();
 8000fd8:	f000 f84a 	bl	8001070 <CalibrateGyroscope>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <CalibrateAccelerometer>:

void CalibrateAccelerometer(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
 8000fea:	2300      	movs	r3, #0
 8000fec:	61bb      	str	r3, [r7, #24]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	e015      	b.n	8001024 <CalibrateAccelerometer+0x44>
		BSP_SENSOR_ACC_GetAxes(&tempVal);
 8000ff8:	1d3b      	adds	r3, r7, #4
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f001 fc5f 	bl	80028be <BSP_SENSOR_ACC_GetAxes>
		sumX += tempVal.x;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69fa      	ldr	r2, [r7, #28]
 8001004:	4413      	add	r3, r2
 8001006:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4413      	add	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4413      	add	r3, r2
 8001016:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001018:	200a      	movs	r0, #10
 800101a:	f000 fdd7 	bl	8001bcc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	3301      	adds	r3, #1
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	2b63      	cmp	r3, #99	@ 0x63
 8001028:	dde6      	ble.n	8000ff8 <CalibrateAccelerometer+0x18>
	}

	AccOffset.x = sumX / CALIBRATION_SAMPLES;
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	4a0e      	ldr	r2, [pc, #56]	@ (8001068 <CalibrateAccelerometer+0x88>)
 800102e:	fb82 1203 	smull	r1, r2, r2, r3
 8001032:	1152      	asrs	r2, r2, #5
 8001034:	17db      	asrs	r3, r3, #31
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	4a0c      	ldr	r2, [pc, #48]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800103a:	6013      	str	r3, [r2, #0]
	AccOffset.y = sumY / CALIBRATION_SAMPLES;
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	4a0a      	ldr	r2, [pc, #40]	@ (8001068 <CalibrateAccelerometer+0x88>)
 8001040:	fb82 1203 	smull	r1, r2, r2, r3
 8001044:	1152      	asrs	r2, r2, #5
 8001046:	17db      	asrs	r3, r3, #31
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	4a08      	ldr	r2, [pc, #32]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800104c:	6053      	str	r3, [r2, #4]
	AccOffset.z = sumZ / CALIBRATION_SAMPLES;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	4a05      	ldr	r2, [pc, #20]	@ (8001068 <CalibrateAccelerometer+0x88>)
 8001052:	fb82 1203 	smull	r1, r2, r2, r3
 8001056:	1152      	asrs	r2, r2, #5
 8001058:	17db      	asrs	r3, r3, #31
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	4a03      	ldr	r2, [pc, #12]	@ (800106c <CalibrateAccelerometer+0x8c>)
 800105e:	6093      	str	r3, [r2, #8]
}
 8001060:	bf00      	nop
 8001062:	3720      	adds	r7, #32
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	51eb851f 	.word	0x51eb851f
 800106c:	200001ec 	.word	0x200001ec

08001070 <CalibrateGyroscope>:

void CalibrateGyroscope(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
	int sumX = 0, sumY = 0, sumZ = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
	MOTION_SENSOR_Axes_t tempVal;

	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	e015      	b.n	80010b4 <CalibrateGyroscope+0x44>
		BSP_SENSOR_GYR_GetAxes(&tempVal);
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	4618      	mov	r0, r3
 800108c:	f001 fc24 	bl	80028d8 <BSP_SENSOR_GYR_GetAxes>
		sumX += tempVal.x;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69fa      	ldr	r2, [r7, #28]
 8001094:	4413      	add	r3, r2
 8001096:	61fb      	str	r3, [r7, #28]
		sumY += tempVal.y;
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4413      	add	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
		sumZ += tempVal.z;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	697a      	ldr	r2, [r7, #20]
 80010a4:	4413      	add	r3, r2
 80010a6:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f000 fd8f 	bl	8001bcc <HAL_Delay>
	for (int i = 0; i < CALIBRATION_SAMPLES; i++) {
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	3301      	adds	r3, #1
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	2b63      	cmp	r3, #99	@ 0x63
 80010b8:	dde6      	ble.n	8001088 <CalibrateGyroscope+0x18>
	}

	GyrOffset.x = sumX / CALIBRATION_SAMPLES;
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	4a0e      	ldr	r2, [pc, #56]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010be:	fb82 1203 	smull	r1, r2, r2, r3
 80010c2:	1152      	asrs	r2, r2, #5
 80010c4:	17db      	asrs	r3, r3, #31
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	4a0c      	ldr	r2, [pc, #48]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010ca:	6013      	str	r3, [r2, #0]
	GyrOffset.y = sumY / CALIBRATION_SAMPLES;
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	4a0a      	ldr	r2, [pc, #40]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010d0:	fb82 1203 	smull	r1, r2, r2, r3
 80010d4:	1152      	asrs	r2, r2, #5
 80010d6:	17db      	asrs	r3, r3, #31
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010dc:	6053      	str	r3, [r2, #4]
	GyrOffset.z = sumZ / CALIBRATION_SAMPLES;
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <CalibrateGyroscope+0x88>)
 80010e2:	fb82 1203 	smull	r1, r2, r2, r3
 80010e6:	1152      	asrs	r2, r2, #5
 80010e8:	17db      	asrs	r3, r3, #31
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	4a03      	ldr	r2, [pc, #12]	@ (80010fc <CalibrateGyroscope+0x8c>)
 80010ee:	6093      	str	r3, [r2, #8]
}
 80010f0:	bf00      	nop
 80010f2:	3720      	adds	r7, #32
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	51eb851f 	.word	0x51eb851f
 80010fc:	200001f8 	.word	0x200001f8

08001100 <recordBenchRep>:

bool recordBenchRep(BenchRep *rep) {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    int maxValueZ = INT_MIN;
 8001108:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int minValueZ = INT_MAX;
 800110e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001112:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t startTime = HAL_GetTick();
 8001114:	f007 fa32 	bl	800857c <HAL_GetTick>
 8001118:	6278      	str	r0, [r7, #36]	@ 0x24
    uint32_t lastMovementTime = startTime;
 800111a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800111c:	623b      	str	r3, [r7, #32]
    uint32_t currentTime;
    bool movementDetected = false;
 800111e:	2300      	movs	r3, #0
 8001120:	77fb      	strb	r3, [r7, #31]
    bool isAscending = false; // Initialisation différée
 8001122:	2300      	movs	r3, #0
 8001124:	77bb      	strb	r3, [r7, #30]
    int changeOfDirectionCount = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
    bool directionDetermined = false;
 800112a:	2300      	movs	r3, #0
 800112c:	75fb      	strb	r3, [r7, #23]
    uint32_t inactivityStartTime = HAL_GetTick(); // Pour détecter l'inactivité initiale
 800112e:	f007 fa25 	bl	800857c <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]



    while (true) {
        ReadSensorData();
 8001134:	f7ff ff10 	bl	8000f58 <ReadSensorData>


        // Détecter l'inactivité initiale
        if (!movementDetected && (HAL_GetTick() - inactivityStartTime > 15000)) {
 8001138:	7ffb      	ldrb	r3, [r7, #31]
 800113a:	f083 0301 	eor.w	r3, r3, #1
 800113e:	b2db      	uxtb	r3, r3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d00d      	beq.n	8001160 <recordBenchRep+0x60>
 8001144:	f007 fa1a 	bl	800857c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8001152:	4293      	cmp	r3, r2
 8001154:	d904      	bls.n	8001160 <recordBenchRep+0x60>
            printf("Aucun mouvement détecté pendant plus de 15 secondes, fin de la tentative.\n");
 8001156:	484e      	ldr	r0, [pc, #312]	@ (8001290 <recordBenchRep+0x190>)
 8001158:	f011 f9a4 	bl	80124a4 <puts>
            return false;
 800115c:	2300      	movs	r3, #0
 800115e:	e092      	b.n	8001286 <recordBenchRep+0x186>
        }

        // Vérifier si le mouvement dépasse le seuil
        if (abs(AccValue.z) > MOVEMENT_THRESHOLD) {
 8001160:	4b4c      	ldr	r3, [pc, #304]	@ (8001294 <recordBenchRep+0x194>)
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b00      	cmp	r3, #0
 8001166:	bfb8      	it	lt
 8001168:	425b      	neglt	r3, r3
 800116a:	2b64      	cmp	r3, #100	@ 0x64
 800116c:	dd69      	ble.n	8001242 <recordBenchRep+0x142>
            if (!movementDetected) {
 800116e:	7ffb      	ldrb	r3, [r7, #31]
 8001170:	f083 0301 	eor.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	d00c      	beq.n	8001194 <recordBenchRep+0x94>
                printf("Mouvement détecté pour la première fois, début du suivi.\n");
 800117a:	4847      	ldr	r0, [pc, #284]	@ (8001298 <recordBenchRep+0x198>)
 800117c:	f011 f992 	bl	80124a4 <puts>
                movementDetected = true;
 8001180:	2301      	movs	r3, #1
 8001182:	77fb      	strb	r3, [r7, #31]
                startTime = HAL_GetTick();
 8001184:	f007 f9fa 	bl	800857c <HAL_GetTick>
 8001188:	6278      	str	r0, [r7, #36]	@ 0x24
                lastMovementTime = startTime;
 800118a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118c:	623b      	str	r3, [r7, #32]
                inactivityStartTime = 0; // Réinitialiser puisqu'un mouvement a été détecté
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	e002      	b.n	800119a <recordBenchRep+0x9a>
            } else {
                lastMovementTime = HAL_GetTick();
 8001194:	f007 f9f2 	bl	800857c <HAL_GetTick>
 8001198:	6238      	str	r0, [r7, #32]
            }

            // Mise à jour des valeurs maximales et minimales
            maxValueZ = fmax(maxValueZ, AccValue.z);
 800119a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800119c:	f7ff fac4 	bl	8000728 <__aeabi_i2d>
 80011a0:	4604      	mov	r4, r0
 80011a2:	460d      	mov	r5, r1
 80011a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <recordBenchRep+0x194>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fabd 	bl	8000728 <__aeabi_i2d>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	ec43 2b11 	vmov	d1, r2, r3
 80011b6:	ec45 4b10 	vmov	d0, r4, r5
 80011ba:	f012 f83d 	bl	8013238 <fmax>
 80011be:	ec53 2b10 	vmov	r2, r3, d0
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fba1 	bl	800090c <__aeabi_d2iz>
 80011ca:	4603      	mov	r3, r0
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            minValueZ = fmin(minValueZ, AccValue.z);
 80011ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80011d0:	f7ff faaa 	bl	8000728 <__aeabi_i2d>
 80011d4:	4604      	mov	r4, r0
 80011d6:	460d      	mov	r5, r1
 80011d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001294 <recordBenchRep+0x194>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff faa3 	bl	8000728 <__aeabi_i2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	ec43 2b11 	vmov	d1, r2, r3
 80011ea:	ec45 4b10 	vmov	d0, r4, r5
 80011ee:	f012 f84d 	bl	801328c <fmin>
 80011f2:	ec53 2b10 	vmov	r2, r3, d0
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fb87 	bl	800090c <__aeabi_d2iz>
 80011fe:	4603      	mov	r3, r0
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28


            // Déterminer la direction du mouvement
            if (!directionDetermined) {
 8001202:	7dfb      	ldrb	r3, [r7, #23]
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d009      	beq.n	8001222 <recordBenchRep+0x122>
                isAscending = AccValue.z > 0;
 800120e:	4b21      	ldr	r3, [pc, #132]	@ (8001294 <recordBenchRep+0x194>)
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
 8001214:	bfcc      	ite	gt
 8001216:	2301      	movgt	r3, #1
 8001218:	2300      	movle	r3, #0
 800121a:	77bb      	strb	r3, [r7, #30]
                directionDetermined = true;
 800121c:	2301      	movs	r3, #1
 800121e:	75fb      	strb	r3, [r7, #23]
 8001220:	e00f      	b.n	8001242 <recordBenchRep+0x142>

            } else {
                bool currentAscending = AccValue.z > 0;
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <recordBenchRep+0x194>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b00      	cmp	r3, #0
 8001228:	bfcc      	ite	gt
 800122a:	2301      	movgt	r3, #1
 800122c:	2300      	movle	r3, #0
 800122e:	73fb      	strb	r3, [r7, #15]
                if (currentAscending != isAscending) {
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	7fbb      	ldrb	r3, [r7, #30]
 8001234:	429a      	cmp	r2, r3
 8001236:	d004      	beq.n	8001242 <recordBenchRep+0x142>
                    changeOfDirectionCount++;
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
                    isAscending = currentAscending;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	77bb      	strb	r3, [r7, #30]
                }
            }
        }

        // Vérifier le temps d'inactivité
        currentTime = HAL_GetTick();
 8001242:	f007 f99b 	bl	800857c <HAL_GetTick>
 8001246:	60b8      	str	r0, [r7, #8]
        if (movementDetected && (currentTime - lastMovementTime > REPETITION_TIME_OUT)) {
 8001248:	7ffb      	ldrb	r3, [r7, #31]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f43f af72 	beq.w	8001134 <recordBenchRep+0x34>
 8001250:	68ba      	ldr	r2, [r7, #8]
 8001252:	6a3b      	ldr	r3, [r7, #32]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800125a:	f67f af6b 	bls.w	8001134 <recordBenchRep+0x34>
            printf("Période d'inactivité détectée, fin de l'enregistrement du mouvement.\n");
 800125e:	480f      	ldr	r0, [pc, #60]	@ (800129c <recordBenchRep+0x19c>)
 8001260:	f011 f920 	bl	80124a4 <puts>
            break;
 8001264:	bf00      	nop
        }
    }

    // Enregistrer les données du mouvement
    rep->maxAmplitudeZ = maxValueZ;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800126a:	601a      	str	r2, [r3, #0]
    rep->minAmplitudeZ = minValueZ;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001270:	605a      	str	r2, [r3, #4]
    rep->duration = currentTime - startTime;
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	461a      	mov	r2, r3
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	609a      	str	r2, [r3, #8]
    rep->changeOfDirectionCount = changeOfDirectionCount;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	60da      	str	r2, [r3, #12]



    return true; // Mouvement détecté et enregistré
 8001284:	2301      	movs	r3, #1
}
 8001286:	4618      	mov	r0, r3
 8001288:	3730      	adds	r7, #48	@ 0x30
 800128a:	46bd      	mov	sp, r7
 800128c:	bdb0      	pop	{r4, r5, r7, pc}
 800128e:	bf00      	nop
 8001290:	08013638 	.word	0x08013638
 8001294:	200001d4 	.word	0x200001d4
 8001298:	08013684 	.word	0x08013684
 800129c:	080136c4 	.word	0x080136c4

080012a0 <compareBenchReps>:


bool compareBenchReps(BenchRep refRep, BenchRep newRep, int tolerance) {
 80012a0:	b490      	push	{r4, r7}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	463c      	mov	r4, r7
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (abs(refRep.maxAmplitudeZ - newRep.maxAmplitudeZ) <= tolerance
 80012ac:	683a      	ldr	r2, [r7, #0]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	bfb8      	it	lt
 80012b6:	425b      	neglt	r3, r3
 80012b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012ba:	429a      	cmp	r2, r3
 80012bc:	db17      	blt.n	80012ee <compareBenchReps+0x4e>
			&& abs(refRep.minAmplitudeZ - newRep.minAmplitudeZ) <= tolerance
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	bfb8      	it	lt
 80012c8:	425b      	neglt	r3, r3
 80012ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012cc:	429a      	cmp	r2, r3
 80012ce:	db0e      	blt.n	80012ee <compareBenchReps+0x4e>
			&& abs(refRep.duration - newRep.duration) <= tolerance
 80012d0:	68ba      	ldr	r2, [r7, #8]
 80012d2:	6a3b      	ldr	r3, [r7, #32]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	bfb8      	it	lt
 80012da:	425b      	neglt	r3, r3
 80012dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012de:	429a      	cmp	r2, r3
 80012e0:	db05      	blt.n	80012ee <compareBenchReps+0x4e>
			&& refRep.changeOfDirectionCount == newRep.changeOfDirectionCount) {
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d101      	bne.n	80012ee <compareBenchReps+0x4e>
		return true;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <compareBenchReps+0x50>
	}
	return false;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bc90      	pop	{r4, r7}
 80012f8:	4770      	bx	lr
	...

080012fc <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	b088      	sub	sp, #32
 8001300:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001302:	4b0b      	ldr	r3, [pc, #44]	@ (8001330 <APPD_EnableCPU2+0x34>)
 8001304:	1d3c      	adds	r4, r7, #4
 8001306:	461d      	mov	r5, r3
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001310:	c403      	stmia	r4!, {r0, r1}
 8001312:	8022      	strh	r2, [r4, #0]
 8001314:	3402      	adds	r4, #2
 8001316:	0c13      	lsrs	r3, r2, #16
 8001318:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800131a:	f00e fb49 	bl	800f9b0 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f00d fdda 	bl	800eeda <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001326:	bf00      	nop
}
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	08013710 	.word	0x08013710

08001334 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 800133e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001342:	f023 0207 	bic.w	r2, r3, #7
 8001346:	4905      	ldr	r1, [pc, #20]	@ (800135c <LL_C2_PWR_SetPowerMode+0x28>)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4313      	orrs	r3, r2
 800134c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58000400 	.word	0x58000400

08001360 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001368:	4b06      	ldr	r3, [pc, #24]	@ (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 800136a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800136e:	4905      	ldr	r1, [pc, #20]	@ (8001384 <LL_EXTI_EnableIT_32_63+0x24>)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4313      	orrs	r3, r2
 8001374:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58000800 	.word	0x58000800

08001388 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001390:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001394:	4a0a      	ldr	r2, [pc, #40]	@ (80013c0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001396:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800139a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800139e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80013a2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013ae:	4313      	orrs	r3, r2
 80013b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	cafecafe 	.word	0xcafecafe

080013c4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80013cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80013d6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80013f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80013f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80013fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001400:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001412:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001416:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800141a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001434:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001438:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800143c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001440:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001444:	d101      	bne.n	800144a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800146a:	d101      	bne.n	8001470 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800146c:	2301      	movs	r3, #1
 800146e:	e000      	b.n	8001472 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001488:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800148a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4313      	orrs	r3, r2
 8001492:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001498:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a0:	68fb      	ldr	r3, [r7, #12]
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80014b4:	4b04      	ldr	r3, [pc, #16]	@ (80014c8 <LL_DBGMCU_GetDeviceID+0x18>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80014bc:	4618      	mov	r0, r3
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e0042000 	.word	0xe0042000

080014cc <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80014d0:	4b04      	ldr	r3, [pc, #16]	@ (80014e4 <LL_DBGMCU_GetRevisionID+0x18>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	0c1b      	lsrs	r3, r3, #16
 80014d6:	b29b      	uxth	r3, r3
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e0042000 	.word	0xe0042000

080014e8 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	431a      	orrs	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	605a      	str	r2, [r3, #4]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	605a      	str	r2, [r3, #4]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr

0800152e <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800152e:	b480      	push	{r7}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
 8001536:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695a      	ldr	r2, [r3, #20]
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	041b      	lsls	r3, r3, #16
 8001540:	431a      	orrs	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	615a      	str	r2, [r3, #20]
}
 8001546:	bf00      	nop
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695a      	ldr	r2, [r3, #20]
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	615a      	str	r2, [r3, #20]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	609a      	str	r2, [r3, #8]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	619a      	str	r2, [r3, #24]
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <LL_LPM_EnableSleep+0x1c>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <LL_LPM_EnableSleep+0x1c>)
 80015b6:	f023 0304 	bic.w	r3, r3, #4
 80015ba:	6113      	str	r3, [r2, #16]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	22ff      	movs	r2, #255	@ 0xff
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	22ca      	movs	r2, #202	@ 0xca
 80015f2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2253      	movs	r2, #83	@ 0x53
 80015f8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr

08001606 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001606:	b480      	push	{r7}
 8001608:	b083      	sub	sp, #12
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
 800160e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	f023 0207 	bic.w	r2, r3, #7
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	609a      	str	r2, [r3, #8]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001630:	4b04      	ldr	r3, [pc, #16]	@ (8001644 <MX_APPE_Config+0x18>)
 8001632:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001636:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001638:	f000 f824 	bl	8001684 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 800163c:	f000 f864 	bl	8001708 <Config_HSE>

  return;
 8001640:	bf00      	nop
}
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58004000 	.word	0x58004000

08001648 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 800164c:	f000 f870 	bl	8001730 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001650:	f000 f888 	bl	8001764 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001654:	4903      	ldr	r1, [pc, #12]	@ (8001664 <MX_APPE_Init+0x1c>)
 8001656:	2000      	movs	r0, #0
 8001658:	f000 ff30 	bl	80024bc <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800165c:	f000 f890 	bl	8001780 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001660:	bf00      	nop
}
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000370 	.word	0x20000370

08001668 <Init_Smps>:

void Init_Smps(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800166c:	bf00      	nop
}
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <Init_Exti>:

void Init_Exti(void)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800167a:	2050      	movs	r0, #80	@ 0x50
 800167c:	f7ff fe70 	bl	8001360 <LL_EXTI_EnableIT_32_63>

  return;
 8001680:	bf00      	nop
}
 8001682:	bd80      	pop	{r7, pc}

08001684 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001688:	f000 f804 	bl	8001694 <Reset_BackupDomain>

  Reset_IPCC();
 800168c:	f000 f81a 	bl	80016c4 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001690:	bf00      	nop
}
 8001692:	bd80      	pop	{r7, pc}

08001694 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001698:	f7ff feca 	bl	8001430 <LL_RCC_IsActiveFlag_PINRST>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <Reset_BackupDomain+0x2a>
 80016a2:	f7ff fed8 	bl	8001456 <LL_RCC_IsActiveFlag_SFTRST>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d108      	bne.n	80016be <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 80016ac:	f009 fc06 	bl	800aebc <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 80016b0:	f009 fc04 	bl	800aebc <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 80016b4:	f7ff fe9a 	bl	80013ec <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 80016b8:	f7ff fea9 	bl	800140e <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
}
 80016c0:	bd80      	pop	{r7, pc}
	...

080016c4 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80016c8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80016cc:	f7ff fed6 	bl	800147c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 80016d0:	213f      	movs	r1, #63	@ 0x3f
 80016d2:	480c      	ldr	r0, [pc, #48]	@ (8001704 <Reset_IPCC+0x40>)
 80016d4:	f7ff ff4e 	bl	8001574 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80016d8:	213f      	movs	r1, #63	@ 0x3f
 80016da:	480a      	ldr	r0, [pc, #40]	@ (8001704 <Reset_IPCC+0x40>)
 80016dc:	f7ff ff58 	bl	8001590 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80016e0:	213f      	movs	r1, #63	@ 0x3f
 80016e2:	4808      	ldr	r0, [pc, #32]	@ (8001704 <Reset_IPCC+0x40>)
 80016e4:	f7ff ff00 	bl	80014e8 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80016e8:	213f      	movs	r1, #63	@ 0x3f
 80016ea:	4806      	ldr	r0, [pc, #24]	@ (8001704 <Reset_IPCC+0x40>)
 80016ec:	f7ff ff1f 	bl	800152e <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80016f0:	213f      	movs	r1, #63	@ 0x3f
 80016f2:	4804      	ldr	r0, [pc, #16]	@ (8001704 <Reset_IPCC+0x40>)
 80016f4:	f7ff ff0a 	bl	800150c <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80016f8:	213f      	movs	r1, #63	@ 0x3f
 80016fa:	4802      	ldr	r0, [pc, #8]	@ (8001704 <Reset_IPCC+0x40>)
 80016fc:	f7ff ff29 	bl	8001552 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001700:	bf00      	nop
}
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58000c00 	.word	0x58000c00

08001708 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 800170e:	2000      	movs	r0, #0
 8001710:	f00e fa02 	bl	800fb18 <OTP_Read>
 8001714:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	799b      	ldrb	r3, [r3, #6]
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fe31 	bl	8001388 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001726:	bf00      	nop
 8001728:	bf00      	nop
}
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <System_Init>:

static void System_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  Init_Smps();
 8001734:	f7ff ff98 	bl	8001668 <Init_Smps>

  Init_Exti();
 8001738:	f7ff ff9d 	bl	8001676 <Init_Exti>

  Init_Rtc();
 800173c:	f000 f802 	bl	8001744 <Init_Rtc>

  return;
 8001740:	bf00      	nop
}
 8001742:	bd80      	pop	{r7, pc}

08001744 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001748:	4805      	ldr	r0, [pc, #20]	@ (8001760 <Init_Rtc+0x1c>)
 800174a:	f7ff ff4c 	bl	80015e6 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800174e:	2100      	movs	r1, #0
 8001750:	4803      	ldr	r0, [pc, #12]	@ (8001760 <Init_Rtc+0x1c>)
 8001752:	f7ff ff58 	bl	8001606 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001756:	4802      	ldr	r0, [pc, #8]	@ (8001760 <Init_Rtc+0x1c>)
 8001758:	f7ff ff38 	bl	80015cc <LL_RTC_EnableWriteProtection>

  return;
 800175c:	bf00      	nop
}
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40002800 	.word	0x40002800

08001764 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001768:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800176c:	f7ff fe2a 	bl	80013c4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001770:	f010 faea 	bl	8011d48 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001774:	2004      	movs	r0, #4
 8001776:	f7ff fddd 	bl	8001334 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800177a:	bf00      	nop
}
 800177c:	bd80      	pop	{r7, pc}
	...

08001780 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001786:	f00d ff5d 	bl	800f644 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <appe_Tl_Init+0x50>)
 800178c:	2100      	movs	r1, #0
 800178e:	2010      	movs	r0, #16
 8001790:	f010 fc18 	bl	8011fc4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <appe_Tl_Init+0x54>)
 8001796:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <appe_Tl_Init+0x58>)
 800179a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800179c:	463b      	mov	r3, r7
 800179e:	4619      	mov	r1, r3
 80017a0:	480e      	ldr	r0, [pc, #56]	@ (80017dc <appe_Tl_Init+0x5c>)
 80017a2:	f00d fe11 	bl	800f3c8 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <appe_Tl_Init+0x60>)
 80017a8:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	@ (80017e4 <appe_Tl_Init+0x64>)
 80017ac:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	@ (80017e8 <appe_Tl_Init+0x68>)
 80017b0:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80017b2:	f240 533c 	movw	r3, #1340	@ 0x53c
 80017b6:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	4618      	mov	r0, r3
 80017be:	f00e f883 	bl	800f8c8 <TL_MM_Init>

  TL_Enable();
 80017c2:	f00d ff39 	bl	800f638 <TL_Enable>

  return;
 80017c6:	bf00      	nop
}
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	0800f401 	.word	0x0800f401
 80017d4:	20030734 	.word	0x20030734
 80017d8:	080017ed 	.word	0x080017ed
 80017dc:	08001805 	.word	0x08001805
 80017e0:	2003094c 	.word	0x2003094c
 80017e4:	20030840 	.word	0x20030840
 80017e8:	200301f8 	.word	0x200301f8

080017ec <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80017f6:	bf00      	nop
}
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	330b      	adds	r3, #11
 8001812:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800181e:	2b07      	cmp	r3, #7
 8001820:	f200 80d0 	bhi.w	80019c4 <APPE_SysUserEvtRx+0x1c0>
 8001824:	a201      	add	r2, pc, #4	@ (adr r2, 800182c <APPE_SysUserEvtRx+0x28>)
 8001826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182a:	bf00      	nop
 800182c:	0800184d 	.word	0x0800184d
 8001830:	080018df 	.word	0x080018df
 8001834:	08001901 	.word	0x08001901
 8001838:	080019c5 	.word	0x080019c5
 800183c:	08001945 	.word	0x08001945
 8001840:	08001969 	.word	0x08001969
 8001844:	08001985 	.word	0x08001985
 8001848:	080019a9 	.word	0x080019a9
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f00d fb6f 	bl	800ef34 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 8001856:	485e      	ldr	r0, [pc, #376]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001858:	f00e f936 	bl	800fac8 <DbgTraceGetFileName>
 800185c:	4601      	mov	r1, r0
 800185e:	f44f 73b5 	mov.w	r3, #362	@ 0x16a
 8001862:	4a5c      	ldr	r2, [pc, #368]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001864:	485c      	ldr	r0, [pc, #368]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001866:	f010 fdad 	bl	80123c4 <iprintf>
 800186a:	7b3b      	ldrb	r3, [r7, #12]
 800186c:	4619      	mov	r1, r3
 800186e:	7b7b      	ldrb	r3, [r7, #13]
 8001870:	461a      	mov	r2, r3
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	4859      	ldr	r0, [pc, #356]	@ (80019dc <APPE_SysUserEvtRx+0x1d8>)
 8001876:	f010 fda5 	bl	80123c4 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800187a:	4855      	ldr	r0, [pc, #340]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800187c:	f00e f924 	bl	800fac8 <DbgTraceGetFileName>
 8001880:	4601      	mov	r1, r0
 8001882:	f240 136b 	movw	r3, #363	@ 0x16b
 8001886:	4a53      	ldr	r2, [pc, #332]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001888:	4853      	ldr	r0, [pc, #332]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 800188a:	f010 fd9b 	bl	80123c4 <iprintf>
 800188e:	7c3b      	ldrb	r3, [r7, #16]
 8001890:	4619      	mov	r1, r3
 8001892:	4853      	ldr	r0, [pc, #332]	@ (80019e0 <APPE_SysUserEvtRx+0x1dc>)
 8001894:	f010 fd96 	bl	80123c4 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001898:	484d      	ldr	r0, [pc, #308]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800189a:	f00e f915 	bl	800fac8 <DbgTraceGetFileName>
 800189e:	4601      	mov	r1, r0
 80018a0:	f44f 73b6 	mov.w	r3, #364	@ 0x16c
 80018a4:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018a6:	484c      	ldr	r0, [pc, #304]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018a8:	f010 fd8c 	bl	80123c4 <iprintf>
 80018ac:	7dbb      	ldrb	r3, [r7, #22]
 80018ae:	4619      	mov	r1, r3
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	461a      	mov	r2, r3
 80018b4:	7e3b      	ldrb	r3, [r7, #24]
 80018b6:	484b      	ldr	r0, [pc, #300]	@ (80019e4 <APPE_SysUserEvtRx+0x1e0>)
 80018b8:	f010 fd84 	bl	80123c4 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 80018bc:	4844      	ldr	r0, [pc, #272]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80018be:	f00e f903 	bl	800fac8 <DbgTraceGetFileName>
 80018c2:	4601      	mov	r1, r0
 80018c4:	f44f 73b7 	mov.w	r3, #366	@ 0x16e
 80018c8:	4a42      	ldr	r2, [pc, #264]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018ca:	4843      	ldr	r0, [pc, #268]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018cc:	f010 fd7a 	bl	80123c4 <iprintf>
 80018d0:	4845      	ldr	r0, [pc, #276]	@ (80019e8 <APPE_SysUserEvtRx+0x1e4>)
 80018d2:	f010 fd77 	bl	80123c4 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f000 f8e0 	bl	8001a9c <APPE_SysEvtReadyProcessing>
    break;
 80018dc:	e073      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 80018de:	483c      	ldr	r0, [pc, #240]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80018e0:	f00e f8f2 	bl	800fac8 <DbgTraceGetFileName>
 80018e4:	4601      	mov	r1, r0
 80018e6:	f240 1373 	movw	r3, #371	@ 0x173
 80018ea:	4a3a      	ldr	r2, [pc, #232]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80018ec:	483a      	ldr	r0, [pc, #232]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80018ee:	f010 fd69 	bl	80123c4 <iprintf>
 80018f2:	483e      	ldr	r0, [pc, #248]	@ (80019ec <APPE_SysUserEvtRx+0x1e8>)
 80018f4:	f010 fd66 	bl	80123c4 <iprintf>
    APPE_SysEvtError(pPayload);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f885 	bl	8001a08 <APPE_SysEvtError>
    break;
 80018fe:	e062      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001900:	4833      	ldr	r0, [pc, #204]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001902:	f00e f8e1 	bl	800fac8 <DbgTraceGetFileName>
 8001906:	4601      	mov	r1, r0
 8001908:	f44f 73bc 	mov.w	r3, #376	@ 0x178
 800190c:	4a31      	ldr	r2, [pc, #196]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 800190e:	4832      	ldr	r0, [pc, #200]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001910:	f010 fd58 	bl	80123c4 <iprintf>
 8001914:	4836      	ldr	r0, [pc, #216]	@ (80019f0 <APPE_SysUserEvtRx+0x1ec>)
 8001916:	f010 fdc5 	bl	80124a4 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800191a:	482d      	ldr	r0, [pc, #180]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800191c:	f00e f8d4 	bl	800fac8 <DbgTraceGetFileName>
 8001920:	4601      	mov	r1, r0
 8001922:	f240 1379 	movw	r3, #377	@ 0x179
 8001926:	4a2b      	ldr	r2, [pc, #172]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001928:	482b      	ldr	r0, [pc, #172]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 800192a:	f010 fd4b 	bl	80123c4 <iprintf>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3302      	adds	r3, #2
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	3302      	adds	r3, #2
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	461a      	mov	r2, r3
 800193c:	482d      	ldr	r0, [pc, #180]	@ (80019f4 <APPE_SysUserEvtRx+0x1f0>)
 800193e:	f010 fd41 	bl	80123c4 <iprintf>
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
    break;
 8001942:	e040      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001944:	4822      	ldr	r0, [pc, #136]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001946:	f00e f8bf 	bl	800fac8 <DbgTraceGetFileName>
 800194a:	4601      	mov	r1, r0
 800194c:	f240 137f 	movw	r3, #383	@ 0x17f
 8001950:	4a20      	ldr	r2, [pc, #128]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001952:	4821      	ldr	r0, [pc, #132]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001954:	f010 fd36 	bl	80123c4 <iprintf>
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	3302      	adds	r3, #2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4619      	mov	r1, r3
 8001960:	4825      	ldr	r0, [pc, #148]	@ (80019f8 <APPE_SysUserEvtRx+0x1f4>)
 8001962:	f010 fd2f 	bl	80123c4 <iprintf>
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
    break;
 8001966:	e02e      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001968:	4819      	ldr	r0, [pc, #100]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 800196a:	f00e f8ad 	bl	800fac8 <DbgTraceGetFileName>
 800196e:	4601      	mov	r1, r0
 8001970:	f44f 73c2 	mov.w	r3, #388	@ 0x184
 8001974:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001976:	4818      	ldr	r0, [pc, #96]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001978:	f010 fd24 	bl	80123c4 <iprintf>
 800197c:	481f      	ldr	r0, [pc, #124]	@ (80019fc <APPE_SysUserEvtRx+0x1f8>)
 800197e:	f010 fd21 	bl	80123c4 <iprintf>
    break;
 8001982:	e020      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001984:	4812      	ldr	r0, [pc, #72]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 8001986:	f00e f89f 	bl	800fac8 <DbgTraceGetFileName>
 800198a:	4601      	mov	r1, r0
 800198c:	f44f 73c4 	mov.w	r3, #392	@ 0x188
 8001990:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 8001992:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 8001994:	f010 fd16 	bl	80123c4 <iprintf>
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3302      	adds	r3, #2
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4619      	mov	r1, r3
 80019a0:	4817      	ldr	r0, [pc, #92]	@ (8001a00 <APPE_SysUserEvtRx+0x1fc>)
 80019a2:	f010 fd0f 	bl	80123c4 <iprintf>
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
    break;
 80019a6:	e00e      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80019a8:	4809      	ldr	r0, [pc, #36]	@ (80019d0 <APPE_SysUserEvtRx+0x1cc>)
 80019aa:	f00e f88d 	bl	800fac8 <DbgTraceGetFileName>
 80019ae:	4601      	mov	r1, r0
 80019b0:	f240 138d 	movw	r3, #397	@ 0x18d
 80019b4:	4a07      	ldr	r2, [pc, #28]	@ (80019d4 <APPE_SysUserEvtRx+0x1d0>)
 80019b6:	4808      	ldr	r0, [pc, #32]	@ (80019d8 <APPE_SysUserEvtRx+0x1d4>)
 80019b8:	f010 fd04 	bl	80123c4 <iprintf>
 80019bc:	4811      	ldr	r0, [pc, #68]	@ (8001a04 <APPE_SysUserEvtRx+0x200>)
 80019be:	f010 fd01 	bl	80123c4 <iprintf>
    break;
 80019c2:	e000      	b.n	80019c6 <APPE_SysUserEvtRx+0x1c2>

  default:
    break;
 80019c4:	bf00      	nop
  }

  return;
 80019c6:	bf00      	nop
}
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	0801372c 	.word	0x0801372c
 80019d4:	08014ee0 	.word	0x08014ee0
 80019d8:	08013744 	.word	0x08013744
 80019dc:	08013758 	.word	0x08013758
 80019e0:	0801377c 	.word	0x0801377c
 80019e4:	08013798 	.word	0x08013798
 80019e8:	080137b0 	.word	0x080137b0
 80019ec:	080137d0 	.word	0x080137d0
 80019f0:	080137f4 	.word	0x080137f4
 80019f4:	08013844 	.word	0x08013844
 80019f8:	0801386c 	.word	0x0801386c
 80019fc:	080138a8 	.word	0x080138a8
 8001a00:	080138cc 	.word	0x080138cc
 8001a04:	08013908 	.word	0x08013908

08001a08 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	330b      	adds	r3, #11
 8001a16:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 8001a1e:	4819      	ldr	r0, [pc, #100]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a20:	f00e f852 	bl	800fac8 <DbgTraceGetFileName>
 8001a24:	4601      	mov	r1, r0
 8001a26:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8001a2a:	4a17      	ldr	r2, [pc, #92]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a2c:	4817      	ldr	r0, [pc, #92]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a2e:	f010 fcc9 	bl	80123c4 <iprintf>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	4619      	mov	r1, r3
 8001a38:	4815      	ldr	r0, [pc, #84]	@ (8001a90 <APPE_SysEvtError+0x88>)
 8001a3a:	f010 fcc3 	bl	80123c4 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10d      	bne.n	8001a62 <APPE_SysEvtError+0x5a>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 8001a46:	480f      	ldr	r0, [pc, #60]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a48:	f00e f83e 	bl	800fac8 <DbgTraceGetFileName>
 8001a4c:	4601      	mov	r1, r0
 8001a4e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8001a52:	4a0d      	ldr	r2, [pc, #52]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a54:	480d      	ldr	r0, [pc, #52]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a56:	f010 fcb5 	bl	80123c4 <iprintf>
 8001a5a:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <APPE_SysEvtError+0x8c>)
 8001a5c:	f010 fd22 	bl	80124a4 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001a60:	e00d      	b.n	8001a7e <APPE_SysEvtError+0x76>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001a62:	4808      	ldr	r0, [pc, #32]	@ (8001a84 <APPE_SysEvtError+0x7c>)
 8001a64:	f00e f830 	bl	800fac8 <DbgTraceGetFileName>
 8001a68:	4601      	mov	r1, r0
 8001a6a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 8001a6e:	4a06      	ldr	r2, [pc, #24]	@ (8001a88 <APPE_SysEvtError+0x80>)
 8001a70:	4806      	ldr	r0, [pc, #24]	@ (8001a8c <APPE_SysEvtError+0x84>)
 8001a72:	f010 fca7 	bl	80123c4 <iprintf>
 8001a76:	4808      	ldr	r0, [pc, #32]	@ (8001a98 <APPE_SysEvtError+0x90>)
 8001a78:	f010 fd14 	bl	80124a4 <puts>
  return;
 8001a7c:	bf00      	nop
}
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	0801372c 	.word	0x0801372c
 8001a88:	08014ef4 	.word	0x08014ef4
 8001a8c:	08013744 	.word	0x08013744
 8001a90:	0801392c 	.word	0x0801392c
 8001a94:	0801395c 	.word	0x0801395c
 8001a98:	08013998 	.word	0x08013998

08001a9c <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001aa4:	f107 0308 	add.w	r3, r7, #8
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	330b      	adds	r3, #11
 8001ac0:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d146      	bne.n	8001b5e <APPE_SysEvtReadyProcessing+0xc2>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001ad0:	4836      	ldr	r0, [pc, #216]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001ad2:	f00d fff9 	bl	800fac8 <DbgTraceGetFileName>
 8001ad6:	4601      	mov	r1, r0
 8001ad8:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 8001adc:	4a34      	ldr	r2, [pc, #208]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001ade:	4835      	ldr	r0, [pc, #212]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001ae0:	f010 fc70 	bl	80123c4 <iprintf>
 8001ae4:	4834      	ldr	r0, [pc, #208]	@ (8001bb8 <APPE_SysEvtReadyProcessing+0x11c>)
 8001ae6:	f010 fcdd 	bl	80124a4 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001aea:	f7ff fc07 	bl	80012fc <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001aee:	230f      	movs	r3, #15
 8001af0:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001af2:	237f      	movs	r3, #127	@ 0x7f
 8001af4:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001af6:	f7ff fce9 	bl	80014cc <LL_DBGMCU_GetRevisionID>
 8001afa:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001afc:	482b      	ldr	r0, [pc, #172]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001afe:	f00d ffe3 	bl	800fac8 <DbgTraceGetFileName>
 8001b02:	4601      	mov	r1, r0
 8001b04:	f44f 73ee 	mov.w	r3, #476	@ 0x1dc
 8001b08:	4a29      	ldr	r2, [pc, #164]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b0a:	482a      	ldr	r0, [pc, #168]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b0c:	f010 fc5a 	bl	80123c4 <iprintf>
 8001b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001b12:	482a      	ldr	r0, [pc, #168]	@ (8001bbc <APPE_SysEvtReadyProcessing+0x120>)
 8001b14:	f010 fc56 	bl	80123c4 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001b1e:	f7ff fcc7 	bl	80014b0 <LL_DBGMCU_GetDeviceID>
 8001b22:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001b24:	4821      	ldr	r0, [pc, #132]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b26:	f00d ffcf 	bl	800fac8 <DbgTraceGetFileName>
 8001b2a:	4601      	mov	r1, r0
 8001b2c:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8001b30:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b32:	4820      	ldr	r0, [pc, #128]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b34:	f010 fc46 	bl	80123c4 <iprintf>
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	4821      	ldr	r0, [pc, #132]	@ (8001bc0 <APPE_SysEvtReadyProcessing+0x124>)
 8001b3c:	f010 fc42 	bl	80123c4 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f00d f9dc 	bl	800ef08 <SHCI_C2_Config>

    APP_BLE_Init();
 8001b50:	f00e f8ec 	bl	800fd2c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001b54:	2100      	movs	r1, #0
 8001b56:	2001      	movs	r0, #1
 8001b58:	f010 f908 	bl	8011d6c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001b5c:	e022      	b.n	8001ba4 <APPE_SysEvtReadyProcessing+0x108>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d110      	bne.n	8001b88 <APPE_SysEvtReadyProcessing+0xec>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 8001b66:	4811      	ldr	r0, [pc, #68]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b68:	f00d ffae 	bl	800fac8 <DbgTraceGetFileName>
 8001b6c:	4601      	mov	r1, r0
 8001b6e:	f44f 73f7 	mov.w	r3, #494	@ 0x1ee
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b74:	480f      	ldr	r0, [pc, #60]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b76:	f010 fc25 	bl	80123c4 <iprintf>
 8001b7a:	4812      	ldr	r0, [pc, #72]	@ (8001bc4 <APPE_SysEvtReadyProcessing+0x128>)
 8001b7c:	f010 fc22 	bl	80123c4 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	701a      	strb	r2, [r3, #0]
  return;
 8001b86:	e00d      	b.n	8001ba4 <APPE_SysEvtReadyProcessing+0x108>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001b88:	4808      	ldr	r0, [pc, #32]	@ (8001bac <APPE_SysEvtReadyProcessing+0x110>)
 8001b8a:	f00d ff9d 	bl	800fac8 <DbgTraceGetFileName>
 8001b8e:	4601      	mov	r1, r0
 8001b90:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8001b94:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <APPE_SysEvtReadyProcessing+0x114>)
 8001b96:	4807      	ldr	r0, [pc, #28]	@ (8001bb4 <APPE_SysEvtReadyProcessing+0x118>)
 8001b98:	f010 fc14 	bl	80123c4 <iprintf>
 8001b9c:	480a      	ldr	r0, [pc, #40]	@ (8001bc8 <APPE_SysEvtReadyProcessing+0x12c>)
 8001b9e:	f010 fc11 	bl	80123c4 <iprintf>
  return;
 8001ba2:	bf00      	nop
}
 8001ba4:	3728      	adds	r7, #40	@ 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	0801372c 	.word	0x0801372c
 8001bb0:	08014f08 	.word	0x08014f08
 8001bb4:	08013744 	.word	0x08013744
 8001bb8:	080139d0 	.word	0x080139d0
 8001bbc:	080139ec 	.word	0x080139ec
 8001bc0:	08013a10 	.word	0x08013a10
 8001bc4:	08013a30 	.word	0x08013a30
 8001bc8:	08013a64 	.word	0x08013a64

08001bcc <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f006 fcd2 	bl	800857c <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d00a      	beq.n	8001bfc <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001be6:	f006 fce1 	bl	80085ac <HAL_GetTickFreq>
 8001bea:	4603      	mov	r3, r0
 8001bec:	461a      	mov	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf4:	e002      	b.n	8001bfc <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001bf6:	f7ff fcd9 	bl	80015ac <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif /* __ARMCC_VERSION */

    __WFI();
 8001bfa:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001bfc:	f006 fcbe 	bl	800857c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d8f4      	bhi.n	8001bf6 <HAL_Delay+0x2a>
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8001c1e:	f010 f8d5 	bl	8011dcc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001c2a:	bf00      	nop
}
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8001c42:	f010 f8c3 	bl	8011dcc <UTIL_SEQ_Run>
  return;
 8001c46:	bf00      	nop
}
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b082      	sub	sp, #8
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001c56:	2100      	movs	r1, #0
 8001c58:	2010      	movs	r0, #16
 8001c5a:	f010 f9d5 	bl	8012008 <UTIL_SEQ_SetTask>
  return;
 8001c5e:	bf00      	nop
}
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	f010 fa36 	bl	80120e0 <UTIL_SEQ_SetEvt>
  return;
 8001c74:	bf00      	nop
}
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001c84:	2002      	movs	r0, #2
 8001c86:	f010 fa4b 	bl	8012120 <UTIL_SEQ_WaitEvt>
  return;
 8001c8a:	bf00      	nop
}
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <LL_EXTI_EnableIT_0_31>:
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001c9e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ca2:	4905      	ldr	r1, [pc, #20]	@ (8001cb8 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	58000800 	.word	0x58000800

08001cbc <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001cc4:	4b05      	ldr	r3, [pc, #20]	@ (8001cdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4904      	ldr	r1, [pc, #16]	@ (8001cdc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]

}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	58000800 	.word	0x58000800

08001ce0 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001cf6:	e005      	b.n	8001d04 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001cfc:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <ReadRtcSsrValue+0x3c>)
 8001cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1f5      	bne.n	8001cf8 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001d0c:	683b      	ldr	r3, [r7, #0]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	40002800 	.word	0x40002800

08001d20 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	460a      	mov	r2, r1
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001d30:	79ba      	ldrb	r2, [r7, #6]
 8001d32:	491d      	ldr	r1, [pc, #116]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d34:	4613      	mov	r3, r2
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	4413      	add	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	440b      	add	r3, r1
 8001d3e:	3315      	adds	r3, #21
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001d44:	7bfb      	ldrb	r3, [r7, #15]
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d009      	beq.n	8001d5e <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001d4a:	7bfa      	ldrb	r2, [r7, #15]
 8001d4c:	4916      	ldr	r1, [pc, #88]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	00db      	lsls	r3, r3, #3
 8001d56:	440b      	add	r3, r1
 8001d58:	3314      	adds	r3, #20
 8001d5a:	79fa      	ldrb	r2, [r7, #7]
 8001d5c:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001d5e:	79fa      	ldrb	r2, [r7, #7]
 8001d60:	4911      	ldr	r1, [pc, #68]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	440b      	add	r3, r1
 8001d6c:	3315      	adds	r3, #21
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001d72:	79fa      	ldrb	r2, [r7, #7]
 8001d74:	490c      	ldr	r1, [pc, #48]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d76:	4613      	mov	r3, r2
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	3314      	adds	r3, #20
 8001d82:	79ba      	ldrb	r2, [r7, #6]
 8001d84:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001d86:	79ba      	ldrb	r2, [r7, #6]
 8001d88:	4907      	ldr	r1, [pc, #28]	@ (8001da8 <LinkTimerAfter+0x88>)
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	440b      	add	r3, r1
 8001d94:	3315      	adds	r3, #21
 8001d96:	79fa      	ldrb	r2, [r7, #7]
 8001d98:	701a      	strb	r2, [r3, #0]

  return;
 8001d9a:	bf00      	nop
}
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	20000230 	.word	0x20000230

08001dac <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	460a      	mov	r2, r1
 8001db6:	71fb      	strb	r3, [r7, #7]
 8001db8:	4613      	mov	r3, r2
 8001dba:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001dbc:	4b29      	ldr	r3, [pc, #164]	@ (8001e64 <LinkTimerBefore+0xb8>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	79ba      	ldrb	r2, [r7, #6]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d032      	beq.n	8001e2e <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	4927      	ldr	r1, [pc, #156]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001de0:	4613      	mov	r3, r2
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	4413      	add	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	440b      	add	r3, r1
 8001dea:	3315      	adds	r3, #21
 8001dec:	79fa      	ldrb	r2, [r7, #7]
 8001dee:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001df0:	79fa      	ldrb	r2, [r7, #7]
 8001df2:	491d      	ldr	r1, [pc, #116]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001df4:	4613      	mov	r3, r2
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4413      	add	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	440b      	add	r3, r1
 8001dfe:	3315      	adds	r3, #21
 8001e00:	79ba      	ldrb	r2, [r7, #6]
 8001e02:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e04:	79fa      	ldrb	r2, [r7, #7]
 8001e06:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	440b      	add	r3, r1
 8001e12:	3314      	adds	r3, #20
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e18:	79ba      	ldrb	r2, [r7, #6]
 8001e1a:	4913      	ldr	r1, [pc, #76]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	440b      	add	r3, r1
 8001e26:	3314      	adds	r3, #20
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001e2c:	e014      	b.n	8001e58 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	490d      	ldr	r1, [pc, #52]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e32:	4613      	mov	r3, r2
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3315      	adds	r3, #21
 8001e3e:	79ba      	ldrb	r2, [r7, #6]
 8001e40:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001e42:	79ba      	ldrb	r2, [r7, #6]
 8001e44:	4908      	ldr	r1, [pc, #32]	@ (8001e68 <LinkTimerBefore+0xbc>)
 8001e46:	4613      	mov	r3, r2
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	3314      	adds	r3, #20
 8001e52:	79fa      	ldrb	r2, [r7, #7]
 8001e54:	701a      	strb	r2, [r3, #0]
  return;
 8001e56:	bf00      	nop
}
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	200002c0 	.word	0x200002c0
 8001e68:	20000230 	.word	0x20000230

08001e6c <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <linkTimer+0x144>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b06      	cmp	r3, #6
 8001e7e:	d118      	bne.n	8001eb2 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001e80:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb0 <linkTimer+0x144>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb4 <linkTimer+0x148>)
 8001e88:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001e8a:	4a49      	ldr	r2, [pc, #292]	@ (8001fb0 <linkTimer+0x144>)
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001e90:	79fa      	ldrb	r2, [r7, #7]
 8001e92:	4949      	ldr	r1, [pc, #292]	@ (8001fb8 <linkTimer+0x14c>)
 8001e94:	4613      	mov	r3, r2
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	4413      	add	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	440b      	add	r3, r1
 8001e9e:	3315      	adds	r3, #21
 8001ea0:	2206      	movs	r2, #6
 8001ea2:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001ea4:	4b45      	ldr	r3, [pc, #276]	@ (8001fbc <linkTimer+0x150>)
 8001ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8001eaa:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	81fb      	strh	r3, [r7, #14]
 8001eb0:	e078      	b.n	8001fa4 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001eb2:	f000 f909 	bl	80020c8 <ReturnTimeElapsed>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001eba:	79fa      	ldrb	r2, [r7, #7]
 8001ebc:	493e      	ldr	r1, [pc, #248]	@ (8001fb8 <linkTimer+0x14c>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	440b      	add	r3, r1
 8001ec8:	3308      	adds	r3, #8
 8001eca:	6819      	ldr	r1, [r3, #0]
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	79fa      	ldrb	r2, [r7, #7]
 8001ed0:	4419      	add	r1, r3
 8001ed2:	4839      	ldr	r0, [pc, #228]	@ (8001fb8 <linkTimer+0x14c>)
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4403      	add	r3, r0
 8001ede:	3308      	adds	r3, #8
 8001ee0:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001ee2:	79fa      	ldrb	r2, [r7, #7]
 8001ee4:	4934      	ldr	r1, [pc, #208]	@ (8001fb8 <linkTimer+0x14c>)
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	4413      	add	r3, r2
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	440b      	add	r3, r1
 8001ef0:	3308      	adds	r3, #8
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <linkTimer+0x144>)
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	4619      	mov	r1, r3
 8001efe:	4a2e      	ldr	r2, [pc, #184]	@ (8001fb8 <linkTimer+0x14c>)
 8001f00:	460b      	mov	r3, r1
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	440b      	add	r3, r1
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d337      	bcc.n	8001f84 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001f14:	4b26      	ldr	r3, [pc, #152]	@ (8001fb0 <linkTimer+0x144>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001f1a:	7b7a      	ldrb	r2, [r7, #13]
 8001f1c:	4926      	ldr	r1, [pc, #152]	@ (8001fb8 <linkTimer+0x14c>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4413      	add	r3, r2
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	440b      	add	r3, r1
 8001f28:	3315      	adds	r3, #21
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f2e:	e013      	b.n	8001f58 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001f30:	7b7a      	ldrb	r2, [r7, #13]
 8001f32:	4921      	ldr	r1, [pc, #132]	@ (8001fb8 <linkTimer+0x14c>)
 8001f34:	4613      	mov	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	4413      	add	r3, r2
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3315      	adds	r3, #21
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001f44:	7b7a      	ldrb	r2, [r7, #13]
 8001f46:	491c      	ldr	r1, [pc, #112]	@ (8001fb8 <linkTimer+0x14c>)
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	3315      	adds	r3, #21
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001f58:	7b3b      	ldrb	r3, [r7, #12]
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d00b      	beq.n	8001f76 <linkTimer+0x10a>
 8001f5e:	7b3a      	ldrb	r2, [r7, #12]
 8001f60:	4915      	ldr	r1, [pc, #84]	@ (8001fb8 <linkTimer+0x14c>)
 8001f62:	4613      	mov	r3, r2
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	440b      	add	r3, r1
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	68ba      	ldr	r2, [r7, #8]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d2dc      	bcs.n	8001f30 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001f76:	7b7a      	ldrb	r2, [r7, #13]
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fecf 	bl	8001d20 <LinkTimerAfter>
 8001f82:	e00f      	b.n	8001fa4 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <linkTimer+0x144>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	4611      	mov	r1, r2
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff ff0c 	bl	8001dac <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <linkTimer+0x144>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	4b06      	ldr	r3, [pc, #24]	@ (8001fb4 <linkTimer+0x148>)
 8001f9c:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001f9e:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <linkTimer+0x144>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001fa4:	89fb      	ldrh	r3, [r7, #14]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200002c0 	.word	0x200002c0
 8001fb4:	200002c1 	.word	0x200002c1
 8001fb8:	20000230 	.word	0x20000230
 8001fbc:	200002c4 	.word	0x200002c4

08001fc0 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460a      	mov	r2, r1
 8001fca:	71fb      	strb	r3, [r7, #7]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001fd0:	4b39      	ldr	r3, [pc, #228]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	79fa      	ldrb	r2, [r7, #7]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d111      	bne.n	8002000 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001fdc:	4b36      	ldr	r3, [pc, #216]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <UnlinkTimer+0xfc>)
 8001fe4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001fe6:	79fa      	ldrb	r2, [r7, #7]
 8001fe8:	4935      	ldr	r1, [pc, #212]	@ (80020c0 <UnlinkTimer+0x100>)
 8001fea:	4613      	mov	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3315      	adds	r3, #21
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80020b8 <UnlinkTimer+0xf8>)
 8001ffc:	701a      	strb	r2, [r3, #0]
 8001ffe:	e03e      	b.n	800207e <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002000:	79fa      	ldrb	r2, [r7, #7]
 8002002:	492f      	ldr	r1, [pc, #188]	@ (80020c0 <UnlinkTimer+0x100>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3314      	adds	r3, #20
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002014:	79fa      	ldrb	r2, [r7, #7]
 8002016:	492a      	ldr	r1, [pc, #168]	@ (80020c0 <UnlinkTimer+0x100>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	440b      	add	r3, r1
 8002022:	3315      	adds	r3, #21
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002028:	79f9      	ldrb	r1, [r7, #7]
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	4824      	ldr	r0, [pc, #144]	@ (80020c0 <UnlinkTimer+0x100>)
 800202e:	460b      	mov	r3, r1
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	440b      	add	r3, r1
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4403      	add	r3, r0
 8002038:	3315      	adds	r3, #21
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b2d8      	uxtb	r0, r3
 800203e:	4920      	ldr	r1, [pc, #128]	@ (80020c0 <UnlinkTimer+0x100>)
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3315      	adds	r3, #21
 800204c:	4602      	mov	r2, r0
 800204e:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002050:	7bbb      	ldrb	r3, [r7, #14]
 8002052:	2b06      	cmp	r3, #6
 8002054:	d013      	beq.n	800207e <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002056:	79f9      	ldrb	r1, [r7, #7]
 8002058:	7bba      	ldrb	r2, [r7, #14]
 800205a:	4819      	ldr	r0, [pc, #100]	@ (80020c0 <UnlinkTimer+0x100>)
 800205c:	460b      	mov	r3, r1
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	440b      	add	r3, r1
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4403      	add	r3, r0
 8002066:	3314      	adds	r3, #20
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b2d8      	uxtb	r0, r3
 800206c:	4914      	ldr	r1, [pc, #80]	@ (80020c0 <UnlinkTimer+0x100>)
 800206e:	4613      	mov	r3, r2
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	440b      	add	r3, r1
 8002078:	3314      	adds	r3, #20
 800207a:	4602      	mov	r2, r0
 800207c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	490f      	ldr	r1, [pc, #60]	@ (80020c0 <UnlinkTimer+0x100>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	330c      	adds	r3, #12
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002092:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <UnlinkTimer+0xf8>)
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b06      	cmp	r3, #6
 800209a:	d107      	bne.n	80020ac <UnlinkTimer+0xec>
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d104      	bne.n	80020ac <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <UnlinkTimer+0x104>)
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	601a      	str	r2, [r3, #0]
  }

  return;
 80020aa:	bf00      	nop
 80020ac:	bf00      	nop
}
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	200002c0 	.word	0x200002c0
 80020bc:	200002c1 	.word	0x200002c1
 80020c0:	20000230 	.word	0x20000230
 80020c4:	200002c4 	.word	0x200002c4

080020c8 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d6:	d026      	beq.n	8002126 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80020d8:	f7ff fe02 	bl	8001ce0 <ReadRtcSsrValue>
 80020dc:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d805      	bhi.n	80020f4 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <ReturnTimeElapsed+0x70>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	e00a      	b.n	800210a <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80020f4:	4b11      	ldr	r3, [pc, #68]	@ (800213c <ReturnTimeElapsed+0x74>)
 80020f6:	881b      	ldrh	r3, [r3, #0]
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002100:	4b0d      	ldr	r3, [pc, #52]	@ (8002138 <ReturnTimeElapsed+0x70>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	4413      	add	r3, r2
 8002108:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 800210a:	4b0d      	ldr	r3, [pc, #52]	@ (8002140 <ReturnTimeElapsed+0x78>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <ReturnTimeElapsed+0x7c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	40d3      	lsrs	r3, r2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	e001      	b.n	800212a <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	b29b      	uxth	r3, r3
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200002c4 	.word	0x200002c4
 800213c:	200002cc 	.word	0x200002cc
 8002140:	200002ca 	.word	0x200002ca
 8002144:	200002c9 	.word	0x200002c9

08002148 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d108      	bne.n	800216a <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002158:	f7ff fdc2 	bl	8001ce0 <ReadRtcSsrValue>
 800215c:	4603      	mov	r3, r0
 800215e:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <RestartWakeupCounter+0x9c>)
 8002160:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002162:	2003      	movs	r0, #3
 8002164:	f007 fa49 	bl	80095fa <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002168:	e039      	b.n	80021de <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d803      	bhi.n	8002178 <RestartWakeupCounter+0x30>
 8002170:	4b1d      	ldr	r3, [pc, #116]	@ (80021e8 <RestartWakeupCounter+0xa0>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d002      	beq.n	800217e <RestartWakeupCounter+0x36>
      Value -= 1;
 8002178:	88fb      	ldrh	r3, [r7, #6]
 800217a:	3b01      	subs	r3, #1
 800217c:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800217e:	bf00      	nop
 8002180:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0304 	and.w	r3, r3, #4
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f8      	beq.n	8002180 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b15      	ldr	r3, [pc, #84]	@ (80021ec <RestartWakeupCounter+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800219e:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80021a0:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <RestartWakeupCounter+0xa8>)
 80021a2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80021a6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80021a8:	2003      	movs	r0, #3
 80021aa:	f007 fa34 	bl	8009616 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80021ae:	4b11      	ldr	r3, [pc, #68]	@ (80021f4 <RestartWakeupCounter+0xac>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	0c1b      	lsrs	r3, r3, #16
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	88fa      	ldrh	r2, [r7, #6]
 80021b8:	490e      	ldr	r1, [pc, #56]	@ (80021f4 <RestartWakeupCounter+0xac>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021be:	f7ff fd8f 	bl	8001ce0 <ReadRtcSsrValue>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a07      	ldr	r2, [pc, #28]	@ (80021e4 <RestartWakeupCounter+0x9c>)
 80021c6:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 80021c8:	4b08      	ldr	r3, [pc, #32]	@ (80021ec <RestartWakeupCounter+0xa4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	689a      	ldr	r2, [r3, #8]
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <RestartWakeupCounter+0xa4>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021d6:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80021d8:	f3af 8000 	nop.w
  return ;
 80021dc:	bf00      	nop
}
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	200002c4 	.word	0x200002c4
 80021e8:	200002c9 	.word	0x200002c9
 80021ec:	20000370 	.word	0x20000370
 80021f0:	58000800 	.word	0x58000800
 80021f4:	40002800 	.word	0x40002800

080021f8 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80021fe:	4b45      	ldr	r3, [pc, #276]	@ (8002314 <RescheduleTimerList+0x11c>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002206:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800220a:	d107      	bne.n	800221c <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800220c:	bf00      	nop
 800220e:	4b42      	ldr	r3, [pc, #264]	@ (8002318 <RescheduleTimerList+0x120>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f8      	bne.n	800220e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 800221c:	4b3e      	ldr	r3, [pc, #248]	@ (8002318 <RescheduleTimerList+0x120>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689a      	ldr	r2, [r3, #8]
 8002222:	4b3d      	ldr	r3, [pc, #244]	@ (8002318 <RescheduleTimerList+0x120>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800222a:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 800222c:	4b3b      	ldr	r3, [pc, #236]	@ (800231c <RescheduleTimerList+0x124>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	493a      	ldr	r1, [pc, #232]	@ (8002320 <RescheduleTimerList+0x128>)
 8002236:	4613      	mov	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	440b      	add	r3, r1
 8002240:	3308      	adds	r3, #8
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002246:	f7ff ff3f 	bl	80020c8 <ReturnTimeElapsed>
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	68ba      	ldr	r2, [r7, #8]
 8002252:	429a      	cmp	r2, r3
 8002254:	d205      	bcs.n	8002262 <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800225a:	4b32      	ldr	r3, [pc, #200]	@ (8002324 <RescheduleTimerList+0x12c>)
 800225c:	2201      	movs	r2, #1
 800225e:	701a      	strb	r2, [r3, #0]
 8002260:	e04d      	b.n	80022fe <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8002262:	88fb      	ldrh	r3, [r7, #6]
 8002264:	4a30      	ldr	r2, [pc, #192]	@ (8002328 <RescheduleTimerList+0x130>)
 8002266:	8812      	ldrh	r2, [r2, #0]
 8002268:	b292      	uxth	r2, r2
 800226a:	4413      	add	r3, r2
 800226c:	461a      	mov	r2, r3
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	4293      	cmp	r3, r2
 8002272:	d906      	bls.n	8002282 <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002274:	4b2c      	ldr	r3, [pc, #176]	@ (8002328 <RescheduleTimerList+0x130>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 800227a:	4b2a      	ldr	r3, [pc, #168]	@ (8002324 <RescheduleTimerList+0x12c>)
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e03d      	b.n	80022fe <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	b29a      	uxth	r2, r3
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <RescheduleTimerList+0x12c>)
 800228e:	2201      	movs	r2, #1
 8002290:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002292:	e034      	b.n	80022fe <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002294:	7bfa      	ldrb	r2, [r7, #15]
 8002296:	4922      	ldr	r1, [pc, #136]	@ (8002320 <RescheduleTimerList+0x128>)
 8002298:	4613      	mov	r3, r2
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	4413      	add	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	440b      	add	r3, r1
 80022a2:	3308      	adds	r3, #8
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d20a      	bcs.n	80022c2 <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	491c      	ldr	r1, [pc, #112]	@ (8002320 <RescheduleTimerList+0x128>)
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	3308      	adds	r3, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e013      	b.n	80022ea <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	4916      	ldr	r1, [pc, #88]	@ (8002320 <RescheduleTimerList+0x128>)
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	3308      	adds	r3, #8
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	88fb      	ldrh	r3, [r7, #6]
 80022d6:	7bfa      	ldrb	r2, [r7, #15]
 80022d8:	1ac9      	subs	r1, r1, r3
 80022da:	4811      	ldr	r0, [pc, #68]	@ (8002320 <RescheduleTimerList+0x128>)
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4403      	add	r3, r0
 80022e6:	3308      	adds	r3, #8
 80022e8:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80022ea:	7bfa      	ldrb	r2, [r7, #15]
 80022ec:	490c      	ldr	r1, [pc, #48]	@ (8002320 <RescheduleTimerList+0x128>)
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	440b      	add	r3, r1
 80022f8:	3315      	adds	r3, #21
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b06      	cmp	r3, #6
 8002302:	d1c7      	bne.n	8002294 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8002304:	89bb      	ldrh	r3, [r7, #12]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff ff1e 	bl	8002148 <RestartWakeupCounter>

  return ;
 800230c:	bf00      	nop
}
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40002800 	.word	0x40002800
 8002318:	20000370 	.word	0x20000370
 800231c:	200002c0 	.word	0x200002c0
 8002320:	20000230 	.word	0x20000230
 8002324:	200002c8 	.word	0x200002c8
 8002328:	200002ce 	.word	0x200002ce

0800232c <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	@ 0x28
 8002330:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002332:	f3ef 8310 	mrs	r3, PRIMASK
 8002336:	617b      	str	r3, [r7, #20]
  return(result);
 8002338:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800233a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002340:	4b59      	ldr	r3, [pc, #356]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	22ca      	movs	r2, #202	@ 0xca
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
 8002348:	4b57      	ldr	r3, [pc, #348]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2253      	movs	r2, #83	@ 0x53
 800234e:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8002350:	4b55      	ldr	r3, [pc, #340]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	4b54      	ldr	r3, [pc, #336]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800235e:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8002360:	4b52      	ldr	r3, [pc, #328]	@ (80024ac <HW_TS_RTC_Wakeup_Handler+0x180>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002368:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800236c:	4950      	ldr	r1, [pc, #320]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	440b      	add	r3, r1
 8002378:	330c      	adds	r3, #12
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d16e      	bne.n	8002460 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8002382:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002386:	494a      	ldr	r1, [pc, #296]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002388:	4613      	mov	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4413      	add	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	440b      	add	r3, r1
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002396:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800239a:	4945      	ldr	r1, [pc, #276]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 800239c:	4613      	mov	r3, r2
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	4413      	add	r3, r2
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	3310      	adds	r3, #16
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80023ac:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04c      	beq.n	8002450 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80023b6:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ba:	493d      	ldr	r1, [pc, #244]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	440b      	add	r3, r1
 80023c6:	330d      	adds	r3, #13
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d124      	bne.n	800241a <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 80023d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023d4:	2101      	movs	r1, #1
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fdf2 	bl	8001fc0 <UnlinkTimer>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f383 8810 	msr	PRIMASK, r3
}
 80023e6:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80023e8:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80023ec:	4930      	ldr	r1, [pc, #192]	@ (80024b0 <HW_TS_RTC_Wakeup_Handler+0x184>)
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	440b      	add	r3, r1
 80023f8:	3304      	adds	r3, #4
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002400:	4611      	mov	r1, r2
 8002402:	4618      	mov	r0, r3
 8002404:	f000 f9b8 	bl	8002778 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002408:	4b27      	ldr	r3, [pc, #156]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22ca      	movs	r2, #202	@ 0xca
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002410:	4b25      	ldr	r3, [pc, #148]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2253      	movs	r2, #83	@ 0x53
 8002416:	625a      	str	r2, [r3, #36]	@ 0x24
 8002418:	e012      	b.n	8002440 <HW_TS_RTC_Wakeup_Handler+0x114>
 800241a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f383 8810 	msr	PRIMASK, r3
}
 8002424:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8002426:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800242a:	4618      	mov	r0, r3
 800242c:	f000 f920 	bl	8002670 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002430:	4b1d      	ldr	r3, [pc, #116]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	22ca      	movs	r2, #202	@ 0xca
 8002436:	625a      	str	r2, [r3, #36]	@ 0x24
 8002438:	4b1b      	ldr	r3, [pc, #108]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2253      	movs	r2, #83	@ 0x53
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8002440:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002444:	69fa      	ldr	r2, [r7, #28]
 8002446:	4619      	mov	r1, r3
 8002448:	69b8      	ldr	r0, [r7, #24]
 800244a:	f000 fa1b 	bl	8002884 <HW_TS_RTC_Int_AppNot>
 800244e:	e022      	b.n	8002496 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8002450:	f7ff fed2 	bl	80021f8 <RescheduleTimerList>
 8002454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002456:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f383 8810 	msr	PRIMASK, r3
}
 800245e:	e01a      	b.n	8002496 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002460:	bf00      	nop
 8002462:	4b11      	ldr	r3, [pc, #68]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f003 0304 	and.w	r3, r3, #4
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f8      	beq.n	8002462 <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002470:	4b0d      	ldr	r3, [pc, #52]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	b2da      	uxtb	r2, r3
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8002480:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002482:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002484:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002488:	60da      	str	r2, [r3, #12]
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f383 8810 	msr	PRIMASK, r3
}
 8002494:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002496:	4b04      	ldr	r3, [pc, #16]	@ (80024a8 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	22ff      	movs	r2, #255	@ 0xff
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 800249e:	bf00      	nop
}
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000370 	.word	0x20000370
 80024ac:	200002c0 	.word	0x200002c0
 80024b0:	20000230 	.word	0x20000230
 80024b4:	200002c8 	.word	0x200002c8
 80024b8:	58000800 	.word	0x58000800

080024bc <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	6039      	str	r1, [r7, #0]
 80024c6:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002644 <HW_TS_Init+0x188>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	22ca      	movs	r2, #202	@ 0xca
 80024ce:	625a      	str	r2, [r3, #36]	@ 0x24
 80024d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002644 <HW_TS_Init+0x188>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2253      	movs	r2, #83	@ 0x53
 80024d6:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80024d8:	4b5b      	ldr	r3, [pc, #364]	@ (8002648 <HW_TS_Init+0x18c>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002648 <HW_TS_Init+0x18c>)
 80024de:	f043 0320 	orr.w	r3, r3, #32
 80024e2:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80024e4:	4b58      	ldr	r3, [pc, #352]	@ (8002648 <HW_TS_Init+0x18c>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	f1c3 0304 	rsb	r3, r3, #4
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b55      	ldr	r3, [pc, #340]	@ (800264c <HW_TS_Init+0x190>)
 80024f8:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80024fa:	4b53      	ldr	r3, [pc, #332]	@ (8002648 <HW_TS_Init+0x18c>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002502:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8002506:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	693a      	ldr	r2, [r7, #16]
 800250a:	fa92 f2a2 	rbit	r2, r2
 800250e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	2a00      	cmp	r2, #0
 8002518:	d101      	bne.n	800251e <HW_TS_Init+0x62>
  {
    return 32U;
 800251a:	2220      	movs	r2, #32
 800251c:	e003      	b.n	8002526 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	fab2 f282 	clz	r2, r2
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	40d3      	lsrs	r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	3301      	adds	r3, #1
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4b48      	ldr	r3, [pc, #288]	@ (8002650 <HW_TS_Init+0x194>)
 8002530:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8002532:	4b45      	ldr	r3, [pc, #276]	@ (8002648 <HW_TS_Init+0x18c>)
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	b29b      	uxth	r3, r3
 8002538:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800253c:	b29b      	uxth	r3, r3
 800253e:	3301      	adds	r3, #1
 8002540:	b29a      	uxth	r2, r3
 8002542:	4b44      	ldr	r3, [pc, #272]	@ (8002654 <HW_TS_Init+0x198>)
 8002544:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002546:	4b43      	ldr	r3, [pc, #268]	@ (8002654 <HW_TS_Init+0x198>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	3b01      	subs	r3, #1
 800254c:	4a40      	ldr	r2, [pc, #256]	@ (8002650 <HW_TS_Init+0x194>)
 800254e:	7812      	ldrb	r2, [r2, #0]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002558:	4a3c      	ldr	r2, [pc, #240]	@ (800264c <HW_TS_Init+0x190>)
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	40d3      	lsrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002566:	4293      	cmp	r3, r2
 8002568:	d904      	bls.n	8002574 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 800256a:	4b3b      	ldr	r3, [pc, #236]	@ (8002658 <HW_TS_Init+0x19c>)
 800256c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	e003      	b.n	800257c <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b37      	ldr	r3, [pc, #220]	@ (8002658 <HW_TS_Init+0x19c>)
 800257a:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800257c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002580:	f7ff fb9c 	bl	8001cbc <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002584:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002588:	f7ff fb84 	bl	8001c94 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 800258c:	79fb      	ldrb	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d13d      	bne.n	800260e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002592:	4b32      	ldr	r3, [pc, #200]	@ (800265c <HW_TS_Init+0x1a0>)
 8002594:	2201      	movs	r2, #1
 8002596:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002598:	4b31      	ldr	r3, [pc, #196]	@ (8002660 <HW_TS_Init+0x1a4>)
 800259a:	f04f 32ff 	mov.w	r2, #4294967295
 800259e:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025a0:	2300      	movs	r3, #0
 80025a2:	77fb      	strb	r3, [r7, #31]
 80025a4:	e00c      	b.n	80025c0 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80025a6:	7ffa      	ldrb	r2, [r7, #31]
 80025a8:	492e      	ldr	r1, [pc, #184]	@ (8002664 <HW_TS_Init+0x1a8>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	4413      	add	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	440b      	add	r3, r1
 80025b4:	330c      	adds	r3, #12
 80025b6:	2200      	movs	r2, #0
 80025b8:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80025ba:	7ffb      	ldrb	r3, [r7, #31]
 80025bc:	3301      	adds	r3, #1
 80025be:	77fb      	strb	r3, [r7, #31]
 80025c0:	7ffb      	ldrb	r3, [r7, #31]
 80025c2:	2b05      	cmp	r3, #5
 80025c4:	d9ef      	bls.n	80025a6 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 80025c6:	4b28      	ldr	r3, [pc, #160]	@ (8002668 <HW_TS_Init+0x1ac>)
 80025c8:	2206      	movs	r2, #6
 80025ca:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 80025cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002644 <HW_TS_Init+0x188>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002644 <HW_TS_Init+0x188>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025da:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80025dc:	4b19      	ldr	r3, [pc, #100]	@ (8002644 <HW_TS_Init+0x188>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HW_TS_Init+0x188>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80025ec:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <HW_TS_Init+0x1b0>)
 80025f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025f4:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80025f6:	2003      	movs	r0, #3
 80025f8:	f007 f80d 	bl	8009616 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80025fc:	4b11      	ldr	r3, [pc, #68]	@ (8002644 <HW_TS_Init+0x188>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <HW_TS_Init+0x188>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800260a:	609a      	str	r2, [r3, #8]
 800260c:	e009      	b.n	8002622 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800260e:	4b0d      	ldr	r3, [pc, #52]	@ (8002644 <HW_TS_Init+0x188>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800261c:	2003      	movs	r0, #3
 800261e:	f006 ffec 	bl	80095fa <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002622:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <HW_TS_Init+0x188>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	22ff      	movs	r2, #255	@ 0xff
 8002628:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800262a:	2200      	movs	r2, #0
 800262c:	2103      	movs	r1, #3
 800262e:	2003      	movs	r0, #3
 8002630:	f006 ffa1 	bl	8009576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002634:	2003      	movs	r0, #3
 8002636:	f006 ffb8 	bl	80095aa <HAL_NVIC_EnableIRQ>

  return;
 800263a:	bf00      	nop
}
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	20000370 	.word	0x20000370
 8002648:	40002800 	.word	0x40002800
 800264c:	200002c9 	.word	0x200002c9
 8002650:	200002ca 	.word	0x200002ca
 8002654:	200002cc 	.word	0x200002cc
 8002658:	200002ce 	.word	0x200002ce
 800265c:	200002c8 	.word	0x200002c8
 8002660:	200002c4 	.word	0x200002c4
 8002664:	20000230 	.word	0x20000230
 8002668:	200002c0 	.word	0x200002c0
 800266c:	58000800 	.word	0x58000800

08002670 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	4603      	mov	r3, r0
 8002678:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800267a:	f3ef 8310 	mrs	r3, PRIMASK
 800267e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002680:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002682:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002688:	2003      	movs	r0, #3
 800268a:	f006 ff9c 	bl	80095c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800268e:	4b34      	ldr	r3, [pc, #208]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	22ca      	movs	r2, #202	@ 0xca
 8002694:	625a      	str	r2, [r3, #36]	@ 0x24
 8002696:	4b32      	ldr	r3, [pc, #200]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2253      	movs	r2, #83	@ 0x53
 800269c:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800269e:	79fa      	ldrb	r2, [r7, #7]
 80026a0:	4930      	ldr	r1, [pc, #192]	@ (8002764 <HW_TS_Stop+0xf4>)
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	440b      	add	r3, r1
 80026ac:	330c      	adds	r3, #12
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d142      	bne.n	800273c <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2100      	movs	r1, #0
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff fc80 	bl	8001fc0 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 80026c0:	4b29      	ldr	r3, [pc, #164]	@ (8002768 <HW_TS_Stop+0xf8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d12f      	bne.n	800272c <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80026cc:	4b27      	ldr	r3, [pc, #156]	@ (800276c <HW_TS_Stop+0xfc>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d8:	d107      	bne.n	80026ea <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80026da:	bf00      	nop
 80026dc:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f8      	bne.n	80026dc <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80026ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026f8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80026fa:	bf00      	nop
 80026fc:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HW_TS_Stop+0xf0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f8      	beq.n	80026fc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800270a:	4b15      	ldr	r3, [pc, #84]	@ (8002760 <HW_TS_Stop+0xf0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <HW_TS_Stop+0xf0>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800271a:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800271c:	4b14      	ldr	r3, [pc, #80]	@ (8002770 <HW_TS_Stop+0x100>)
 800271e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002722:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002724:	2003      	movs	r0, #3
 8002726:	f006 ff76 	bl	8009616 <HAL_NVIC_ClearPendingIRQ>
 800272a:	e007      	b.n	800273c <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HW_TS_Stop+0x104>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	7cfa      	ldrb	r2, [r7, #19]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8002738:	f7ff fd5e 	bl	80021f8 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HW_TS_Stop+0xf0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	22ff      	movs	r2, #255	@ 0xff
 8002742:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002744:	2003      	movs	r0, #3
 8002746:	f006 ff30 	bl	80095aa <HAL_NVIC_EnableIRQ>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f383 8810 	msr	PRIMASK, r3
}
 8002754:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002756:	bf00      	nop
}
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000370 	.word	0x20000370
 8002764:	20000230 	.word	0x20000230
 8002768:	200002c0 	.word	0x200002c0
 800276c:	40002800 	.word	0x40002800
 8002770:	58000800 	.word	0x58000800
 8002774:	200002c1 	.word	0x200002c1

08002778 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	6039      	str	r1, [r7, #0]
 8002782:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002784:	79fa      	ldrb	r2, [r7, #7]
 8002786:	493b      	ldr	r1, [pc, #236]	@ (8002874 <HW_TS_Start+0xfc>)
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	440b      	add	r3, r1
 8002792:	330c      	adds	r3, #12
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d103      	bne.n	80027a4 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff66 	bl	8002670 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027a4:	f3ef 8310 	mrs	r3, PRIMASK
 80027a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80027aa:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80027ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80027ae:	b672      	cpsid	i
}
 80027b0:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80027b2:	2003      	movs	r0, #3
 80027b4:	f006 ff07 	bl	80095c6 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80027b8:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HW_TS_Start+0x100>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	22ca      	movs	r2, #202	@ 0xca
 80027be:	625a      	str	r2, [r3, #36]	@ 0x24
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <HW_TS_Start+0x100>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2253      	movs	r2, #83	@ 0x53
 80027c6:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 80027c8:	79fa      	ldrb	r2, [r7, #7]
 80027ca:	492a      	ldr	r1, [pc, #168]	@ (8002874 <HW_TS_Start+0xfc>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	440b      	add	r3, r1
 80027d6:	330c      	adds	r3, #12
 80027d8:	2202      	movs	r2, #2
 80027da:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80027dc:	79fa      	ldrb	r2, [r7, #7]
 80027de:	4925      	ldr	r1, [pc, #148]	@ (8002874 <HW_TS_Start+0xfc>)
 80027e0:	4613      	mov	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4413      	add	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	440b      	add	r3, r1
 80027ea:	3308      	adds	r3, #8
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80027f0:	79fa      	ldrb	r2, [r7, #7]
 80027f2:	4920      	ldr	r1, [pc, #128]	@ (8002874 <HW_TS_Start+0xfc>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	440b      	add	r3, r1
 80027fe:	3304      	adds	r3, #4
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	4618      	mov	r0, r3
 8002808:	f7ff fb30 	bl	8001e6c <linkTimer>
 800280c:	4603      	mov	r3, r0
 800280e:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <HW_TS_Start+0x104>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8002816:	4b1a      	ldr	r3, [pc, #104]	@ (8002880 <HW_TS_Start+0x108>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	7c7a      	ldrb	r2, [r7, #17]
 800281e:	429a      	cmp	r2, r3
 8002820:	d002      	beq.n	8002828 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8002822:	f7ff fce9 	bl	80021f8 <RescheduleTimerList>
 8002826:	e013      	b.n	8002850 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8002828:	79fa      	ldrb	r2, [r7, #7]
 800282a:	4912      	ldr	r1, [pc, #72]	@ (8002874 <HW_TS_Start+0xfc>)
 800282c:	4613      	mov	r3, r2
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	4413      	add	r3, r2
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	440b      	add	r3, r1
 8002836:	3308      	adds	r3, #8
 8002838:	6819      	ldr	r1, [r3, #0]
 800283a:	8a7b      	ldrh	r3, [r7, #18]
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	1ac9      	subs	r1, r1, r3
 8002840:	480c      	ldr	r0, [pc, #48]	@ (8002874 <HW_TS_Start+0xfc>)
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4403      	add	r3, r0
 800284c:	3308      	adds	r3, #8
 800284e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002850:	4b09      	ldr	r3, [pc, #36]	@ (8002878 <HW_TS_Start+0x100>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	22ff      	movs	r2, #255	@ 0xff
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002858:	2003      	movs	r0, #3
 800285a:	f006 fea6 	bl	80095aa <HAL_NVIC_EnableIRQ>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f383 8810 	msr	PRIMASK, r3
}
 8002868:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800286a:	bf00      	nop
}
 800286c:	3718      	adds	r7, #24
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	20000230 	.word	0x20000230
 8002878:	20000370 	.word	0x20000370
 800287c:	200002c0 	.word	0x200002c0
 8002880:	200002c1 	.word	0x200002c1

08002884 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	460b      	mov	r3, r1
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4798      	blx	r3

  return;
 8002896:	bf00      	nop
}
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_ACCELERO);
 80028a2:	2102      	movs	r1, #2
 80028a4:	2000      	movs	r0, #0
 80028a6:	f005 fa21 	bl	8007cec <IKS01A3_MOTION_SENSOR_Init>
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}

080028ae <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	af00      	add	r7, sp, #0
  (void)IKS01A3_MOTION_SENSOR_Init(IKS01A3_LSM6DSO_0, MOTION_GYRO);
 80028b2:	2101      	movs	r1, #1
 80028b4:	2000      	movs	r0, #0
 80028b6:	f005 fa19 	bl	8007cec <IKS01A3_MOTION_SENSOR_Init>
}
 80028ba:	bf00      	nop
 80028bc:	bd80      	pop	{r7, pc}

080028be <BSP_SENSOR_ACC_GetAxes>:
  * @brief  Get accelerometer data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_ACC_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b082      	sub	sp, #8
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Axes);
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	2102      	movs	r1, #2
 80028ca:	2000      	movs	r0, #0
 80028cc:	f005 fb0a 	bl	8007ee4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <BSP_SENSOR_GYR_GetAxes>:
  * @brief  Get gyroscope data
  * @param  Axes pointer to axes data structure
  * @retval None
  */
void BSP_SENSOR_GYR_GetAxes(IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_GetAxes(IKS01A3_LSM6DSO_0, MOTION_GYRO, Axes);
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	2101      	movs	r1, #1
 80028e4:	2000      	movs	r0, #0
 80028e6:	f005 fafd 	bl	8007ee4 <IKS01A3_MOTION_SENSOR_GetAxes>
}
 80028ea:	bf00      	nop
 80028ec:	3708      	adds	r7, #8
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <BSP_SENSOR_ACC_SetOutputDataRate>:
  * @brief  Set output data rate for accelerometer
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetOutputDataRate(float Odr)
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetOutputDataRate(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Odr);
 80028fc:	ed97 0a01 	vldr	s0, [r7, #4]
 8002900:	2102      	movs	r1, #2
 8002902:	2000      	movs	r0, #0
 8002904:	f005 fb32 	bl	8007f6c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <BSP_SENSOR_ACC_SetFullScale>:
  * @brief  Set full scale for accelerometer
  * @param  Fullscale Fullscale value to be set
  * @retval None
  */
void BSP_SENSOR_ACC_SetFullScale(int32_t Fullscale)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  (void)IKS01A3_MOTION_SENSOR_SetFullScale(IKS01A3_LSM6DSO_0, MOTION_ACCELERO, Fullscale);
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	2102      	movs	r1, #2
 800291c:	2000      	movs	r0, #0
 800291e:	f005 fb6b 	bl	8007ff8 <IKS01A3_MOTION_SENSOR_SetFullScale>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <LL_RCC_LSE_SetDriveCapability>:
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800293a:	f023 0218 	bic.w	r2, r3, #24
 800293e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <LL_AHB1_GRP1_EnableClock>:
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800295e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002962:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002964:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800296e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002972:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <LL_AHB2_GRP1_EnableClock>:
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002990:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002994:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002996:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4313      	orrs	r3, r2
 800299e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ac:	68fb      	ldr	r3, [r7, #12]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029c2:	f005 fd6d 	bl	80084a0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80029c6:	f7fe fe31 	bl	800162c <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ca:	f000 f825 	bl	8002a18 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029ce:	f000 f89b 	bl	8002b08 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80029d2:	f000 f933 	bl	8002c3c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029d6:	f000 fa09 	bl	8002dec <MX_GPIO_Init>
  MX_DMA_Init();
 80029da:	f000 f9f5 	bl	8002dc8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80029de:	f000 f97d 	bl	8002cdc <MX_USART1_UART_Init>
  MX_USB_PCD_Init();
 80029e2:	f000 f9c9 	bl	8002d78 <MX_USB_PCD_Init>
  MX_RTC_Init();
 80029e6:	f000 f945 	bl	8002c74 <MX_RTC_Init>
  MX_ADC1_Init();
 80029ea:	f000 f8c1 	bl	8002b70 <MX_ADC1_Init>
  MX_RF_Init();
 80029ee:	f000 f939 	bl	8002c64 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  MX_MEMS_Init();
 80029f2:	f7fe f96f 	bl	8000cd4 <MX_MEMS_Init>

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80029f6:	f7fe fe27 	bl	8001648 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80029fa:	f7ff f90c 	bl	8001c16 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    uint8_t valeur_start = global_payload_pointer[0];
 80029fe:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <main+0x58>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	71fb      	strb	r3, [r7, #7]

    if(valeur_start==0x01){
 8002a06:	79fb      	ldrb	r3, [r7, #7]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d1f6      	bne.n	80029fa <main+0x3e>

    MX_MEMS_Process();
 8002a0c:	f7fe f980 	bl	8000d10 <MX_MEMS_Process>
  {
 8002a10:	e7f3      	b.n	80029fa <main+0x3e>
 8002a12:	bf00      	nop
 8002a14:	20000bb8 	.word	0x20000bb8

08002a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b09a      	sub	sp, #104	@ 0x68
 8002a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a1e:	f107 0320 	add.w	r3, r7, #32
 8002a22:	2248      	movs	r2, #72	@ 0x48
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f00f fe1c 	bl	8012664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
 8002a34:	609a      	str	r2, [r3, #8]
 8002a36:	60da      	str	r2, [r3, #12]
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	615a      	str	r2, [r3, #20]
 8002a3c:	619a      	str	r2, [r3, #24]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(RCC_PLLM_DIV1);
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a4c:	60d3      	str	r3, [r2, #12]

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_MSI);
 8002a4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f023 0303 	bic.w	r3, r3, #3
 8002a58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a5c:	f043 0301 	orr.w	r3, r3, #1
 8002a60:	60d3      	str	r3, [r2, #12]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a62:	f008 fa2b 	bl	800aebc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7ff ff5f 	bl	800292a <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a6c:	4b25      	ldr	r3, [pc, #148]	@ (8002b04 <SystemClock_Config+0xec>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002a74:	4a23      	ldr	r2, [pc, #140]	@ (8002b04 <SystemClock_Config+0xec>)
 8002a76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002a7a:	6013      	str	r3, [r2, #0]
 8002a7c:	4b21      	ldr	r3, [pc, #132]	@ (8002b04 <SystemClock_Config+0xec>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8002a88:	232f      	movs	r3, #47	@ 0x2f
 8002a8a:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a8c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a90:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a92:	2301      	movs	r3, #1
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002aa0:	2340      	movs	r3, #64	@ 0x40
 8002aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002aa8:	2360      	movs	r3, #96	@ 0x60
 8002aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002aac:	2305      	movs	r3, #5
 8002aae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f008 fd93 	bl	800b5e4 <HAL_RCC_OscConfig>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002ac4:	f000 f9da 	bl	8002e7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002ac8:	236f      	movs	r3, #111	@ 0x6f
 8002aca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002acc:	2302      	movs	r3, #2
 8002ace:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002adc:	2300      	movs	r3, #0
 8002ade:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002ae4:	1d3b      	adds	r3, r7, #4
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f009 f8ef 	bl	800bccc <HAL_RCC_ClockConfig>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002af4:	f000 f9c2 	bl	8002e7c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002af8:	f009 feaa 	bl	800c850 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002afc:	bf00      	nop
 8002afe:	3768      	adds	r7, #104	@ 0x68
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	58000400 	.word	0x58000400

08002b08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b094      	sub	sp, #80	@ 0x50
 8002b0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b0e:	463b      	mov	r3, r7
 8002b10:	2250      	movs	r2, #80	@ 0x50
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f00f fda5 	bl	8012664 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8002b1a:	f44f 5354 	mov.w	r3, #13568	@ 0x3500
 8002b1e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8002b20:	2318      	movs	r3, #24
 8002b22:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8002b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002b28:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8002b2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b2e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8002b30:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002b34:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8002b36:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8002b3a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002b3c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8002b42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002b48:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b4c:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8002b52:	2300      	movs	r3, #0
 8002b54:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b56:	463b      	mov	r3, r7
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f009 fd03 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <PeriphCommonClock_Config+0x60>
  {
    Error_Handler();
 8002b64:	f000 f98a 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b68:	bf00      	nop
 8002b6a:	3750      	adds	r7, #80	@ 0x50
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b76:	463b      	mov	r3, r7
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
 8002b84:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b86:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002b88:	4a29      	ldr	r2, [pc, #164]	@ (8002c30 <MX_ADC1_Init+0xc0>)
 8002b8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002b8c:	4b27      	ldr	r3, [pc, #156]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b92:	4b26      	ldr	r3, [pc, #152]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b98:	4b24      	ldr	r3, [pc, #144]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002b9e:	4b23      	ldr	r3, [pc, #140]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ba4:	4b21      	ldr	r3, [pc, #132]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002ba6:	2204      	movs	r2, #4
 8002ba8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002baa:	4b20      	ldr	r3, [pc, #128]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bb8:	2201      	movs	r2, #1
 8002bba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bca:	4b18      	ldr	r3, [pc, #96]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bd8:	4b14      	ldr	r3, [pc, #80]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002bde:	4b13      	ldr	r3, [pc, #76]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002be6:	4811      	ldr	r0, [pc, #68]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002be8:	f005 fe78 	bl	80088dc <HAL_ADC_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002bf2:	f000 f943 	bl	8002e7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8002c34 <MX_ADC1_Init+0xc4>)
 8002bf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bfa:	2306      	movs	r3, #6
 8002bfc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8002c02:	4b0d      	ldr	r3, [pc, #52]	@ (8002c38 <MX_ADC1_Init+0xc8>)
 8002c04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002c06:	2304      	movs	r3, #4
 8002c08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c0e:	463b      	mov	r3, r7
 8002c10:	4619      	mov	r1, r3
 8002c12:	4806      	ldr	r0, [pc, #24]	@ (8002c2c <MX_ADC1_Init+0xbc>)
 8002c14:	f005 ffae 	bl	8008b74 <HAL_ADC_ConfigChannel>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002c1e:	f000 f92d 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c22:	bf00      	nop
 8002c24:	3718      	adds	r7, #24
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200002d0 	.word	0x200002d0
 8002c30:	50040000 	.word	0x50040000
 8002c34:	14f00020 	.word	0x14f00020
 8002c38:	407f0000 	.word	0x407f0000

08002c3c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002c40:	4b06      	ldr	r3, [pc, #24]	@ (8002c5c <MX_IPCC_Init+0x20>)
 8002c42:	4a07      	ldr	r2, [pc, #28]	@ (8002c60 <MX_IPCC_Init+0x24>)
 8002c44:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002c46:	4805      	ldr	r0, [pc, #20]	@ (8002c5c <MX_IPCC_Init+0x20>)
 8002c48:	f007 ffba 	bl	800abc0 <HAL_IPCC_Init>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002c52:	f000 f913 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	20000334 	.word	0x20000334
 8002c60:	58000c00 	.word	0x58000c00

08002c64 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002c68:	bf00      	nop
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c78:	4b16      	ldr	r3, [pc, #88]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <MX_RTC_Init+0x64>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c7e:	4b15      	ldr	r3, [pc, #84]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002c84:	4b13      	ldr	r3, [pc, #76]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c86:	220f      	movs	r2, #15
 8002c88:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002c8a:	4b12      	ldr	r3, [pc, #72]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c8c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8002c90:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c92:	4b10      	ldr	r3, [pc, #64]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c98:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002caa:	480a      	ldr	r0, [pc, #40]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002cac:	f009 fee8 	bl	800ca80 <HAL_RTC_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002cb6:	f000 f8e1 	bl	8002e7c <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	4805      	ldr	r0, [pc, #20]	@ (8002cd4 <MX_RTC_Init+0x60>)
 8002cc0:	f009 ffde 	bl	800cc80 <HAL_RTCEx_SetWakeUpTimer_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002cca:	f000 f8d7 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000370 	.word	0x20000370
 8002cd8:	40002800 	.word	0x40002800

08002cdc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ce0:	4b23      	ldr	r3, [pc, #140]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002ce2:	4a24      	ldr	r2, [pc, #144]	@ (8002d74 <MX_USART1_UART_Init+0x98>)
 8002ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002cee:	4b20      	ldr	r3, [pc, #128]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d00:	4b1b      	ldr	r3, [pc, #108]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d02:	220c      	movs	r2, #12
 8002d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d0e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002d12:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d14:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d20:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d26:	4812      	ldr	r0, [pc, #72]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d28:	f00a f886 	bl	800ce38 <HAL_UART_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002d32:	f000 f8a3 	bl	8002e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d36:	2100      	movs	r1, #0
 8002d38:	480d      	ldr	r0, [pc, #52]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d3a:	f00a fd4d 	bl	800d7d8 <HAL_UARTEx_SetTxFifoThreshold>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002d44:	f000 f89a 	bl	8002e7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d48:	2100      	movs	r1, #0
 8002d4a:	4809      	ldr	r0, [pc, #36]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d4c:	f00a fd82 	bl	800d854 <HAL_UARTEx_SetRxFifoThreshold>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002d56:	f000 f891 	bl	8002e7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d5a:	4805      	ldr	r0, [pc, #20]	@ (8002d70 <MX_USART1_UART_Init+0x94>)
 8002d5c:	f00a fd03 	bl	800d766 <HAL_UARTEx_DisableFifoMode>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002d66:	f000 f889 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	20000394 	.word	0x20000394
 8002d74:	40013800 	.word	0x40013800

08002d78 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8002d7c:	4b10      	ldr	r3, [pc, #64]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d7e:	4a11      	ldr	r2, [pc, #68]	@ (8002dc4 <MX_USB_PCD_Init+0x4c>)
 8002d80:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d84:	2208      	movs	r2, #8
 8002d86:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8002d88:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d90:	2202      	movs	r2, #2
 8002d92:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8002d94:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002d9a:	4b09      	ldr	r3, [pc, #36]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002da0:	4b07      	ldr	r3, [pc, #28]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002dac:	4804      	ldr	r0, [pc, #16]	@ (8002dc0 <MX_USB_PCD_Init+0x48>)
 8002dae:	f007 ff8d 	bl	800accc <HAL_PCD_Init>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8002db8:	f000 f860 	bl	8002e7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	20000488 	.word	0x20000488
 8002dc4:	40006800 	.word	0x40006800

08002dc8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002dcc:	2004      	movs	r0, #4
 8002dce:	f7ff fdc2 	bl	8002956 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002dd2:	2002      	movs	r0, #2
 8002dd4:	f7ff fdbf 	bl	8002956 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 0, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	203a      	movs	r0, #58	@ 0x3a
 8002dde:	f006 fbca 	bl	8009576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002de2:	203a      	movs	r0, #58	@ 0x3a
 8002de4:	f006 fbe1 	bl	80095aa <HAL_NVIC_EnableIRQ>

}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	2200      	movs	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
 8002dfa:	609a      	str	r2, [r3, #8]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e00:	2004      	movs	r0, #4
 8002e02:	f7ff fdc1 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e06:	2002      	movs	r0, #2
 8002e08:	f7ff fdbe 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7ff fdbb 	bl	8002988 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e12:	2008      	movs	r0, #8
 8002e14:	f7ff fdb8 	bl	8002988 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2123      	movs	r1, #35	@ 0x23
 8002e1c:	4814      	ldr	r0, [pc, #80]	@ (8002e70 <MX_GPIO_Init+0x84>)
 8002e1e:	f007 f813 	bl	8009e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002e22:	2310      	movs	r3, #16
 8002e24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002e2e:	1d3b      	adds	r3, r7, #4
 8002e30:	4619      	mov	r1, r3
 8002e32:	4810      	ldr	r0, [pc, #64]	@ (8002e74 <MX_GPIO_Init+0x88>)
 8002e34:	f006 fdba 	bl	80099ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8002e38:	2323      	movs	r3, #35	@ 0x23
 8002e3a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e44:	2300      	movs	r3, #0
 8002e46:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	1d3b      	adds	r3, r7, #4
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	4808      	ldr	r0, [pc, #32]	@ (8002e70 <MX_GPIO_Init+0x84>)
 8002e4e:	f006 fdad 	bl	80099ac <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8002e52:	2303      	movs	r3, #3
 8002e54:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5e:	1d3b      	adds	r3, r7, #4
 8002e60:	4619      	mov	r1, r3
 8002e62:	4805      	ldr	r0, [pc, #20]	@ (8002e78 <MX_GPIO_Init+0x8c>)
 8002e64:	f006 fda2 	bl	80099ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002e68:	bf00      	nop
 8002e6a:	3718      	adds	r7, #24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	48000400 	.word	0x48000400
 8002e74:	48000800 	.word	0x48000800
 8002e78:	48000c00 	.word	0x48000c00

08002e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e80:	b672      	cpsid	i
}
 8002e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <Error_Handler+0x8>

08002e88 <LL_RCC_EnableRTC>:
{
 8002e88:	b480      	push	{r7}
 8002e8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002ea0:	bf00      	nop
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <LL_AHB2_GRP1_EnableClock>:
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b085      	sub	sp, #20
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002eb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002ece:	68fb      	ldr	r3, [r7, #12]
}
 8002ed0:	bf00      	nop
 8002ed2:	3714      	adds	r7, #20
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_AHB3_GRP1_EnableClock>:
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002ee4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ee8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002eea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002ef8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	4013      	ands	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f00:	68fb      	ldr	r3, [r7, #12]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f1a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f32:	68fb      	ldr	r3, [r7, #12]
}
 8002f34:	bf00      	nop
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr

08002f40 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8002f48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002f5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4013      	ands	r3, r2
 8002f62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f64:	68fb      	ldr	r3, [r7, #12]
}
 8002f66:	bf00      	nop
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr

08002f72 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002f76:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002f7a:	f7ff ffaf 	bl	8002edc <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2100      	movs	r1, #0
 8002f82:	202e      	movs	r0, #46	@ 0x2e
 8002f84:	f006 faf7 	bl	8009576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002f88:	202e      	movs	r0, #46	@ 0x2e
 8002f8a:	f006 fb0e 	bl	80095aa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8e:	bf00      	nop
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	605a      	str	r2, [r3, #4]
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
 8002faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe8 <HAL_ADC_MspInit+0x54>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d113      	bne.n	8002fde <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002fb6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002fba:	f7ff ff76 	bl	8002eaa <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f7ff ff73 	bl	8002eaa <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002fda:	f006 fce7 	bl	80099ac <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fde:	bf00      	nop
 8002fe0:	3720      	adds	r7, #32
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	50040000 	.word	0x50040000

08002fec <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_IPCC_MspInit+0x44>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d113      	bne.n	8003026 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002ffe:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003002:	f7ff ff6b 	bl	8002edc <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003006:	2200      	movs	r2, #0
 8003008:	2100      	movs	r1, #0
 800300a:	202c      	movs	r0, #44	@ 0x2c
 800300c:	f006 fab3 	bl	8009576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003010:	202c      	movs	r0, #44	@ 0x2c
 8003012:	f006 faca 	bl	80095aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003016:	2200      	movs	r2, #0
 8003018:	2100      	movs	r1, #0
 800301a:	202d      	movs	r0, #45	@ 0x2d
 800301c:	f006 faab 	bl	8009576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8003020:	202d      	movs	r0, #45	@ 0x2d
 8003022:	f006 fac2 	bl	80095aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	58000c00 	.word	0x58000c00

08003034 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b096      	sub	sp, #88	@ 0x58
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800303c:	f107 0308 	add.w	r3, r7, #8
 8003040:	2250      	movs	r2, #80	@ 0x50
 8003042:	2100      	movs	r1, #0
 8003044:	4618      	mov	r0, r3
 8003046:	f00f fb0d 	bl	8012664 <memset>
  if(hrtc->Instance==RTC)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a13      	ldr	r2, [pc, #76]	@ (800309c <HAL_RTC_MspInit+0x68>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d11f      	bne.n	8003094 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8003054:	f007 ff32 	bl	800aebc <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003058:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800305c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800305e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003064:	f107 0308 	add.w	r3, r7, #8
 8003068:	4618      	mov	r0, r3
 800306a:	f009 fa7b 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8003074:	f7ff ff02 	bl	8002e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003078:	f7ff ff06 	bl	8002e88 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800307c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8003080:	f7ff ff45 	bl	8002f0e <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 8003084:	2200      	movs	r2, #0
 8003086:	2100      	movs	r1, #0
 8003088:	2003      	movs	r0, #3
 800308a:	f006 fa74 	bl	8009576 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 800308e:	2003      	movs	r0, #3
 8003090:	f006 fa8b 	bl	80095aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003094:	bf00      	nop
 8003096:	3758      	adds	r7, #88	@ 0x58
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40002800 	.word	0x40002800

080030a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b09c      	sub	sp, #112	@ 0x70
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030b8:	f107 030c 	add.w	r3, r7, #12
 80030bc:	2250      	movs	r2, #80	@ 0x50
 80030be:	2100      	movs	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f00f facf 	bl	8012664 <memset>
  if(huart->Instance==USART1)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003174 <HAL_UART_MspInit+0xd4>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d14d      	bne.n	800316c <HAL_UART_MspInit+0xcc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030d8:	f107 030c 	add.w	r3, r7, #12
 80030dc:	4618      	mov	r0, r3
 80030de:	f009 fa41 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d001      	beq.n	80030ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030e8:	f7ff fec8 	bl	8002e7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80030ec:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80030f0:	f7ff ff26 	bl	8002f40 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030f4:	2002      	movs	r0, #2
 80030f6:	f7ff fed8 	bl	8002eaa <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80030fa:	23c0      	movs	r3, #192	@ 0xc0
 80030fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003102:	2301      	movs	r3, #1
 8003104:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800310a:	2307      	movs	r3, #7
 800310c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8003112:	4619      	mov	r1, r3
 8003114:	4818      	ldr	r0, [pc, #96]	@ (8003178 <HAL_UART_MspInit+0xd8>)
 8003116:	f006 fc49 	bl	80099ac <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 800311a:	4b18      	ldr	r3, [pc, #96]	@ (800317c <HAL_UART_MspInit+0xdc>)
 800311c:	4a18      	ldr	r2, [pc, #96]	@ (8003180 <HAL_UART_MspInit+0xe0>)
 800311e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003120:	4b16      	ldr	r3, [pc, #88]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003122:	220f      	movs	r2, #15
 8003124:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003126:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003128:	2210      	movs	r2, #16
 800312a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800312c:	4b13      	ldr	r3, [pc, #76]	@ (800317c <HAL_UART_MspInit+0xdc>)
 800312e:	2200      	movs	r2, #0
 8003130:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003132:	4b12      	ldr	r3, [pc, #72]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003134:	2280      	movs	r2, #128	@ 0x80
 8003136:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003138:	4b10      	ldr	r3, [pc, #64]	@ (800317c <HAL_UART_MspInit+0xdc>)
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800313e:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003144:	4b0d      	ldr	r3, [pc, #52]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003146:	2200      	movs	r2, #0
 8003148:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800314a:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <HAL_UART_MspInit+0xdc>)
 800314c:	2200      	movs	r2, #0
 800314e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003150:	480a      	ldr	r0, [pc, #40]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003152:	f006 fa6f 	bl	8009634 <HAL_DMA_Init>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 800315c:	f7ff fe8e 	bl	8002e7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a06      	ldr	r2, [pc, #24]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003164:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <HAL_UART_MspInit+0xdc>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800316c:	bf00      	nop
 800316e:	3770      	adds	r7, #112	@ 0x70
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40013800 	.word	0x40013800
 8003178:	48000400 	.word	0x48000400
 800317c:	20000428 	.word	0x20000428
 8003180:	40020444 	.word	0x40020444

08003184 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b088      	sub	sp, #32
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]
 800319a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a0f      	ldr	r2, [pc, #60]	@ (80031e0 <HAL_PCD_MspInit+0x5c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d118      	bne.n	80031d8 <HAL_PCD_MspInit+0x54>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	2001      	movs	r0, #1
 80031a8:	f7ff fe7f 	bl	8002eaa <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80031ac:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b2:	2302      	movs	r3, #2
 80031b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 80031be:	230a      	movs	r3, #10
 80031c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c2:	f107 030c 	add.w	r3, r7, #12
 80031c6:	4619      	mov	r1, r3
 80031c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031cc:	f006 fbee 	bl	80099ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80031d0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80031d4:	f7ff fe9b 	bl	8002f0e <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40006800 	.word	0x40006800

080031e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031e8:	bf00      	nop
 80031ea:	e7fd      	b.n	80031e8 <NMI_Handler+0x4>

080031ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <HardFault_Handler+0x4>

080031f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <MemManage_Handler+0x4>

080031fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <BusFault_Handler+0x4>

08003204 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <UsageFault_Handler+0x4>

0800320c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003210:	bf00      	nop
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800321a:	b480      	push	{r7}
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr

08003236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003236:	b580      	push	{r7, lr}
 8003238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800323a:	f005 f98b 	bl	8008554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}

08003242 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003242:	b580      	push	{r7, lr}
 8003244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003246:	f7ff f871 	bl	800232c <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800324a:	bf00      	nop
 800324c:	bd80      	pop	{r7, pc}

0800324e <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800324e:	b580      	push	{r7, lr}
 8003250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003252:	f00e fc3b 	bl	8011acc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003256:	bf00      	nop
 8003258:	bd80      	pop	{r7, pc}

0800325a <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800325e:	f00e fc6b 	bl	8011b38 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}

08003266 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800326a:	f006 fe05 	bl	8009e78 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003278:	4802      	ldr	r0, [pc, #8]	@ (8003284 <DMA2_Channel4_IRQHandler+0x10>)
 800327a:	f006 fa83 	bl	8009784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800327e:	bf00      	nop
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	20000428 	.word	0x20000428

08003288 <LL_AHB2_GRP1_EnableClock>:
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003294:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003296:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4313      	orrs	r3, r2
 800329e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032ac:	68fb      	ldr	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <LL_APB1_GRP1_EnableClock>:
{
 80032ba:	b480      	push	{r7}
 80032bc:	b085      	sub	sp, #20
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80032c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80032d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4013      	ands	r3, r2
 80032dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80032de:	68fb      	ldr	r3, [r7, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <LL_APB1_GRP1_DisableClock>:
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80032f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80032f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003302:	4013      	ands	r3, r2
 8003304:	658b      	str	r3, [r1, #88]	@ 0x58
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 800331e:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <BSP_I2C1_Init+0x70>)
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <BSP_I2C1_Init+0x74>)
 8003322:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8003324:	4b19      	ldr	r3, [pc, #100]	@ (800338c <BSP_I2C1_Init+0x78>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	1c5a      	adds	r2, r3, #1
 800332a:	4918      	ldr	r1, [pc, #96]	@ (800338c <BSP_I2C1_Init+0x78>)
 800332c:	600a      	str	r2, [r1, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d122      	bne.n	8003378 <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8003332:	4814      	ldr	r0, [pc, #80]	@ (8003384 <BSP_I2C1_Init+0x70>)
 8003334:	f007 f8d0 	bl	800a4d8 <HAL_I2C_GetState>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11c      	bne.n	8003378 <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800333e:	4811      	ldr	r0, [pc, #68]	@ (8003384 <BSP_I2C1_Init+0x70>)
 8003340:	f000 f8fe 	bl	8003540 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d116      	bne.n	8003378 <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800334a:	480e      	ldr	r0, [pc, #56]	@ (8003384 <BSP_I2C1_Init+0x70>)
 800334c:	f000 f8b4 	bl	80034b8 <MX_I2C1_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8003356:	f06f 0307 	mvn.w	r3, #7
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	e00c      	b.n	8003378 <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800335e:	2100      	movs	r1, #0
 8003360:	4808      	ldr	r0, [pc, #32]	@ (8003384 <BSP_I2C1_Init+0x70>)
 8003362:	f007 fb95 	bl	800aa90 <HAL_I2CEx_ConfigAnalogFilter>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800336c:	f06f 0307 	mvn.w	r3, #7
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	e001      	b.n	8003378 <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8003374:	2300      	movs	r3, #0
 8003376:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8003378:	687b      	ldr	r3, [r7, #4]
}
 800337a:	4618      	mov	r0, r3
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000764 	.word	0x20000764
 8003388:	40005400 	.word	0x40005400
 800338c:	200007b8 	.word	0x200007b8

08003390 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8003396:	2300      	movs	r3, #0
 8003398:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 800339a:	4b0f      	ldr	r3, [pc, #60]	@ (80033d8 <BSP_I2C1_DeInit+0x48>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d014      	beq.n	80033cc <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80033a2:	4b0d      	ldr	r3, [pc, #52]	@ (80033d8 <BSP_I2C1_DeInit+0x48>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	4a0b      	ldr	r2, [pc, #44]	@ (80033d8 <BSP_I2C1_DeInit+0x48>)
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <BSP_I2C1_DeInit+0x48>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10b      	bne.n	80033cc <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 80033b4:	4809      	ldr	r0, [pc, #36]	@ (80033dc <BSP_I2C1_DeInit+0x4c>)
 80033b6:	f000 f907 	bl	80035c8 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 80033ba:	4808      	ldr	r0, [pc, #32]	@ (80033dc <BSP_I2C1_DeInit+0x4c>)
 80033bc:	f006 fe1b 	bl	8009ff6 <HAL_I2C_DeInit>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d002      	beq.n	80033cc <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80033c6:	f06f 0307 	mvn.w	r3, #7
 80033ca:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80033cc:	687b      	ldr	r3, [r7, #4]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	200007b8 	.word	0x200007b8
 80033dc:	20000764 	.word	0x20000764

080033e0 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af04      	add	r7, sp, #16
 80033e6:	60ba      	str	r2, [r7, #8]
 80033e8:	461a      	mov	r2, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	81fb      	strh	r3, [r7, #14]
 80033ee:	460b      	mov	r3, r1
 80033f0:	81bb      	strh	r3, [r7, #12]
 80033f2:	4613      	mov	r3, r2
 80033f4:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80033fa:	89ba      	ldrh	r2, [r7, #12]
 80033fc:	89f9      	ldrh	r1, [r7, #14]
 80033fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003402:	9302      	str	r3, [sp, #8]
 8003404:	88fb      	ldrh	r3, [r7, #6]
 8003406:	9301      	str	r3, [sp, #4]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2301      	movs	r3, #1
 800340e:	480c      	ldr	r0, [pc, #48]	@ (8003440 <BSP_I2C1_WriteReg+0x60>)
 8003410:	f006 fe34 	bl	800a07c <HAL_I2C_Mem_Write>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800341a:	4809      	ldr	r0, [pc, #36]	@ (8003440 <BSP_I2C1_WriteReg+0x60>)
 800341c:	f007 f86a 	bl	800a4f4 <HAL_I2C_GetError>
 8003420:	4603      	mov	r3, r0
 8003422:	2b04      	cmp	r3, #4
 8003424:	d103      	bne.n	800342e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8003426:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	e002      	b.n	8003434 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800342e:	f06f 0303 	mvn.w	r3, #3
 8003432:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003434:	697b      	ldr	r3, [r7, #20]
}
 8003436:	4618      	mov	r0, r3
 8003438:	3718      	adds	r7, #24
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000764 	.word	0x20000764

08003444 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af04      	add	r7, sp, #16
 800344a:	60ba      	str	r2, [r7, #8]
 800344c:	461a      	mov	r2, r3
 800344e:	4603      	mov	r3, r0
 8003450:	81fb      	strh	r3, [r7, #14]
 8003452:	460b      	mov	r3, r1
 8003454:	81bb      	strh	r3, [r7, #12]
 8003456:	4613      	mov	r3, r2
 8003458:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800345e:	89ba      	ldrh	r2, [r7, #12]
 8003460:	89f9      	ldrh	r1, [r7, #14]
 8003462:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003466:	9302      	str	r3, [sp, #8]
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	9301      	str	r3, [sp, #4]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	2301      	movs	r3, #1
 8003472:	480c      	ldr	r0, [pc, #48]	@ (80034a4 <BSP_I2C1_ReadReg+0x60>)
 8003474:	f006 ff16 	bl	800a2a4 <HAL_I2C_Mem_Read>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00c      	beq.n	8003498 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800347e:	4809      	ldr	r0, [pc, #36]	@ (80034a4 <BSP_I2C1_ReadReg+0x60>)
 8003480:	f007 f838 	bl	800a4f4 <HAL_I2C_GetError>
 8003484:	4603      	mov	r3, r0
 8003486:	2b04      	cmp	r3, #4
 8003488:	d103      	bne.n	8003492 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800348a:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e002      	b.n	8003498 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003492:	f06f 0303 	mvn.w	r3, #3
 8003496:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003498:	697b      	ldr	r3, [r7, #20]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	20000764 	.word	0x20000764

080034a8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80034ac:	f005 f866 	bl	800857c <HAL_GetTick>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	bd80      	pop	{r7, pc}
	...

080034b8 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80034c0:	2300      	movs	r3, #0
 80034c2:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003538 <MX_I2C1_Init+0x80>)
 80034c8:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00707CBB;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1b      	ldr	r2, [pc, #108]	@ (800353c <MX_I2C1_Init+0x84>)
 80034ce:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f006 fce0 	bl	8009ec0 <HAL_I2C_Init>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800350a:	2100      	movs	r1, #0
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f007 fabf 	bl	800aa90 <HAL_I2CEx_ConfigAnalogFilter>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 800351c:	2100      	movs	r1, #0
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f007 fb01 	bl	800ab26 <HAL_I2CEx_ConfigDigitalFilter>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40005400 	.word	0x40005400
 800353c:	00707cbb 	.word	0x00707cbb

08003540 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b09c      	sub	sp, #112	@ 0x70
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003548:	f107 030c 	add.w	r3, r7, #12
 800354c:	2250      	movs	r2, #80	@ 0x50
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f00f f887 	bl	8012664 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003556:	2304      	movs	r3, #4
 8003558:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800355a:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800355e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4618      	mov	r0, r3
 8003566:	f008 fffd 	bl	800c564 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800356a:	2002      	movs	r0, #2
 800356c:	f7ff fe8c 	bl	8003288 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003570:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003574:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003576:	2312      	movs	r3, #18
 8003578:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357e:	2300      	movs	r3, #0
 8003580:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 8003582:	2304      	movs	r3, #4
 8003584:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003586:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800358a:	4619      	mov	r1, r3
 800358c:	480d      	ldr	r0, [pc, #52]	@ (80035c4 <I2C1_MspInit+0x84>)
 800358e:	f006 fa0d 	bl	80099ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 8003592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003596:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003598:	2312      	movs	r3, #18
 800359a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359c:	2300      	movs	r3, #0
 800359e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a0:	2300      	movs	r3, #0
 80035a2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80035a4:	2304      	movs	r3, #4
 80035a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80035a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80035ac:	4619      	mov	r1, r3
 80035ae:	4805      	ldr	r0, [pc, #20]	@ (80035c4 <I2C1_MspInit+0x84>)
 80035b0:	f006 f9fc 	bl	80099ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035b4:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80035b8:	f7ff fe7f 	bl	80032ba <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80035bc:	bf00      	nop
 80035be:	3770      	adds	r7, #112	@ 0x70
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	48000400 	.word	0x48000400

080035c8 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80035d0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80035d4:	f7ff fe8a 	bl	80032ec <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 80035d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80035dc:	4805      	ldr	r0, [pc, #20]	@ (80035f4 <I2C1_MspDeInit+0x2c>)
 80035de:	f006 fb55 	bl	8009c8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 80035e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80035e6:	4803      	ldr	r0, [pc, #12]	@ (80035f4 <I2C1_MspDeInit+0x2c>)
 80035e8:	f006 fb50 	bl	8009c8c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 80035ec:	bf00      	nop
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	48000400 	.word	0x48000400

080035f8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	e00a      	b.n	8003620 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800360a:	f3af 8000 	nop.w
 800360e:	4601      	mov	r1, r0
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	60ba      	str	r2, [r7, #8]
 8003616:	b2ca      	uxtb	r2, r1
 8003618:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	3301      	adds	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	dbf0      	blt.n	800360a <_read+0x12>
  }

  return len;
 8003628:	687b      	ldr	r3, [r7, #4]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3718      	adds	r7, #24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800363a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800365a:	605a      	str	r2, [r3, #4]
  return 0;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <_isatty>:

int _isatty(int file)
{
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003672:	2301      	movs	r3, #1
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3714      	adds	r7, #20
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
	...

0800369c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036a4:	4a14      	ldr	r2, [pc, #80]	@ (80036f8 <_sbrk+0x5c>)
 80036a6:	4b15      	ldr	r3, [pc, #84]	@ (80036fc <_sbrk+0x60>)
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036b0:	4b13      	ldr	r3, [pc, #76]	@ (8003700 <_sbrk+0x64>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <_sbrk+0x64>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <_sbrk+0x68>)
 80036bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <_sbrk+0x64>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4413      	add	r3, r2
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d207      	bcs.n	80036dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036cc:	f00f f82e 	bl	801272c <__errno>
 80036d0:	4603      	mov	r3, r0
 80036d2:	220c      	movs	r2, #12
 80036d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036d6:	f04f 33ff 	mov.w	r3, #4294967295
 80036da:	e009      	b.n	80036f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036dc:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <_sbrk+0x64>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036e2:	4b07      	ldr	r3, [pc, #28]	@ (8003700 <_sbrk+0x64>)
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4413      	add	r3, r2
 80036ea:	4a05      	ldr	r2, [pc, #20]	@ (8003700 <_sbrk+0x64>)
 80036ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036ee:	68fb      	ldr	r3, [r7, #12]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	20030000 	.word	0x20030000
 80036fc:	00000400 	.word	0x00000400
 8003700:	200007bc 	.word	0x200007bc
 8003704:	20000db8 	.word	0x20000db8

08003708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800370c:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <SystemInit+0x98>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	4a23      	ldr	r2, [pc, #140]	@ (80037a0 <SystemInit+0x98>)
 8003714:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003718:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003726:	f043 0301 	orr.w	r3, r3, #1
 800372a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800372c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003730:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8003734:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8003736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003740:	4b18      	ldr	r3, [pc, #96]	@ (80037a4 <SystemInit+0x9c>)
 8003742:	4013      	ands	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8003746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800374a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800374e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003752:	f023 0305 	bic.w	r3, r3, #5
 8003756:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800375a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800375e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003762:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003766:	f023 0301 	bic.w	r3, r3, #1
 800376a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003772:	4a0d      	ldr	r2, [pc, #52]	@ (80037a8 <SystemInit+0xa0>)
 8003774:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8003776:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800377a:	4a0b      	ldr	r2, [pc, #44]	@ (80037a8 <SystemInit+0xa0>)
 800377c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800377e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003788:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800378c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800378e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003792:	2200      	movs	r2, #0
 8003794:	619a      	str	r2, [r3, #24]
}
 8003796:	bf00      	nop
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00
 80037a4:	faf6fefb 	.word	0xfaf6fefb
 80037a8:	22041000 	.word	0x22041000

080037ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80037ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037b0:	3304      	adds	r3, #4

080037b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80037b6:	d3f9      	bcc.n	80037ac <CopyDataInit>
  bx lr
 80037b8:	4770      	bx	lr

080037ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80037ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80037bc:	3004      	adds	r0, #4

080037be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80037be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80037c0:	d3fb      	bcc.n	80037ba <FillZerobss>
  bx lr
 80037c2:	4770      	bx	lr

080037c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80037c4:	480c      	ldr	r0, [pc, #48]	@ (80037f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80037c8:	f7ff ff9e 	bl	8003708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80037cc:	480b      	ldr	r0, [pc, #44]	@ (80037fc <LoopForever+0x6>)
 80037ce:	490c      	ldr	r1, [pc, #48]	@ (8003800 <LoopForever+0xa>)
 80037d0:	4a0c      	ldr	r2, [pc, #48]	@ (8003804 <LoopForever+0xe>)
 80037d2:	2300      	movs	r3, #0
 80037d4:	f7ff ffed 	bl	80037b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80037d8:	480b      	ldr	r0, [pc, #44]	@ (8003808 <LoopForever+0x12>)
 80037da:	490c      	ldr	r1, [pc, #48]	@ (800380c <LoopForever+0x16>)
 80037dc:	4a0c      	ldr	r2, [pc, #48]	@ (8003810 <LoopForever+0x1a>)
 80037de:	2300      	movs	r3, #0
 80037e0:	f7ff ffe7 	bl	80037b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80037e4:	480b      	ldr	r0, [pc, #44]	@ (8003814 <LoopForever+0x1e>)
 80037e6:	490c      	ldr	r1, [pc, #48]	@ (8003818 <LoopForever+0x22>)
 80037e8:	2300      	movs	r3, #0
 80037ea:	f7ff ffe8 	bl	80037be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80037ee:	f00e ffa3 	bl	8012738 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80037f2:	f7ff f8e3 	bl	80029bc <main>

080037f6 <LoopForever>:

LoopForever:
  b LoopForever
 80037f6:	e7fe      	b.n	80037f6 <LoopForever>
  ldr   r0, =_estack
 80037f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80037fc:	20000008 	.word	0x20000008
 8003800:	2000016c 	.word	0x2000016c
 8003804:	08015138 	.word	0x08015138
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8003808:	200301e4 	.word	0x200301e4
 800380c:	20030a67 	.word	0x20030a67
 8003810:	080152e2 	.word	0x080152e2
  INIT_BSS _sbss, _ebss
 8003814:	200001b8 	.word	0x200001b8
 8003818:	20000db4 	.word	0x20000db4

0800381c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800381c:	e7fe      	b.n	800381c <ADC1_IRQHandler>
	...

08003820 <LIS2DW12_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_RegisterBusIO(LIS2DW12_Object_t *pObj, LIS2DW12_IO_t *pIO)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <LIS2DW12_RegisterBusIO+0x1c>
  {
    ret = LIS2DW12_ERROR;
 8003834:	f04f 33ff 	mov.w	r3, #4294967295
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	e051      	b.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685a      	ldr	r2, [r3, #4]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	7b1a      	ldrb	r2, [r3, #12]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	691a      	ldr	r2, [r3, #16]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	695a      	ldr	r2, [r3, #20]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	699a      	ldr	r2, [r3, #24]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <LIS2DW12_RegisterBusIO+0xcc>)
 8003878:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a1c      	ldr	r2, [pc, #112]	@ (80038f0 <LIS2DW12_RegisterBusIO+0xd0>)
 800387e:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d103      	bne.n	800389e <LIS2DW12_RegisterBusIO+0x7e>
    {
      ret = LIS2DW12_ERROR;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e020      	b.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LIS2DW12_OK)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <LIS2DW12_RegisterBusIO+0x92>
    {
      ret = LIS2DW12_ERROR;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e016      	b.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LIS2DW12_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d112      	bne.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10d      	bne.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x05;
 80038c4:	2305      	movs	r3, #5
 80038c6:	72fb      	strb	r3, [r7, #11]

          if (LIS2DW12_Write_Reg(pObj, LIS2DW12_CTRL2, data) != LIS2DW12_OK)
 80038c8:	7afb      	ldrb	r3, [r7, #11]
 80038ca:	461a      	mov	r2, r3
 80038cc:	2121      	movs	r1, #33	@ 0x21
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fcc1 	bl	8004256 <LIS2DW12_Write_Reg>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d002      	beq.n	80038e0 <LIS2DW12_RegisterBusIO+0xc0>
          {
            ret = LIS2DW12_ERROR;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80038e0:	68fb      	ldr	r3, [r7, #12]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	080045e9 	.word	0x080045e9
 80038f0:	0800461f 	.word	0x0800461f

080038f4 <LIS2DW12_Init>:
  * @brief  Initialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Init(LIS2DW12_Object_t *pObj)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lis2dw12_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3320      	adds	r3, #32
 8003900:	2101      	movs	r1, #1
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f9cb 	bl	8004c9e <lis2dw12_auto_increment_set>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <LIS2DW12_Init+0x20>
  {
    return LIS2DW12_ERROR;
 800390e:	f04f 33ff 	mov.w	r3, #4294967295
 8003912:	e04b      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  /* Enable BDU */
  if (lis2dw12_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2DW12_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	3320      	adds	r3, #32
 8003918:	2101      	movs	r1, #1
 800391a:	4618      	mov	r0, r3
 800391c:	f001 f8e2 	bl	8004ae4 <lis2dw12_block_data_update_set>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d002      	beq.n	800392c <LIS2DW12_Init+0x38>
  {
    return LIS2DW12_ERROR;
 8003926:	f04f 33ff 	mov.w	r3, #4294967295
 800392a:	e03f      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  /* FIFO mode selection */
  if (lis2dw12_fifo_mode_set(&(pObj->Ctx), LIS2DW12_BYPASS_MODE) != LIS2DW12_OK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3320      	adds	r3, #32
 8003930:	2100      	movs	r1, #0
 8003932:	4618      	mov	r0, r3
 8003934:	f001 f9d9 	bl	8004cea <lis2dw12_fifo_mode_set>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <LIS2DW12_Init+0x50>
  {
    return LIS2DW12_ERROR;
 800393e:	f04f 33ff 	mov.w	r3, #4294967295
 8003942:	e033      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  /* Power mode selection */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), LIS2DW12_HIGH_PERFORMANCE) != LIS2DW12_OK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3320      	adds	r3, #32
 8003948:	2104      	movs	r1, #4
 800394a:	4618      	mov	r0, r3
 800394c:	f000 feb2 	bl	80046b4 <lis2dw12_power_mode_set>
 8003950:	4603      	mov	r3, r0
 8003952:	2b00      	cmp	r3, #0
 8003954:	d002      	beq.n	800395c <LIS2DW12_Init+0x68>
  {
    return LIS2DW12_ERROR;
 8003956:	f04f 33ff 	mov.w	r3, #4294967295
 800395a:	e027      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  /* Select default output data rate. */
  pObj->acc_odr = 100.0f;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a15      	ldr	r2, [pc, #84]	@ (80039b4 <LIS2DW12_Init+0xc0>)
 8003960:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Select default operating mode. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Select default low noise (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3320      	adds	r3, #32
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f000 ffa3 	bl	80048c4 <lis2dw12_data_rate_set>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d002      	beq.n	800398a <LIS2DW12_Init+0x96>
  {
    return LIS2DW12_ERROR;
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	e010      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  /* Full scale selection. */
  if (lis2dw12_full_scale_set(&(pObj->Ctx), LIS2DW12_2g) != LIS2DW12_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3320      	adds	r3, #32
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f001 f8cd 	bl	8004b30 <lis2dw12_full_scale_set>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <LIS2DW12_Init+0xae>
  {
    return LIS2DW12_ERROR;
 800399c:	f04f 33ff 	mov.w	r3, #4294967295
 80039a0:	e004      	b.n	80039ac <LIS2DW12_Init+0xb8>
  }

  pObj->is_initialized = 1;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3708      	adds	r7, #8
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	42c80000 	.word	0x42c80000

080039b8 <LIS2DW12_DeInit>:
  * @brief  Deinitialize the LIS2DW12 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_DeInit(LIS2DW12_Object_t *pObj)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b082      	sub	sp, #8
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2DW12_ACC_Disable(pObj) != LIS2DW12_OK)
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f888 	bl	8003ad6 <LIS2DW12_ACC_Disable>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <LIS2DW12_DeInit+0x1a>
  {
    return LIS2DW12_ERROR;
 80039cc:	f04f 33ff 	mov.w	r3, #4294967295
 80039d0:	e010      	b.n	80039f4 <LIS2DW12_DeInit+0x3c>
  }

  /* Reset output data rate. */
  pObj->acc_odr = 0.0f;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f04f 0200 	mov.w	r2, #0
 80039d8:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Reset operating mode to default value. */
  pObj->acc_operating_mode = LIS2DW12_HIGH_PERFORMANCE_MODE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  /* Reset low noise to default value (disabled). */
  pObj->acc_low_noise = LIS2DW12_LOW_NOISE_DISABLE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->is_initialized = 0;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2DW12_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <LIS2DW12_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ReadID(LIS2DW12_Object_t *pObj, uint8_t *Id)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  if (lis2dw12_device_id_get(&(pObj->Ctx), Id) != LIS2DW12_OK)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3320      	adds	r3, #32
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f001 f935 	bl	8004c7c <lis2dw12_device_id_get>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <LIS2DW12_ReadID+0x22>
  {
    return LIS2DW12_ERROR;
 8003a18:	f04f 33ff 	mov.w	r3, #4294967295
 8003a1c:	e000      	b.n	8003a20 <LIS2DW12_ReadID+0x24>
  }

  return LIS2DW12_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <LIS2DW12_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2DW12 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_GetCapabilities(LIS2DW12_Object_t *pObj, LIS2DW12_Capabilities_t *Capabilities)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	2200      	movs	r2, #0
 8003a42:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2200      	movs	r2, #0
 8003a48:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2210      	movs	r2, #16
 8003a54:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 1600.0f;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	4a06      	ldr	r2, [pc, #24]	@ (8003a80 <LIS2DW12_GetCapabilities+0x58>)
 8003a68:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]
  return LIS2DW12_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	44c80000 	.word	0x44c80000

08003a84 <LIS2DW12_ACC_Enable>:
  * @brief  Enable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Enable(LIS2DW12_Object_t *pObj)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <LIS2DW12_ACC_Enable+0x16>
  {
    return LIS2DW12_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	e019      	b.n	8003ace <LIS2DW12_ACC_Enable+0x4a>
  }

  /* Output data rate selection. */
  if (LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, pObj->acc_odr, pObj->acc_operating_mode,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 1038 	ldrb.w	r1, [r3, #56]	@ 0x38
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003aac:	461a      	mov	r2, r3
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 fbea 	bl	800428c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d002      	beq.n	8003ac4 <LIS2DW12_ACC_Enable+0x40>
                                                  pObj->acc_low_noise) != LIS2DW12_OK)
  {
    return LIS2DW12_ERROR;
 8003abe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac2:	e004      	b.n	8003ace <LIS2DW12_ACC_Enable+0x4a>
  }

  pObj->acc_is_enabled = 1;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <LIS2DW12_ACC_Disable>:
  * @brief  Disable the LIS2DW12 accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_Disable(LIS2DW12_Object_t *pObj)
{
 8003ad6:	b580      	push	{r7, lr}
 8003ad8:	b082      	sub	sp, #8
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d101      	bne.n	8003aec <LIS2DW12_ACC_Disable+0x16>
  {
    return LIS2DW12_OK;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	e010      	b.n	8003b0e <LIS2DW12_ACC_Disable+0x38>
  }

  /* Output data rate selection - power down. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), LIS2DW12_XL_ODR_OFF) != LIS2DW12_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3320      	adds	r3, #32
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fee6 	bl	80048c4 <lis2dw12_data_rate_set>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <LIS2DW12_ACC_Disable+0x2e>
  {
    return LIS2DW12_ERROR;
 8003afe:	f04f 33ff 	mov.w	r3, #4294967295
 8003b02:	e004      	b.n	8003b0e <LIS2DW12_ACC_Disable+0x38>
  }

  pObj->acc_is_enabled = 0;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2DW12_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
	...

08003b18 <LIS2DW12_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetSensitivity(LIS2DW12_Object_t *pObj, float *Sensitivity)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t full_scale;
  lis2dw12_mode_t mode;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &full_scale) != LIS2DW12_OK)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3320      	adds	r3, #32
 8003b2a:	f107 020b 	add.w	r2, r7, #11
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 f823 	bl	8004b7c <lis2dw12_full_scale_get>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d002      	beq.n	8003b42 <LIS2DW12_ACC_GetSensitivity+0x2a>
  {
    return LIS2DW12_ERROR;
 8003b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b40:	e080      	b.n	8003c44 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3320      	adds	r3, #32
 8003b46:	f107 020a 	add.w	r2, r7, #10
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fdff 	bl	8004750 <lis2dw12_power_mode_get>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d002      	beq.n	8003b5e <LIS2DW12_ACC_GetSensitivity+0x46>
  {
    return LIS2DW12_ERROR;
 8003b58:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5c:	e072      	b.n	8003c44 <LIS2DW12_ACC_GetSensitivity+0x12c>
  }

  switch (mode)
 8003b5e:	7abb      	ldrb	r3, [r7, #10]
 8003b60:	2b1b      	cmp	r3, #27
 8003b62:	bf8c      	ite	hi
 8003b64:	2201      	movhi	r2, #1
 8003b66:	2200      	movls	r2, #0
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	2a00      	cmp	r2, #0
 8003b6c:	d162      	bne.n	8003c34 <LIS2DW12_ACC_GetSensitivity+0x11c>
 8003b6e:	2201      	movs	r2, #1
 8003b70:	409a      	lsls	r2, r3
 8003b72:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8003b76:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	bf14      	ite	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	2300      	moveq	r3, #0
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d12f      	bne.n	8003be8 <LIS2DW12_ACC_GetSensitivity+0xd0>
 8003b88:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	bf14      	ite	ne
 8003b90:	2301      	movne	r3, #1
 8003b92:	2300      	moveq	r3, #0
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04c      	beq.n	8003c34 <LIS2DW12_ACC_GetSensitivity+0x11c>
  {
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      switch (full_scale)
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d81b      	bhi.n	8003bd8 <LIS2DW12_ACC_GetSensitivity+0xc0>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <LIS2DW12_ACC_GetSensitivity+0x90>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bc1 	.word	0x08003bc1
 8003bb0:	08003bc9 	.word	0x08003bc9
 8003bb4:	08003bd1 	.word	0x08003bd1
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	4a24      	ldr	r2, [pc, #144]	@ (8003c4c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003bbc:	601a      	str	r2, [r3, #0]
          break;
 8003bbe:	e012      	b.n	8003be6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003bc4:	601a      	str	r2, [r3, #0]
          break;
 8003bc6:	e00e      	b.n	8003be6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	4a22      	ldr	r2, [pc, #136]	@ (8003c54 <LIS2DW12_ACC_GetSensitivity+0x13c>)
 8003bcc:	601a      	str	r2, [r3, #0]
          break;
 8003bce:	e00a      	b.n	8003be6 <LIS2DW12_ACC_GetSensitivity+0xce>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	4a21      	ldr	r2, [pc, #132]	@ (8003c58 <LIS2DW12_ACC_GetSensitivity+0x140>)
 8003bd4:	601a      	str	r2, [r3, #0]
          break;
 8003bd6:	e006      	b.n	8003be6 <LIS2DW12_ACC_GetSensitivity+0xce>

        default:
          *Sensitivity = -1.0f;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	4a20      	ldr	r2, [pc, #128]	@ (8003c5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003bdc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003bde:	f04f 33ff 	mov.w	r3, #4294967295
 8003be2:	60fb      	str	r3, [r7, #12]
          break;
 8003be4:	bf00      	nop
      }
      break;
 8003be6:	e02c      	b.n	8003c42 <LIS2DW12_ACC_GetSensitivity+0x12a>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      switch (full_scale)
 8003be8:	7afb      	ldrb	r3, [r7, #11]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d81a      	bhi.n	8003c24 <LIS2DW12_ACC_GetSensitivity+0x10c>
 8003bee:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf4 <LIS2DW12_ACC_GetSensitivity+0xdc>)
 8003bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf4:	08003c05 	.word	0x08003c05
 8003bf8:	08003c0d 	.word	0x08003c0d
 8003bfc:	08003c15 	.word	0x08003c15
 8003c00:	08003c1d 	.word	0x08003c1d
      {
        case LIS2DW12_2g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_2G_OTHER_MODES;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	4a16      	ldr	r2, [pc, #88]	@ (8003c60 <LIS2DW12_ACC_GetSensitivity+0x148>)
 8003c08:	601a      	str	r2, [r3, #0]
          break;
 8003c0a:	e012      	b.n	8003c32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_4g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_4G_OTHER_MODES;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	4a15      	ldr	r2, [pc, #84]	@ (8003c64 <LIS2DW12_ACC_GetSensitivity+0x14c>)
 8003c10:	601a      	str	r2, [r3, #0]
          break;
 8003c12:	e00e      	b.n	8003c32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_8g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_8G_OTHER_MODES;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	4a0d      	ldr	r2, [pc, #52]	@ (8003c4c <LIS2DW12_ACC_GetSensitivity+0x134>)
 8003c18:	601a      	str	r2, [r3, #0]
          break;
 8003c1a:	e00a      	b.n	8003c32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        case LIS2DW12_16g:
          *Sensitivity = LIS2DW12_ACC_SENSITIVITY_FOR_FS_16G_OTHER_MODES;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	@ (8003c50 <LIS2DW12_ACC_GetSensitivity+0x138>)
 8003c20:	601a      	str	r2, [r3, #0]
          break;
 8003c22:	e006      	b.n	8003c32 <LIS2DW12_ACC_GetSensitivity+0x11a>

        default:
          *Sensitivity = -1.0f;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	4a0d      	ldr	r2, [pc, #52]	@ (8003c5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003c28:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	60fb      	str	r3, [r7, #12]
          break;
 8003c30:	bf00      	nop
      }
      break;
 8003c32:	e006      	b.n	8003c42 <LIS2DW12_ACC_GetSensitivity+0x12a>

    default:
      *Sensitivity = -1.0f;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	4a09      	ldr	r2, [pc, #36]	@ (8003c5c <LIS2DW12_ACC_GetSensitivity+0x144>)
 8003c38:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c3e:	60fb      	str	r3, [r7, #12]
      break;
 8003c40:	bf00      	nop
  }

  return ret;
 8003c42:	68fb      	ldr	r3, [r7, #12]
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3710      	adds	r7, #16
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	3f79db23 	.word	0x3f79db23
 8003c50:	3ff9db23 	.word	0x3ff9db23
 8003c54:	4079db23 	.word	0x4079db23
 8003c58:	40f9db23 	.word	0x40f9db23
 8003c5c:	bf800000 	.word	0xbf800000
 8003c60:	3e79db23 	.word	0x3e79db23
 8003c64:	3ef9db23 	.word	0x3ef9db23

08003c68 <LIS2DW12_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetOutputDataRate(LIS2DW12_Object_t *pObj, float *Odr)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
  lis2dw12_odr_t odr_low_level;
  lis2dw12_mode_t mode;

  /* Get current output data rate. */
  if (lis2dw12_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2DW12_OK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3320      	adds	r3, #32
 8003c7a:	f107 020b 	add.w	r2, r7, #11
 8003c7e:	4611      	mov	r1, r2
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 fe65 	bl	8004950 <lis2dw12_data_rate_get>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d002      	beq.n	8003c92 <LIS2DW12_ACC_GetOutputDataRate+0x2a>
  {
    return LIS2DW12_ERROR;
 8003c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c90:	e14f      	b.n	8003f32 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3320      	adds	r3, #32
 8003c96:	f107 020a 	add.w	r2, r7, #10
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd57 	bl	8004750 <lis2dw12_power_mode_get>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <LIS2DW12_ACC_GetOutputDataRate+0x46>
  {
    return LIS2DW12_ERROR;
 8003ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8003cac:	e141      	b.n	8003f32 <LIS2DW12_ACC_GetOutputDataRate+0x2ca>
  }

  switch (odr_low_level)
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	2b32      	cmp	r3, #50	@ 0x32
 8003cb2:	f200 8136 	bhi.w	8003f22 <LIS2DW12_ACC_GetOutputDataRate+0x2ba>
 8003cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8003cbc <LIS2DW12_ACC_GetOutputDataRate+0x54>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d89 	.word	0x08003d89
 8003cc0:	08003d93 	.word	0x08003d93
 8003cc4:	08003ded 	.word	0x08003ded
 8003cc8:	08003df5 	.word	0x08003df5
 8003ccc:	08003dfd 	.word	0x08003dfd
 8003cd0:	08003e05 	.word	0x08003e05
 8003cd4:	08003e0d 	.word	0x08003e0d
 8003cd8:	08003e15 	.word	0x08003e15
 8003cdc:	08003e6f 	.word	0x08003e6f
 8003ce0:	08003ec9 	.word	0x08003ec9
 8003ce4:	08003f23 	.word	0x08003f23
 8003ce8:	08003f23 	.word	0x08003f23
 8003cec:	08003f23 	.word	0x08003f23
 8003cf0:	08003f23 	.word	0x08003f23
 8003cf4:	08003f23 	.word	0x08003f23
 8003cf8:	08003f23 	.word	0x08003f23
 8003cfc:	08003f23 	.word	0x08003f23
 8003d00:	08003f23 	.word	0x08003f23
 8003d04:	08003d89 	.word	0x08003d89
 8003d08:	08003f23 	.word	0x08003f23
 8003d0c:	08003f23 	.word	0x08003f23
 8003d10:	08003f23 	.word	0x08003f23
 8003d14:	08003f23 	.word	0x08003f23
 8003d18:	08003f23 	.word	0x08003f23
 8003d1c:	08003f23 	.word	0x08003f23
 8003d20:	08003f23 	.word	0x08003f23
 8003d24:	08003f23 	.word	0x08003f23
 8003d28:	08003f23 	.word	0x08003f23
 8003d2c:	08003f23 	.word	0x08003f23
 8003d30:	08003f23 	.word	0x08003f23
 8003d34:	08003f23 	.word	0x08003f23
 8003d38:	08003f23 	.word	0x08003f23
 8003d3c:	08003f23 	.word	0x08003f23
 8003d40:	08003f23 	.word	0x08003f23
 8003d44:	08003f23 	.word	0x08003f23
 8003d48:	08003f23 	.word	0x08003f23
 8003d4c:	08003f23 	.word	0x08003f23
 8003d50:	08003f23 	.word	0x08003f23
 8003d54:	08003f23 	.word	0x08003f23
 8003d58:	08003f23 	.word	0x08003f23
 8003d5c:	08003f23 	.word	0x08003f23
 8003d60:	08003f23 	.word	0x08003f23
 8003d64:	08003f23 	.word	0x08003f23
 8003d68:	08003f23 	.word	0x08003f23
 8003d6c:	08003f23 	.word	0x08003f23
 8003d70:	08003f23 	.word	0x08003f23
 8003d74:	08003f23 	.word	0x08003f23
 8003d78:	08003f23 	.word	0x08003f23
 8003d7c:	08003f23 	.word	0x08003f23
 8003d80:	08003f23 	.word	0x08003f23
 8003d84:	08003d89 	.word	0x08003d89
  {
    case LIS2DW12_XL_ODR_OFF:
    case LIS2DW12_XL_SET_SW_TRIG:
    case LIS2DW12_XL_SET_PIN_TRIG:
      *Odr = 0.0f;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	f04f 0200 	mov.w	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
      break;
 8003d90:	e0ce      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
      switch (mode)
 8003d92:	7abb      	ldrb	r3, [r7, #10]
 8003d94:	2b1b      	cmp	r3, #27
 8003d96:	bf8c      	ite	hi
 8003d98:	2201      	movhi	r2, #1
 8003d9a:	2200      	movls	r2, #0
 8003d9c:	b2d2      	uxtb	r2, r2
 8003d9e:	2a00      	cmp	r2, #0
 8003da0:	d11c      	bne.n	8003ddc <LIS2DW12_ACC_GetOutputDataRate+0x174>
 8003da2:	2201      	movs	r2, #1
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003dac:	2a00      	cmp	r2, #0
 8003dae:	bf14      	ite	ne
 8003db0:	2201      	movne	r2, #1
 8003db2:	2200      	moveq	r2, #0
 8003db4:	b2d2      	uxtb	r2, r2
 8003db6:	2a00      	cmp	r2, #0
 8003db8:	d10c      	bne.n	8003dd4 <LIS2DW12_ACC_GetOutputDataRate+0x16c>
 8003dba:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	bf14      	ite	ne
 8003dc2:	2301      	movne	r3, #1
 8003dc4:	2300      	moveq	r3, #0
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d007      	beq.n	8003ddc <LIS2DW12_ACC_GetOutputDataRate+0x174>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 12.5f;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	4a5b      	ldr	r2, [pc, #364]	@ (8003f3c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003dd0:	601a      	str	r2, [r3, #0]
          break;
 8003dd2:	e00a      	b.n	8003dea <LIS2DW12_ACC_GetOutputDataRate+0x182>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 1.6f;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003f40 <LIS2DW12_ACC_GetOutputDataRate+0x2d8>)
 8003dd8:	601a      	str	r2, [r3, #0]
          break;
 8003dda:	e006      	b.n	8003dea <LIS2DW12_ACC_GetOutputDataRate+0x182>

        default:
          *Odr = -1.0f;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	4a59      	ldr	r2, [pc, #356]	@ (8003f44 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003de0:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	60fb      	str	r3, [r7, #12]
          break;
 8003de8:	bf00      	nop
      }
      break;
 8003dea:	e0a1      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	4a53      	ldr	r2, [pc, #332]	@ (8003f3c <LIS2DW12_ACC_GetOutputDataRate+0x2d4>)
 8003df0:	601a      	str	r2, [r3, #0]
      break;
 8003df2:	e09d      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_25Hz:
      *Odr = 25.0f;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	4a54      	ldr	r2, [pc, #336]	@ (8003f48 <LIS2DW12_ACC_GetOutputDataRate+0x2e0>)
 8003df8:	601a      	str	r2, [r3, #0]
      break;
 8003dfa:	e099      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_50Hz:
      *Odr = 50.0f;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	4a53      	ldr	r2, [pc, #332]	@ (8003f4c <LIS2DW12_ACC_GetOutputDataRate+0x2e4>)
 8003e00:	601a      	str	r2, [r3, #0]
      break;
 8003e02:	e095      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_100Hz:
      *Odr = 100.0f;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4a52      	ldr	r2, [pc, #328]	@ (8003f50 <LIS2DW12_ACC_GetOutputDataRate+0x2e8>)
 8003e08:	601a      	str	r2, [r3, #0]
      break;
 8003e0a:	e091      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_200Hz:
      *Odr = 200.0f;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	4a51      	ldr	r2, [pc, #324]	@ (8003f54 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003e10:	601a      	str	r2, [r3, #0]
      break;
 8003e12:	e08d      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_400Hz:
      switch (mode)
 8003e14:	7abb      	ldrb	r3, [r7, #10]
 8003e16:	2b1b      	cmp	r3, #27
 8003e18:	bf8c      	ite	hi
 8003e1a:	2201      	movhi	r2, #1
 8003e1c:	2200      	movls	r2, #0
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	2a00      	cmp	r2, #0
 8003e22:	d11c      	bne.n	8003e5e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
 8003e24:	2201      	movs	r2, #1
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003e2e:	2a00      	cmp	r2, #0
 8003e30:	bf14      	ite	ne
 8003e32:	2201      	movne	r2, #1
 8003e34:	2200      	moveq	r2, #0
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	2a00      	cmp	r2, #0
 8003e3a:	d10c      	bne.n	8003e56 <LIS2DW12_ACC_GetOutputDataRate+0x1ee>
 8003e3c:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf14      	ite	ne
 8003e44:	2301      	movne	r3, #1
 8003e46:	2300      	moveq	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d007      	beq.n	8003e5e <LIS2DW12_ACC_GetOutputDataRate+0x1f6>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 400.0f;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	4a41      	ldr	r2, [pc, #260]	@ (8003f58 <LIS2DW12_ACC_GetOutputDataRate+0x2f0>)
 8003e52:	601a      	str	r2, [r3, #0]
          break;
 8003e54:	e00a      	b.n	8003e6c <LIS2DW12_ACC_GetOutputDataRate+0x204>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	4a3e      	ldr	r2, [pc, #248]	@ (8003f54 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003e5a:	601a      	str	r2, [r3, #0]
          break;
 8003e5c:	e006      	b.n	8003e6c <LIS2DW12_ACC_GetOutputDataRate+0x204>

        default:
          *Odr = -1.0f;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	4a38      	ldr	r2, [pc, #224]	@ (8003f44 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003e62:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003e64:	f04f 33ff 	mov.w	r3, #4294967295
 8003e68:	60fb      	str	r3, [r7, #12]
          break;
 8003e6a:	bf00      	nop
      }
      break;
 8003e6c:	e060      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_800Hz:
      switch (mode)
 8003e6e:	7abb      	ldrb	r3, [r7, #10]
 8003e70:	2b1b      	cmp	r3, #27
 8003e72:	bf8c      	ite	hi
 8003e74:	2201      	movhi	r2, #1
 8003e76:	2200      	movls	r2, #0
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	2a00      	cmp	r2, #0
 8003e7c:	d11c      	bne.n	8003eb8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
 8003e7e:	2201      	movs	r2, #1
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	bf14      	ite	ne
 8003e8c:	2201      	movne	r2, #1
 8003e8e:	2200      	moveq	r2, #0
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	d10c      	bne.n	8003eb0 <LIS2DW12_ACC_GetOutputDataRate+0x248>
 8003e96:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <LIS2DW12_ACC_GetOutputDataRate+0x250>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 800.0f;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4a2c      	ldr	r2, [pc, #176]	@ (8003f5c <LIS2DW12_ACC_GetOutputDataRate+0x2f4>)
 8003eac:	601a      	str	r2, [r3, #0]
          break;
 8003eae:	e00a      	b.n	8003ec6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4a28      	ldr	r2, [pc, #160]	@ (8003f54 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003eb4:	601a      	str	r2, [r3, #0]
          break;
 8003eb6:	e006      	b.n	8003ec6 <LIS2DW12_ACC_GetOutputDataRate+0x25e>

        default:
          *Odr = -1.0f;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	4a22      	ldr	r2, [pc, #136]	@ (8003f44 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003ebc:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec2:	60fb      	str	r3, [r7, #12]
          break;
 8003ec4:	bf00      	nop
      }
      break;
 8003ec6:	e033      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    case LIS2DW12_XL_ODR_1k6Hz:
      switch (mode)
 8003ec8:	7abb      	ldrb	r3, [r7, #10]
 8003eca:	2b1b      	cmp	r3, #27
 8003ecc:	bf8c      	ite	hi
 8003ece:	2201      	movhi	r2, #1
 8003ed0:	2200      	movls	r2, #0
 8003ed2:	b2d2      	uxtb	r2, r2
 8003ed4:	2a00      	cmp	r2, #0
 8003ed6:	d11c      	bne.n	8003f12 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
 8003ed8:	2201      	movs	r2, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	f003 320f 	and.w	r2, r3, #252645135	@ 0xf0f0f0f
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	bf14      	ite	ne
 8003ee6:	2201      	movne	r2, #1
 8003ee8:	2200      	moveq	r2, #0
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	2a00      	cmp	r2, #0
 8003eee:	d10c      	bne.n	8003f0a <LIS2DW12_ACC_GetOutputDataRate+0x2a2>
 8003ef0:	f003 1310 	and.w	r3, r3, #1048592	@ 0x100010
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	bf14      	ite	ne
 8003ef8:	2301      	movne	r3, #1
 8003efa:	2300      	moveq	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <LIS2DW12_ACC_GetOutputDataRate+0x2aa>
      {
        case LIS2DW12_HIGH_PERFORMANCE:
        case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
          *Odr = 1600.0f;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	4a16      	ldr	r2, [pc, #88]	@ (8003f60 <LIS2DW12_ACC_GetOutputDataRate+0x2f8>)
 8003f06:	601a      	str	r2, [r3, #0]
          break;
 8003f08:	e00a      	b.n	8003f20 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>
        case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
          *Odr = 200.0f;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	4a11      	ldr	r2, [pc, #68]	@ (8003f54 <LIS2DW12_ACC_GetOutputDataRate+0x2ec>)
 8003f0e:	601a      	str	r2, [r3, #0]
          break;
 8003f10:	e006      	b.n	8003f20 <LIS2DW12_ACC_GetOutputDataRate+0x2b8>

        default:
          *Odr = -1.0f;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4a0b      	ldr	r2, [pc, #44]	@ (8003f44 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f16:	601a      	str	r2, [r3, #0]
          ret = LIS2DW12_ERROR;
 8003f18:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1c:	60fb      	str	r3, [r7, #12]
          break;
 8003f1e:	bf00      	nop
      }
      break;
 8003f20:	e006      	b.n	8003f30 <LIS2DW12_ACC_GetOutputDataRate+0x2c8>

    default:
      *Odr = -1.0f;
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	4a07      	ldr	r2, [pc, #28]	@ (8003f44 <LIS2DW12_ACC_GetOutputDataRate+0x2dc>)
 8003f26:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	60fb      	str	r3, [r7, #12]
      break;
 8003f2e:	bf00      	nop
  }

  return ret;
 8003f30:	68fb      	ldr	r3, [r7, #12]
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3710      	adds	r7, #16
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	41480000 	.word	0x41480000
 8003f40:	3fcccccd 	.word	0x3fcccccd
 8003f44:	bf800000 	.word	0xbf800000
 8003f48:	41c80000 	.word	0x41c80000
 8003f4c:	42480000 	.word	0x42480000
 8003f50:	42c80000 	.word	0x42c80000
 8003f54:	43480000 	.word	0x43480000
 8003f58:	43c80000 	.word	0x43c80000
 8003f5c:	44480000 	.word	0x44480000
 8003f60:	44c80000 	.word	0x44c80000

08003f64 <LIS2DW12_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate(LIS2DW12_Object_t *pObj, float Odr)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b082      	sub	sp, #8
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	ed87 0a00 	vstr	s0, [r7]
  /* By default we use High Performance mode and Low Noise disabled */
  return LIS2DW12_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LIS2DW12_HIGH_PERFORMANCE_MODE, LIS2DW12_LOW_NOISE_DISABLE);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	ed97 0a00 	vldr	s0, [r7]
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f805 	bl	8003f88 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>
 8003f7e:	4603      	mov	r3, r0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <LIS2DW12_ACC_SetOutputDataRate_With_Mode>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetOutputDataRate_With_Mode(LIS2DW12_Object_t *pObj, float Odr, LIS2DW12_Operating_Mode_t Mode,
                                                 LIS2DW12_Low_Noise_t Noise)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f94:	460b      	mov	r3, r1
 8003f96:	71fb      	strb	r3, [r7, #7]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71bb      	strb	r3, [r7, #6]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d109      	bne.n	8003fba <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x32>
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Enabled(pObj, Odr, Mode, Noise);
 8003fa6:	79ba      	ldrb	r2, [r7, #6]
 8003fa8:	79fb      	ldrb	r3, [r7, #7]
 8003faa:	4619      	mov	r1, r3
 8003fac:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f96b 	bl	800428c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	e008      	b.n	8003fcc <LIS2DW12_ACC_SetOutputDataRate_With_Mode+0x44>
  }
  else
  {
    return LIS2DW12_ACC_SetOutputDataRate_When_Disabled(pObj, Odr, Mode, Noise);
 8003fba:	79ba      	ldrb	r2, [r7, #6]
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	4619      	mov	r1, r3
 8003fc0:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fc4:	68f8      	ldr	r0, [r7, #12]
 8003fc6:	f000 fa7d 	bl	80044c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>
 8003fca:	4603      	mov	r3, r0
  }
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <LIS2DW12_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetFullScale(LIS2DW12_Object_t *pObj, int32_t *FullScale)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2DW12_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
  lis2dw12_fs_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lis2dw12_full_scale_get(&(pObj->Ctx), &fs_low_level) != LIS2DW12_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	3320      	adds	r3, #32
 8003fe6:	f107 020b 	add.w	r2, r7, #11
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 fdc5 	bl	8004b7c <lis2dw12_full_scale_get>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <LIS2DW12_ACC_GetFullScale+0x2a>
  {
    return LIS2DW12_ERROR;
 8003ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffc:	e027      	b.n	800404e <LIS2DW12_ACC_GetFullScale+0x7a>
  }

  switch (fs_low_level)
 8003ffe:	7afb      	ldrb	r3, [r7, #11]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d81b      	bhi.n	800403c <LIS2DW12_ACC_GetFullScale+0x68>
 8004004:	a201      	add	r2, pc, #4	@ (adr r2, 800400c <LIS2DW12_ACC_GetFullScale+0x38>)
 8004006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400a:	bf00      	nop
 800400c:	0800401d 	.word	0x0800401d
 8004010:	08004025 	.word	0x08004025
 8004014:	0800402d 	.word	0x0800402d
 8004018:	08004035 	.word	0x08004035
  {
    case LIS2DW12_2g:
      *FullScale =  2;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	2202      	movs	r2, #2
 8004020:	601a      	str	r2, [r3, #0]
      break;
 8004022:	e013      	b.n	800404c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_4g:
      *FullScale =  4;
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2204      	movs	r2, #4
 8004028:	601a      	str	r2, [r3, #0]
      break;
 800402a:	e00f      	b.n	800404c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_8g:
      *FullScale =  8;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2208      	movs	r2, #8
 8004030:	601a      	str	r2, [r3, #0]
      break;
 8004032:	e00b      	b.n	800404c <LIS2DW12_ACC_GetFullScale+0x78>

    case LIS2DW12_16g:
      *FullScale = 16;
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2210      	movs	r2, #16
 8004038:	601a      	str	r2, [r3, #0]
      break;
 800403a:	e007      	b.n	800404c <LIS2DW12_ACC_GetFullScale+0x78>

    default:
      *FullScale = -1;
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	f04f 32ff 	mov.w	r2, #4294967295
 8004042:	601a      	str	r2, [r3, #0]
      ret = LIS2DW12_ERROR;
 8004044:	f04f 33ff 	mov.w	r3, #4294967295
 8004048:	60fb      	str	r3, [r7, #12]
      break;
 800404a:	bf00      	nop
  }

  return ret;
 800404c:	68fb      	ldr	r3, [r7, #12]
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop

08004058 <LIS2DW12_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_SetFullScale(LIS2DW12_Object_t *pObj, int32_t FullScale)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  lis2dw12_fs_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
           : (FullScale <= 4) ? LIS2DW12_4g
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	2b02      	cmp	r3, #2
 8004066:	dd0b      	ble.n	8004080 <LIS2DW12_ACC_SetFullScale+0x28>
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b04      	cmp	r3, #4
 800406c:	dd06      	ble.n	800407c <LIS2DW12_ACC_SetFullScale+0x24>
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b08      	cmp	r3, #8
 8004072:	dc01      	bgt.n	8004078 <LIS2DW12_ACC_SetFullScale+0x20>
 8004074:	2302      	movs	r3, #2
 8004076:	e004      	b.n	8004082 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004078:	2303      	movs	r3, #3
 800407a:	e002      	b.n	8004082 <LIS2DW12_ACC_SetFullScale+0x2a>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <LIS2DW12_ACC_SetFullScale+0x2a>
 8004080:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LIS2DW12_2g
 8004082:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LIS2DW12_8g
           :                    LIS2DW12_16g;

  if (lis2dw12_full_scale_set(&(pObj->Ctx), new_fs) != LIS2DW12_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3320      	adds	r3, #32
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fd4f 	bl	8004b30 <lis2dw12_full_scale_set>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <LIS2DW12_ACC_SetFullScale+0x46>
  {
    return LIS2DW12_ERROR;
 8004098:	f04f 33ff 	mov.w	r3, #4294967295
 800409c:	e000      	b.n	80040a0 <LIS2DW12_ACC_SetFullScale+0x48>
  }

  return LIS2DW12_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <LIS2DW12_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxesRaw(LIS2DW12_Object_t *pObj, LIS2DW12_AxesRaw_t *Value)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  lis2dw12_axis3bit16_t data_raw;
  lis2dw12_mode_t mode;
  int32_t ret = LIS2DW12_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]

  /* Read actual power mode selection from sensor. */
  if (lis2dw12_power_mode_get(&(pObj->Ctx), &mode) != LIS2DW12_OK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3320      	adds	r3, #32
 80040ba:	f107 020b 	add.w	r2, r7, #11
 80040be:	4611      	mov	r1, r2
 80040c0:	4618      	mov	r0, r3
 80040c2:	f000 fb45 	bl	8004750 <lis2dw12_power_mode_get>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <LIS2DW12_ACC_GetAxesRaw+0x2a>
  {
    return LIS2DW12_ERROR;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	e068      	b.n	80041a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  /* Read raw data values. */
  if (lis2dw12_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2DW12_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3320      	adds	r3, #32
 80040d6:	f107 020c 	add.w	r2, r7, #12
 80040da:	4611      	mov	r1, r2
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 fd85 	bl	8004bec <lis2dw12_acceleration_raw_get>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <LIS2DW12_ACC_GetAxesRaw+0x46>
  {
    return LIS2DW12_ERROR;
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e05a      	b.n	80041a4 <LIS2DW12_ACC_GetAxesRaw+0xfc>
  }

  switch (mode)
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	2b1b      	cmp	r3, #27
 80040f2:	bf8c      	ite	hi
 80040f4:	2201      	movhi	r2, #1
 80040f6:	2200      	movls	r2, #0
 80040f8:	b2d2      	uxtb	r2, r2
 80040fa:	2a00      	cmp	r2, #0
 80040fc:	d14d      	bne.n	800419a <LIS2DW12_ACC_GetAxesRaw+0xf2>
 80040fe:	2201      	movs	r2, #1
 8004100:	409a      	lsls	r2, r3
 8004102:	f002 331e 	and.w	r3, r2, #505290270	@ 0x1e1e1e1e
 8004106:	f023 2310 	bic.w	r3, r3, #268439552	@ 0x10001000
 800410a:	2b00      	cmp	r3, #0
 800410c:	bf14      	ite	ne
 800410e:	2301      	movne	r3, #1
 8004110:	2300      	moveq	r3, #0
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b00      	cmp	r3, #0
 8004116:	d124      	bne.n	8004162 <LIS2DW12_ACC_GetAxesRaw+0xba>
 8004118:	f002 3301 	and.w	r3, r2, #16843009	@ 0x1010101
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d037      	beq.n	800419a <LIS2DW12_ACC_GetAxesRaw+0xf2>
    case LIS2DW12_CONT_LOW_PWR_12bit:
    case LIS2DW12_SINGLE_LOW_PWR_12bit:
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
    case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
      /* Data format 12 bits. */
      Value->x = (data_raw.i16bit[0] / 16);
 800412a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800412e:	2b00      	cmp	r3, #0
 8004130:	da00      	bge.n	8004134 <LIS2DW12_ACC_GetAxesRaw+0x8c>
 8004132:	330f      	adds	r3, #15
 8004134:	111b      	asrs	r3, r3, #4
 8004136:	b21a      	sxth	r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 16);
 800413c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004140:	2b00      	cmp	r3, #0
 8004142:	da00      	bge.n	8004146 <LIS2DW12_ACC_GetAxesRaw+0x9e>
 8004144:	330f      	adds	r3, #15
 8004146:	111b      	asrs	r3, r3, #4
 8004148:	b21a      	sxth	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 16);
 800414e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	da00      	bge.n	8004158 <LIS2DW12_ACC_GetAxesRaw+0xb0>
 8004156:	330f      	adds	r3, #15
 8004158:	111b      	asrs	r3, r3, #4
 800415a:	b21a      	sxth	r2, r3
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	809a      	strh	r2, [r3, #4]
      break;
 8004160:	e01f      	b.n	80041a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>
    case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
    case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
      /* Data format 14 bits. */
      Value->x = (data_raw.i16bit[0] / 4);
 8004162:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004166:	2b00      	cmp	r3, #0
 8004168:	da00      	bge.n	800416c <LIS2DW12_ACC_GetAxesRaw+0xc4>
 800416a:	3303      	adds	r3, #3
 800416c:	109b      	asrs	r3, r3, #2
 800416e:	b21a      	sxth	r2, r3
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	801a      	strh	r2, [r3, #0]
      Value->y = (data_raw.i16bit[1] / 4);
 8004174:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004178:	2b00      	cmp	r3, #0
 800417a:	da00      	bge.n	800417e <LIS2DW12_ACC_GetAxesRaw+0xd6>
 800417c:	3303      	adds	r3, #3
 800417e:	109b      	asrs	r3, r3, #2
 8004180:	b21a      	sxth	r2, r3
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	805a      	strh	r2, [r3, #2]
      Value->z = (data_raw.i16bit[2] / 4);
 8004186:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800418a:	2b00      	cmp	r3, #0
 800418c:	da00      	bge.n	8004190 <LIS2DW12_ACC_GetAxesRaw+0xe8>
 800418e:	3303      	adds	r3, #3
 8004190:	109b      	asrs	r3, r3, #2
 8004192:	b21a      	sxth	r2, r3
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	809a      	strh	r2, [r3, #4]
      break;
 8004198:	e003      	b.n	80041a2 <LIS2DW12_ACC_GetAxesRaw+0xfa>

    default:
      ret = LIS2DW12_ERROR;
 800419a:	f04f 33ff 	mov.w	r3, #4294967295
 800419e:	617b      	str	r3, [r7, #20]
      break;
 80041a0:	bf00      	nop
  }

  return ret;
 80041a2:	697b      	ldr	r3, [r7, #20]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <LIS2DW12_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_ACC_GetAxes(LIS2DW12_Object_t *pObj, LIS2DW12_Axes_t *Acceleration)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  LIS2DW12_AxesRaw_t data_raw;
  float sensitivity = 0.0f;
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (LIS2DW12_ACC_GetAxesRaw(pObj, &data_raw) != LIS2DW12_OK)
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4619      	mov	r1, r3
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f7ff ff70 	bl	80040a8 <LIS2DW12_ACC_GetAxesRaw>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <LIS2DW12_ACC_GetAxes+0x28>
  {
    return LIS2DW12_ERROR;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	e03c      	b.n	800424e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Get LIS2DW12 actual sensitivity. */
  if (LIS2DW12_ACC_GetSensitivity(pObj, &sensitivity) != LIS2DW12_OK)
 80041d4:	f107 030c 	add.w	r3, r7, #12
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fc9c 	bl	8003b18 <LIS2DW12_ACC_GetSensitivity>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d002      	beq.n	80041ec <LIS2DW12_ACC_GetAxes+0x40>
  {
    return LIS2DW12_ERROR;
 80041e6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ea:	e030      	b.n	800424e <LIS2DW12_ACC_GetAxes+0xa2>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
 80041ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80041f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80041fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004204:	ee17 2a90 	vmov	r2, s15
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
 800420c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004210:	ee07 3a90 	vmov	s15, r3
 8004214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004218:	edd7 7a03 	vldr	s15, [r7, #12]
 800421c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004220:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004224:	ee17 2a90 	vmov	r2, s15
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
 800422c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004230:	ee07 3a90 	vmov	s15, r3
 8004234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004238:	edd7 7a03 	vldr	s15, [r7, #12]
 800423c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004240:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004244:	ee17 2a90 	vmov	r2, s15
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	609a      	str	r2, [r3, #8]

  return LIS2DW12_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3718      	adds	r7, #24
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <LIS2DW12_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2DW12_Write_Reg(LIS2DW12_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	460b      	mov	r3, r1
 8004260:	70fb      	strb	r3, [r7, #3]
 8004262:	4613      	mov	r3, r2
 8004264:	70bb      	strb	r3, [r7, #2]
  if (lis2dw12_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2DW12_OK)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f103 0020 	add.w	r0, r3, #32
 800426c:	1cba      	adds	r2, r7, #2
 800426e:	78f9      	ldrb	r1, [r7, #3]
 8004270:	2301      	movs	r3, #1
 8004272:	f000 fa07 	bl	8004684 <lis2dw12_write_reg>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d002      	beq.n	8004282 <LIS2DW12_Write_Reg+0x2c>
  {
    return LIS2DW12_ERROR;
 800427c:	f04f 33ff 	mov.w	r3, #4294967295
 8004280:	e000      	b.n	8004284 <LIS2DW12_Write_Reg+0x2e>
  }

  return LIS2DW12_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3708      	adds	r7, #8
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Enabled(LIS2DW12_Object_t *pObj, float Odr,
                                                           LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	ed87 0a02 	vstr	s0, [r7, #8]
 8004298:	460b      	mov	r3, r1
 800429a:	71fb      	strb	r3, [r7, #7]
 800429c:	4613      	mov	r3, r2
 800429e:	71bb      	strb	r3, [r7, #6]
  lis2dw12_odr_t new_odr;
  lis2dw12_mode_t new_power_mode;

  switch (Mode)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d80b      	bhi.n	80042c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x34>
 80042a8:	a201      	add	r2, pc, #4	@ (adr r2, 80042b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x24>)
 80042aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ae:	bf00      	nop
 80042b0:	080042ed 	.word	0x080042ed
 80042b4:	08004319 	.word	0x08004319
 80042b8:	08004345 	.word	0x08004345
 80042bc:	08004371 	.word	0x08004371
  {
    case LIS2DW12_HIGH_PERFORMANCE_MODE:
    default:
      switch (Noise)
 80042c0:	79bb      	ldrb	r3, [r7, #6]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d002      	beq.n	80042cc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x40>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE;
 80042c6:	2304      	movs	r3, #4
 80042c8:	75fb      	strb	r3, [r7, #23]
          break;
 80042ca:	e002      	b.n	80042d2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x46>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 80042cc:	2314      	movs	r3, #20
 80042ce:	75fb      	strb	r3, [r7, #23]
          break;
 80042d0:	bf00      	nop
      }

      /* If High Performance mode minimum ODR is 12.5Hz */
      if (Odr < 12.5f)
 80042d2:	edd7 7a02 	vldr	s15, [r7, #8]
 80042d6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80042da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e2:	d400      	bmi.n	80042e6 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x5a>
      {
        Odr = 12.5f;
      }
      break;
 80042e4:	e05a      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 12.5f;
 80042e6:	4b6f      	ldr	r3, [pc, #444]	@ (80044a4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x218>)
 80042e8:	60bb      	str	r3, [r7, #8]
      break;
 80042ea:	e057      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE4:
      switch (Noise)
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d002      	beq.n	80042f8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x6c>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_4;
 80042f2:	2303      	movs	r3, #3
 80042f4:	75fb      	strb	r3, [r7, #23]
          break;
 80042f6:	e002      	b.n	80042fe <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x72>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 80042f8:	2313      	movs	r3, #19
 80042fa:	75fb      	strb	r3, [r7, #23]
          break;
 80042fc:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 80042fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004302:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004306:	eef4 7ac7 	vcmpe.f32	s15, s14
 800430a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430e:	dc00      	bgt.n	8004312 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x86>
      {
        Odr = 200.0f;
      }
      break;
 8004310:	e044      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 8004312:	4b66      	ldr	r3, [pc, #408]	@ (80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004314:	60bb      	str	r3, [r7, #8]
      break;
 8004316:	e041      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE3:
      switch (Noise)
 8004318:	79bb      	ldrb	r3, [r7, #6]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d002      	beq.n	8004324 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x98>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_3;
 800431e:	2302      	movs	r3, #2
 8004320:	75fb      	strb	r3, [r7, #23]
          break;
 8004322:	e002      	b.n	800432a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x9e>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004324:	2312      	movs	r3, #18
 8004326:	75fb      	strb	r3, [r7, #23]
          break;
 8004328:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 800432a:	edd7 7a02 	vldr	s15, [r7, #8]
 800432e:	ed9f 7a5e 	vldr	s14, [pc, #376]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433a:	dc00      	bgt.n	800433e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xb2>
      {
        Odr = 200.0f;
      }
      break;
 800433c:	e02e      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800433e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004340:	60bb      	str	r3, [r7, #8]
      break;
 8004342:	e02b      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE2:
      switch (Noise)
 8004344:	79bb      	ldrb	r3, [r7, #6]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d002      	beq.n	8004350 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xc4>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_2;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
          break;
 800434e:	e002      	b.n	8004356 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xca>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004350:	2311      	movs	r3, #17
 8004352:	75fb      	strb	r3, [r7, #23]
          break;
 8004354:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004356:	edd7 7a02 	vldr	s15, [r7, #8]
 800435a:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800435e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	dc00      	bgt.n	800436a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xde>
      {
        Odr = 200.0f;
      }
      break;
 8004368:	e018      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
        Odr = 200.0f;
 800436a:	4b50      	ldr	r3, [pc, #320]	@ (80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 800436c:	60bb      	str	r3, [r7, #8]
      break;
 800436e:	e015      	b.n	800439c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x110>
    case LIS2DW12_LOW_POWER_MODE1:
      switch (Noise)
 8004370:	79bb      	ldrb	r3, [r7, #6]
 8004372:	2b01      	cmp	r3, #1
 8004374:	d002      	beq.n	800437c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf0>
      {
        case LIS2DW12_LOW_NOISE_DISABLE:
        default:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_12bit;
 8004376:	2300      	movs	r3, #0
 8004378:	75fb      	strb	r3, [r7, #23]
          break;
 800437a:	e002      	b.n	8004382 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0xf6>
        case LIS2DW12_LOW_NOISE_ENABLE:
          new_power_mode = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 800437c:	2310      	movs	r3, #16
 800437e:	75fb      	strb	r3, [r7, #23]
          break;
 8004380:	bf00      	nop
      }

      /* If Low Power mode maximum ODR is 200Hz */
      if (Odr > 200.0f)
 8004382:	edd7 7a02 	vldr	s15, [r7, #8]
 8004386:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 800438a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	dc00      	bgt.n	8004396 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10a>
      {
        Odr = 200.0f;
      }
      break;
 8004394:	e001      	b.n	800439a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x10e>
        Odr = 200.0f;
 8004396:	4b45      	ldr	r3, [pc, #276]	@ (80044ac <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x220>)
 8004398:	60bb      	str	r3, [r7, #8]
      break;
 800439a:	bf00      	nop
  }

  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
            : (Odr <=   12.5f) ? LIS2DW12_XL_ODR_12Hz5
 800439c:	edd7 7a02 	vldr	s15, [r7, #8]
 80043a0:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80044b0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x224>
 80043a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ac:	d801      	bhi.n	80043b2 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x126>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e04d      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80043b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80043b6:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 80043ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c2:	d801      	bhi.n	80043c8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x13c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e042      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80043c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80043cc:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 80043d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d8:	d801      	bhi.n	80043de <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x152>
 80043da:	2303      	movs	r3, #3
 80043dc:	e037      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80043de:	edd7 7a02 	vldr	s15, [r7, #8]
 80043e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80044b4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x228>
 80043e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043ee:	d801      	bhi.n	80043f4 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x168>
 80043f0:	2304      	movs	r3, #4
 80043f2:	e02c      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 80043f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80043f8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80044b8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x22c>
 80043fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004404:	d801      	bhi.n	800440a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x17e>
 8004406:	2305      	movs	r3, #5
 8004408:	e021      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800440a:	edd7 7a02 	vldr	s15, [r7, #8]
 800440e:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80044a8 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x21c>
 8004412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441a:	d801      	bhi.n	8004420 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x194>
 800441c:	2306      	movs	r3, #6
 800441e:	e016      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004420:	edd7 7a02 	vldr	s15, [r7, #8]
 8004424:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80044bc <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x230>
 8004428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	d801      	bhi.n	8004436 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1aa>
 8004432:	2307      	movs	r3, #7
 8004434:	e00b      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 8004436:	edd7 7a02 	vldr	s15, [r7, #8]
 800443a:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 80044c0 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x234>
 800443e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004446:	d801      	bhi.n	800444c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c0>
 8004448:	2308      	movs	r3, #8
 800444a:	e000      	b.n	800444e <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1c2>
 800444c:	2309      	movs	r3, #9
  new_odr = (Odr <=    1.6f) ? LIS2DW12_XL_ODR_1Hz6_LP_ONLY
 800444e:	75bb      	strb	r3, [r7, #22]
            : (Odr <=  400.0f) ? LIS2DW12_XL_ODR_400Hz
            : (Odr <=  800.0f) ? LIS2DW12_XL_ODR_800Hz
            :                    LIS2DW12_XL_ODR_1k6Hz;

  /* Output data rate selection. */
  if (lis2dw12_data_rate_set(&(pObj->Ctx), new_odr) != LIS2DW12_OK)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	3320      	adds	r3, #32
 8004454:	7dba      	ldrb	r2, [r7, #22]
 8004456:	4611      	mov	r1, r2
 8004458:	4618      	mov	r0, r3
 800445a:	f000 fa33 	bl	80048c4 <lis2dw12_data_rate_set>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1de>
  {
    return LIS2DW12_ERROR;
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	e018      	b.n	800449c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Power mode selection. */
  if (lis2dw12_power_mode_set(&(pObj->Ctx), new_power_mode) != LIS2DW12_OK)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3320      	adds	r3, #32
 800446e:	7dfa      	ldrb	r2, [r7, #23]
 8004470:	4611      	mov	r1, r2
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f91e 	bl	80046b4 <lis2dw12_power_mode_set>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d002      	beq.n	8004484 <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x1f8>
  {
    return LIS2DW12_ERROR;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	e00b      	b.n	800449c <LIS2DW12_ACC_SetOutputDataRate_When_Enabled+0x210>
  }

  /* Store the current Odr, Mode and Noise values */
  pObj->acc_odr = Odr;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	635a      	str	r2, [r3, #52]	@ 0x34
  pObj->acc_operating_mode = Mode;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	79fa      	ldrb	r2, [r7, #7]
 800448e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	79ba      	ldrb	r2, [r7, #6]
 8004496:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return LIS2DW12_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	41480000 	.word	0x41480000
 80044a8:	43480000 	.word	0x43480000
 80044ac:	43480000 	.word	0x43480000
 80044b0:	3fcccccd 	.word	0x3fcccccd
 80044b4:	42480000 	.word	0x42480000
 80044b8:	42c80000 	.word	0x42c80000
 80044bc:	43c80000 	.word	0x43c80000
 80044c0:	44480000 	.word	0x44480000

080044c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled>:
  * @param  Noise the low noise option
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LIS2DW12_ACC_SetOutputDataRate_When_Disabled(LIS2DW12_Object_t *pObj, float Odr,
                                                            LIS2DW12_Operating_Mode_t Mode, LIS2DW12_Low_Noise_t Noise)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80044d0:	460b      	mov	r3, r1
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71bb      	strb	r3, [r7, #6]
  /* Store the new Odr, Mode and Noise values */
  pObj->acc_operating_mode = Mode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	79fa      	ldrb	r2, [r7, #7]
 80044dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  pObj->acc_low_noise = Noise;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	79ba      	ldrb	r2, [r7, #6]
 80044e4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
                  : (Odr <=   12.5f) ?   12.5f
 80044e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ec:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80045ac <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xe8>
 80044f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f8:	d801      	bhi.n	80044fe <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x3a>
 80044fa:	4b2d      	ldr	r3, [pc, #180]	@ (80045b0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xec>)
 80044fc:	e04d      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   25.0f) ?   25.0f
 80044fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8004502:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8004506:	eef4 7ac7 	vcmpe.f32	s15, s14
 800450a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800450e:	d801      	bhi.n	8004514 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x50>
 8004510:	4b28      	ldr	r3, [pc, #160]	@ (80045b4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf0>)
 8004512:	e042      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=   50.0f) ?   50.0f
 8004514:	edd7 7a02 	vldr	s15, [r7, #8]
 8004518:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 800451c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	d801      	bhi.n	800452a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x66>
 8004526:	4b24      	ldr	r3, [pc, #144]	@ (80045b8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf4>)
 8004528:	e037      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  100.0f) ?  100.0f
 800452a:	edd7 7a02 	vldr	s15, [r7, #8]
 800452e:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80045bc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8004532:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d801      	bhi.n	8004540 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x7c>
 800453c:	4b20      	ldr	r3, [pc, #128]	@ (80045c0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xfc>)
 800453e:	e02c      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  200.0f) ?  200.0f
 8004540:	edd7 7a02 	vldr	s15, [r7, #8]
 8004544:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80045c4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x100>
 8004548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800454c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004550:	d801      	bhi.n	8004556 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x92>
 8004552:	4b1d      	ldr	r3, [pc, #116]	@ (80045c8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x104>)
 8004554:	e021      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  400.0f) ?  400.0f
 8004556:	edd7 7a02 	vldr	s15, [r7, #8]
 800455a:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80045cc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x108>
 800455e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004566:	d801      	bhi.n	800456c <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xa8>
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x10c>)
 800456a:	e016      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  : (Odr <=  800.0f) ?  800.0f
 800456c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004570:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80045d4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x110>
 8004574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457c:	d801      	bhi.n	8004582 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xbe>
 800457e:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x114>)
 8004580:	e00b      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
                  :                    1600.0f;
 8004582:	edd7 7a02 	vldr	s15, [r7, #8]
 8004586:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80045dc <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x118>
 800458a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	d801      	bhi.n	8004598 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8004594:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x11c>)
 8004596:	e000      	b.n	800459a <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0xd6>
 8004598:	4b12      	ldr	r3, [pc, #72]	@ (80045e4 <LIS2DW12_ACC_SetOutputDataRate_When_Disabled+0x120>)
  pObj->acc_odr = (Odr <=    1.6f) ?    1.6f
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	6353      	str	r3, [r2, #52]	@ 0x34

  return LIS2DW12_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	3fcccccd 	.word	0x3fcccccd
 80045b0:	3fcccccd 	.word	0x3fcccccd
 80045b4:	41480000 	.word	0x41480000
 80045b8:	41c80000 	.word	0x41c80000
 80045bc:	42480000 	.word	0x42480000
 80045c0:	42480000 	.word	0x42480000
 80045c4:	42c80000 	.word	0x42c80000
 80045c8:	42c80000 	.word	0x42c80000
 80045cc:	43480000 	.word	0x43480000
 80045d0:	43480000 	.word	0x43480000
 80045d4:	43c80000 	.word	0x43c80000
 80045d8:	43c80000 	.word	0x43c80000
 80045dc:	44480000 	.word	0x44480000
 80045e0:	44480000 	.word	0x44480000
 80045e4:	44c80000 	.word	0x44c80000

080045e8 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	607a      	str	r2, [r7, #4]
 80045f2:	461a      	mov	r2, r3
 80045f4:	460b      	mov	r3, r1
 80045f6:	72fb      	strb	r3, [r7, #11]
 80045f8:	4613      	mov	r3, r2
 80045fa:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	695c      	ldr	r4, [r3, #20]
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	7b1b      	ldrb	r3, [r3, #12]
 8004608:	4618      	mov	r0, r3
 800460a:	7afb      	ldrb	r3, [r7, #11]
 800460c:	b299      	uxth	r1, r3
 800460e:	893b      	ldrh	r3, [r7, #8]
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	47a0      	blx	r4
 8004614:	4603      	mov	r3, r0
}
 8004616:	4618      	mov	r0, r3
 8004618:	371c      	adds	r7, #28
 800461a:	46bd      	mov	sp, r7
 800461c:	bd90      	pop	{r4, r7, pc}

0800461e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800461e:	b590      	push	{r4, r7, lr}
 8004620:	b087      	sub	sp, #28
 8004622:	af00      	add	r7, sp, #0
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	607a      	str	r2, [r7, #4]
 8004628:	461a      	mov	r2, r3
 800462a:	460b      	mov	r3, r1
 800462c:	72fb      	strb	r3, [r7, #11]
 800462e:	4613      	mov	r3, r2
 8004630:	813b      	strh	r3, [r7, #8]
  LIS2DW12_Object_t *pObj = (LIS2DW12_Object_t *)Handle;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	691c      	ldr	r4, [r3, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	7b1b      	ldrb	r3, [r3, #12]
 800463e:	4618      	mov	r0, r3
 8004640:	7afb      	ldrb	r3, [r7, #11]
 8004642:	b299      	uxth	r1, r3
 8004644:	893b      	ldrh	r3, [r7, #8]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	47a0      	blx	r4
 800464a:	4603      	mov	r3, r0
}
 800464c:	4618      	mov	r0, r3
 800464e:	371c      	adds	r7, #28
 8004650:	46bd      	mov	sp, r7
 8004652:	bd90      	pop	{r4, r7, pc}

08004654 <lis2dw12_read_reg>:
  *
  */
int32_t lis2dw12_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8004654:	b590      	push	{r4, r7, lr}
 8004656:	b087      	sub	sp, #28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	461a      	mov	r2, r3
 8004660:	460b      	mov	r3, r1
 8004662:	72fb      	strb	r3, [r7, #11]
 8004664:	4613      	mov	r3, r2
 8004666:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	685c      	ldr	r4, [r3, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	68d8      	ldr	r0, [r3, #12]
 8004670:	893b      	ldrh	r3, [r7, #8]
 8004672:	7af9      	ldrb	r1, [r7, #11]
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	47a0      	blx	r4
 8004678:	6178      	str	r0, [r7, #20]

  return ret;
 800467a:	697b      	ldr	r3, [r7, #20]
}
 800467c:	4618      	mov	r0, r3
 800467e:	371c      	adds	r7, #28
 8004680:	46bd      	mov	sp, r7
 8004682:	bd90      	pop	{r4, r7, pc}

08004684 <lis2dw12_write_reg>:
  *
  */
int32_t lis2dw12_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                           uint8_t *data,
                           uint16_t len)
{
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b087      	sub	sp, #28
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	461a      	mov	r2, r3
 8004690:	460b      	mov	r3, r1
 8004692:	72fb      	strb	r3, [r7, #11]
 8004694:	4613      	mov	r3, r2
 8004696:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681c      	ldr	r4, [r3, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	68d8      	ldr	r0, [r3, #12]
 80046a0:	893b      	ldrh	r3, [r7, #8]
 80046a2:	7af9      	ldrb	r1, [r7, #11]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	47a0      	blx	r4
 80046a8:	6178      	str	r0, [r7, #20]

  return ret;
 80046aa:	697b      	ldr	r3, [r7, #20]
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	371c      	adds	r7, #28
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd90      	pop	{r4, r7, pc}

080046b4 <lis2dw12_power_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_set(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t val)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80046c0:	f107 0210 	add.w	r2, r7, #16
 80046c4:	2301      	movs	r3, #1
 80046c6:	2120      	movs	r1, #32
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f7ff ffc3 	bl	8004654 <lis2dw12_read_reg>
 80046ce:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d118      	bne.n	8004708 <lis2dw12_power_mode_set+0x54>
  {
    ctrl1.mode = ((uint8_t) val & 0x0CU) >> 2;
 80046d6:	78fb      	ldrb	r3, [r7, #3]
 80046d8:	089b      	lsrs	r3, r3, #2
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	b2da      	uxtb	r2, r3
 80046e0:	7c3b      	ldrb	r3, [r7, #16]
 80046e2:	f362 0383 	bfi	r3, r2, #2, #2
 80046e6:	743b      	strb	r3, [r7, #16]
    ctrl1.lp_mode = (uint8_t) val & 0x03U ;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	b2da      	uxtb	r2, r3
 80046f0:	7c3b      	ldrb	r3, [r7, #16]
 80046f2:	f362 0301 	bfi	r3, r2, #0, #2
 80046f6:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80046f8:	f107 0210 	add.w	r2, r7, #16
 80046fc:	2301      	movs	r3, #1
 80046fe:	2120      	movs	r1, #32
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f7ff ffbf 	bl	8004684 <lis2dw12_write_reg>
 8004706:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d107      	bne.n	800471e <lis2dw12_power_mode_set+0x6a>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 800470e:	f107 020c 	add.w	r2, r7, #12
 8004712:	2301      	movs	r3, #1
 8004714:	2125      	movs	r1, #37	@ 0x25
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff ff9c 	bl	8004654 <lis2dw12_read_reg>
 800471c:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d110      	bne.n	8004746 <lis2dw12_power_mode_set+0x92>
  {
    ctrl6.low_noise = ((uint8_t) val & 0x10U) >> 4;
 8004724:	78fb      	ldrb	r3, [r7, #3]
 8004726:	091b      	lsrs	r3, r3, #4
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	b2da      	uxtb	r2, r3
 800472e:	7b3b      	ldrb	r3, [r7, #12]
 8004730:	f362 0382 	bfi	r3, r2, #2, #1
 8004734:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004736:	f107 020c 	add.w	r2, r7, #12
 800473a:	2301      	movs	r3, #1
 800473c:	2125      	movs	r1, #37	@ 0x25
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff ffa0 	bl	8004684 <lis2dw12_write_reg>
 8004744:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004746:	697b      	ldr	r3, [r7, #20]
}
 8004748:	4618      	mov	r0, r3
 800474a:	3718      	adds	r7, #24
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <lis2dw12_power_mode_get>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_power_mode_get(stmdev_ctx_t *ctx,
                                lis2dw12_mode_t *val)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl6_t ctrl6;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800475a:	f107 0210 	add.w	r2, r7, #16
 800475e:	2301      	movs	r3, #1
 8004760:	2120      	movs	r1, #32
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7ff ff76 	bl	8004654 <lis2dw12_read_reg>
 8004768:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b00      	cmp	r3, #0
 800476e:	f040 80a3 	bne.w	80048b8 <lis2dw12_power_mode_get+0x168>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &ctrl6, 1);
 8004772:	f107 020c 	add.w	r2, r7, #12
 8004776:	2301      	movs	r3, #1
 8004778:	2125      	movs	r1, #37	@ 0x25
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ff6a 	bl	8004654 <lis2dw12_read_reg>
 8004780:	6178      	str	r0, [r7, #20]

    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 8004782:	7b3b      	ldrb	r3, [r7, #12]
 8004784:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004788:	b2db      	uxtb	r3, r3
 800478a:	011a      	lsls	r2, r3, #4
 800478c:	7c3b      	ldrb	r3, [r7, #16]
 800478e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8004792:	b2db      	uxtb	r3, r3
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
             ctrl1.lp_mode))
 8004798:	7c3a      	ldrb	r2, [r7, #16]
 800479a:	f3c2 0201 	ubfx	r2, r2, #0, #2
 800479e:	b2d2      	uxtb	r2, r2
    switch (((ctrl6.low_noise << 4) + (ctrl1.mode << 2) +
 80047a0:	4413      	add	r3, r2
 80047a2:	2b1b      	cmp	r3, #27
 80047a4:	f200 8084 	bhi.w	80048b0 <lis2dw12_power_mode_get+0x160>
 80047a8:	a201      	add	r2, pc, #4	@ (adr r2, 80047b0 <lis2dw12_power_mode_get+0x60>)
 80047aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ae:	bf00      	nop
 80047b0:	08004841 	.word	0x08004841
 80047b4:	08004839 	.word	0x08004839
 80047b8:	08004831 	.word	0x08004831
 80047bc:	08004829 	.word	0x08004829
 80047c0:	08004821 	.word	0x08004821
 80047c4:	080048b1 	.word	0x080048b1
 80047c8:	080048b1 	.word	0x080048b1
 80047cc:	080048b1 	.word	0x080048b1
 80047d0:	08004861 	.word	0x08004861
 80047d4:	08004859 	.word	0x08004859
 80047d8:	08004851 	.word	0x08004851
 80047dc:	08004849 	.word	0x08004849
 80047e0:	080048b1 	.word	0x080048b1
 80047e4:	080048b1 	.word	0x080048b1
 80047e8:	080048b1 	.word	0x080048b1
 80047ec:	080048b1 	.word	0x080048b1
 80047f0:	08004889 	.word	0x08004889
 80047f4:	08004881 	.word	0x08004881
 80047f8:	08004879 	.word	0x08004879
 80047fc:	08004871 	.word	0x08004871
 8004800:	08004869 	.word	0x08004869
 8004804:	080048b1 	.word	0x080048b1
 8004808:	080048b1 	.word	0x080048b1
 800480c:	080048b1 	.word	0x080048b1
 8004810:	080048a9 	.word	0x080048a9
 8004814:	080048a1 	.word	0x080048a1
 8004818:	08004899 	.word	0x08004899
 800481c:	08004891 	.word	0x08004891
    {
      case LIS2DW12_HIGH_PERFORMANCE:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2204      	movs	r2, #4
 8004824:	701a      	strb	r2, [r3, #0]
        break;
 8004826:	e047      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_4:
        *val = LIS2DW12_CONT_LOW_PWR_4;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	2203      	movs	r2, #3
 800482c:	701a      	strb	r2, [r3, #0]
        break;
 800482e:	e043      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_3:
        *val = LIS2DW12_CONT_LOW_PWR_3;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2202      	movs	r2, #2
 8004834:	701a      	strb	r2, [r3, #0]
        break;
 8004836:	e03f      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_2:
        *val = LIS2DW12_CONT_LOW_PWR_2;
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
        break;
 800483e:	e03b      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_12bit;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
        break;
 8004846:	e037      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_4;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	220b      	movs	r2, #11
 800484c:	701a      	strb	r2, [r3, #0]
        break;
 800484e:	e033      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_3;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	220a      	movs	r2, #10
 8004854:	701a      	strb	r2, [r3, #0]
        break;
 8004856:	e02f      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_2;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2209      	movs	r2, #9
 800485c:	701a      	strb	r2, [r3, #0]
        break;
 800485e:	e02b      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_PWR_12bit;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2208      	movs	r2, #8
 8004864:	701a      	strb	r2, [r3, #0]
        break;
 8004866:	e027      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE:
        *val = LIS2DW12_HIGH_PERFORMANCE_LOW_NOISE;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2214      	movs	r2, #20
 800486c:	701a      	strb	r2, [r3, #0]
        break;
 800486e:	e023      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_4;
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	2213      	movs	r2, #19
 8004874:	701a      	strb	r2, [r3, #0]
        break;
 8004876:	e01f      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_3;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	2212      	movs	r2, #18
 800487c:	701a      	strb	r2, [r3, #0]
        break;
 800487e:	e01b      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_2;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2211      	movs	r2, #17
 8004884:	701a      	strb	r2, [r3, #0]
        break;
 8004886:	e017      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit:
        *val = LIS2DW12_CONT_LOW_PWR_LOW_NOISE_12bit;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2210      	movs	r2, #16
 800488c:	701a      	strb	r2, [r3, #0]
        break;
 800488e:	e013      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_4;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	221b      	movs	r2, #27
 8004894:	701a      	strb	r2, [r3, #0]
        break;
 8004896:	e00f      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_3;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	221a      	movs	r2, #26
 800489c:	701a      	strb	r2, [r3, #0]
        break;
 800489e:	e00b      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2:
        *val = LIS2DW12_SINGLE_LOW_PWR_LOW_NOISE_2;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	2219      	movs	r2, #25
 80048a4:	701a      	strb	r2, [r3, #0]
        break;
 80048a6:	e007      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      case LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit:
        *val = LIS2DW12_SINGLE_LOW_LOW_NOISE_PWR_12bit;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2218      	movs	r2, #24
 80048ac:	701a      	strb	r2, [r3, #0]
        break;
 80048ae:	e003      	b.n	80048b8 <lis2dw12_power_mode_get+0x168>

      default:
        *val = LIS2DW12_HIGH_PERFORMANCE;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2204      	movs	r2, #4
 80048b4:	701a      	strb	r2, [r3, #0]
        break;
 80048b6:	bf00      	nop
    }
  }

  return ret;
 80048b8:	697b      	ldr	r3, [r7, #20]
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop

080048c4 <lis2dw12_data_rate_set>:
  * @param  val      change the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_set(stmdev_ctx_t *ctx, lis2dw12_odr_t val)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
 80048cc:	460b      	mov	r3, r1
 80048ce:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048d0:	f107 0210 	add.w	r2, r7, #16
 80048d4:	2301      	movs	r3, #1
 80048d6:	2120      	movs	r1, #32
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff febb 	bl	8004654 <lis2dw12_read_reg>
 80048de:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10f      	bne.n	8004906 <lis2dw12_data_rate_set+0x42>
  {
    ctrl1.odr = (uint8_t) val;
 80048e6:	78fb      	ldrb	r3, [r7, #3]
 80048e8:	f003 030f 	and.w	r3, r3, #15
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	7c3b      	ldrb	r3, [r7, #16]
 80048f0:	f362 1307 	bfi	r3, r2, #4, #4
 80048f4:	743b      	strb	r3, [r7, #16]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 80048f6:	f107 0210 	add.w	r2, r7, #16
 80048fa:	2301      	movs	r3, #1
 80048fc:	2120      	movs	r1, #32
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f7ff fec0 	bl	8004684 <lis2dw12_write_reg>
 8004904:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d107      	bne.n	800491c <lis2dw12_data_rate_set+0x58>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 800490c:	f107 020c 	add.w	r2, r7, #12
 8004910:	2301      	movs	r3, #1
 8004912:	2122      	movs	r1, #34	@ 0x22
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff fe9d 	bl	8004654 <lis2dw12_read_reg>
 800491a:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d110      	bne.n	8004944 <lis2dw12_data_rate_set+0x80>
  {
    ctrl3.slp_mode = ((uint8_t) val & 0x30U) >> 4;
 8004922:	78fb      	ldrb	r3, [r7, #3]
 8004924:	091b      	lsrs	r3, r3, #4
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	b2da      	uxtb	r2, r3
 800492c:	7b3b      	ldrb	r3, [r7, #12]
 800492e:	f362 0301 	bfi	r3, r2, #0, #2
 8004932:	733b      	strb	r3, [r7, #12]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004934:	f107 020c 	add.w	r2, r7, #12
 8004938:	2301      	movs	r3, #1
 800493a:	2122      	movs	r1, #34	@ 0x22
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff fea1 	bl	8004684 <lis2dw12_write_reg>
 8004942:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8004944:	697b      	ldr	r3, [r7, #20]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3718      	adds	r7, #24
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <lis2dw12_data_rate_get>:
  * @param  val      Get the values of odr in reg CTRL1
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_data_rate_get(stmdev_ctx_t *ctx, lis2dw12_odr_t *val)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl1_t ctrl1;
  lis2dw12_ctrl3_t ctrl3;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL1, (uint8_t *) &ctrl1, 1);
 800495a:	f107 0210 	add.w	r2, r7, #16
 800495e:	2301      	movs	r3, #1
 8004960:	2120      	movs	r1, #32
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe76 	bl	8004654 <lis2dw12_read_reg>
 8004968:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 80b3 	bne.w	8004ad8 <lis2dw12_data_rate_get+0x188>
  {
    ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL3, (uint8_t *) &ctrl3, 1);
 8004972:	f107 020c 	add.w	r2, r7, #12
 8004976:	2301      	movs	r3, #1
 8004978:	2122      	movs	r1, #34	@ 0x22
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f7ff fe6a 	bl	8004654 <lis2dw12_read_reg>
 8004980:	6178      	str	r0, [r7, #20]

    switch ((ctrl3.slp_mode << 4) + ctrl1.odr)
 8004982:	7b3b      	ldrb	r3, [r7, #12]
 8004984:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8004988:	b2db      	uxtb	r3, r3
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	7c3a      	ldrb	r2, [r7, #16]
 800498e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004992:	b2d2      	uxtb	r2, r2
 8004994:	4413      	add	r3, r2
 8004996:	2b32      	cmp	r3, #50	@ 0x32
 8004998:	f200 809a 	bhi.w	8004ad0 <lis2dw12_data_rate_get+0x180>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <lis2dw12_data_rate_get+0x54>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	08004a71 	.word	0x08004a71
 80049a8:	08004a79 	.word	0x08004a79
 80049ac:	08004a81 	.word	0x08004a81
 80049b0:	08004a89 	.word	0x08004a89
 80049b4:	08004a91 	.word	0x08004a91
 80049b8:	08004a99 	.word	0x08004a99
 80049bc:	08004aa1 	.word	0x08004aa1
 80049c0:	08004aa9 	.word	0x08004aa9
 80049c4:	08004ab1 	.word	0x08004ab1
 80049c8:	08004ab9 	.word	0x08004ab9
 80049cc:	08004ad1 	.word	0x08004ad1
 80049d0:	08004ad1 	.word	0x08004ad1
 80049d4:	08004ad1 	.word	0x08004ad1
 80049d8:	08004ad1 	.word	0x08004ad1
 80049dc:	08004ad1 	.word	0x08004ad1
 80049e0:	08004ad1 	.word	0x08004ad1
 80049e4:	08004ad1 	.word	0x08004ad1
 80049e8:	08004ad1 	.word	0x08004ad1
 80049ec:	08004ac9 	.word	0x08004ac9
 80049f0:	08004ad1 	.word	0x08004ad1
 80049f4:	08004ad1 	.word	0x08004ad1
 80049f8:	08004ad1 	.word	0x08004ad1
 80049fc:	08004ad1 	.word	0x08004ad1
 8004a00:	08004ad1 	.word	0x08004ad1
 8004a04:	08004ad1 	.word	0x08004ad1
 8004a08:	08004ad1 	.word	0x08004ad1
 8004a0c:	08004ad1 	.word	0x08004ad1
 8004a10:	08004ad1 	.word	0x08004ad1
 8004a14:	08004ad1 	.word	0x08004ad1
 8004a18:	08004ad1 	.word	0x08004ad1
 8004a1c:	08004ad1 	.word	0x08004ad1
 8004a20:	08004ad1 	.word	0x08004ad1
 8004a24:	08004ad1 	.word	0x08004ad1
 8004a28:	08004ad1 	.word	0x08004ad1
 8004a2c:	08004ad1 	.word	0x08004ad1
 8004a30:	08004ad1 	.word	0x08004ad1
 8004a34:	08004ad1 	.word	0x08004ad1
 8004a38:	08004ad1 	.word	0x08004ad1
 8004a3c:	08004ad1 	.word	0x08004ad1
 8004a40:	08004ad1 	.word	0x08004ad1
 8004a44:	08004ad1 	.word	0x08004ad1
 8004a48:	08004ad1 	.word	0x08004ad1
 8004a4c:	08004ad1 	.word	0x08004ad1
 8004a50:	08004ad1 	.word	0x08004ad1
 8004a54:	08004ad1 	.word	0x08004ad1
 8004a58:	08004ad1 	.word	0x08004ad1
 8004a5c:	08004ad1 	.word	0x08004ad1
 8004a60:	08004ad1 	.word	0x08004ad1
 8004a64:	08004ad1 	.word	0x08004ad1
 8004a68:	08004ad1 	.word	0x08004ad1
 8004a6c:	08004ac1 	.word	0x08004ac1
    {
      case LIS2DW12_XL_ODR_OFF:
        *val = LIS2DW12_XL_ODR_OFF;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]
        break;
 8004a76:	e02f      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1Hz6_LP_ONLY:
        *val = LIS2DW12_XL_ODR_1Hz6_LP_ONLY;
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	701a      	strb	r2, [r3, #0]
        break;
 8004a7e:	e02b      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_12Hz5:
        *val = LIS2DW12_XL_ODR_12Hz5;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2202      	movs	r2, #2
 8004a84:	701a      	strb	r2, [r3, #0]
        break;
 8004a86:	e027      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_25Hz:
        *val = LIS2DW12_XL_ODR_25Hz;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	2203      	movs	r2, #3
 8004a8c:	701a      	strb	r2, [r3, #0]
        break;
 8004a8e:	e023      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_50Hz:
        *val = LIS2DW12_XL_ODR_50Hz;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2204      	movs	r2, #4
 8004a94:	701a      	strb	r2, [r3, #0]
        break;
 8004a96:	e01f      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_100Hz:
        *val = LIS2DW12_XL_ODR_100Hz;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2205      	movs	r2, #5
 8004a9c:	701a      	strb	r2, [r3, #0]
        break;
 8004a9e:	e01b      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_200Hz:
        *val = LIS2DW12_XL_ODR_200Hz;
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2206      	movs	r2, #6
 8004aa4:	701a      	strb	r2, [r3, #0]
        break;
 8004aa6:	e017      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_400Hz:
        *val = LIS2DW12_XL_ODR_400Hz;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2207      	movs	r2, #7
 8004aac:	701a      	strb	r2, [r3, #0]
        break;
 8004aae:	e013      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_800Hz:
        *val = LIS2DW12_XL_ODR_800Hz;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2208      	movs	r2, #8
 8004ab4:	701a      	strb	r2, [r3, #0]
        break;
 8004ab6:	e00f      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_ODR_1k6Hz:
        *val = LIS2DW12_XL_ODR_1k6Hz;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2209      	movs	r2, #9
 8004abc:	701a      	strb	r2, [r3, #0]
        break;
 8004abe:	e00b      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_SW_TRIG:
        *val = LIS2DW12_XL_SET_SW_TRIG;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2232      	movs	r2, #50	@ 0x32
 8004ac4:	701a      	strb	r2, [r3, #0]
        break;
 8004ac6:	e007      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      case LIS2DW12_XL_SET_PIN_TRIG:
        *val = LIS2DW12_XL_SET_PIN_TRIG;
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2212      	movs	r2, #18
 8004acc:	701a      	strb	r2, [r3, #0]
        break;
 8004ace:	e003      	b.n	8004ad8 <lis2dw12_data_rate_get+0x188>

      default:
        *val = LIS2DW12_XL_ODR_OFF;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
        break;
 8004ad6:	bf00      	nop
    }
  }

  return ret;
 8004ad8:	697b      	ldr	r3, [r7, #20]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop

08004ae4 <lis2dw12_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	460b      	mov	r3, r1
 8004aee:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004af0:	f107 0208 	add.w	r2, r7, #8
 8004af4:	2301      	movs	r3, #1
 8004af6:	2121      	movs	r1, #33	@ 0x21
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7ff fdab 	bl	8004654 <lis2dw12_read_reg>
 8004afe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d10f      	bne.n	8004b26 <lis2dw12_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8004b06:	78fb      	ldrb	r3, [r7, #3]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	7a3b      	ldrb	r3, [r7, #8]
 8004b10:	f362 03c3 	bfi	r3, r2, #3, #1
 8004b14:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004b16:	f107 0208 	add.w	r2, r7, #8
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	2121      	movs	r1, #33	@ 0x21
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fdb0 	bl	8004684 <lis2dw12_write_reg>
 8004b24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b26:	68fb      	ldr	r3, [r7, #12]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <lis2dw12_full_scale_set>:
  * @param  val      change the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_set(stmdev_ctx_t *ctx, lis2dw12_fs_t val)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	460b      	mov	r3, r1
 8004b3a:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004b3c:	f107 0208 	add.w	r2, r7, #8
 8004b40:	2301      	movs	r3, #1
 8004b42:	2125      	movs	r1, #37	@ 0x25
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f7ff fd85 	bl	8004654 <lis2dw12_read_reg>
 8004b4a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10f      	bne.n	8004b72 <lis2dw12_full_scale_set+0x42>
  {
    reg.fs = (uint8_t) val;
 8004b52:	78fb      	ldrb	r3, [r7, #3]
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	7a3b      	ldrb	r3, [r7, #8]
 8004b5c:	f362 1305 	bfi	r3, r2, #4, #2
 8004b60:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004b62:	f107 0208 	add.w	r2, r7, #8
 8004b66:	2301      	movs	r3, #1
 8004b68:	2125      	movs	r1, #37	@ 0x25
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff fd8a 	bl	8004684 <lis2dw12_write_reg>
 8004b70:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004b72:	68fb      	ldr	r3, [r7, #12]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <lis2dw12_full_scale_get>:
  * @param  val      Get the values of fs in reg CTRL6
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_full_scale_get(stmdev_ctx_t *ctx, lis2dw12_fs_t *val)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  lis2dw12_ctrl6_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL6, (uint8_t *) &reg, 1);
 8004b86:	f107 0208 	add.w	r2, r7, #8
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	2125      	movs	r1, #37	@ 0x25
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7ff fd60 	bl	8004654 <lis2dw12_read_reg>
 8004b94:	60f8      	str	r0, [r7, #12]

  switch (reg.fs)
 8004b96:	7a3b      	ldrb	r3, [r7, #8]
 8004b98:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b03      	cmp	r3, #3
 8004ba0:	d81a      	bhi.n	8004bd8 <lis2dw12_full_scale_get+0x5c>
 8004ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba8 <lis2dw12_full_scale_get+0x2c>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bb9 	.word	0x08004bb9
 8004bac:	08004bc1 	.word	0x08004bc1
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bd1 	.word	0x08004bd1
  {
    case LIS2DW12_2g:
      *val = LIS2DW12_2g;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
      break;
 8004bbe:	e00f      	b.n	8004be0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_4g:
      *val = LIS2DW12_4g;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	701a      	strb	r2, [r3, #0]
      break;
 8004bc6:	e00b      	b.n	8004be0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_8g:
      *val = LIS2DW12_8g;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	701a      	strb	r2, [r3, #0]
      break;
 8004bce:	e007      	b.n	8004be0 <lis2dw12_full_scale_get+0x64>

    case LIS2DW12_16g:
      *val = LIS2DW12_16g;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	2203      	movs	r2, #3
 8004bd4:	701a      	strb	r2, [r3, #0]
      break;
 8004bd6:	e003      	b.n	8004be0 <lis2dw12_full_scale_get+0x64>

    default:
      *val = LIS2DW12_2g;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	701a      	strb	r2, [r3, #0]
      break;
 8004bde:	bf00      	nop
  }

  return ret;
 8004be0:	68fb      	ldr	r3, [r7, #12]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop

08004bec <lis2dw12_acceleration_raw_get>:
  * @param  val      buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_OUT_X_L, buff, 6);
 8004bf6:	f107 020c 	add.w	r2, r7, #12
 8004bfa:	2306      	movs	r3, #6
 8004bfc:	2128      	movs	r1, #40	@ 0x28
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fd28 	bl	8004654 <lis2dw12_read_reg>
 8004c04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8004c06:	7b7b      	ldrb	r3, [r7, #13]
 8004c08:	b21a      	sxth	r2, r3
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	7b3a      	ldrb	r2, [r7, #12]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	b21a      	sxth	r2, r3
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8004c26:	7bfa      	ldrb	r2, [r7, #15]
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	3302      	adds	r3, #2
 8004c2c:	b212      	sxth	r2, r2
 8004c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	3302      	adds	r3, #2
 8004c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	021b      	lsls	r3, r3, #8
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	7bba      	ldrb	r2, [r7, #14]
 8004c40:	4413      	add	r3, r2
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	3302      	adds	r3, #2
 8004c48:	b212      	sxth	r2, r2
 8004c4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8004c4c:	7c7a      	ldrb	r2, [r7, #17]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	3304      	adds	r3, #4
 8004c52:	b212      	sxth	r2, r2
 8004c54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	3304      	adds	r3, #4
 8004c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	021b      	lsls	r3, r3, #8
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	7c3a      	ldrb	r2, [r7, #16]
 8004c66:	4413      	add	r3, r2
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	b212      	sxth	r2, r2
 8004c70:	801a      	strh	r2, [r3, #0]

  return ret;
 8004c72:	697b      	ldr	r3, [r7, #20]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <lis2dw12_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_WHO_AM_I, buff, 1);
 8004c86:	2301      	movs	r3, #1
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	210f      	movs	r1, #15
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f7ff fce1 	bl	8004654 <lis2dw12_read_reg>
 8004c92:	60f8      	str	r0, [r7, #12]

  return ret;
 8004c94:	68fb      	ldr	r3, [r7, #12]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <lis2dw12_auto_increment_set>:
  * @param  val      change the values of if_add_inc in reg CTRL2
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	70fb      	strb	r3, [r7, #3]
  lis2dw12_ctrl2_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004caa:	f107 0208 	add.w	r2, r7, #8
 8004cae:	2301      	movs	r3, #1
 8004cb0:	2121      	movs	r1, #33	@ 0x21
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff fcce 	bl	8004654 <lis2dw12_read_reg>
 8004cb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d10f      	bne.n	8004ce0 <lis2dw12_auto_increment_set+0x42>
  {
    reg.if_add_inc = val;
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	7a3b      	ldrb	r3, [r7, #8]
 8004cca:	f362 0382 	bfi	r3, r2, #2, #1
 8004cce:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_CTRL2, (uint8_t *) &reg, 1);
 8004cd0:	f107 0208 	add.w	r2, r7, #8
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2121      	movs	r1, #33	@ 0x21
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff fcd3 	bl	8004684 <lis2dw12_write_reg>
 8004cde:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <lis2dw12_fifo_mode_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2dw12_fifo_mode_set(stmdev_ctx_t *ctx,
                               lis2dw12_fmode_t val)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70fb      	strb	r3, [r7, #3]
  lis2dw12_fifo_ctrl_t reg;
  int32_t ret;

  ret = lis2dw12_read_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004cf6:	f107 0208 	add.w	r2, r7, #8
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	212e      	movs	r1, #46	@ 0x2e
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff fca8 	bl	8004654 <lis2dw12_read_reg>
 8004d04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10f      	bne.n	8004d2c <lis2dw12_fifo_mode_set+0x42>
  {
    reg.fmode = (uint8_t) val;
 8004d0c:	78fb      	ldrb	r3, [r7, #3]
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	7a3b      	ldrb	r3, [r7, #8]
 8004d16:	f362 1347 	bfi	r3, r2, #5, #3
 8004d1a:	723b      	strb	r3, [r7, #8]
    ret = lis2dw12_write_reg(ctx, LIS2DW12_FIFO_CTRL, (uint8_t *) &reg, 1);
 8004d1c:	f107 0208 	add.w	r2, r7, #8
 8004d20:	2301      	movs	r3, #1
 8004d22:	212e      	movs	r1, #46	@ 0x2e
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f7ff fcad 	bl	8004684 <lis2dw12_write_reg>
 8004d2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <LIS2MDL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_RegisterBusIO(LIS2MDL_Object_t *pObj, LIS2MDL_IO_t *pIO)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d103      	bne.n	8004d54 <LIS2MDL_RegisterBusIO+0x1c>
  {
    ret = LIS2MDL_ERROR;
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	e067      	b.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	7b1a      	ldrb	r2, [r3, #12]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	691a      	ldr	r2, [r3, #16]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695a      	ldr	r2, [r3, #20]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	699a      	ldr	r2, [r3, #24]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadMagRegWrap;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a28      	ldr	r2, [pc, #160]	@ (8004e30 <LIS2MDL_RegisterBusIO+0xf8>)
 8004d90:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteMagRegWrap;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a27      	ldr	r2, [pc, #156]	@ (8004e34 <LIS2MDL_RegisterBusIO+0xfc>)
 8004d96:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle    = pObj;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	687a      	ldr	r2, [r7, #4]
 8004da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <LIS2MDL_RegisterBusIO+0x7e>
    {
      ret = LIS2MDL_ERROR;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	e036      	b.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
    }
    else if (pObj->IO.Init() != LIS2MDL_OK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4798      	blx	r3
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <LIS2MDL_RegisterBusIO+0x92>
    {
      ret = LIS2MDL_ERROR;
 8004dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e02c      	b.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
    }
    else
    {
      if (pObj->IO.BusType != LIS2MDL_I2C_BUS) /* If the bus type is not I2C */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d028      	beq.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
      {
        /* Disable I2C interface support and enable eventually SPI 4-Wires only the first time */
        if (pObj->is_initialized == 0U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d123      	bne.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
        {
          if (pObj->IO.BusType == LIS2MDL_SPI_4WIRES_BUS) /* SPI 4-Wires */
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d10d      	bne.n	8004e00 <LIS2MDL_RegisterBusIO+0xc8>
          {
            /* Enable SPI 4-Wires and disable I2C support on the component */
            uint8_t data = 0x34;
 8004de4:	2334      	movs	r3, #52	@ 0x34
 8004de6:	72fb      	strb	r3, [r7, #11]

            if (LIS2MDL_Write_Reg(pObj, LIS2MDL_CFG_REG_C, data) != LIS2MDL_OK)
 8004de8:	7afb      	ldrb	r3, [r7, #11]
 8004dea:	461a      	mov	r2, r3
 8004dec:	2162      	movs	r1, #98	@ 0x62
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 fb18 	bl	8005424 <LIS2MDL_Write_Reg>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d014      	beq.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	e012      	b.n	8004e26 <LIS2MDL_RegisterBusIO+0xee>
            }
          }
          else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d101      	bne.n	8004e0c <LIS2MDL_RegisterBusIO+0xd4>
          {
            /* Do nothing, just keep I2C support on the component */
            return ret;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	e00c      	b.n	8004e26 <LIS2MDL_RegisterBusIO+0xee>
          }
          else
          {
            /* Disable I2C interface on the component */
            if (lis2mdl_i2c_interface_set(&(pObj->Ctx), LIS2MDL_I2C_DISABLE) != LIS2MDL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3320      	adds	r3, #32
 8004e10:	2101      	movs	r1, #1
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 ff69 	bl	8005cea <lis2mdl_i2c_interface_set>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d002      	beq.n	8004e24 <LIS2MDL_RegisterBusIO+0xec>
            {
              return LIS2MDL_ERROR;
 8004e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e22:	e000      	b.n	8004e26 <LIS2MDL_RegisterBusIO+0xee>
        }
      }
    }
  }

  return ret;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	0800547b 	.word	0x0800547b
 8004e34:	080054fd 	.word	0x080054fd

08004e38 <LIS2MDL_Init>:
  * @brief  Initialize the LIS2MDL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Init(LIS2MDL_Object_t *pObj)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;
  lis2mdl_cfg_reg_c_t reg_c;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2b03      	cmp	r3, #3
 8004e46:	d144      	bne.n	8004ed2 <LIS2MDL_Init+0x9a>
  {
    /* Read configuration from CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004e48:	f107 0208 	add.w	r2, r7, #8
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	2162      	movs	r1, #98	@ 0x62
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 fb94 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <LIS2MDL_Init+0x2a>
    {
      return LIS2MDL_ERROR;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	e06c      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004e62:	f107 020c 	add.w	r2, r7, #12
 8004e66:	2301      	movs	r3, #1
 8004e68:	2160      	movs	r1, #96	@ 0x60
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 fb87 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d002      	beq.n	8004e7c <LIS2MDL_Init+0x44>
    {
      return LIS2MDL_ERROR;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
 8004e7a:	e05f      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }

    /* Enable BDU */
    reg_c.bdu = PROPERTY_ENABLE;
 8004e7c:	7a3b      	ldrb	r3, [r7, #8]
 8004e7e:	f043 0310 	orr.w	r3, r3, #16
 8004e82:	723b      	strb	r3, [r7, #8]

    /* Self Test disabled. */
    reg_c.self_test = PROPERTY_DISABLE;
 8004e84:	7a3b      	ldrb	r3, [r7, #8]
 8004e86:	f36f 0341 	bfc	r3, #1, #1
 8004e8a:	723b      	strb	r3, [r7, #8]

    /* Operating mode selection - power down */
    reg_a.md = LIS2MDL_POWER_DOWN;
 8004e8c:	7b3b      	ldrb	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f362 0301 	bfi	r3, r2, #0, #2
 8004e94:	733b      	strb	r3, [r7, #12]

    /* Output data rate selection */
    reg_a.odr = LIS2MDL_ODR_100Hz;
 8004e96:	7b3b      	ldrb	r3, [r7, #12]
 8004e98:	f043 030c 	orr.w	r3, r3, #12
 8004e9c:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_C & CFG_REG_A regs */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_C, (uint8_t *)&reg_c, 1) != LIS2MDL_OK)
 8004e9e:	f107 0208 	add.w	r2, r7, #8
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	2162      	movs	r1, #98	@ 0x62
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fca8 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d002      	beq.n	8004eb8 <LIS2MDL_Init+0x80>
    {
      return LIS2MDL_ERROR;
 8004eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8004eb6:	e041      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8004eb8:	f107 020c 	add.w	r2, r7, #12
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	2160      	movs	r1, #96	@ 0x60
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 fc9b 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d032      	beq.n	8004f32 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ed0:	e034      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }
  }
  else
  {
    /* Enable BDU */
    if (lis2mdl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LIS2MDL_OK)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3320      	adds	r3, #32
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 fe61 	bl	8005ba0 <lis2mdl_block_data_update_set>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <LIS2MDL_Init+0xb2>
    {
      return LIS2MDL_ERROR;
 8004ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8004ee8:	e028      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }

    /* Operating mode selection - power down */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	3320      	adds	r3, #32
 8004eee:	2102      	movs	r1, #2
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f000 fdd1 	bl	8005a98 <lis2mdl_operating_mode_set>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <LIS2MDL_Init+0xca>
    {
      return LIS2MDL_ERROR;
 8004efc:	f04f 33ff 	mov.w	r3, #4294967295
 8004f00:	e01c      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }

    /* Output data rate selection */
    if (lis2mdl_data_rate_set(&(pObj->Ctx), LIS2MDL_ODR_100Hz) != LIS2MDL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	3320      	adds	r3, #32
 8004f06:	2103      	movs	r1, #3
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fdeb 	bl	8005ae4 <lis2mdl_data_rate_set>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d002      	beq.n	8004f1a <LIS2MDL_Init+0xe2>
    {
      return LIS2MDL_ERROR;
 8004f14:	f04f 33ff 	mov.w	r3, #4294967295
 8004f18:	e010      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }

    /* Self Test disabled. */
    if (lis2mdl_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LIS2MDL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3320      	adds	r3, #32
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 febc 	bl	8005c9e <lis2mdl_self_test_set>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <LIS2MDL_Init+0xfa>
    {
      return LIS2MDL_ERROR;
 8004f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f30:	e004      	b.n	8004f3c <LIS2MDL_Init+0x104>
    }
  }

  pObj->is_initialized = 1;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3710      	adds	r7, #16
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <LIS2MDL_DeInit>:
  * @brief  Deinitialize the LIS2MDL magnetometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_DeInit(LIS2MDL_Object_t *pObj)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LIS2MDL_MAG_Disable(pObj) != LIS2MDL_OK)
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f8a5 	bl	800509c <LIS2MDL_MAG_Disable>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d002      	beq.n	8004f5e <LIS2MDL_DeInit+0x1a>
  {
    return LIS2MDL_ERROR;
 8004f58:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5c:	e004      	b.n	8004f68 <LIS2MDL_DeInit+0x24>
  }

  pObj->is_initialized = 0;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LIS2MDL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <LIS2MDL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_ReadID(LIS2MDL_Object_t *pObj, uint8_t *Id)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b03      	cmp	r3, #3
 8004f80:	d10b      	bne.n	8004f9a <LIS2MDL_ReadID+0x2a>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_WHO_AM_I, Id, 1) != LIS2MDL_OK)
 8004f82:	2301      	movs	r3, #1
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	214f      	movs	r1, #79	@ 0x4f
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 faf8 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00e      	beq.n	8004fb2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004f94:	f04f 33ff 	mov.w	r3, #4294967295
 8004f98:	e00c      	b.n	8004fb4 <LIS2MDL_ReadID+0x44>
    }
  }
  else
  {
    if (lis2mdl_device_id_get(&(pObj->Ctx), Id) != LIS2MDL_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3320      	adds	r3, #32
 8004f9e:	6839      	ldr	r1, [r7, #0]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fe6b 	bl	8005c7c <lis2mdl_device_id_get>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <LIS2MDL_ReadID+0x42>
    {
      return LIS2MDL_ERROR;
 8004fac:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb0:	e000      	b.n	8004fb4 <LIS2MDL_ReadID+0x44>
    }
  }

  return LIS2MDL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <LIS2MDL_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LIS2MDL magnetometer sensor capabilities
  * @retval Component status
  */
int32_t LIS2MDL_GetCapabilities(LIS2MDL_Object_t *pObj, LIS2MDL_Capabilities_t *Capabilities)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 0;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 0;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 1;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 0;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 0;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 50;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2232      	movs	r2, #50	@ 0x32
 8004fee:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 0.0f;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 0.0f;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 100.0f;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4a04      	ldr	r2, [pc, #16]	@ (8005014 <LIS2MDL_GetCapabilities+0x58>)
 8005004:	619a      	str	r2, [r3, #24]
  return LIS2MDL_OK;
 8005006:	2300      	movs	r3, #0
}
 8005008:	4618      	mov	r0, r3
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr
 8005014:	42c80000 	.word	0x42c80000

08005018 <LIS2MDL_MAG_Enable>:
  * @brief Enable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Enable(LIS2MDL_Object_t *pObj)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already enabled */
  if (pObj->mag_is_enabled == 1U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <LIS2MDL_MAG_Enable+0x16>
  {
    return LIS2MDL_OK;
 800502a:	2300      	movs	r3, #0
 800502c:	e032      	b.n	8005094 <LIS2MDL_MAG_Enable+0x7c>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	2b03      	cmp	r3, #3
 8005034:	d11d      	bne.n	8005072 <LIS2MDL_MAG_Enable+0x5a>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005036:	f107 020c 	add.w	r2, r7, #12
 800503a:	2301      	movs	r3, #1
 800503c:	2160      	movs	r1, #96	@ 0x60
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa9d 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d002      	beq.n	8005050 <LIS2MDL_MAG_Enable+0x38>
    {
      return LIS2MDL_ERROR;
 800504a:	f04f 33ff 	mov.w	r3, #4294967295
 800504e:	e021      	b.n	8005094 <LIS2MDL_MAG_Enable+0x7c>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_CONTINUOUS_MODE;
 8005050:	7b3b      	ldrb	r3, [r7, #12]
 8005052:	f36f 0301 	bfc	r3, #0, #2
 8005056:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005058:	f107 020c 	add.w	r2, r7, #12
 800505c:	2301      	movs	r3, #1
 800505e:	2160      	movs	r1, #96	@ 0x60
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fbcb 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00e      	beq.n	800508a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
 8005070:	e010      	b.n	8005094 <LIS2MDL_MAG_Enable+0x7c>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_CONTINUOUS_MODE) != LIS2MDL_OK)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3320      	adds	r3, #32
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f000 fd0d 	bl	8005a98 <lis2mdl_operating_mode_set>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d002      	beq.n	800508a <LIS2MDL_MAG_Enable+0x72>
    {
      return LIS2MDL_ERROR;
 8005084:	f04f 33ff 	mov.w	r3, #4294967295
 8005088:	e004      	b.n	8005094 <LIS2MDL_MAG_Enable+0x7c>
    }
  }

  pObj->mag_is_enabled = 1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <LIS2MDL_MAG_Disable>:
  * @brief Disable the LIS2MDL magnetometer sensor
  * @param pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_Disable(LIS2MDL_Object_t *pObj)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  lis2mdl_cfg_reg_a_t reg_a;

  /* Check if the component is already disabled */
  if (pObj->mag_is_enabled == 0U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <LIS2MDL_MAG_Disable+0x16>
  {
    return LIS2MDL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	e033      	b.n	800511a <LIS2MDL_MAG_Disable+0x7e>
  }

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b03      	cmp	r3, #3
 80050b8:	d11e      	bne.n	80050f8 <LIS2MDL_MAG_Disable+0x5c>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050ba:	f107 020c 	add.w	r2, r7, #12
 80050be:	2301      	movs	r3, #1
 80050c0:	2160      	movs	r1, #96	@ 0x60
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fa5b 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <LIS2MDL_MAG_Disable+0x38>
    {
      return LIS2MDL_ERROR;
 80050ce:	f04f 33ff 	mov.w	r3, #4294967295
 80050d2:	e022      	b.n	800511a <LIS2MDL_MAG_Disable+0x7e>
    }

    /* Operation mode selection. */
    reg_a.md = LIS2MDL_POWER_DOWN;
 80050d4:	7b3b      	ldrb	r3, [r7, #12]
 80050d6:	2202      	movs	r2, #2
 80050d8:	f362 0301 	bfi	r3, r2, #0, #2
 80050dc:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 80050de:	f107 020c 	add.w	r2, r7, #12
 80050e2:	2301      	movs	r3, #1
 80050e4:	2160      	movs	r1, #96	@ 0x60
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fb88 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 80050f2:	f04f 33ff 	mov.w	r3, #4294967295
 80050f6:	e010      	b.n	800511a <LIS2MDL_MAG_Disable+0x7e>
    }
  }
  else
  {
    /* Operation mode selection. */
    if (lis2mdl_operating_mode_set(&(pObj->Ctx), LIS2MDL_POWER_DOWN) != LIS2MDL_OK)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3320      	adds	r3, #32
 80050fc:	2102      	movs	r1, #2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 fcca 	bl	8005a98 <lis2mdl_operating_mode_set>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d002      	beq.n	8005110 <LIS2MDL_MAG_Disable+0x74>
    {
      return LIS2MDL_ERROR;
 800510a:	f04f 33ff 	mov.w	r3, #4294967295
 800510e:	e004      	b.n	800511a <LIS2MDL_MAG_Disable+0x7e>
    }
  }

  pObj->mag_is_enabled = 0;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LIS2MDL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <LIS2MDL_MAG_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetSensitivity(LIS2MDL_Object_t *pObj, float *Sensitivity)
{
 8005122:	b480      	push	{r7}
 8005124:	b083      	sub	sp, #12
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  *Sensitivity = LIS2MDL_MAG_SENSITIVITY_FS_50GAUSS;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8005132:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <LIS2MDL_MAG_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetOutputDataRate(LIS2MDL_Object_t *pObj, float *Odr)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  int32_t ret = LIS2MDL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	60fb      	str	r3, [r7, #12]
  lis2mdl_odr_t odr_low_level;

  /* Get current output data rate. */
  if (lis2mdl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LIS2MDL_OK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	3320      	adds	r3, #32
 8005156:	f107 020b 	add.w	r2, r7, #11
 800515a:	4611      	mov	r1, r2
 800515c:	4618      	mov	r0, r3
 800515e:	f000 fce7 	bl	8005b30 <lis2mdl_data_rate_get>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <LIS2MDL_MAG_GetOutputDataRate+0x2a>
  {
    return LIS2MDL_ERROR;
 8005168:	f04f 33ff 	mov.w	r3, #4294967295
 800516c:	e023      	b.n	80051b6 <LIS2MDL_MAG_GetOutputDataRate+0x72>
  }

  switch (odr_low_level)
 800516e:	7afb      	ldrb	r3, [r7, #11]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d81b      	bhi.n	80051ac <LIS2MDL_MAG_GetOutputDataRate+0x68>
 8005174:	a201      	add	r2, pc, #4	@ (adr r2, 800517c <LIS2MDL_MAG_GetOutputDataRate+0x38>)
 8005176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800517a:	bf00      	nop
 800517c:	0800518d 	.word	0x0800518d
 8005180:	08005195 	.word	0x08005195
 8005184:	0800519d 	.word	0x0800519d
 8005188:	080051a5 	.word	0x080051a5
  {
    case LIS2MDL_ODR_10Hz:
      *Odr = 10.0f;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	4a0c      	ldr	r2, [pc, #48]	@ (80051c0 <LIS2MDL_MAG_GetOutputDataRate+0x7c>)
 8005190:	601a      	str	r2, [r3, #0]
      break;
 8005192:	e00f      	b.n	80051b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_20Hz:
      *Odr = 20.0f;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	4a0b      	ldr	r2, [pc, #44]	@ (80051c4 <LIS2MDL_MAG_GetOutputDataRate+0x80>)
 8005198:	601a      	str	r2, [r3, #0]
      break;
 800519a:	e00b      	b.n	80051b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_50Hz:
      *Odr = 50.0f;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	4a0a      	ldr	r2, [pc, #40]	@ (80051c8 <LIS2MDL_MAG_GetOutputDataRate+0x84>)
 80051a0:	601a      	str	r2, [r3, #0]
      break;
 80051a2:	e007      	b.n	80051b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    case LIS2MDL_ODR_100Hz:
      *Odr = 100.0f;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	4a09      	ldr	r2, [pc, #36]	@ (80051cc <LIS2MDL_MAG_GetOutputDataRate+0x88>)
 80051a8:	601a      	str	r2, [r3, #0]
      break;
 80051aa:	e003      	b.n	80051b4 <LIS2MDL_MAG_GetOutputDataRate+0x70>

    default:
      ret = LIS2MDL_ERROR;
 80051ac:	f04f 33ff 	mov.w	r3, #4294967295
 80051b0:	60fb      	str	r3, [r7, #12]
      break;
 80051b2:	bf00      	nop
  }

  return ret;
 80051b4:	68fb      	ldr	r3, [r7, #12]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	41200000 	.word	0x41200000
 80051c4:	41a00000 	.word	0x41a00000
 80051c8:	42480000 	.word	0x42480000
 80051cc:	42c80000 	.word	0x42c80000

080051d0 <LIS2MDL_MAG_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetOutputDataRate(LIS2MDL_Object_t *pObj, float Odr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	ed87 0a00 	vstr	s0, [r7]
  lis2mdl_odr_t new_odr;
  lis2mdl_cfg_reg_a_t reg_a;

  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
            : (Odr <= 20.000f) ? LIS2MDL_ODR_20Hz
 80051dc:	edd7 7a00 	vldr	s15, [r7]
 80051e0:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80051e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	d801      	bhi.n	80051f2 <LIS2MDL_MAG_SetOutputDataRate+0x22>
 80051ee:	2300      	movs	r3, #0
 80051f0:	e016      	b.n	8005220 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 80051f2:	edd7 7a00 	vldr	s15, [r7]
 80051f6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80051fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005202:	d801      	bhi.n	8005208 <LIS2MDL_MAG_SetOutputDataRate+0x38>
 8005204:	2301      	movs	r3, #1
 8005206:	e00b      	b.n	8005220 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 8005208:	edd7 7a00 	vldr	s15, [r7]
 800520c:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8005294 <LIS2MDL_MAG_SetOutputDataRate+0xc4>
 8005210:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005218:	d801      	bhi.n	800521e <LIS2MDL_MAG_SetOutputDataRate+0x4e>
 800521a:	2302      	movs	r3, #2
 800521c:	e000      	b.n	8005220 <LIS2MDL_MAG_SetOutputDataRate+0x50>
 800521e:	2303      	movs	r3, #3
  new_odr = (Odr <= 10.000f) ? LIS2MDL_ODR_10Hz
 8005220:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 50.000f) ? LIS2MDL_ODR_50Hz
            :                    LIS2MDL_ODR_100Hz;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b03      	cmp	r3, #3
 8005228:	d121      	bne.n	800526e <LIS2MDL_MAG_SetOutputDataRate+0x9e>
  {
    /* Read configuration from CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 800522a:	f107 020c 	add.w	r2, r7, #12
 800522e:	2301      	movs	r3, #1
 8005230:	2160      	movs	r1, #96	@ 0x60
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9a3 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <LIS2MDL_MAG_SetOutputDataRate+0x74>
    {
      return LIS2MDL_ERROR;
 800523e:	f04f 33ff 	mov.w	r3, #4294967295
 8005242:	e022      	b.n	800528a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }

    /* Output data rate selection */
    reg_a.odr = new_odr;
 8005244:	7bfb      	ldrb	r3, [r7, #15]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	b2da      	uxtb	r2, r3
 800524c:	7b3b      	ldrb	r3, [r7, #12]
 800524e:	f362 0383 	bfi	r3, r2, #2, #2
 8005252:	733b      	strb	r3, [r7, #12]

    /* Write configuration to CFG_REG_A reg */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, LIS2MDL_CFG_REG_A, (uint8_t *)&reg_a, 1) != LIS2MDL_OK)
 8005254:	f107 020c 	add.w	r2, r7, #12
 8005258:	2301      	movs	r3, #1
 800525a:	2160      	movs	r1, #96	@ 0x60
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 facd 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00f      	beq.n	8005288 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005268:	f04f 33ff 	mov.w	r3, #4294967295
 800526c:	e00d      	b.n	800528a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }
  else
  {
    if (lis2mdl_data_rate_set(&(pObj->Ctx), new_odr) != LIS2MDL_OK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	3320      	adds	r3, #32
 8005272:	7bfa      	ldrb	r2, [r7, #15]
 8005274:	4611      	mov	r1, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fc34 	bl	8005ae4 <lis2mdl_data_rate_set>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <LIS2MDL_MAG_SetOutputDataRate+0xb8>
    {
      return LIS2MDL_ERROR;
 8005282:	f04f 33ff 	mov.w	r3, #4294967295
 8005286:	e000      	b.n	800528a <LIS2MDL_MAG_SetOutputDataRate+0xba>
    }
  }

  return LIS2MDL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3710      	adds	r7, #16
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	42480000 	.word	0x42480000

08005298 <LIS2MDL_MAG_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetFullScale(LIS2MDL_Object_t *pObj, int32_t *FullScale)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  *FullScale = 50;
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2232      	movs	r2, #50	@ 0x32
 80052a6:	601a      	str	r2, [r3, #0]

  return LIS2MDL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LIS2MDL_MAG_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_SetFullScale(LIS2MDL_Object_t *pObj, int32_t FullScale)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
  return LIS2MDL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <LIS2MDL_MAG_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxesRaw(LIS2MDL_Object_t *pObj, LIS2MDL_AxesRaw_t *Value)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
  lis2mdl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	3320      	adds	r3, #32
 80052dc:	f107 0208 	add.w	r2, r7, #8
 80052e0:	4611      	mov	r1, r2
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 fc82 	bl	8005bec <lis2mdl_magnetic_raw_get>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d002      	beq.n	80052f4 <LIS2MDL_MAG_GetAxesRaw+0x26>
  {
    return LIS2MDL_ERROR;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	e00c      	b.n	800530e <LIS2MDL_MAG_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 80052f4:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 80052fc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8005304:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	809a      	strh	r2, [r3, #4]

  return LIS2MDL_OK;
 800530c:	2300      	movs	r3, #0
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <LIS2MDL_MAG_GetAxes>:
  * @param  pObj the device pObj
  * @param  MagneticField pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_MAG_GetAxes(LIS2MDL_Object_t *pObj, LIS2MDL_Axes_t *MagneticField)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b088      	sub	sp, #32
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  lis2mdl_axis3bit16_t data_raw;
  float sensitivity;

  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	2b03      	cmp	r3, #3
 8005326:	d134      	bne.n	8005392 <LIS2MDL_MAG_GetAxes+0x7c>
  {
    /* Read raw data values. */
    if (LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(pObj, LIS2MDL_OUTX_L_REG, buff, 6) != LIS2MDL_OK)
 8005328:	f107 0218 	add.w	r2, r7, #24
 800532c:	2306      	movs	r3, #6
 800532e:	2168      	movs	r1, #104	@ 0x68
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f924 	bl	800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d002      	beq.n	8005342 <LIS2MDL_MAG_GetAxes+0x2c>
    {
      return LIS2MDL_ERROR;
 800533c:	f04f 33ff 	mov.w	r3, #4294967295
 8005340:	e06c      	b.n	800541c <LIS2MDL_MAG_GetAxes+0x106>
    }
    data_raw.i16bit[0] = (int16_t)buff[1];
 8005342:	7e7b      	ldrb	r3, [r7, #25]
 8005344:	b21b      	sxth	r3, r3
 8005346:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[0] = (data_raw.i16bit[0] * 256) + (int16_t)buff[0];
 8005348:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800534c:	b29b      	uxth	r3, r3
 800534e:	021b      	lsls	r3, r3, #8
 8005350:	b29b      	uxth	r3, r3
 8005352:	7e3a      	ldrb	r2, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	b29b      	uxth	r3, r3
 8005358:	b21b      	sxth	r3, r3
 800535a:	823b      	strh	r3, [r7, #16]
    data_raw.i16bit[1] = (int16_t)buff[3];
 800535c:	7efb      	ldrb	r3, [r7, #27]
 800535e:	b21b      	sxth	r3, r3
 8005360:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[1] = (data_raw.i16bit[1] * 256) + (int16_t)buff[2];
 8005362:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005366:	b29b      	uxth	r3, r3
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	b29b      	uxth	r3, r3
 800536c:	7eba      	ldrb	r2, [r7, #26]
 800536e:	4413      	add	r3, r2
 8005370:	b29b      	uxth	r3, r3
 8005372:	b21b      	sxth	r3, r3
 8005374:	827b      	strh	r3, [r7, #18]
    data_raw.i16bit[2] = (int16_t)buff[5];
 8005376:	7f7b      	ldrb	r3, [r7, #29]
 8005378:	b21b      	sxth	r3, r3
 800537a:	82bb      	strh	r3, [r7, #20]
    data_raw.i16bit[2] = (data_raw.i16bit[2] * 256) + (int16_t)buff[4];
 800537c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005380:	b29b      	uxth	r3, r3
 8005382:	021b      	lsls	r3, r3, #8
 8005384:	b29b      	uxth	r3, r3
 8005386:	7f3a      	ldrb	r2, [r7, #28]
 8005388:	4413      	add	r3, r2
 800538a:	b29b      	uxth	r3, r3
 800538c:	b21b      	sxth	r3, r3
 800538e:	82bb      	strh	r3, [r7, #20]
 8005390:	e00d      	b.n	80053ae <LIS2MDL_MAG_GetAxes+0x98>
  }
  else
  {
    /* Read raw data values. */
    if (lis2mdl_magnetic_raw_get(&(pObj->Ctx), data_raw.i16bit) != LIS2MDL_OK)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3320      	adds	r3, #32
 8005396:	f107 0210 	add.w	r2, r7, #16
 800539a:	4611      	mov	r1, r2
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fc25 	bl	8005bec <lis2mdl_magnetic_raw_get>
 80053a2:	4603      	mov	r3, r0
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d002      	beq.n	80053ae <LIS2MDL_MAG_GetAxes+0x98>
    {
      return LIS2MDL_ERROR;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ac:	e036      	b.n	800541c <LIS2MDL_MAG_GetAxes+0x106>
    }
  }

  /* Get LIS2MDL actual sensitivity. */
  (void)LIS2MDL_MAG_GetSensitivity(pObj, &sensitivity);
 80053ae:	f107 030c 	add.w	r3, r7, #12
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff feb4 	bl	8005122 <LIS2MDL_MAG_GetSensitivity>

  /* Calculate the data. */
  MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 80053ba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80053be:	ee07 3a90 	vmov	s15, r3
 80053c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053d2:	ee17 2a90 	vmov	r2, s15
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	601a      	str	r2, [r3, #0]
  MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 80053da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80053de:	ee07 3a90 	vmov	s15, r3
 80053e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80053e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053f2:	ee17 2a90 	vmov	r2, s15
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	605a      	str	r2, [r3, #4]
  MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 80053fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005406:	edd7 7a03 	vldr	s15, [r7, #12]
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005412:	ee17 2a90 	vmov	r2, s15
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	609a      	str	r2, [r3, #8]

  return LIS2MDL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3720      	adds	r7, #32
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}

08005424 <LIS2MDL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LIS2MDL_Write_Reg(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	460b      	mov	r3, r1
 800542e:	70fb      	strb	r3, [r7, #3]
 8005430:	4613      	mov	r3, r2
 8005432:	70bb      	strb	r3, [r7, #2]
  if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	2b03      	cmp	r3, #3
 800543a:	d10b      	bne.n	8005454 <LIS2MDL_Write_Reg+0x30>
  {
    if (LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(pObj, Reg, (uint8_t *)&Data, 1) != LIS2MDL_OK)
 800543c:	1cba      	adds	r2, r7, #2
 800543e:	78f9      	ldrb	r1, [r7, #3]
 8005440:	2301      	movs	r3, #1
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f9da 	bl	80057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	d010      	beq.n	8005470 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e00e      	b.n	8005472 <LIS2MDL_Write_Reg+0x4e>
    }
  }
  else
  {
    if (lis2mdl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LIS2MDL_OK)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f103 0020 	add.w	r0, r3, #32
 800545a:	1cba      	adds	r2, r7, #2
 800545c:	78f9      	ldrb	r1, [r7, #3]
 800545e:	2301      	movs	r3, #1
 8005460:	f000 fb02 	bl	8005a68 <lis2mdl_write_reg>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <LIS2MDL_Write_Reg+0x4c>
    {
      return LIS2MDL_ERROR;
 800546a:	f04f 33ff 	mov.w	r3, #4294967295
 800546e:	e000      	b.n	8005472 <LIS2MDL_Write_Reg+0x4e>
    }
  }

  return LIS2MDL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <ReadMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800547a:	b590      	push	{r4, r7, lr}
 800547c:	b087      	sub	sp, #28
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	607a      	str	r2, [r7, #4]
 8005484:	461a      	mov	r2, r3
 8005486:	460b      	mov	r3, r1
 8005488:	72fb      	strb	r3, [r7, #11]
 800548a:	4613      	mov	r3, r2
 800548c:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d10e      	bne.n	80054b8 <ReadMagRegWrap+0x3e>
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	695c      	ldr	r4, [r3, #20]
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	7b1b      	ldrb	r3, [r3, #12]
 80054a2:	4618      	mov	r0, r3
 80054a4:	7afb      	ldrb	r3, [r7, #11]
 80054a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	4619      	mov	r1, r3
 80054ae:	893b      	ldrh	r3, [r7, #8]
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	47a0      	blx	r4
 80054b4:	4603      	mov	r3, r0
 80054b6:	e01d      	b.n	80054f4 <ReadMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d10b      	bne.n	80054d8 <ReadMagRegWrap+0x5e>
  {
    return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	695c      	ldr	r4, [r3, #20]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	7b1b      	ldrb	r3, [r3, #12]
 80054c8:	4618      	mov	r0, r3
 80054ca:	7afb      	ldrb	r3, [r7, #11]
 80054cc:	b299      	uxth	r1, r3
 80054ce:	893b      	ldrh	r3, [r7, #8]
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	47a0      	blx	r4
 80054d4:	4603      	mov	r3, r0
 80054d6:	e00d      	b.n	80054f4 <ReadMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte read */
    return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	695c      	ldr	r4, [r3, #20]
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	7b1b      	ldrb	r3, [r3, #12]
 80054e0:	4618      	mov	r0, r3
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	4619      	mov	r1, r3
 80054ec:	893b      	ldrh	r3, [r7, #8]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	47a0      	blx	r4
 80054f2:	4603      	mov	r3, r0
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	371c      	adds	r7, #28
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd90      	pop	{r4, r7, pc}

080054fc <WriteMagRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80054fc:	b590      	push	{r4, r7, lr}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	461a      	mov	r2, r3
 8005508:	460b      	mov	r3, r1
 800550a:	72fb      	strb	r3, [r7, #11]
 800550c:	4613      	mov	r3, r2
 800550e:	813b      	strh	r3, [r7, #8]
  LIS2MDL_Object_t *pObj = (LIS2MDL_Object_t *)Handle;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	617b      	str	r3, [r7, #20]

  if (pObj->IO.BusType == LIS2MDL_I2C_BUS) /* I2C */
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10e      	bne.n	800553a <WriteMagRegWrap+0x3e>
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	691c      	ldr	r4, [r3, #16]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	7b1b      	ldrb	r3, [r3, #12]
 8005524:	4618      	mov	r0, r3
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4619      	mov	r1, r3
 8005530:	893b      	ldrh	r3, [r7, #8]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	47a0      	blx	r4
 8005536:	4603      	mov	r3, r0
 8005538:	e01d      	b.n	8005576 <WriteMagRegWrap+0x7a>
  }
  else if (pObj->IO.BusType == LSM6DSOX_SENSORHUB_LIS2MDL_I2C_BUS) /* LSM6DSOX SensorHub with LIS2MDL example */
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	2b03      	cmp	r3, #3
 8005540:	d10b      	bne.n	800555a <WriteMagRegWrap+0x5e>
  {
    return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	691c      	ldr	r4, [r3, #16]
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	7b1b      	ldrb	r3, [r3, #12]
 800554a:	4618      	mov	r0, r3
 800554c:	7afb      	ldrb	r3, [r7, #11]
 800554e:	b299      	uxth	r1, r3
 8005550:	893b      	ldrh	r3, [r7, #8]
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	47a0      	blx	r4
 8005556:	4603      	mov	r3, r0
 8005558:	e00d      	b.n	8005576 <WriteMagRegWrap+0x7a>
  }
  else   /* SPI 3-Wires or SPI 4-Wires */
  {
    /* Enable Multi-byte write */
    return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	691c      	ldr	r4, [r3, #16]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	7b1b      	ldrb	r3, [r3, #12]
 8005562:	4618      	mov	r0, r3
 8005564:	7afb      	ldrb	r3, [r7, #11]
 8005566:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556a:	b2db      	uxtb	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	893b      	ldrh	r3, [r7, #8]
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	47a0      	blx	r4
 8005574:	4603      	mov	r3, r0
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                     uint16_t Length)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b08c      	sub	sp, #48	@ 0x30
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	461a      	mov	r2, r3
 800558a:	460b      	mov	r3, r1
 800558c:	72fb      	strb	r3, [r7, #11]
 800558e:	4613      	mov	r3, r2
 8005590:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005598:	2340      	movs	r3, #64	@ 0x40
 800559a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_read = LIS2MDL_I2C_ADD | 0x01U;
 80055a4:	233d      	movs	r3, #61	@ 0x3d
 80055a6:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 80055a8:	2315      	movs	r3, #21
 80055aa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 80055ae:	2316      	movs	r3, #22
 80055b0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 80055b4:	2317      	movs	r3, #23
 80055b6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t master_config = 0x14U;
 80055ba:	2314      	movs	r3, #20
 80055bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 80055c0:	2344      	movs	r3, #68	@ 0x44
 80055c2:	77bb      	strb	r3, [r7, #30]
  uint8_t sensor_hub_1 = 0x02U;
 80055c4:	2302      	movs	r3, #2
 80055c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t status_master_mainpage = 0x39U;
 80055ca:	2339      	movs	r3, #57	@ 0x39
 80055cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t sens_hub_endop = 0x01U;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 80055d6:	2329      	movs	r3, #41	@ 0x29
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t lsm6dsox_status_reg = 0x1EU;
 80055dc:	231e      	movs	r3, #30
 80055de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t xlda = 0x01U;
 80055e2:	2301      	movs	r3, #1
 80055e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t len = (uint8_t)Length;
 80055e8:	893b      	ldrh	r3, [r7, #8]
 80055ea:	b2db      	uxtb	r3, r3
 80055ec:	777b      	strb	r3, [r7, #29]
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 80055ee:	2310      	movs	r3, #16
 80055f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 80055fa:	2340      	movs	r3, #64	@ 0x40
 80055fc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f103 0020 	add.w	r0, r3, #32
 8005606:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800560a:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800560e:	2301      	movs	r3, #1
 8005610:	f000 fa2a 	bl	8005a68 <lis2mdl_write_reg>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xa2>
  {
    return LIS2MDL_ERROR;
 800561a:	f04f 33ff 	mov.w	r3, #4294967295
 800561e:	e0e9      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure external device address, Enable read operation (rw_0 = 1) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_read, 1) != LIS2MDL_OK)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f103 0020 	add.w	r0, r3, #32
 8005626:	f107 021f 	add.w	r2, r7, #31
 800562a:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 800562e:	2301      	movs	r3, #1
 8005630:	f000 fa1a 	bl	8005a68 <lis2mdl_write_reg>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xc2>
  {
    return LIS2MDL_ERROR;
 800563a:	f04f 33ff 	mov.w	r3, #4294967295
 800563e:	e0d9      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Configure address of the LIS2MDL register to be read */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f103 0020 	add.w	r0, r3, #32
 8005646:	f107 020b 	add.w	r2, r7, #11
 800564a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800564e:	2301      	movs	r3, #1
 8005650:	f000 fa0a 	bl	8005a68 <lis2mdl_write_reg>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0xe2>
  {
    return LIS2MDL_ERROR;
 800565a:	f04f 33ff 	mov.w	r3, #4294967295
 800565e:	e0c9      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read required number of bytes (up to 6), SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &len, 1) != LIS2MDL_OK)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f103 0020 	add.w	r0, r3, #32
 8005666:	f107 021d 	add.w	r2, r7, #29
 800566a:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 800566e:	2301      	movs	r3, #1
 8005670:	f000 f9fa 	bl	8005a68 <lis2mdl_write_reg>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x102>
  {
    return LIS2MDL_ERROR;
 800567a:	f04f 33ff 	mov.w	r3, #4294967295
 800567e:	e0b9      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* WRITE_ONCE is mandatory for read, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f103 0020 	add.w	r0, r3, #32
 8005686:	f107 021e 	add.w	r2, r7, #30
 800568a:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 800568e:	2301      	movs	r3, #1
 8005690:	f000 f9ea 	bl	8005a68 <lis2mdl_write_reg>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x122>
  {
    return LIS2MDL_ERROR;
 800569a:	f04f 33ff 	mov.w	r3, #4294967295
 800569e:	e0a9      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f103 0020 	add.w	r0, r3, #32
 80056a6:	f107 0220 	add.w	r2, r7, #32
 80056aa:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80056ae:	2301      	movs	r3, #1
 80056b0:	f000 f9da 	bl	8005a68 <lis2mdl_write_reg>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x142>
  {
    return LIS2MDL_ERROR;
 80056ba:	f04f 33ff 	mov.w	r3, #4294967295
 80056be:	e099      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	f103 0020 	add.w	r0, r3, #32
 80056c6:	f107 021c 	add.w	r2, r7, #28
 80056ca:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80056ce:	2301      	movs	r3, #1
 80056d0:	f000 f9b2 	bl	8005a38 <lis2mdl_read_reg>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x162>
  {
    return LIS2MDL_ERROR;
 80056da:	f04f 33ff 	mov.w	r3, #4294967295
 80056de:	e089      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 80056e0:	7f3b      	ldrb	r3, [r7, #28]
 80056e2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d102      	bne.n	80056f0 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x172>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 80056ea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80056ee:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f103 0020 	add.w	r0, r3, #32
 80056f6:	f107 021c 	add.w	r2, r7, #28
 80056fa:	f897 1024 	ldrb.w	r1, [r7, #36]	@ 0x24
 80056fe:	2301      	movs	r3, #1
 8005700:	f000 f9b2 	bl	8005a68 <lis2mdl_write_reg>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x192>
  {
    return LIS2MDL_ERROR;
 800570a:	f04f 33ff 	mov.w	r3, #4294967295
 800570e:	e071      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f103 0020 	add.w	r0, r3, #32
 8005716:	f107 0214 	add.w	r2, r7, #20
 800571a:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800571e:	2306      	movs	r3, #6
 8005720:	f000 f98a 	bl	8005a38 <lis2mdl_read_reg>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>
  {
    return LIS2MDL_ERROR;
 800572a:	f04f 33ff 	mov.w	r3, #4294967295
 800572e:	e061      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f103 0020 	add.w	r0, r3, #32
 8005736:	f107 021b 	add.w	r2, r7, #27
 800573a:	f897 1026 	ldrb.w	r1, [r7, #38]	@ 0x26
 800573e:	2301      	movs	r3, #1
 8005740:	f000 f97a 	bl	8005a38 <lis2mdl_read_reg>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1d2>
    {
      return LIS2MDL_ERROR;
 800574a:	f04f 33ff 	mov.w	r3, #4294967295
 800574e:	e051      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & xlda) != xlda);
 8005750:	7efa      	ldrb	r2, [r7, #27]
 8005752:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005756:	4013      	ands	r3, r2
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 800575e:	429a      	cmp	r2, r3
 8005760:	d1e6      	bne.n	8005730 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1b2>

  /* Poll LSM6DSOX SensorHub SENS_HUB_ENDOP bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	f103 0020 	add.w	r0, r3, #32
 8005768:	f107 021b 	add.w	r2, r7, #27
 800576c:	f897 1029 	ldrb.w	r1, [r7, #41]	@ 0x29
 8005770:	2301      	movs	r3, #1
 8005772:	f000 f961 	bl	8005a38 <lis2mdl_read_reg>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x204>
    {
      return LIS2MDL_ERROR;
 800577c:	f04f 33ff 	mov.w	r3, #4294967295
 8005780:	e038      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
    }
  } while ((data & sens_hub_endop) != sens_hub_endop);
 8005782:	7efa      	ldrb	r2, [r7, #27]
 8005784:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005788:	4013      	ands	r3, r2
 800578a:	b2db      	uxtb	r3, r3
 800578c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005790:	429a      	cmp	r2, r3
 8005792:	d1e6      	bne.n	8005762 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x1e4>

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f103 0020 	add.w	r0, r3, #32
 800579a:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 800579e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80057a2:	2301      	movs	r3, #1
 80057a4:	f000 f960 	bl	8005a68 <lis2mdl_write_reg>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x236>
  {
    return LIS2MDL_ERROR;
 80057ae:	f04f 33ff 	mov.w	r3, #4294967295
 80057b2:	e01f      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Read data from LSM6DSOX SensorHub regs containing values from required LIS2MDL regs */
  if (lis2mdl_read_reg(&(pObj->Ctx), sensor_hub_1, pData, Length) != LIS2MDL_OK)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f103 0020 	add.w	r0, r3, #32
 80057ba:	893b      	ldrh	r3, [r7, #8]
 80057bc:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f000 f939 	bl	8005a38 <lis2mdl_read_reg>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x254>
  {
    return LIS2MDL_ERROR;
 80057cc:	f04f 33ff 	mov.w	r3, #4294967295
 80057d0:	e010      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f103 0020 	add.w	r0, r3, #32
 80057d8:	f107 0220 	add.w	r2, r7, #32
 80057dc:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 80057e0:	2301      	movs	r3, #1
 80057e2:	f000 f941 	bl	8005a68 <lis2mdl_write_reg>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x274>
  {
    return LIS2MDL_ERROR;
 80057ec:	f04f 33ff 	mov.w	r3, #4294967295
 80057f0:	e000      	b.n	80057f4 <LSM6DSOX_SENSORHUB_LIS2MDL_ReadShData+0x276>
  }

  return LIS2MDL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3730      	adds	r7, #48	@ 0x30
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData>:
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData(LIS2MDL_Object_t *pObj, uint8_t Reg, uint8_t *pData,
                                                      uint16_t Length)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	@ 0x30
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	607a      	str	r2, [r7, #4]
 8005806:	461a      	mov	r2, r3
 8005808:	460b      	mov	r3, r1
 800580a:	72fb      	strb	r3, [r7, #11]
 800580c:	4613      	mov	r3, r2
 800580e:	813b      	strh	r3, [r7, #8]
  uint8_t lsm6dsox_func_cfg_access = 0x01U;
 8005810:	2301      	movs	r3, #1
 8005812:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t shub_reg_access_en = 0x40U;
 8005816:	2340      	movs	r3, #64	@ 0x40
 8005818:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  uint8_t shub_reg_access_dis = 0x00U;
 800581c:	2300      	movs	r3, #0
 800581e:	f887 3020 	strb.w	r3, [r7, #32]
  uint8_t ext_sens_addr_write = LIS2MDL_I2C_ADD & 0xFEU;
 8005822:	233c      	movs	r3, #60	@ 0x3c
 8005824:	77fb      	strb	r3, [r7, #31]
  uint8_t slv0_add = 0x15U;
 8005826:	2315      	movs	r3, #21
 8005828:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  uint8_t slv0_subadd = 0x16U;
 800582c:	2316      	movs	r3, #22
 800582e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  uint8_t slave0_config = 0x17U;
 8005832:	2317      	movs	r3, #23
 8005834:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  uint8_t shub_odr_104 = 0x00U;
 8005838:	2300      	movs	r3, #0
 800583a:	77bb      	strb	r3, [r7, #30]
  uint8_t master_config = 0x14U;
 800583c:	2314      	movs	r3, #20
 800583e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  uint8_t write_once_i2c_en = 0x44U;
 8005842:	2344      	movs	r3, #68	@ 0x44
 8005844:	777b      	strb	r3, [r7, #29]
  uint8_t status_master_mainpage = 0x39U;
 8005846:	2339      	movs	r3, #57	@ 0x39
 8005848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint8_t wr_once_done = 0x80U;
 800584c:	2380      	movs	r3, #128	@ 0x80
 800584e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  uint8_t lsm6dsox_outx_h_a = 0x29U;
 8005852:	2329      	movs	r3, #41	@ 0x29
 8005854:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  uint8_t lsm6dsox_status_reg = 0x1EU;
 8005858:	231e      	movs	r3, #30
 800585a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t xlda = 0x01U;
 800585e:	2301      	movs	r3, #1
 8005860:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  uint8_t lsm6dsox_ctrl1_xl = 0x10U;
 8005864:	2310      	movs	r3, #16
 8005866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  uint8_t lsm6dsox_xl_prev_odr;
  uint8_t lsm6dsox_xl_odr_off = 0x00U;
 800586a:	2300      	movs	r3, #0
 800586c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  uint8_t lsm6dsox_xl_odr_104hz = 0x40U;
 8005870:	2340      	movs	r3, #64	@ 0x40
 8005872:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t datawrite_slv0 = 0x0EU;
 8005876:	230e      	movs	r3, #14
 8005878:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t data;
  uint8_t data_array[6];

  /* Enable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_en, 1) != LIS2MDL_OK)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f103 0020 	add.w	r0, r3, #32
 8005882:	f107 0221 	add.w	r2, r7, #33	@ 0x21
 8005886:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800588a:	2301      	movs	r3, #1
 800588c:	f000 f8ec 	bl	8005a68 <lis2mdl_write_reg>
 8005890:	4603      	mov	r3, r0
 8005892:	2b00      	cmp	r3, #0
 8005894:	d002      	beq.n	800589c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xa0>
  {
    return LIS2MDL_ERROR;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295
 800589a:	e0c9      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure external device address, Enable write operation (rw_0 = 0) */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_add, &ext_sens_addr_write, 1) != LIS2MDL_OK)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f103 0020 	add.w	r0, r3, #32
 80058a2:	f107 021f 	add.w	r2, r7, #31
 80058a6:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80058aa:	2301      	movs	r3, #1
 80058ac:	f000 f8dc 	bl	8005a68 <lis2mdl_write_reg>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xc0>
  {
    return LIS2MDL_ERROR;
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295
 80058ba:	e0b9      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Configure address of the LIS2MDL register to be written to */
  if (lis2mdl_write_reg(&(pObj->Ctx), slv0_subadd, &Reg, 1) != LIS2MDL_OK)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f103 0020 	add.w	r0, r3, #32
 80058c2:	f107 020b 	add.w	r2, r7, #11
 80058c6:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 80058ca:	2301      	movs	r3, #1
 80058cc:	f000 f8cc 	bl	8005a68 <lis2mdl_write_reg>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0xe0>
  {
    return LIS2MDL_ERROR;
 80058d6:	f04f 33ff 	mov.w	r3, #4294967295
 80058da:	e0a9      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set SHUB_ODR = 104 Hz */
  if (lis2mdl_write_reg(&(pObj->Ctx), slave0_config, &shub_odr_104, 1) != LIS2MDL_OK)
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f103 0020 	add.w	r0, r3, #32
 80058e2:	f107 021e 	add.w	r2, r7, #30
 80058e6:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80058ea:	2301      	movs	r3, #1
 80058ec:	f000 f8bc 	bl	8005a68 <lis2mdl_write_reg>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d002      	beq.n	80058fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x100>
  {
    return LIS2MDL_ERROR;
 80058f6:	f04f 33ff 	mov.w	r3, #4294967295
 80058fa:	e099      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Store data to be written to LIS2MDL in LSM6DSOX SH reg */
  if (lis2mdl_write_reg(&(pObj->Ctx), datawrite_slv0, pData, 1) != LIS2MDL_OK)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f103 0020 	add.w	r0, r3, #32
 8005902:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8005906:	2301      	movs	r3, #1
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	f000 f8ad 	bl	8005a68 <lis2mdl_write_reg>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d002      	beq.n	800591a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x11e>
  {
    return LIS2MDL_ERROR;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	e08a      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* WRITE_ONCE enabled for single write, I2C master enabled using slave 0, I2C pull-ups disabled */
  if (lis2mdl_write_reg(&(pObj->Ctx), master_config, &write_once_i2c_en, 1) != LIS2MDL_OK)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f103 0020 	add.w	r0, r3, #32
 8005920:	f107 021d 	add.w	r2, r7, #29
 8005924:	f897 102b 	ldrb.w	r1, [r7, #43]	@ 0x2b
 8005928:	2301      	movs	r3, #1
 800592a:	f000 f89d 	bl	8005a68 <lis2mdl_write_reg>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x13e>
  {
    return LIS2MDL_ERROR;
 8005934:	f04f 33ff 	mov.w	r3, #4294967295
 8005938:	e07a      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Disable access to sensor hub registers */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_func_cfg_access, &shub_reg_access_dis, 1) != LIS2MDL_OK)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f103 0020 	add.w	r0, r3, #32
 8005940:	f107 0220 	add.w	r2, r7, #32
 8005944:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005948:	2301      	movs	r3, #1
 800594a:	f000 f88d 	bl	8005a68 <lis2mdl_write_reg>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x15e>
  {
    return LIS2MDL_ERROR;
 8005954:	f04f 33ff 	mov.w	r3, #4294967295
 8005958:	e06a      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read LSM6DSOX ODR */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f103 0020 	add.w	r0, r3, #32
 8005960:	f107 021c 	add.w	r2, r7, #28
 8005964:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005968:	2301      	movs	r3, #1
 800596a:	f000 f865 	bl	8005a38 <lis2mdl_read_reg>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x17e>
  {
    return LIS2MDL_ERROR;
 8005974:	f04f 33ff 	mov.w	r3, #4294967295
 8005978:	e05a      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Set XL_ODR_104HZ if the accelerometer is disabled */
  if (lsm6dsox_xl_prev_odr == lsm6dsox_xl_odr_off)
 800597a:	7f3b      	ldrb	r3, [r7, #28]
 800597c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8005980:	429a      	cmp	r2, r3
 8005982:	d102      	bne.n	800598a <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x18e>
  {
    lsm6dsox_xl_prev_odr = lsm6dsox_xl_odr_104hz;
 8005984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005988:	773b      	strb	r3, [r7, #28]
  }

  /* Enable accelerometer to trigger Sensor Hub operation */
  if (lis2mdl_write_reg(&(pObj->Ctx), lsm6dsox_ctrl1_xl, &lsm6dsox_xl_prev_odr, 1) != LIS2MDL_OK)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f103 0020 	add.w	r0, r3, #32
 8005990:	f107 021c 	add.w	r2, r7, #28
 8005994:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8005998:	2301      	movs	r3, #1
 800599a:	f000 f865 	bl	8005a68 <lis2mdl_write_reg>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d002      	beq.n	80059aa <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ae>
  {
    return LIS2MDL_ERROR;
 80059a4:	f04f 33ff 	mov.w	r3, #4294967295
 80059a8:	e042      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Read ACC data starting from LSM6DSOX OUTX_H_A register to clear accelerometer data-ready XLDA */
  if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_outx_h_a, data_array, 6) != LIS2MDL_OK)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f103 0020 	add.w	r0, r3, #32
 80059b0:	f107 0214 	add.w	r2, r7, #20
 80059b4:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80059b8:	2306      	movs	r3, #6
 80059ba:	f000 f83d 	bl	8005a38 <lis2mdl_read_reg>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>
  {
    return LIS2MDL_ERROR;
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	e032      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
  }

  /* Poll LSM6DSOX LSM6DSOX_STATUS_REG until XLDA = 1 (Wait for sensor hub trigger) */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), lsm6dsox_status_reg, &data, 1) != LIS2MDL_OK)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f103 0020 	add.w	r0, r3, #32
 80059d0:	f107 021b 	add.w	r2, r7, #27
 80059d4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80059d8:	2301      	movs	r3, #1
 80059da:	f000 f82d 	bl	8005a38 <lis2mdl_read_reg>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ee>
    {
      return LIS2MDL_ERROR;
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e022      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & xlda) != xlda);
 80059ea:	7efa      	ldrb	r2, [r7, #27]
 80059ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059f0:	4013      	ands	r3, r2
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d1e6      	bne.n	80059ca <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x1ce>

  /* Poll LSM6DSOX SensorHub WR_ONCE_DONE bit in STATUS_MASTER_MAINPAGE reg until the end of SW write operations */
  do
  {
    if (lis2mdl_read_reg(&(pObj->Ctx), status_master_mainpage, &data, 1) != LIS2MDL_OK)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f103 0020 	add.w	r0, r3, #32
 8005a02:	f107 021b 	add.w	r2, r7, #27
 8005a06:	f897 102a 	ldrb.w	r1, [r7, #42]	@ 0x2a
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f000 f814 	bl	8005a38 <lis2mdl_read_reg>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d002      	beq.n	8005a1c <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x220>
    {
      return LIS2MDL_ERROR;
 8005a16:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1a:	e009      	b.n	8005a30 <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x234>
    }
  } while ((data & wr_once_done) != wr_once_done);
 8005a1c:	7efa      	ldrb	r2, [r7, #27]
 8005a1e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005a22:	4013      	ands	r3, r2
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d1e6      	bne.n	80059fc <LSM6DSOX_SENSORHUB_LIS2MDL_WriteShData+0x200>

  return LIS2MDL_OK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3730      	adds	r7, #48	@ 0x30
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <lis2mdl_read_reg>:
  *
  */
int32_t lis2mdl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8005a38:	b590      	push	{r4, r7, lr}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	461a      	mov	r2, r3
 8005a44:	460b      	mov	r3, r1
 8005a46:	72fb      	strb	r3, [r7, #11]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685c      	ldr	r4, [r3, #4]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	68d8      	ldr	r0, [r3, #12]
 8005a54:	893b      	ldrh	r3, [r7, #8]
 8005a56:	7af9      	ldrb	r1, [r7, #11]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	47a0      	blx	r4
 8005a5c:	6178      	str	r0, [r7, #20]

  return ret;
 8005a5e:	697b      	ldr	r3, [r7, #20]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	371c      	adds	r7, #28
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd90      	pop	{r4, r7, pc}

08005a68 <lis2mdl_write_reg>:
  *
  */
int32_t lis2mdl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8005a68:	b590      	push	{r4, r7, lr}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	461a      	mov	r2, r3
 8005a74:	460b      	mov	r3, r1
 8005a76:	72fb      	strb	r3, [r7, #11]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681c      	ldr	r4, [r3, #0]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	68d8      	ldr	r0, [r3, #12]
 8005a84:	893b      	ldrh	r3, [r7, #8]
 8005a86:	7af9      	ldrb	r1, [r7, #11]
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	47a0      	blx	r4
 8005a8c:	6178      	str	r0, [r7, #20]

  return ret;
 8005a8e:	697b      	ldr	r3, [r7, #20]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd90      	pop	{r4, r7, pc}

08005a98 <lis2mdl_operating_mode_set>:
  * @retval        interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_operating_mode_set(stmdev_ctx_t *ctx,
                                   lis2mdl_md_t val)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005aa4:	f107 0208 	add.w	r2, r7, #8
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	2160      	movs	r1, #96	@ 0x60
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff ffc3 	bl	8005a38 <lis2mdl_read_reg>
 8005ab2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10f      	bne.n	8005ada <lis2mdl_operating_mode_set+0x42>
  {
    reg.md = (uint8_t)val;
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	7a3b      	ldrb	r3, [r7, #8]
 8005ac4:	f362 0301 	bfi	r3, r2, #0, #2
 8005ac8:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005aca:	f107 0208 	add.w	r2, r7, #8
 8005ace:	2301      	movs	r3, #1
 8005ad0:	2160      	movs	r1, #96	@ 0x60
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f7ff ffc8 	bl	8005a68 <lis2mdl_write_reg>
 8005ad8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ada:	68fb      	ldr	r3, [r7, #12]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3710      	adds	r7, #16
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <lis2mdl_data_rate_set>:
  * @param  val   change the values of odr in reg CFG_REG_A
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_set(stmdev_ctx_t *ctx, lis2mdl_odr_t val)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	460b      	mov	r3, r1
 8005aee:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005af0:	f107 0208 	add.w	r2, r7, #8
 8005af4:	2301      	movs	r3, #1
 8005af6:	2160      	movs	r1, #96	@ 0x60
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f7ff ff9d 	bl	8005a38 <lis2mdl_read_reg>
 8005afe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <lis2mdl_data_rate_set+0x42>
  {
    reg.odr = (uint8_t)val;
 8005b06:	78fb      	ldrb	r3, [r7, #3]
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	7a3b      	ldrb	r3, [r7, #8]
 8005b10:	f362 0383 	bfi	r3, r2, #2, #2
 8005b14:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005b16:	f107 0208 	add.w	r2, r7, #8
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	2160      	movs	r1, #96	@ 0x60
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7ff ffa2 	bl	8005a68 <lis2mdl_write_reg>
 8005b24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005b26:	68fb      	ldr	r3, [r7, #12]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3710      	adds	r7, #16
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <lis2mdl_data_rate_get>:
  * @param  val   Get the values of odr in reg CFG_REG_A.(ptr)
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_data_rate_get(stmdev_ctx_t *ctx, lis2mdl_odr_t *val)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  lis2mdl_cfg_reg_a_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_A, (uint8_t *)&reg, 1);
 8005b3a:	f107 0208 	add.w	r2, r7, #8
 8005b3e:	2301      	movs	r3, #1
 8005b40:	2160      	movs	r1, #96	@ 0x60
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7ff ff78 	bl	8005a38 <lis2mdl_read_reg>
 8005b48:	60f8      	str	r0, [r7, #12]

  switch (reg.odr)
 8005b4a:	7a3b      	ldrb	r3, [r7, #8]
 8005b4c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d81a      	bhi.n	8005b8c <lis2mdl_data_rate_get+0x5c>
 8005b56:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <lis2mdl_data_rate_get+0x2c>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b75 	.word	0x08005b75
 8005b64:	08005b7d 	.word	0x08005b7d
 8005b68:	08005b85 	.word	0x08005b85
  {
    case LIS2MDL_ODR_10Hz:
      *val = LIS2MDL_ODR_10Hz;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	701a      	strb	r2, [r3, #0]
      break;
 8005b72:	e00f      	b.n	8005b94 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_20Hz:
      *val = LIS2MDL_ODR_20Hz;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
      break;
 8005b7a:	e00b      	b.n	8005b94 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_50Hz:
      *val = LIS2MDL_ODR_50Hz;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	701a      	strb	r2, [r3, #0]
      break;
 8005b82:	e007      	b.n	8005b94 <lis2mdl_data_rate_get+0x64>

    case LIS2MDL_ODR_100Hz:
      *val = LIS2MDL_ODR_100Hz;
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	2203      	movs	r2, #3
 8005b88:	701a      	strb	r2, [r3, #0]
      break;
 8005b8a:	e003      	b.n	8005b94 <lis2mdl_data_rate_get+0x64>

    default:
      *val = LIS2MDL_ODR_10Hz;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
      break;
 8005b92:	bf00      	nop
  }

  return ret;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop

08005ba0 <lis2mdl_block_data_update_set>:
  * @param  val   change the values of bdu in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bac:	f107 0208 	add.w	r2, r7, #8
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	2162      	movs	r1, #98	@ 0x62
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff ff3f 	bl	8005a38 <lis2mdl_read_reg>
 8005bba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d10f      	bne.n	8005be2 <lis2mdl_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8005bc2:	78fb      	ldrb	r3, [r7, #3]
 8005bc4:	f003 0301 	and.w	r3, r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	7a3b      	ldrb	r3, [r7, #8]
 8005bcc:	f362 1304 	bfi	r3, r2, #4, #1
 8005bd0:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005bd2:	f107 0208 	add.w	r2, r7, #8
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	2162      	movs	r1, #98	@ 0x62
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ff44 	bl	8005a68 <lis2mdl_write_reg>
 8005be0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <lis2mdl_magnetic_raw_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_magnetic_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_OUTX_L_REG, buff, 6);
 8005bf6:	f107 020c 	add.w	r2, r7, #12
 8005bfa:	2306      	movs	r3, #6
 8005bfc:	2168      	movs	r1, #104	@ 0x68
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7ff ff1a 	bl	8005a38 <lis2mdl_read_reg>
 8005c04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8005c06:	7b7b      	ldrb	r3, [r7, #13]
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	021b      	lsls	r3, r3, #8
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	7b3a      	ldrb	r2, [r7, #12]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	b21a      	sxth	r2, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8005c26:	7bfa      	ldrb	r2, [r7, #15]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	3302      	adds	r3, #2
 8005c2c:	b212      	sxth	r2, r2
 8005c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	3302      	adds	r3, #2
 8005c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	021b      	lsls	r3, r3, #8
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	7bba      	ldrb	r2, [r7, #14]
 8005c40:	4413      	add	r3, r2
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	3302      	adds	r3, #2
 8005c48:	b212      	sxth	r2, r2
 8005c4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8005c4c:	7c7a      	ldrb	r2, [r7, #17]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	3304      	adds	r3, #4
 8005c52:	b212      	sxth	r2, r2
 8005c54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	3304      	adds	r3, #4
 8005c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	021b      	lsls	r3, r3, #8
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	7c3a      	ldrb	r2, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	3304      	adds	r3, #4
 8005c6e:	b212      	sxth	r2, r2
 8005c70:	801a      	strh	r2, [r3, #0]

  return ret;
 8005c72:	697b      	ldr	r3, [r7, #20]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <lis2mdl_device_id_get>:
  * @param  buff  that stores data read
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_WHO_AM_I, buff, 1);
 8005c86:	2301      	movs	r3, #1
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	214f      	movs	r1, #79	@ 0x4f
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f7ff fed3 	bl	8005a38 <lis2mdl_read_reg>
 8005c92:	60f8      	str	r0, [r7, #12]

  return ret;
 8005c94:	68fb      	ldr	r3, [r7, #12]
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}

08005c9e <lis2mdl_self_test_set>:
  * @param  val   change the values of self_test in reg CFG_REG_C
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_self_test_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8005c9e:	b580      	push	{r7, lr}
 8005ca0:	b084      	sub	sp, #16
 8005ca2:	af00      	add	r7, sp, #0
 8005ca4:	6078      	str	r0, [r7, #4]
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005caa:	f107 0208 	add.w	r2, r7, #8
 8005cae:	2301      	movs	r3, #1
 8005cb0:	2162      	movs	r1, #98	@ 0x62
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7ff fec0 	bl	8005a38 <lis2mdl_read_reg>
 8005cb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10f      	bne.n	8005ce0 <lis2mdl_self_test_set+0x42>
  {
    reg.self_test = val;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	7a3b      	ldrb	r3, [r7, #8]
 8005cca:	f362 0341 	bfi	r3, r2, #1, #1
 8005cce:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005cd0:	f107 0208 	add.w	r2, r7, #8
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	2162      	movs	r1, #98	@ 0x62
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f7ff fec5 	bl	8005a68 <lis2mdl_write_reg>
 8005cde:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <lis2mdl_i2c_interface_set>:
  * @retval       interface status.(MANDATORY: return 0 -> no Error)
  *
  */
int32_t lis2mdl_i2c_interface_set(stmdev_ctx_t *ctx,
                                  lis2mdl_i2c_dis_t val)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b084      	sub	sp, #16
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	70fb      	strb	r3, [r7, #3]
  lis2mdl_cfg_reg_c_t reg;
  int32_t ret;

  ret = lis2mdl_read_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005cf6:	f107 0208 	add.w	r2, r7, #8
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	2162      	movs	r1, #98	@ 0x62
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fe9a 	bl	8005a38 <lis2mdl_read_reg>
 8005d04:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10f      	bne.n	8005d2c <lis2mdl_i2c_interface_set+0x42>
  {
    reg.i2c_dis = (uint8_t)val;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	7a3b      	ldrb	r3, [r7, #8]
 8005d16:	f362 1345 	bfi	r3, r2, #5, #1
 8005d1a:	723b      	strb	r3, [r7, #8]
    ret = lis2mdl_write_reg(ctx, LIS2MDL_CFG_REG_C, (uint8_t *)&reg, 1);
 8005d1c:	f107 0208 	add.w	r2, r7, #8
 8005d20:	2301      	movs	r3, #1
 8005d22:	2162      	movs	r1, #98	@ 0x62
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fe9f 	bl	8005a68 <lis2mdl_write_reg>
 8005d2a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
	...

08005d38 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d103      	bne.n	8005d54 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	e051      	b.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	7b1a      	ldrb	r2, [r3, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	691a      	ldr	r2, [r3, #16]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	695a      	ldr	r2, [r3, #20]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	699a      	ldr	r2, [r3, #24]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005e04 <LSM6DSO_RegisterBusIO+0xcc>)
 8005d90:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	@ (8005e08 <LSM6DSO_RegisterBusIO+0xd0>)
 8005d96:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	69da      	ldr	r2, [r3, #28]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d103      	bne.n	8005db6 <LSM6DSO_RegisterBusIO+0x7e>
    {
      ret = LSM6DSO_ERROR;
 8005dae:	f04f 33ff 	mov.w	r3, #4294967295
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e020      	b.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4798      	blx	r3
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <LSM6DSO_RegisterBusIO+0x92>
    {
      ret = LSM6DSO_ERROR;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e016      	b.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d112      	bne.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10d      	bne.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8005ddc:	230c      	movs	r3, #12
 8005dde:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8005de0:	7afb      	ldrb	r3, [r7, #11]
 8005de2:	461a      	mov	r2, r3
 8005de4:	2112      	movs	r1, #18
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 ff5d 	bl	8006ca6 <LSM6DSO_Write_Reg>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <LSM6DSO_RegisterBusIO+0xc0>
          {
            ret = LSM6DSO_ERROR;
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295
 8005df6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3710      	adds	r7, #16
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop
 8005e04:	08007149 	.word	0x08007149
 8005e08:	0800717f 	.word	0x0800717f

08005e0c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  if(pObj->IO.BusType != LSM6DSO_I3C_BUS)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d00b      	beq.n	8005e34 <LSM6DSO_Init+0x28>
  {
    /* Disable I3C */
    if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3320      	adds	r3, #32
 8005e20:	2180      	movs	r1, #128	@ 0x80
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 fe84 	bl	8007b30 <lsm6dso_i3c_disable_set>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d002      	beq.n	8005e34 <LSM6DSO_Init+0x28>
    {
      return LSM6DSO_ERROR;
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	e060      	b.n	8005ef6 <LSM6DSO_Init+0xea>
    }
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3320      	adds	r3, #32
 8005e38:	2101      	movs	r1, #1
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 fe52 	bl	8007ae4 <lsm6dso_auto_increment_set>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <LSM6DSO_Init+0x40>
  {
    return LSM6DSO_ERROR;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295
 8005e4a:	e054      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3320      	adds	r3, #32
 8005e50:	2101      	movs	r1, #1
 8005e52:	4618      	mov	r0, r3
 8005e54:	f001 fd62 	bl	800791c <lsm6dso_block_data_update_set>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d002      	beq.n	8005e64 <LSM6DSO_Init+0x58>
  {
    return LSM6DSO_ERROR;
 8005e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e62:	e048      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3320      	adds	r3, #32
 8005e68:	2100      	movs	r1, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f001 fea8 	bl	8007bc0 <lsm6dso_fifo_mode_set>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <LSM6DSO_Init+0x70>
  {
    return LSM6DSO_ERROR;
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295
 8005e7a:	e03c      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2204      	movs	r2, #4
 8005e80:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	3320      	adds	r3, #32
 8005e88:	2100      	movs	r1, #0
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f001 fa20 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <LSM6DSO_Init+0x90>
  {
    return LSM6DSO_ERROR;
 8005e96:	f04f 33ff 	mov.w	r3, #4294967295
 8005e9a:	e02c      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3320      	adds	r3, #32
 8005ea0:	2100      	movs	r1, #0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f001 f9b6 	bl	8007214 <lsm6dso_xl_full_scale_set>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d002      	beq.n	8005eb4 <LSM6DSO_Init+0xa8>
  {
    return LSM6DSO_ERROR;
 8005eae:	f04f 33ff 	mov.w	r3, #4294967295
 8005eb2:	e020      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3320      	adds	r3, #32
 8005ec0:	2100      	movs	r1, #0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f001 fbce 	bl	8007664 <lsm6dso_gy_data_rate_set>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <LSM6DSO_Init+0xc8>
  {
    return LSM6DSO_ERROR;
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	e010      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3320      	adds	r3, #32
 8005ed8:	2106      	movs	r1, #6
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fb5a 	bl	8007594 <lsm6dso_gy_full_scale_set>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d002      	beq.n	8005eec <LSM6DSO_Init+0xe0>
  {
    return LSM6DSO_ERROR;
 8005ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8005eea:	e004      	b.n	8005ef6 <LSM6DSO_Init+0xea>
  }

  pObj->is_initialized = 1;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}

08005efe <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f888 	bl	800601c <LSM6DSO_ACC_Disable>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8005f12:	f04f 33ff 	mov.w	r3, #4294967295
 8005f16:	e015      	b.n	8005f44 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fc2e 	bl	800677a <LSM6DSO_GYRO_Disable>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d002      	beq.n	8005f2a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8005f24:	f04f 33ff 	mov.w	r3, #4294967295
 8005f28:	e00c      	b.n	8005f44 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  pObj->is_initialized = 0;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSO_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3708      	adds	r7, #8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <LSM6DSO_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3320      	adds	r3, #32
 8005f5a:	6839      	ldr	r1, [r7, #0]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f001 fdb0 	bl	8007ac2 <lsm6dso_device_id_get>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d002      	beq.n	8005f6e <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 8005f68:	f04f 33ff 	mov.w	r3, #4294967295
 8005f6c:	e000      	b.n	8005f70 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3708      	adds	r7, #8
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}

08005f78 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2201      	movs	r2, #1
 8005f86:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2200      	movs	r2, #0
 8005f92:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	2200      	movs	r2, #0
 8005f98:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005fa0:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	2210      	movs	r2, #16
 8005fa6:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	4a07      	ldr	r2, [pc, #28]	@ (8005fd0 <LSM6DSO_GetCapabilities+0x58>)
 8005fb2:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	4a06      	ldr	r2, [pc, #24]	@ (8005fd0 <LSM6DSO_GetCapabilities+0x58>)
 8005fb8:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr
 8005fd0:	45d02000 	.word	0x45d02000

08005fd4 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d101      	bne.n	8005fea <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	e014      	b.n	8006014 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f103 0220 	add.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4610      	mov	r0, r2
 8005ffa:	f001 f969 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 8005ffe:	4603      	mov	r3, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006004:	f04f 33ff 	mov.w	r3, #4294967295
 8006008:	e004      	b.n	8006014 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3708      	adds	r7, #8
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 800602e:	2300      	movs	r3, #0
 8006030:	e01f      	b.n	8006072 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f103 0220 	add.w	r2, r3, #32
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	3333      	adds	r3, #51	@ 0x33
 800603c:	4619      	mov	r1, r3
 800603e:	4610      	mov	r0, r2
 8006040:	f001 fa40 	bl	80074c4 <lsm6dso_xl_data_rate_get>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d002      	beq.n	8006050 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 800604a:	f04f 33ff 	mov.w	r3, #4294967295
 800604e:	e010      	b.n	8006072 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3320      	adds	r3, #32
 8006054:	2100      	movs	r1, #0
 8006056:	4618      	mov	r0, r3
 8006058:	f001 f93a 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
 8006066:	e004      	b.n	8006072 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSO_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	3708      	adds	r7, #8
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
	...

0800607c <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	3320      	adds	r3, #32
 800608e:	f107 020b 	add.w	r2, r7, #11
 8006092:	4611      	mov	r1, r2
 8006094:	4618      	mov	r0, r3
 8006096:	f001 f8e3 	bl	8007260 <lsm6dso_xl_full_scale_get>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80060a0:	f04f 33ff 	mov.w	r3, #4294967295
 80060a4:	e023      	b.n	80060ee <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80060a6:	7afb      	ldrb	r3, [r7, #11]
 80060a8:	2b03      	cmp	r3, #3
 80060aa:	d81b      	bhi.n	80060e4 <LSM6DSO_ACC_GetSensitivity+0x68>
 80060ac:	a201      	add	r2, pc, #4	@ (adr r2, 80060b4 <LSM6DSO_ACC_GetSensitivity+0x38>)
 80060ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b2:	bf00      	nop
 80060b4:	080060c5 	.word	0x080060c5
 80060b8:	080060dd 	.word	0x080060dd
 80060bc:	080060cd 	.word	0x080060cd
 80060c0:	080060d5 	.word	0x080060d5
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	4a0c      	ldr	r2, [pc, #48]	@ (80060f8 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 80060c8:	601a      	str	r2, [r3, #0]
      break;
 80060ca:	e00f      	b.n	80060ec <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	4a0b      	ldr	r2, [pc, #44]	@ (80060fc <LSM6DSO_ACC_GetSensitivity+0x80>)
 80060d0:	601a      	str	r2, [r3, #0]
      break;
 80060d2:	e00b      	b.n	80060ec <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006100 <LSM6DSO_ACC_GetSensitivity+0x84>)
 80060d8:	601a      	str	r2, [r3, #0]
      break;
 80060da:	e007      	b.n	80060ec <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	4a09      	ldr	r2, [pc, #36]	@ (8006104 <LSM6DSO_ACC_GetSensitivity+0x88>)
 80060e0:	601a      	str	r2, [r3, #0]
      break;
 80060e2:	e003      	b.n	80060ec <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80060e4:	f04f 33ff 	mov.w	r3, #4294967295
 80060e8:	60fb      	str	r3, [r7, #12]
      break;
 80060ea:	bf00      	nop
  }

  return ret;
 80060ec:	68fb      	ldr	r3, [r7, #12]
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	3d79db23 	.word	0x3d79db23
 80060fc:	3df9db23 	.word	0x3df9db23
 8006100:	3e79db23 	.word	0x3e79db23
 8006104:	3ef9db23 	.word	0x3ef9db23

08006108 <LSM6DSO_ACC_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	3320      	adds	r3, #32
 800611a:	f107 020b 	add.w	r2, r7, #11
 800611e:	4611      	mov	r1, r2
 8006120:	4618      	mov	r0, r3
 8006122:	f001 f9cf 	bl	80074c4 <lsm6dso_xl_data_rate_get>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 800612c:	f04f 33ff 	mov.w	r3, #4294967295
 8006130:	e054      	b.n	80061dc <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 8006132:	7afb      	ldrb	r3, [r7, #11]
 8006134:	2b0b      	cmp	r3, #11
 8006136:	d84c      	bhi.n	80061d2 <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8006138:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 800613a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613e:	bf00      	nop
 8006140:	08006171 	.word	0x08006171
 8006144:	08006183 	.word	0x08006183
 8006148:	0800618b 	.word	0x0800618b
 800614c:	08006193 	.word	0x08006193
 8006150:	0800619b 	.word	0x0800619b
 8006154:	080061a3 	.word	0x080061a3
 8006158:	080061ab 	.word	0x080061ab
 800615c:	080061b3 	.word	0x080061b3
 8006160:	080061bb 	.word	0x080061bb
 8006164:	080061c3 	.word	0x080061c3
 8006168:	080061cb 	.word	0x080061cb
 800616c:	0800617b 	.word	0x0800617b
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	f04f 0200 	mov.w	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
      break;
 8006178:	e02f      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	4a19      	ldr	r2, [pc, #100]	@ (80061e4 <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 800617e:	601a      	str	r2, [r3, #0]
      break;
 8006180:	e02b      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	4a18      	ldr	r2, [pc, #96]	@ (80061e8 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 8006186:	601a      	str	r2, [r3, #0]
      break;
 8006188:	e027      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	4a17      	ldr	r2, [pc, #92]	@ (80061ec <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 800618e:	601a      	str	r2, [r3, #0]
      break;
 8006190:	e023      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	4a16      	ldr	r2, [pc, #88]	@ (80061f0 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 8006196:	601a      	str	r2, [r3, #0]
      break;
 8006198:	e01f      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	4a15      	ldr	r2, [pc, #84]	@ (80061f4 <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 800619e:	601a      	str	r2, [r3, #0]
      break;
 80061a0:	e01b      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	4a14      	ldr	r2, [pc, #80]	@ (80061f8 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80061a6:	601a      	str	r2, [r3, #0]
      break;
 80061a8:	e017      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	4a13      	ldr	r2, [pc, #76]	@ (80061fc <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80061ae:	601a      	str	r2, [r3, #0]
      break;
 80061b0:	e013      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	4a12      	ldr	r2, [pc, #72]	@ (8006200 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80061b6:	601a      	str	r2, [r3, #0]
      break;
 80061b8:	e00f      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	4a11      	ldr	r2, [pc, #68]	@ (8006204 <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80061be:	601a      	str	r2, [r3, #0]
      break;
 80061c0:	e00b      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	4a10      	ldr	r2, [pc, #64]	@ (8006208 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80061c6:	601a      	str	r2, [r3, #0]
      break;
 80061c8:	e007      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	4a0f      	ldr	r2, [pc, #60]	@ (800620c <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 80061ce:	601a      	str	r2, [r3, #0]
      break;
 80061d0:	e003      	b.n	80061da <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 80061d2:	f04f 33ff 	mov.w	r3, #4294967295
 80061d6:	60fb      	str	r3, [r7, #12]
      break;
 80061d8:	bf00      	nop
  }

  return ret;
 80061da:	68fb      	ldr	r3, [r7, #12]
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3710      	adds	r7, #16
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	3fcccccd 	.word	0x3fcccccd
 80061e8:	41480000 	.word	0x41480000
 80061ec:	41d00000 	.word	0x41d00000
 80061f0:	42500000 	.word	0x42500000
 80061f4:	42d00000 	.word	0x42d00000
 80061f8:	43500000 	.word	0x43500000
 80061fc:	43d08000 	.word	0x43d08000
 8006200:	44504000 	.word	0x44504000
 8006204:	44d06000 	.word	0x44d06000
 8006208:	45505000 	.word	0x45505000
 800620c:	45d05800 	.word	0x45d05800

08006210 <LSM6DSO_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 800621c:	2100      	movs	r1, #0
 800621e:	ed97 0a00 	vldr	s0, [r7]
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f000 f806 	bl	8006234 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8006228:	4603      	mov	r3, r0
}
 800622a:	4618      	mov	r0, r3
 800622c:	3708      	adds	r7, #8
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
  * @param  Mode the accelerometer operating mode
  * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	@ 0x30
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	ed87 0a02 	vstr	s0, [r7, #8]
 8006240:	460b      	mov	r3, r1
 8006242:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	62fb      	str	r3, [r7, #44]	@ 0x2c
  float_t newOdr = Odr;
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (Mode)
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	2b02      	cmp	r3, #2
 8006250:	f000 80ea 	beq.w	8006428 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1f4>
 8006254:	2b02      	cmp	r3, #2
 8006256:	f300 8163 	bgt.w	8006520 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x30>
 800625e:	2b01      	cmp	r3, #1
 8006260:	d074      	beq.n	800634c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x118>
 8006262:	e15d      	b.n	8006520 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ec>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f103 0020 	add.w	r0, r3, #32
 800626a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800626e:	2301      	movs	r3, #1
 8006270:	2114      	movs	r1, #20
 8006272:	f000 ff9f 	bl	80071b4 <lsm6dso_read_reg>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x4e>
      {
        return LSM6DSO_ERROR;
 800627c:	f04f 33ff 	mov.w	r3, #4294967295
 8006280:	e16c      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 8006282:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006286:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b00      	cmp	r3, #0
 800628e:	d025      	beq.n	80062dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006296:	2b01      	cmp	r3, #1
 8006298:	d10b      	bne.n	80062b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3320      	adds	r3, #32
 800629e:	2100      	movs	r1, #0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f001 f815 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d002      	beq.n	80062b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x7e>
          {
            return LSM6DSO_ERROR;
 80062ac:	f04f 33ff 	mov.w	r3, #4294967295
 80062b0:	e154      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 80062b2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80062b6:	f36f 13c7 	bfc	r3, #7, #1
 80062ba:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f103 0020 	add.w	r0, r3, #32
 80062c4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80062c8:	2301      	movs	r3, #1
 80062ca:	2114      	movs	r1, #20
 80062cc:	f000 ff8a 	bl	80071e4 <lsm6dso_write_reg>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa8>
        {
          return LSM6DSO_ERROR;
 80062d6:	f04f 33ff 	mov.w	r3, #4294967295
 80062da:	e13f      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f103 0020 	add.w	r0, r3, #32
 80062e2:	f107 0220 	add.w	r2, r7, #32
 80062e6:	2301      	movs	r3, #1
 80062e8:	2115      	movs	r1, #21
 80062ea:	f000 ff63 	bl	80071b4 <lsm6dso_read_reg>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc6>
      {
        return LSM6DSO_ERROR;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	e130      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 80062fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80062fe:	f003 0310 	and.w	r3, r3, #16
 8006302:	b2db      	uxtb	r3, r3
 8006304:	2b00      	cmp	r3, #0
 8006306:	d014      	beq.n	8006332 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
      {
        val2.xl_hm_mode = 0U;
 8006308:	f897 3020 	ldrb.w	r3, [r7, #32]
 800630c:	f36f 1304 	bfc	r3, #4, #1
 8006310:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f103 0020 	add.w	r0, r3, #32
 800631a:	f107 0220 	add.w	r2, r7, #32
 800631e:	2301      	movs	r3, #1
 8006320:	2115      	movs	r1, #21
 8006322:	f000 ff5f 	bl	80071e4 <lsm6dso_write_reg>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xfe>
        {
          return LSM6DSO_ERROR;
 800632c:	f04f 33ff 	mov.w	r3, #4294967295
 8006330:	e114      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8006332:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006336:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 800633a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006342:	d400      	bmi.n	8006346 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
      {
        newOdr = 12.5f;
      }
      break;
 8006344:	e0f0      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 12.5f;
 8006346:	4b87      	ldr	r3, [pc, #540]	@ (8006564 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>)
 8006348:	62bb      	str	r3, [r7, #40]	@ 0x28
 800634a:	e0ed      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f103 0020 	add.w	r0, r3, #32
 8006352:	f107 021c 	add.w	r2, r7, #28
 8006356:	2301      	movs	r3, #1
 8006358:	2114      	movs	r1, #20
 800635a:	f000 ff2b 	bl	80071b4 <lsm6dso_read_reg>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x136>
      {
        return LSM6DSO_ERROR;
 8006364:	f04f 33ff 	mov.w	r3, #4294967295
 8006368:	e0f8      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en != 0U)
 800636a:	7f3b      	ldrb	r3, [r7, #28]
 800636c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006370:	b2db      	uxtb	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d023      	beq.n	80063be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800637c:	2b01      	cmp	r3, #1
 800637e:	d10b      	bne.n	8006398 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3320      	adds	r3, #32
 8006384:	2100      	movs	r1, #0
 8006386:	4618      	mov	r0, r3
 8006388:	f000 ffa2 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d002      	beq.n	8006398 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x164>
          {
            return LSM6DSO_ERROR;
 8006392:	f04f 33ff 	mov.w	r3, #4294967295
 8006396:	e0e1      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 0;
 8006398:	7f3b      	ldrb	r3, [r7, #28]
 800639a:	f36f 13c7 	bfc	r3, #7, #1
 800639e:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f103 0020 	add.w	r0, r3, #32
 80063a6:	f107 021c 	add.w	r2, r7, #28
 80063aa:	2301      	movs	r3, #1
 80063ac:	2114      	movs	r1, #20
 80063ae:	f000 ff19 	bl	80071e4 <lsm6dso_write_reg>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x18a>
        {
          return LSM6DSO_ERROR;
 80063b8:	f04f 33ff 	mov.w	r3, #4294967295
 80063bc:	e0ce      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f103 0020 	add.w	r0, r3, #32
 80063c4:	f107 0218 	add.w	r2, r7, #24
 80063c8:	2301      	movs	r3, #1
 80063ca:	2115      	movs	r1, #21
 80063cc:	f000 fef2 	bl	80071b4 <lsm6dso_read_reg>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a8>
      {
        return LSM6DSO_ERROR;
 80063d6:	f04f 33ff 	mov.w	r3, #4294967295
 80063da:	e0bf      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode == 0U)
 80063dc:	7e3b      	ldrb	r3, [r7, #24]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d112      	bne.n	800640e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
      {
        val2.xl_hm_mode = 1U;
 80063e8:	7e3b      	ldrb	r3, [r7, #24]
 80063ea:	f043 0310 	orr.w	r3, r3, #16
 80063ee:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f103 0020 	add.w	r0, r3, #32
 80063f6:	f107 0218 	add.w	r2, r7, #24
 80063fa:	2301      	movs	r3, #1
 80063fc:	2115      	movs	r1, #21
 80063fe:	f000 fef1 	bl	80071e4 <lsm6dso_write_reg>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d002      	beq.n	800640e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1da>
        {
          return LSM6DSO_ERROR;
 8006408:	f04f 33ff 	mov.w	r3, #4294967295
 800640c:	e0a6      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 800640e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8006412:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8006568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 8006416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641e:	dc00      	bgt.n	8006422 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
      {
        newOdr = 208.0f;
      }
      break;
 8006420:	e082      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 8006422:	4b52      	ldr	r3, [pc, #328]	@ (800656c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 8006424:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006426:	e07f      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	f103 0020 	add.w	r0, r3, #32
 800642e:	f107 0210 	add.w	r2, r7, #16
 8006432:	2301      	movs	r3, #1
 8006434:	2115      	movs	r1, #21
 8006436:	f000 febd 	bl	80071b4 <lsm6dso_read_reg>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d002      	beq.n	8006446 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x212>
      {
        return LSM6DSO_ERROR;
 8006440:	f04f 33ff 	mov.w	r3, #4294967295
 8006444:	e08a      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val2.xl_hm_mode != 0U)
 8006446:	7c3b      	ldrb	r3, [r7, #16]
 8006448:	f003 0310 	and.w	r3, r3, #16
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d012      	beq.n	8006478 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
      {
        val2.xl_hm_mode = 0U;
 8006452:	7c3b      	ldrb	r3, [r7, #16]
 8006454:	f36f 1304 	bfc	r3, #4, #1
 8006458:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f103 0020 	add.w	r0, r3, #32
 8006460:	f107 0210 	add.w	r2, r7, #16
 8006464:	2301      	movs	r3, #1
 8006466:	2115      	movs	r1, #21
 8006468:	f000 febc 	bl	80071e4 <lsm6dso_write_reg>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x244>
        {
          return LSM6DSO_ERROR;
 8006472:	f04f 33ff 	mov.w	r3, #4294967295
 8006476:	e071      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800647e:	2b01      	cmp	r3, #1
 8006480:	d108      	bne.n	8006494 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f979 	bl	800677a <LSM6DSO_GYRO_Disable>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d002      	beq.n	8006494 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x260>
        {
          return LSM6DSO_ERROR;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	e063      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f103 0020 	add.w	r0, r3, #32
 800649a:	f107 0214 	add.w	r2, r7, #20
 800649e:	2301      	movs	r3, #1
 80064a0:	2114      	movs	r1, #20
 80064a2:	f000 fe87 	bl	80071b4 <lsm6dso_read_reg>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x27e>
      {
        return LSM6DSO_ERROR;
 80064ac:	f04f 33ff 	mov.w	r3, #4294967295
 80064b0:	e054      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
      }

      if (val1.xl_ulp_en == 0U)
 80064b2:	7d3b      	ldrb	r3, [r7, #20]
 80064b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d123      	bne.n	8006506 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10b      	bne.n	80064e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	3320      	adds	r3, #32
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 fefe 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d002      	beq.n	80064e0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ac>
          {
            return LSM6DSO_ERROR;
 80064da:	f04f 33ff 	mov.w	r3, #4294967295
 80064de:	e03d      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
          }
        }

        val1.xl_ulp_en = 1U;
 80064e0:	7d3b      	ldrb	r3, [r7, #20]
 80064e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e6:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f103 0020 	add.w	r0, r3, #32
 80064ee:	f107 0214 	add.w	r2, r7, #20
 80064f2:	2301      	movs	r3, #1
 80064f4:	2114      	movs	r1, #20
 80064f6:	f000 fe75 	bl	80071e4 <lsm6dso_write_reg>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2d2>
        {
          return LSM6DSO_ERROR;
 8006500:	f04f 33ff 	mov.w	r3, #4294967295
 8006504:	e02a      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006506:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800650a:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8006568 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>
 800650e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006516:	dc00      	bgt.n	800651a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
      {
        newOdr = 208.0f;
      }
      break;
 8006518:	e006      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
        newOdr = 208.0f;
 800651a:	4b14      	ldr	r3, [pc, #80]	@ (800656c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x338>)
 800651c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651e:	e003      	b.n	8006528 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2f4>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006520:	f04f 33ff 	mov.w	r3, #4294967295
 8006524:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8006526:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800652e:	d102      	bne.n	8006536 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x302>
  {
    return LSM6DSO_ERROR;
 8006530:	f04f 33ff 	mov.w	r3, #4294967295
 8006534:	e012      	b.n	800655c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x328>
  }

  if (pObj->acc_is_enabled == 1U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800653c:	2b01      	cmp	r3, #1
 800653e:	d106      	bne.n	800654e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x31a>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006540:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006544:	68f8      	ldr	r0, [r7, #12]
 8006546:	f000 fbc9 	bl	8006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 800654a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800654c:	e005      	b.n	800655a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x326>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 800654e:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fc5a 	bl	8006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8006558:	62f8      	str	r0, [r7, #44]	@ 0x2c
  }

  return ret;
 800655a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	@ 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	41480000 	.word	0x41480000
 8006568:	43500000 	.word	0x43500000
 800656c:	43500000 	.word	0x43500000

08006570 <LSM6DSO_ACC_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3320      	adds	r3, #32
 8006582:	f107 020b 	add.w	r2, r7, #11
 8006586:	4611      	mov	r1, r2
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fe69 	bl	8007260 <lsm6dso_xl_full_scale_get>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006594:	f04f 33ff 	mov.w	r3, #4294967295
 8006598:	e023      	b.n	80065e2 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b03      	cmp	r3, #3
 800659e:	d81b      	bhi.n	80065d8 <LSM6DSO_ACC_GetFullScale+0x68>
 80065a0:	a201      	add	r2, pc, #4	@ (adr r2, 80065a8 <LSM6DSO_ACC_GetFullScale+0x38>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065d1 	.word	0x080065d1
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065c9 	.word	0x080065c9
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	2202      	movs	r2, #2
 80065bc:	601a      	str	r2, [r3, #0]
      break;
 80065be:	e00f      	b.n	80065e0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2204      	movs	r2, #4
 80065c4:	601a      	str	r2, [r3, #0]
      break;
 80065c6:	e00b      	b.n	80065e0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2208      	movs	r2, #8
 80065cc:	601a      	str	r2, [r3, #0]
      break;
 80065ce:	e007      	b.n	80065e0 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2210      	movs	r2, #16
 80065d4:	601a      	str	r2, [r3, #0]
      break;
 80065d6:	e003      	b.n	80065e0 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 80065d8:	f04f 33ff 	mov.w	r3, #4294967295
 80065dc:	60fb      	str	r3, [r7, #12]
      break;
 80065de:	bf00      	nop
  }

  return ret;
 80065e0:	68fb      	ldr	r3, [r7, #12]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop

080065ec <LSM6DSO_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	2b02      	cmp	r3, #2
 80065fa:	dd0b      	ble.n	8006614 <LSM6DSO_ACC_SetFullScale+0x28>
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	dd06      	ble.n	8006610 <LSM6DSO_ACC_SetFullScale+0x24>
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	2b08      	cmp	r3, #8
 8006606:	dc01      	bgt.n	800660c <LSM6DSO_ACC_SetFullScale+0x20>
 8006608:	2303      	movs	r3, #3
 800660a:	e004      	b.n	8006616 <LSM6DSO_ACC_SetFullScale+0x2a>
 800660c:	2301      	movs	r3, #1
 800660e:	e002      	b.n	8006616 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006610:	2302      	movs	r3, #2
 8006612:	e000      	b.n	8006616 <LSM6DSO_ACC_SetFullScale+0x2a>
 8006614:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8006616:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3320      	adds	r3, #32
 800661c:	7bfa      	ldrb	r2, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fdf7 	bl	8007214 <lsm6dso_xl_full_scale_set>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	e000      	b.n	8006634 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <LSM6DSO_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3320      	adds	r3, #32
 800664a:	f107 0208 	add.w	r2, r7, #8
 800664e:	4611      	mov	r1, r2
 8006650:	4618      	mov	r0, r3
 8006652:	f001 f9d1 	bl	80079f8 <lsm6dso_acceleration_raw_get>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800665c:	f04f 33ff 	mov.w	r3, #4294967295
 8006660:	e00c      	b.n	800667c <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006662:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 800666a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006672:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b086      	sub	sp, #24
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 800668e:	f04f 0300 	mov.w	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3320      	adds	r3, #32
 8006698:	f107 0210 	add.w	r2, r7, #16
 800669c:	4611      	mov	r1, r2
 800669e:	4618      	mov	r0, r3
 80066a0:	f001 f9aa 	bl	80079f8 <lsm6dso_acceleration_raw_get>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d002      	beq.n	80066b0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295
 80066ae:	e03c      	b.n	800672a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fce0 	bl	800607c <LSM6DSO_ACC_GetSensitivity>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 80066c2:	f04f 33ff 	mov.w	r3, #4294967295
 80066c6:	e030      	b.n	800672a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 80066c8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80066cc:	ee07 3a90 	vmov	s15, r3
 80066d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80066d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80066e0:	ee17 2a90 	vmov	r2, s15
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 80066e8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80066ec:	ee07 3a90 	vmov	s15, r3
 80066f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80066f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006700:	ee17 2a90 	vmov	r2, s15
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006708:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006714:	edd7 7a03 	vldr	s15, [r7, #12]
 8006718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800671c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006720:	ee17 2a90 	vmov	r2, s15
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	e014      	b.n	8006772 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f103 0220 	add.w	r2, r3, #32
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 ff84 	bl	8007664 <lsm6dso_gy_data_rate_set>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8006762:	f04f 33ff 	mov.w	r3, #4294967295
 8006766:	e004      	b.n	8006772 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 800677a:	b580      	push	{r7, lr}
 800677c:	b082      	sub	sp, #8
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 800678c:	2300      	movs	r3, #0
 800678e:	e01f      	b.n	80067d0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f103 0220 	add.w	r2, r3, #32
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3334      	adds	r3, #52	@ 0x34
 800679a:	4619      	mov	r1, r3
 800679c:	4610      	mov	r0, r2
 800679e:	f001 f85b 	bl	8007858 <lsm6dso_gy_data_rate_get>
 80067a2:	4603      	mov	r3, r0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d002      	beq.n	80067ae <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 80067a8:	f04f 33ff 	mov.w	r3, #4294967295
 80067ac:	e010      	b.n	80067d0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	3320      	adds	r3, #32
 80067b2:	2100      	movs	r1, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ff55 	bl	8007664 <lsm6dso_gy_data_rate_set>
 80067ba:	4603      	mov	r3, r0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d002      	beq.n	80067c6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 80067c0:	f04f 33ff 	mov.w	r3, #4294967295
 80067c4:	e004      	b.n	80067d0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32

  return LSM6DSO_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3708      	adds	r7, #8
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	3320      	adds	r3, #32
 80067ea:	f107 020b 	add.w	r2, r7, #11
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 fef5 	bl	80075e0 <lsm6dso_gy_full_scale_get>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80067fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006800:	e02d      	b.n	800685e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8006802:	7afb      	ldrb	r3, [r7, #11]
 8006804:	2b06      	cmp	r3, #6
 8006806:	d825      	bhi.n	8006854 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8006808:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006835 	.word	0x08006835
 8006814:	0800682d 	.word	0x0800682d
 8006818:	0800683d 	.word	0x0800683d
 800681c:	08006855 	.word	0x08006855
 8006820:	08006845 	.word	0x08006845
 8006824:	08006855 	.word	0x08006855
 8006828:	0800684d 	.word	0x0800684d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	4a0e      	ldr	r2, [pc, #56]	@ (8006868 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8006830:	601a      	str	r2, [r3, #0]
      break;
 8006832:	e013      	b.n	800685c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	4a0d      	ldr	r2, [pc, #52]	@ (800686c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8006838:	601a      	str	r2, [r3, #0]
      break;
 800683a:	e00f      	b.n	800685c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	4a0c      	ldr	r2, [pc, #48]	@ (8006870 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8006840:	601a      	str	r2, [r3, #0]
      break;
 8006842:	e00b      	b.n	800685c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	4a0b      	ldr	r2, [pc, #44]	@ (8006874 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8006848:	601a      	str	r2, [r3, #0]
      break;
 800684a:	e007      	b.n	800685c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	4a0a      	ldr	r2, [pc, #40]	@ (8006878 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8006850:	601a      	str	r2, [r3, #0]
      break;
 8006852:	e003      	b.n	800685c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8006854:	f04f 33ff 	mov.w	r3, #4294967295
 8006858:	60fb      	str	r3, [r7, #12]
      break;
 800685a:	bf00      	nop
  }

  return ret;
 800685c:	68fb      	ldr	r3, [r7, #12]
}
 800685e:	4618      	mov	r0, r3
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	408c0000 	.word	0x408c0000
 800686c:	410c0000 	.word	0x410c0000
 8006870:	418c0000 	.word	0x418c0000
 8006874:	420c0000 	.word	0x420c0000
 8006878:	428c0000 	.word	0x428c0000

0800687c <LSM6DSO_GYRO_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	3320      	adds	r3, #32
 800688e:	f107 020b 	add.w	r2, r7, #11
 8006892:	4611      	mov	r1, r2
 8006894:	4618      	mov	r0, r3
 8006896:	f000 ffdf 	bl	8007858 <lsm6dso_gy_data_rate_get>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
 80068a4:	e04e      	b.n	8006944 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80068a6:	7afb      	ldrb	r3, [r7, #11]
 80068a8:	2b0a      	cmp	r3, #10
 80068aa:	d846      	bhi.n	800693a <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80068ac:	a201      	add	r2, pc, #4	@ (adr r2, 80068b4 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80068ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b2:	bf00      	nop
 80068b4:	080068e1 	.word	0x080068e1
 80068b8:	080068eb 	.word	0x080068eb
 80068bc:	080068f3 	.word	0x080068f3
 80068c0:	080068fb 	.word	0x080068fb
 80068c4:	08006903 	.word	0x08006903
 80068c8:	0800690b 	.word	0x0800690b
 80068cc:	08006913 	.word	0x08006913
 80068d0:	0800691b 	.word	0x0800691b
 80068d4:	08006923 	.word	0x08006923
 80068d8:	0800692b 	.word	0x0800692b
 80068dc:	08006933 	.word	0x08006933
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f04f 0200 	mov.w	r2, #0
 80068e6:	601a      	str	r2, [r3, #0]
      break;
 80068e8:	e02b      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	4a17      	ldr	r2, [pc, #92]	@ (800694c <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 80068ee:	601a      	str	r2, [r3, #0]
      break;
 80068f0:	e027      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	4a16      	ldr	r2, [pc, #88]	@ (8006950 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 80068f6:	601a      	str	r2, [r3, #0]
      break;
 80068f8:	e023      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	4a15      	ldr	r2, [pc, #84]	@ (8006954 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 80068fe:	601a      	str	r2, [r3, #0]
      break;
 8006900:	e01f      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	4a14      	ldr	r2, [pc, #80]	@ (8006958 <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 8006906:	601a      	str	r2, [r3, #0]
      break;
 8006908:	e01b      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	4a13      	ldr	r2, [pc, #76]	@ (800695c <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 800690e:	601a      	str	r2, [r3, #0]
      break;
 8006910:	e017      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	4a12      	ldr	r2, [pc, #72]	@ (8006960 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 8006916:	601a      	str	r2, [r3, #0]
      break;
 8006918:	e013      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	4a11      	ldr	r2, [pc, #68]	@ (8006964 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 800691e:	601a      	str	r2, [r3, #0]
      break;
 8006920:	e00f      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	4a10      	ldr	r2, [pc, #64]	@ (8006968 <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 8006926:	601a      	str	r2, [r3, #0]
      break;
 8006928:	e00b      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	4a0f      	ldr	r2, [pc, #60]	@ (800696c <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 800692e:	601a      	str	r2, [r3, #0]
      break;
 8006930:	e007      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	4a0e      	ldr	r2, [pc, #56]	@ (8006970 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 8006936:	601a      	str	r2, [r3, #0]
      break;
 8006938:	e003      	b.n	8006942 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	60fb      	str	r3, [r7, #12]
      break;
 8006940:	bf00      	nop
  }

  return ret;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	41480000 	.word	0x41480000
 8006950:	41d00000 	.word	0x41d00000
 8006954:	42500000 	.word	0x42500000
 8006958:	42d00000 	.word	0x42d00000
 800695c:	43500000 	.word	0x43500000
 8006960:	43d08000 	.word	0x43d08000
 8006964:	44504000 	.word	0x44504000
 8006968:	44d06000 	.word	0x44d06000
 800696c:	45505000 	.word	0x45505000
 8006970:	45d05800 	.word	0x45d05800

08006974 <LSM6DSO_GYRO_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 8006980:	2100      	movs	r1, #0
 8006982:	ed97 0a00 	vldr	s0, [r7]
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f806 	bl	8006998 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 800698c:	4603      	mov	r3, r0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
	...

08006998 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
  * @param  Mode the gyroscope operating mode
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr,
                                                 LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80069a4:	460b      	mov	r3, r1
 80069a6:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80069b0:	79fb      	ldrb	r3, [r7, #7]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d002      	beq.n	80069bc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d028      	beq.n	8006a0c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80069ba:	e05c      	b.n	8006a76 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f103 0020 	add.w	r0, r3, #32
 80069c2:	f107 0214 	add.w	r2, r7, #20
 80069c6:	2301      	movs	r3, #1
 80069c8:	2116      	movs	r1, #22
 80069ca:	f000 fbf3 	bl	80071b4 <lsm6dso_read_reg>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d002      	beq.n	80069da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 80069d4:	f04f 33ff 	mov.w	r3, #4294967295
 80069d8:	e06c      	b.n	8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 80069da:	7d3b      	ldrb	r3, [r7, #20]
 80069dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d04b      	beq.n	8006a7e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 80069e6:	7d3b      	ldrb	r3, [r7, #20]
 80069e8:	f36f 13c7 	bfc	r3, #7, #1
 80069ec:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f103 0020 	add.w	r0, r3, #32
 80069f4:	f107 0214 	add.w	r2, r7, #20
 80069f8:	2301      	movs	r3, #1
 80069fa:	2116      	movs	r1, #22
 80069fc:	f000 fbf2 	bl	80071e4 <lsm6dso_write_reg>
 8006a00:	4603      	mov	r3, r0
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d03b      	beq.n	8006a7e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 8006a06:	f04f 33ff 	mov.w	r3, #4294967295
 8006a0a:	e053      	b.n	8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f103 0020 	add.w	r0, r3, #32
 8006a12:	f107 0210 	add.w	r2, r7, #16
 8006a16:	2301      	movs	r3, #1
 8006a18:	2116      	movs	r1, #22
 8006a1a:	f000 fbcb 	bl	80071b4 <lsm6dso_read_reg>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8006a24:	f04f 33ff 	mov.w	r3, #4294967295
 8006a28:	e044      	b.n	8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 8006a2a:	7c3b      	ldrb	r3, [r7, #16]
 8006a2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d112      	bne.n	8006a5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 8006a36:	7c3b      	ldrb	r3, [r7, #16]
 8006a38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3c:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f103 0020 	add.w	r0, r3, #32
 8006a44:	f107 0210 	add.w	r2, r7, #16
 8006a48:	2301      	movs	r3, #1
 8006a4a:	2116      	movs	r1, #22
 8006a4c:	f000 fbca 	bl	80071e4 <lsm6dso_write_reg>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d002      	beq.n	8006a5c <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 8006a56:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5a:	e02b      	b.n	8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8006a5c:	edd7 7a06 	vldr	s15, [r7, #24]
 8006a60:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8006abc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8006a64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a6c:	dc00      	bgt.n	8006a70 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 8006a6e:	e007      	b.n	8006a80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 8006a70:	4b13      	ldr	r3, [pc, #76]	@ (8006ac0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e004      	b.n	8006a80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 8006a76:	f04f 33ff 	mov.w	r3, #4294967295
 8006a7a:	61fb      	str	r3, [r7, #28]
      break;
 8006a7c:	e000      	b.n	8006a80 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 8006a7e:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d102      	bne.n	8006a8e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 8006a88:	f04f 33ff 	mov.w	r3, #4294967295
 8006a8c:	e012      	b.n	8006ab4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d106      	bne.n	8006aa6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8006a98:	ed97 0a06 	vldr	s0, [r7, #24]
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fa45 	bl	8006f2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 8006aa2:	61f8      	str	r0, [r7, #28]
 8006aa4:	e005      	b.n	8006ab2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8006aa6:	ed97 0a06 	vldr	s0, [r7, #24]
 8006aaa:	68f8      	ldr	r0, [r7, #12]
 8006aac:	f000 faca 	bl	8007044 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 8006ab0:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 8006ab2:	69fb      	ldr	r3, [r7, #28]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3720      	adds	r7, #32
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	43500000 	.word	0x43500000
 8006ac0:	43500000 	.word	0x43500000

08006ac4 <LSM6DSO_GYRO_GetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale pointer where the full scale is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3320      	adds	r3, #32
 8006ad6:	f107 020b 	add.w	r2, r7, #11
 8006ada:	4611      	mov	r1, r2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f000 fd7f 	bl	80075e0 <lsm6dso_gy_full_scale_get>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d002      	beq.n	8006aee <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8006ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8006aec:	e030      	b.n	8006b50 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8006aee:	7afb      	ldrb	r3, [r7, #11]
 8006af0:	2b06      	cmp	r3, #6
 8006af2:	d828      	bhi.n	8006b46 <LSM6DSO_GYRO_GetFullScale+0x82>
 8006af4:	a201      	add	r2, pc, #4	@ (adr r2, 8006afc <LSM6DSO_GYRO_GetFullScale+0x38>)
 8006af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afa:	bf00      	nop
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b29 	.word	0x08006b29
 8006b08:	08006b47 	.word	0x08006b47
 8006b0c:	08006b33 	.word	0x08006b33
 8006b10:	08006b47 	.word	0x08006b47
 8006b14:	08006b3d 	.word	0x08006b3d
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	227d      	movs	r2, #125	@ 0x7d
 8006b1c:	601a      	str	r2, [r3, #0]
      break;
 8006b1e:	e016      	b.n	8006b4e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	22fa      	movs	r2, #250	@ 0xfa
 8006b24:	601a      	str	r2, [r3, #0]
      break;
 8006b26:	e012      	b.n	8006b4e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8006b2e:	601a      	str	r2, [r3, #0]
      break;
 8006b30:	e00d      	b.n	8006b4e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b38:	601a      	str	r2, [r3, #0]
      break;
 8006b3a:	e008      	b.n	8006b4e <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8006b42:	601a      	str	r2, [r3, #0]
      break;
 8006b44:	e003      	b.n	8006b4e <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	60fb      	str	r3, [r7, #12]
      break;
 8006b4c:	bf00      	nop
  }

  return ret;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <LSM6DSO_GYRO_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b7d      	cmp	r3, #125	@ 0x7d
 8006b66:	dd12      	ble.n	8006b8e <LSM6DSO_GYRO_SetFullScale+0x36>
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	2bfa      	cmp	r3, #250	@ 0xfa
 8006b6c:	dd0d      	ble.n	8006b8a <LSM6DSO_GYRO_SetFullScale+0x32>
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8006b74:	dd07      	ble.n	8006b86 <LSM6DSO_GYRO_SetFullScale+0x2e>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b7c:	dc01      	bgt.n	8006b82 <LSM6DSO_GYRO_SetFullScale+0x2a>
 8006b7e:	2304      	movs	r3, #4
 8006b80:	e006      	b.n	8006b90 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006b82:	2306      	movs	r3, #6
 8006b84:	e004      	b.n	8006b90 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e002      	b.n	8006b90 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	e000      	b.n	8006b90 <LSM6DSO_GYRO_SetFullScale+0x38>
 8006b8e:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 8006b90:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3320      	adds	r3, #32
 8006b96:	7bfa      	ldrb	r2, [r7, #15]
 8006b98:	4611      	mov	r1, r2
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fcfa 	bl	8007594 <lsm6dso_gy_full_scale_set>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 8006ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8006baa:	e000      	b.n	8006bae <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <LSM6DSO_GYRO_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b084      	sub	sp, #16
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	3320      	adds	r3, #32
 8006bc4:	f107 0208 	add.w	r2, r7, #8
 8006bc8:	4611      	mov	r1, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fecc 	bl	8007968 <lsm6dso_angular_rate_raw_get>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d002      	beq.n	8006bdc <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8006bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bda:	e00c      	b.n	8006bf6 <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8006bdc:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8006be4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8006bec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8006bf4:	2300      	movs	r3, #0
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3710      	adds	r7, #16
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b086      	sub	sp, #24
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
 8006c06:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3320      	adds	r3, #32
 8006c0c:	f107 0210 	add.w	r2, r7, #16
 8006c10:	4611      	mov	r1, r2
 8006c12:	4618      	mov	r0, r3
 8006c14:	f000 fea8 	bl	8007968 <lsm6dso_angular_rate_raw_get>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d002      	beq.n	8006c24 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8006c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c22:	e03c      	b.n	8006c9e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8006c24:	f107 030c 	add.w	r3, r7, #12
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff fdd4 	bl	80067d8 <LSM6DSO_GYRO_GetSensitivity>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	e030      	b.n	8006c9e <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8006c3c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006c40:	ee07 3a90 	vmov	s15, r3
 8006c44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c48:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c54:	ee17 2a90 	vmov	r2, s15
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8006c5c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006c60:	ee07 3a90 	vmov	s15, r3
 8006c64:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c68:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c74:	ee17 2a90 	vmov	r2, s15
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8006c7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c80:	ee07 3a90 	vmov	s15, r3
 8006c84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006c94:	ee17 2a90 	vmov	r2, s15
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	70fb      	strb	r3, [r7, #3]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f103 0020 	add.w	r0, r3, #32
 8006cbc:	1cba      	adds	r2, r7, #2
 8006cbe:	78f9      	ldrb	r1, [r7, #3]
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	f000 fa8f 	bl	80071e4 <lsm6dso_write_reg>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8006ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd0:	e000      	b.n	8006cd4 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
            : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006ce8:	edd7 7a00 	vldr	s15, [r7]
 8006cec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8006dec <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8006cf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cf8:	d801      	bhi.n	8006cfe <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 8006cfa:	230b      	movs	r3, #11
 8006cfc:	e063      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006cfe:	edd7 7a00 	vldr	s15, [r7]
 8006d02:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006d06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0e:	d801      	bhi.n	8006d14 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e058      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d14:	edd7 7a00 	vldr	s15, [r7]
 8006d18:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006d1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d24:	d801      	bhi.n	8006d2a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8006d26:	2302      	movs	r3, #2
 8006d28:	e04d      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d2a:	edd7 7a00 	vldr	s15, [r7]
 8006d2e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006df0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8006d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d3a:	d801      	bhi.n	8006d40 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	e042      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d40:	edd7 7a00 	vldr	s15, [r7]
 8006d44:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8006df4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 8006d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d50:	d801      	bhi.n	8006d56 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8006d52:	2304      	movs	r3, #4
 8006d54:	e037      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d56:	edd7 7a00 	vldr	s15, [r7]
 8006d5a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006df8 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 8006d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d66:	d801      	bhi.n	8006d6c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 8006d68:	2305      	movs	r3, #5
 8006d6a:	e02c      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d6c:	edd7 7a00 	vldr	s15, [r7]
 8006d70:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8006dfc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 8006d74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d7c:	d801      	bhi.n	8006d82 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8006d7e:	2306      	movs	r3, #6
 8006d80:	e021      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d82:	edd7 7a00 	vldr	s15, [r7]
 8006d86:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006e00 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 8006d8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d801      	bhi.n	8006d98 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8006d94:	2307      	movs	r3, #7
 8006d96:	e016      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006d98:	edd7 7a00 	vldr	s15, [r7]
 8006d9c:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8006e04 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8006da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da8:	d801      	bhi.n	8006dae <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8006daa:	2308      	movs	r3, #8
 8006dac:	e00b      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006dae:	edd7 7a00 	vldr	s15, [r7]
 8006db2:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006e08 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 8006db6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dbe:	d801      	bhi.n	8006dc4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8006dc0:	2309      	movs	r3, #9
 8006dc2:	e000      	b.n	8006dc6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8006dc4:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006dc6:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
            :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3320      	adds	r3, #32
 8006dcc:	7bfa      	ldrb	r2, [r7, #15]
 8006dce:	4611      	mov	r1, r2
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fa7d 	bl	80072d0 <lsm6dso_xl_data_rate_set>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d002      	beq.n	8006de2 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8006de0:	e000      	b.n	8006de4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	3fcccccd 	.word	0x3fcccccd
 8006df0:	42500000 	.word	0x42500000
 8006df4:	42d00000 	.word	0x42d00000
 8006df8:	43500000 	.word	0x43500000
 8006dfc:	43d08000 	.word	0x43d08000
 8006e00:	44504000 	.word	0x44504000
 8006e04:	44d06000 	.word	0x44d06000
 8006e08:	45505000 	.word	0x45505000

08006e0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                  : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 8006e18:	edd7 7a00 	vldr	s15, [r7]
 8006e1c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8006f0c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8006e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e28:	d801      	bhi.n	8006e2e <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 8006e2a:	230b      	movs	r3, #11
 8006e2c:	e063      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e2e:	edd7 7a00 	vldr	s15, [r7]
 8006e32:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	d801      	bhi.n	8006e44 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e058      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e44:	edd7 7a00 	vldr	s15, [r7]
 8006e48:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e54:	d801      	bhi.n	8006e5a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e04d      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e5a:	edd7 7a00 	vldr	s15, [r7]
 8006e5e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8006f10 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 8006e62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	d801      	bhi.n	8006e70 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e042      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e70:	edd7 7a00 	vldr	s15, [r7]
 8006e74:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8006f14 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 8006e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e80:	d801      	bhi.n	8006e86 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8006e82:	2304      	movs	r3, #4
 8006e84:	e037      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e86:	edd7 7a00 	vldr	s15, [r7]
 8006e8a:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 8006f18 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 8006e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e96:	d801      	bhi.n	8006e9c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 8006e98:	2305      	movs	r3, #5
 8006e9a:	e02c      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006e9c:	edd7 7a00 	vldr	s15, [r7]
 8006ea0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8006f1c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8006ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eac:	d801      	bhi.n	8006eb2 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8006eae:	2306      	movs	r3, #6
 8006eb0:	e021      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006eb2:	edd7 7a00 	vldr	s15, [r7]
 8006eb6:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8006f20 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 8006eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	d801      	bhi.n	8006ec8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8006ec4:	2307      	movs	r3, #7
 8006ec6:	e016      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ec8:	edd7 7a00 	vldr	s15, [r7]
 8006ecc:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8006f24 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8006ed0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed8:	d801      	bhi.n	8006ede <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8006eda:	2308      	movs	r3, #8
 8006edc:	e00b      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ede:	edd7 7a00 	vldr	s15, [r7]
 8006ee2:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8006f28 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 8006ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	d801      	bhi.n	8006ef4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8006ef0:	2309      	movs	r3, #9
 8006ef2:	e000      	b.n	8006ef6 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8006ef4:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                  : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                  : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                  :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	3fcccccd 	.word	0x3fcccccd
 8006f10:	42500000 	.word	0x42500000
 8006f14:	42d00000 	.word	0x42d00000
 8006f18:	43500000 	.word	0x43500000
 8006f1c:	43d08000 	.word	0x43d08000
 8006f20:	44504000 	.word	0x44504000
 8006f24:	44d06000 	.word	0x44d06000
 8006f28:	45505000 	.word	0x45505000

08006f2c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b084      	sub	sp, #16
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8006f38:	edd7 7a00 	vldr	s15, [r7]
 8006f3c:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8006f40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f48:	d801      	bhi.n	8006f4e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e058      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f4e:	edd7 7a00 	vldr	s15, [r7]
 8006f52:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8006f56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f5e:	d801      	bhi.n	8006f64 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 8006f60:	2302      	movs	r3, #2
 8006f62:	e04d      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f64:	edd7 7a00 	vldr	s15, [r7]
 8006f68:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8007028 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 8006f6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f74:	d801      	bhi.n	8006f7a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 8006f76:	2303      	movs	r3, #3
 8006f78:	e042      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f7a:	edd7 7a00 	vldr	s15, [r7]
 8006f7e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 800702c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 8006f82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8a:	d801      	bhi.n	8006f90 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	e037      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006f90:	edd7 7a00 	vldr	s15, [r7]
 8006f94:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007030 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 8006f98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fa0:	d801      	bhi.n	8006fa6 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8006fa2:	2305      	movs	r3, #5
 8006fa4:	e02c      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fa6:	edd7 7a00 	vldr	s15, [r7]
 8006faa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8007034 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8006fae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fb6:	d801      	bhi.n	8006fbc <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 8006fb8:	2306      	movs	r3, #6
 8006fba:	e021      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fbc:	edd7 7a00 	vldr	s15, [r7]
 8006fc0:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007038 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8006fc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fcc:	d801      	bhi.n	8006fd2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8006fce:	2307      	movs	r3, #7
 8006fd0:	e016      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fd2:	edd7 7a00 	vldr	s15, [r7]
 8006fd6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800703c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 8006fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe2:	d801      	bhi.n	8006fe8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	e00b      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006fe8:	edd7 7a00 	vldr	s15, [r7]
 8006fec:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007040 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8006ff0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	d801      	bhi.n	8006ffe <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 8006ffa:	2309      	movs	r3, #9
 8006ffc:	e000      	b.n	8007000 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8006ffe:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007000:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
            : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
            :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3320      	adds	r3, #32
 8007006:	7bfa      	ldrb	r2, [r7, #15]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fb2a 	bl	8007664 <lsm6dso_gy_data_rate_set>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 8007016:	f04f 33ff 	mov.w	r3, #4294967295
 800701a:	e000      	b.n	800701e <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	42500000 	.word	0x42500000
 800702c:	42d00000 	.word	0x42d00000
 8007030:	43500000 	.word	0x43500000
 8007034:	43d08000 	.word	0x43d08000
 8007038:	44504000 	.word	0x44504000
 800703c:	44d06000 	.word	0x44d06000
 8007040:	45505000 	.word	0x45505000

08007044 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                   : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 8007050:	edd7 7a00 	vldr	s15, [r7]
 8007054:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8007058:	eef4 7ac7 	vcmpe.f32	s15, s14
 800705c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007060:	d801      	bhi.n	8007066 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 8007062:	2301      	movs	r3, #1
 8007064:	e058      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007066:	edd7 7a00 	vldr	s15, [r7]
 800706a:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 800706e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007076:	d801      	bhi.n	800707c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 8007078:	2302      	movs	r3, #2
 800707a:	e04d      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 800707c:	edd7 7a00 	vldr	s15, [r7]
 8007080:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 800712c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 8007084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800708c:	d801      	bhi.n	8007092 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 800708e:	2303      	movs	r3, #3
 8007090:	e042      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007092:	edd7 7a00 	vldr	s15, [r7]
 8007096:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8007130 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 800709a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800709e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070a2:	d801      	bhi.n	80070a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 80070a4:	2304      	movs	r3, #4
 80070a6:	e037      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070a8:	edd7 7a00 	vldr	s15, [r7]
 80070ac:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8007134 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 80070b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b8:	d801      	bhi.n	80070be <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 80070ba:	2305      	movs	r3, #5
 80070bc:	e02c      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070be:	edd7 7a00 	vldr	s15, [r7]
 80070c2:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8007138 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 80070c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ce:	d801      	bhi.n	80070d4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 80070d0:	2306      	movs	r3, #6
 80070d2:	e021      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070d4:	edd7 7a00 	vldr	s15, [r7]
 80070d8:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800713c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 80070dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070e4:	d801      	bhi.n	80070ea <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 80070e6:	2307      	movs	r3, #7
 80070e8:	e016      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80070ea:	edd7 7a00 	vldr	s15, [r7]
 80070ee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8007140 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 80070f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	d801      	bhi.n	8007100 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 80070fc:	2308      	movs	r3, #8
 80070fe:	e00b      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007100:	edd7 7a00 	vldr	s15, [r7]
 8007104:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8007144 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8007108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800710c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007110:	d801      	bhi.n	8007116 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8007112:	2309      	movs	r3, #9
 8007114:	e000      	b.n	8007118 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8007116:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
                   : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                   : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                   : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                   :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 800711e:	2300      	movs	r3, #0
}
 8007120:	4618      	mov	r0, r3
 8007122:	370c      	adds	r7, #12
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	42500000 	.word	0x42500000
 8007130:	42d00000 	.word	0x42d00000
 8007134:	43500000 	.word	0x43500000
 8007138:	43d08000 	.word	0x43d08000
 800713c:	44504000 	.word	0x44504000
 8007140:	44d06000 	.word	0x44d06000
 8007144:	45505000 	.word	0x45505000

08007148 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8007148:	b590      	push	{r4, r7, lr}
 800714a:	b087      	sub	sp, #28
 800714c:	af00      	add	r7, sp, #0
 800714e:	60f8      	str	r0, [r7, #12]
 8007150:	607a      	str	r2, [r7, #4]
 8007152:	461a      	mov	r2, r3
 8007154:	460b      	mov	r3, r1
 8007156:	72fb      	strb	r3, [r7, #11]
 8007158:	4613      	mov	r3, r2
 800715a:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	695c      	ldr	r4, [r3, #20]
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	7b1b      	ldrb	r3, [r3, #12]
 8007168:	4618      	mov	r0, r3
 800716a:	7afb      	ldrb	r3, [r7, #11]
 800716c:	b299      	uxth	r1, r3
 800716e:	893b      	ldrh	r3, [r7, #8]
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	47a0      	blx	r4
 8007174:	4603      	mov	r3, r0
}
 8007176:	4618      	mov	r0, r3
 8007178:	371c      	adds	r7, #28
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}

0800717e <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 800717e:	b590      	push	{r4, r7, lr}
 8007180:	b087      	sub	sp, #28
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	461a      	mov	r2, r3
 800718a:	460b      	mov	r3, r1
 800718c:	72fb      	strb	r3, [r7, #11]
 800718e:	4613      	mov	r3, r2
 8007190:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	691c      	ldr	r4, [r3, #16]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	7b1b      	ldrb	r3, [r3, #12]
 800719e:	4618      	mov	r0, r3
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	b299      	uxth	r1, r3
 80071a4:	893b      	ldrh	r3, [r7, #8]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	47a0      	blx	r4
 80071aa:	4603      	mov	r3, r0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	371c      	adds	r7, #28
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd90      	pop	{r4, r7, pc}

080071b4 <lsm6dso_read_reg>:
  *
  */
int32_t __weak lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                uint8_t *data,
                                uint16_t len)
{
 80071b4:	b590      	push	{r4, r7, lr}
 80071b6:	b087      	sub	sp, #28
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	607a      	str	r2, [r7, #4]
 80071be:	461a      	mov	r2, r3
 80071c0:	460b      	mov	r3, r1
 80071c2:	72fb      	strb	r3, [r7, #11]
 80071c4:	4613      	mov	r3, r2
 80071c6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685c      	ldr	r4, [r3, #4]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	68d8      	ldr	r0, [r3, #12]
 80071d0:	893b      	ldrh	r3, [r7, #8]
 80071d2:	7af9      	ldrb	r1, [r7, #11]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	47a0      	blx	r4
 80071d8:	6178      	str	r0, [r7, #20]

  return ret;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	371c      	adds	r7, #28
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd90      	pop	{r4, r7, pc}

080071e4 <lsm6dso_write_reg>:
  *
  */
int32_t __weak lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                 uint8_t *data,
                                 uint16_t len)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	461a      	mov	r2, r3
 80071f0:	460b      	mov	r3, r1
 80071f2:	72fb      	strb	r3, [r7, #11]
 80071f4:	4613      	mov	r3, r2
 80071f6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681c      	ldr	r4, [r3, #0]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	68d8      	ldr	r0, [r3, #12]
 8007200:	893b      	ldrh	r3, [r7, #8]
 8007202:	7af9      	ldrb	r1, [r7, #11]
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	47a0      	blx	r4
 8007208:	6178      	str	r0, [r7, #20]

  return ret;
 800720a:	697b      	ldr	r3, [r7, #20]
}
 800720c:	4618      	mov	r0, r3
 800720e:	371c      	adds	r7, #28
 8007210:	46bd      	mov	sp, r7
 8007212:	bd90      	pop	{r4, r7, pc}

08007214 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b084      	sub	sp, #16
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007220:	f107 0208 	add.w	r2, r7, #8
 8007224:	2301      	movs	r3, #1
 8007226:	2110      	movs	r1, #16
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ffc3 	bl	80071b4 <lsm6dso_read_reg>
 800722e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10f      	bne.n	8007256 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8007236:	78fb      	ldrb	r3, [r7, #3]
 8007238:	f003 0303 	and.w	r3, r3, #3
 800723c:	b2da      	uxtb	r2, r3
 800723e:	7a3b      	ldrb	r3, [r7, #8]
 8007240:	f362 0383 	bfi	r3, r2, #2, #2
 8007244:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007246:	f107 0208 	add.w	r2, r7, #8
 800724a:	2301      	movs	r3, #1
 800724c:	2110      	movs	r1, #16
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f7ff ffc8 	bl	80071e4 <lsm6dso_write_reg>
 8007254:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007256:	68fb      	ldr	r3, [r7, #12]
}
 8007258:	4618      	mov	r0, r3
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800726a:	f107 0208 	add.w	r2, r7, #8
 800726e:	2301      	movs	r3, #1
 8007270:	2110      	movs	r1, #16
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f7ff ff9e 	bl	80071b4 <lsm6dso_read_reg>
 8007278:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800727a:	7a3b      	ldrb	r3, [r7, #8]
 800727c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8007280:	b2db      	uxtb	r3, r3
 8007282:	2b03      	cmp	r3, #3
 8007284:	d81a      	bhi.n	80072bc <lsm6dso_xl_full_scale_get+0x5c>
 8007286:	a201      	add	r2, pc, #4	@ (adr r2, 800728c <lsm6dso_xl_full_scale_get+0x2c>)
 8007288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072a5 	.word	0x080072a5
 8007294:	080072ad 	.word	0x080072ad
 8007298:	080072b5 	.word	0x080072b5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	2200      	movs	r2, #0
 80072a0:	701a      	strb	r2, [r3, #0]
      break;
 80072a2:	e00f      	b.n	80072c4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
      break;
 80072aa:	e00b      	b.n	80072c4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	2202      	movs	r2, #2
 80072b0:	701a      	strb	r2, [r3, #0]
      break;
 80072b2:	e007      	b.n	80072c4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2203      	movs	r2, #3
 80072b8:	701a      	strb	r2, [r3, #0]
      break;
 80072ba:	e003      	b.n	80072c4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	2200      	movs	r2, #0
 80072c0:	701a      	strb	r2, [r3, #0]
      break;
 80072c2:	bf00      	nop
  }

  return ret;
 80072c4:	68fb      	ldr	r3, [r7, #12]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	460b      	mov	r3, r1
 80072da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80072e0:	f107 030c 	add.w	r3, r7, #12
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fc90 	bl	8007c0c <lsm6dso_fsm_enable_get>
 80072ec:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d001      	beq.n	80072f8 <lsm6dso_xl_data_rate_set+0x28>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	e0e0      	b.n	80074ba <lsm6dso_xl_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80072f8:	7b3b      	ldrb	r3, [r7, #12]
 80072fa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007300:	7b3b      	ldrb	r3, [r7, #12]
 8007302:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007306:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007308:	4313      	orrs	r3, r2
 800730a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 800730c:	7b3b      	ldrb	r3, [r7, #12]
 800730e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007312:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007314:	4313      	orrs	r3, r2
 8007316:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 8007318:	7b3b      	ldrb	r3, [r7, #12]
 800731a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800731e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 8007320:	4313      	orrs	r3, r2
 8007322:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007324:	7b3b      	ldrb	r3, [r7, #12]
 8007326:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800732a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 800732c:	4313      	orrs	r3, r2
 800732e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007330:	7b3b      	ldrb	r3, [r7, #12]
 8007332:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007336:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 8007338:	4313      	orrs	r3, r2
 800733a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 800733c:	7b3b      	ldrb	r3, [r7, #12]
 800733e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007342:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 8007344:	4313      	orrs	r3, r2
 8007346:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 8007348:	7b3b      	ldrb	r3, [r7, #12]
 800734a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800734e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 8007350:	4313      	orrs	r3, r2
 8007352:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007354:	7b7b      	ldrb	r3, [r7, #13]
 8007356:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800735a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 800735c:	4313      	orrs	r3, r2
 800735e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007360:	7b7b      	ldrb	r3, [r7, #13]
 8007362:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8007366:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 8007368:	4313      	orrs	r3, r2
 800736a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 800736c:	7b7b      	ldrb	r3, [r7, #13]
 800736e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007372:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007374:	4313      	orrs	r3, r2
 8007376:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007378:	7b7b      	ldrb	r3, [r7, #13]
 800737a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800737e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007380:	4313      	orrs	r3, r2
 8007382:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007384:	7b7b      	ldrb	r3, [r7, #13]
 8007386:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800738a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800738c:	4313      	orrs	r3, r2
 800738e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007390:	7b7b      	ldrb	r3, [r7, #13]
 8007392:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8007396:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007398:	4313      	orrs	r3, r2
 800739a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 800739c:	7b7b      	ldrb	r3, [r7, #13]
 800739e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80073a2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80073a8:	7b7b      	ldrb	r3, [r7, #13]
 80073aa:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80073ae:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 80073b0:	4313      	orrs	r3, r2
 80073b2:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d164      	bne.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80073b8:	f107 030b 	add.w	r3, r7, #11
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fc46 	bl	8007c50 <lsm6dso_fsm_data_rate_get>
 80073c4:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <lsm6dso_xl_data_rate_set+0x100>
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	e074      	b.n	80074ba <lsm6dso_xl_data_rate_set+0x1ea>

    switch (fsm_odr)
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d852      	bhi.n	800747c <lsm6dso_xl_data_rate_set+0x1ac>
 80073d6:	a201      	add	r2, pc, #4	@ (adr r2, 80073dc <lsm6dso_xl_data_rate_set+0x10c>)
 80073d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073dc:	080073ed 	.word	0x080073ed
 80073e0:	080073ff 	.word	0x080073ff
 80073e4:	0800741d 	.word	0x0800741d
 80073e8:	08007447 	.word	0x08007447
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_XL_ODR_OFF)
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d102      	bne.n	80073f8 <lsm6dso_xl_data_rate_set+0x128>
        {
          odr_xl = LSM6DSO_XL_ODR_12Hz5;
 80073f2:	2301      	movs	r3, #1
 80073f4:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 80073f6:	e044      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	75fb      	strb	r3, [r7, #23]
        break;
 80073fc:	e041      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 80073fe:	78fb      	ldrb	r3, [r7, #3]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <lsm6dso_xl_data_rate_set+0x13a>
        {
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007404:	2302      	movs	r3, #2
 8007406:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007408:	e03b      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d102      	bne.n	8007416 <lsm6dso_xl_data_rate_set+0x146>
          odr_xl = LSM6DSO_XL_ODR_26Hz;
 8007410:	2302      	movs	r3, #2
 8007412:	75fb      	strb	r3, [r7, #23]
        break;
 8007414:	e035      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007416:	78fb      	ldrb	r3, [r7, #3]
 8007418:	75fb      	strb	r3, [r7, #23]
        break;
 800741a:	e032      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d102      	bne.n	8007428 <lsm6dso_xl_data_rate_set+0x158>
        {
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 8007422:	2303      	movs	r3, #3
 8007424:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007426:	e02c      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d102      	bne.n	8007434 <lsm6dso_xl_data_rate_set+0x164>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800742e:	2303      	movs	r3, #3
 8007430:	75fb      	strb	r3, [r7, #23]
        break;
 8007432:	e026      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	2b02      	cmp	r3, #2
 8007438:	d102      	bne.n	8007440 <lsm6dso_xl_data_rate_set+0x170>
          odr_xl = LSM6DSO_XL_ODR_52Hz;
 800743a:	2303      	movs	r3, #3
 800743c:	75fb      	strb	r3, [r7, #23]
        break;
 800743e:	e020      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	75fb      	strb	r3, [r7, #23]
        break;
 8007444:	e01d      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_XL_ODR_OFF)
 8007446:	78fb      	ldrb	r3, [r7, #3]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d102      	bne.n	8007452 <lsm6dso_xl_data_rate_set+0x182>
        {
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 800744c:	2304      	movs	r3, #4
 800744e:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_xl = val;
        }

        break;
 8007450:	e017      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_12Hz5)
 8007452:	78fb      	ldrb	r3, [r7, #3]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d102      	bne.n	800745e <lsm6dso_xl_data_rate_set+0x18e>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007458:	2304      	movs	r3, #4
 800745a:	75fb      	strb	r3, [r7, #23]
        break;
 800745c:	e011      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_26Hz)
 800745e:	78fb      	ldrb	r3, [r7, #3]
 8007460:	2b02      	cmp	r3, #2
 8007462:	d102      	bne.n	800746a <lsm6dso_xl_data_rate_set+0x19a>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007464:	2304      	movs	r3, #4
 8007466:	75fb      	strb	r3, [r7, #23]
        break;
 8007468:	e00b      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
        else if (val == LSM6DSO_XL_ODR_52Hz)
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	2b03      	cmp	r3, #3
 800746e:	d102      	bne.n	8007476 <lsm6dso_xl_data_rate_set+0x1a6>
          odr_xl = LSM6DSO_XL_ODR_104Hz;
 8007470:	2304      	movs	r3, #4
 8007472:	75fb      	strb	r3, [r7, #23]
        break;
 8007474:	e005      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>
          odr_xl = val;
 8007476:	78fb      	ldrb	r3, [r7, #3]
 8007478:	75fb      	strb	r3, [r7, #23]
        break;
 800747a:	e002      	b.n	8007482 <lsm6dso_xl_data_rate_set+0x1b2>

      default:
        odr_xl = val;
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	75fb      	strb	r3, [r7, #23]
        break;
 8007480:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8007482:	f107 0208 	add.w	r2, r7, #8
 8007486:	2301      	movs	r3, #1
 8007488:	2110      	movs	r1, #16
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f7ff fe92 	bl	80071b4 <lsm6dso_read_reg>
 8007490:	6138      	str	r0, [r7, #16]
  reg.odr_xl = (uint8_t) odr_xl;
 8007492:	7dfb      	ldrb	r3, [r7, #23]
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	b2da      	uxtb	r2, r3
 800749a:	7a3b      	ldrb	r3, [r7, #8]
 800749c:	f362 1307 	bfi	r3, r2, #4, #4
 80074a0:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074a2:	f107 0208 	add.w	r2, r7, #8
 80074a6:	2301      	movs	r3, #1
 80074a8:	2110      	movs	r1, #16
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7ff fe9a 	bl	80071e4 <lsm6dso_write_reg>
 80074b0:	4602      	mov	r2, r0
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4413      	add	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]

  return ret;
 80074b8:	693b      	ldr	r3, [r7, #16]
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop

080074c4 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80074ce:	f107 0208 	add.w	r2, r7, #8
 80074d2:	2301      	movs	r3, #1
 80074d4:	2110      	movs	r1, #16
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fe6c 	bl	80071b4 <lsm6dso_read_reg>
 80074dc:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 80074de:	7a3b      	ldrb	r3, [r7, #8]
 80074e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b0b      	cmp	r3, #11
 80074e8:	d84a      	bhi.n	8007580 <lsm6dso_xl_data_rate_get+0xbc>
 80074ea:	a201      	add	r2, pc, #4	@ (adr r2, 80074f0 <lsm6dso_xl_data_rate_get+0x2c>)
 80074ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f0:	08007521 	.word	0x08007521
 80074f4:	08007529 	.word	0x08007529
 80074f8:	08007531 	.word	0x08007531
 80074fc:	08007539 	.word	0x08007539
 8007500:	08007541 	.word	0x08007541
 8007504:	08007549 	.word	0x08007549
 8007508:	08007551 	.word	0x08007551
 800750c:	08007559 	.word	0x08007559
 8007510:	08007561 	.word	0x08007561
 8007514:	08007569 	.word	0x08007569
 8007518:	08007571 	.word	0x08007571
 800751c:	08007579 	.word	0x08007579
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2200      	movs	r2, #0
 8007524:	701a      	strb	r2, [r3, #0]
      break;
 8007526:	e02f      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2201      	movs	r2, #1
 800752c:	701a      	strb	r2, [r3, #0]
      break;
 800752e:	e02b      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	2202      	movs	r2, #2
 8007534:	701a      	strb	r2, [r3, #0]
      break;
 8007536:	e027      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2203      	movs	r2, #3
 800753c:	701a      	strb	r2, [r3, #0]
      break;
 800753e:	e023      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2204      	movs	r2, #4
 8007544:	701a      	strb	r2, [r3, #0]
      break;
 8007546:	e01f      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2205      	movs	r2, #5
 800754c:	701a      	strb	r2, [r3, #0]
      break;
 800754e:	e01b      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2206      	movs	r2, #6
 8007554:	701a      	strb	r2, [r3, #0]
      break;
 8007556:	e017      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2207      	movs	r2, #7
 800755c:	701a      	strb	r2, [r3, #0]
      break;
 800755e:	e013      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	2208      	movs	r2, #8
 8007564:	701a      	strb	r2, [r3, #0]
      break;
 8007566:	e00f      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2209      	movs	r2, #9
 800756c:	701a      	strb	r2, [r3, #0]
      break;
 800756e:	e00b      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	220a      	movs	r2, #10
 8007574:	701a      	strb	r2, [r3, #0]
      break;
 8007576:	e007      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	220b      	movs	r2, #11
 800757c:	701a      	strb	r2, [r3, #0]
      break;
 800757e:	e003      	b.n	8007588 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2200      	movs	r2, #0
 8007584:	701a      	strb	r2, [r3, #0]
      break;
 8007586:	bf00      	nop
  }

  return ret;
 8007588:	68fb      	ldr	r3, [r7, #12]
}
 800758a:	4618      	mov	r0, r3
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop

08007594 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075a0:	f107 0208 	add.w	r2, r7, #8
 80075a4:	2301      	movs	r3, #1
 80075a6:	2111      	movs	r1, #17
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fe03 	bl	80071b4 <lsm6dso_read_reg>
 80075ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10f      	bne.n	80075d6 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80075b6:	78fb      	ldrb	r3, [r7, #3]
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	7a3b      	ldrb	r3, [r7, #8]
 80075c0:	f362 0343 	bfi	r3, r2, #1, #3
 80075c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075c6:	f107 0208 	add.w	r2, r7, #8
 80075ca:	2301      	movs	r3, #1
 80075cc:	2111      	movs	r1, #17
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f7ff fe08 	bl	80071e4 <lsm6dso_write_reg>
 80075d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80075d6:	68fb      	ldr	r3, [r7, #12]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80075ea:	f107 0208 	add.w	r2, r7, #8
 80075ee:	2301      	movs	r3, #1
 80075f0:	2111      	movs	r1, #17
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7ff fdde 	bl	80071b4 <lsm6dso_read_reg>
 80075f8:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 80075fa:	7a3b      	ldrb	r3, [r7, #8]
 80075fc:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b06      	cmp	r3, #6
 8007604:	d824      	bhi.n	8007650 <lsm6dso_gy_full_scale_get+0x70>
 8007606:	a201      	add	r2, pc, #4	@ (adr r2, 800760c <lsm6dso_gy_full_scale_get+0x2c>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007629 	.word	0x08007629
 8007610:	08007631 	.word	0x08007631
 8007614:	08007639 	.word	0x08007639
 8007618:	08007651 	.word	0x08007651
 800761c:	08007641 	.word	0x08007641
 8007620:	08007651 	.word	0x08007651
 8007624:	08007649 	.word	0x08007649
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	701a      	strb	r2, [r3, #0]
      break;
 800762e:	e013      	b.n	8007658 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	2201      	movs	r2, #1
 8007634:	701a      	strb	r2, [r3, #0]
      break;
 8007636:	e00f      	b.n	8007658 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2202      	movs	r2, #2
 800763c:	701a      	strb	r2, [r3, #0]
      break;
 800763e:	e00b      	b.n	8007658 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	2204      	movs	r2, #4
 8007644:	701a      	strb	r2, [r3, #0]
      break;
 8007646:	e007      	b.n	8007658 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	2206      	movs	r2, #6
 800764c:	701a      	strb	r2, [r3, #0]
      break;
 800764e:	e003      	b.n	8007658 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	2200      	movs	r2, #0
 8007654:	701a      	strb	r2, [r3, #0]
      break;
 8007656:	bf00      	nop
  }

  return ret;
 8007658:	68fb      	ldr	r3, [r7, #12]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop

08007664 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8007670:	78fb      	ldrb	r3, [r7, #3]
 8007672:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8007674:	f107 030c 	add.w	r3, r7, #12
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fac6 	bl	8007c0c <lsm6dso_fsm_enable_get>
 8007680:	6138      	str	r0, [r7, #16]
  if (ret != 0) { return ret; }
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <lsm6dso_gy_data_rate_set+0x28>
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	e0e0      	b.n	800784e <lsm6dso_gy_data_rate_set+0x1ea>

  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800768c:	7b3b      	ldrb	r3, [r7, #12]
 800768e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007692:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 8007694:	7b3b      	ldrb	r3, [r7, #12]
 8007696:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800769a:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800769c:	4313      	orrs	r3, r2
 800769e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80076a0:	7b3b      	ldrb	r3, [r7, #12]
 80076a2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80076a6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm2_en  |
 80076a8:	4313      	orrs	r3, r2
 80076aa:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80076ac:	7b3b      	ldrb	r3, [r7, #12]
 80076ae:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80076b2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm3_en  |
 80076b4:	4313      	orrs	r3, r2
 80076b6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80076b8:	7b3b      	ldrb	r3, [r7, #12]
 80076ba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80076be:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm4_en  |
 80076c0:	4313      	orrs	r3, r2
 80076c2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80076c4:	7b3b      	ldrb	r3, [r7, #12]
 80076c6:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80076ca:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm5_en  |
 80076cc:	4313      	orrs	r3, r2
 80076ce:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80076d0:	7b3b      	ldrb	r3, [r7, #12]
 80076d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80076d6:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm6_en  |
 80076d8:	4313      	orrs	r3, r2
 80076da:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80076dc:	7b3b      	ldrb	r3, [r7, #12]
 80076de:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80076e2:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm7_en  |
 80076e4:	4313      	orrs	r3, r2
 80076e6:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80076e8:	7b7b      	ldrb	r3, [r7, #13]
 80076ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80076ee:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_a.fsm8_en  |
 80076f0:	4313      	orrs	r3, r2
 80076f2:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 80076f4:	7b7b      	ldrb	r3, [r7, #13]
 80076f6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80076fa:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm9_en  |
 80076fc:	4313      	orrs	r3, r2
 80076fe:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007700:	7b7b      	ldrb	r3, [r7, #13]
 8007702:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007706:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm10_en |
 8007708:	4313      	orrs	r3, r2
 800770a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 800770c:	7b7b      	ldrb	r3, [r7, #13]
 800770e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8007712:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm11_en |
 8007714:	4313      	orrs	r3, r2
 8007716:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 8007718:	7b7b      	ldrb	r3, [r7, #13]
 800771a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800771e:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm12_en |
 8007720:	4313      	orrs	r3, r2
 8007722:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007724:	7b7b      	ldrb	r3, [r7, #13]
 8007726:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800772a:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm13_en |
 800772c:	4313      	orrs	r3, r2
 800772e:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007730:	7b7b      	ldrb	r3, [r7, #13]
 8007732:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8007736:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm14_en |
 8007738:	4313      	orrs	r3, r2
 800773a:	b2da      	uxtb	r2, r3
       fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800773c:	7b7b      	ldrb	r3, [r7, #13]
 800773e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007742:	b2db      	uxtb	r3, r3
       fsm_enable.fsm_enable_b.fsm15_en |
 8007744:	4313      	orrs	r3, r2
 8007746:	b2db      	uxtb	r3, r3
  if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8007748:	2b01      	cmp	r3, #1
 800774a:	d164      	bne.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
  {
    ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800774c:	f107 030b 	add.w	r3, r7, #11
 8007750:	4619      	mov	r1, r3
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa7c 	bl	8007c50 <lsm6dso_fsm_data_rate_get>
 8007758:	6138      	str	r0, [r7, #16]
    if (ret != 0) { return ret; }
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d001      	beq.n	8007764 <lsm6dso_gy_data_rate_set+0x100>
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	e074      	b.n	800784e <lsm6dso_gy_data_rate_set+0x1ea>

    switch (fsm_odr)
 8007764:	7afb      	ldrb	r3, [r7, #11]
 8007766:	2b03      	cmp	r3, #3
 8007768:	d852      	bhi.n	8007810 <lsm6dso_gy_data_rate_set+0x1ac>
 800776a:	a201      	add	r2, pc, #4	@ (adr r2, 8007770 <lsm6dso_gy_data_rate_set+0x10c>)
 800776c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007770:	08007781 	.word	0x08007781
 8007774:	08007793 	.word	0x08007793
 8007778:	080077b1 	.word	0x080077b1
 800777c:	080077db 	.word	0x080077db
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d102      	bne.n	800778c <lsm6dso_gy_data_rate_set+0x128>
        {
          odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8007786:	2301      	movs	r3, #1
 8007788:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800778a:	e044      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800778c:	78fb      	ldrb	r3, [r7, #3]
 800778e:	75fb      	strb	r3, [r7, #23]
        break;
 8007790:	e041      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_26Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d102      	bne.n	800779e <lsm6dso_gy_data_rate_set+0x13a>
        {
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 8007798:	2302      	movs	r3, #2
 800779a:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 800779c:	e03b      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d102      	bne.n	80077aa <lsm6dso_gy_data_rate_set+0x146>
          odr_gy = LSM6DSO_GY_ODR_26Hz;
 80077a4:	2302      	movs	r3, #2
 80077a6:	75fb      	strb	r3, [r7, #23]
        break;
 80077a8:	e035      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	75fb      	strb	r3, [r7, #23]
        break;
 80077ae:	e032      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_52Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <lsm6dso_gy_data_rate_set+0x158>
        {
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077b6:	2303      	movs	r3, #3
 80077b8:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80077ba:	e02c      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80077bc:	78fb      	ldrb	r3, [r7, #3]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d102      	bne.n	80077c8 <lsm6dso_gy_data_rate_set+0x164>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077c2:	2303      	movs	r3, #3
 80077c4:	75fb      	strb	r3, [r7, #23]
        break;
 80077c6:	e026      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d102      	bne.n	80077d4 <lsm6dso_gy_data_rate_set+0x170>
          odr_gy = LSM6DSO_GY_ODR_52Hz;
 80077ce:	2303      	movs	r3, #3
 80077d0:	75fb      	strb	r3, [r7, #23]
        break;
 80077d2:	e020      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	75fb      	strb	r3, [r7, #23]
        break;
 80077d8:	e01d      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>

      case LSM6DSO_ODR_FSM_104Hz:
        if (val == LSM6DSO_GY_ODR_OFF)
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d102      	bne.n	80077e6 <lsm6dso_gy_data_rate_set+0x182>
        {
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077e0:	2304      	movs	r3, #4
 80077e2:	75fb      	strb	r3, [r7, #23]
        else
        {
          odr_gy = val;
        }

        break;
 80077e4:	e017      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_12Hz5)
 80077e6:	78fb      	ldrb	r3, [r7, #3]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d102      	bne.n	80077f2 <lsm6dso_gy_data_rate_set+0x18e>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077ec:	2304      	movs	r3, #4
 80077ee:	75fb      	strb	r3, [r7, #23]
        break;
 80077f0:	e011      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_26Hz)
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d102      	bne.n	80077fe <lsm6dso_gy_data_rate_set+0x19a>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 80077f8:	2304      	movs	r3, #4
 80077fa:	75fb      	strb	r3, [r7, #23]
        break;
 80077fc:	e00b      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
        else if (val == LSM6DSO_GY_ODR_52Hz)
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	2b03      	cmp	r3, #3
 8007802:	d102      	bne.n	800780a <lsm6dso_gy_data_rate_set+0x1a6>
          odr_gy = LSM6DSO_GY_ODR_104Hz;
 8007804:	2304      	movs	r3, #4
 8007806:	75fb      	strb	r3, [r7, #23]
        break;
 8007808:	e005      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>
          odr_gy = val;
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	75fb      	strb	r3, [r7, #23]
        break;
 800780e:	e002      	b.n	8007816 <lsm6dso_gy_data_rate_set+0x1b2>

      default:
        odr_gy = val;
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	75fb      	strb	r3, [r7, #23]
        break;
 8007814:	bf00      	nop
    }
  }

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007816:	f107 0208 	add.w	r2, r7, #8
 800781a:	2301      	movs	r3, #1
 800781c:	2111      	movs	r1, #17
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fcc8 	bl	80071b4 <lsm6dso_read_reg>
 8007824:	6138      	str	r0, [r7, #16]
  reg.odr_g = (uint8_t) odr_gy;
 8007826:	7dfb      	ldrb	r3, [r7, #23]
 8007828:	f003 030f 	and.w	r3, r3, #15
 800782c:	b2da      	uxtb	r2, r3
 800782e:	7a3b      	ldrb	r3, [r7, #8]
 8007830:	f362 1307 	bfi	r3, r2, #4, #4
 8007834:	723b      	strb	r3, [r7, #8]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007836:	f107 0208 	add.w	r2, r7, #8
 800783a:	2301      	movs	r3, #1
 800783c:	2111      	movs	r1, #17
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f7ff fcd0 	bl	80071e4 <lsm6dso_write_reg>
 8007844:	4602      	mov	r2, r0
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	4413      	add	r3, r2
 800784a:	613b      	str	r3, [r7, #16]

  return ret;
 800784c:	693b      	ldr	r3, [r7, #16]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop

08007858 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8007862:	f107 0208 	add.w	r2, r7, #8
 8007866:	2301      	movs	r3, #1
 8007868:	2111      	movs	r1, #17
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff fca2 	bl	80071b4 <lsm6dso_read_reg>
 8007870:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8007872:	7a3b      	ldrb	r3, [r7, #8]
 8007874:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b0a      	cmp	r3, #10
 800787c:	d844      	bhi.n	8007908 <lsm6dso_gy_data_rate_get+0xb0>
 800787e:	a201      	add	r2, pc, #4	@ (adr r2, 8007884 <lsm6dso_gy_data_rate_get+0x2c>)
 8007880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007884:	080078b1 	.word	0x080078b1
 8007888:	080078b9 	.word	0x080078b9
 800788c:	080078c1 	.word	0x080078c1
 8007890:	080078c9 	.word	0x080078c9
 8007894:	080078d1 	.word	0x080078d1
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078e1 	.word	0x080078e1
 80078a0:	080078e9 	.word	0x080078e9
 80078a4:	080078f1 	.word	0x080078f1
 80078a8:	080078f9 	.word	0x080078f9
 80078ac:	08007901 	.word	0x08007901
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
      break;
 80078b6:	e02b      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2201      	movs	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
      break;
 80078be:	e027      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	2202      	movs	r2, #2
 80078c4:	701a      	strb	r2, [r3, #0]
      break;
 80078c6:	e023      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	2203      	movs	r2, #3
 80078cc:	701a      	strb	r2, [r3, #0]
      break;
 80078ce:	e01f      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2204      	movs	r2, #4
 80078d4:	701a      	strb	r2, [r3, #0]
      break;
 80078d6:	e01b      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	2205      	movs	r2, #5
 80078dc:	701a      	strb	r2, [r3, #0]
      break;
 80078de:	e017      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	2206      	movs	r2, #6
 80078e4:	701a      	strb	r2, [r3, #0]
      break;
 80078e6:	e013      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2207      	movs	r2, #7
 80078ec:	701a      	strb	r2, [r3, #0]
      break;
 80078ee:	e00f      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	2208      	movs	r2, #8
 80078f4:	701a      	strb	r2, [r3, #0]
      break;
 80078f6:	e00b      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2209      	movs	r2, #9
 80078fc:	701a      	strb	r2, [r3, #0]
      break;
 80078fe:	e007      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	220a      	movs	r2, #10
 8007904:	701a      	strb	r2, [r3, #0]
      break;
 8007906:	e003      	b.n	8007910 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2200      	movs	r2, #0
 800790c:	701a      	strb	r2, [r3, #0]
      break;
 800790e:	bf00      	nop
  }

  return ret;
 8007910:	68fb      	ldr	r3, [r7, #12]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3710      	adds	r7, #16
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	460b      	mov	r3, r1
 8007926:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007928:	f107 0208 	add.w	r2, r7, #8
 800792c:	2301      	movs	r3, #1
 800792e:	2112      	movs	r1, #18
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff fc3f 	bl	80071b4 <lsm6dso_read_reg>
 8007936:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d10f      	bne.n	800795e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	7a3b      	ldrb	r3, [r7, #8]
 8007948:	f362 1386 	bfi	r3, r2, #6, #1
 800794c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800794e:	f107 0208 	add.w	r2, r7, #8
 8007952:	2301      	movs	r3, #1
 8007954:	2112      	movs	r1, #18
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f7ff fc44 	bl	80071e4 <lsm6dso_write_reg>
 800795c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800795e:	68fb      	ldr	r3, [r7, #12]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8007972:	f107 020c 	add.w	r2, r7, #12
 8007976:	2306      	movs	r3, #6
 8007978:	2122      	movs	r1, #34	@ 0x22
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7ff fc1a 	bl	80071b4 <lsm6dso_read_reg>
 8007980:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007982:	7b7b      	ldrb	r3, [r7, #13]
 8007984:	b21a      	sxth	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007990:	b29b      	uxth	r3, r3
 8007992:	021b      	lsls	r3, r3, #8
 8007994:	b29b      	uxth	r3, r3
 8007996:	7b3a      	ldrb	r2, [r7, #12]
 8007998:	4413      	add	r3, r2
 800799a:	b29b      	uxth	r3, r3
 800799c:	b21a      	sxth	r2, r3
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80079a2:	7bfa      	ldrb	r2, [r7, #15]
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	3302      	adds	r3, #2
 80079a8:	b212      	sxth	r2, r2
 80079aa:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	3302      	adds	r3, #2
 80079b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	021b      	lsls	r3, r3, #8
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	7bba      	ldrb	r2, [r7, #14]
 80079bc:	4413      	add	r3, r2
 80079be:	b29a      	uxth	r2, r3
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	3302      	adds	r3, #2
 80079c4:	b212      	sxth	r2, r2
 80079c6:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80079c8:	7c7a      	ldrb	r2, [r7, #17]
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	3304      	adds	r3, #4
 80079ce:	b212      	sxth	r2, r2
 80079d0:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	3304      	adds	r3, #4
 80079d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b29b      	uxth	r3, r3
 80079e0:	7c3a      	ldrb	r2, [r7, #16]
 80079e2:	4413      	add	r3, r2
 80079e4:	b29a      	uxth	r2, r3
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	3304      	adds	r3, #4
 80079ea:	b212      	sxth	r2, r2
 80079ec:	801a      	strh	r2, [r3, #0]

  return ret;
 80079ee:	697b      	ldr	r3, [r7, #20]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b086      	sub	sp, #24
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8007a02:	f107 020c 	add.w	r2, r7, #12
 8007a06:	2306      	movs	r3, #6
 8007a08:	2128      	movs	r1, #40	@ 0x28
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff fbd2 	bl	80071b4 <lsm6dso_read_reg>
 8007a10:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8007a12:	7b7b      	ldrb	r3, [r7, #13]
 8007a14:	b21a      	sxth	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	021b      	lsls	r3, r3, #8
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	7b3a      	ldrb	r2, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	b21a      	sxth	r2, r3
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8007a32:	7bfa      	ldrb	r2, [r7, #15]
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	3302      	adds	r3, #2
 8007a38:	b212      	sxth	r2, r2
 8007a3a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	3302      	adds	r3, #2
 8007a40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	021b      	lsls	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	7bba      	ldrb	r2, [r7, #14]
 8007a4c:	4413      	add	r3, r2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	3302      	adds	r3, #2
 8007a54:	b212      	sxth	r2, r2
 8007a56:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8007a58:	7c7a      	ldrb	r2, [r7, #17]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	3304      	adds	r3, #4
 8007a5e:	b212      	sxth	r2, r2
 8007a60:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	7c3a      	ldrb	r2, [r7, #16]
 8007a72:	4413      	add	r3, r2
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	3304      	adds	r3, #4
 8007a7a:	b212      	sxth	r2, r2
 8007a7c:	801a      	strh	r2, [r3, #0]

  return ret;
 8007a7e:	697b      	ldr	r3, [r7, #20]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3718      	adds	r7, #24
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <lsm6dso_mem_bank_set>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg = {0};
 8007a94:	2300      	movs	r3, #0
 8007a96:	723b      	strb	r3, [r7, #8]
  int32_t ret;

  /*  no need to read it first as the pther bits are reserved and must be zero */
  reg.reg_access = (uint8_t)val;
 8007a98:	78fb      	ldrb	r3, [r7, #3]
 8007a9a:	f003 0303 	and.w	r3, r3, #3
 8007a9e:	b2da      	uxtb	r2, r3
 8007aa0:	7a3b      	ldrb	r3, [r7, #8]
 8007aa2:	f362 1387 	bfi	r3, r2, #6, #2
 8007aa6:	723b      	strb	r3, [r7, #8]
  ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8007aa8:	f107 0208 	add.w	r2, r7, #8
 8007aac:	2301      	movs	r3, #1
 8007aae:	2101      	movs	r1, #1
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fb97 	bl	80071e4 <lsm6dso_write_reg>
 8007ab6:	60f8      	str	r0, [r7, #12]

  return ret;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}

08007ac2 <lsm6dso_device_id_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b084      	sub	sp, #16
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 8007acc:	2301      	movs	r3, #1
 8007ace:	683a      	ldr	r2, [r7, #0]
 8007ad0:	210f      	movs	r1, #15
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fb6e 	bl	80071b4 <lsm6dso_read_reg>
 8007ad8:	60f8      	str	r0, [r7, #12]

  return ret;
 8007ada:	68fb      	ldr	r3, [r7, #12]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	460b      	mov	r3, r1
 8007aee:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007af0:	f107 0208 	add.w	r2, r7, #8
 8007af4:	2301      	movs	r3, #1
 8007af6:	2112      	movs	r1, #18
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fb5b 	bl	80071b4 <lsm6dso_read_reg>
 8007afe:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d10f      	bne.n	8007b26 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8007b06:	78fb      	ldrb	r3, [r7, #3]
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	7a3b      	ldrb	r3, [r7, #8]
 8007b10:	f362 0382 	bfi	r3, r2, #2, #1
 8007b14:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8007b16:	f107 0208 	add.w	r2, r7, #8
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	2112      	movs	r1, #18
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff fb60 	bl	80071e4 <lsm6dso_write_reg>
 8007b24:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007b26:	68fb      	ldr	r3, [r7, #12]
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3710      	adds	r7, #16
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b086      	sub	sp, #24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007b3c:	f107 020c 	add.w	r2, r7, #12
 8007b40:	2301      	movs	r3, #1
 8007b42:	2118      	movs	r1, #24
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7ff fb35 	bl	80071b4 <lsm6dso_read_reg>
 8007b4a:	6178      	str	r0, [r7, #20]
  ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8007b4c:	78fb      	ldrb	r3, [r7, #3]
 8007b4e:	09db      	lsrs	r3, r3, #7
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	7b3b      	ldrb	r3, [r7, #12]
 8007b5a:	f362 0341 	bfi	r3, r2, #1, #1
 8007b5e:	733b      	strb	r3, [r7, #12]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8007b60:	f107 020c 	add.w	r2, r7, #12
 8007b64:	2301      	movs	r3, #1
 8007b66:	2118      	movs	r1, #24
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f7ff fb3b 	bl	80071e4 <lsm6dso_write_reg>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	4413      	add	r3, r2
 8007b74:	617b      	str	r3, [r7, #20]
  if (ret != 0) { return ret; }
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <lsm6dso_i3c_disable_set+0x50>
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	e01b      	b.n	8007bb8 <lsm6dso_i3c_disable_set+0x88>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007b80:	f107 0210 	add.w	r2, r7, #16
 8007b84:	2301      	movs	r3, #1
 8007b86:	2162      	movs	r1, #98	@ 0x62
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff fb13 	bl	80071b4 <lsm6dso_read_reg>
 8007b8e:	6178      	str	r0, [r7, #20]
  i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	f003 0303 	and.w	r3, r3, #3
 8007b96:	b2da      	uxtb	r2, r3
 8007b98:	7c3b      	ldrb	r3, [r7, #16]
 8007b9a:	f362 03c4 	bfi	r3, r2, #3, #2
 8007b9e:	743b      	strb	r3, [r7, #16]
  ret += lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB, (uint8_t *)&i3c_bus_avb, 1);
 8007ba0:	f107 0210 	add.w	r2, r7, #16
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	2162      	movs	r1, #98	@ 0x62
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f7ff fb1b 	bl	80071e4 <lsm6dso_write_reg>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	617b      	str	r3, [r7, #20]

  return ret;
 8007bb6:	697b      	ldr	r3, [r7, #20]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b084      	sub	sp, #16
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007bcc:	f107 0208 	add.w	r2, r7, #8
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	210a      	movs	r1, #10
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7ff faed 	bl	80071b4 <lsm6dso_read_reg>
 8007bda:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10f      	bne.n	8007c02 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	b2da      	uxtb	r2, r3
 8007bea:	7a3b      	ldrb	r3, [r7, #8]
 8007bec:	f362 0302 	bfi	r3, r2, #0, #3
 8007bf0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8007bf2:	f107 0208 	add.w	r2, r7, #8
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	210a      	movs	r1, #10
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f7ff faf2 	bl	80071e4 <lsm6dso_write_reg>
 8007c00:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8007c02:	68fb      	ldr	r3, [r7, #12]
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007c16:	2102      	movs	r1, #2
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f7ff ff35 	bl	8007a88 <lsm6dso_mem_bank_set>
 8007c1e:	60f8      	str	r0, [r7, #12]
  ret += lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8007c20:	2302      	movs	r3, #2
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	2146      	movs	r1, #70	@ 0x46
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f7ff fac4 	bl	80071b4 <lsm6dso_read_reg>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	4413      	add	r3, r2
 8007c32:	60fb      	str	r3, [r7, #12]
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007c34:	2100      	movs	r1, #0
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7ff ff26 	bl	8007a88 <lsm6dso_mem_bank_set>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4413      	add	r3, r2
 8007c42:	60fb      	str	r3, [r7, #12]

  return ret;
 8007c44:	68fb      	ldr	r3, [r7, #12]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8007c5a:	2102      	movs	r1, #2
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff ff13 	bl	8007a88 <lsm6dso_mem_bank_set>
 8007c62:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { return ret; }
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d001      	beq.n	8007c6e <lsm6dso_fsm_data_rate_get+0x1e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	e03a      	b.n	8007ce4 <lsm6dso_fsm_data_rate_get+0x94>

  ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B, (uint8_t *)&reg, 1);
 8007c6e:	f107 0208 	add.w	r2, r7, #8
 8007c72:	2301      	movs	r3, #1
 8007c74:	215f      	movs	r1, #95	@ 0x5f
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f7ff fa9c 	bl	80071b4 <lsm6dso_read_reg>
 8007c7c:	60f8      	str	r0, [r7, #12]
  if (ret != 0) { goto exit; }
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d125      	bne.n	8007cd0 <lsm6dso_fsm_data_rate_get+0x80>

  switch (reg.fsm_odr)
 8007c84:	7a3b      	ldrb	r3, [r7, #8]
 8007c86:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	d81b      	bhi.n	8007cc8 <lsm6dso_fsm_data_rate_get+0x78>
 8007c90:	a201      	add	r2, pc, #4	@ (adr r2, 8007c98 <lsm6dso_fsm_data_rate_get+0x48>)
 8007c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c96:	bf00      	nop
 8007c98:	08007ca9 	.word	0x08007ca9
 8007c9c:	08007cb1 	.word	0x08007cb1
 8007ca0:	08007cb9 	.word	0x08007cb9
 8007ca4:	08007cc1 	.word	0x08007cc1
  {
    case LSM6DSO_ODR_FSM_12Hz5:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
      break;
 8007cae:	e010      	b.n	8007cd2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_26Hz:
      *val = LSM6DSO_ODR_FSM_26Hz;
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	701a      	strb	r2, [r3, #0]
      break;
 8007cb6:	e00c      	b.n	8007cd2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_52Hz:
      *val = LSM6DSO_ODR_FSM_52Hz;
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	701a      	strb	r2, [r3, #0]
      break;
 8007cbe:	e008      	b.n	8007cd2 <lsm6dso_fsm_data_rate_get+0x82>

    case LSM6DSO_ODR_FSM_104Hz:
      *val = LSM6DSO_ODR_FSM_104Hz;
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	2203      	movs	r2, #3
 8007cc4:	701a      	strb	r2, [r3, #0]
      break;
 8007cc6:	e004      	b.n	8007cd2 <lsm6dso_fsm_data_rate_get+0x82>

    default:
      *val = LSM6DSO_ODR_FSM_12Hz5;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	701a      	strb	r2, [r3, #0]
      break;
 8007cce:	e000      	b.n	8007cd2 <lsm6dso_fsm_data_rate_get+0x82>
  if (ret != 0) { goto exit; }
 8007cd0:	bf00      	nop
  }

exit:
  ret += lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fed7 	bl	8007a88 <lsm6dso_mem_bank_set>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	4413      	add	r3, r2
 8007ce0:	60fb      	str	r3, [r7, #12]

  return ret;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <IKS01A3_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO for instance 1
  *         - MOTION_MAGNETO for instance 2
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b08e      	sub	sp, #56	@ 0x38
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t function = MOTION_GYRO;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	62bb      	str	r3, [r7, #40]	@ 0x28
  IKS01A3_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d06e      	beq.n	8007de6 <IKS01A3_MOTION_SENSOR_Init+0xfa>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	f200 809d 	bhi.w	8007e4a <IKS01A3_MOTION_SENSOR_Init+0x15e>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d003      	beq.n	8007d1e <IKS01A3_MOTION_SENSOR_Init+0x32>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d032      	beq.n	8007d82 <IKS01A3_MOTION_SENSOR_Init+0x96>
 8007d1c:	e095      	b.n	8007e4a <IKS01A3_MOTION_SENSOR_Init+0x15e>
  {
#if (USE_IKS01A3_MOTION_SENSOR_LSM6DSO_0 == 1)
    case IKS01A3_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8007d1e:	6838      	ldr	r0, [r7, #0]
 8007d20:	f000 f9ae 	bl	8008080 <LSM6DSO_0_Probe>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d002      	beq.n	8007d30 <IKS01A3_MOTION_SENSOR_Init+0x44>
      {
        return BSP_ERROR_NO_INIT;
 8007d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2e:	e0cc      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007d30:	4a68      	ldr	r2, [pc, #416]	@ (8007ed4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	4967      	ldr	r1, [pc, #412]	@ (8007ed8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d42:	f107 010c 	add.w	r1, r7, #12
 8007d46:	4610      	mov	r0, r2
 8007d48:	4798      	blx	r3
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d002      	beq.n	8007d56 <IKS01A3_MOTION_SENSOR_Init+0x6a>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007d50:	f06f 0306 	mvn.w	r3, #6
 8007d54:	e0b9      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007d56:	7b3b      	ldrb	r3, [r7, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d103      	bne.n	8007d64 <IKS01A3_MOTION_SENSOR_Init+0x78>
      {
        component_functions |= MOTION_ACCELERO;
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	f043 0302 	orr.w	r3, r3, #2
 8007d62:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007d64:	7b7b      	ldrb	r3, [r7, #13]
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d103      	bne.n	8007d72 <IKS01A3_MOTION_SENSOR_Init+0x86>
      {
        component_functions |= MOTION_GYRO;
 8007d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6c:	f043 0301 	orr.w	r3, r3, #1
 8007d70:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d16c      	bne.n	8007e52 <IKS01A3_MOTION_SENSOR_Init+0x166>
      {
        component_functions |= MOTION_MAGNETO;
 8007d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7a:	f043 0304 	orr.w	r3, r3, #4
 8007d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007d80:	e067      	b.n	8007e52 <IKS01A3_MOTION_SENSOR_Init+0x166>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2DW12_0 == 1)
    case IKS01A3_LIS2DW12_0:
      if (LIS2DW12_0_Probe(Functions) != BSP_ERROR_NONE)
 8007d82:	6838      	ldr	r0, [r7, #0]
 8007d84:	f000 fa3c 	bl	8008200 <LIS2DW12_0_Probe>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d002      	beq.n	8007d94 <IKS01A3_MOTION_SENSOR_Init+0xa8>
      {
        return BSP_ERROR_NO_INIT;
 8007d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d92:	e09a      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007d94:	4a4f      	ldr	r2, [pc, #316]	@ (8007ed4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	494e      	ldr	r1, [pc, #312]	@ (8007ed8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007da6:	f107 010c 	add.w	r1, r7, #12
 8007daa:	4610      	mov	r0, r2
 8007dac:	4798      	blx	r3
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <IKS01A3_MOTION_SENSOR_Init+0xce>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007db4:	f06f 0306 	mvn.w	r3, #6
 8007db8:	e087      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007dba:	7b3b      	ldrb	r3, [r7, #12]
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d103      	bne.n	8007dc8 <IKS01A3_MOTION_SENSOR_Init+0xdc>
      {
        component_functions |= MOTION_ACCELERO;
 8007dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc2:	f043 0302 	orr.w	r3, r3, #2
 8007dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007dc8:	7b7b      	ldrb	r3, [r7, #13]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d103      	bne.n	8007dd6 <IKS01A3_MOTION_SENSOR_Init+0xea>
      {
        component_functions |= MOTION_GYRO;
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007dd6:	7bbb      	ldrb	r3, [r7, #14]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d13c      	bne.n	8007e56 <IKS01A3_MOTION_SENSOR_Init+0x16a>
      {
        component_functions |= MOTION_MAGNETO;
 8007ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dde:	f043 0304 	orr.w	r3, r3, #4
 8007de2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007de4:	e037      	b.n	8007e56 <IKS01A3_MOTION_SENSOR_Init+0x16a>
#endif

#if (USE_IKS01A3_MOTION_SENSOR_LIS2MDL_0 == 1)
    case IKS01A3_LIS2MDL_0:
      if (LIS2MDL_0_Probe(Functions) != BSP_ERROR_NONE)
 8007de6:	6838      	ldr	r0, [r7, #0]
 8007de8:	f000 fab2 	bl	8008350 <LIS2MDL_0_Probe>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <IKS01A3_MOTION_SENSOR_Init+0x10c>
      {
        return BSP_ERROR_NO_INIT;
 8007df2:	f04f 33ff 	mov.w	r3, #4294967295
 8007df6:	e068      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007df8:	4a36      	ldr	r2, [pc, #216]	@ (8007ed4 <IKS01A3_MOTION_SENSOR_Init+0x1e8>)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e00:	68db      	ldr	r3, [r3, #12]
 8007e02:	4935      	ldr	r1, [pc, #212]	@ (8007ed8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007e0a:	f107 010c 	add.w	r1, r7, #12
 8007e0e:	4610      	mov	r0, r2
 8007e10:	4798      	blx	r3
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d002      	beq.n	8007e1e <IKS01A3_MOTION_SENSOR_Init+0x132>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007e18:	f06f 0306 	mvn.w	r3, #6
 8007e1c:	e055      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
      if (cap.Acc == 1U)
 8007e1e:	7b3b      	ldrb	r3, [r7, #12]
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d103      	bne.n	8007e2c <IKS01A3_MOTION_SENSOR_Init+0x140>
      {
        component_functions |= MOTION_ACCELERO;
 8007e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e26:	f043 0302 	orr.w	r3, r3, #2
 8007e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Gyro == 1U)
 8007e2c:	7b7b      	ldrb	r3, [r7, #13]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d103      	bne.n	8007e3a <IKS01A3_MOTION_SENSOR_Init+0x14e>
      {
        component_functions |= MOTION_GYRO;
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	f043 0301 	orr.w	r3, r3, #1
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      if (cap.Magneto == 1U)
 8007e3a:	7bbb      	ldrb	r3, [r7, #14]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d10c      	bne.n	8007e5a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      {
        component_functions |= MOTION_MAGNETO;
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	f043 0304 	orr.w	r3, r3, #4
 8007e46:	62bb      	str	r3, [r7, #40]	@ 0x28
      }
      break;
 8007e48:	e007      	b.n	8007e5a <IKS01A3_MOTION_SENSOR_Init+0x16e>
      }
      break;
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007e4a:	f06f 0301 	mvn.w	r3, #1
 8007e4e:	637b      	str	r3, [r7, #52]	@ 0x34
      break;
 8007e50:	e004      	b.n	8007e5c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007e52:	bf00      	nop
 8007e54:	e002      	b.n	8007e5c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007e56:	bf00      	nop
 8007e58:	e000      	b.n	8007e5c <IKS01A3_MOTION_SENSOR_Init+0x170>
      break;
 8007e5a:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <IKS01A3_MOTION_SENSOR_Init+0x17a>
  {
    return ret;
 8007e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e64:	e031      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
  }

  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e6a:	e02a      	b.n	8007ec2 <IKS01A3_MOTION_SENSOR_Init+0x1d6>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e70:	4013      	ands	r3, r2
 8007e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d11e      	bne.n	8007eb6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
 8007e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	4013      	ands	r3, r2
 8007e7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d118      	bne.n	8007eb6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8007e84:	4a15      	ldr	r2, [pc, #84]	@ (8007edc <IKS01A3_MOTION_SENSOR_Init+0x1f0>)
 8007e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e88:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007e8c:	4814      	ldr	r0, [pc, #80]	@ (8007ee0 <IKS01A3_MOTION_SENSOR_Init+0x1f4>)
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	4613      	mov	r3, r2
 8007e92:	005b      	lsls	r3, r3, #1
 8007e94:	4413      	add	r3, r2
 8007e96:	440b      	add	r3, r1
 8007e98:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	490e      	ldr	r1, [pc, #56]	@ (8007ed8 <IKS01A3_MOTION_SENSOR_Init+0x1ec>)
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007ea6:	4610      	mov	r0, r2
 8007ea8:	4798      	blx	r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d002      	beq.n	8007eb6 <IKS01A3_MOTION_SENSOR_Init+0x1ca>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007eb0:	f06f 0304 	mvn.w	r3, #4
 8007eb4:	e009      	b.n	8007eca <IKS01A3_MOTION_SENSOR_Init+0x1de>
      }
    }
    function = function << 1;
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	633b      	str	r3, [r7, #48]	@ 0x30
  for (i = 0; i < IKS01A3_MOTION_FUNCTIONS_NBR; i++)
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ec4:	2b02      	cmp	r3, #2
 8007ec6:	d9d1      	bls.n	8007e6c <IKS01A3_MOTION_SENSOR_Init+0x180>
  }

  return ret;
 8007ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3738      	adds	r7, #56	@ 0x38
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	200007f0 	.word	0x200007f0
 8007ed8:	200007c0 	.word	0x200007c0
 8007edc:	200000cc 	.word	0x200000cc
 8007ee0:	200007cc 	.word	0x200007cc

08007ee4 <IKS01A3_MOTION_SENSOR_GetAxes>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Axes pointer to axes data structure
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, IKS01A3_MOTION_SENSOR_Axes_t *Axes)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b02      	cmp	r3, #2
 8007ef4:	d903      	bls.n	8007efe <IKS01A3_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007ef6:	f06f 0301 	mvn.w	r3, #1
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e029      	b.n	8007f52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007efe:	4a17      	ldr	r2, [pc, #92]	@ (8007f5c <IKS01A3_MOTION_SENSOR_GetAxes+0x78>)
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	68ba      	ldr	r2, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d11d      	bne.n	8007f4c <IKS01A3_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8007f10:	4a13      	ldr	r2, [pc, #76]	@ (8007f60 <IKS01A3_MOTION_SENSOR_GetAxes+0x7c>)
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007f18:	4812      	ldr	r0, [pc, #72]	@ (8007f64 <IKS01A3_MOTION_SENSOR_GetAxes+0x80>)
 8007f1a:	68fa      	ldr	r2, [r7, #12]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	005b      	lsls	r3, r3, #1
 8007f20:	4413      	add	r3, r2
 8007f22:	440b      	add	r3, r1
 8007f24:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007f28:	69db      	ldr	r3, [r3, #28]
 8007f2a:	490f      	ldr	r1, [pc, #60]	@ (8007f68 <IKS01A3_MOTION_SENSOR_GetAxes+0x84>)
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <IKS01A3_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f3e:	f06f 0304 	mvn.w	r3, #4
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e005      	b.n	8007f52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e002      	b.n	8007f52 <IKS01A3_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007f4c:	f06f 0301 	mvn.w	r3, #1
 8007f50:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007f52:	697b      	ldr	r3, [r7, #20]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3718      	adds	r7, #24
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}
 8007f5c:	200007fc 	.word	0x200007fc
 8007f60:	200000cc 	.word	0x200000cc
 8007f64:	200007cc 	.word	0x200007cc
 8007f68:	200007c0 	.word	0x200007c0

08007f6c <IKS01A3_MOTION_SENSOR_SetOutputDataRate>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float Odr)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b086      	sub	sp, #24
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	60f8      	str	r0, [r7, #12]
 8007f74:	60b9      	str	r1, [r7, #8]
 8007f76:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d903      	bls.n	8007f88 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007f80:	f06f 0301 	mvn.w	r3, #1
 8007f84:	617b      	str	r3, [r7, #20]
 8007f86:	e02a      	b.n	8007fde <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8007f88:	4a17      	ldr	r2, [pc, #92]	@ (8007fe8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x7c>)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	4013      	ands	r3, r2
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d11e      	bne.n	8007fd8 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x6c>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(MotionCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007f9a:	4a14      	ldr	r2, [pc, #80]	@ (8007fec <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x80>)
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007fa2:	4813      	ldr	r0, [pc, #76]	@ (8007ff0 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x84>)
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	005b      	lsls	r3, r3, #1
 8007faa:	4413      	add	r3, r2
 8007fac:	440b      	add	r3, r1
 8007fae:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	490f      	ldr	r1, [pc, #60]	@ (8007ff4 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x88>)
 8007fb6:	68fa      	ldr	r2, [r7, #12]
 8007fb8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007fbc:	ed97 0a01 	vldr	s0, [r7, #4]
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4798      	blx	r3
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d003      	beq.n	8007fd2 <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x66>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fca:	f06f 0304 	mvn.w	r3, #4
 8007fce:	617b      	str	r3, [r7, #20]
 8007fd0:	e005      	b.n	8007fde <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	617b      	str	r3, [r7, #20]
 8007fd6:	e002      	b.n	8007fde <IKS01A3_MOTION_SENSOR_SetOutputDataRate+0x72>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007fd8:	f06f 0301 	mvn.w	r3, #1
 8007fdc:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007fde:	697b      	ldr	r3, [r7, #20]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	200007fc 	.word	0x200007fc
 8007fec:	200000cc 	.word	0x200000cc
 8007ff0:	200007cc 	.word	0x200007cc
 8007ff4:	200007c0 	.word	0x200007c0

08007ff8 <IKS01A3_MOTION_SENSOR_SetFullScale>:
  *         - MOTION_MAGNETO for instance 2
  * @param  Fullscale Fullscale value to be set
  * @retval BSP status
  */
int32_t IKS01A3_MOTION_SENSOR_SetFullScale(uint32_t Instance, uint32_t Function, int32_t Fullscale)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	60b9      	str	r1, [r7, #8]
 8008002:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= IKS01A3_MOTION_INSTANCES_NBR)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d903      	bls.n	8008012 <IKS01A3_MOTION_SENSOR_SetFullScale+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800800a:	f06f 0301 	mvn.w	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	e029      	b.n	8008066 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8008012:	4a17      	ldr	r2, [pc, #92]	@ (8008070 <IKS01A3_MOTION_SENSOR_SetFullScale+0x78>)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	4013      	ands	r3, r2
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d11d      	bne.n	8008060 <IKS01A3_MOTION_SENSOR_SetFullScale+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->SetFullScale(MotionCompObj[Instance],
 8008024:	4a13      	ldr	r2, [pc, #76]	@ (8008074 <IKS01A3_MOTION_SENSOR_SetFullScale+0x7c>)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800802c:	4812      	ldr	r0, [pc, #72]	@ (8008078 <IKS01A3_MOTION_SENSOR_SetFullScale+0x80>)
 800802e:	68fa      	ldr	r2, [r7, #12]
 8008030:	4613      	mov	r3, r2
 8008032:	005b      	lsls	r3, r3, #1
 8008034:	4413      	add	r3, r2
 8008036:	440b      	add	r3, r1
 8008038:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	490f      	ldr	r1, [pc, #60]	@ (800807c <IKS01A3_MOTION_SENSOR_SetFullScale+0x84>)
 8008040:	68fa      	ldr	r2, [r7, #12]
 8008042:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008046:	6879      	ldr	r1, [r7, #4]
 8008048:	4610      	mov	r0, r2
 800804a:	4798      	blx	r3
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d003      	beq.n	800805a <IKS01A3_MOTION_SENSOR_SetFullScale+0x62>
                                                                         Fullscale) != BSP_ERROR_NONE)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008052:	f06f 0304 	mvn.w	r3, #4
 8008056:	617b      	str	r3, [r7, #20]
 8008058:	e005      	b.n	8008066 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800805a:	2300      	movs	r3, #0
 800805c:	617b      	str	r3, [r7, #20]
 800805e:	e002      	b.n	8008066 <IKS01A3_MOTION_SENSOR_SetFullScale+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8008060:	f06f 0301 	mvn.w	r3, #1
 8008064:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008066:	697b      	ldr	r3, [r7, #20]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3718      	adds	r7, #24
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	200007fc 	.word	0x200007fc
 8008074:	200000cc 	.word	0x200000cc
 8008078:	200007cc 	.word	0x200007cc
 800807c:	200007c0 	.word	0x200007c0

08008080 <LSM6DSO_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 0 if component ID is OK
  * @retval BSP status
  */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b094      	sub	sp, #80	@ 0x50
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008088:	2300      	movs	r3, #0
 800808a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 800808c:	2300      	movs	r3, #0
 800808e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LSM6DSO_I2C_ADD_H;
 8008090:	23d7      	movs	r3, #215	@ 0xd7
 8008092:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008096:	4b4b      	ldr	r3, [pc, #300]	@ (80081c4 <LSM6DSO_0_Probe+0x144>)
 8008098:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800809a:	4b4b      	ldr	r3, [pc, #300]	@ (80081c8 <LSM6DSO_0_Probe+0x148>)
 800809c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800809e:	4b4b      	ldr	r3, [pc, #300]	@ (80081cc <LSM6DSO_0_Probe+0x14c>)
 80080a0:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 80080a2:	4b4b      	ldr	r3, [pc, #300]	@ (80081d0 <LSM6DSO_0_Probe+0x150>)
 80080a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 80080a6:	4b4b      	ldr	r3, [pc, #300]	@ (80081d4 <LSM6DSO_0_Probe+0x154>)
 80080a8:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 80080aa:	4b4b      	ldr	r3, [pc, #300]	@ (80081d8 <LSM6DSO_0_Probe+0x158>)
 80080ac:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 80080ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80080b2:	4619      	mov	r1, r3
 80080b4:	4849      	ldr	r0, [pc, #292]	@ (80081dc <LSM6DSO_0_Probe+0x15c>)
 80080b6:	f7fd fe3f 	bl	8005d38 <LSM6DSO_RegisterBusIO>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <LSM6DSO_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080c0:	f06f 0306 	mvn.w	r3, #6
 80080c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080c6:	e077      	b.n	80081b8 <LSM6DSO_0_Probe+0x138>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 80080c8:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80080cc:	4619      	mov	r1, r3
 80080ce:	4843      	ldr	r0, [pc, #268]	@ (80081dc <LSM6DSO_0_Probe+0x15c>)
 80080d0:	f7fd ff3c 	bl	8005f4c <LSM6DSO_ReadID>
 80080d4:	4603      	mov	r3, r0
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <LSM6DSO_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080da:	f06f 0306 	mvn.w	r3, #6
 80080de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080e0:	e06a      	b.n	80081b8 <LSM6DSO_0_Probe+0x138>
  }
  else if (id != LSM6DSO_ID)
 80080e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80080e6:	2b6c      	cmp	r3, #108	@ 0x6c
 80080e8:	d003      	beq.n	80080f2 <LSM6DSO_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80080ea:	f06f 0306 	mvn.w	r3, #6
 80080ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80080f0:	e062      	b.n	80081b8 <LSM6DSO_0_Probe+0x138>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 80080f2:	f107 030c 	add.w	r3, r7, #12
 80080f6:	4619      	mov	r1, r3
 80080f8:	4838      	ldr	r0, [pc, #224]	@ (80081dc <LSM6DSO_0_Probe+0x15c>)
 80080fa:	f7fd ff3d 	bl	8005f78 <LSM6DSO_GetCapabilities>
    MotionCtx[IKS01A3_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80080fe:	7b7b      	ldrb	r3, [r7, #13]
 8008100:	461a      	mov	r2, r3
 8008102:	7b3b      	ldrb	r3, [r7, #12]
 8008104:	005b      	lsls	r3, r3, #1
 8008106:	431a      	orrs	r2, r3
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4313      	orrs	r3, r2
 800810e:	4a34      	ldr	r2, [pc, #208]	@ (80081e0 <LSM6DSO_0_Probe+0x160>)
 8008110:	6013      	str	r3, [r2, #0]

    MotionCompObj[IKS01A3_LSM6DSO_0] = &lsm6dso_obj_0;
 8008112:	4b34      	ldr	r3, [pc, #208]	@ (80081e4 <LSM6DSO_0_Probe+0x164>)
 8008114:	4a31      	ldr	r2, [pc, #196]	@ (80081dc <LSM6DSO_0_Probe+0x15c>)
 8008116:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8008118:	4b33      	ldr	r3, [pc, #204]	@ (80081e8 <LSM6DSO_0_Probe+0x168>)
 800811a:	4a34      	ldr	r2, [pc, #208]	@ (80081ec <LSM6DSO_0_Probe+0x16c>)
 800811c:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 800811e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008120:	2b00      	cmp	r3, #0
 8008122:	d11d      	bne.n	8008160 <LSM6DSO_0_Probe+0xe0>
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d018      	beq.n	8008160 <LSM6DSO_0_Probe+0xe0>
 800812e:	7b7b      	ldrb	r3, [r7, #13]
 8008130:	2b01      	cmp	r3, #1
 8008132:	d115      	bne.n	8008160 <LSM6DSO_0_Probe+0xe0>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8008134:	4b2e      	ldr	r3, [pc, #184]	@ (80081f0 <LSM6DSO_0_Probe+0x170>)
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	4a2e      	ldr	r2, [pc, #184]	@ (80081f4 <LSM6DSO_0_Probe+0x174>)
 800813a:	492f      	ldr	r1, [pc, #188]	@ (80081f8 <LSM6DSO_0_Probe+0x178>)
 800813c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008140:	4b29      	ldr	r3, [pc, #164]	@ (80081e8 <LSM6DSO_0_Probe+0x168>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a27      	ldr	r2, [pc, #156]	@ (80081e4 <LSM6DSO_0_Probe+0x164>)
 8008148:	6812      	ldr	r2, [r2, #0]
 800814a:	4610      	mov	r0, r2
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <LSM6DSO_0_Probe+0xdc>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008154:	f06f 0304 	mvn.w	r3, #4
 8008158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800815a:	e001      	b.n	8008160 <LSM6DSO_0_Probe+0xe0>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800815c:	2300      	movs	r3, #0
 800815e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8008160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008162:	2b00      	cmp	r3, #0
 8008164:	d11d      	bne.n	80081a2 <LSM6DSO_0_Probe+0x122>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f003 0302 	and.w	r3, r3, #2
 800816c:	2b00      	cmp	r3, #0
 800816e:	d018      	beq.n	80081a2 <LSM6DSO_0_Probe+0x122>
 8008170:	7b3b      	ldrb	r3, [r7, #12]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d115      	bne.n	80081a2 <LSM6DSO_0_Probe+0x122>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008176:	4b1e      	ldr	r3, [pc, #120]	@ (80081f0 <LSM6DSO_0_Probe+0x170>)
 8008178:	689b      	ldr	r3, [r3, #8]
 800817a:	4a1e      	ldr	r2, [pc, #120]	@ (80081f4 <LSM6DSO_0_Probe+0x174>)
 800817c:	491f      	ldr	r1, [pc, #124]	@ (80081fc <LSM6DSO_0_Probe+0x17c>)
 800817e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                           void *)&LSM6DSO_ACC_Driver;

      if (MotionDrv[IKS01A3_LSM6DSO_0]->Init(MotionCompObj[IKS01A3_LSM6DSO_0]) != LSM6DSO_OK)
 8008182:	4b19      	ldr	r3, [pc, #100]	@ (80081e8 <LSM6DSO_0_Probe+0x168>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a16      	ldr	r2, [pc, #88]	@ (80081e4 <LSM6DSO_0_Probe+0x164>)
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	4610      	mov	r0, r2
 800818e:	4798      	blx	r3
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <LSM6DSO_0_Probe+0x11e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008196:	f06f 0304 	mvn.w	r3, #4
 800819a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800819c:	e001      	b.n	80081a2 <LSM6DSO_0_Probe+0x122>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800819e:	2300      	movs	r3, #0
 80081a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80081a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d107      	bne.n	80081b8 <LSM6DSO_0_Probe+0x138>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f003 0304 	and.w	r3, r3, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d002      	beq.n	80081b8 <LSM6DSO_0_Probe+0x138>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80081b2:	f06f 0304 	mvn.w	r3, #4
 80081b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 80081b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3750      	adds	r7, #80	@ 0x50
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	08003315 	.word	0x08003315
 80081c8:	08003391 	.word	0x08003391
 80081cc:	08003445 	.word	0x08003445
 80081d0:	080033e1 	.word	0x080033e1
 80081d4:	080034a9 	.word	0x080034a9
 80081d8:	08001bcd 	.word	0x08001bcd
 80081dc:	20000808 	.word	0x20000808
 80081e0:	200007fc 	.word	0x200007fc
 80081e4:	200007c0 	.word	0x200007c0
 80081e8:	200007f0 	.word	0x200007f0
 80081ec:	20000074 	.word	0x20000074
 80081f0:	200000cc 	.word	0x200000cc
 80081f4:	200007cc 	.word	0x200007cc
 80081f8:	200000a8 	.word	0x200000a8
 80081fc:	20000084 	.word	0x20000084

08008200 <LIS2DW12_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2DW12_0_Probe(uint32_t Functions)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b094      	sub	sp, #80	@ 0x50
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  LIS2DW12_IO_t            io_ctx;
  uint8_t                  id;
  static LIS2DW12_Object_t lis2dw12_obj_0;
  LIS2DW12_Capabilities_t  cap;
  int32_t ret = BSP_ERROR_NONE;
 8008208:	2300      	movs	r3, #0
 800820a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2DW12_I2C_BUS; /* I2C */
 800820c:	2300      	movs	r3, #0
 800820e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2DW12_I2C_ADD_H;
 8008210:	2333      	movs	r3, #51	@ 0x33
 8008212:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008216:	4b40      	ldr	r3, [pc, #256]	@ (8008318 <LIS2DW12_0_Probe+0x118>)
 8008218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800821a:	4b40      	ldr	r3, [pc, #256]	@ (800831c <LIS2DW12_0_Probe+0x11c>)
 800821c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800821e:	4b40      	ldr	r3, [pc, #256]	@ (8008320 <LIS2DW12_0_Probe+0x120>)
 8008220:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008222:	4b40      	ldr	r3, [pc, #256]	@ (8008324 <LIS2DW12_0_Probe+0x124>)
 8008224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008226:	4b40      	ldr	r3, [pc, #256]	@ (8008328 <LIS2DW12_0_Probe+0x128>)
 8008228:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800822a:	4b40      	ldr	r3, [pc, #256]	@ (800832c <LIS2DW12_0_Probe+0x12c>)
 800822c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2DW12_RegisterBusIO(&lis2dw12_obj_0, &io_ctx) != LIS2DW12_OK)
 800822e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008232:	4619      	mov	r1, r3
 8008234:	483e      	ldr	r0, [pc, #248]	@ (8008330 <LIS2DW12_0_Probe+0x130>)
 8008236:	f7fb faf3 	bl	8003820 <LIS2DW12_RegisterBusIO>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <LIS2DW12_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008240:	f06f 0306 	mvn.w	r3, #6
 8008244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008246:	e062      	b.n	800830e <LIS2DW12_0_Probe+0x10e>
  }
  else if (LIS2DW12_ReadID(&lis2dw12_obj_0, &id) != LIS2DW12_OK)
 8008248:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800824c:	4619      	mov	r1, r3
 800824e:	4838      	ldr	r0, [pc, #224]	@ (8008330 <LIS2DW12_0_Probe+0x130>)
 8008250:	f7fb fbd4 	bl	80039fc <LIS2DW12_ReadID>
 8008254:	4603      	mov	r3, r0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d003      	beq.n	8008262 <LIS2DW12_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800825a:	f06f 0306 	mvn.w	r3, #6
 800825e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008260:	e055      	b.n	800830e <LIS2DW12_0_Probe+0x10e>
  }
  else if (id != LIS2DW12_ID)
 8008262:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008266:	2b44      	cmp	r3, #68	@ 0x44
 8008268:	d003      	beq.n	8008272 <LIS2DW12_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800826a:	f06f 0306 	mvn.w	r3, #6
 800826e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008270:	e04d      	b.n	800830e <LIS2DW12_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2DW12_GetCapabilities(&lis2dw12_obj_0, &cap);
 8008272:	f107 030c 	add.w	r3, r7, #12
 8008276:	4619      	mov	r1, r3
 8008278:	482d      	ldr	r0, [pc, #180]	@ (8008330 <LIS2DW12_0_Probe+0x130>)
 800827a:	f7fb fbd5 	bl	8003a28 <LIS2DW12_GetCapabilities>
    MotionCtx[IKS01A3_LIS2DW12_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 800827e:	7b7b      	ldrb	r3, [r7, #13]
 8008280:	461a      	mov	r2, r3
 8008282:	7b3b      	ldrb	r3, [r7, #12]
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	431a      	orrs	r2, r3
 8008288:	7bbb      	ldrb	r3, [r7, #14]
 800828a:	009b      	lsls	r3, r3, #2
 800828c:	4313      	orrs	r3, r2
 800828e:	4a29      	ldr	r2, [pc, #164]	@ (8008334 <LIS2DW12_0_Probe+0x134>)
 8008290:	6053      	str	r3, [r2, #4]

    MotionCompObj[IKS01A3_LIS2DW12_0] = &lis2dw12_obj_0;
 8008292:	4b29      	ldr	r3, [pc, #164]	@ (8008338 <LIS2DW12_0_Probe+0x138>)
 8008294:	4a26      	ldr	r2, [pc, #152]	@ (8008330 <LIS2DW12_0_Probe+0x130>)
 8008296:	605a      	str	r2, [r3, #4]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2DW12_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2DW12_COMMON_Driver;
 8008298:	4b28      	ldr	r3, [pc, #160]	@ (800833c <LIS2DW12_0_Probe+0x13c>)
 800829a:	4a29      	ldr	r2, [pc, #164]	@ (8008340 <LIS2DW12_0_Probe+0x140>)
 800829c:	605a      	str	r2, [r3, #4]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 800829e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d11e      	bne.n	80082e2 <LIS2DW12_0_Probe+0xe2>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d019      	beq.n	80082e2 <LIS2DW12_0_Probe+0xe2>
 80082ae:	7b3b      	ldrb	r3, [r7, #12]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d116      	bne.n	80082e2 <LIS2DW12_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2DW12_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(
 80082b4:	4b23      	ldr	r3, [pc, #140]	@ (8008344 <LIS2DW12_0_Probe+0x144>)
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	4a23      	ldr	r2, [pc, #140]	@ (8008348 <LIS2DW12_0_Probe+0x148>)
 80082ba:	3303      	adds	r3, #3
 80082bc:	4923      	ldr	r1, [pc, #140]	@ (800834c <LIS2DW12_0_Probe+0x14c>)
 80082be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                            void *)&LIS2DW12_ACC_Driver;

      if (MotionDrv[IKS01A3_LIS2DW12_0]->Init(MotionCompObj[IKS01A3_LIS2DW12_0]) != LIS2DW12_OK)
 80082c2:	4b1e      	ldr	r3, [pc, #120]	@ (800833c <LIS2DW12_0_Probe+0x13c>)
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a1b      	ldr	r2, [pc, #108]	@ (8008338 <LIS2DW12_0_Probe+0x138>)
 80082ca:	6852      	ldr	r2, [r2, #4]
 80082cc:	4610      	mov	r0, r2
 80082ce:	4798      	blx	r3
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <LIS2DW12_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80082d6:	f06f 0304 	mvn.w	r3, #4
 80082da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082dc:	e001      	b.n	80082e2 <LIS2DW12_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80082de:	2300      	movs	r3, #0
 80082e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 80082e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d107      	bne.n	80082f8 <LIS2DW12_0_Probe+0xf8>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d002      	beq.n	80082f8 <LIS2DW12_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80082f2:	f06f 0304 	mvn.w	r3, #4
 80082f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 80082f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d107      	bne.n	800830e <LIS2DW12_0_Probe+0x10e>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f003 0304 	and.w	r3, r3, #4
 8008304:	2b00      	cmp	r3, #0
 8008306:	d002      	beq.n	800830e <LIS2DW12_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008308:	f06f 0304 	mvn.w	r3, #4
 800830c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800830e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008310:	4618      	mov	r0, r3
 8008312:	3750      	adds	r7, #80	@ 0x50
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	08003315 	.word	0x08003315
 800831c:	08003391 	.word	0x08003391
 8008320:	08003445 	.word	0x08003445
 8008324:	080033e1 	.word	0x080033e1
 8008328:	080034a9 	.word	0x080034a9
 800832c:	08001bcd 	.word	0x08001bcd
 8008330:	20000840 	.word	0x20000840
 8008334:	200007fc 	.word	0x200007fc
 8008338:	200007c0 	.word	0x200007c0
 800833c:	200007f0 	.word	0x200007f0
 8008340:	2000000c 	.word	0x2000000c
 8008344:	200000cc 	.word	0x200000cc
 8008348:	200007cc 	.word	0x200007cc
 800834c:	2000001c 	.word	0x2000001c

08008350 <LIS2MDL_0_Probe>:
/**
  * @brief  Register Bus IOs for instance 1 if component ID is OK
  * @retval BSP status
  */
static int32_t LIS2MDL_0_Probe(uint32_t Functions)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b094      	sub	sp, #80	@ 0x50
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  LIS2MDL_IO_t            io_ctx;
  uint8_t                 id;
  static LIS2MDL_Object_t lis2mdl_obj_0;
  LIS2MDL_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8008358:	2300      	movs	r3, #0
 800835a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* Configure the accelero driver */
  io_ctx.BusType     = LIS2MDL_I2C_BUS; /* I2C */
 800835c:	2300      	movs	r3, #0
 800835e:	637b      	str	r3, [r7, #52]	@ 0x34
  io_ctx.Address     = LIS2MDL_I2C_ADD;
 8008360:	233d      	movs	r3, #61	@ 0x3d
 8008362:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  io_ctx.Init        = IKS01A3_I2C_Init;
 8008366:	4b40      	ldr	r3, [pc, #256]	@ (8008468 <LIS2MDL_0_Probe+0x118>)
 8008368:	62fb      	str	r3, [r7, #44]	@ 0x2c
  io_ctx.DeInit      = IKS01A3_I2C_DeInit;
 800836a:	4b40      	ldr	r3, [pc, #256]	@ (800846c <LIS2MDL_0_Probe+0x11c>)
 800836c:	633b      	str	r3, [r7, #48]	@ 0x30
  io_ctx.ReadReg     = IKS01A3_I2C_ReadReg;
 800836e:	4b40      	ldr	r3, [pc, #256]	@ (8008470 <LIS2MDL_0_Probe+0x120>)
 8008370:	643b      	str	r3, [r7, #64]	@ 0x40
  io_ctx.WriteReg    = IKS01A3_I2C_WriteReg;
 8008372:	4b40      	ldr	r3, [pc, #256]	@ (8008474 <LIS2MDL_0_Probe+0x124>)
 8008374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  io_ctx.GetTick     = IKS01A3_GetTick;
 8008376:	4b40      	ldr	r3, [pc, #256]	@ (8008478 <LIS2MDL_0_Probe+0x128>)
 8008378:	647b      	str	r3, [r7, #68]	@ 0x44
  io_ctx.Delay       = IKS01A3_Delay;
 800837a:	4b40      	ldr	r3, [pc, #256]	@ (800847c <LIS2MDL_0_Probe+0x12c>)
 800837c:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (LIS2MDL_RegisterBusIO(&lis2mdl_obj_0, &io_ctx) != LIS2MDL_OK)
 800837e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008382:	4619      	mov	r1, r3
 8008384:	483e      	ldr	r0, [pc, #248]	@ (8008480 <LIS2MDL_0_Probe+0x130>)
 8008386:	f7fc fcd7 	bl	8004d38 <LIS2MDL_RegisterBusIO>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d003      	beq.n	8008398 <LIS2MDL_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008390:	f06f 0306 	mvn.w	r3, #6
 8008394:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008396:	e062      	b.n	800845e <LIS2MDL_0_Probe+0x10e>
  }
  else if (LIS2MDL_ReadID(&lis2mdl_obj_0, &id) != LIS2MDL_OK)
 8008398:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 800839c:	4619      	mov	r1, r3
 800839e:	4838      	ldr	r0, [pc, #224]	@ (8008480 <LIS2MDL_0_Probe+0x130>)
 80083a0:	f7fc fde6 	bl	8004f70 <LIS2MDL_ReadID>
 80083a4:	4603      	mov	r3, r0
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <LIS2MDL_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083aa:	f06f 0306 	mvn.w	r3, #6
 80083ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083b0:	e055      	b.n	800845e <LIS2MDL_0_Probe+0x10e>
  }
  else if (id != LIS2MDL_ID)
 80083b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083b6:	2b40      	cmp	r3, #64	@ 0x40
 80083b8:	d003      	beq.n	80083c2 <LIS2MDL_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 80083ba:	f06f 0306 	mvn.w	r3, #6
 80083be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083c0:	e04d      	b.n	800845e <LIS2MDL_0_Probe+0x10e>
  }
  else
  {
    (void)LIS2MDL_GetCapabilities(&lis2mdl_obj_0, &cap);
 80083c2:	f107 030c 	add.w	r3, r7, #12
 80083c6:	4619      	mov	r1, r3
 80083c8:	482d      	ldr	r0, [pc, #180]	@ (8008480 <LIS2MDL_0_Probe+0x130>)
 80083ca:	f7fc fdf7 	bl	8004fbc <LIS2MDL_GetCapabilities>
    MotionCtx[IKS01A3_LIS2MDL_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	461a      	mov	r2, r3
 80083d2:	7b3b      	ldrb	r3, [r7, #12]
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	431a      	orrs	r2, r3
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	4313      	orrs	r3, r2
 80083de:	4a29      	ldr	r2, [pc, #164]	@ (8008484 <LIS2MDL_0_Probe+0x134>)
 80083e0:	6093      	str	r3, [r2, #8]

    MotionCompObj[IKS01A3_LIS2MDL_0] = &lis2mdl_obj_0;
 80083e2:	4b29      	ldr	r3, [pc, #164]	@ (8008488 <LIS2MDL_0_Probe+0x138>)
 80083e4:	4a26      	ldr	r2, [pc, #152]	@ (8008480 <LIS2MDL_0_Probe+0x130>)
 80083e6:	609a      	str	r2, [r3, #8]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[IKS01A3_LIS2MDL_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LIS2MDL_COMMON_Driver;
 80083e8:	4b28      	ldr	r3, [pc, #160]	@ (800848c <LIS2MDL_0_Probe+0x13c>)
 80083ea:	4a29      	ldr	r2, [pc, #164]	@ (8008490 <LIS2MDL_0_Probe+0x140>)
 80083ec:	609a      	str	r2, [r3, #8]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO) && (cap.Magneto == 1U))
 80083ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d11e      	bne.n	8008432 <LIS2MDL_0_Probe+0xe2>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f003 0304 	and.w	r3, r3, #4
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d019      	beq.n	8008432 <LIS2MDL_0_Probe+0xe2>
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d116      	bne.n	8008432 <LIS2MDL_0_Probe+0xe2>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[IKS01A3_LIS2MDL_0][FunctionIndex[MOTION_MAGNETO]] = (MOTION_SENSOR_FuncDrv_t *)(
 8008404:	4b23      	ldr	r3, [pc, #140]	@ (8008494 <LIS2MDL_0_Probe+0x144>)
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	4a23      	ldr	r2, [pc, #140]	@ (8008498 <LIS2MDL_0_Probe+0x148>)
 800840a:	3306      	adds	r3, #6
 800840c:	4923      	ldr	r1, [pc, #140]	@ (800849c <LIS2MDL_0_Probe+0x14c>)
 800840e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                                                          void *)&LIS2MDL_MAG_Driver;

      if (MotionDrv[IKS01A3_LIS2MDL_0]->Init(MotionCompObj[IKS01A3_LIS2MDL_0]) != LIS2MDL_OK)
 8008412:	4b1e      	ldr	r3, [pc, #120]	@ (800848c <LIS2MDL_0_Probe+0x13c>)
 8008414:	689b      	ldr	r3, [r3, #8]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a1b      	ldr	r2, [pc, #108]	@ (8008488 <LIS2MDL_0_Probe+0x138>)
 800841a:	6892      	ldr	r2, [r2, #8]
 800841c:	4610      	mov	r0, r2
 800841e:	4798      	blx	r3
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <LIS2MDL_0_Probe+0xde>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008426:	f06f 0304 	mvn.w	r3, #4
 800842a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800842c:	e001      	b.n	8008432 <LIS2MDL_0_Probe+0xe2>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800842e:	2300      	movs	r3, #0
 8008430:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO))
 8008432:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008434:	2b00      	cmp	r3, #0
 8008436:	d107      	bne.n	8008448 <LIS2MDL_0_Probe+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d002      	beq.n	8008448 <LIS2MDL_0_Probe+0xf8>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008442:	f06f 0304 	mvn.w	r3, #4
 8008446:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO))
 8008448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800844a:	2b00      	cmp	r3, #0
 800844c:	d107      	bne.n	800845e <LIS2MDL_0_Probe+0x10e>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <LIS2MDL_0_Probe+0x10e>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008458:	f06f 0304 	mvn.w	r3, #4
 800845c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
  }
  return ret;
 800845e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8008460:	4618      	mov	r0, r3
 8008462:	3750      	adds	r7, #80	@ 0x50
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	08003315 	.word	0x08003315
 800846c:	08003391 	.word	0x08003391
 8008470:	08003445 	.word	0x08003445
 8008474:	080033e1 	.word	0x080033e1
 8008478:	080034a9 	.word	0x080034a9
 800847c:	08001bcd 	.word	0x08001bcd
 8008480:	2000087c 	.word	0x2000087c
 8008484:	200007fc 	.word	0x200007fc
 8008488:	200007c0 	.word	0x200007c0
 800848c:	200007f0 	.word	0x200007f0
 8008490:	20000040 	.word	0x20000040
 8008494:	200000cc 	.word	0x200000cc
 8008498:	200007cc 	.word	0x200007cc
 800849c:	20000050 	.word	0x20000050

080084a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80084a6:	2300      	movs	r3, #0
 80084a8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084aa:	4b0c      	ldr	r3, [pc, #48]	@ (80084dc <HAL_Init+0x3c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	4a0b      	ldr	r2, [pc, #44]	@ (80084dc <HAL_Init+0x3c>)
 80084b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084b4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084b6:	2003      	movs	r0, #3
 80084b8:	f001 f852 	bl	8009560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80084bc:	2000      	movs	r0, #0
 80084be:	f000 f80f 	bl	80084e0 <HAL_InitTick>
 80084c2:	4603      	mov	r3, r0
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	71fb      	strb	r3, [r7, #7]
 80084cc:	e001      	b.n	80084d2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80084ce:	f7fa fd50 	bl	8002f72 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80084d2:	79fb      	ldrb	r3, [r7, #7]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	58004000 	.word	0x58004000

080084e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80084ec:	4b17      	ldr	r3, [pc, #92]	@ (800854c <HAL_InitTick+0x6c>)
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d024      	beq.n	800853e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80084f4:	f003 fd96 	bl	800c024 <HAL_RCC_GetHCLKFreq>
 80084f8:	4602      	mov	r2, r0
 80084fa:	4b14      	ldr	r3, [pc, #80]	@ (800854c <HAL_InitTick+0x6c>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	4619      	mov	r1, r3
 8008500:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008504:	fbb3 f3f1 	udiv	r3, r3, r1
 8008508:	fbb2 f3f3 	udiv	r3, r2, r3
 800850c:	4618      	mov	r0, r3
 800850e:	f001 f868 	bl	80095e2 <HAL_SYSTICK_Config>
 8008512:	4603      	mov	r3, r0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10f      	bne.n	8008538 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d809      	bhi.n	8008532 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800851e:	2200      	movs	r2, #0
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	f001 f826 	bl	8009576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800852a:	4a09      	ldr	r2, [pc, #36]	@ (8008550 <HAL_InitTick+0x70>)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e007      	b.n	8008542 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]
 8008536:	e004      	b.n	8008542 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	73fb      	strb	r3, [r7, #15]
 800853c:	e001      	b.n	8008542 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008542:	7bfb      	ldrb	r3, [r7, #15]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3710      	adds	r7, #16
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	200000e4 	.word	0x200000e4
 8008550:	200000e0 	.word	0x200000e0

08008554 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008558:	4b06      	ldr	r3, [pc, #24]	@ (8008574 <HAL_IncTick+0x20>)
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	461a      	mov	r2, r3
 800855e:	4b06      	ldr	r3, [pc, #24]	@ (8008578 <HAL_IncTick+0x24>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4413      	add	r3, r2
 8008564:	4a04      	ldr	r2, [pc, #16]	@ (8008578 <HAL_IncTick+0x24>)
 8008566:	6013      	str	r3, [r2, #0]
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	200000e4 	.word	0x200000e4
 8008578:	200008b0 	.word	0x200008b0

0800857c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800857c:	b480      	push	{r7}
 800857e:	af00      	add	r7, sp, #0
  return uwTick;
 8008580:	4b03      	ldr	r3, [pc, #12]	@ (8008590 <HAL_GetTick+0x14>)
 8008582:	681b      	ldr	r3, [r3, #0]
}
 8008584:	4618      	mov	r0, r3
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	200008b0 	.word	0x200008b0

08008594 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8008594:	b480      	push	{r7}
 8008596:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8008598:	4b03      	ldr	r3, [pc, #12]	@ (80085a8 <HAL_GetTickPrio+0x14>)
 800859a:	681b      	ldr	r3, [r3, #0]
}
 800859c:	4618      	mov	r0, r3
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	200000e0 	.word	0x200000e0

080085ac <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 80085ac:	b480      	push	{r7}
 80085ae:	af00      	add	r7, sp, #0
  return uwTickFreq;
 80085b0:	4b03      	ldr	r3, [pc, #12]	@ (80085c0 <HAL_GetTickFreq+0x14>)
 80085b2:	781b      	ldrb	r3, [r3, #0]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	200000e4 	.word	0x200000e4

080085c4 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	431a      	orrs	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	689b      	ldr	r3, [r3, #8]
 80085f8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	431a      	orrs	r2, r3
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	609a      	str	r2, [r3, #8]
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800862c:	b480      	push	{r7}
 800862e:	b087      	sub	sp, #28
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	607a      	str	r2, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	3360      	adds	r3, #96	@ 0x60
 800863e:	461a      	mov	r2, r3
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	4413      	add	r3, r2
 8008646:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	4b08      	ldr	r3, [pc, #32]	@ (8008670 <LL_ADC_SetOffset+0x44>)
 800864e:	4013      	ands	r3, r2
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	4313      	orrs	r3, r2
 800865c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	03fff000 	.word	0x03fff000

08008674 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	3360      	adds	r3, #96	@ 0x60
 8008682:	461a      	mov	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	4413      	add	r3, r2
 800868a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3360      	adds	r3, #96	@ 0x60
 80086b0:	461a      	mov	r2, r3
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	4413      	add	r3, r2
 80086b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80086ca:	bf00      	nop
 80086cc:	371c      	adds	r7, #28
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr

080086d6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80086d6:	b480      	push	{r7}
 80086d8:	b087      	sub	sp, #28
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3330      	adds	r3, #48	@ 0x30
 80086e6:	461a      	mov	r2, r3
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	0a1b      	lsrs	r3, r3, #8
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	f003 030c 	and.w	r3, r3, #12
 80086f2:	4413      	add	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f003 031f 	and.w	r3, r3, #31
 8008700:	211f      	movs	r1, #31
 8008702:	fa01 f303 	lsl.w	r3, r1, r3
 8008706:	43db      	mvns	r3, r3
 8008708:	401a      	ands	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	0e9b      	lsrs	r3, r3, #26
 800870e:	f003 011f 	and.w	r1, r3, #31
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f003 031f 	and.w	r3, r3, #31
 8008718:	fa01 f303 	lsl.w	r3, r1, r3
 800871c:	431a      	orrs	r2, r3
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008722:	bf00      	nop
 8008724:	371c      	adds	r7, #28
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800872e:	b480      	push	{r7}
 8008730:	b087      	sub	sp, #28
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	3314      	adds	r3, #20
 800873e:	461a      	mov	r2, r3
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	0e5b      	lsrs	r3, r3, #25
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	f003 0304 	and.w	r3, r3, #4
 800874a:	4413      	add	r3, r2
 800874c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	681a      	ldr	r2, [r3, #0]
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	0d1b      	lsrs	r3, r3, #20
 8008756:	f003 031f 	and.w	r3, r3, #31
 800875a:	2107      	movs	r1, #7
 800875c:	fa01 f303 	lsl.w	r3, r1, r3
 8008760:	43db      	mvns	r3, r3
 8008762:	401a      	ands	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	0d1b      	lsrs	r3, r3, #20
 8008768:	f003 031f 	and.w	r3, r3, #31
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	fa01 f303 	lsl.w	r3, r1, r3
 8008772:	431a      	orrs	r2, r3
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8008778:	bf00      	nop
 800877a:	371c      	adds	r7, #28
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	60b9      	str	r1, [r7, #8]
 800878e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800879c:	43db      	mvns	r3, r3
 800879e:	401a      	ands	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f003 0318 	and.w	r3, r3, #24
 80087a6:	4908      	ldr	r1, [pc, #32]	@ (80087c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80087a8:	40d9      	lsrs	r1, r3
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	400b      	ands	r3, r1
 80087ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087b2:	431a      	orrs	r2, r3
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80087ba:	bf00      	nop
 80087bc:	3714      	adds	r7, #20
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	0007ffff 	.word	0x0007ffff

080087cc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80087dc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6093      	str	r3, [r2, #8]
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80087f0:	b480      	push	{r7}
 80087f2:	b083      	sub	sp, #12
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008800:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008804:	d101      	bne.n	800880a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008806:	2301      	movs	r3, #1
 8008808:	e000      	b.n	800880c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008818:	b480      	push	{r7}
 800881a:	b083      	sub	sp, #12
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8008828:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800882c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8008840:	b480      	push	{r7}
 8008842:	b083      	sub	sp, #12
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008850:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008854:	d101      	bne.n	800885a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008856:	2301      	movs	r3, #1
 8008858:	e000      	b.n	800885c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <LL_ADC_IsEnabled+0x18>
 800887c:	2301      	movs	r3, #1
 800887e:	e000      	b.n	8008882 <LL_ADC_IsEnabled+0x1a>
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	370c      	adds	r7, #12
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr

0800888e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800888e:	b480      	push	{r7}
 8008890:	b083      	sub	sp, #12
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0304 	and.w	r3, r3, #4
 800889e:	2b04      	cmp	r3, #4
 80088a0:	d101      	bne.n	80088a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80088a2:	2301      	movs	r3, #1
 80088a4:	e000      	b.n	80088a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80088a6:	2300      	movs	r3, #0
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	f003 0308 	and.w	r3, r3, #8
 80088c4:	2b08      	cmp	r3, #8
 80088c6:	d101      	bne.n	80088cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80088c8:	2301      	movs	r3, #1
 80088ca:	e000      	b.n	80088ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	370c      	adds	r7, #12
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
	...

080088dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e12e      	b.n	8008b58 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008904:	2b00      	cmp	r3, #0
 8008906:	d109      	bne.n	800891c <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f7fa fb43 	bl	8002f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2200      	movs	r2, #0
 8008918:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4618      	mov	r0, r3
 8008922:	f7ff ff65 	bl	80087f0 <LL_ADC_IsDeepPowerDownEnabled>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d004      	beq.n	8008936 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4618      	mov	r0, r3
 8008932:	f7ff ff4b 	bl	80087cc <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f7ff ff80 	bl	8008840 <LL_ADC_IsInternalRegulatorEnabled>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d115      	bne.n	8008972 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f7ff ff64 	bl	8008818 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8008950:	4b83      	ldr	r3, [pc, #524]	@ (8008b60 <HAL_ADC_Init+0x284>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	099b      	lsrs	r3, r3, #6
 8008956:	4a83      	ldr	r2, [pc, #524]	@ (8008b64 <HAL_ADC_Init+0x288>)
 8008958:	fba2 2303 	umull	r2, r3, r2, r3
 800895c:	099b      	lsrs	r3, r3, #6
 800895e:	3301      	adds	r3, #1
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8008964:	e002      	b.n	800896c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f9      	bne.n	8008966 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4618      	mov	r0, r3
 8008978:	f7ff ff62 	bl	8008840 <LL_ADC_IsInternalRegulatorEnabled>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10d      	bne.n	800899e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008986:	f043 0210 	orr.w	r2, r3, #16
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008992:	f043 0201 	orr.w	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7ff ff73 	bl	800888e <LL_ADC_REG_IsConversionOngoing>
 80089a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089ae:	f003 0310 	and.w	r3, r3, #16
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f040 80c7 	bne.w	8008b46 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	f040 80c3 	bne.w	8008b46 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089c4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80089c8:	f043 0202 	orr.w	r2, r3, #2
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7ff ff47 	bl	8008868 <LL_ADC_IsEnabled>
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80089e0:	4861      	ldr	r0, [pc, #388]	@ (8008b68 <HAL_ADC_Init+0x28c>)
 80089e2:	f7ff ff41 	bl	8008868 <LL_ADC_IsEnabled>
 80089e6:	4603      	mov	r3, r0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4619      	mov	r1, r3
 80089f2:	485e      	ldr	r0, [pc, #376]	@ (8008b6c <HAL_ADC_Init+0x290>)
 80089f4:	f7ff fde6 	bl	80085c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	7e5b      	ldrb	r3, [r3, #25]
 80089fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a02:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008a08:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008a0e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a16:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8008a18:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d106      	bne.n	8008a38 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a2e:	3b01      	subs	r3, #1
 8008a30:	045b      	lsls	r3, r3, #17
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a44:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a4e:	69ba      	ldr	r2, [r7, #24]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68da      	ldr	r2, [r3, #12]
 8008a5a:	4b45      	ldr	r3, [pc, #276]	@ (8008b70 <HAL_ADC_Init+0x294>)
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6812      	ldr	r2, [r2, #0]
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	430b      	orrs	r3, r1
 8008a66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff ff0e 	bl	800888e <LL_ADC_REG_IsConversionOngoing>
 8008a72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7ff ff1b 	bl	80088b4 <LL_ADC_INJ_IsConversionOngoing>
 8008a7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d13d      	bne.n	8008b02 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d13a      	bne.n	8008b02 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a90:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008a98:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	68db      	ldr	r3, [r3, #12]
 8008aa4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008aa8:	f023 0302 	bic.w	r3, r3, #2
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	6812      	ldr	r2, [r2, #0]
 8008ab0:	69b9      	ldr	r1, [r7, #24]
 8008ab2:	430b      	orrs	r3, r1
 8008ab4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d118      	bne.n	8008af2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	691b      	ldr	r3, [r3, #16]
 8008ac6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008aca:	f023 0304 	bic.w	r3, r3, #4
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8008ad6:	4311      	orrs	r1, r2
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8008adc:	4311      	orrs	r1, r2
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0201 	orr.w	r2, r2, #1
 8008aee:	611a      	str	r2, [r3, #16]
 8008af0:	e007      	b.n	8008b02 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	691a      	ldr	r2, [r3, #16]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f022 0201 	bic.w	r2, r2, #1
 8008b00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	691b      	ldr	r3, [r3, #16]
 8008b06:	2b01      	cmp	r3, #1
 8008b08:	d10c      	bne.n	8008b24 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b10:	f023 010f 	bic.w	r1, r3, #15
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	1e5a      	subs	r2, r3, #1
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b22:	e007      	b.n	8008b34 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f022 020f 	bic.w	r2, r2, #15
 8008b32:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	f043 0201 	orr.w	r2, r3, #1
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b44:	e007      	b.n	8008b56 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b4a:	f043 0210 	orr.w	r2, r3, #16
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008b56:	7ffb      	ldrb	r3, [r7, #31]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3720      	adds	r7, #32
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}
 8008b60:	20000008 	.word	0x20000008
 8008b64:	053e2d63 	.word	0x053e2d63
 8008b68:	50040000 	.word	0x50040000
 8008b6c:	50040300 	.word	0x50040300
 8008b70:	fff0c007 	.word	0xfff0c007

08008b74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b0b6      	sub	sp, #216	@ 0xd8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d101      	bne.n	8008b96 <HAL_ADC_ConfigChannel+0x22>
 8008b92:	2302      	movs	r3, #2
 8008b94:	e39f      	b.n	80092d6 <HAL_ADC_ConfigChannel+0x762>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fe73 	bl	800888e <LL_ADC_REG_IsConversionOngoing>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	f040 8384 	bne.w	80092b8 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6818      	ldr	r0, [r3, #0]
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	6859      	ldr	r1, [r3, #4]
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	f7ff fd8a 	bl	80086d6 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7ff fe61 	bl	800888e <LL_ADC_REG_IsConversionOngoing>
 8008bcc:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fe6d 	bl	80088b4 <LL_ADC_INJ_IsConversionOngoing>
 8008bda:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	f040 81a6 	bne.w	8008f34 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f040 81a1 	bne.w	8008f34 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6818      	ldr	r0, [r3, #0]
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	6819      	ldr	r1, [r3, #0]
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	461a      	mov	r2, r3
 8008c00:	f7ff fd95 	bl	800872e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	08db      	lsrs	r3, r3, #3
 8008c10:	f003 0303 	and.w	r3, r3, #3
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	691b      	ldr	r3, [r3, #16]
 8008c22:	2b04      	cmp	r3, #4
 8008c24:	d00a      	beq.n	8008c3c <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6818      	ldr	r0, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	6919      	ldr	r1, [r3, #16]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008c36:	f7ff fcf9 	bl	800862c <LL_ADC_SetOffset>
 8008c3a:	e17b      	b.n	8008f34 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2100      	movs	r1, #0
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fd16 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10a      	bne.n	8008c68 <HAL_ADC_ConfigChannel+0xf4>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	2100      	movs	r1, #0
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7ff fd0b 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	0e9b      	lsrs	r3, r3, #26
 8008c62:	f003 021f 	and.w	r2, r3, #31
 8008c66:	e01e      	b.n	8008ca6 <HAL_ADC_ConfigChannel+0x132>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fd00 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008c74:	4603      	mov	r3, r0
 8008c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c7a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008c7e:	fa93 f3a3 	rbit	r3, r3
 8008c82:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  return result;
 8008c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  if (value == 0U)
 8008c8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d101      	bne.n	8008c9a <HAL_ADC_ConfigChannel+0x126>
    return 32U;
 8008c96:	2320      	movs	r3, #32
 8008c98:	e004      	b.n	8008ca4 <HAL_ADC_ConfigChannel+0x130>
  return __builtin_clz(value);
 8008c9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c9e:	fab3 f383 	clz	r3, r3
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <HAL_ADC_ConfigChannel+0x14a>
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	0e9b      	lsrs	r3, r3, #26
 8008cb8:	f003 031f 	and.w	r3, r3, #31
 8008cbc:	e018      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x17c>
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008cc6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008cca:	fa93 f3a3 	rbit	r3, r3
 8008cce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8008cd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008cd6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8008cda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d101      	bne.n	8008ce6 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8008ce2:	2320      	movs	r3, #32
 8008ce4:	e004      	b.n	8008cf0 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8008ce6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008cea:	fab3 f383 	clz	r3, r3
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d106      	bne.n	8008d02 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2100      	movs	r1, #0
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f7ff fccf 	bl	80086a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	2101      	movs	r1, #1
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7ff fcb3 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <HAL_ADC_ConfigChannel+0x1ba>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f7ff fca8 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008d24:	4603      	mov	r3, r0
 8008d26:	0e9b      	lsrs	r3, r3, #26
 8008d28:	f003 021f 	and.w	r2, r3, #31
 8008d2c:	e01e      	b.n	8008d6c <HAL_ADC_ConfigChannel+0x1f8>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	2101      	movs	r1, #1
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7ff fc9d 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d40:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008d44:	fa93 f3a3 	rbit	r3, r3
 8008d48:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8008d4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8008d54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d101      	bne.n	8008d60 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8008d5c:	2320      	movs	r3, #32
 8008d5e:	e004      	b.n	8008d6a <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8008d60:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008d64:	fab3 f383 	clz	r3, r3
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d105      	bne.n	8008d84 <HAL_ADC_ConfigChannel+0x210>
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	0e9b      	lsrs	r3, r3, #26
 8008d7e:	f003 031f 	and.w	r3, r3, #31
 8008d82:	e018      	b.n	8008db6 <HAL_ADC_ConfigChannel+0x242>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008d90:	fa93 f3a3 	rbit	r3, r3
 8008d94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8008d98:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008d9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8008da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8008da8:	2320      	movs	r3, #32
 8008daa:	e004      	b.n	8008db6 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8008dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008db0:	fab3 f383 	clz	r3, r3
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d106      	bne.n	8008dc8 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f7ff fc6c 	bl	80086a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2102      	movs	r1, #2
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7ff fc50 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <HAL_ADC_ConfigChannel+0x280>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2102      	movs	r1, #2
 8008de4:	4618      	mov	r0, r3
 8008de6:	f7ff fc45 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008dea:	4603      	mov	r3, r0
 8008dec:	0e9b      	lsrs	r3, r3, #26
 8008dee:	f003 021f 	and.w	r2, r3, #31
 8008df2:	e01e      	b.n	8008e32 <HAL_ADC_ConfigChannel+0x2be>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2102      	movs	r1, #2
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7ff fc3a 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008e00:	4603      	mov	r3, r0
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e0a:	fa93 f3a3 	rbit	r3, r3
 8008e0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8008e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8008e1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8008e22:	2320      	movs	r3, #32
 8008e24:	e004      	b.n	8008e30 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8008e26:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008e2a:	fab3 f383 	clz	r3, r3
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	461a      	mov	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d105      	bne.n	8008e4a <HAL_ADC_ConfigChannel+0x2d6>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	0e9b      	lsrs	r3, r3, #26
 8008e44:	f003 031f 	and.w	r3, r3, #31
 8008e48:	e016      	b.n	8008e78 <HAL_ADC_ConfigChannel+0x304>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e52:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008e56:	fa93 f3a3 	rbit	r3, r3
 8008e5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8008e5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008e5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8008e62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d101      	bne.n	8008e6e <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8008e6a:	2320      	movs	r3, #32
 8008e6c:	e004      	b.n	8008e78 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8008e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e72:	fab3 f383 	clz	r3, r3
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d106      	bne.n	8008e8a <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2200      	movs	r2, #0
 8008e82:	2102      	movs	r1, #2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fc0b 	bl	80086a0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2103      	movs	r1, #3
 8008e90:	4618      	mov	r0, r3
 8008e92:	f7ff fbef 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008e96:	4603      	mov	r3, r0
 8008e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10a      	bne.n	8008eb6 <HAL_ADC_ConfigChannel+0x342>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2103      	movs	r1, #3
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7ff fbe4 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008eac:	4603      	mov	r3, r0
 8008eae:	0e9b      	lsrs	r3, r3, #26
 8008eb0:	f003 021f 	and.w	r2, r3, #31
 8008eb4:	e017      	b.n	8008ee6 <HAL_ADC_ConfigChannel+0x372>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2103      	movs	r1, #3
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7ff fbd9 	bl	8008674 <LL_ADC_GetOffsetChannel>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ec6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ec8:	fa93 f3a3 	rbit	r3, r3
 8008ecc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8008ece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008ed0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8008ed2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8008ed8:	2320      	movs	r3, #32
 8008eda:	e003      	b.n	8008ee4 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8008edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ede:	fab3 f383 	clz	r3, r3
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d105      	bne.n	8008efe <HAL_ADC_ConfigChannel+0x38a>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	0e9b      	lsrs	r3, r3, #26
 8008ef8:	f003 031f 	and.w	r3, r3, #31
 8008efc:	e011      	b.n	8008f22 <HAL_ADC_ConfigChannel+0x3ae>
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008f06:	fa93 f3a3 	rbit	r3, r3
 8008f0a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8008f0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008f0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8008f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d101      	bne.n	8008f1a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8008f16:	2320      	movs	r3, #32
 8008f18:	e003      	b.n	8008f22 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8008f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f1c:	fab3 f383 	clz	r3, r3
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d106      	bne.n	8008f34 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2103      	movs	r1, #3
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f7ff fbb6 	bl	80086a0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7ff fc95 	bl	8008868 <LL_ADC_IsEnabled>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f040 81c2 	bne.w	80092ca <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6818      	ldr	r0, [r3, #0]
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	6819      	ldr	r1, [r3, #0]
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	461a      	mov	r2, r3
 8008f54:	f7ff fc16 	bl	8008784 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8009198 <HAL_ADC_ConfigChannel+0x624>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	f040 8130 	bne.w	80091c4 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10b      	bne.n	8008f8c <HAL_ADC_ConfigChannel+0x418>
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	0e9b      	lsrs	r3, r3, #26
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	f003 031f 	and.w	r3, r3, #31
 8008f80:	2b09      	cmp	r3, #9
 8008f82:	bf94      	ite	ls
 8008f84:	2301      	movls	r3, #1
 8008f86:	2300      	movhi	r3, #0
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	e019      	b.n	8008fc0 <HAL_ADC_ConfigChannel+0x44c>
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f94:	fa93 f3a3 	rbit	r3, r3
 8008f98:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8008f9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f9c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8008f9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d101      	bne.n	8008fa8 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8008fa4:	2320      	movs	r3, #32
 8008fa6:	e003      	b.n	8008fb0 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8008fa8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008faa:	fab3 f383 	clz	r3, r3
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	f003 031f 	and.w	r3, r3, #31
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	bf94      	ite	ls
 8008fba:	2301      	movls	r3, #1
 8008fbc:	2300      	movhi	r3, #0
 8008fbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d079      	beq.n	80090b8 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <HAL_ADC_ConfigChannel+0x46c>
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	0e9b      	lsrs	r3, r3, #26
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	069b      	lsls	r3, r3, #26
 8008fda:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8008fde:	e015      	b.n	800900c <HAL_ADC_ConfigChannel+0x498>
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fe8:	fa93 f3a3 	rbit	r3, r3
 8008fec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8008fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ff0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8008ff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d101      	bne.n	8008ffc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8008ff8:	2320      	movs	r3, #32
 8008ffa:	e003      	b.n	8009004 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8008ffc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ffe:	fab3 f383 	clz	r3, r3
 8009002:	b2db      	uxtb	r3, r3
 8009004:	3301      	adds	r3, #1
 8009006:	069b      	lsls	r3, r3, #26
 8009008:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009014:	2b00      	cmp	r3, #0
 8009016:	d109      	bne.n	800902c <HAL_ADC_ConfigChannel+0x4b8>
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	0e9b      	lsrs	r3, r3, #26
 800901e:	3301      	adds	r3, #1
 8009020:	f003 031f 	and.w	r3, r3, #31
 8009024:	2101      	movs	r1, #1
 8009026:	fa01 f303 	lsl.w	r3, r1, r3
 800902a:	e017      	b.n	800905c <HAL_ADC_ConfigChannel+0x4e8>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009032:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009034:	fa93 f3a3 	rbit	r3, r3
 8009038:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800903a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800903c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800903e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8009044:	2320      	movs	r3, #32
 8009046:	e003      	b.n	8009050 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8009048:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800904a:	fab3 f383 	clz	r3, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	3301      	adds	r3, #1
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2101      	movs	r1, #1
 8009058:	fa01 f303 	lsl.w	r3, r1, r3
 800905c:	ea42 0103 	orr.w	r1, r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_ADC_ConfigChannel+0x50e>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	0e9b      	lsrs	r3, r3, #26
 8009072:	3301      	adds	r3, #1
 8009074:	f003 021f 	and.w	r2, r3, #31
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	051b      	lsls	r3, r3, #20
 8009080:	e018      	b.n	80090b4 <HAL_ADC_ConfigChannel+0x540>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908a:	fa93 f3a3 	rbit	r3, r3
 800908e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8009090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009092:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8009094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009096:	2b00      	cmp	r3, #0
 8009098:	d101      	bne.n	800909e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800909a:	2320      	movs	r3, #32
 800909c:	e003      	b.n	80090a6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800909e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a0:	fab3 f383 	clz	r3, r3
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	3301      	adds	r3, #1
 80090a8:	f003 021f 	and.w	r2, r3, #31
 80090ac:	4613      	mov	r3, r2
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	4413      	add	r3, r2
 80090b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090b4:	430b      	orrs	r3, r1
 80090b6:	e080      	b.n	80091ba <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d107      	bne.n	80090d4 <HAL_ADC_ConfigChannel+0x560>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	0e9b      	lsrs	r3, r3, #26
 80090ca:	3301      	adds	r3, #1
 80090cc:	069b      	lsls	r3, r3, #26
 80090ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80090d2:	e015      	b.n	8009100 <HAL_ADC_ConfigChannel+0x58c>
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090dc:	fa93 f3a3 	rbit	r3, r3
 80090e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80090e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80090e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d101      	bne.n	80090f0 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80090ec:	2320      	movs	r3, #32
 80090ee:	e003      	b.n	80090f8 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80090f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f2:	fab3 f383 	clz	r3, r3
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	3301      	adds	r3, #1
 80090fa:	069b      	lsls	r3, r3, #26
 80090fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009108:	2b00      	cmp	r3, #0
 800910a:	d109      	bne.n	8009120 <HAL_ADC_ConfigChannel+0x5ac>
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	0e9b      	lsrs	r3, r3, #26
 8009112:	3301      	adds	r3, #1
 8009114:	f003 031f 	and.w	r3, r3, #31
 8009118:	2101      	movs	r1, #1
 800911a:	fa01 f303 	lsl.w	r3, r1, r3
 800911e:	e017      	b.n	8009150 <HAL_ADC_ConfigChannel+0x5dc>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	fa93 f3a3 	rbit	r3, r3
 800912c:	61fb      	str	r3, [r7, #28]
  return result;
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8009132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009134:	2b00      	cmp	r3, #0
 8009136:	d101      	bne.n	800913c <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8009138:	2320      	movs	r3, #32
 800913a:	e003      	b.n	8009144 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 800913c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800913e:	fab3 f383 	clz	r3, r3
 8009142:	b2db      	uxtb	r3, r3
 8009144:	3301      	adds	r3, #1
 8009146:	f003 031f 	and.w	r3, r3, #31
 800914a:	2101      	movs	r1, #1
 800914c:	fa01 f303 	lsl.w	r3, r1, r3
 8009150:	ea42 0103 	orr.w	r1, r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800915c:	2b00      	cmp	r3, #0
 800915e:	d10d      	bne.n	800917c <HAL_ADC_ConfigChannel+0x608>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	0e9b      	lsrs	r3, r3, #26
 8009166:	3301      	adds	r3, #1
 8009168:	f003 021f 	and.w	r2, r3, #31
 800916c:	4613      	mov	r3, r2
 800916e:	005b      	lsls	r3, r3, #1
 8009170:	4413      	add	r3, r2
 8009172:	3b1e      	subs	r3, #30
 8009174:	051b      	lsls	r3, r3, #20
 8009176:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800917a:	e01d      	b.n	80091b8 <HAL_ADC_ConfigChannel+0x644>
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	fa93 f3a3 	rbit	r3, r3
 8009188:	613b      	str	r3, [r7, #16]
  return result;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d103      	bne.n	800919c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8009194:	2320      	movs	r3, #32
 8009196:	e005      	b.n	80091a4 <HAL_ADC_ConfigChannel+0x630>
 8009198:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	fab3 f383 	clz	r3, r3
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	3301      	adds	r3, #1
 80091a6:	f003 021f 	and.w	r2, r3, #31
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	3b1e      	subs	r3, #30
 80091b2:	051b      	lsls	r3, r3, #20
 80091b4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091b8:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 80091ba:	683a      	ldr	r2, [r7, #0]
 80091bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80091be:	4619      	mov	r1, r3
 80091c0:	f7ff fab5 	bl	800872e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	4b45      	ldr	r3, [pc, #276]	@ (80092e0 <HAL_ADC_ConfigChannel+0x76c>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d07c      	beq.n	80092ca <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80091d0:	4844      	ldr	r0, [pc, #272]	@ (80092e4 <HAL_ADC_ConfigChannel+0x770>)
 80091d2:	f7ff fa1d 	bl	8008610 <LL_ADC_GetCommonPathInternalCh>
 80091d6:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80091da:	4843      	ldr	r0, [pc, #268]	@ (80092e8 <HAL_ADC_ConfigChannel+0x774>)
 80091dc:	f7ff fb44 	bl	8008868 <LL_ADC_IsEnabled>
 80091e0:	4603      	mov	r3, r0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d15e      	bne.n	80092a4 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a40      	ldr	r2, [pc, #256]	@ (80092ec <HAL_ADC_ConfigChannel+0x778>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d127      	bne.n	8009240 <HAL_ADC_ConfigChannel+0x6cc>
 80091f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80091f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d121      	bne.n	8009240 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a39      	ldr	r2, [pc, #228]	@ (80092e8 <HAL_ADC_ConfigChannel+0x774>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d161      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8009206:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800920a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800920e:	4619      	mov	r1, r3
 8009210:	4834      	ldr	r0, [pc, #208]	@ (80092e4 <HAL_ADC_ConfigChannel+0x770>)
 8009212:	f7ff f9ea 	bl	80085ea <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8009216:	4b36      	ldr	r3, [pc, #216]	@ (80092f0 <HAL_ADC_ConfigChannel+0x77c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	099b      	lsrs	r3, r3, #6
 800921c:	4a35      	ldr	r2, [pc, #212]	@ (80092f4 <HAL_ADC_ConfigChannel+0x780>)
 800921e:	fba2 2303 	umull	r2, r3, r2, r3
 8009222:	099b      	lsrs	r3, r3, #6
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	4613      	mov	r3, r2
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009230:	e002      	b.n	8009238 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	3b01      	subs	r3, #1
 8009236:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1f9      	bne.n	8009232 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800923e:	e044      	b.n	80092ca <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a2c      	ldr	r2, [pc, #176]	@ (80092f8 <HAL_ADC_ConfigChannel+0x784>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d113      	bne.n	8009272 <HAL_ADC_ConfigChannel+0x6fe>
 800924a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800924e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d10d      	bne.n	8009272 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a23      	ldr	r2, [pc, #140]	@ (80092e8 <HAL_ADC_ConfigChannel+0x774>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d134      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8009260:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009268:	4619      	mov	r1, r3
 800926a:	481e      	ldr	r0, [pc, #120]	@ (80092e4 <HAL_ADC_ConfigChannel+0x770>)
 800926c:	f7ff f9bd 	bl	80085ea <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009270:	e02b      	b.n	80092ca <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4a21      	ldr	r2, [pc, #132]	@ (80092fc <HAL_ADC_ConfigChannel+0x788>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d126      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x756>
 800927c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009280:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009284:	2b00      	cmp	r3, #0
 8009286:	d120      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a16      	ldr	r2, [pc, #88]	@ (80092e8 <HAL_ADC_ConfigChannel+0x774>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d11b      	bne.n	80092ca <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8009292:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009296:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800929a:	4619      	mov	r1, r3
 800929c:	4811      	ldr	r0, [pc, #68]	@ (80092e4 <HAL_ADC_ConfigChannel+0x770>)
 800929e:	f7ff f9a4 	bl	80085ea <LL_ADC_SetCommonPathInternalCh>
 80092a2:	e012      	b.n	80092ca <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092a8:	f043 0220 	orr.w	r2, r3, #32
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80092b6:	e008      	b.n	80092ca <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092bc:	f043 0220 	orr.w	r2, r3, #32
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80092c4:	2301      	movs	r3, #1
 80092c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 80092d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	37d8      	adds	r7, #216	@ 0xd8
 80092da:	46bd      	mov	sp, r7
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	80080000 	.word	0x80080000
 80092e4:	50040300 	.word	0x50040300
 80092e8:	50040000 	.word	0x50040000
 80092ec:	c7520000 	.word	0xc7520000
 80092f0:	20000008 	.word	0x20000008
 80092f4:	053e2d63 	.word	0x053e2d63
 80092f8:	cb840000 	.word	0xcb840000
 80092fc:	80000001 	.word	0x80000001

08009300 <__NVIC_SetPriorityGrouping>:
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f003 0307 	and.w	r3, r3, #7
 800930e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009310:	4b0c      	ldr	r3, [pc, #48]	@ (8009344 <__NVIC_SetPriorityGrouping+0x44>)
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009316:	68ba      	ldr	r2, [r7, #8]
 8009318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800931c:	4013      	ands	r3, r2
 800931e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800932c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009332:	4a04      	ldr	r2, [pc, #16]	@ (8009344 <__NVIC_SetPriorityGrouping+0x44>)
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	60d3      	str	r3, [r2, #12]
}
 8009338:	bf00      	nop
 800933a:	3714      	adds	r7, #20
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr
 8009344:	e000ed00 	.word	0xe000ed00

08009348 <__NVIC_GetPriorityGrouping>:
{
 8009348:	b480      	push	{r7}
 800934a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800934c:	4b04      	ldr	r3, [pc, #16]	@ (8009360 <__NVIC_GetPriorityGrouping+0x18>)
 800934e:	68db      	ldr	r3, [r3, #12]
 8009350:	0a1b      	lsrs	r3, r3, #8
 8009352:	f003 0307 	and.w	r3, r3, #7
}
 8009356:	4618      	mov	r0, r3
 8009358:	46bd      	mov	sp, r7
 800935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935e:	4770      	bx	lr
 8009360:	e000ed00 	.word	0xe000ed00

08009364 <__NVIC_EnableIRQ>:
{
 8009364:	b480      	push	{r7}
 8009366:	b083      	sub	sp, #12
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800936e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	db0b      	blt.n	800938e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009376:	79fb      	ldrb	r3, [r7, #7]
 8009378:	f003 021f 	and.w	r2, r3, #31
 800937c:	4907      	ldr	r1, [pc, #28]	@ (800939c <__NVIC_EnableIRQ+0x38>)
 800937e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	2001      	movs	r0, #1
 8009386:	fa00 f202 	lsl.w	r2, r0, r2
 800938a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800938e:	bf00      	nop
 8009390:	370c      	adds	r7, #12
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
 800939a:	bf00      	nop
 800939c:	e000e100 	.word	0xe000e100

080093a0 <__NVIC_DisableIRQ>:
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	4603      	mov	r3, r0
 80093a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	db12      	blt.n	80093d8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093b2:	79fb      	ldrb	r3, [r7, #7]
 80093b4:	f003 021f 	and.w	r2, r3, #31
 80093b8:	490a      	ldr	r1, [pc, #40]	@ (80093e4 <__NVIC_DisableIRQ+0x44>)
 80093ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093be:	095b      	lsrs	r3, r3, #5
 80093c0:	2001      	movs	r0, #1
 80093c2:	fa00 f202 	lsl.w	r2, r0, r2
 80093c6:	3320      	adds	r3, #32
 80093c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80093cc:	f3bf 8f4f 	dsb	sy
}
 80093d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80093d2:	f3bf 8f6f 	isb	sy
}
 80093d6:	bf00      	nop
}
 80093d8:	bf00      	nop
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	e000e100 	.word	0xe000e100

080093e8 <__NVIC_SetPendingIRQ>:
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	4603      	mov	r3, r0
 80093f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	db0c      	blt.n	8009414 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	f003 021f 	and.w	r2, r3, #31
 8009400:	4907      	ldr	r1, [pc, #28]	@ (8009420 <__NVIC_SetPendingIRQ+0x38>)
 8009402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009406:	095b      	lsrs	r3, r3, #5
 8009408:	2001      	movs	r0, #1
 800940a:	fa00 f202 	lsl.w	r2, r0, r2
 800940e:	3340      	adds	r3, #64	@ 0x40
 8009410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009414:	bf00      	nop
 8009416:	370c      	adds	r7, #12
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	e000e100 	.word	0xe000e100

08009424 <__NVIC_ClearPendingIRQ>:
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	4603      	mov	r3, r0
 800942c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800942e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009432:	2b00      	cmp	r3, #0
 8009434:	db0c      	blt.n	8009450 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	f003 021f 	and.w	r2, r3, #31
 800943c:	4907      	ldr	r1, [pc, #28]	@ (800945c <__NVIC_ClearPendingIRQ+0x38>)
 800943e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009442:	095b      	lsrs	r3, r3, #5
 8009444:	2001      	movs	r0, #1
 8009446:	fa00 f202 	lsl.w	r2, r0, r2
 800944a:	3360      	adds	r3, #96	@ 0x60
 800944c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr
 800945c:	e000e100 	.word	0xe000e100

08009460 <__NVIC_SetPriority>:
{
 8009460:	b480      	push	{r7}
 8009462:	b083      	sub	sp, #12
 8009464:	af00      	add	r7, sp, #0
 8009466:	4603      	mov	r3, r0
 8009468:	6039      	str	r1, [r7, #0]
 800946a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800946c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db0a      	blt.n	800948a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	b2da      	uxtb	r2, r3
 8009478:	490c      	ldr	r1, [pc, #48]	@ (80094ac <__NVIC_SetPriority+0x4c>)
 800947a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800947e:	0112      	lsls	r2, r2, #4
 8009480:	b2d2      	uxtb	r2, r2
 8009482:	440b      	add	r3, r1
 8009484:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009488:	e00a      	b.n	80094a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	b2da      	uxtb	r2, r3
 800948e:	4908      	ldr	r1, [pc, #32]	@ (80094b0 <__NVIC_SetPriority+0x50>)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	f003 030f 	and.w	r3, r3, #15
 8009496:	3b04      	subs	r3, #4
 8009498:	0112      	lsls	r2, r2, #4
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	440b      	add	r3, r1
 800949e:	761a      	strb	r2, [r3, #24]
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	e000e100 	.word	0xe000e100
 80094b0:	e000ed00 	.word	0xe000ed00

080094b4 <NVIC_EncodePriority>:
{
 80094b4:	b480      	push	{r7}
 80094b6:	b089      	sub	sp, #36	@ 0x24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f003 0307 	and.w	r3, r3, #7
 80094c6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	f1c3 0307 	rsb	r3, r3, #7
 80094ce:	2b04      	cmp	r3, #4
 80094d0:	bf28      	it	cs
 80094d2:	2304      	movcs	r3, #4
 80094d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	3304      	adds	r3, #4
 80094da:	2b06      	cmp	r3, #6
 80094dc:	d902      	bls.n	80094e4 <NVIC_EncodePriority+0x30>
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	3b03      	subs	r3, #3
 80094e2:	e000      	b.n	80094e6 <NVIC_EncodePriority+0x32>
 80094e4:	2300      	movs	r3, #0
 80094e6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80094e8:	f04f 32ff 	mov.w	r2, #4294967295
 80094ec:	69bb      	ldr	r3, [r7, #24]
 80094ee:	fa02 f303 	lsl.w	r3, r2, r3
 80094f2:	43da      	mvns	r2, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	401a      	ands	r2, r3
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80094fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	fa01 f303 	lsl.w	r3, r1, r3
 8009506:	43d9      	mvns	r1, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800950c:	4313      	orrs	r3, r2
}
 800950e:	4618      	mov	r0, r3
 8009510:	3724      	adds	r7, #36	@ 0x24
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
	...

0800951c <SysTick_Config>:
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3b01      	subs	r3, #1
 8009528:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800952c:	d301      	bcc.n	8009532 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800952e:	2301      	movs	r3, #1
 8009530:	e00f      	b.n	8009552 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009532:	4a0a      	ldr	r2, [pc, #40]	@ (800955c <SysTick_Config+0x40>)
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	3b01      	subs	r3, #1
 8009538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800953a:	210f      	movs	r1, #15
 800953c:	f04f 30ff 	mov.w	r0, #4294967295
 8009540:	f7ff ff8e 	bl	8009460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009544:	4b05      	ldr	r3, [pc, #20]	@ (800955c <SysTick_Config+0x40>)
 8009546:	2200      	movs	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800954a:	4b04      	ldr	r3, [pc, #16]	@ (800955c <SysTick_Config+0x40>)
 800954c:	2207      	movs	r2, #7
 800954e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	e000e010 	.word	0xe000e010

08009560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7ff fec9 	bl	8009300 <__NVIC_SetPriorityGrouping>
}
 800956e:	bf00      	nop
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b086      	sub	sp, #24
 800957a:	af00      	add	r7, sp, #0
 800957c:	4603      	mov	r3, r0
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	607a      	str	r2, [r7, #4]
 8009582:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009584:	f7ff fee0 	bl	8009348 <__NVIC_GetPriorityGrouping>
 8009588:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800958a:	687a      	ldr	r2, [r7, #4]
 800958c:	68b9      	ldr	r1, [r7, #8]
 800958e:	6978      	ldr	r0, [r7, #20]
 8009590:	f7ff ff90 	bl	80094b4 <NVIC_EncodePriority>
 8009594:	4602      	mov	r2, r0
 8009596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800959a:	4611      	mov	r1, r2
 800959c:	4618      	mov	r0, r3
 800959e:	f7ff ff5f 	bl	8009460 <__NVIC_SetPriority>
}
 80095a2:	bf00      	nop
 80095a4:	3718      	adds	r7, #24
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095aa:	b580      	push	{r7, lr}
 80095ac:	b082      	sub	sp, #8
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	4603      	mov	r3, r0
 80095b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fed3 	bl	8009364 <__NVIC_EnableIRQ>
}
 80095be:	bf00      	nop
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b082      	sub	sp, #8
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	4603      	mov	r3, r0
 80095ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80095d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff fee3 	bl	80093a0 <__NVIC_DisableIRQ>
}
 80095da:	bf00      	nop
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff ff96 	bl	800951c <SysTick_Config>
 80095f0:	4603      	mov	r3, r0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	4603      	mov	r3, r0
 8009602:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8009604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009608:	4618      	mov	r0, r3
 800960a:	f7ff feed 	bl	80093e8 <__NVIC_SetPendingIRQ>
}
 800960e:	bf00      	nop
 8009610:	3708      	adds	r7, #8
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}

08009616 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8009616:	b580      	push	{r7, lr}
 8009618:	b082      	sub	sp, #8
 800961a:	af00      	add	r7, sp, #0
 800961c:	4603      	mov	r3, r0
 800961e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8009620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009624:	4618      	mov	r0, r3
 8009626:	f7ff fefd 	bl	8009424 <__NVIC_ClearPendingIRQ>
}
 800962a:	bf00      	nop
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d101      	bne.n	8009646 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009642:	2301      	movs	r3, #1
 8009644:	e08e      	b.n	8009764 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	461a      	mov	r2, r3
 800964c:	4b47      	ldr	r3, [pc, #284]	@ (800976c <HAL_DMA_Init+0x138>)
 800964e:	429a      	cmp	r2, r3
 8009650:	d80f      	bhi.n	8009672 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	461a      	mov	r2, r3
 8009658:	4b45      	ldr	r3, [pc, #276]	@ (8009770 <HAL_DMA_Init+0x13c>)
 800965a:	4413      	add	r3, r2
 800965c:	4a45      	ldr	r2, [pc, #276]	@ (8009774 <HAL_DMA_Init+0x140>)
 800965e:	fba2 2303 	umull	r2, r3, r2, r3
 8009662:	091b      	lsrs	r3, r3, #4
 8009664:	009a      	lsls	r2, r3, #2
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a42      	ldr	r2, [pc, #264]	@ (8009778 <HAL_DMA_Init+0x144>)
 800966e:	641a      	str	r2, [r3, #64]	@ 0x40
 8009670:	e00e      	b.n	8009690 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	4b40      	ldr	r3, [pc, #256]	@ (800977c <HAL_DMA_Init+0x148>)
 800967a:	4413      	add	r3, r2
 800967c:	4a3d      	ldr	r2, [pc, #244]	@ (8009774 <HAL_DMA_Init+0x140>)
 800967e:	fba2 2303 	umull	r2, r3, r2, r3
 8009682:	091b      	lsrs	r3, r3, #4
 8009684:	009a      	lsls	r2, r3, #2
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a3c      	ldr	r2, [pc, #240]	@ (8009780 <HAL_DMA_Init+0x14c>)
 800968e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2202      	movs	r2, #2
 8009694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80096a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80096b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80096c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	4313      	orrs	r3, r2
 80096d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 f8fe 	bl	80098e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80096f0:	d102      	bne.n	80096f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	685a      	ldr	r2, [r3, #4]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009700:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8009704:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800970e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d010      	beq.n	800973a <HAL_DMA_Init+0x106>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	2b04      	cmp	r3, #4
 800971e:	d80c      	bhi.n	800973a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 f91d 	bl	8009960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800972a:	2200      	movs	r2, #0
 800972c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8009736:	605a      	str	r2, [r3, #4]
 8009738:	e008      	b.n	800974c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2200      	movs	r2, #0
 8009744:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3710      	adds	r7, #16
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	40020407 	.word	0x40020407
 8009770:	bffdfff8 	.word	0xbffdfff8
 8009774:	cccccccd 	.word	0xcccccccd
 8009778:	40020000 	.word	0x40020000
 800977c:	bffdfbf8 	.word	0xbffdfbf8
 8009780:	40020400 	.word	0x40020400

08009784 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097a0:	f003 031c 	and.w	r3, r3, #28
 80097a4:	2204      	movs	r2, #4
 80097a6:	409a      	lsls	r2, r3
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	4013      	ands	r3, r2
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d026      	beq.n	80097fe <HAL_DMA_IRQHandler+0x7a>
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	f003 0304 	and.w	r3, r3, #4
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d021      	beq.n	80097fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d107      	bne.n	80097d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f022 0204 	bic.w	r2, r2, #4
 80097d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097dc:	f003 021c 	and.w	r2, r3, #28
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e4:	2104      	movs	r1, #4
 80097e6:	fa01 f202 	lsl.w	r2, r1, r2
 80097ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d071      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80097fc:	e06c      	b.n	80098d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009802:	f003 031c 	and.w	r3, r3, #28
 8009806:	2202      	movs	r2, #2
 8009808:	409a      	lsls	r2, r3
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4013      	ands	r3, r2
 800980e:	2b00      	cmp	r3, #0
 8009810:	d02e      	beq.n	8009870 <HAL_DMA_IRQHandler+0xec>
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b00      	cmp	r3, #0
 800981a:	d029      	beq.n	8009870 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0320 	and.w	r3, r3, #32
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10b      	bne.n	8009842 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 020a 	bic.w	r2, r2, #10
 8009838:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009846:	f003 021c 	and.w	r2, r3, #28
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2102      	movs	r1, #2
 8009850:	fa01 f202 	lsl.w	r2, r1, r2
 8009854:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2200      	movs	r2, #0
 800985a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009862:	2b00      	cmp	r3, #0
 8009864:	d038      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800986e:	e033      	b.n	80098d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009874:	f003 031c 	and.w	r3, r3, #28
 8009878:	2208      	movs	r2, #8
 800987a:	409a      	lsls	r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4013      	ands	r3, r2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d02a      	beq.n	80098da <HAL_DMA_IRQHandler+0x156>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f003 0308 	and.w	r3, r3, #8
 800988a:	2b00      	cmp	r3, #0
 800988c:	d025      	beq.n	80098da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681a      	ldr	r2, [r3, #0]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 020e 	bic.w	r2, r2, #14
 800989c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a2:	f003 021c 	and.w	r2, r3, #28
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098aa:	2101      	movs	r1, #1
 80098ac:	fa01 f202 	lsl.w	r2, r1, r2
 80098b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d004      	beq.n	80098da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80098d8:	bf00      	nop
 80098da:	bf00      	nop
}
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80098e4:	b480      	push	{r7}
 80098e6:	b085      	sub	sp, #20
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	461a      	mov	r2, r3
 80098f2:	4b17      	ldr	r3, [pc, #92]	@ (8009950 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d80a      	bhi.n	800990e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098fc:	089b      	lsrs	r3, r3, #2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009904:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	6493      	str	r3, [r2, #72]	@ 0x48
 800990c:	e007      	b.n	800991e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009912:	089b      	lsrs	r3, r3, #2
 8009914:	009a      	lsls	r2, r3, #2
 8009916:	4b0f      	ldr	r3, [pc, #60]	@ (8009954 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009918:	4413      	add	r3, r2
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	3b08      	subs	r3, #8
 8009926:	4a0c      	ldr	r2, [pc, #48]	@ (8009958 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009928:	fba2 2303 	umull	r2, r3, r2, r3
 800992c:	091b      	lsrs	r3, r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a0a      	ldr	r2, [pc, #40]	@ (800995c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009934:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f003 031f 	and.w	r3, r3, #31
 800993c:	2201      	movs	r2, #1
 800993e:	409a      	lsls	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8009944:	bf00      	nop
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	40020407 	.word	0x40020407
 8009954:	4002081c 	.word	0x4002081c
 8009958:	cccccccd 	.word	0xcccccccd
 800995c:	40020880 	.word	0x40020880

08009960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009970:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	4b0b      	ldr	r3, [pc, #44]	@ (80099a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009976:	4413      	add	r3, r2
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	461a      	mov	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a09      	ldr	r2, [pc, #36]	@ (80099a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8009984:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	3b01      	subs	r3, #1
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	2201      	movs	r2, #1
 8009990:	409a      	lsls	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8009996:	bf00      	nop
 8009998:	3714      	adds	r7, #20
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr
 80099a2:	bf00      	nop
 80099a4:	1000823f 	.word	0x1000823f
 80099a8:	40020940 	.word	0x40020940

080099ac <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80099ba:	e14c      	b.n	8009c56 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	2101      	movs	r1, #1
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	fa01 f303 	lsl.w	r3, r1, r3
 80099c8:	4013      	ands	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f000 813e 	beq.w	8009c50 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	f003 0303 	and.w	r3, r3, #3
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d005      	beq.n	80099ec <HAL_GPIO_Init+0x40>
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f003 0303 	and.w	r3, r3, #3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d130      	bne.n	8009a4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	689b      	ldr	r3, [r3, #8]
 80099f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	2203      	movs	r2, #3
 80099f8:	fa02 f303 	lsl.w	r3, r2, r3
 80099fc:	43db      	mvns	r3, r3
 80099fe:	693a      	ldr	r2, [r7, #16]
 8009a00:	4013      	ands	r3, r2
 8009a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	68da      	ldr	r2, [r3, #12]
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	005b      	lsls	r3, r3, #1
 8009a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009a22:	2201      	movs	r2, #1
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	fa02 f303 	lsl.w	r3, r2, r3
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	693a      	ldr	r2, [r7, #16]
 8009a2e:	4013      	ands	r3, r2
 8009a30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	091b      	lsrs	r3, r3, #4
 8009a38:	f003 0201 	and.w	r2, r3, #1
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	693a      	ldr	r2, [r7, #16]
 8009a4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f003 0303 	and.w	r3, r3, #3
 8009a56:	2b03      	cmp	r3, #3
 8009a58:	d017      	beq.n	8009a8a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
 8009a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	2203      	movs	r2, #3
 8009a66:	fa02 f303 	lsl.w	r3, r2, r3
 8009a6a:	43db      	mvns	r3, r3
 8009a6c:	693a      	ldr	r2, [r7, #16]
 8009a6e:	4013      	ands	r3, r2
 8009a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	689a      	ldr	r2, [r3, #8]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	005b      	lsls	r3, r3, #1
 8009a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8009a7e:	693a      	ldr	r2, [r7, #16]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	693a      	ldr	r2, [r7, #16]
 8009a88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	2b02      	cmp	r3, #2
 8009a94:	d123      	bne.n	8009ade <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	08da      	lsrs	r2, r3, #3
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	3208      	adds	r2, #8
 8009a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	220f      	movs	r2, #15
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	43db      	mvns	r3, r3
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	691a      	ldr	r2, [r3, #16]
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f003 0307 	and.w	r3, r3, #7
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	08da      	lsrs	r2, r3, #3
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3208      	adds	r2, #8
 8009ad8:	6939      	ldr	r1, [r7, #16]
 8009ada:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	005b      	lsls	r3, r3, #1
 8009ae8:	2203      	movs	r2, #3
 8009aea:	fa02 f303 	lsl.w	r3, r2, r3
 8009aee:	43db      	mvns	r3, r3
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4013      	ands	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f003 0203 	and.w	r2, r3, #3
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	fa02 f303 	lsl.w	r3, r2, r3
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	693a      	ldr	r2, [r7, #16]
 8009b10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f000 8098 	beq.w	8009c50 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8009b20:	4a54      	ldr	r2, [pc, #336]	@ (8009c74 <HAL_GPIO_Init+0x2c8>)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	089b      	lsrs	r3, r3, #2
 8009b26:	3302      	adds	r3, #2
 8009b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f003 0303 	and.w	r3, r3, #3
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	220f      	movs	r2, #15
 8009b38:	fa02 f303 	lsl.w	r3, r2, r3
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4013      	ands	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009b4a:	d019      	beq.n	8009b80 <HAL_GPIO_Init+0x1d4>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4a4a      	ldr	r2, [pc, #296]	@ (8009c78 <HAL_GPIO_Init+0x2cc>)
 8009b50:	4293      	cmp	r3, r2
 8009b52:	d013      	beq.n	8009b7c <HAL_GPIO_Init+0x1d0>
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	4a49      	ldr	r2, [pc, #292]	@ (8009c7c <HAL_GPIO_Init+0x2d0>)
 8009b58:	4293      	cmp	r3, r2
 8009b5a:	d00d      	beq.n	8009b78 <HAL_GPIO_Init+0x1cc>
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	4a48      	ldr	r2, [pc, #288]	@ (8009c80 <HAL_GPIO_Init+0x2d4>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d007      	beq.n	8009b74 <HAL_GPIO_Init+0x1c8>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	4a47      	ldr	r2, [pc, #284]	@ (8009c84 <HAL_GPIO_Init+0x2d8>)
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d101      	bne.n	8009b70 <HAL_GPIO_Init+0x1c4>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	e008      	b.n	8009b82 <HAL_GPIO_Init+0x1d6>
 8009b70:	2307      	movs	r3, #7
 8009b72:	e006      	b.n	8009b82 <HAL_GPIO_Init+0x1d6>
 8009b74:	2303      	movs	r3, #3
 8009b76:	e004      	b.n	8009b82 <HAL_GPIO_Init+0x1d6>
 8009b78:	2302      	movs	r3, #2
 8009b7a:	e002      	b.n	8009b82 <HAL_GPIO_Init+0x1d6>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e000      	b.n	8009b82 <HAL_GPIO_Init+0x1d6>
 8009b80:	2300      	movs	r3, #0
 8009b82:	697a      	ldr	r2, [r7, #20]
 8009b84:	f002 0203 	and.w	r2, r2, #3
 8009b88:	0092      	lsls	r2, r2, #2
 8009b8a:	4093      	lsls	r3, r2
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009b92:	4938      	ldr	r1, [pc, #224]	@ (8009c74 <HAL_GPIO_Init+0x2c8>)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	089b      	lsrs	r3, r3, #2
 8009b98:	3302      	adds	r3, #2
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009ba0:	4b39      	ldr	r3, [pc, #228]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	4013      	ands	r3, r2
 8009bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685b      	ldr	r3, [r3, #4]
 8009bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009bc4:	4a30      	ldr	r2, [pc, #192]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8009bca:	4b2f      	ldr	r3, [pc, #188]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	43db      	mvns	r3, r3
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	4013      	ands	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	685b      	ldr	r3, [r3, #4]
 8009bde:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8009be6:	693a      	ldr	r2, [r7, #16]
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8009bee:	4a26      	ldr	r2, [pc, #152]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8009bf4:	4b24      	ldr	r3, [pc, #144]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	43db      	mvns	r3, r3
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	4013      	ands	r3, r2
 8009c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d003      	beq.n	8009c1a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8009c12:	693a      	ldr	r2, [r7, #16]
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8009c22:	4b19      	ldr	r3, [pc, #100]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	43db      	mvns	r3, r3
 8009c2e:	693a      	ldr	r2, [r7, #16]
 8009c30:	4013      	ands	r3, r2
 8009c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009c48:	4a0f      	ldr	r2, [pc, #60]	@ (8009c88 <HAL_GPIO_Init+0x2dc>)
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	3301      	adds	r3, #1
 8009c54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	fa22 f303 	lsr.w	r3, r2, r3
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	f47f aeab 	bne.w	80099bc <HAL_GPIO_Init+0x10>
  }
}
 8009c66:	bf00      	nop
 8009c68:	bf00      	nop
 8009c6a:	371c      	adds	r7, #28
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	40010000 	.word	0x40010000
 8009c78:	48000400 	.word	0x48000400
 8009c7c:	48000800 	.word	0x48000800
 8009c80:	48000c00 	.word	0x48000c00
 8009c84:	48001000 	.word	0x48001000
 8009c88:	58000800 	.word	0x58000800

08009c8c <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b087      	sub	sp, #28
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c96:	2300      	movs	r3, #0
 8009c98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009c9a:	e0bb      	b.n	8009e14 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca4:	683a      	ldr	r2, [r7, #0]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 80ae 	beq.w	8009e0e <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8009cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8009e30 <HAL_GPIO_DeInit+0x1a4>)
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	089b      	lsrs	r3, r3, #2
 8009cb8:	3302      	adds	r3, #2
 8009cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	220f      	movs	r2, #15
 8009cca:	fa02 f303 	lsl.w	r3, r2, r3
 8009cce:	68fa      	ldr	r2, [r7, #12]
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8009cda:	d019      	beq.n	8009d10 <HAL_GPIO_DeInit+0x84>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a55      	ldr	r2, [pc, #340]	@ (8009e34 <HAL_GPIO_DeInit+0x1a8>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d013      	beq.n	8009d0c <HAL_GPIO_DeInit+0x80>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a54      	ldr	r2, [pc, #336]	@ (8009e38 <HAL_GPIO_DeInit+0x1ac>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d00d      	beq.n	8009d08 <HAL_GPIO_DeInit+0x7c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a53      	ldr	r2, [pc, #332]	@ (8009e3c <HAL_GPIO_DeInit+0x1b0>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d007      	beq.n	8009d04 <HAL_GPIO_DeInit+0x78>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a52      	ldr	r2, [pc, #328]	@ (8009e40 <HAL_GPIO_DeInit+0x1b4>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d101      	bne.n	8009d00 <HAL_GPIO_DeInit+0x74>
 8009cfc:	2304      	movs	r3, #4
 8009cfe:	e008      	b.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d00:	2307      	movs	r3, #7
 8009d02:	e006      	b.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d04:	2303      	movs	r3, #3
 8009d06:	e004      	b.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d08:	2302      	movs	r3, #2
 8009d0a:	e002      	b.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e000      	b.n	8009d12 <HAL_GPIO_DeInit+0x86>
 8009d10:	2300      	movs	r3, #0
 8009d12:	697a      	ldr	r2, [r7, #20]
 8009d14:	f002 0203 	and.w	r2, r2, #3
 8009d18:	0092      	lsls	r2, r2, #2
 8009d1a:	4093      	lsls	r3, r2
 8009d1c:	68fa      	ldr	r2, [r7, #12]
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d136      	bne.n	8009d90 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009d22:	4b48      	ldr	r3, [pc, #288]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d24:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	43db      	mvns	r3, r3
 8009d2c:	4945      	ldr	r1, [pc, #276]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d2e:	4013      	ands	r3, r2
 8009d30:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8009d34:	4b43      	ldr	r3, [pc, #268]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d36:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009d3a:	693b      	ldr	r3, [r7, #16]
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	4941      	ldr	r1, [pc, #260]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8009d46:	4b3f      	ldr	r3, [pc, #252]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	693b      	ldr	r3, [r7, #16]
 8009d4c:	43db      	mvns	r3, r3
 8009d4e:	493d      	ldr	r1, [pc, #244]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8009d54:	4b3b      	ldr	r3, [pc, #236]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d56:	685a      	ldr	r2, [r3, #4]
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	43db      	mvns	r3, r3
 8009d5c:	4939      	ldr	r1, [pc, #228]	@ (8009e44 <HAL_GPIO_DeInit+0x1b8>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009d62:	697b      	ldr	r3, [r7, #20]
 8009d64:	f003 0303 	and.w	r3, r3, #3
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	220f      	movs	r2, #15
 8009d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d70:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8009d72:	4a2f      	ldr	r2, [pc, #188]	@ (8009e30 <HAL_GPIO_DeInit+0x1a4>)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	089b      	lsrs	r3, r3, #2
 8009d78:	3302      	adds	r3, #2
 8009d7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	43da      	mvns	r2, r3
 8009d82:	482b      	ldr	r0, [pc, #172]	@ (8009e30 <HAL_GPIO_DeInit+0x1a4>)
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	089b      	lsrs	r3, r3, #2
 8009d88:	400a      	ands	r2, r1
 8009d8a:	3302      	adds	r3, #2
 8009d8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681a      	ldr	r2, [r3, #0]
 8009d94:	697b      	ldr	r3, [r7, #20]
 8009d96:	005b      	lsls	r3, r3, #1
 8009d98:	2103      	movs	r1, #3
 8009d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d9e:	431a      	orrs	r2, r3
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	08da      	lsrs	r2, r3, #3
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	3208      	adds	r2, #8
 8009dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	009b      	lsls	r3, r3, #2
 8009db8:	220f      	movs	r2, #15
 8009dba:	fa02 f303 	lsl.w	r3, r2, r3
 8009dbe:	43db      	mvns	r3, r3
 8009dc0:	697a      	ldr	r2, [r7, #20]
 8009dc2:	08d2      	lsrs	r2, r2, #3
 8009dc4:	4019      	ands	r1, r3
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	3208      	adds	r2, #8
 8009dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	68da      	ldr	r2, [r3, #12]
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	005b      	lsls	r3, r3, #1
 8009dd6:	2103      	movs	r1, #3
 8009dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ddc:	43db      	mvns	r3, r3
 8009dde:	401a      	ands	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	685a      	ldr	r2, [r3, #4]
 8009de8:	2101      	movs	r1, #1
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	fa01 f303 	lsl.w	r3, r1, r3
 8009df0:	43db      	mvns	r3, r3
 8009df2:	401a      	ands	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	689a      	ldr	r2, [r3, #8]
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	005b      	lsls	r3, r3, #1
 8009e00:	2103      	movs	r1, #3
 8009e02:	fa01 f303 	lsl.w	r3, r1, r3
 8009e06:	43db      	mvns	r3, r3
 8009e08:	401a      	ands	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	3301      	adds	r3, #1
 8009e12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	f47f af3d 	bne.w	8009c9c <HAL_GPIO_DeInit+0x10>
  }
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	371c      	adds	r7, #28
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	40010000 	.word	0x40010000
 8009e34:	48000400 	.word	0x48000400
 8009e38:	48000800 	.word	0x48000800
 8009e3c:	48000c00 	.word	0x48000c00
 8009e40:	48001000 	.word	0x48001000
 8009e44:	58000800 	.word	0x58000800

08009e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	807b      	strh	r3, [r7, #2]
 8009e54:	4613      	mov	r3, r2
 8009e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e58:	787b      	ldrb	r3, [r7, #1]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d003      	beq.n	8009e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009e5e:	887a      	ldrh	r2, [r7, #2]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009e64:	e002      	b.n	8009e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8009e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ea8 <HAL_HSEM_IRQHandler+0x30>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009e84:	4b08      	ldr	r3, [pc, #32]	@ (8009ea8 <HAL_HSEM_IRQHandler+0x30>)
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	43db      	mvns	r3, r3
 8009e8c:	4906      	ldr	r1, [pc, #24]	@ (8009ea8 <HAL_HSEM_IRQHandler+0x30>)
 8009e8e:	4013      	ands	r3, r2
 8009e90:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8009e92:	4a05      	ldr	r2, [pc, #20]	@ (8009ea8 <HAL_HSEM_IRQHandler+0x30>)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f807 	bl	8009eac <HAL_HSEM_FreeCallback>
}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	58001500 	.word	0x58001500

08009eac <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009eb4:	bf00      	nop
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d101      	bne.n	8009ed2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e08d      	b.n	8009fee <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d106      	bne.n	8009eec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f000 f8b4 	bl	800a054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2224      	movs	r2, #36	@ 0x24
 8009ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f022 0201 	bic.w	r2, r2, #1
 8009f02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	685a      	ldr	r2, [r3, #4]
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8009f10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d107      	bne.n	8009f3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	689a      	ldr	r2, [r3, #8]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f36:	609a      	str	r2, [r3, #8]
 8009f38:	e006      	b.n	8009f48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8009f46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	2b02      	cmp	r3, #2
 8009f4e:	d108      	bne.n	8009f62 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	685a      	ldr	r2, [r3, #4]
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f5e:	605a      	str	r2, [r3, #4]
 8009f60:	e007      	b.n	8009f72 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009f70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6812      	ldr	r2, [r2, #0]
 8009f7c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009f80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f84:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68da      	ldr	r2, [r3, #12]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	691a      	ldr	r2, [r3, #16]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	695b      	ldr	r3, [r3, #20]
 8009f9e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	699b      	ldr	r3, [r3, #24]
 8009fa6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	430a      	orrs	r2, r1
 8009fae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	69d9      	ldr	r1, [r3, #28]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a1a      	ldr	r2, [r3, #32]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e021      	b.n	800a04c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2224      	movs	r2, #36	@ 0x24
 800a00c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f022 0201 	bic.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f821 	bl	800a068 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2200      	movs	r2, #0
 800a038:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a04a:	2300      	movs	r3, #0
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3708      	adds	r7, #8
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800a054:	b480      	push	{r7}
 800a056:	b083      	sub	sp, #12
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800a05c:	bf00      	nop
 800a05e:	370c      	adds	r7, #12
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af02      	add	r7, sp, #8
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	4608      	mov	r0, r1
 800a086:	4611      	mov	r1, r2
 800a088:	461a      	mov	r2, r3
 800a08a:	4603      	mov	r3, r0
 800a08c:	817b      	strh	r3, [r7, #10]
 800a08e:	460b      	mov	r3, r1
 800a090:	813b      	strh	r3, [r7, #8]
 800a092:	4613      	mov	r3, r2
 800a094:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b20      	cmp	r3, #32
 800a0a0:	f040 80f9 	bne.w	800a296 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <HAL_I2C_Mem_Write+0x34>
 800a0aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d105      	bne.n	800a0bc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a0b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e0ed      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d101      	bne.n	800a0ca <HAL_I2C_Mem_Write+0x4e>
 800a0c6:	2302      	movs	r3, #2
 800a0c8:	e0e6      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2201      	movs	r2, #1
 800a0ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a0d2:	f7fe fa53 	bl	800857c <HAL_GetTick>
 800a0d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	9300      	str	r3, [sp, #0]
 800a0dc:	2319      	movs	r3, #25
 800a0de:	2201      	movs	r2, #1
 800a0e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a0e4:	68f8      	ldr	r0, [r7, #12]
 800a0e6:	f000 fadd 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0d1      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2221      	movs	r2, #33	@ 0x21
 800a0f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2240      	movs	r2, #64	@ 0x40
 800a100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2200      	movs	r2, #0
 800a108:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	6a3a      	ldr	r2, [r7, #32]
 800a10e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	2200      	movs	r2, #0
 800a11a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a11c:	88f8      	ldrh	r0, [r7, #6]
 800a11e:	893a      	ldrh	r2, [r7, #8]
 800a120:	8979      	ldrh	r1, [r7, #10]
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	4603      	mov	r3, r0
 800a12c:	68f8      	ldr	r0, [r7, #12]
 800a12e:	f000 f9ed 	bl	800a50c <I2C_RequestMemoryWrite>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d005      	beq.n	800a144 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e0a9      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a148:	b29b      	uxth	r3, r3
 800a14a:	2bff      	cmp	r3, #255	@ 0xff
 800a14c:	d90e      	bls.n	800a16c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	22ff      	movs	r2, #255	@ 0xff
 800a152:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a158:	b2da      	uxtb	r2, r3
 800a15a:	8979      	ldrh	r1, [r7, #10]
 800a15c:	2300      	movs	r3, #0
 800a15e:	9300      	str	r3, [sp, #0]
 800a160:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 fc61 	bl	800aa2c <I2C_TransferConfig>
 800a16a:	e00f      	b.n	800a18c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a170:	b29a      	uxth	r2, r3
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a17a:	b2da      	uxtb	r2, r3
 800a17c:	8979      	ldrh	r1, [r7, #10]
 800a17e:	2300      	movs	r3, #0
 800a180:	9300      	str	r3, [sp, #0]
 800a182:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a186:	68f8      	ldr	r0, [r7, #12]
 800a188:	f000 fc50 	bl	800aa2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a18c:	697a      	ldr	r2, [r7, #20]
 800a18e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a190:	68f8      	ldr	r0, [r7, #12]
 800a192:	f000 fae0 	bl	800a756 <I2C_WaitOnTXISFlagUntilTimeout>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e07b      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a4:	781a      	ldrb	r2, [r3, #0]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1c8:	3b01      	subs	r3, #1
 800a1ca:	b29a      	uxth	r2, r3
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29b      	uxth	r3, r3
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d034      	beq.n	800a244 <HAL_I2C_Mem_Write+0x1c8>
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d130      	bne.n	800a244 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	9300      	str	r3, [sp, #0]
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	2180      	movs	r1, #128	@ 0x80
 800a1ec:	68f8      	ldr	r0, [r7, #12]
 800a1ee:	f000 fa59 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d001      	beq.n	800a1fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e04d      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a200:	b29b      	uxth	r3, r3
 800a202:	2bff      	cmp	r3, #255	@ 0xff
 800a204:	d90e      	bls.n	800a224 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	22ff      	movs	r2, #255	@ 0xff
 800a20a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a210:	b2da      	uxtb	r2, r3
 800a212:	8979      	ldrh	r1, [r7, #10]
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	f000 fc05 	bl	800aa2c <I2C_TransferConfig>
 800a222:	e00f      	b.n	800a244 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a232:	b2da      	uxtb	r2, r3
 800a234:	8979      	ldrh	r1, [r7, #10]
 800a236:	2300      	movs	r3, #0
 800a238:	9300      	str	r3, [sp, #0]
 800a23a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 fbf4 	bl	800aa2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a248:	b29b      	uxth	r3, r3
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d19e      	bne.n	800a18c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a24e:	697a      	ldr	r2, [r7, #20]
 800a250:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a252:	68f8      	ldr	r0, [r7, #12]
 800a254:	f000 fac6 	bl	800a7e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a258:	4603      	mov	r3, r0
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d001      	beq.n	800a262 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e01a      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2220      	movs	r2, #32
 800a268:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	6859      	ldr	r1, [r3, #4]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a0 <HAL_I2C_Mem_Write+0x224>)
 800a276:	400b      	ands	r3, r1
 800a278:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	2220      	movs	r2, #32
 800a27e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	e000      	b.n	800a298 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800a296:	2302      	movs	r3, #2
  }
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	fe00e800 	.word	0xfe00e800

0800a2a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af02      	add	r7, sp, #8
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	4608      	mov	r0, r1
 800a2ae:	4611      	mov	r1, r2
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	817b      	strh	r3, [r7, #10]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	813b      	strh	r3, [r7, #8]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	2b20      	cmp	r3, #32
 800a2c8:	f040 80fd 	bne.w	800a4c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d002      	beq.n	800a2d8 <HAL_I2C_Mem_Read+0x34>
 800a2d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d105      	bne.n	800a2e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a2de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e0f1      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d101      	bne.n	800a2f2 <HAL_I2C_Mem_Read+0x4e>
 800a2ee:	2302      	movs	r3, #2
 800a2f0:	e0ea      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a2fa:	f7fe f93f 	bl	800857c <HAL_GetTick>
 800a2fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	2319      	movs	r3, #25
 800a306:	2201      	movs	r2, #1
 800a308:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a30c:	68f8      	ldr	r0, [r7, #12]
 800a30e:	f000 f9c9 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a312:	4603      	mov	r3, r0
 800a314:	2b00      	cmp	r3, #0
 800a316:	d001      	beq.n	800a31c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800a318:	2301      	movs	r3, #1
 800a31a:	e0d5      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	2222      	movs	r2, #34	@ 0x22
 800a320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	2240      	movs	r2, #64	@ 0x40
 800a328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2200      	movs	r2, #0
 800a330:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6a3a      	ldr	r2, [r7, #32]
 800a336:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a33c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	2200      	movs	r2, #0
 800a342:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a344:	88f8      	ldrh	r0, [r7, #6]
 800a346:	893a      	ldrh	r2, [r7, #8]
 800a348:	8979      	ldrh	r1, [r7, #10]
 800a34a:	697b      	ldr	r3, [r7, #20]
 800a34c:	9301      	str	r3, [sp, #4]
 800a34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a350:	9300      	str	r3, [sp, #0]
 800a352:	4603      	mov	r3, r0
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 f92d 	bl	800a5b4 <I2C_RequestMemoryRead>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800a368:	2301      	movs	r3, #1
 800a36a:	e0ad      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a370:	b29b      	uxth	r3, r3
 800a372:	2bff      	cmp	r3, #255	@ 0xff
 800a374:	d90e      	bls.n	800a394 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	22ff      	movs	r2, #255	@ 0xff
 800a37a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a380:	b2da      	uxtb	r2, r3
 800a382:	8979      	ldrh	r1, [r7, #10]
 800a384:	4b52      	ldr	r3, [pc, #328]	@ (800a4d0 <HAL_I2C_Mem_Read+0x22c>)
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f000 fb4d 	bl	800aa2c <I2C_TransferConfig>
 800a392:	e00f      	b.n	800a3b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a398:	b29a      	uxth	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3a2:	b2da      	uxtb	r2, r3
 800a3a4:	8979      	ldrh	r1, [r7, #10]
 800a3a6:	4b4a      	ldr	r3, [pc, #296]	@ (800a4d0 <HAL_I2C_Mem_Read+0x22c>)
 800a3a8:	9300      	str	r3, [sp, #0]
 800a3aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 fb3c 	bl	800aa2c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	9300      	str	r3, [sp, #0]
 800a3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	2104      	movs	r1, #4
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f000 f970 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e07c      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d8:	b2d2      	uxtb	r2, r2
 800a3da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e0:	1c5a      	adds	r2, r3, #1
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	3b01      	subs	r3, #1
 800a3fa:	b29a      	uxth	r2, r3
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a404:	b29b      	uxth	r3, r3
 800a406:	2b00      	cmp	r3, #0
 800a408:	d034      	beq.n	800a474 <HAL_I2C_Mem_Read+0x1d0>
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d130      	bne.n	800a474 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	9300      	str	r3, [sp, #0]
 800a416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a418:	2200      	movs	r2, #0
 800a41a:	2180      	movs	r1, #128	@ 0x80
 800a41c:	68f8      	ldr	r0, [r7, #12]
 800a41e:	f000 f941 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a422:	4603      	mov	r3, r0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d001      	beq.n	800a42c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e04d      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a430:	b29b      	uxth	r3, r3
 800a432:	2bff      	cmp	r3, #255	@ 0xff
 800a434:	d90e      	bls.n	800a454 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	22ff      	movs	r2, #255	@ 0xff
 800a43a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a440:	b2da      	uxtb	r2, r3
 800a442:	8979      	ldrh	r1, [r7, #10]
 800a444:	2300      	movs	r3, #0
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a44c:	68f8      	ldr	r0, [r7, #12]
 800a44e:	f000 faed 	bl	800aa2c <I2C_TransferConfig>
 800a452:	e00f      	b.n	800a474 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a458:	b29a      	uxth	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a462:	b2da      	uxtb	r2, r3
 800a464:	8979      	ldrh	r1, [r7, #10]
 800a466:	2300      	movs	r3, #0
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fadc 	bl	800aa2c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a478:	b29b      	uxth	r3, r3
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d19a      	bne.n	800a3b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 f9ae 	bl	800a7e4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d001      	beq.n	800a492 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800a48e:	2301      	movs	r3, #1
 800a490:	e01a      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2220      	movs	r2, #32
 800a498:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	6859      	ldr	r1, [r3, #4]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681a      	ldr	r2, [r3, #0]
 800a4a4:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d4 <HAL_I2C_Mem_Read+0x230>)
 800a4a6:	400b      	ands	r3, r1
 800a4a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	e000      	b.n	800a4c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800a4c6:	2302      	movs	r3, #2
  }
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}
 800a4d0:	80002400 	.word	0x80002400
 800a4d4:	fe00e800 	.word	0xfe00e800

0800a4d8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a4e6:	b2db      	uxtb	r3, r3
}
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	370c      	adds	r7, #12
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f2:	4770      	bx	lr

0800a4f4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b086      	sub	sp, #24
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	4608      	mov	r0, r1
 800a516:	4611      	mov	r1, r2
 800a518:	461a      	mov	r2, r3
 800a51a:	4603      	mov	r3, r0
 800a51c:	817b      	strh	r3, [r7, #10]
 800a51e:	460b      	mov	r3, r1
 800a520:	813b      	strh	r3, [r7, #8]
 800a522:	4613      	mov	r3, r2
 800a524:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800a526:	88fb      	ldrh	r3, [r7, #6]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	8979      	ldrh	r1, [r7, #10]
 800a52c:	4b20      	ldr	r3, [pc, #128]	@ (800a5b0 <I2C_RequestMemoryWrite+0xa4>)
 800a52e:	9300      	str	r3, [sp, #0]
 800a530:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800a534:	68f8      	ldr	r0, [r7, #12]
 800a536:	f000 fa79 	bl	800aa2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a53a:	69fa      	ldr	r2, [r7, #28]
 800a53c:	69b9      	ldr	r1, [r7, #24]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 f909 	bl	800a756 <I2C_WaitOnTXISFlagUntilTimeout>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800a54a:	2301      	movs	r3, #1
 800a54c:	e02c      	b.n	800a5a8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a54e:	88fb      	ldrh	r3, [r7, #6]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d105      	bne.n	800a560 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a554:	893b      	ldrh	r3, [r7, #8]
 800a556:	b2da      	uxtb	r2, r3
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	629a      	str	r2, [r3, #40]	@ 0x28
 800a55e:	e015      	b.n	800a58c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a560:	893b      	ldrh	r3, [r7, #8]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	b29b      	uxth	r3, r3
 800a566:	b2da      	uxtb	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a56e:	69fa      	ldr	r2, [r7, #28]
 800a570:	69b9      	ldr	r1, [r7, #24]
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f000 f8ef 	bl	800a756 <I2C_WaitOnTXISFlagUntilTimeout>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e012      	b.n	800a5a8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a582:	893b      	ldrh	r3, [r7, #8]
 800a584:	b2da      	uxtb	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	9300      	str	r3, [sp, #0]
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	2200      	movs	r2, #0
 800a594:	2180      	movs	r1, #128	@ 0x80
 800a596:	68f8      	ldr	r0, [r7, #12]
 800a598:	f000 f884 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800a5a6:	2300      	movs	r3, #0
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3710      	adds	r7, #16
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	80002000 	.word	0x80002000

0800a5b4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b086      	sub	sp, #24
 800a5b8:	af02      	add	r7, sp, #8
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	4608      	mov	r0, r1
 800a5be:	4611      	mov	r1, r2
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	817b      	strh	r3, [r7, #10]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	813b      	strh	r3, [r7, #8]
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a5ce:	88fb      	ldrh	r3, [r7, #6]
 800a5d0:	b2da      	uxtb	r2, r3
 800a5d2:	8979      	ldrh	r1, [r7, #10]
 800a5d4:	4b20      	ldr	r3, [pc, #128]	@ (800a658 <I2C_RequestMemoryRead+0xa4>)
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	2300      	movs	r3, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fa26 	bl	800aa2c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a5e0:	69fa      	ldr	r2, [r7, #28]
 800a5e2:	69b9      	ldr	r1, [r7, #24]
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f000 f8b6 	bl	800a756 <I2C_WaitOnTXISFlagUntilTimeout>
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d001      	beq.n	800a5f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	e02c      	b.n	800a64e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a5f4:	88fb      	ldrh	r3, [r7, #6]
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d105      	bne.n	800a606 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a5fa:	893b      	ldrh	r3, [r7, #8]
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	629a      	str	r2, [r3, #40]	@ 0x28
 800a604:	e015      	b.n	800a632 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a606:	893b      	ldrh	r3, [r7, #8]
 800a608:	0a1b      	lsrs	r3, r3, #8
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	b2da      	uxtb	r2, r3
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	69b9      	ldr	r1, [r7, #24]
 800a618:	68f8      	ldr	r0, [r7, #12]
 800a61a:	f000 f89c 	bl	800a756 <I2C_WaitOnTXISFlagUntilTimeout>
 800a61e:	4603      	mov	r3, r0
 800a620:	2b00      	cmp	r3, #0
 800a622:	d001      	beq.n	800a628 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	e012      	b.n	800a64e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a628:	893b      	ldrh	r3, [r7, #8]
 800a62a:	b2da      	uxtb	r2, r3
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	2200      	movs	r2, #0
 800a63a:	2140      	movs	r1, #64	@ 0x40
 800a63c:	68f8      	ldr	r0, [r7, #12]
 800a63e:	f000 f831 	bl	800a6a4 <I2C_WaitOnFlagUntilTimeout>
 800a642:	4603      	mov	r3, r0
 800a644:	2b00      	cmp	r3, #0
 800a646:	d001      	beq.n	800a64c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e000      	b.n	800a64e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	80002000 	.word	0x80002000

0800a65c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b083      	sub	sp, #12
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f003 0302 	and.w	r3, r3, #2
 800a66e:	2b02      	cmp	r3, #2
 800a670:	d103      	bne.n	800a67a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2200      	movs	r2, #0
 800a678:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b01      	cmp	r3, #1
 800a686:	d007      	beq.n	800a698 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	699a      	ldr	r2, [r3, #24]
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	f042 0201 	orr.w	r2, r2, #1
 800a696:	619a      	str	r2, [r3, #24]
  }
}
 800a698:	bf00      	nop
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	603b      	str	r3, [r7, #0]
 800a6b0:	4613      	mov	r3, r2
 800a6b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a6b4:	e03b      	b.n	800a72e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a6b6:	69ba      	ldr	r2, [r7, #24]
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 f8d6 	bl	800a86c <I2C_IsErrorOccurred>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e041      	b.n	800a74e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d02d      	beq.n	800a72e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d2:	f7fd ff53 	bl	800857c <HAL_GetTick>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	1ad3      	subs	r3, r2, r3
 800a6dc:	683a      	ldr	r2, [r7, #0]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d302      	bcc.n	800a6e8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d122      	bne.n	800a72e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	699a      	ldr	r2, [r3, #24]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4013      	ands	r3, r2
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	429a      	cmp	r2, r3
 800a6f6:	bf0c      	ite	eq
 800a6f8:	2301      	moveq	r3, #1
 800a6fa:	2300      	movne	r3, #0
 800a6fc:	b2db      	uxtb	r3, r3
 800a6fe:	461a      	mov	r2, r3
 800a700:	79fb      	ldrb	r3, [r7, #7]
 800a702:	429a      	cmp	r2, r3
 800a704:	d113      	bne.n	800a72e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a70a:	f043 0220 	orr.w	r2, r3, #32
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2200      	movs	r2, #0
 800a726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e00f      	b.n	800a74e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	699a      	ldr	r2, [r3, #24]
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4013      	ands	r3, r2
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	bf0c      	ite	eq
 800a73e:	2301      	moveq	r3, #1
 800a740:	2300      	movne	r3, #0
 800a742:	b2db      	uxtb	r3, r3
 800a744:	461a      	mov	r2, r3
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d0b4      	beq.n	800a6b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	60f8      	str	r0, [r7, #12]
 800a75e:	60b9      	str	r1, [r7, #8]
 800a760:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a762:	e033      	b.n	800a7cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	68b9      	ldr	r1, [r7, #8]
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 f87f 	bl	800a86c <I2C_IsErrorOccurred>
 800a76e:	4603      	mov	r3, r0
 800a770:	2b00      	cmp	r3, #0
 800a772:	d001      	beq.n	800a778 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e031      	b.n	800a7dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a77e:	d025      	beq.n	800a7cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a780:	f7fd fefc 	bl	800857c <HAL_GetTick>
 800a784:	4602      	mov	r2, r0
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d302      	bcc.n	800a796 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d11a      	bne.n	800a7cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	f003 0302 	and.w	r3, r3, #2
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	d013      	beq.n	800a7cc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7a8:	f043 0220 	orr.w	r2, r3, #32
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2220      	movs	r2, #32
 800a7b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	e007      	b.n	800a7dc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	f003 0302 	and.w	r3, r3, #2
 800a7d6:	2b02      	cmp	r3, #2
 800a7d8:	d1c4      	bne.n	800a764 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a7f0:	e02f      	b.n	800a852 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7f2:	687a      	ldr	r2, [r7, #4]
 800a7f4:	68b9      	ldr	r1, [r7, #8]
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f000 f838 	bl	800a86c <I2C_IsErrorOccurred>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e02d      	b.n	800a862 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a806:	f7fd feb9 	bl	800857c <HAL_GetTick>
 800a80a:	4602      	mov	r2, r0
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	429a      	cmp	r2, r3
 800a814:	d302      	bcc.n	800a81c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d11a      	bne.n	800a852 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	699b      	ldr	r3, [r3, #24]
 800a822:	f003 0320 	and.w	r3, r3, #32
 800a826:	2b20      	cmp	r3, #32
 800a828:	d013      	beq.n	800a852 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a82e:	f043 0220 	orr.w	r2, r3, #32
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2220      	movs	r2, #32
 800a83a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2200      	movs	r2, #0
 800a842:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e007      	b.n	800a862 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f003 0320 	and.w	r3, r3, #32
 800a85c:	2b20      	cmp	r3, #32
 800a85e:	d1c8      	bne.n	800a7f2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a860:	2300      	movs	r3, #0
}
 800a862:	4618      	mov	r0, r3
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}
	...

0800a86c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b08a      	sub	sp, #40	@ 0x28
 800a870:	af00      	add	r7, sp, #0
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	60b9      	str	r1, [r7, #8]
 800a876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	f003 0310 	and.w	r3, r3, #16
 800a894:	2b00      	cmp	r3, #0
 800a896:	d068      	beq.n	800a96a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2210      	movs	r2, #16
 800a89e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a8a0:	e049      	b.n	800a936 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a8:	d045      	beq.n	800a936 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a8aa:	f7fd fe67 	bl	800857c <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	68ba      	ldr	r2, [r7, #8]
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d302      	bcc.n	800a8c0 <I2C_IsErrorOccurred+0x54>
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d13a      	bne.n	800a936 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a8d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	699b      	ldr	r3, [r3, #24]
 800a8da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a8de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a8e2:	d121      	bne.n	800a928 <I2C_IsErrorOccurred+0xbc>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8ea:	d01d      	beq.n	800a928 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800a8ec:	7cfb      	ldrb	r3, [r7, #19]
 800a8ee:	2b20      	cmp	r3, #32
 800a8f0:	d01a      	beq.n	800a928 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	685a      	ldr	r2, [r3, #4]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a900:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a902:	f7fd fe3b 	bl	800857c <HAL_GetTick>
 800a906:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a908:	e00e      	b.n	800a928 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a90a:	f7fd fe37 	bl	800857c <HAL_GetTick>
 800a90e:	4602      	mov	r2, r0
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	1ad3      	subs	r3, r2, r3
 800a914:	2b19      	cmp	r3, #25
 800a916:	d907      	bls.n	800a928 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	f043 0320 	orr.w	r3, r3, #32
 800a91e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800a926:	e006      	b.n	800a936 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	699b      	ldr	r3, [r3, #24]
 800a92e:	f003 0320 	and.w	r3, r3, #32
 800a932:	2b20      	cmp	r3, #32
 800a934:	d1e9      	bne.n	800a90a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	f003 0320 	and.w	r3, r3, #32
 800a940:	2b20      	cmp	r3, #32
 800a942:	d003      	beq.n	800a94c <I2C_IsErrorOccurred+0xe0>
 800a944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0aa      	beq.n	800a8a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a94c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a950:	2b00      	cmp	r3, #0
 800a952:	d103      	bne.n	800a95c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	2220      	movs	r2, #32
 800a95a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	f043 0304 	orr.w	r3, r3, #4
 800a962:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a964:	2301      	movs	r3, #1
 800a966:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	699b      	ldr	r3, [r3, #24]
 800a970:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a972:	69bb      	ldr	r3, [r7, #24]
 800a974:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d00b      	beq.n	800a994 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a97c:	6a3b      	ldr	r3, [r7, #32]
 800a97e:	f043 0301 	orr.w	r3, r3, #1
 800a982:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a98c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a98e:	2301      	movs	r3, #1
 800a990:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00b      	beq.n	800a9b6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a99e:	6a3b      	ldr	r3, [r7, #32]
 800a9a0:	f043 0308 	orr.w	r3, r3, #8
 800a9a4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a9ae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00b      	beq.n	800a9d8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a9c0:	6a3b      	ldr	r3, [r7, #32]
 800a9c2:	f043 0302 	orr.w	r3, r3, #2
 800a9c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a9d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800a9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d01c      	beq.n	800aa1a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f7ff fe3b 	bl	800a65c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6859      	ldr	r1, [r3, #4]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	4b0d      	ldr	r3, [pc, #52]	@ (800aa28 <I2C_IsErrorOccurred+0x1bc>)
 800a9f2:	400b      	ands	r3, r1
 800a9f4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a9fa:	6a3b      	ldr	r3, [r7, #32]
 800a9fc:	431a      	orrs	r2, r3
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2220      	movs	r2, #32
 800aa06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800aa1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3728      	adds	r7, #40	@ 0x28
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
 800aa26:	bf00      	nop
 800aa28:	fe00e800 	.word	0xfe00e800

0800aa2c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b087      	sub	sp, #28
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	607b      	str	r3, [r7, #4]
 800aa36:	460b      	mov	r3, r1
 800aa38:	817b      	strh	r3, [r7, #10]
 800aa3a:	4613      	mov	r3, r2
 800aa3c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa3e:	897b      	ldrh	r3, [r7, #10]
 800aa40:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa44:	7a7b      	ldrb	r3, [r7, #9]
 800aa46:	041b      	lsls	r3, r3, #16
 800aa48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa4c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800aa52:	6a3b      	ldr	r3, [r7, #32]
 800aa54:	4313      	orrs	r3, r2
 800aa56:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800aa5a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685a      	ldr	r2, [r3, #4]
 800aa62:	6a3b      	ldr	r3, [r7, #32]
 800aa64:	0d5b      	lsrs	r3, r3, #21
 800aa66:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800aa6a:	4b08      	ldr	r3, [pc, #32]	@ (800aa8c <I2C_TransferConfig+0x60>)
 800aa6c:	430b      	orrs	r3, r1
 800aa6e:	43db      	mvns	r3, r3
 800aa70:	ea02 0103 	and.w	r1, r2, r3
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	697a      	ldr	r2, [r7, #20]
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800aa7e:	bf00      	nop
 800aa80:	371c      	adds	r7, #28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa88:	4770      	bx	lr
 800aa8a:	bf00      	nop
 800aa8c:	03ff63ff 	.word	0x03ff63ff

0800aa90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	d138      	bne.n	800ab18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	d101      	bne.n	800aab4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aab0:	2302      	movs	r3, #2
 800aab2:	e032      	b.n	800ab1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2201      	movs	r2, #1
 800aab8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2224      	movs	r2, #36	@ 0x24
 800aac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f022 0201 	bic.w	r2, r2, #1
 800aad2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681a      	ldr	r2, [r3, #0]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800aae2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	6819      	ldr	r1, [r3, #0]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	683a      	ldr	r2, [r7, #0]
 800aaf0:	430a      	orrs	r2, r1
 800aaf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	f042 0201 	orr.w	r2, r2, #1
 800ab02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ab14:	2300      	movs	r3, #0
 800ab16:	e000      	b.n	800ab1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ab18:	2302      	movs	r3, #2
  }
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	370c      	adds	r7, #12
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr

0800ab26 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ab26:	b480      	push	{r7}
 800ab28:	b085      	sub	sp, #20
 800ab2a:	af00      	add	r7, sp, #0
 800ab2c:	6078      	str	r0, [r7, #4]
 800ab2e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b20      	cmp	r3, #32
 800ab3a:	d139      	bne.n	800abb0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e033      	b.n	800abb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2224      	movs	r2, #36	@ 0x24
 800ab56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681a      	ldr	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f022 0201 	bic.w	r2, r2, #1
 800ab68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800ab78:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	021b      	lsls	r3, r3, #8
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	f042 0201 	orr.w	r2, r2, #1
 800ab9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2220      	movs	r2, #32
 800aba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800abac:	2300      	movs	r3, #0
 800abae:	e000      	b.n	800abb2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800abb0:	2302      	movs	r3, #2
  }
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3714      	adds	r7, #20
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
	...

0800abc0 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800abc8:	2300      	movs	r3, #0
 800abca:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d01e      	beq.n	800ac10 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800abd2:	4b13      	ldr	r3, [pc, #76]	@ (800ac20 <HAL_IPCC_Init+0x60>)
 800abd4:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d102      	bne.n	800abe8 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f7f8 fa02 	bl	8002fec <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800abe8:	68b8      	ldr	r0, [r7, #8]
 800abea:	f000 f85b 	bl	800aca4 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f82c 	bl	800ac58 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2201      	movs	r2, #1
 800ac0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800ac0e:	e001      	b.n	800ac14 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800ac10:	2301      	movs	r3, #1
 800ac12:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3710      	adds	r7, #16
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	58000c00 	.word	0x58000c00

0800ac24 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	60b9      	str	r1, [r7, #8]
 800ac2e:	4613      	mov	r3, r2
 800ac30:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800ac32:	bf00      	nop
 800ac34:	3714      	adds	r7, #20
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr

0800ac3e <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800ac3e:	b480      	push	{r7}
 800ac40:	b085      	sub	sp, #20
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	3714      	adds	r7, #20
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800ac60:	2300      	movs	r3, #0
 800ac62:	60fb      	str	r3, [r7, #12]
 800ac64:	e00f      	b.n	800ac86 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800ac66:	687a      	ldr	r2, [r7, #4]
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	4a0b      	ldr	r2, [pc, #44]	@ (800ac9c <IPCC_SetDefaultCallbacks+0x44>)
 800ac70:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	3306      	adds	r3, #6
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	4a08      	ldr	r2, [pc, #32]	@ (800aca0 <IPCC_SetDefaultCallbacks+0x48>)
 800ac7e:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b05      	cmp	r3, #5
 800ac8a:	d9ec      	bls.n	800ac66 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800ac8c:	bf00      	nop
 800ac8e:	bf00      	nop
 800ac90:	3714      	adds	r7, #20
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	0800ac25 	.word	0x0800ac25
 800aca0:	0800ac3f 	.word	0x0800ac3f

0800aca4 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2200      	movs	r2, #0
 800acb0:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800acb8:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	223f      	movs	r2, #63	@ 0x3f
 800acbe:	609a      	str	r2, [r3, #8]
}
 800acc0:	bf00      	nop
 800acc2:	370c      	adds	r7, #12
 800acc4:	46bd      	mov	sp, r7
 800acc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acca:	4770      	bx	lr

0800accc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d101      	bne.n	800acde <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800acda:	2301      	movs	r3, #1
 800acdc:	e0c0      	b.n	800ae60 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d106      	bne.n	800acf8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7f8 fa46 	bl	8003184 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2203      	movs	r2, #3
 800acfc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f002 fe31 	bl	800d96c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	73fb      	strb	r3, [r7, #15]
 800ad0e:	e03e      	b.n	800ad8e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ad10:	7bfa      	ldrb	r2, [r7, #15]
 800ad12:	6879      	ldr	r1, [r7, #4]
 800ad14:	4613      	mov	r3, r2
 800ad16:	009b      	lsls	r3, r3, #2
 800ad18:	4413      	add	r3, r2
 800ad1a:	00db      	lsls	r3, r3, #3
 800ad1c:	440b      	add	r3, r1
 800ad1e:	3311      	adds	r3, #17
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	6879      	ldr	r1, [r7, #4]
 800ad28:	4613      	mov	r3, r2
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	4413      	add	r3, r2
 800ad2e:	00db      	lsls	r3, r3, #3
 800ad30:	440b      	add	r3, r1
 800ad32:	3310      	adds	r3, #16
 800ad34:	7bfa      	ldrb	r2, [r7, #15]
 800ad36:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ad38:	7bfa      	ldrb	r2, [r7, #15]
 800ad3a:	6879      	ldr	r1, [r7, #4]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	00db      	lsls	r3, r3, #3
 800ad44:	440b      	add	r3, r1
 800ad46:	3313      	adds	r3, #19
 800ad48:	2200      	movs	r2, #0
 800ad4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ad4c:	7bfa      	ldrb	r2, [r7, #15]
 800ad4e:	6879      	ldr	r1, [r7, #4]
 800ad50:	4613      	mov	r3, r2
 800ad52:	009b      	lsls	r3, r3, #2
 800ad54:	4413      	add	r3, r2
 800ad56:	00db      	lsls	r3, r3, #3
 800ad58:	440b      	add	r3, r1
 800ad5a:	3320      	adds	r3, #32
 800ad5c:	2200      	movs	r2, #0
 800ad5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ad60:	7bfa      	ldrb	r2, [r7, #15]
 800ad62:	6879      	ldr	r1, [r7, #4]
 800ad64:	4613      	mov	r3, r2
 800ad66:	009b      	lsls	r3, r3, #2
 800ad68:	4413      	add	r3, r2
 800ad6a:	00db      	lsls	r3, r3, #3
 800ad6c:	440b      	add	r3, r1
 800ad6e:	3324      	adds	r3, #36	@ 0x24
 800ad70:	2200      	movs	r2, #0
 800ad72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	1c5a      	adds	r2, r3, #1
 800ad7a:	4613      	mov	r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	4413      	add	r3, r2
 800ad80:	00db      	lsls	r3, r3, #3
 800ad82:	440b      	add	r3, r1
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	73fb      	strb	r3, [r7, #15]
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	791b      	ldrb	r3, [r3, #4]
 800ad92:	7bfa      	ldrb	r2, [r7, #15]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d3bb      	bcc.n	800ad10 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	73fb      	strb	r3, [r7, #15]
 800ad9c:	e044      	b.n	800ae28 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ad9e:	7bfa      	ldrb	r2, [r7, #15]
 800ada0:	6879      	ldr	r1, [r7, #4]
 800ada2:	4613      	mov	r3, r2
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	4413      	add	r3, r2
 800ada8:	00db      	lsls	r3, r3, #3
 800adaa:	440b      	add	r3, r1
 800adac:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800adb0:	2200      	movs	r2, #0
 800adb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800adb4:	7bfa      	ldrb	r2, [r7, #15]
 800adb6:	6879      	ldr	r1, [r7, #4]
 800adb8:	4613      	mov	r3, r2
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	4413      	add	r3, r2
 800adbe:	00db      	lsls	r3, r3, #3
 800adc0:	440b      	add	r3, r1
 800adc2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800adc6:	7bfa      	ldrb	r2, [r7, #15]
 800adc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800adca:	7bfa      	ldrb	r2, [r7, #15]
 800adcc:	6879      	ldr	r1, [r7, #4]
 800adce:	4613      	mov	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	00db      	lsls	r3, r3, #3
 800add6:	440b      	add	r3, r1
 800add8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800addc:	2200      	movs	r2, #0
 800adde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ade0:	7bfa      	ldrb	r2, [r7, #15]
 800ade2:	6879      	ldr	r1, [r7, #4]
 800ade4:	4613      	mov	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	00db      	lsls	r3, r3, #3
 800adec:	440b      	add	r3, r1
 800adee:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 800adf2:	2200      	movs	r2, #0
 800adf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800adf6:	7bfa      	ldrb	r2, [r7, #15]
 800adf8:	6879      	ldr	r1, [r7, #4]
 800adfa:	4613      	mov	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	00db      	lsls	r3, r3, #3
 800ae02:	440b      	add	r3, r1
 800ae04:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae08:	2200      	movs	r2, #0
 800ae0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae0c:	7bfa      	ldrb	r2, [r7, #15]
 800ae0e:	6879      	ldr	r1, [r7, #4]
 800ae10:	4613      	mov	r3, r2
 800ae12:	009b      	lsls	r3, r3, #2
 800ae14:	4413      	add	r3, r2
 800ae16:	00db      	lsls	r3, r3, #3
 800ae18:	440b      	add	r3, r1
 800ae1a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800ae1e:	2200      	movs	r2, #0
 800ae20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae22:	7bfb      	ldrb	r3, [r7, #15]
 800ae24:	3301      	adds	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	791b      	ldrb	r3, [r3, #4]
 800ae2c:	7bfa      	ldrb	r2, [r7, #15]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d3b5      	bcc.n	800ad9e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	6818      	ldr	r0, [r3, #0]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	3304      	adds	r3, #4
 800ae3a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800ae3e:	f002 fdb0 	bl	800d9a2 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2200      	movs	r2, #0
 800ae46:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	7a9b      	ldrb	r3, [r3, #10]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d102      	bne.n	800ae5e <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 f805 	bl	800ae68 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2201      	movs	r2, #1
 800ae7a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	b29a      	uxth	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800aea0:	b29b      	uxth	r3, r3
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	b29a      	uxth	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aec0:	4b05      	ldr	r3, [pc, #20]	@ (800aed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	4a04      	ldr	r2, [pc, #16]	@ (800aed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800aec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aeca:	6013      	str	r3, [r2, #0]
}
 800aecc:	bf00      	nop
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	58000400 	.word	0x58000400

0800aedc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800aedc:	b480      	push	{r7}
 800aede:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800aee0:	4b04      	ldr	r3, [pc, #16]	@ (800aef4 <HAL_PWREx_GetVoltageRange+0x18>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr
 800aef2:	bf00      	nop
 800aef4:	58000400 	.word	0x58000400

0800aef8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800aefc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800af06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800af0a:	d101      	bne.n	800af10 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800af0c:	2301      	movs	r3, #1
 800af0e:	e000      	b.n	800af12 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	46bd      	mov	sp, r7
 800af16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1a:	4770      	bx	lr

0800af1c <LL_RCC_HSE_Enable>:
{
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800af20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af2e:	6013      	str	r3, [r2, #0]
}
 800af30:	bf00      	nop
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr

0800af3a <LL_RCC_HSE_Disable>:
{
 800af3a:	b480      	push	{r7}
 800af3c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800af3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af4c:	6013      	str	r3, [r2, #0]
}
 800af4e:	bf00      	nop
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <LL_RCC_HSE_IsReady>:
{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800af5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800af66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800af6a:	d101      	bne.n	800af70 <LL_RCC_HSE_IsReady+0x18>
 800af6c:	2301      	movs	r3, #1
 800af6e:	e000      	b.n	800af72 <LL_RCC_HSE_IsReady+0x1a>
 800af70:	2300      	movs	r3, #0
}
 800af72:	4618      	mov	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <LL_RCC_HSI_Enable>:
{
 800af7c:	b480      	push	{r7}
 800af7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800af80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800af8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af8e:	6013      	str	r3, [r2, #0]
}
 800af90:	bf00      	nop
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <LL_RCC_HSI_Disable>:
{
 800af9a:	b480      	push	{r7}
 800af9c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800af9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800afa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afac:	6013      	str	r3, [r2, #0]
}
 800afae:	bf00      	nop
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr

0800afb8 <LL_RCC_HSI_IsReady>:
{
 800afb8:	b480      	push	{r7}
 800afba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800afbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afca:	d101      	bne.n	800afd0 <LL_RCC_HSI_IsReady+0x18>
 800afcc:	2301      	movs	r3, #1
 800afce:	e000      	b.n	800afd2 <LL_RCC_HSI_IsReady+0x1a>
 800afd0:	2300      	movs	r3, #0
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <LL_RCC_HSI_SetCalibTrimming>:
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800afe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	061b      	lsls	r3, r3, #24
 800aff2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aff6:	4313      	orrs	r3, r2
 800aff8:	604b      	str	r3, [r1, #4]
}
 800affa:	bf00      	nop
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <LL_RCC_HSI48_Enable>:
{
 800b006:	b480      	push	{r7}
 800b008:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b00a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b00e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b016:	f043 0301 	orr.w	r3, r3, #1
 800b01a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b01e:	bf00      	nop
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr

0800b028 <LL_RCC_HSI48_Disable>:
{
 800b028:	b480      	push	{r7}
 800b02a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800b02c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b030:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b034:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b038:	f023 0301 	bic.w	r3, r3, #1
 800b03c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800b040:	bf00      	nop
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <LL_RCC_HSI48_IsReady>:
{
 800b04a:	b480      	push	{r7}
 800b04c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800b04e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b052:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b056:	f003 0302 	and.w	r3, r3, #2
 800b05a:	2b02      	cmp	r3, #2
 800b05c:	d101      	bne.n	800b062 <LL_RCC_HSI48_IsReady+0x18>
 800b05e:	2301      	movs	r3, #1
 800b060:	e000      	b.n	800b064 <LL_RCC_HSI48_IsReady+0x1a>
 800b062:	2300      	movs	r3, #0
}
 800b064:	4618      	mov	r0, r3
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr

0800b06e <LL_RCC_LSE_Enable>:
{
 800b06e:	b480      	push	{r7}
 800b070:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b072:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b07a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b07e:	f043 0301 	orr.w	r3, r3, #1
 800b082:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b086:	bf00      	nop
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <LL_RCC_LSE_Disable>:
{
 800b090:	b480      	push	{r7}
 800b092:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800b094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b09c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0a0:	f023 0301 	bic.w	r3, r3, #1
 800b0a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b0a8:	bf00      	nop
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr

0800b0b2 <LL_RCC_LSE_EnableBypass>:
{
 800b0b2:	b480      	push	{r7}
 800b0b4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0c2:	f043 0304 	orr.w	r3, r3, #4
 800b0c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b0ca:	bf00      	nop
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <LL_RCC_LSE_DisableBypass>:
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800b0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b0e4:	f023 0304 	bic.w	r3, r3, #4
 800b0e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b0ec:	bf00      	nop
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f4:	4770      	bx	lr

0800b0f6 <LL_RCC_LSE_IsReady>:
{
 800b0f6:	b480      	push	{r7}
 800b0f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b0fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b0fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b02      	cmp	r3, #2
 800b108:	d101      	bne.n	800b10e <LL_RCC_LSE_IsReady+0x18>
 800b10a:	2301      	movs	r3, #1
 800b10c:	e000      	b.n	800b110 <LL_RCC_LSE_IsReady+0x1a>
 800b10e:	2300      	movs	r3, #0
}
 800b110:	4618      	mov	r0, r3
 800b112:	46bd      	mov	sp, r7
 800b114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b118:	4770      	bx	lr

0800b11a <LL_RCC_LSI1_Enable>:
{
 800b11a:	b480      	push	{r7}
 800b11c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b126:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b132:	bf00      	nop
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <LL_RCC_LSI1_Disable>:
{
 800b13c:	b480      	push	{r7}
 800b13e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800b140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b144:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b154:	bf00      	nop
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr

0800b15e <LL_RCC_LSI1_IsReady>:
{
 800b15e:	b480      	push	{r7}
 800b160:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800b162:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b16a:	f003 0302 	and.w	r3, r3, #2
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d101      	bne.n	800b176 <LL_RCC_LSI1_IsReady+0x18>
 800b172:	2301      	movs	r3, #1
 800b174:	e000      	b.n	800b178 <LL_RCC_LSI1_IsReady+0x1a>
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <LL_RCC_LSI2_Enable>:
{
 800b182:	b480      	push	{r7}
 800b184:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b186:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b18a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b18e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b192:	f043 0304 	orr.w	r3, r3, #4
 800b196:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b19a:	bf00      	nop
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <LL_RCC_LSI2_Disable>:
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800b1a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b1b4:	f023 0304 	bic.w	r3, r3, #4
 800b1b8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800b1bc:	bf00      	nop
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr

0800b1c6 <LL_RCC_LSI2_IsReady>:
{
 800b1c6:	b480      	push	{r7}
 800b1c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800b1ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1d2:	f003 0308 	and.w	r3, r3, #8
 800b1d6:	2b08      	cmp	r3, #8
 800b1d8:	d101      	bne.n	800b1de <LL_RCC_LSI2_IsReady+0x18>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e000      	b.n	800b1e0 <LL_RCC_LSI2_IsReady+0x1a>
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <LL_RCC_LSI2_SetTrimming>:
{
 800b1ea:	b480      	push	{r7}
 800b1ec:	b083      	sub	sp, #12
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800b1f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b1f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b1fa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	021b      	lsls	r3, r3, #8
 800b202:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b206:	4313      	orrs	r3, r2
 800b208:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <LL_RCC_MSI_Enable>:
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800b21c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b226:	f043 0301 	orr.w	r3, r3, #1
 800b22a:	6013      	str	r3, [r2, #0]
}
 800b22c:	bf00      	nop
 800b22e:	46bd      	mov	sp, r7
 800b230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b234:	4770      	bx	lr

0800b236 <LL_RCC_MSI_Disable>:
{
 800b236:	b480      	push	{r7}
 800b238:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800b23a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b244:	f023 0301 	bic.w	r3, r3, #1
 800b248:	6013      	str	r3, [r2, #0]
}
 800b24a:	bf00      	nop
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <LL_RCC_MSI_IsReady>:
{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800b258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0302 	and.w	r3, r3, #2
 800b262:	2b02      	cmp	r3, #2
 800b264:	d101      	bne.n	800b26a <LL_RCC_MSI_IsReady+0x16>
 800b266:	2301      	movs	r3, #1
 800b268:	e000      	b.n	800b26c <LL_RCC_MSI_IsReady+0x18>
 800b26a:	2300      	movs	r3, #0
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	46bd      	mov	sp, r7
 800b270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b274:	4770      	bx	lr

0800b276 <LL_RCC_MSI_SetRange>:
{
 800b276:	b480      	push	{r7}
 800b278:	b083      	sub	sp, #12
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800b27e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b288:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	4313      	orrs	r3, r2
 800b290:	600b      	str	r3, [r1, #0]
}
 800b292:	bf00      	nop
 800b294:	370c      	adds	r7, #12
 800b296:	46bd      	mov	sp, r7
 800b298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29c:	4770      	bx	lr

0800b29e <LL_RCC_MSI_GetRange>:
{
 800b29e:	b480      	push	{r7}
 800b2a0:	b083      	sub	sp, #12
 800b2a2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800b2a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b2ae:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2bb0      	cmp	r3, #176	@ 0xb0
 800b2b4:	d901      	bls.n	800b2ba <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800b2b6:	23b0      	movs	r3, #176	@ 0xb0
 800b2b8:	607b      	str	r3, [r7, #4]
  return msiRange;
 800b2ba:	687b      	ldr	r3, [r7, #4]
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <LL_RCC_MSI_SetCalibTrimming>:
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800b2d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	021b      	lsls	r3, r3, #8
 800b2de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	604b      	str	r3, [r1, #4]
}
 800b2e6:	bf00      	nop
 800b2e8:	370c      	adds	r7, #12
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <LL_RCC_SetSysClkSource>:
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b083      	sub	sp, #12
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800b2fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	f023 0203 	bic.w	r2, r3, #3
 800b304:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4313      	orrs	r3, r2
 800b30c:	608b      	str	r3, [r1, #8]
}
 800b30e:	bf00      	nop
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <LL_RCC_GetSysClkSource>:
{
 800b31a:	b480      	push	{r7}
 800b31c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800b31e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	f003 030c 	and.w	r3, r3, #12
}
 800b328:	4618      	mov	r0, r3
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <LL_RCC_SetAHBPrescaler>:
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800b33a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b33e:	689b      	ldr	r3, [r3, #8]
 800b340:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	608b      	str	r3, [r1, #8]
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr

0800b35a <LL_C2_RCC_SetAHBPrescaler>:
{
 800b35a:	b480      	push	{r7}
 800b35c:	b083      	sub	sp, #12
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800b362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b366:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b36a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b36e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	4313      	orrs	r3, r2
 800b376:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b37a:	bf00      	nop
 800b37c:	370c      	adds	r7, #12
 800b37e:	46bd      	mov	sp, r7
 800b380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b384:	4770      	bx	lr

0800b386 <LL_RCC_SetAHB4Prescaler>:
{
 800b386:	b480      	push	{r7}
 800b388:	b083      	sub	sp, #12
 800b38a:	af00      	add	r7, sp, #0
 800b38c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800b38e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b392:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b396:	f023 020f 	bic.w	r2, r3, #15
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	091b      	lsrs	r3, r3, #4
 800b39e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800b3a8:	bf00      	nop
 800b3aa:	370c      	adds	r7, #12
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b2:	4770      	bx	lr

0800b3b4 <LL_RCC_SetAPB1Prescaler>:
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b083      	sub	sp, #12
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800b3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b3c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	608b      	str	r3, [r1, #8]
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr

0800b3dc <LL_RCC_SetAPB2Prescaler>:
{
 800b3dc:	b480      	push	{r7}
 800b3de:	b083      	sub	sp, #12
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800b3e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3e8:	689b      	ldr	r3, [r3, #8]
 800b3ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b3ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	608b      	str	r3, [r1, #8]
}
 800b3f8:	bf00      	nop
 800b3fa:	370c      	adds	r7, #12
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b402:	4770      	bx	lr

0800b404 <LL_RCC_GetAHBPrescaler>:
{
 800b404:	b480      	push	{r7}
 800b406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800b408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b40c:	689b      	ldr	r3, [r3, #8]
 800b40e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b412:	4618      	mov	r0, r3
 800b414:	46bd      	mov	sp, r7
 800b416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41a:	4770      	bx	lr

0800b41c <LL_RCC_GetAHB4Prescaler>:
{
 800b41c:	b480      	push	{r7}
 800b41e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800b420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b424:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b428:	011b      	lsls	r3, r3, #4
 800b42a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800b42e:	4618      	mov	r0, r3
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <LL_RCC_GetAPB1Prescaler>:
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800b43c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800b446:	4618      	mov	r0, r3
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <LL_RCC_GetAPB2Prescaler>:
{
 800b450:	b480      	push	{r7}
 800b452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800b454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800b45e:	4618      	mov	r0, r3
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <LL_RCC_PLL_Enable>:
{
 800b468:	b480      	push	{r7}
 800b46a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800b46c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b476:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b47a:	6013      	str	r3, [r2, #0]
}
 800b47c:	bf00      	nop
 800b47e:	46bd      	mov	sp, r7
 800b480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b484:	4770      	bx	lr

0800b486 <LL_RCC_PLL_Disable>:
{
 800b486:	b480      	push	{r7}
 800b488:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800b48a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b494:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b498:	6013      	str	r3, [r2, #0]
}
 800b49a:	bf00      	nop
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr

0800b4a4 <LL_RCC_PLL_IsReady>:
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800b4a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4b6:	d101      	bne.n	800b4bc <LL_RCC_PLL_IsReady+0x18>
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e000      	b.n	800b4be <LL_RCC_PLL_IsReady+0x1a>
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <LL_RCC_PLL_GetN>:
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800b4cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	0a1b      	lsrs	r3, r3, #8
 800b4d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <LL_RCC_PLL_GetR>:
{
 800b4e2:	b480      	push	{r7}
 800b4e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800b4e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ea:	68db      	ldr	r3, [r3, #12]
 800b4ec:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <LL_RCC_PLL_GetDivider>:
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800b4fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b502:	68db      	ldr	r3, [r3, #12]
 800b504:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800b508:	4618      	mov	r0, r3
 800b50a:	46bd      	mov	sp, r7
 800b50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b510:	4770      	bx	lr

0800b512 <LL_RCC_PLL_GetMainSource>:
{
 800b512:	b480      	push	{r7}
 800b514:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800b516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	f003 0303 	and.w	r3, r3, #3
}
 800b520:	4618      	mov	r0, r3
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <LL_RCC_IsActiveFlag_HPRE>:
{
 800b52a:	b480      	push	{r7}
 800b52c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800b52e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b53c:	d101      	bne.n	800b542 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800b53e:	2301      	movs	r3, #1
 800b540:	e000      	b.n	800b544 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr

0800b54e <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800b54e:	b480      	push	{r7}
 800b550:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800b552:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b556:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b55a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b55e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b562:	d101      	bne.n	800b568 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800b564:	2301      	movs	r3, #1
 800b566:	e000      	b.n	800b56a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800b574:	b480      	push	{r7}
 800b576:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800b578:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b57c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800b580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b588:	d101      	bne.n	800b58e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800b58a:	2301      	movs	r3, #1
 800b58c:	e000      	b.n	800b590 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800b58e:	2300      	movs	r3, #0
}
 800b590:	4618      	mov	r0, r3
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <LL_RCC_IsActiveFlag_PPRE1>:
{
 800b59a:	b480      	push	{r7}
 800b59c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800b59e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5ac:	d101      	bne.n	800b5b2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	e000      	b.n	800b5b4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <LL_RCC_IsActiveFlag_PPRE2>:
{
 800b5be:	b480      	push	{r7}
 800b5c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800b5c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5c6:	689b      	ldr	r3, [r3, #8]
 800b5c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5d0:	d101      	bne.n	800b5d6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	e000      	b.n	800b5d8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
	...

0800b5e4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5e4:	b590      	push	{r4, r7, lr}
 800b5e6:	b08d      	sub	sp, #52	@ 0x34
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e363      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0320 	and.w	r3, r3, #32
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 808d 	beq.w	800b71e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b604:	f7ff fe89 	bl	800b31a <LL_RCC_GetSysClkSource>
 800b608:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b60a:	f7ff ff82 	bl	800b512 <LL_RCC_PLL_GetMainSource>
 800b60e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800b610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b612:	2b00      	cmp	r3, #0
 800b614:	d005      	beq.n	800b622 <HAL_RCC_OscConfig+0x3e>
 800b616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b618:	2b0c      	cmp	r3, #12
 800b61a:	d147      	bne.n	800b6ac <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800b61c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d144      	bne.n	800b6ac <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	69db      	ldr	r3, [r3, #28]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d101      	bne.n	800b62e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800b62a:	2301      	movs	r3, #1
 800b62c:	e347      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800b632:	f7ff fe34 	bl	800b29e <LL_RCC_MSI_GetRange>
 800b636:	4603      	mov	r3, r0
 800b638:	429c      	cmp	r4, r3
 800b63a:	d914      	bls.n	800b666 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b640:	4618      	mov	r0, r3
 800b642:	f000 fd2f 	bl	800c0a4 <RCC_SetFlashLatencyFromMSIRange>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d001      	beq.n	800b650 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800b64c:	2301      	movs	r3, #1
 800b64e:	e336      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff fe0e 	bl	800b276 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6a1b      	ldr	r3, [r3, #32]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff fe32 	bl	800b2c8 <LL_RCC_MSI_SetCalibTrimming>
 800b664:	e013      	b.n	800b68e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff fe03 	bl	800b276 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6a1b      	ldr	r3, [r3, #32]
 800b674:	4618      	mov	r0, r3
 800b676:	f7ff fe27 	bl	800b2c8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b67e:	4618      	mov	r0, r3
 800b680:	f000 fd10 	bl	800c0a4 <RCC_SetFlashLatencyFromMSIRange>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d001      	beq.n	800b68e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800b68a:	2301      	movs	r3, #1
 800b68c:	e317      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b68e:	f000 fcc9 	bl	800c024 <HAL_RCC_GetHCLKFreq>
 800b692:	4603      	mov	r3, r0
 800b694:	4aa4      	ldr	r2, [pc, #656]	@ (800b928 <HAL_RCC_OscConfig+0x344>)
 800b696:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b698:	4ba4      	ldr	r3, [pc, #656]	@ (800b92c <HAL_RCC_OscConfig+0x348>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7fc ff1f 	bl	80084e0 <HAL_InitTick>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d039      	beq.n	800b71c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e308      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d01e      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b6b4:	f7ff fdb0 	bl	800b218 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b6b8:	f7fc ff60 	bl	800857c <HAL_GetTick>
 800b6bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800b6be:	e008      	b.n	800b6d2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b6c0:	f7fc ff5c 	bl	800857c <HAL_GetTick>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	2b02      	cmp	r3, #2
 800b6cc:	d901      	bls.n	800b6d2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b6ce:	2303      	movs	r3, #3
 800b6d0:	e2f5      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800b6d2:	f7ff fdbf 	bl	800b254 <LL_RCC_MSI_IsReady>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0f1      	beq.n	800b6c0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f7ff fdc8 	bl	800b276 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6a1b      	ldr	r3, [r3, #32]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff fdec 	bl	800b2c8 <LL_RCC_MSI_SetCalibTrimming>
 800b6f0:	e015      	b.n	800b71e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b6f2:	f7ff fda0 	bl	800b236 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b6f6:	f7fc ff41 	bl	800857c <HAL_GetTick>
 800b6fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800b6fc:	e008      	b.n	800b710 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b6fe:	f7fc ff3d 	bl	800857c <HAL_GetTick>
 800b702:	4602      	mov	r2, r0
 800b704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d901      	bls.n	800b710 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800b70c:	2303      	movs	r3, #3
 800b70e:	e2d6      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800b710:	f7ff fda0 	bl	800b254 <LL_RCC_MSI_IsReady>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d1f1      	bne.n	800b6fe <HAL_RCC_OscConfig+0x11a>
 800b71a:	e000      	b.n	800b71e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800b71c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f003 0301 	and.w	r3, r3, #1
 800b726:	2b00      	cmp	r3, #0
 800b728:	d047      	beq.n	800b7ba <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b72a:	f7ff fdf6 	bl	800b31a <LL_RCC_GetSysClkSource>
 800b72e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b730:	f7ff feef 	bl	800b512 <LL_RCC_PLL_GetMainSource>
 800b734:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800b736:	6a3b      	ldr	r3, [r7, #32]
 800b738:	2b08      	cmp	r3, #8
 800b73a:	d005      	beq.n	800b748 <HAL_RCC_OscConfig+0x164>
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	2b0c      	cmp	r3, #12
 800b740:	d108      	bne.n	800b754 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	2b03      	cmp	r3, #3
 800b746:	d105      	bne.n	800b754 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	685b      	ldr	r3, [r3, #4]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d134      	bne.n	800b7ba <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	e2b4      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b75c:	d102      	bne.n	800b764 <HAL_RCC_OscConfig+0x180>
 800b75e:	f7ff fbdd 	bl	800af1c <LL_RCC_HSE_Enable>
 800b762:	e001      	b.n	800b768 <HAL_RCC_OscConfig+0x184>
 800b764:	f7ff fbe9 	bl	800af3a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d012      	beq.n	800b796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b770:	f7fc ff04 	bl	800857c <HAL_GetTick>
 800b774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800b776:	e008      	b.n	800b78a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b778:	f7fc ff00 	bl	800857c <HAL_GetTick>
 800b77c:	4602      	mov	r2, r0
 800b77e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	2b64      	cmp	r3, #100	@ 0x64
 800b784:	d901      	bls.n	800b78a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b786:	2303      	movs	r3, #3
 800b788:	e299      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800b78a:	f7ff fbe5 	bl	800af58 <LL_RCC_HSE_IsReady>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	d0f1      	beq.n	800b778 <HAL_RCC_OscConfig+0x194>
 800b794:	e011      	b.n	800b7ba <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b796:	f7fc fef1 	bl	800857c <HAL_GetTick>
 800b79a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800b79c:	e008      	b.n	800b7b0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b79e:	f7fc feed 	bl	800857c <HAL_GetTick>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	2b64      	cmp	r3, #100	@ 0x64
 800b7aa:	d901      	bls.n	800b7b0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b7ac:	2303      	movs	r3, #3
 800b7ae:	e286      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800b7b0:	f7ff fbd2 	bl	800af58 <LL_RCC_HSE_IsReady>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d1f1      	bne.n	800b79e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f003 0302 	and.w	r3, r3, #2
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d04c      	beq.n	800b860 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7c6:	f7ff fda8 	bl	800b31a <LL_RCC_GetSysClkSource>
 800b7ca:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7cc:	f7ff fea1 	bl	800b512 <LL_RCC_PLL_GetMainSource>
 800b7d0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	2b04      	cmp	r3, #4
 800b7d6:	d005      	beq.n	800b7e4 <HAL_RCC_OscConfig+0x200>
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	2b0c      	cmp	r3, #12
 800b7dc:	d10e      	bne.n	800b7fc <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	2b02      	cmp	r3, #2
 800b7e2:	d10b      	bne.n	800b7fc <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d101      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	e266      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7ff fbf1 	bl	800afdc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800b7fa:	e031      	b.n	800b860 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	68db      	ldr	r3, [r3, #12]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d019      	beq.n	800b838 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b804:	f7ff fbba 	bl	800af7c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b808:	f7fc feb8 	bl	800857c <HAL_GetTick>
 800b80c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800b80e:	e008      	b.n	800b822 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b810:	f7fc feb4 	bl	800857c <HAL_GetTick>
 800b814:	4602      	mov	r2, r0
 800b816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d901      	bls.n	800b822 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b81e:	2303      	movs	r3, #3
 800b820:	e24d      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b822:	f7ff fbc9 	bl	800afb8 <LL_RCC_HSI_IsReady>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0f1      	beq.n	800b810 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff fbd3 	bl	800afdc <LL_RCC_HSI_SetCalibTrimming>
 800b836:	e013      	b.n	800b860 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b838:	f7ff fbaf 	bl	800af9a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b83c:	f7fc fe9e 	bl	800857c <HAL_GetTick>
 800b840:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b842:	e008      	b.n	800b856 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b844:	f7fc fe9a 	bl	800857c <HAL_GetTick>
 800b848:	4602      	mov	r2, r0
 800b84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	2b02      	cmp	r3, #2
 800b850:	d901      	bls.n	800b856 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b852:	2303      	movs	r3, #3
 800b854:	e233      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b856:	f7ff fbaf 	bl	800afb8 <LL_RCC_HSI_IsReady>
 800b85a:	4603      	mov	r3, r0
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1f1      	bne.n	800b844 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	f003 0308 	and.w	r3, r3, #8
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d106      	bne.n	800b87a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 80a3 	beq.w	800b9c0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d076      	beq.n	800b970 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	f003 0310 	and.w	r3, r3, #16
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d046      	beq.n	800b91c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b88e:	f7ff fc66 	bl	800b15e <LL_RCC_LSI1_IsReady>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d113      	bne.n	800b8c0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b898:	f7ff fc3f 	bl	800b11a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b89c:	f7fc fe6e 	bl	800857c <HAL_GetTick>
 800b8a0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b8a2:	e008      	b.n	800b8b6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b8a4:	f7fc fe6a 	bl	800857c <HAL_GetTick>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d901      	bls.n	800b8b6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b8b2:	2303      	movs	r3, #3
 800b8b4:	e203      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b8b6:	f7ff fc52 	bl	800b15e <LL_RCC_LSI1_IsReady>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d0f1      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b8c0:	f7ff fc5f 	bl	800b182 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c4:	f7fc fe5a 	bl	800857c <HAL_GetTick>
 800b8c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b8ca:	e008      	b.n	800b8de <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b8cc:	f7fc fe56 	bl	800857c <HAL_GetTick>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d4:	1ad3      	subs	r3, r2, r3
 800b8d6:	2b03      	cmp	r3, #3
 800b8d8:	d901      	bls.n	800b8de <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b8da:	2303      	movs	r3, #3
 800b8dc:	e1ef      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b8de:	f7ff fc72 	bl	800b1c6 <LL_RCC_LSI2_IsReady>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d0f1      	beq.n	800b8cc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff fc7c 	bl	800b1ea <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b8f2:	f7ff fc23 	bl	800b13c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8f6:	f7fc fe41 	bl	800857c <HAL_GetTick>
 800b8fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b8fc:	e008      	b.n	800b910 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b8fe:	f7fc fe3d 	bl	800857c <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d901      	bls.n	800b910 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e1d6      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b910:	f7ff fc25 	bl	800b15e <LL_RCC_LSI1_IsReady>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1f1      	bne.n	800b8fe <HAL_RCC_OscConfig+0x31a>
 800b91a:	e051      	b.n	800b9c0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b91c:	f7ff fbfd 	bl	800b11a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b920:	f7fc fe2c 	bl	800857c <HAL_GetTick>
 800b924:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b926:	e00c      	b.n	800b942 <HAL_RCC_OscConfig+0x35e>
 800b928:	20000008 	.word	0x20000008
 800b92c:	200000e0 	.word	0x200000e0
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b930:	f7fc fe24 	bl	800857c <HAL_GetTick>
 800b934:	4602      	mov	r2, r0
 800b936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b938:	1ad3      	subs	r3, r2, r3
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d901      	bls.n	800b942 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e1bd      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b942:	f7ff fc0c 	bl	800b15e <LL_RCC_LSI1_IsReady>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d0f1      	beq.n	800b930 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b94c:	f7ff fc2a 	bl	800b1a4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b950:	e008      	b.n	800b964 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b952:	f7fc fe13 	bl	800857c <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b03      	cmp	r3, #3
 800b95e:	d901      	bls.n	800b964 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e1ac      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b964:	f7ff fc2f 	bl	800b1c6 <LL_RCC_LSI2_IsReady>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d1f1      	bne.n	800b952 <HAL_RCC_OscConfig+0x36e>
 800b96e:	e027      	b.n	800b9c0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b970:	f7ff fc18 	bl	800b1a4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b974:	f7fc fe02 	bl	800857c <HAL_GetTick>
 800b978:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b97a:	e008      	b.n	800b98e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b97c:	f7fc fdfe 	bl	800857c <HAL_GetTick>
 800b980:	4602      	mov	r2, r0
 800b982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b984:	1ad3      	subs	r3, r2, r3
 800b986:	2b03      	cmp	r3, #3
 800b988:	d901      	bls.n	800b98e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b98a:	2303      	movs	r3, #3
 800b98c:	e197      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b98e:	f7ff fc1a 	bl	800b1c6 <LL_RCC_LSI2_IsReady>
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d1f1      	bne.n	800b97c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b998:	f7ff fbd0 	bl	800b13c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b99c:	f7fc fdee 	bl	800857c <HAL_GetTick>
 800b9a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b9a2:	e008      	b.n	800b9b6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b9a4:	f7fc fdea 	bl	800857c <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	2b02      	cmp	r3, #2
 800b9b0:	d901      	bls.n	800b9b6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b9b2:	2303      	movs	r3, #3
 800b9b4:	e183      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b9b6:	f7ff fbd2 	bl	800b15e <LL_RCC_LSI1_IsReady>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1f1      	bne.n	800b9a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f003 0304 	and.w	r3, r3, #4
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d05b      	beq.n	800ba84 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9cc:	4ba7      	ldr	r3, [pc, #668]	@ (800bc6c <HAL_RCC_OscConfig+0x688>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d114      	bne.n	800ba02 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b9d8:	f7ff fa70 	bl	800aebc <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b9dc:	f7fc fdce 	bl	800857c <HAL_GetTick>
 800b9e0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9e2:	e008      	b.n	800b9f6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9e4:	f7fc fdca 	bl	800857c <HAL_GetTick>
 800b9e8:	4602      	mov	r2, r0
 800b9ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ec:	1ad3      	subs	r3, r2, r3
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d901      	bls.n	800b9f6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b9f2:	2303      	movs	r3, #3
 800b9f4:	e163      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b9f6:	4b9d      	ldr	r3, [pc, #628]	@ (800bc6c <HAL_RCC_OscConfig+0x688>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d0f0      	beq.n	800b9e4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d102      	bne.n	800ba10 <HAL_RCC_OscConfig+0x42c>
 800ba0a:	f7ff fb30 	bl	800b06e <LL_RCC_LSE_Enable>
 800ba0e:	e00c      	b.n	800ba2a <HAL_RCC_OscConfig+0x446>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	2b05      	cmp	r3, #5
 800ba16:	d104      	bne.n	800ba22 <HAL_RCC_OscConfig+0x43e>
 800ba18:	f7ff fb4b 	bl	800b0b2 <LL_RCC_LSE_EnableBypass>
 800ba1c:	f7ff fb27 	bl	800b06e <LL_RCC_LSE_Enable>
 800ba20:	e003      	b.n	800ba2a <HAL_RCC_OscConfig+0x446>
 800ba22:	f7ff fb35 	bl	800b090 <LL_RCC_LSE_Disable>
 800ba26:	f7ff fb55 	bl	800b0d4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d014      	beq.n	800ba5c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba32:	f7fc fda3 	bl	800857c <HAL_GetTick>
 800ba36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800ba38:	e00a      	b.n	800ba50 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba3a:	f7fc fd9f 	bl	800857c <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e136      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800ba50:	f7ff fb51 	bl	800b0f6 <LL_RCC_LSE_IsReady>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d0ef      	beq.n	800ba3a <HAL_RCC_OscConfig+0x456>
 800ba5a:	e013      	b.n	800ba84 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba5c:	f7fc fd8e 	bl	800857c <HAL_GetTick>
 800ba60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ba62:	e00a      	b.n	800ba7a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba64:	f7fc fd8a 	bl	800857c <HAL_GetTick>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba6c:	1ad3      	subs	r3, r2, r3
 800ba6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d901      	bls.n	800ba7a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e121      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ba7a:	f7ff fb3c 	bl	800b0f6 <LL_RCC_LSE_IsReady>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1ef      	bne.n	800ba64 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d02c      	beq.n	800baea <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d014      	beq.n	800bac2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ba98:	f7ff fab5 	bl	800b006 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba9c:	f7fc fd6e 	bl	800857c <HAL_GetTick>
 800baa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800baa2:	e008      	b.n	800bab6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800baa4:	f7fc fd6a 	bl	800857c <HAL_GetTick>
 800baa8:	4602      	mov	r2, r0
 800baaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d901      	bls.n	800bab6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800bab2:	2303      	movs	r3, #3
 800bab4:	e103      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800bab6:	f7ff fac8 	bl	800b04a <LL_RCC_HSI48_IsReady>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d0f1      	beq.n	800baa4 <HAL_RCC_OscConfig+0x4c0>
 800bac0:	e013      	b.n	800baea <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bac2:	f7ff fab1 	bl	800b028 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bac6:	f7fc fd59 	bl	800857c <HAL_GetTick>
 800baca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bacc:	e008      	b.n	800bae0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bace:	f7fc fd55 	bl	800857c <HAL_GetTick>
 800bad2:	4602      	mov	r2, r0
 800bad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad6:	1ad3      	subs	r3, r2, r3
 800bad8:	2b02      	cmp	r3, #2
 800bada:	d901      	bls.n	800bae0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e0ee      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800bae0:	f7ff fab3 	bl	800b04a <LL_RCC_HSI48_IsReady>
 800bae4:	4603      	mov	r3, r0
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1f1      	bne.n	800bace <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baee:	2b00      	cmp	r3, #0
 800baf0:	f000 80e4 	beq.w	800bcbc <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800baf4:	f7ff fc11 	bl	800b31a <LL_RCC_GetSysClkSource>
 800baf8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800bafa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb06:	2b02      	cmp	r3, #2
 800bb08:	f040 80b4 	bne.w	800bc74 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f003 0203 	and.w	r2, r3, #3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d123      	bne.n	800bb62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb24:	429a      	cmp	r2, r3
 800bb26:	d11c      	bne.n	800bb62 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	0a1b      	lsrs	r3, r3, #8
 800bb2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d114      	bne.n	800bb62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800bb42:	429a      	cmp	r2, r3
 800bb44:	d10d      	bne.n	800bb62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d106      	bne.n	800bb62 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d05d      	beq.n	800bc1e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bb62:	693b      	ldr	r3, [r7, #16]
 800bb64:	2b0c      	cmp	r3, #12
 800bb66:	d058      	beq.n	800bc1a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800bb68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d001      	beq.n	800bb7a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800bb76:	2301      	movs	r3, #1
 800bb78:	e0a1      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800bb7a:	f7ff fc84 	bl	800b486 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bb7e:	f7fc fcfd 	bl	800857c <HAL_GetTick>
 800bb82:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb84:	e008      	b.n	800bb98 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb86:	f7fc fcf9 	bl	800857c <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d901      	bls.n	800bb98 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e092      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1ef      	bne.n	800bb86 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bba6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbaa:	68da      	ldr	r2, [r3, #12]
 800bbac:	4b30      	ldr	r3, [pc, #192]	@ (800bc70 <HAL_RCC_OscConfig+0x68c>)
 800bbae:	4013      	ands	r3, r2
 800bbb0:	687a      	ldr	r2, [r7, #4]
 800bbb2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bbb8:	4311      	orrs	r1, r2
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800bbbe:	0212      	lsls	r2, r2, #8
 800bbc0:	4311      	orrs	r1, r2
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bbc6:	4311      	orrs	r1, r2
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800bbcc:	4311      	orrs	r1, r2
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800bbd2:	430a      	orrs	r2, r1
 800bbd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bbdc:	f7ff fc44 	bl	800b468 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bbe0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bbea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bbf0:	f7fc fcc4 	bl	800857c <HAL_GetTick>
 800bbf4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bbf6:	e008      	b.n	800bc0a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbf8:	f7fc fcc0 	bl	800857c <HAL_GetTick>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	2b02      	cmp	r3, #2
 800bc04:	d901      	bls.n	800bc0a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800bc06:	2303      	movs	r3, #3
 800bc08:	e059      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d0ef      	beq.n	800bbf8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc18:	e050      	b.n	800bcbc <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	e04f      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d147      	bne.n	800bcbc <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bc2c:	f7ff fc1c 	bl	800b468 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bc30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc34:	68db      	ldr	r3, [r3, #12]
 800bc36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bc40:	f7fc fc9c 	bl	800857c <HAL_GetTick>
 800bc44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc46:	e008      	b.n	800bc5a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc48:	f7fc fc98 	bl	800857c <HAL_GetTick>
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc50:	1ad3      	subs	r3, r2, r3
 800bc52:	2b02      	cmp	r3, #2
 800bc54:	d901      	bls.n	800bc5a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800bc56:	2303      	movs	r3, #3
 800bc58:	e031      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d0ef      	beq.n	800bc48 <HAL_RCC_OscConfig+0x664>
 800bc68:	e028      	b.n	800bcbc <HAL_RCC_OscConfig+0x6d8>
 800bc6a:	bf00      	nop
 800bc6c:	58000400 	.word	0x58000400
 800bc70:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	2b0c      	cmp	r3, #12
 800bc78:	d01e      	beq.n	800bcb8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc7a:	f7ff fc04 	bl	800b486 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bc7e:	f7fc fc7d 	bl	800857c <HAL_GetTick>
 800bc82:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc84:	e008      	b.n	800bc98 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bc86:	f7fc fc79 	bl	800857c <HAL_GetTick>
 800bc8a:	4602      	mov	r2, r0
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8e:	1ad3      	subs	r3, r2, r3
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	d901      	bls.n	800bc98 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800bc94:	2303      	movs	r3, #3
 800bc96:	e012      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bc98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d1ef      	bne.n	800bc86 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800bca6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcaa:	68da      	ldr	r2, [r3, #12]
 800bcac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bcb0:	4b05      	ldr	r3, [pc, #20]	@ (800bcc8 <HAL_RCC_OscConfig+0x6e4>)
 800bcb2:	4013      	ands	r3, r2
 800bcb4:	60cb      	str	r3, [r1, #12]
 800bcb6:	e001      	b.n	800bcbc <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e000      	b.n	800bcbe <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800bcbc:	2300      	movs	r3, #0
}
 800bcbe:	4618      	mov	r0, r3
 800bcc0:	3734      	adds	r7, #52	@ 0x34
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd90      	pop	{r4, r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	eefefffc 	.word	0xeefefffc

0800bccc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e12d      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bce0:	4b98      	ldr	r3, [pc, #608]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 0307 	and.w	r3, r3, #7
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d91b      	bls.n	800bd26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcee:	4b95      	ldr	r3, [pc, #596]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f023 0207 	bic.w	r2, r3, #7
 800bcf6:	4993      	ldr	r1, [pc, #588]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	4313      	orrs	r3, r2
 800bcfc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcfe:	f7fc fc3d 	bl	800857c <HAL_GetTick>
 800bd02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd04:	e008      	b.n	800bd18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bd06:	f7fc fc39 	bl	800857c <HAL_GetTick>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	1ad3      	subs	r3, r2, r3
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	d901      	bls.n	800bd18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800bd14:	2303      	movs	r3, #3
 800bd16:	e111      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd18:	4b8a      	ldr	r3, [pc, #552]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 0307 	and.w	r3, r3, #7
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d1ef      	bne.n	800bd06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d016      	beq.n	800bd60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	689b      	ldr	r3, [r3, #8]
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7ff fafb 	bl	800b332 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bd3c:	f7fc fc1e 	bl	800857c <HAL_GetTick>
 800bd40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bd42:	e008      	b.n	800bd56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bd44:	f7fc fc1a 	bl	800857c <HAL_GetTick>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d901      	bls.n	800bd56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e0f2      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800bd56:	f7ff fbe8 	bl	800b52a <LL_RCC_IsActiveFlag_HPRE>
 800bd5a:	4603      	mov	r3, r0
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d0f1      	beq.n	800bd44 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	f003 0320 	and.w	r3, r3, #32
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d016      	beq.n	800bd9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff faf2 	bl	800b35a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bd76:	f7fc fc01 	bl	800857c <HAL_GetTick>
 800bd7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bd7c:	e008      	b.n	800bd90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bd7e:	f7fc fbfd 	bl	800857c <HAL_GetTick>
 800bd82:	4602      	mov	r2, r0
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	1ad3      	subs	r3, r2, r3
 800bd88:	2b02      	cmp	r3, #2
 800bd8a:	d901      	bls.n	800bd90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800bd8c:	2303      	movs	r3, #3
 800bd8e:	e0d5      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800bd90:	f7ff fbdd 	bl	800b54e <LL_RCC_IsActiveFlag_C2HPRE>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d0f1      	beq.n	800bd7e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d016      	beq.n	800bdd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	699b      	ldr	r3, [r3, #24]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7ff faeb 	bl	800b386 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bdb0:	f7fc fbe4 	bl	800857c <HAL_GetTick>
 800bdb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bdb6:	e008      	b.n	800bdca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bdb8:	f7fc fbe0 	bl	800857c <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d901      	bls.n	800bdca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e0b8      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800bdca:	f7ff fbd3 	bl	800b574 <LL_RCC_IsActiveFlag_SHDHPRE>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d0f1      	beq.n	800bdb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d016      	beq.n	800be0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	4618      	mov	r0, r3
 800bde6:	f7ff fae5 	bl	800b3b4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800bdea:	f7fc fbc7 	bl	800857c <HAL_GetTick>
 800bdee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800bdf0:	e008      	b.n	800be04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800bdf2:	f7fc fbc3 	bl	800857c <HAL_GetTick>
 800bdf6:	4602      	mov	r2, r0
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	1ad3      	subs	r3, r2, r3
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d901      	bls.n	800be04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800be00:	2303      	movs	r3, #3
 800be02:	e09b      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800be04:	f7ff fbc9 	bl	800b59a <LL_RCC_IsActiveFlag_PPRE1>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d0f1      	beq.n	800bdf2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f003 0308 	and.w	r3, r3, #8
 800be16:	2b00      	cmp	r3, #0
 800be18:	d017      	beq.n	800be4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	00db      	lsls	r3, r3, #3
 800be20:	4618      	mov	r0, r3
 800be22:	f7ff fadb 	bl	800b3dc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800be26:	f7fc fba9 	bl	800857c <HAL_GetTick>
 800be2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800be2c:	e008      	b.n	800be40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800be2e:	f7fc fba5 	bl	800857c <HAL_GetTick>
 800be32:	4602      	mov	r2, r0
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	1ad3      	subs	r3, r2, r3
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d901      	bls.n	800be40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	e07d      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800be40:	f7ff fbbd 	bl	800b5be <LL_RCC_IsActiveFlag_PPRE2>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0f1      	beq.n	800be2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f003 0301 	and.w	r3, r3, #1
 800be52:	2b00      	cmp	r3, #0
 800be54:	d043      	beq.n	800bede <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685b      	ldr	r3, [r3, #4]
 800be5a:	2b02      	cmp	r3, #2
 800be5c:	d106      	bne.n	800be6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800be5e:	f7ff f87b 	bl	800af58 <LL_RCC_HSE_IsReady>
 800be62:	4603      	mov	r3, r0
 800be64:	2b00      	cmp	r3, #0
 800be66:	d11e      	bne.n	800bea6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be68:	2301      	movs	r3, #1
 800be6a:	e067      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	2b03      	cmp	r3, #3
 800be72:	d106      	bne.n	800be82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800be74:	f7ff fb16 	bl	800b4a4 <LL_RCC_PLL_IsReady>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d113      	bne.n	800bea6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e05c      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d106      	bne.n	800be98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800be8a:	f7ff f9e3 	bl	800b254 <LL_RCC_MSI_IsReady>
 800be8e:	4603      	mov	r3, r0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d108      	bne.n	800bea6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e051      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800be98:	f7ff f88e 	bl	800afb8 <LL_RCC_HSI_IsReady>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800bea2:	2301      	movs	r3, #1
 800bea4:	e04a      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	4618      	mov	r0, r3
 800beac:	f7ff fa21 	bl	800b2f2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800beb0:	f7fc fb64 	bl	800857c <HAL_GetTick>
 800beb4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800beb6:	e00a      	b.n	800bece <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800beb8:	f7fc fb60 	bl	800857c <HAL_GetTick>
 800bebc:	4602      	mov	r2, r0
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d901      	bls.n	800bece <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e036      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bece:	f7ff fa24 	bl	800b31a <LL_RCC_GetSysClkSource>
 800bed2:	4602      	mov	r2, r0
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	429a      	cmp	r2, r3
 800bedc:	d1ec      	bne.n	800beb8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bede:	4b19      	ldr	r3, [pc, #100]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f003 0307 	and.w	r3, r3, #7
 800bee6:	683a      	ldr	r2, [r7, #0]
 800bee8:	429a      	cmp	r2, r3
 800beea:	d21b      	bcs.n	800bf24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800beec:	4b15      	ldr	r3, [pc, #84]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f023 0207 	bic.w	r2, r3, #7
 800bef4:	4913      	ldr	r1, [pc, #76]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bef6:	683b      	ldr	r3, [r7, #0]
 800bef8:	4313      	orrs	r3, r2
 800befa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800befc:	f7fc fb3e 	bl	800857c <HAL_GetTick>
 800bf00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf02:	e008      	b.n	800bf16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800bf04:	f7fc fb3a 	bl	800857c <HAL_GetTick>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b02      	cmp	r3, #2
 800bf10:	d901      	bls.n	800bf16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800bf12:	2303      	movs	r3, #3
 800bf14:	e012      	b.n	800bf3c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bf16:	4b0b      	ldr	r3, [pc, #44]	@ (800bf44 <HAL_RCC_ClockConfig+0x278>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f003 0307 	and.w	r3, r3, #7
 800bf1e:	683a      	ldr	r2, [r7, #0]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d1ef      	bne.n	800bf04 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800bf24:	f000 f87e 	bl	800c024 <HAL_RCC_GetHCLKFreq>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	4a07      	ldr	r2, [pc, #28]	@ (800bf48 <HAL_RCC_ClockConfig+0x27c>)
 800bf2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800bf2e:	f7fc fb31 	bl	8008594 <HAL_GetTickPrio>
 800bf32:	4603      	mov	r3, r0
 800bf34:	4618      	mov	r0, r3
 800bf36:	f7fc fad3 	bl	80084e0 <HAL_InitTick>
 800bf3a:	4603      	mov	r3, r0
}
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}
 800bf44:	58004000 	.word	0x58004000
 800bf48:	20000008 	.word	0x20000008

0800bf4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf4c:	b590      	push	{r4, r7, lr}
 800bf4e:	b085      	sub	sp, #20
 800bf50:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf52:	f7ff f9e2 	bl	800b31a <LL_RCC_GetSysClkSource>
 800bf56:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bf5e:	f7ff f99e 	bl	800b29e <LL_RCC_MSI_GetRange>
 800bf62:	4603      	mov	r3, r0
 800bf64:	091b      	lsrs	r3, r3, #4
 800bf66:	f003 030f 	and.w	r3, r3, #15
 800bf6a:	4a2b      	ldr	r2, [pc, #172]	@ (800c018 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bf6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	e04b      	b.n	800c00c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d102      	bne.n	800bf80 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800bf7a:	4b28      	ldr	r3, [pc, #160]	@ (800c01c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf7c:	60fb      	str	r3, [r7, #12]
 800bf7e:	e045      	b.n	800c00c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b08      	cmp	r3, #8
 800bf84:	d10a      	bne.n	800bf9c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bf86:	f7fe ffb7 	bl	800aef8 <LL_RCC_HSE_IsEnabledDiv2>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d102      	bne.n	800bf96 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800bf90:	4b22      	ldr	r3, [pc, #136]	@ (800c01c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bf92:	60fb      	str	r3, [r7, #12]
 800bf94:	e03a      	b.n	800c00c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800bf96:	4b22      	ldr	r3, [pc, #136]	@ (800c020 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bf98:	60fb      	str	r3, [r7, #12]
 800bf9a:	e037      	b.n	800c00c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800bf9c:	f7ff fab9 	bl	800b512 <LL_RCC_PLL_GetMainSource>
 800bfa0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d003      	beq.n	800bfb0 <HAL_RCC_GetSysClockFreq+0x64>
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d003      	beq.n	800bfb6 <HAL_RCC_GetSysClockFreq+0x6a>
 800bfae:	e00d      	b.n	800bfcc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800bfb0:	4b1a      	ldr	r3, [pc, #104]	@ (800c01c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bfb2:	60bb      	str	r3, [r7, #8]
        break;
 800bfb4:	e015      	b.n	800bfe2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800bfb6:	f7fe ff9f 	bl	800aef8 <LL_RCC_HSE_IsEnabledDiv2>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d102      	bne.n	800bfc6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800bfc0:	4b16      	ldr	r3, [pc, #88]	@ (800c01c <HAL_RCC_GetSysClockFreq+0xd0>)
 800bfc2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800bfc4:	e00d      	b.n	800bfe2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800bfc6:	4b16      	ldr	r3, [pc, #88]	@ (800c020 <HAL_RCC_GetSysClockFreq+0xd4>)
 800bfc8:	60bb      	str	r3, [r7, #8]
        break;
 800bfca:	e00a      	b.n	800bfe2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800bfcc:	f7ff f967 	bl	800b29e <LL_RCC_MSI_GetRange>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	091b      	lsrs	r3, r3, #4
 800bfd4:	f003 030f 	and.w	r3, r3, #15
 800bfd8:	4a0f      	ldr	r2, [pc, #60]	@ (800c018 <HAL_RCC_GetSysClockFreq+0xcc>)
 800bfda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfde:	60bb      	str	r3, [r7, #8]
        break;
 800bfe0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800bfe2:	f7ff fa71 	bl	800b4c8 <LL_RCC_PLL_GetN>
 800bfe6:	4602      	mov	r2, r0
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	fb03 f402 	mul.w	r4, r3, r2
 800bfee:	f7ff fa84 	bl	800b4fa <LL_RCC_PLL_GetDivider>
 800bff2:	4603      	mov	r3, r0
 800bff4:	091b      	lsrs	r3, r3, #4
 800bff6:	3301      	adds	r3, #1
 800bff8:	fbb4 f4f3 	udiv	r4, r4, r3
 800bffc:	f7ff fa71 	bl	800b4e2 <LL_RCC_PLL_GetR>
 800c000:	4603      	mov	r3, r0
 800c002:	0f5b      	lsrs	r3, r3, #29
 800c004:	3301      	adds	r3, #1
 800c006:	fbb4 f3f3 	udiv	r3, r4, r3
 800c00a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800c00c:	68fb      	ldr	r3, [r7, #12]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	bd90      	pop	{r4, r7, pc}
 800c016:	bf00      	nop
 800c018:	08014f84 	.word	0x08014f84
 800c01c:	00f42400 	.word	0x00f42400
 800c020:	01e84800 	.word	0x01e84800

0800c024 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c024:	b598      	push	{r3, r4, r7, lr}
 800c026:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800c028:	f7ff ff90 	bl	800bf4c <HAL_RCC_GetSysClockFreq>
 800c02c:	4604      	mov	r4, r0
 800c02e:	f7ff f9e9 	bl	800b404 <LL_RCC_GetAHBPrescaler>
 800c032:	4603      	mov	r3, r0
 800c034:	091b      	lsrs	r3, r3, #4
 800c036:	f003 030f 	and.w	r3, r3, #15
 800c03a:	4a03      	ldr	r2, [pc, #12]	@ (800c048 <HAL_RCC_GetHCLKFreq+0x24>)
 800c03c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c040:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800c044:	4618      	mov	r0, r3
 800c046:	bd98      	pop	{r3, r4, r7, pc}
 800c048:	08014f24 	.word	0x08014f24

0800c04c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c04c:	b598      	push	{r3, r4, r7, lr}
 800c04e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800c050:	f7ff ffe8 	bl	800c024 <HAL_RCC_GetHCLKFreq>
 800c054:	4604      	mov	r4, r0
 800c056:	f7ff f9ef 	bl	800b438 <LL_RCC_GetAPB1Prescaler>
 800c05a:	4603      	mov	r3, r0
 800c05c:	0a1b      	lsrs	r3, r3, #8
 800c05e:	f003 0307 	and.w	r3, r3, #7
 800c062:	4a04      	ldr	r2, [pc, #16]	@ (800c074 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c068:	f003 031f 	and.w	r3, r3, #31
 800c06c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c070:	4618      	mov	r0, r3
 800c072:	bd98      	pop	{r3, r4, r7, pc}
 800c074:	08014f64 	.word	0x08014f64

0800c078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c078:	b598      	push	{r3, r4, r7, lr}
 800c07a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800c07c:	f7ff ffd2 	bl	800c024 <HAL_RCC_GetHCLKFreq>
 800c080:	4604      	mov	r4, r0
 800c082:	f7ff f9e5 	bl	800b450 <LL_RCC_GetAPB2Prescaler>
 800c086:	4603      	mov	r3, r0
 800c088:	0adb      	lsrs	r3, r3, #11
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	4a04      	ldr	r2, [pc, #16]	@ (800c0a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c094:	f003 031f 	and.w	r3, r3, #31
 800c098:	fa24 f303 	lsr.w	r3, r4, r3
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	bd98      	pop	{r3, r4, r7, pc}
 800c0a0:	08014f64 	.word	0x08014f64

0800c0a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800c0a4:	b590      	push	{r4, r7, lr}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2bb0      	cmp	r3, #176	@ 0xb0
 800c0b0:	d903      	bls.n	800c0ba <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800c0b2:	4b15      	ldr	r3, [pc, #84]	@ (800c108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b6:	60fb      	str	r3, [r7, #12]
 800c0b8:	e007      	b.n	800c0ca <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	091b      	lsrs	r3, r3, #4
 800c0be:	f003 030f 	and.w	r3, r3, #15
 800c0c2:	4a11      	ldr	r2, [pc, #68]	@ (800c108 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800c0c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0c8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800c0ca:	f7ff f9a7 	bl	800b41c <LL_RCC_GetAHB4Prescaler>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	091b      	lsrs	r3, r3, #4
 800c0d2:	f003 030f 	and.w	r3, r3, #15
 800c0d6:	4a0d      	ldr	r2, [pc, #52]	@ (800c10c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800c0d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0e2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	4a0a      	ldr	r2, [pc, #40]	@ (800c110 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800c0e8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ec:	0c9c      	lsrs	r4, r3, #18
 800c0ee:	f7fe fef5 	bl	800aedc <HAL_PWREx_GetVoltageRange>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 f80c 	bl	800c114 <RCC_SetFlashLatency>
 800c0fc:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	bd90      	pop	{r4, r7, pc}
 800c106:	bf00      	nop
 800c108:	08014f84 	.word	0x08014f84
 800c10c:	08014f24 	.word	0x08014f24
 800c110:	431bde83 	.word	0x431bde83

0800c114 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b093      	sub	sp, #76	@ 0x4c
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800c11e:	4b37      	ldr	r3, [pc, #220]	@ (800c1fc <RCC_SetFlashLatency+0xe8>)
 800c120:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800c124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c126:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800c12a:	4a35      	ldr	r2, [pc, #212]	@ (800c200 <RCC_SetFlashLatency+0xec>)
 800c12c:	f107 031c 	add.w	r3, r7, #28
 800c130:	ca07      	ldmia	r2, {r0, r1, r2}
 800c132:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800c136:	4b33      	ldr	r3, [pc, #204]	@ (800c204 <RCC_SetFlashLatency+0xf0>)
 800c138:	f107 040c 	add.w	r4, r7, #12
 800c13c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c13e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800c142:	2300      	movs	r3, #0
 800c144:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c14c:	d11a      	bne.n	800c184 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c14e:	2300      	movs	r3, #0
 800c150:	643b      	str	r3, [r7, #64]	@ 0x40
 800c152:	e013      	b.n	800c17c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800c154:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c156:	009b      	lsls	r3, r3, #2
 800c158:	3348      	adds	r3, #72	@ 0x48
 800c15a:	443b      	add	r3, r7
 800c15c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800c160:	687a      	ldr	r2, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d807      	bhi.n	800c176 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c166:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	3348      	adds	r3, #72	@ 0x48
 800c16c:	443b      	add	r3, r7
 800c16e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c172:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c174:	e020      	b.n	800c1b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800c176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c178:	3301      	adds	r3, #1
 800c17a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c17c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d9e8      	bls.n	800c154 <RCC_SetFlashLatency+0x40>
 800c182:	e019      	b.n	800c1b8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c184:	2300      	movs	r3, #0
 800c186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c188:	e013      	b.n	800c1b2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800c18a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	3348      	adds	r3, #72	@ 0x48
 800c190:	443b      	add	r3, r7
 800c192:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800c196:	687a      	ldr	r2, [r7, #4]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d807      	bhi.n	800c1ac <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800c19c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	3348      	adds	r3, #72	@ 0x48
 800c1a2:	443b      	add	r3, r7
 800c1a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800c1a8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800c1aa:	e005      	b.n	800c1b8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800c1ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1ae:	3301      	adds	r3, #1
 800c1b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c1b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c1b4:	2b02      	cmp	r3, #2
 800c1b6:	d9e8      	bls.n	800c18a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800c1b8:	4b13      	ldr	r3, [pc, #76]	@ (800c208 <RCC_SetFlashLatency+0xf4>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	f023 0207 	bic.w	r2, r3, #7
 800c1c0:	4911      	ldr	r1, [pc, #68]	@ (800c208 <RCC_SetFlashLatency+0xf4>)
 800c1c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c1c8:	f7fc f9d8 	bl	800857c <HAL_GetTick>
 800c1cc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c1ce:	e008      	b.n	800c1e2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800c1d0:	f7fc f9d4 	bl	800857c <HAL_GetTick>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1d8:	1ad3      	subs	r3, r2, r3
 800c1da:	2b02      	cmp	r3, #2
 800c1dc:	d901      	bls.n	800c1e2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800c1de:	2303      	movs	r3, #3
 800c1e0:	e007      	b.n	800c1f2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800c1e2:	4b09      	ldr	r3, [pc, #36]	@ (800c208 <RCC_SetFlashLatency+0xf4>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0307 	and.w	r3, r3, #7
 800c1ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c1ec:	429a      	cmp	r2, r3
 800c1ee:	d1ef      	bne.n	800c1d0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800c1f0:	2300      	movs	r3, #0
}
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	374c      	adds	r7, #76	@ 0x4c
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	bd90      	pop	{r4, r7, pc}
 800c1fa:	bf00      	nop
 800c1fc:	08013a98 	.word	0x08013a98
 800c200:	08013aa8 	.word	0x08013aa8
 800c204:	08013ab4 	.word	0x08013ab4
 800c208:	58004000 	.word	0x58004000

0800c20c <LL_RCC_LSE_IsEnabled>:
{
 800c20c:	b480      	push	{r7}
 800c20e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800c210:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c214:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d101      	bne.n	800c224 <LL_RCC_LSE_IsEnabled+0x18>
 800c220:	2301      	movs	r3, #1
 800c222:	e000      	b.n	800c226 <LL_RCC_LSE_IsEnabled+0x1a>
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <LL_RCC_LSE_IsReady>:
{
 800c230:	b480      	push	{r7}
 800c232:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800c234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	2b02      	cmp	r3, #2
 800c242:	d101      	bne.n	800c248 <LL_RCC_LSE_IsReady+0x18>
 800c244:	2301      	movs	r3, #1
 800c246:	e000      	b.n	800c24a <LL_RCC_LSE_IsReady+0x1a>
 800c248:	2300      	movs	r3, #0
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr

0800c254 <LL_RCC_MSI_EnablePLLMode>:
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800c258:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c262:	f043 0304 	orr.w	r3, r3, #4
 800c266:	6013      	str	r3, [r2, #0]
}
 800c268:	bf00      	nop
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <LL_RCC_SetRFWKPClockSource>:
{
 800c272:	b480      	push	{r7}
 800c274:	b083      	sub	sp, #12
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800c27a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c282:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c286:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	4313      	orrs	r3, r2
 800c28e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr

0800c29e <LL_RCC_SetSMPSClockSource>:
{
 800c29e:	b480      	push	{r7}
 800c2a0:	b083      	sub	sp, #12
 800c2a2:	af00      	add	r7, sp, #0
 800c2a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800c2a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ac:	f023 0203 	bic.w	r2, r3, #3
 800c2b0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c2ba:	bf00      	nop
 800c2bc:	370c      	adds	r7, #12
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c4:	4770      	bx	lr

0800c2c6 <LL_RCC_SetSMPSPrescaler>:
{
 800c2c6:	b480      	push	{r7}
 800c2c8:	b083      	sub	sp, #12
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800c2ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c2d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4313      	orrs	r3, r2
 800c2e0:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800c2e2:	bf00      	nop
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <LL_RCC_SetUSARTClockSource>:
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800c2f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c2fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2fe:	f023 0203 	bic.w	r2, r3, #3
 800c302:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	4313      	orrs	r3, r2
 800c30a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c30e:	bf00      	nop
 800c310:	370c      	adds	r7, #12
 800c312:	46bd      	mov	sp, r7
 800c314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c318:	4770      	bx	lr

0800c31a <LL_RCC_SetLPUARTClockSource>:
{
 800c31a:	b480      	push	{r7}
 800c31c:	b083      	sub	sp, #12
 800c31e:	af00      	add	r7, sp, #0
 800c320:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800c322:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c32a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c32e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4313      	orrs	r3, r2
 800c336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c33a:	bf00      	nop
 800c33c:	370c      	adds	r7, #12
 800c33e:	46bd      	mov	sp, r7
 800c340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c344:	4770      	bx	lr

0800c346 <LL_RCC_SetI2CClockSource>:
{
 800c346:	b480      	push	{r7}
 800c348:	b083      	sub	sp, #12
 800c34a:	af00      	add	r7, sp, #0
 800c34c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800c34e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c352:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	091b      	lsrs	r3, r3, #4
 800c35a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c35e:	43db      	mvns	r3, r3
 800c360:	401a      	ands	r2, r3
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	011b      	lsls	r3, r3, #4
 800c366:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800c36a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c36e:	4313      	orrs	r3, r2
 800c370:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <LL_RCC_SetLPTIMClockSource>:
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800c388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c38c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	0c1b      	lsrs	r3, r3, #16
 800c394:	041b      	lsls	r3, r3, #16
 800c396:	43db      	mvns	r3, r3
 800c398:	401a      	ands	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	041b      	lsls	r3, r3, #16
 800c39e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3a2:	4313      	orrs	r3, r2
 800c3a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <LL_RCC_SetSAIClockSource>:
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800c3bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c3c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c3d4:	bf00      	nop
 800c3d6:	370c      	adds	r7, #12
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3de:	4770      	bx	lr

0800c3e0 <LL_RCC_SetRNGClockSource>:
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b083      	sub	sp, #12
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800c3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c3ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3f0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800c3f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	4313      	orrs	r3, r2
 800c3fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <LL_RCC_SetCLK48ClockSource>:
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800c414:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c41c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c420:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4313      	orrs	r3, r2
 800c428:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c42c:	bf00      	nop
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr

0800c438 <LL_RCC_SetUSBClockSource>:
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b082      	sub	sp, #8
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f7ff ffe3 	bl	800c40c <LL_RCC_SetCLK48ClockSource>
}
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <LL_RCC_SetADCClockSource>:
{
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800c456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c45a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c45e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c462:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4313      	orrs	r3, r2
 800c46a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800c46e:	bf00      	nop
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <LL_RCC_SetRTCClockSource>:
{
 800c47a:	b480      	push	{r7}
 800c47c:	b083      	sub	sp, #12
 800c47e:	af00      	add	r7, sp, #0
 800c480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800c482:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c48a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c48e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	4313      	orrs	r3, r2
 800c496:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800c49a:	bf00      	nop
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <LL_RCC_GetRTCClockSource>:
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800c4aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <LL_RCC_ForceBackupDomainReset>:
{
 800c4c0:	b480      	push	{r7}
 800c4c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c4c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c4d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c4d8:	bf00      	nop
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e0:	4770      	bx	lr

0800c4e2 <LL_RCC_ReleaseBackupDomainReset>:
{
 800c4e2:	b480      	push	{r7}
 800c4e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800c4e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c4ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c4ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c4f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800c4fa:	bf00      	nop
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr

0800c504 <LL_RCC_PLLSAI1_Enable>:
{
 800c504:	b480      	push	{r7}
 800c506:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c508:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c512:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c516:	6013      	str	r3, [r2, #0]
}
 800c518:	bf00      	nop
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr

0800c522 <LL_RCC_PLLSAI1_Disable>:
{
 800c522:	b480      	push	{r7}
 800c524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800c526:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c530:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c534:	6013      	str	r3, [r2, #0]
}
 800c536:	bf00      	nop
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr

0800c540 <LL_RCC_PLLSAI1_IsReady>:
{
 800c540:	b480      	push	{r7}
 800c542:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800c544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c54e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c552:	d101      	bne.n	800c558 <LL_RCC_PLLSAI1_IsReady+0x18>
 800c554:	2301      	movs	r3, #1
 800c556:	e000      	b.n	800c55a <LL_RCC_PLLSAI1_IsReady+0x1a>
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800c56c:	2300      	movs	r3, #0
 800c56e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800c570:	2300      	movs	r3, #0
 800c572:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d034      	beq.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c584:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c588:	d021      	beq.n	800c5ce <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800c58a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c58e:	d81b      	bhi.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c594:	d01d      	beq.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c596:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c59a:	d815      	bhi.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d00b      	beq.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800c5a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5a4:	d110      	bne.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800c5a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c5b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c5b4:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800c5b6:	e00d      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	4618      	mov	r0, r3
 800c5be:	f000 f94d 	bl	800c85c <RCCEx_PLLSAI1_ConfigNP>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800c5c6:	e005      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	77fb      	strb	r3, [r7, #31]
        break;
 800c5cc:	e002      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c5ce:	bf00      	nop
 800c5d0:	e000      	b.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800c5d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5d4:	7ffb      	ldrb	r3, [r7, #31]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d105      	bne.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5de:	4618      	mov	r0, r3
 800c5e0:	f7ff fee8 	bl	800c3b4 <LL_RCC_SetSAIClockSource>
 800c5e4:	e001      	b.n	800c5ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e6:	7ffb      	ldrb	r3, [r7, #31]
 800c5e8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d046      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800c5f6:	f7ff ff56 	bl	800c4a6 <LL_RCC_GetRTCClockSource>
 800c5fa:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	429a      	cmp	r2, r3
 800c604:	d03c      	beq.n	800c680 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800c606:	f7fe fc59 	bl	800aebc <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800c60a:	69bb      	ldr	r3, [r7, #24]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d105      	bne.n	800c61c <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c614:	4618      	mov	r0, r3
 800c616:	f7ff ff30 	bl	800c47a <LL_RCC_SetRTCClockSource>
 800c61a:	e02e      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800c61c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c620:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c624:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800c626:	f7ff ff4b 	bl	800c4c0 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800c62a:	f7ff ff5a 	bl	800c4e2 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c638:	4313      	orrs	r3, r2
 800c63a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800c63c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800c646:	f7ff fde1 	bl	800c20c <LL_RCC_LSE_IsEnabled>
 800c64a:	4603      	mov	r3, r0
 800c64c:	2b01      	cmp	r3, #1
 800c64e:	d114      	bne.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c650:	f7fb ff94 	bl	800857c <HAL_GetTick>
 800c654:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800c656:	e00b      	b.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c658:	f7fb ff90 	bl	800857c <HAL_GetTick>
 800c65c:	4602      	mov	r2, r0
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	1ad3      	subs	r3, r2, r3
 800c662:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c666:	4293      	cmp	r3, r2
 800c668:	d902      	bls.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800c66a:	2303      	movs	r3, #3
 800c66c:	77fb      	strb	r3, [r7, #31]
              break;
 800c66e:	e004      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800c670:	f7ff fdde 	bl	800c230 <LL_RCC_LSE_IsReady>
 800c674:	4603      	mov	r3, r0
 800c676:	2b01      	cmp	r3, #1
 800c678:	d1ee      	bne.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800c67a:	7ffb      	ldrb	r3, [r7, #31]
 800c67c:	77bb      	strb	r3, [r7, #30]
 800c67e:	e001      	b.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c680:	7ffb      	ldrb	r3, [r7, #31]
 800c682:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f003 0301 	and.w	r3, r3, #1
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d004      	beq.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff fe2a 	bl	800c2ee <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f003 0302 	and.w	r3, r3, #2
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d004      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff fe35 	bl	800c31a <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0310 	and.w	r3, r3, #16
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d004      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fe5d 	bl	800c380 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f003 0320 	and.w	r3, r3, #32
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d004      	beq.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7ff fe52 	bl	800c380 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f003 0304 	and.w	r3, r3, #4
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d004      	beq.n	800c6f2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6a1b      	ldr	r3, [r3, #32]
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7ff fe2a 	bl	800c346 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f003 0308 	and.w	r3, r3, #8
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d004      	beq.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c702:	4618      	mov	r0, r3
 800c704:	f7ff fe1f 	bl	800c346 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c710:	2b00      	cmp	r3, #0
 800c712:	d022      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c718:	4618      	mov	r0, r3
 800c71a:	f7ff fe8d 	bl	800c438 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c722:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c726:	d107      	bne.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800c728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c72c:	68db      	ldr	r3, [r3, #12]
 800c72e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c732:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c736:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c73c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c740:	d10b      	bne.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	3304      	adds	r3, #4
 800c746:	4618      	mov	r0, r3
 800c748:	f000 f8e3 	bl	800c912 <RCCEx_PLLSAI1_ConfigNQ>
 800c74c:	4603      	mov	r3, r0
 800c74e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c750:	7ffb      	ldrb	r3, [r7, #31]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d001      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800c756:	7ffb      	ldrb	r3, [r7, #31]
 800c758:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c762:	2b00      	cmp	r3, #0
 800c764:	d02b      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c76a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c76e:	d008      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c774:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c778:	d003      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d105      	bne.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fe2a 	bl	800c3e0 <LL_RCC_SetRNGClockSource>
 800c78c:	e00a      	b.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c792:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c796:	60fb      	str	r3, [r7, #12]
 800c798:	2000      	movs	r0, #0
 800c79a:	f7ff fe21 	bl	800c3e0 <LL_RCC_SetRNGClockSource>
 800c79e:	68f8      	ldr	r0, [r7, #12]
 800c7a0:	f7ff fe34 	bl	800c40c <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7a8:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800c7ac:	d107      	bne.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800c7ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7b2:	68db      	ldr	r3, [r3, #12]
 800c7b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c7b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c7bc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d022      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7ff fe3d 	bl	800c44e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c7dc:	d107      	bne.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c7de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c7e2:	68db      	ldr	r3, [r3, #12]
 800c7e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800c7e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c7ec:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7f6:	d10b      	bne.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3304      	adds	r3, #4
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 f8e3 	bl	800c9c8 <RCCEx_PLLSAI1_ConfigNR>
 800c802:	4603      	mov	r3, r0
 800c804:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800c806:	7ffb      	ldrb	r3, [r7, #31]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d001      	beq.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800c80c:	7ffb      	ldrb	r3, [r7, #31]
 800c80e:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d004      	beq.n	800c826 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fd26 	bl	800c272 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d009      	beq.n	800c846 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fd45 	bl	800c2c6 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c840:	4618      	mov	r0, r3
 800c842:	f7ff fd2c 	bl	800c29e <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c846:	7fbb      	ldrb	r3, [r7, #30]
}
 800c848:	4618      	mov	r0, r3
 800c84a:	3720      	adds	r7, #32
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800c850:	b580      	push	{r7, lr}
 800c852:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 800c854:	f7ff fcfe 	bl	800c254 <LL_RCC_MSI_EnablePLLMode>
}
 800c858:	bf00      	nop
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c868:	f7ff fe5b 	bl	800c522 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c86c:	f7fb fe86 	bl	800857c <HAL_GetTick>
 800c870:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c872:	e009      	b.n	800c888 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c874:	f7fb fe82 	bl	800857c <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	68bb      	ldr	r3, [r7, #8]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	2b02      	cmp	r3, #2
 800c880:	d902      	bls.n	800c888 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c882:	2303      	movs	r3, #3
 800c884:	73fb      	strb	r3, [r7, #15]
      break;
 800c886:	e004      	b.n	800c892 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c888:	f7ff fe5a 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d1f0      	bne.n	800c874 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c892:	7bfb      	ldrb	r3, [r7, #15]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d137      	bne.n	800c908 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c898:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c89c:	691b      	ldr	r3, [r3, #16]
 800c89e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	021b      	lsls	r3, r3, #8
 800c8a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c8b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8b4:	691b      	ldr	r3, [r3, #16]
 800c8b6:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	685b      	ldr	r3, [r3, #4]
 800c8be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c8c2:	4313      	orrs	r3, r2
 800c8c4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c8c6:	f7ff fe1d 	bl	800c504 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c8ca:	f7fb fe57 	bl	800857c <HAL_GetTick>
 800c8ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c8d0:	e009      	b.n	800c8e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c8d2:	f7fb fe53 	bl	800857c <HAL_GetTick>
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	68bb      	ldr	r3, [r7, #8]
 800c8da:	1ad3      	subs	r3, r2, r3
 800c8dc:	2b02      	cmp	r3, #2
 800c8de:	d902      	bls.n	800c8e6 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	73fb      	strb	r3, [r7, #15]
        break;
 800c8e4:	e004      	b.n	800c8f0 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c8e6:	f7ff fe2b 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d1f0      	bne.n	800c8d2 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c8f0:	7bfb      	ldrb	r3, [r7, #15]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d108      	bne.n	800c908 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c8f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c8fa:	691a      	ldr	r2, [r3, #16]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	691b      	ldr	r3, [r3, #16]
 800c900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c904:	4313      	orrs	r3, r2
 800c906:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c908:	7bfb      	ldrb	r3, [r7, #15]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3710      	adds	r7, #16
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b084      	sub	sp, #16
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c91e:	f7ff fe00 	bl	800c522 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c922:	f7fb fe2b 	bl	800857c <HAL_GetTick>
 800c926:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c928:	e009      	b.n	800c93e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c92a:	f7fb fe27 	bl	800857c <HAL_GetTick>
 800c92e:	4602      	mov	r2, r0
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	1ad3      	subs	r3, r2, r3
 800c934:	2b02      	cmp	r3, #2
 800c936:	d902      	bls.n	800c93e <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c938:	2303      	movs	r3, #3
 800c93a:	73fb      	strb	r3, [r7, #15]
      break;
 800c93c:	e004      	b.n	800c948 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c93e:	f7ff fdff 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800c942:	4603      	mov	r3, r0
 800c944:	2b00      	cmp	r3, #0
 800c946:	d1f0      	bne.n	800c92a <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d137      	bne.n	800c9be <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c94e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c952:	691b      	ldr	r3, [r3, #16]
 800c954:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	021b      	lsls	r3, r3, #8
 800c95e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c962:	4313      	orrs	r3, r2
 800c964:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	689b      	ldr	r3, [r3, #8]
 800c974:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c978:	4313      	orrs	r3, r2
 800c97a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c97c:	f7ff fdc2 	bl	800c504 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c980:	f7fb fdfc 	bl	800857c <HAL_GetTick>
 800c984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c986:	e009      	b.n	800c99c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c988:	f7fb fdf8 	bl	800857c <HAL_GetTick>
 800c98c:	4602      	mov	r2, r0
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	2b02      	cmp	r3, #2
 800c994:	d902      	bls.n	800c99c <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	73fb      	strb	r3, [r7, #15]
        break;
 800c99a:	e004      	b.n	800c9a6 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c99c:	f7ff fdd0 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d1f0      	bne.n	800c988 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d108      	bne.n	800c9be <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c9ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c9b0:	691a      	ldr	r2, [r3, #16]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c9ba:	4313      	orrs	r3, r2
 800c9bc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c9be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	3710      	adds	r7, #16
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	bd80      	pop	{r7, pc}

0800c9c8 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c9d4:	f7ff fda5 	bl	800c522 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c9d8:	f7fb fdd0 	bl	800857c <HAL_GetTick>
 800c9dc:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c9de:	e009      	b.n	800c9f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c9e0:	f7fb fdcc 	bl	800857c <HAL_GetTick>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	1ad3      	subs	r3, r2, r3
 800c9ea:	2b02      	cmp	r3, #2
 800c9ec:	d902      	bls.n	800c9f4 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c9ee:	2303      	movs	r3, #3
 800c9f0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9f2:	e004      	b.n	800c9fe <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c9f4:	f7ff fda4 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1f0      	bne.n	800c9e0 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c9fe:	7bfb      	ldrb	r3, [r7, #15]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d137      	bne.n	800ca74 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ca04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	021b      	lsls	r3, r3, #8
 800ca14:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ca1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ca32:	f7ff fd67 	bl	800c504 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca36:	f7fb fda1 	bl	800857c <HAL_GetTick>
 800ca3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ca3c:	e009      	b.n	800ca52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ca3e:	f7fb fd9d 	bl	800857c <HAL_GetTick>
 800ca42:	4602      	mov	r2, r0
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	1ad3      	subs	r3, r2, r3
 800ca48:	2b02      	cmp	r3, #2
 800ca4a:	d902      	bls.n	800ca52 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	73fb      	strb	r3, [r7, #15]
        break;
 800ca50:	e004      	b.n	800ca5c <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ca52:	f7ff fd75 	bl	800c540 <LL_RCC_PLLSAI1_IsReady>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d1f0      	bne.n	800ca3e <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ca5c:	7bfb      	ldrb	r3, [r7, #15]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d108      	bne.n	800ca74 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ca62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ca66:	691a      	ldr	r2, [r3, #16]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ca70:	4313      	orrs	r3, r2
 800ca72:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ca74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
	...

0800ca80 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d101      	bne.n	800ca92 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e09f      	b.n	800cbd2 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800ca98:	b2db      	uxtb	r3, r3
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d106      	bne.n	800caac <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f7f6 fac4 	bl	8003034 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2202      	movs	r2, #2
 800cab0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800cab4:	4b49      	ldr	r3, [pc, #292]	@ (800cbdc <HAL_RTC_Init+0x15c>)
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	f003 0310 	and.w	r3, r3, #16
 800cabc:	2b10      	cmp	r3, #16
 800cabe:	d07e      	beq.n	800cbbe <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	22ca      	movs	r2, #202	@ 0xca
 800cac6:	625a      	str	r2, [r3, #36]	@ 0x24
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2253      	movs	r2, #83	@ 0x53
 800cace:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 f8ab 	bl	800cc2c <RTC_EnterInitMode>
 800cad6:	4603      	mov	r3, r0
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d00a      	beq.n	800caf2 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	22ff      	movs	r2, #255	@ 0xff
 800cae2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2204      	movs	r2, #4
 800cae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800caec:	2301      	movs	r3, #1
 800caee:	73fb      	strb	r3, [r7, #15]
 800caf0:	e067      	b.n	800cbc2 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	6812      	ldr	r2, [r2, #0]
 800cafc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cb00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cb04:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6899      	ldr	r1, [r3, #8]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685a      	ldr	r2, [r3, #4]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	691b      	ldr	r3, [r3, #16]
 800cb14:	431a      	orrs	r2, r3
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	699b      	ldr	r3, [r3, #24]
 800cb1a:	431a      	orrs	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	430a      	orrs	r2, r1
 800cb22:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68d2      	ldr	r2, [r2, #12]
 800cb2c:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	6919      	ldr	r1, [r3, #16]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	041a      	lsls	r2, r3, #16
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	430a      	orrs	r2, r1
 800cb40:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	68da      	ldr	r2, [r3, #12]
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb50:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f022 0203 	bic.w	r2, r2, #3
 800cb60:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	69da      	ldr	r2, [r3, #28]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	695b      	ldr	r3, [r3, #20]
 800cb70:	431a      	orrs	r2, r3
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	430a      	orrs	r2, r1
 800cb78:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	f003 0320 	and.w	r3, r3, #32
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d113      	bne.n	800cbb0 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f829 	bl	800cbe0 <HAL_RTC_WaitForSynchro>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d00d      	beq.n	800cbb0 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	22ff      	movs	r2, #255	@ 0xff
 800cb9a:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	2204      	movs	r2, #4
 800cba0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2200      	movs	r2, #0
 800cba8:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800cbac:	2301      	movs	r3, #1
 800cbae:	e010      	b.n	800cbd2 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	22ff      	movs	r2, #255	@ 0xff
 800cbb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]
 800cbbc:	e001      	b.n	800cbc2 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800cbbe:	2300      	movs	r3, #0
 800cbc0:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d103      	bne.n	800cbd0 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	40002800 	.word	0x40002800

0800cbe0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b084      	sub	sp, #16
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68da      	ldr	r2, [r3, #12]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800cbf6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cbf8:	f7fb fcc0 	bl	800857c <HAL_GetTick>
 800cbfc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cbfe:	e009      	b.n	800cc14 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cc00:	f7fb fcbc 	bl	800857c <HAL_GetTick>
 800cc04:	4602      	mov	r2, r0
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	1ad3      	subs	r3, r2, r3
 800cc0a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc0e:	d901      	bls.n	800cc14 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800cc10:	2303      	movs	r3, #3
 800cc12:	e007      	b.n	800cc24 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	68db      	ldr	r3, [r3, #12]
 800cc1a:	f003 0320 	and.w	r3, r3, #32
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d0ee      	beq.n	800cc00 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3710      	adds	r7, #16
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b084      	sub	sp, #16
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d119      	bne.n	800cc76 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f04f 32ff 	mov.w	r2, #4294967295
 800cc4a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800cc4c:	f7fb fc96 	bl	800857c <HAL_GetTick>
 800cc50:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc52:	e009      	b.n	800cc68 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800cc54:	f7fb fc92 	bl	800857c <HAL_GetTick>
 800cc58:	4602      	mov	r2, r0
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc62:	d901      	bls.n	800cc68 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800cc64:	2303      	movs	r3, #3
 800cc66:	e007      	b.n	800cc78 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d0ee      	beq.n	800cc54 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800cc76:	2300      	movs	r3, #0
}
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}

0800cc80 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b086      	sub	sp, #24
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	60f8      	str	r0, [r7, #12]
 800cc88:	60b9      	str	r1, [r7, #8]
 800cc8a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d101      	bne.n	800cc9a <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800cc96:	2302      	movs	r3, #2
 800cc98:	e0a8      	b.n	800cdec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2201      	movs	r2, #1
 800cc9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2202      	movs	r2, #2
 800cca6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	22ca      	movs	r2, #202	@ 0xca
 800ccb0:	625a      	str	r2, [r3, #36]	@ 0x24
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	2253      	movs	r2, #83	@ 0x53
 800ccb8:	625a      	str	r2, [r3, #36]	@ 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d020      	beq.n	800cd0a <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800ccc8:	f7fb fc58 	bl	800857c <HAL_GetTick>
 800cccc:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ccce:	e015      	b.n	800ccfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ccd0:	f7fb fc54 	bl	800857c <HAL_GetTick>
 800ccd4:	4602      	mov	r2, r0
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	1ad3      	subs	r3, r2, r3
 800ccda:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ccde:	d90d      	bls.n	800ccfc <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	22ff      	movs	r2, #255	@ 0xff
 800cce6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2203      	movs	r2, #3
 800ccec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e077      	b.n	800cdec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	f003 0304 	and.w	r3, r3, #4
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d1e2      	bne.n	800ccd0 <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	689a      	ldr	r2, [r3, #8]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800cd18:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	68db      	ldr	r3, [r3, #12]
 800cd20:	b2da      	uxtb	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800cd2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800cd2c:	f7fb fc26 	bl	800857c <HAL_GetTick>
 800cd30:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800cd32:	e015      	b.n	800cd60 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd34:	f7fb fc22 	bl	800857c <HAL_GetTick>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	697b      	ldr	r3, [r7, #20]
 800cd3c:	1ad3      	subs	r3, r2, r3
 800cd3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd42:	d90d      	bls.n	800cd60 <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	22ff      	movs	r2, #255	@ 0xff
 800cd4a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	2203      	movs	r2, #3
 800cd50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	e045      	b.n	800cdec <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	68db      	ldr	r3, [r3, #12]
 800cd66:	f003 0304 	and.w	r3, r3, #4
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d0e2      	beq.n	800cd34 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	68ba      	ldr	r2, [r7, #8]
 800cd74:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f022 0207 	bic.w	r2, r2, #7
 800cd84:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6899      	ldr	r1, [r3, #8]
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	430a      	orrs	r2, r1
 800cd94:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800cd96:	4b17      	ldr	r3, [pc, #92]	@ (800cdf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cd98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd9c:	4a15      	ldr	r2, [pc, #84]	@ (800cdf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cd9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cda2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800cda6:	4b13      	ldr	r3, [pc, #76]	@ (800cdf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	4a12      	ldr	r2, [pc, #72]	@ (800cdf4 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800cdac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cdb0:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	689a      	ldr	r2, [r3, #8]
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cdc0:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	689a      	ldr	r2, [r3, #8]
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800cdd0:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	22ff      	movs	r2, #255	@ 0xff
 800cdd8:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2200      	movs	r2, #0
 800cde6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800cdea:	2300      	movs	r3, #0
}
 800cdec:	4618      	mov	r0, r3
 800cdee:	3718      	adds	r7, #24
 800cdf0:	46bd      	mov	sp, r7
 800cdf2:	bd80      	pop	{r7, pc}
 800cdf4:	58000800 	.word	0x58000800

0800cdf8 <LL_RCC_GetUSARTClockSource>:
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b083      	sub	sp, #12
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ce00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce04:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4013      	ands	r3, r2
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <LL_RCC_GetLPUARTClockSource>:
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b083      	sub	sp, #12
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800ce20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ce24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4013      	ands	r3, r2
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d101      	bne.n	800ce4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce46:	2301      	movs	r3, #1
 800ce48:	e042      	b.n	800ced0 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d106      	bne.n	800ce62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f7f6 f91f 	bl	80030a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2224      	movs	r2, #36	@ 0x24
 800ce66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681a      	ldr	r2, [r3, #0]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f022 0201 	bic.w	r2, r2, #1
 800ce78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 fa50 	bl	800d328 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f825 	bl	800ced8 <UART_SetConfig>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d101      	bne.n	800ce98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e01b      	b.n	800ced0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cea6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	689a      	ldr	r2, [r3, #8]
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ceb6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	f042 0201 	orr.w	r2, r2, #1
 800cec6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 facf 	bl	800d46c <UART_CheckIdleState>
 800cece:	4603      	mov	r3, r0
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3708      	adds	r7, #8
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ced8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cedc:	b08c      	sub	sp, #48	@ 0x30
 800cede:	af00      	add	r7, sp, #0
 800cee0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cee2:	2300      	movs	r3, #0
 800cee4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	689a      	ldr	r2, [r3, #8]
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	691b      	ldr	r3, [r3, #16]
 800cef0:	431a      	orrs	r2, r3
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	431a      	orrs	r2, r3
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	69db      	ldr	r3, [r3, #28]
 800cefc:	4313      	orrs	r3, r2
 800cefe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cf00:	697b      	ldr	r3, [r7, #20]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	4baf      	ldr	r3, [pc, #700]	@ (800d1c4 <UART_SetConfig+0x2ec>)
 800cf08:	4013      	ands	r3, r2
 800cf0a:	697a      	ldr	r2, [r7, #20]
 800cf0c:	6812      	ldr	r2, [r2, #0]
 800cf0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf10:	430b      	orrs	r3, r1
 800cf12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf14:	697b      	ldr	r3, [r7, #20]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	685b      	ldr	r3, [r3, #4]
 800cf1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	68da      	ldr	r2, [r3, #12]
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	430a      	orrs	r2, r1
 800cf28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cf30:	697b      	ldr	r3, [r7, #20]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	4aa4      	ldr	r2, [pc, #656]	@ (800d1c8 <UART_SetConfig+0x2f0>)
 800cf36:	4293      	cmp	r3, r2
 800cf38:	d004      	beq.n	800cf44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	6a1b      	ldr	r3, [r3, #32]
 800cf3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf40:	4313      	orrs	r3, r2
 800cf42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	689b      	ldr	r3, [r3, #8]
 800cf4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cf4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cf52:	697a      	ldr	r2, [r7, #20]
 800cf54:	6812      	ldr	r2, [r2, #0]
 800cf56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cf58:	430b      	orrs	r3, r1
 800cf5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf62:	f023 010f 	bic.w	r1, r3, #15
 800cf66:	697b      	ldr	r3, [r7, #20]
 800cf68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	4a95      	ldr	r2, [pc, #596]	@ (800d1cc <UART_SetConfig+0x2f4>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d125      	bne.n	800cfc8 <UART_SetConfig+0xf0>
 800cf7c:	2003      	movs	r0, #3
 800cf7e:	f7ff ff3b 	bl	800cdf8 <LL_RCC_GetUSARTClockSource>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b03      	cmp	r3, #3
 800cf86:	d81b      	bhi.n	800cfc0 <UART_SetConfig+0xe8>
 800cf88:	a201      	add	r2, pc, #4	@ (adr r2, 800cf90 <UART_SetConfig+0xb8>)
 800cf8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf8e:	bf00      	nop
 800cf90:	0800cfa1 	.word	0x0800cfa1
 800cf94:	0800cfb1 	.word	0x0800cfb1
 800cf98:	0800cfa9 	.word	0x0800cfa9
 800cf9c:	0800cfb9 	.word	0x0800cfb9
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfa6:	e042      	b.n	800d02e <UART_SetConfig+0x156>
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfae:	e03e      	b.n	800d02e <UART_SetConfig+0x156>
 800cfb0:	2304      	movs	r3, #4
 800cfb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfb6:	e03a      	b.n	800d02e <UART_SetConfig+0x156>
 800cfb8:	2308      	movs	r3, #8
 800cfba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfbe:	e036      	b.n	800d02e <UART_SetConfig+0x156>
 800cfc0:	2310      	movs	r3, #16
 800cfc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cfc6:	e032      	b.n	800d02e <UART_SetConfig+0x156>
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a7e      	ldr	r2, [pc, #504]	@ (800d1c8 <UART_SetConfig+0x2f0>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d12a      	bne.n	800d028 <UART_SetConfig+0x150>
 800cfd2:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800cfd6:	f7ff ff1f 	bl	800ce18 <LL_RCC_GetLPUARTClockSource>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfe0:	d01a      	beq.n	800d018 <UART_SetConfig+0x140>
 800cfe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cfe6:	d81b      	bhi.n	800d020 <UART_SetConfig+0x148>
 800cfe8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cfec:	d00c      	beq.n	800d008 <UART_SetConfig+0x130>
 800cfee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cff2:	d815      	bhi.n	800d020 <UART_SetConfig+0x148>
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d003      	beq.n	800d000 <UART_SetConfig+0x128>
 800cff8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cffc:	d008      	beq.n	800d010 <UART_SetConfig+0x138>
 800cffe:	e00f      	b.n	800d020 <UART_SetConfig+0x148>
 800d000:	2300      	movs	r3, #0
 800d002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d006:	e012      	b.n	800d02e <UART_SetConfig+0x156>
 800d008:	2302      	movs	r3, #2
 800d00a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d00e:	e00e      	b.n	800d02e <UART_SetConfig+0x156>
 800d010:	2304      	movs	r3, #4
 800d012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d016:	e00a      	b.n	800d02e <UART_SetConfig+0x156>
 800d018:	2308      	movs	r3, #8
 800d01a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d01e:	e006      	b.n	800d02e <UART_SetConfig+0x156>
 800d020:	2310      	movs	r3, #16
 800d022:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800d026:	e002      	b.n	800d02e <UART_SetConfig+0x156>
 800d028:	2310      	movs	r3, #16
 800d02a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d02e:	697b      	ldr	r3, [r7, #20]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a65      	ldr	r2, [pc, #404]	@ (800d1c8 <UART_SetConfig+0x2f0>)
 800d034:	4293      	cmp	r3, r2
 800d036:	f040 8097 	bne.w	800d168 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d03a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d03e:	2b08      	cmp	r3, #8
 800d040:	d823      	bhi.n	800d08a <UART_SetConfig+0x1b2>
 800d042:	a201      	add	r2, pc, #4	@ (adr r2, 800d048 <UART_SetConfig+0x170>)
 800d044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d048:	0800d06d 	.word	0x0800d06d
 800d04c:	0800d08b 	.word	0x0800d08b
 800d050:	0800d075 	.word	0x0800d075
 800d054:	0800d08b 	.word	0x0800d08b
 800d058:	0800d07b 	.word	0x0800d07b
 800d05c:	0800d08b 	.word	0x0800d08b
 800d060:	0800d08b 	.word	0x0800d08b
 800d064:	0800d08b 	.word	0x0800d08b
 800d068:	0800d083 	.word	0x0800d083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d06c:	f7fe ffee 	bl	800c04c <HAL_RCC_GetPCLK1Freq>
 800d070:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d072:	e010      	b.n	800d096 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d074:	4b56      	ldr	r3, [pc, #344]	@ (800d1d0 <UART_SetConfig+0x2f8>)
 800d076:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d078:	e00d      	b.n	800d096 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d07a:	f7fe ff67 	bl	800bf4c <HAL_RCC_GetSysClockFreq>
 800d07e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d080:	e009      	b.n	800d096 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d088:	e005      	b.n	800d096 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800d08a:	2300      	movs	r3, #0
 800d08c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d08e:	2301      	movs	r3, #1
 800d090:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d098:	2b00      	cmp	r3, #0
 800d09a:	f000 812b 	beq.w	800d2f4 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0a2:	4a4c      	ldr	r2, [pc, #304]	@ (800d1d4 <UART_SetConfig+0x2fc>)
 800d0a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ac:	fbb3 f3f2 	udiv	r3, r3, r2
 800d0b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	685a      	ldr	r2, [r3, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	005b      	lsls	r3, r3, #1
 800d0ba:	4413      	add	r3, r2
 800d0bc:	69ba      	ldr	r2, [r7, #24]
 800d0be:	429a      	cmp	r2, r3
 800d0c0:	d305      	bcc.n	800d0ce <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d903      	bls.n	800d0d6 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d0d4:	e10e      	b.n	800d2f4 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d8:	2200      	movs	r2, #0
 800d0da:	60bb      	str	r3, [r7, #8]
 800d0dc:	60fa      	str	r2, [r7, #12]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0e2:	4a3c      	ldr	r2, [pc, #240]	@ (800d1d4 <UART_SetConfig+0x2fc>)
 800d0e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0e8:	b29b      	uxth	r3, r3
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	603b      	str	r3, [r7, #0]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d0f8:	f7f3 fc30 	bl	800095c <__aeabi_uldivmod>
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	4610      	mov	r0, r2
 800d102:	4619      	mov	r1, r3
 800d104:	f04f 0200 	mov.w	r2, #0
 800d108:	f04f 0300 	mov.w	r3, #0
 800d10c:	020b      	lsls	r3, r1, #8
 800d10e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d112:	0202      	lsls	r2, r0, #8
 800d114:	6979      	ldr	r1, [r7, #20]
 800d116:	6849      	ldr	r1, [r1, #4]
 800d118:	0849      	lsrs	r1, r1, #1
 800d11a:	2000      	movs	r0, #0
 800d11c:	460c      	mov	r4, r1
 800d11e:	4605      	mov	r5, r0
 800d120:	eb12 0804 	adds.w	r8, r2, r4
 800d124:	eb43 0905 	adc.w	r9, r3, r5
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	2200      	movs	r2, #0
 800d12e:	469a      	mov	sl, r3
 800d130:	4693      	mov	fp, r2
 800d132:	4652      	mov	r2, sl
 800d134:	465b      	mov	r3, fp
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 fc0f 	bl	800095c <__aeabi_uldivmod>
 800d13e:	4602      	mov	r2, r0
 800d140:	460b      	mov	r3, r1
 800d142:	4613      	mov	r3, r2
 800d144:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d146:	6a3b      	ldr	r3, [r7, #32]
 800d148:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d14c:	d308      	bcc.n	800d160 <UART_SetConfig+0x288>
 800d14e:	6a3b      	ldr	r3, [r7, #32]
 800d150:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d154:	d204      	bcs.n	800d160 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	6a3a      	ldr	r2, [r7, #32]
 800d15c:	60da      	str	r2, [r3, #12]
 800d15e:	e0c9      	b.n	800d2f4 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800d160:	2301      	movs	r3, #1
 800d162:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d166:	e0c5      	b.n	800d2f4 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	69db      	ldr	r3, [r3, #28]
 800d16c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d170:	d16d      	bne.n	800d24e <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800d172:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d176:	3b01      	subs	r3, #1
 800d178:	2b07      	cmp	r3, #7
 800d17a:	d82d      	bhi.n	800d1d8 <UART_SetConfig+0x300>
 800d17c:	a201      	add	r2, pc, #4	@ (adr r2, 800d184 <UART_SetConfig+0x2ac>)
 800d17e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d182:	bf00      	nop
 800d184:	0800d1a5 	.word	0x0800d1a5
 800d188:	0800d1ad 	.word	0x0800d1ad
 800d18c:	0800d1d9 	.word	0x0800d1d9
 800d190:	0800d1b3 	.word	0x0800d1b3
 800d194:	0800d1d9 	.word	0x0800d1d9
 800d198:	0800d1d9 	.word	0x0800d1d9
 800d19c:	0800d1d9 	.word	0x0800d1d9
 800d1a0:	0800d1bb 	.word	0x0800d1bb
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1a4:	f7fe ff68 	bl	800c078 <HAL_RCC_GetPCLK2Freq>
 800d1a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1aa:	e01b      	b.n	800d1e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d1ac:	4b08      	ldr	r3, [pc, #32]	@ (800d1d0 <UART_SetConfig+0x2f8>)
 800d1ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1b0:	e018      	b.n	800d1e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d1b2:	f7fe fecb 	bl	800bf4c <HAL_RCC_GetSysClockFreq>
 800d1b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d1b8:	e014      	b.n	800d1e4 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d1ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d1be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d1c0:	e010      	b.n	800d1e4 <UART_SetConfig+0x30c>
 800d1c2:	bf00      	nop
 800d1c4:	cfff69f3 	.word	0xcfff69f3
 800d1c8:	40008000 	.word	0x40008000
 800d1cc:	40013800 	.word	0x40013800
 800d1d0:	00f42400 	.word	0x00f42400
 800d1d4:	08014fc4 	.word	0x08014fc4
      default:
        pclk = 0U;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d1dc:	2301      	movs	r3, #1
 800d1de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d1e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 8084 	beq.w	800d2f4 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f0:	4a4b      	ldr	r2, [pc, #300]	@ (800d320 <UART_SetConfig+0x448>)
 800d1f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1fa:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1fe:	005a      	lsls	r2, r3, #1
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	685b      	ldr	r3, [r3, #4]
 800d204:	085b      	lsrs	r3, r3, #1
 800d206:	441a      	add	r2, r3
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d210:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d212:	6a3b      	ldr	r3, [r7, #32]
 800d214:	2b0f      	cmp	r3, #15
 800d216:	d916      	bls.n	800d246 <UART_SetConfig+0x36e>
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d21e:	d212      	bcs.n	800d246 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d220:	6a3b      	ldr	r3, [r7, #32]
 800d222:	b29b      	uxth	r3, r3
 800d224:	f023 030f 	bic.w	r3, r3, #15
 800d228:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d22a:	6a3b      	ldr	r3, [r7, #32]
 800d22c:	085b      	lsrs	r3, r3, #1
 800d22e:	b29b      	uxth	r3, r3
 800d230:	f003 0307 	and.w	r3, r3, #7
 800d234:	b29a      	uxth	r2, r3
 800d236:	8bfb      	ldrh	r3, [r7, #30]
 800d238:	4313      	orrs	r3, r2
 800d23a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d23c:	697b      	ldr	r3, [r7, #20]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	8bfa      	ldrh	r2, [r7, #30]
 800d242:	60da      	str	r2, [r3, #12]
 800d244:	e056      	b.n	800d2f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d24c:	e052      	b.n	800d2f4 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d24e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d252:	3b01      	subs	r3, #1
 800d254:	2b07      	cmp	r3, #7
 800d256:	d822      	bhi.n	800d29e <UART_SetConfig+0x3c6>
 800d258:	a201      	add	r2, pc, #4	@ (adr r2, 800d260 <UART_SetConfig+0x388>)
 800d25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d25e:	bf00      	nop
 800d260:	0800d281 	.word	0x0800d281
 800d264:	0800d289 	.word	0x0800d289
 800d268:	0800d29f 	.word	0x0800d29f
 800d26c:	0800d28f 	.word	0x0800d28f
 800d270:	0800d29f 	.word	0x0800d29f
 800d274:	0800d29f 	.word	0x0800d29f
 800d278:	0800d29f 	.word	0x0800d29f
 800d27c:	0800d297 	.word	0x0800d297
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d280:	f7fe fefa 	bl	800c078 <HAL_RCC_GetPCLK2Freq>
 800d284:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d286:	e010      	b.n	800d2aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d288:	4b26      	ldr	r3, [pc, #152]	@ (800d324 <UART_SetConfig+0x44c>)
 800d28a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d28c:	e00d      	b.n	800d2aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d28e:	f7fe fe5d 	bl	800bf4c <HAL_RCC_GetSysClockFreq>
 800d292:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d294:	e009      	b.n	800d2aa <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d29a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d29c:	e005      	b.n	800d2aa <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d2a8:	bf00      	nop
    }

    if (pclk != 0U)
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d021      	beq.n	800d2f4 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d2b0:	697b      	ldr	r3, [r7, #20]
 800d2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d320 <UART_SetConfig+0x448>)
 800d2b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2be:	fbb3 f2f2 	udiv	r2, r3, r2
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	085b      	lsrs	r3, r3, #1
 800d2c8:	441a      	add	r2, r3
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2d4:	6a3b      	ldr	r3, [r7, #32]
 800d2d6:	2b0f      	cmp	r3, #15
 800d2d8:	d909      	bls.n	800d2ee <UART_SetConfig+0x416>
 800d2da:	6a3b      	ldr	r3, [r7, #32]
 800d2dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2e0:	d205      	bcs.n	800d2ee <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2e2:	6a3b      	ldr	r3, [r7, #32]
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	60da      	str	r2, [r3, #12]
 800d2ec:	e002      	b.n	800d2f4 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d2ee:	2301      	movs	r3, #1
 800d2f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d2fc:	697b      	ldr	r3, [r7, #20]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2200      	movs	r2, #0
 800d308:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	2200      	movs	r2, #0
 800d30e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d310:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d314:	4618      	mov	r0, r3
 800d316:	3730      	adds	r7, #48	@ 0x30
 800d318:	46bd      	mov	sp, r7
 800d31a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d31e:	bf00      	nop
 800d320:	08014fc4 	.word	0x08014fc4
 800d324:	00f42400 	.word	0x00f42400

0800d328 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d328:	b480      	push	{r7}
 800d32a:	b083      	sub	sp, #12
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d334:	f003 0308 	and.w	r3, r3, #8
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d00a      	beq.n	800d352 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	430a      	orrs	r2, r1
 800d350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d356:	f003 0301 	and.w	r3, r3, #1
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d00a      	beq.n	800d374 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	685b      	ldr	r3, [r3, #4]
 800d364:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	430a      	orrs	r2, r1
 800d372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d378:	f003 0302 	and.w	r3, r3, #2
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00a      	beq.n	800d396 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	685b      	ldr	r3, [r3, #4]
 800d386:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	430a      	orrs	r2, r1
 800d394:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d39a:	f003 0304 	and.w	r3, r3, #4
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d00a      	beq.n	800d3b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	430a      	orrs	r2, r1
 800d3b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3bc:	f003 0310 	and.w	r3, r3, #16
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00a      	beq.n	800d3da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3de:	f003 0320 	and.w	r3, r3, #32
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00a      	beq.n	800d3fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	689b      	ldr	r3, [r3, #8]
 800d3ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d404:	2b00      	cmp	r3, #0
 800d406:	d01a      	beq.n	800d43e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	430a      	orrs	r2, r1
 800d41c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d422:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d426:	d10a      	bne.n	800d43e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	430a      	orrs	r2, r1
 800d43c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d446:	2b00      	cmp	r3, #0
 800d448:	d00a      	beq.n	800d460 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	685b      	ldr	r3, [r3, #4]
 800d450:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	430a      	orrs	r2, r1
 800d45e:	605a      	str	r2, [r3, #4]
  }
}
 800d460:	bf00      	nop
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b098      	sub	sp, #96	@ 0x60
 800d470:	af02      	add	r7, sp, #8
 800d472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	2200      	movs	r2, #0
 800d478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d47c:	f7fb f87e 	bl	800857c <HAL_GetTick>
 800d480:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	f003 0308 	and.w	r3, r3, #8
 800d48c:	2b08      	cmp	r3, #8
 800d48e:	d12f      	bne.n	800d4f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d490:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d494:	9300      	str	r3, [sp, #0]
 800d496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d498:	2200      	movs	r2, #0
 800d49a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f88e 	bl	800d5c0 <UART_WaitOnFlagUntilTimeout>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d022      	beq.n	800d4f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4b2:	e853 3f00 	ldrex	r3, [r3]
 800d4b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d4b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d4be:	653b      	str	r3, [r7, #80]	@ 0x50
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	461a      	mov	r2, r3
 800d4c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4c8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4ca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d4d0:	e841 2300 	strex	r3, r2, [r1]
 800d4d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d4d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1e6      	bne.n	800d4aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2220      	movs	r2, #32
 800d4e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ec:	2303      	movs	r3, #3
 800d4ee:	e063      	b.n	800d5b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f003 0304 	and.w	r3, r3, #4
 800d4fa:	2b04      	cmp	r3, #4
 800d4fc:	d149      	bne.n	800d592 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d502:	9300      	str	r3, [sp, #0]
 800d504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d506:	2200      	movs	r2, #0
 800d508:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f857 	bl	800d5c0 <UART_WaitOnFlagUntilTimeout>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d03c      	beq.n	800d592 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d520:	e853 3f00 	ldrex	r3, [r3]
 800d524:	623b      	str	r3, [r7, #32]
   return(result);
 800d526:	6a3b      	ldr	r3, [r7, #32]
 800d528:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d52c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d536:	633b      	str	r3, [r7, #48]	@ 0x30
 800d538:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d53a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d53e:	e841 2300 	strex	r3, r2, [r1]
 800d542:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d546:	2b00      	cmp	r3, #0
 800d548:	d1e6      	bne.n	800d518 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	3308      	adds	r3, #8
 800d550:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d552:	693b      	ldr	r3, [r7, #16]
 800d554:	e853 3f00 	ldrex	r3, [r3]
 800d558:	60fb      	str	r3, [r7, #12]
   return(result);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f023 0301 	bic.w	r3, r3, #1
 800d560:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	3308      	adds	r3, #8
 800d568:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d56a:	61fa      	str	r2, [r7, #28]
 800d56c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d56e:	69b9      	ldr	r1, [r7, #24]
 800d570:	69fa      	ldr	r2, [r7, #28]
 800d572:	e841 2300 	strex	r3, r2, [r1]
 800d576:	617b      	str	r3, [r7, #20]
   return(result);
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d1e5      	bne.n	800d54a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2220      	movs	r2, #32
 800d582:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e012      	b.n	800d5b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2220      	movs	r2, #32
 800d596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2220      	movs	r2, #32
 800d59e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d5b6:	2300      	movs	r3, #0
}
 800d5b8:	4618      	mov	r0, r3
 800d5ba:	3758      	adds	r7, #88	@ 0x58
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	bd80      	pop	{r7, pc}

0800d5c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b084      	sub	sp, #16
 800d5c4:	af00      	add	r7, sp, #0
 800d5c6:	60f8      	str	r0, [r7, #12]
 800d5c8:	60b9      	str	r1, [r7, #8]
 800d5ca:	603b      	str	r3, [r7, #0]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d5d0:	e04f      	b.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5d8:	d04b      	beq.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d5da:	f7fa ffcf 	bl	800857c <HAL_GetTick>
 800d5de:	4602      	mov	r2, r0
 800d5e0:	683b      	ldr	r3, [r7, #0]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	69ba      	ldr	r2, [r7, #24]
 800d5e6:	429a      	cmp	r2, r3
 800d5e8:	d302      	bcc.n	800d5f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800d5ea:	69bb      	ldr	r3, [r7, #24]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	e04e      	b.n	800d692 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	f003 0304 	and.w	r3, r3, #4
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d037      	beq.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	2b80      	cmp	r3, #128	@ 0x80
 800d606:	d034      	beq.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	2b40      	cmp	r3, #64	@ 0x40
 800d60c:	d031      	beq.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	69db      	ldr	r3, [r3, #28]
 800d614:	f003 0308 	and.w	r3, r3, #8
 800d618:	2b08      	cmp	r3, #8
 800d61a:	d110      	bne.n	800d63e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2208      	movs	r2, #8
 800d622:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f000 f838 	bl	800d69a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2208      	movs	r2, #8
 800d62e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e029      	b.n	800d692 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	69db      	ldr	r3, [r3, #28]
 800d644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d648:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d64c:	d111      	bne.n	800d672 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 f81e 	bl	800d69a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2220      	movs	r2, #32
 800d662:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	2200      	movs	r2, #0
 800d66a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d66e:	2303      	movs	r3, #3
 800d670:	e00f      	b.n	800d692 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	69da      	ldr	r2, [r3, #28]
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	4013      	ands	r3, r2
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	429a      	cmp	r2, r3
 800d680:	bf0c      	ite	eq
 800d682:	2301      	moveq	r3, #1
 800d684:	2300      	movne	r3, #0
 800d686:	b2db      	uxtb	r3, r3
 800d688:	461a      	mov	r2, r3
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	429a      	cmp	r2, r3
 800d68e:	d0a0      	beq.n	800d5d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}

0800d69a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d69a:	b480      	push	{r7}
 800d69c:	b095      	sub	sp, #84	@ 0x54
 800d69e:	af00      	add	r7, sp, #0
 800d6a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6aa:	e853 3f00 	ldrex	r3, [r3]
 800d6ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d6b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d6b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6c0:	643b      	str	r3, [r7, #64]	@ 0x40
 800d6c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d6c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d6c8:	e841 2300 	strex	r3, r2, [r1]
 800d6cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d1e6      	bne.n	800d6a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3308      	adds	r3, #8
 800d6da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6dc:	6a3b      	ldr	r3, [r7, #32]
 800d6de:	e853 3f00 	ldrex	r3, [r3]
 800d6e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800d6e4:	69fb      	ldr	r3, [r7, #28]
 800d6e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d6ea:	f023 0301 	bic.w	r3, r3, #1
 800d6ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	3308      	adds	r3, #8
 800d6f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d6f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d6fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d6fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d700:	e841 2300 	strex	r3, r2, [r1]
 800d704:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d1e3      	bne.n	800d6d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d710:	2b01      	cmp	r3, #1
 800d712:	d118      	bne.n	800d746 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	e853 3f00 	ldrex	r3, [r3]
 800d720:	60bb      	str	r3, [r7, #8]
   return(result);
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	f023 0310 	bic.w	r3, r3, #16
 800d728:	647b      	str	r3, [r7, #68]	@ 0x44
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	461a      	mov	r2, r3
 800d730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d732:	61bb      	str	r3, [r7, #24]
 800d734:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d736:	6979      	ldr	r1, [r7, #20]
 800d738:	69ba      	ldr	r2, [r7, #24]
 800d73a:	e841 2300 	strex	r3, r2, [r1]
 800d73e:	613b      	str	r3, [r7, #16]
   return(result);
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d1e6      	bne.n	800d714 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d75a:	bf00      	nop
 800d75c:	3754      	adds	r7, #84	@ 0x54
 800d75e:	46bd      	mov	sp, r7
 800d760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d764:	4770      	bx	lr

0800d766 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d766:	b480      	push	{r7}
 800d768:	b085      	sub	sp, #20
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d774:	2b01      	cmp	r3, #1
 800d776:	d101      	bne.n	800d77c <HAL_UARTEx_DisableFifoMode+0x16>
 800d778:	2302      	movs	r3, #2
 800d77a:	e027      	b.n	800d7cc <HAL_UARTEx_DisableFifoMode+0x66>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2201      	movs	r2, #1
 800d780:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	2224      	movs	r2, #36	@ 0x24
 800d788:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	f022 0201 	bic.w	r2, r2, #1
 800d7a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800d7aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	68fa      	ldr	r2, [r7, #12]
 800d7b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2220      	movs	r2, #32
 800d7be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3714      	adds	r7, #20
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b084      	sub	sp, #16
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
 800d7e0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d7e8:	2b01      	cmp	r3, #1
 800d7ea:	d101      	bne.n	800d7f0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d7ec:	2302      	movs	r3, #2
 800d7ee:	e02d      	b.n	800d84c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2224      	movs	r2, #36	@ 0x24
 800d7fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f022 0201 	bic.w	r2, r2, #1
 800d816:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	689b      	ldr	r3, [r3, #8]
 800d81e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	683a      	ldr	r2, [r7, #0]
 800d828:	430a      	orrs	r2, r1
 800d82a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f84f 	bl	800d8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68fa      	ldr	r2, [r7, #12]
 800d838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2220      	movs	r2, #32
 800d83e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2200      	movs	r2, #0
 800d846:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d864:	2b01      	cmp	r3, #1
 800d866:	d101      	bne.n	800d86c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d868:	2302      	movs	r3, #2
 800d86a:	e02d      	b.n	800d8c8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	2201      	movs	r2, #1
 800d870:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	2224      	movs	r2, #36	@ 0x24
 800d878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	681a      	ldr	r2, [r3, #0]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f022 0201 	bic.w	r2, r2, #1
 800d892:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	689b      	ldr	r3, [r3, #8]
 800d89a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	683a      	ldr	r2, [r7, #0]
 800d8a4:	430a      	orrs	r2, r1
 800d8a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	f000 f811 	bl	800d8d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	68fa      	ldr	r2, [r7, #12]
 800d8b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2220      	movs	r2, #32
 800d8ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d8c6:	2300      	movs	r3, #0
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3710      	adds	r7, #16
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b085      	sub	sp, #20
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d108      	bne.n	800d8f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2201      	movs	r2, #1
 800d8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2201      	movs	r2, #1
 800d8ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d8f0:	e031      	b.n	800d956 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d8f2:	2308      	movs	r3, #8
 800d8f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d8f6:	2308      	movs	r3, #8
 800d8f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	0e5b      	lsrs	r3, r3, #25
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 0307 	and.w	r3, r3, #7
 800d908:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	689b      	ldr	r3, [r3, #8]
 800d910:	0f5b      	lsrs	r3, r3, #29
 800d912:	b2db      	uxtb	r3, r3
 800d914:	f003 0307 	and.w	r3, r3, #7
 800d918:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d91a:	7bbb      	ldrb	r3, [r7, #14]
 800d91c:	7b3a      	ldrb	r2, [r7, #12]
 800d91e:	4911      	ldr	r1, [pc, #68]	@ (800d964 <UARTEx_SetNbDataToProcess+0x94>)
 800d920:	5c8a      	ldrb	r2, [r1, r2]
 800d922:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d926:	7b3a      	ldrb	r2, [r7, #12]
 800d928:	490f      	ldr	r1, [pc, #60]	@ (800d968 <UARTEx_SetNbDataToProcess+0x98>)
 800d92a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d92c:	fb93 f3f2 	sdiv	r3, r3, r2
 800d930:	b29a      	uxth	r2, r3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	7b7a      	ldrb	r2, [r7, #13]
 800d93c:	4909      	ldr	r1, [pc, #36]	@ (800d964 <UARTEx_SetNbDataToProcess+0x94>)
 800d93e:	5c8a      	ldrb	r2, [r1, r2]
 800d940:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d944:	7b7a      	ldrb	r2, [r7, #13]
 800d946:	4908      	ldr	r1, [pc, #32]	@ (800d968 <UARTEx_SetNbDataToProcess+0x98>)
 800d948:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d94a:	fb93 f3f2 	sdiv	r3, r3, r2
 800d94e:	b29a      	uxth	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d956:	bf00      	nop
 800d958:	3714      	adds	r7, #20
 800d95a:	46bd      	mov	sp, r7
 800d95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d960:	4770      	bx	lr
 800d962:	bf00      	nop
 800d964:	08014fdc 	.word	0x08014fdc
 800d968:	08014fe4 	.word	0x08014fe4

0800d96c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d974:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d978:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d980:	b29a      	uxth	r2, r3
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	b29b      	uxth	r3, r3
 800d986:	43db      	mvns	r3, r3
 800d988:	b29b      	uxth	r3, r3
 800d98a:	4013      	ands	r3, r2
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	3714      	adds	r7, #20
 800d99a:	46bd      	mov	sp, r7
 800d99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a0:	4770      	bx	lr

0800d9a2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b085      	sub	sp, #20
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	60f8      	str	r0, [r7, #12]
 800d9aa:	1d3b      	adds	r3, r7, #4
 800d9ac:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d9d0:	2300      	movs	r3, #0
}
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	3714      	adds	r7, #20
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800d9de:	b580      	push	{r7, lr}
 800d9e0:	b088      	sub	sp, #32
 800d9e2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9e8:	f107 0308 	add.w	r3, r7, #8
 800d9ec:	2218      	movs	r2, #24
 800d9ee:	2100      	movs	r1, #0
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f001 f92d 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9f6:	233f      	movs	r3, #63	@ 0x3f
 800d9f8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800d9fa:	2381      	movs	r3, #129	@ 0x81
 800d9fc:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d9fe:	1dfb      	adds	r3, r7, #7
 800da00:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800da02:	2301      	movs	r3, #1
 800da04:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da06:	f107 0308 	add.w	r3, r7, #8
 800da0a:	2100      	movs	r1, #0
 800da0c:	4618      	mov	r0, r3
 800da0e:	f001 fba9 	bl	800f164 <hci_send_req>
 800da12:	4603      	mov	r3, r0
 800da14:	2b00      	cmp	r3, #0
 800da16:	da01      	bge.n	800da1c <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800da18:	23ff      	movs	r3, #255	@ 0xff
 800da1a:	e000      	b.n	800da1e <aci_gap_set_non_discoverable+0x40>
  return status;
 800da1c:	79fb      	ldrb	r3, [r7, #7]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3720      	adds	r7, #32
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800da26:	b5b0      	push	{r4, r5, r7, lr}
 800da28:	b0ce      	sub	sp, #312	@ 0x138
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	4605      	mov	r5, r0
 800da2e:	460c      	mov	r4, r1
 800da30:	4610      	mov	r0, r2
 800da32:	4619      	mov	r1, r3
 800da34:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800da38:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800da3c:	462a      	mov	r2, r5
 800da3e:	701a      	strb	r2, [r3, #0]
 800da40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800da44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800da48:	4622      	mov	r2, r4
 800da4a:	801a      	strh	r2, [r3, #0]
 800da4c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800da50:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800da54:	4602      	mov	r2, r0
 800da56:	801a      	strh	r2, [r3, #0]
 800da58:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800da5c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800da60:	460a      	mov	r2, r1
 800da62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800da64:	f107 0310 	add.w	r3, r7, #16
 800da68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800da6c:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800da70:	3308      	adds	r3, #8
 800da72:	f107 0210 	add.w	r2, r7, #16
 800da76:	4413      	add	r3, r2
 800da78:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800da7c:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800da80:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800da84:	4413      	add	r3, r2
 800da86:	3309      	adds	r3, #9
 800da88:	f107 0210 	add.w	r2, r7, #16
 800da8c:	4413      	add	r3, r2
 800da8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800da92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800da96:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800da9a:	2200      	movs	r2, #0
 800da9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800daa4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800daa8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800daac:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800dab0:	7812      	ldrb	r2, [r2, #0]
 800dab2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dab4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dab8:	3301      	adds	r3, #1
 800daba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800dabe:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dac2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800dac6:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800daca:	8812      	ldrh	r2, [r2, #0]
 800dacc:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800dad0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dad4:	3302      	adds	r3, #2
 800dad6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800dada:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dade:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800dae2:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800dae6:	8812      	ldrh	r2, [r2, #0]
 800dae8:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800daec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800daf0:	3302      	adds	r3, #2
 800daf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800daf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800dafa:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800dafe:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800db02:	7812      	ldrb	r2, [r2, #0]
 800db04:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800db06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db0a:	3301      	adds	r3, #1
 800db0c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800db10:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800db14:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800db18:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800db1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db1e:	3301      	adds	r3, #1
 800db20:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800db24:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800db28:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800db2c:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800db2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db32:	3301      	adds	r3, #1
 800db34:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800db38:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800db3c:	3308      	adds	r3, #8
 800db3e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800db42:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800db46:	4618      	mov	r0, r3
 800db48:	f001 f872 	bl	800ec30 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800db4c:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800db50:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800db54:	4413      	add	r3, r2
 800db56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800db5a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800db5e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800db62:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800db64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db68:	3301      	adds	r3, #1
 800db6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800db6e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800db72:	3301      	adds	r3, #1
 800db74:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800db78:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800db7c:	4618      	mov	r0, r3
 800db7e:	f001 f857 	bl	800ec30 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800db82:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800db86:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800db8a:	4413      	add	r3, r2
 800db8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800db90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800db94:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800db98:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800db9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800db9e:	3302      	adds	r3, #2
 800dba0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800dba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dba8:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800dbac:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800dbae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbb2:	3302      	adds	r3, #2
 800dbb4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbb8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbbc:	2218      	movs	r2, #24
 800dbbe:	2100      	movs	r1, #0
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	f001 f845 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbc6:	233f      	movs	r3, #63	@ 0x3f
 800dbc8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800dbcc:	2383      	movs	r3, #131	@ 0x83
 800dbce:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dbd2:	f107 0310 	add.w	r3, r7, #16
 800dbd6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dbda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dbde:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dbe2:	f107 030f 	add.w	r3, r7, #15
 800dbe6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dbea:	2301      	movs	r3, #1
 800dbec:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbf0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dbf4:	2100      	movs	r1, #0
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	f001 fab4 	bl	800f164 <hci_send_req>
 800dbfc:	4603      	mov	r3, r0
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	da01      	bge.n	800dc06 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800dc02:	23ff      	movs	r3, #255	@ 0xff
 800dc04:	e004      	b.n	800dc10 <aci_gap_set_discoverable+0x1ea>
  return status;
 800dc06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800dc0a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dc0e:	781b      	ldrb	r3, [r3, #0]
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bdb0      	pop	{r4, r5, r7, pc}

0800dc1a <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b0cc      	sub	sp, #304	@ 0x130
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	4602      	mov	r2, r0
 800dc22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc26:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dc2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800dc2c:	f107 0310 	add.w	r3, r7, #16
 800dc30:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dc34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc38:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc40:	2300      	movs	r3, #0
 800dc42:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800dc46:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dc4a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dc4e:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dc52:	7812      	ldrb	r2, [r2, #0]
 800dc54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dc56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc5a:	3301      	adds	r3, #1
 800dc5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dc60:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc64:	2218      	movs	r2, #24
 800dc66:	2100      	movs	r1, #0
 800dc68:	4618      	mov	r0, r3
 800dc6a:	f000 fff1 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dc6e:	233f      	movs	r3, #63	@ 0x3f
 800dc70:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800dc74:	2385      	movs	r3, #133	@ 0x85
 800dc76:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dc7a:	f107 0310 	add.w	r3, r7, #16
 800dc7e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dc82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dc8a:	f107 030f 	add.w	r3, r7, #15
 800dc8e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dc92:	2301      	movs	r3, #1
 800dc94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dc98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dc9c:	2100      	movs	r1, #0
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f001 fa60 	bl	800f164 <hci_send_req>
 800dca4:	4603      	mov	r3, r0
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	da01      	bge.n	800dcae <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800dcaa:	23ff      	movs	r3, #255	@ 0xff
 800dcac:	e004      	b.n	800dcb8 <aci_gap_set_io_capability+0x9e>
  return status;
 800dcae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcb2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dcb6:	781b      	ldrb	r3, [r3, #0]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800dcc2:	b5b0      	push	{r4, r5, r7, lr}
 800dcc4:	b0cc      	sub	sp, #304	@ 0x130
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	4605      	mov	r5, r0
 800dcca:	460c      	mov	r4, r1
 800dccc:	4610      	mov	r0, r2
 800dcce:	4619      	mov	r1, r3
 800dcd0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcd4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800dcd8:	462a      	mov	r2, r5
 800dcda:	701a      	strb	r2, [r3, #0]
 800dcdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dce0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800dce4:	4622      	mov	r2, r4
 800dce6:	701a      	strb	r2, [r3, #0]
 800dce8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcec:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	701a      	strb	r2, [r3, #0]
 800dcf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcf8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800dcfc:	460a      	mov	r2, r1
 800dcfe:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800dd00:	f107 0310 	add.w	r3, r7, #16
 800dd04:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800dd08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800dd10:	2200      	movs	r2, #0
 800dd12:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd14:	2300      	movs	r3, #0
 800dd16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800dd1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd1e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd22:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800dd26:	7812      	ldrb	r2, [r2, #0]
 800dd28:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd2e:	3301      	adds	r3, #1
 800dd30:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800dd34:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd38:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd3c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800dd40:	7812      	ldrb	r2, [r2, #0]
 800dd42:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd48:	3301      	adds	r3, #1
 800dd4a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800dd4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd52:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd56:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dd5a:	7812      	ldrb	r2, [r2, #0]
 800dd5c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dd5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd62:	3301      	adds	r3, #1
 800dd64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800dd68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd6c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd70:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800dd74:	7812      	ldrb	r2, [r2, #0]
 800dd76:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800dd78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd7c:	3301      	adds	r3, #1
 800dd7e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800dd82:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd86:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800dd8a:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dd8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd90:	3301      	adds	r3, #1
 800dd92:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800dd96:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dd9a:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800dd9e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dda0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dda4:	3301      	adds	r3, #1
 800dda6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ddaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddae:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ddb2:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ddb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddb8:	3301      	adds	r3, #1
 800ddba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ddbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddc2:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800ddc6:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ddca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddce:	3304      	adds	r3, #4
 800ddd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800ddd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ddd8:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800dddc:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ddde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dde2:	3301      	adds	r3, #1
 800dde4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dde8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ddec:	2218      	movs	r2, #24
 800ddee:	2100      	movs	r1, #0
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f000 ff2d 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ddf6:	233f      	movs	r3, #63	@ 0x3f
 800ddf8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800ddfc:	2386      	movs	r3, #134	@ 0x86
 800ddfe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800de02:	f107 0310 	add.w	r3, r7, #16
 800de06:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800de0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de0e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800de12:	f107 030f 	add.w	r3, r7, #15
 800de16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800de1a:	2301      	movs	r3, #1
 800de1c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800de20:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800de24:	2100      	movs	r1, #0
 800de26:	4618      	mov	r0, r3
 800de28:	f001 f99c 	bl	800f164 <hci_send_req>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	da01      	bge.n	800de36 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800de32:	23ff      	movs	r3, #255	@ 0xff
 800de34:	e004      	b.n	800de40 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800de36:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de3a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de3e:	781b      	ldrb	r3, [r3, #0]
}
 800de40:	4618      	mov	r0, r3
 800de42:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800de46:	46bd      	mov	sp, r7
 800de48:	bdb0      	pop	{r4, r5, r7, pc}

0800de4a <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b0cc      	sub	sp, #304	@ 0x130
 800de4e:	af00      	add	r7, sp, #0
 800de50:	4602      	mov	r2, r0
 800de52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de56:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800de5a:	6019      	str	r1, [r3, #0]
 800de5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de60:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800de64:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800de66:	f107 0310 	add.w	r3, r7, #16
 800de6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800de6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de7a:	2300      	movs	r3, #0
 800de7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800de80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800de88:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800de8c:	8812      	ldrh	r2, [r2, #0]
 800de8e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800de90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de94:	3302      	adds	r3, #2
 800de96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800de9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800de9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dea2:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800dea6:	6812      	ldr	r2, [r2, #0]
 800dea8:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800deac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800deb0:	3304      	adds	r3, #4
 800deb2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800deb6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800deba:	2218      	movs	r2, #24
 800debc:	2100      	movs	r1, #0
 800debe:	4618      	mov	r0, r3
 800dec0:	f000 fec6 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dec4:	233f      	movs	r3, #63	@ 0x3f
 800dec6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800deca:	2388      	movs	r3, #136	@ 0x88
 800decc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ded0:	f107 0310 	add.w	r3, r7, #16
 800ded4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ded8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dedc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800dee0:	f107 030f 	add.w	r3, r7, #15
 800dee4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800dee8:	2301      	movs	r3, #1
 800deea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800deee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800def2:	2100      	movs	r1, #0
 800def4:	4618      	mov	r0, r3
 800def6:	f001 f935 	bl	800f164 <hci_send_req>
 800defa:	4603      	mov	r3, r0
 800defc:	2b00      	cmp	r3, #0
 800defe:	da01      	bge.n	800df04 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800df00:	23ff      	movs	r3, #255	@ 0xff
 800df02:	e004      	b.n	800df0e <aci_gap_pass_key_resp+0xc4>
  return status;
 800df04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800df0c:	781b      	ldrb	r3, [r3, #0]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800df18:	b590      	push	{r4, r7, lr}
 800df1a:	b0cd      	sub	sp, #308	@ 0x134
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	4604      	mov	r4, r0
 800df20:	4608      	mov	r0, r1
 800df22:	4611      	mov	r1, r2
 800df24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df28:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df32:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800df36:	4622      	mov	r2, r4
 800df38:	701a      	strb	r2, [r3, #0]
 800df3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df3e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800df42:	4602      	mov	r2, r0
 800df44:	701a      	strb	r2, [r3, #0]
 800df46:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df4a:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800df4e:	460a      	mov	r2, r1
 800df50:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800df52:	f107 0310 	add.w	r3, r7, #16
 800df56:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800df5a:	f107 0308 	add.w	r3, r7, #8
 800df5e:	2207      	movs	r2, #7
 800df60:	2100      	movs	r1, #0
 800df62:	4618      	mov	r0, r3
 800df64:	f000 fe74 	bl	800ec50 <Osal_MemSet>
  int index_input = 0;
 800df68:	2300      	movs	r3, #0
 800df6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800df6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df76:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800df7a:	7812      	ldrb	r2, [r2, #0]
 800df7c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800df7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df82:	3301      	adds	r3, #1
 800df84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800df88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800df8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800df90:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800df94:	7812      	ldrb	r2, [r2, #0]
 800df96:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800df98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df9c:	3301      	adds	r3, #1
 800df9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800dfa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800dfa6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dfaa:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800dfae:	7812      	ldrb	r2, [r2, #0]
 800dfb0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dfb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dfbc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dfc0:	2218      	movs	r2, #24
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f000 fe43 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dfca:	233f      	movs	r3, #63	@ 0x3f
 800dfcc:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800dfd0:	238a      	movs	r3, #138	@ 0x8a
 800dfd2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800dfd6:	f107 0310 	add.w	r3, r7, #16
 800dfda:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800dfde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfe2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800dfee:	2307      	movs	r3, #7
 800dff0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dff4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800dff8:	2100      	movs	r1, #0
 800dffa:	4618      	mov	r0, r3
 800dffc:	f001 f8b2 	bl	800f164 <hci_send_req>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	da01      	bge.n	800e00a <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800e006:	23ff      	movs	r3, #255	@ 0xff
 800e008:	e02e      	b.n	800e068 <aci_gap_init+0x150>
  if ( resp.Status )
 800e00a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e00e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d005      	beq.n	800e024 <aci_gap_init+0x10c>
    return resp.Status;
 800e018:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e01c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e020:	781b      	ldrb	r3, [r3, #0]
 800e022:	e021      	b.n	800e068 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800e024:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e028:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e02c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e030:	b29a      	uxth	r2, r3
 800e032:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e036:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800e03e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e042:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e046:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800e04a:	b29a      	uxth	r2, r3
 800e04c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800e050:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800e052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e056:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800e05a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800e05e:	b29a      	uxth	r2, r3
 800e060:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800e064:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd90      	pop	{r4, r7, pc}

0800e072 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b0cc      	sub	sp, #304	@ 0x130
 800e076:	af00      	add	r7, sp, #0
 800e078:	4602      	mov	r2, r0
 800e07a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e07e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e082:	6019      	str	r1, [r3, #0]
 800e084:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e088:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e08c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800e08e:	f107 0310 	add.w	r3, r7, #16
 800e092:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e096:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e09a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e09e:	2200      	movs	r2, #0
 800e0a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800e0a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e0b0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e0b4:	7812      	ldrb	r2, [r2, #0]
 800e0b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e0b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0bc:	3301      	adds	r3, #1
 800e0be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800e0c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e0c6:	1c58      	adds	r0, r3, #1
 800e0c8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0cc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e0d0:	781a      	ldrb	r2, [r3, #0]
 800e0d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0d6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e0da:	6819      	ldr	r1, [r3, #0]
 800e0dc:	f000 fda8 	bl	800ec30 <Osal_MemCpy>
  index_input += AdvDataLen;
 800e0e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e0e4:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e0ee:	4413      	add	r3, r2
 800e0f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e0f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e0f8:	2218      	movs	r2, #24
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4618      	mov	r0, r3
 800e0fe:	f000 fda7 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e102:	233f      	movs	r3, #63	@ 0x3f
 800e104:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800e108:	238e      	movs	r3, #142	@ 0x8e
 800e10a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e10e:	f107 0310 	add.w	r3, r7, #16
 800e112:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e116:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e11a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e11e:	f107 030f 	add.w	r3, r7, #15
 800e122:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e126:	2301      	movs	r3, #1
 800e128:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e12c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e130:	2100      	movs	r1, #0
 800e132:	4618      	mov	r0, r3
 800e134:	f001 f816 	bl	800f164 <hci_send_req>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	da01      	bge.n	800e142 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800e13e:	23ff      	movs	r3, #255	@ 0xff
 800e140:	e004      	b.n	800e14c <aci_gap_update_adv_data+0xda>
  return status;
 800e142:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e146:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e14a:	781b      	ldrb	r3, [r3, #0]
}
 800e14c:	4618      	mov	r0, r3
 800e14e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b088      	sub	sp, #32
 800e15a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e15c:	2300      	movs	r3, #0
 800e15e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e160:	f107 0308 	add.w	r3, r7, #8
 800e164:	2218      	movs	r2, #24
 800e166:	2100      	movs	r1, #0
 800e168:	4618      	mov	r0, r3
 800e16a:	f000 fd71 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e16e:	233f      	movs	r3, #63	@ 0x3f
 800e170:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800e172:	2392      	movs	r3, #146	@ 0x92
 800e174:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e176:	1dfb      	adds	r3, r7, #7
 800e178:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e17a:	2301      	movs	r3, #1
 800e17c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e17e:	f107 0308 	add.w	r3, r7, #8
 800e182:	2100      	movs	r1, #0
 800e184:	4618      	mov	r0, r3
 800e186:	f000 ffed 	bl	800f164 <hci_send_req>
 800e18a:	4603      	mov	r3, r0
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	da01      	bge.n	800e194 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e190:	23ff      	movs	r3, #255	@ 0xff
 800e192:	e000      	b.n	800e196 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800e194:	79fb      	ldrb	r3, [r7, #7]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}

0800e19e <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b0cc      	sub	sp, #304	@ 0x130
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1aa:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e1ae:	801a      	strh	r2, [r3, #0]
 800e1b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1b4:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800e1b8:	460a      	mov	r2, r1
 800e1ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800e1bc:	f107 0310 	add.w	r3, r7, #16
 800e1c0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e1c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e1c8:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1da:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e1de:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e1e2:	8812      	ldrh	r2, [r2, #0]
 800e1e4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e1e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1ea:	3302      	adds	r3, #2
 800e1ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800e1f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e1f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e1f8:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800e1fc:	7812      	ldrb	r2, [r2, #0]
 800e1fe:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e200:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e204:	3301      	adds	r3, #1
 800e206:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e20a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e20e:	2218      	movs	r2, #24
 800e210:	2100      	movs	r1, #0
 800e212:	4618      	mov	r0, r3
 800e214:	f000 fd1c 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e218:	233f      	movs	r3, #63	@ 0x3f
 800e21a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800e21e:	23a5      	movs	r3, #165	@ 0xa5
 800e220:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e224:	f107 0310 	add.w	r3, r7, #16
 800e228:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e22c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e230:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e234:	f107 030f 	add.w	r3, r7, #15
 800e238:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e23c:	2301      	movs	r3, #1
 800e23e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e242:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e246:	2100      	movs	r1, #0
 800e248:	4618      	mov	r0, r3
 800e24a:	f000 ff8b 	bl	800f164 <hci_send_req>
 800e24e:	4603      	mov	r3, r0
 800e250:	2b00      	cmp	r3, #0
 800e252:	da01      	bge.n	800e258 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800e254:	23ff      	movs	r3, #255	@ 0xff
 800e256:	e004      	b.n	800e262 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800e258:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e25c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e260:	781b      	ldrb	r3, [r3, #0]
}
 800e262:	4618      	mov	r0, r3
 800e264:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e272:	2300      	movs	r3, #0
 800e274:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e276:	f107 0308 	add.w	r3, r7, #8
 800e27a:	2218      	movs	r2, #24
 800e27c:	2100      	movs	r1, #0
 800e27e:	4618      	mov	r0, r3
 800e280:	f000 fce6 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e284:	233f      	movs	r3, #63	@ 0x3f
 800e286:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800e288:	f240 1301 	movw	r3, #257	@ 0x101
 800e28c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e28e:	1dfb      	adds	r3, r7, #7
 800e290:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e292:	2301      	movs	r3, #1
 800e294:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e296:	f107 0308 	add.w	r3, r7, #8
 800e29a:	2100      	movs	r1, #0
 800e29c:	4618      	mov	r0, r3
 800e29e:	f000 ff61 	bl	800f164 <hci_send_req>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	da01      	bge.n	800e2ac <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800e2a8:	23ff      	movs	r3, #255	@ 0xff
 800e2aa:	e000      	b.n	800e2ae <aci_gatt_init+0x42>
  return status;
 800e2ac:	79fb      	ldrb	r3, [r7, #7]
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3720      	adds	r7, #32
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	bd80      	pop	{r7, pc}

0800e2b6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800e2b6:	b590      	push	{r4, r7, lr}
 800e2b8:	b0cf      	sub	sp, #316	@ 0x13c
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	4604      	mov	r4, r0
 800e2be:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800e2c2:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800e2c6:	6001      	str	r1, [r0, #0]
 800e2c8:	4610      	mov	r0, r2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2d0:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	701a      	strb	r2, [r3, #0]
 800e2d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2dc:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	701a      	strb	r2, [r3, #0]
 800e2e4:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2e8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800e2ec:	460a      	mov	r2, r1
 800e2ee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800e2f0:	f107 0310 	add.w	r3, r7, #16
 800e2f4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800e2f8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e2fc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e300:	781b      	ldrb	r3, [r3, #0]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d00a      	beq.n	800e31c <aci_gatt_add_service+0x66>
 800e306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e30a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	2b02      	cmp	r3, #2
 800e312:	d101      	bne.n	800e318 <aci_gatt_add_service+0x62>
 800e314:	2311      	movs	r3, #17
 800e316:	e002      	b.n	800e31e <aci_gatt_add_service+0x68>
 800e318:	2301      	movs	r3, #1
 800e31a:	e000      	b.n	800e31e <aci_gatt_add_service+0x68>
 800e31c:	2303      	movs	r3, #3
 800e31e:	f107 0210 	add.w	r2, r7, #16
 800e322:	4413      	add	r3, r2
 800e324:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e328:	f107 030c 	add.w	r3, r7, #12
 800e32c:	2203      	movs	r2, #3
 800e32e:	2100      	movs	r1, #0
 800e330:	4618      	mov	r0, r3
 800e332:	f000 fc8d 	bl	800ec50 <Osal_MemSet>
  int index_input = 0;
 800e336:	2300      	movs	r3, #0
 800e338:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800e33c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e340:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e344:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800e348:	7812      	ldrb	r2, [r2, #0]
 800e34a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e34c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e350:	3301      	adds	r3, #1
 800e352:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800e356:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e35a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800e35e:	781b      	ldrb	r3, [r3, #0]
 800e360:	2b01      	cmp	r3, #1
 800e362:	d002      	beq.n	800e36a <aci_gatt_add_service+0xb4>
 800e364:	2b02      	cmp	r3, #2
 800e366:	d004      	beq.n	800e372 <aci_gatt_add_service+0xbc>
 800e368:	e007      	b.n	800e37a <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800e36a:	2302      	movs	r3, #2
 800e36c:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800e370:	e005      	b.n	800e37e <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800e372:	2310      	movs	r3, #16
 800e374:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800e378:	e001      	b.n	800e37e <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800e37a:	2397      	movs	r3, #151	@ 0x97
 800e37c:	e06c      	b.n	800e458 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800e37e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e382:	1c58      	adds	r0, r3, #1
 800e384:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800e388:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e38c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e390:	6819      	ldr	r1, [r3, #0]
 800e392:	f000 fc4d 	bl	800ec30 <Osal_MemCpy>
    index_input += size;
 800e396:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800e39a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e39e:	4413      	add	r3, r2
 800e3a0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800e3a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e3a8:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e3ac:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e3b0:	7812      	ldrb	r2, [r2, #0]
 800e3b2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800e3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800e3be:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e3c2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800e3c6:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800e3ca:	7812      	ldrb	r2, [r2, #0]
 800e3cc:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800e3ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e3d8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e3dc:	2218      	movs	r2, #24
 800e3de:	2100      	movs	r1, #0
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f000 fc35 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e3e6:	233f      	movs	r3, #63	@ 0x3f
 800e3e8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800e3ec:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800e3f0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e3f4:	f107 0310 	add.w	r3, r7, #16
 800e3f8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e3fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e400:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800e404:	f107 030c 	add.w	r3, r7, #12
 800e408:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800e40c:	2303      	movs	r3, #3
 800e40e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e416:	2100      	movs	r1, #0
 800e418:	4618      	mov	r0, r3
 800e41a:	f000 fea3 	bl	800f164 <hci_send_req>
 800e41e:	4603      	mov	r3, r0
 800e420:	2b00      	cmp	r3, #0
 800e422:	da01      	bge.n	800e428 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800e424:	23ff      	movs	r3, #255	@ 0xff
 800e426:	e017      	b.n	800e458 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800e428:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e42c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e430:	781b      	ldrb	r3, [r3, #0]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d005      	beq.n	800e442 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800e436:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e43a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	e00a      	b.n	800e458 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800e442:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800e446:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e44a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e44e:	b29a      	uxth	r2, r3
 800e450:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800e454:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e456:	2300      	movs	r3, #0
}
 800e458:	4618      	mov	r0, r3
 800e45a:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800e45e:	46bd      	mov	sp, r7
 800e460:	bd90      	pop	{r4, r7, pc}

0800e462 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800e462:	b590      	push	{r4, r7, lr}
 800e464:	b0d1      	sub	sp, #324	@ 0x144
 800e466:	af00      	add	r7, sp, #0
 800e468:	4604      	mov	r4, r0
 800e46a:	4608      	mov	r0, r1
 800e46c:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800e470:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800e474:	600a      	str	r2, [r1, #0]
 800e476:	4619      	mov	r1, r3
 800e478:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e47c:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800e480:	4622      	mov	r2, r4
 800e482:	801a      	strh	r2, [r3, #0]
 800e484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e488:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800e48c:	4602      	mov	r2, r0
 800e48e:	701a      	strb	r2, [r3, #0]
 800e490:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e494:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800e498:	460a      	mov	r2, r1
 800e49a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800e49c:	f107 0318 	add.w	r3, r7, #24
 800e4a0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800e4a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e4a8:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b01      	cmp	r3, #1
 800e4b0:	d00a      	beq.n	800e4c8 <aci_gatt_add_char+0x66>
 800e4b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e4b6:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	2b02      	cmp	r3, #2
 800e4be:	d101      	bne.n	800e4c4 <aci_gatt_add_char+0x62>
 800e4c0:	2313      	movs	r3, #19
 800e4c2:	e002      	b.n	800e4ca <aci_gatt_add_char+0x68>
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e000      	b.n	800e4ca <aci_gatt_add_char+0x68>
 800e4c8:	2305      	movs	r3, #5
 800e4ca:	f107 0218 	add.w	r2, r7, #24
 800e4ce:	4413      	add	r3, r2
 800e4d0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	2203      	movs	r2, #3
 800e4da:	2100      	movs	r1, #0
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f000 fbb7 	bl	800ec50 <Osal_MemSet>
  int index_input = 0;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800e4e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e4ec:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800e4f0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800e4f4:	8812      	ldrh	r2, [r2, #0]
 800e4f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e4f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e4fc:	3302      	adds	r3, #2
 800e4fe:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800e502:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e506:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800e50a:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800e50e:	7812      	ldrb	r2, [r2, #0]
 800e510:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e512:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e516:	3301      	adds	r3, #1
 800e518:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800e51c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e520:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	2b01      	cmp	r3, #1
 800e528:	d002      	beq.n	800e530 <aci_gatt_add_char+0xce>
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d004      	beq.n	800e538 <aci_gatt_add_char+0xd6>
 800e52e:	e007      	b.n	800e540 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800e530:	2302      	movs	r3, #2
 800e532:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800e536:	e005      	b.n	800e544 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800e538:	2310      	movs	r3, #16
 800e53a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800e53e:	e001      	b.n	800e544 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800e540:	2397      	movs	r3, #151	@ 0x97
 800e542:	e091      	b.n	800e668 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800e544:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800e548:	1cd8      	adds	r0, r3, #3
 800e54a:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800e54e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e552:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800e556:	6819      	ldr	r1, [r3, #0]
 800e558:	f000 fb6a 	bl	800ec30 <Osal_MemCpy>
    index_input += size;
 800e55c:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800e560:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800e564:	4413      	add	r3, r2
 800e566:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800e56a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e56e:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800e572:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800e576:	8812      	ldrh	r2, [r2, #0]
 800e578:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800e57a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e57e:	3302      	adds	r3, #2
 800e580:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800e584:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e588:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800e58c:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800e58e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e592:	3301      	adds	r3, #1
 800e594:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800e598:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e59c:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800e5a0:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800e5a2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800e5ac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e5b0:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800e5b4:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800e5b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800e5c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e5c4:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800e5c8:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800e5ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800e5d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800e5d8:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800e5dc:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800e5de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e5e8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e5ec:	2218      	movs	r2, #24
 800e5ee:	2100      	movs	r1, #0
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 fb2d 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e5f6:	233f      	movs	r3, #63	@ 0x3f
 800e5f8:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800e5fc:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800e600:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800e604:	f107 0318 	add.w	r3, r7, #24
 800e608:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800e60c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800e610:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800e614:	f107 0314 	add.w	r3, r7, #20
 800e618:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800e61c:	2303      	movs	r3, #3
 800e61e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e622:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800e626:	2100      	movs	r1, #0
 800e628:	4618      	mov	r0, r3
 800e62a:	f000 fd9b 	bl	800f164 <hci_send_req>
 800e62e:	4603      	mov	r3, r0
 800e630:	2b00      	cmp	r3, #0
 800e632:	da01      	bge.n	800e638 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800e634:	23ff      	movs	r3, #255	@ 0xff
 800e636:	e017      	b.n	800e668 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800e638:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e63c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e640:	781b      	ldrb	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d005      	beq.n	800e652 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800e646:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e64a:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	e00a      	b.n	800e668 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800e652:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800e656:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e65a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e65e:	b29a      	uxth	r2, r3
 800e660:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800e664:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd90      	pop	{r4, r7, pc}

0800e672 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800e672:	b5b0      	push	{r4, r5, r7, lr}
 800e674:	b0cc      	sub	sp, #304	@ 0x130
 800e676:	af00      	add	r7, sp, #0
 800e678:	4605      	mov	r5, r0
 800e67a:	460c      	mov	r4, r1
 800e67c:	4610      	mov	r0, r2
 800e67e:	4619      	mov	r1, r3
 800e680:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e684:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e688:	462a      	mov	r2, r5
 800e68a:	801a      	strh	r2, [r3, #0]
 800e68c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e690:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800e694:	4622      	mov	r2, r4
 800e696:	801a      	strh	r2, [r3, #0]
 800e698:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e69c:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800e6a0:	4602      	mov	r2, r0
 800e6a2:	701a      	strb	r2, [r3, #0]
 800e6a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6a8:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800e6ac:	460a      	mov	r2, r1
 800e6ae:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800e6b0:	f107 0310 	add.w	r3, r7, #16
 800e6b4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e6b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e6bc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e6c4:	2300      	movs	r3, #0
 800e6c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800e6ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e6ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e6d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e6d6:	8812      	ldrh	r2, [r2, #0]
 800e6d8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e6da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6de:	3302      	adds	r3, #2
 800e6e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800e6e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e6e8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e6ec:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800e6f0:	8812      	ldrh	r2, [r2, #0]
 800e6f2:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800e6f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6f8:	3302      	adds	r3, #2
 800e6fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800e6fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e702:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e706:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800e70a:	7812      	ldrb	r2, [r2, #0]
 800e70c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800e70e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e712:	3301      	adds	r3, #1
 800e714:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800e718:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e71c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e720:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800e724:	7812      	ldrb	r2, [r2, #0]
 800e726:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800e728:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e72c:	3301      	adds	r3, #1
 800e72e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800e732:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e736:	1d98      	adds	r0, r3, #6
 800e738:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e73c:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	461a      	mov	r2, r3
 800e744:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800e748:	f000 fa72 	bl	800ec30 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800e74c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e750:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e75a:	4413      	add	r3, r2
 800e75c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e760:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e764:	2218      	movs	r2, #24
 800e766:	2100      	movs	r1, #0
 800e768:	4618      	mov	r0, r3
 800e76a:	f000 fa71 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e76e:	233f      	movs	r3, #63	@ 0x3f
 800e770:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800e774:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800e778:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e77c:	f107 0310 	add.w	r3, r7, #16
 800e780:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e788:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e78c:	f107 030f 	add.w	r3, r7, #15
 800e790:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e794:	2301      	movs	r3, #1
 800e796:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e79a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e79e:	2100      	movs	r1, #0
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 fcdf 	bl	800f164 <hci_send_req>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	da01      	bge.n	800e7b0 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800e7ac:	23ff      	movs	r3, #255	@ 0xff
 800e7ae:	e004      	b.n	800e7ba <aci_gatt_update_char_value+0x148>
  return status;
 800e7b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e7b8:	781b      	ldrb	r3, [r3, #0]
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bdb0      	pop	{r4, r5, r7, pc}

0800e7c4 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b0cc      	sub	sp, #304	@ 0x130
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	4602      	mov	r2, r0
 800e7cc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7d0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e7d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800e7d6:	f107 0310 	add.w	r3, r7, #16
 800e7da:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e7de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e7e2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800e7f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e7f4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e7f8:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e7fc:	8812      	ldrh	r2, [r2, #0]
 800e7fe:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800e800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e804:	3302      	adds	r3, #2
 800e806:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e80a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e80e:	2218      	movs	r2, #24
 800e810:	2100      	movs	r1, #0
 800e812:	4618      	mov	r0, r3
 800e814:	f000 fa1c 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e818:	233f      	movs	r3, #63	@ 0x3f
 800e81a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800e81e:	f240 1325 	movw	r3, #293	@ 0x125
 800e822:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e826:	f107 0310 	add.w	r3, r7, #16
 800e82a:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e82e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e832:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e836:	f107 030f 	add.w	r3, r7, #15
 800e83a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e83e:	2301      	movs	r3, #1
 800e840:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f000 fc8a 	bl	800f164 <hci_send_req>
 800e850:	4603      	mov	r3, r0
 800e852:	2b00      	cmp	r3, #0
 800e854:	da01      	bge.n	800e85a <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800e856:	23ff      	movs	r3, #255	@ 0xff
 800e858:	e004      	b.n	800e864 <aci_gatt_confirm_indication+0xa0>
  return status;
 800e85a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e85e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e862:	781b      	ldrb	r3, [r3, #0]
}
 800e864:	4618      	mov	r0, r3
 800e866:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}

0800e86e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800e86e:	b580      	push	{r7, lr}
 800e870:	b0cc      	sub	sp, #304	@ 0x130
 800e872:	af00      	add	r7, sp, #0
 800e874:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e878:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e87c:	601a      	str	r2, [r3, #0]
 800e87e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e882:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e886:	4602      	mov	r2, r0
 800e888:	701a      	strb	r2, [r3, #0]
 800e88a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e88e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e892:	460a      	mov	r2, r1
 800e894:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800e896:	f107 0310 	add.w	r3, r7, #16
 800e89a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e89e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800e8b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e8b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e8bc:	7812      	ldrb	r2, [r2, #0]
 800e8be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e8c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800e8ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e8d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e8d6:	7812      	ldrb	r2, [r2, #0]
 800e8d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e8da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8de:	3301      	adds	r3, #1
 800e8e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800e8e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e8e8:	1c98      	adds	r0, r3, #2
 800e8ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8ee:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e8f2:	781a      	ldrb	r2, [r3, #0]
 800e8f4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e8f8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800e8fc:	6819      	ldr	r1, [r3, #0]
 800e8fe:	f000 f997 	bl	800ec30 <Osal_MemCpy>
  index_input += Length;
 800e902:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e906:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e90a:	781b      	ldrb	r3, [r3, #0]
 800e90c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800e910:	4413      	add	r3, r2
 800e912:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e916:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e91a:	2218      	movs	r2, #24
 800e91c:	2100      	movs	r1, #0
 800e91e:	4618      	mov	r0, r3
 800e920:	f000 f996 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e924:	233f      	movs	r3, #63	@ 0x3f
 800e926:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800e92a:	230c      	movs	r3, #12
 800e92c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e930:	f107 0310 	add.w	r3, r7, #16
 800e934:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800e938:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e93c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800e940:	f107 030f 	add.w	r3, r7, #15
 800e944:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800e948:	2301      	movs	r3, #1
 800e94a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e94e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e952:	2100      	movs	r1, #0
 800e954:	4618      	mov	r0, r3
 800e956:	f000 fc05 	bl	800f164 <hci_send_req>
 800e95a:	4603      	mov	r3, r0
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	da01      	bge.n	800e964 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800e960:	23ff      	movs	r3, #255	@ 0xff
 800e962:	e004      	b.n	800e96e <aci_hal_write_config_data+0x100>
  return status;
 800e964:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e968:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e96c:	781b      	ldrb	r3, [r3, #0]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b0cc      	sub	sp, #304	@ 0x130
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	4602      	mov	r2, r0
 800e980:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e984:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e98e:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800e992:	460a      	mov	r2, r1
 800e994:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800e996:	f107 0310 	add.w	r3, r7, #16
 800e99a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800e99e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800e9a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e9aa:	2300      	movs	r3, #0
 800e9ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800e9b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9b4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9b8:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800e9bc:	7812      	ldrb	r2, [r2, #0]
 800e9be:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e9c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800e9ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800e9ce:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800e9d2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800e9d6:	7812      	ldrb	r2, [r2, #0]
 800e9d8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e9da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9de:	3301      	adds	r3, #1
 800e9e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800e9e8:	2218      	movs	r2, #24
 800e9ea:	2100      	movs	r1, #0
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f000 f92f 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e9f2:	233f      	movs	r3, #63	@ 0x3f
 800e9f4:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800e9f8:	230f      	movs	r3, #15
 800e9fa:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800e9fe:	f107 0310 	add.w	r3, r7, #16
 800ea02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ea06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea0a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ea0e:	f107 030f 	add.w	r3, r7, #15
 800ea12:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ea16:	2301      	movs	r3, #1
 800ea18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea1c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea20:	2100      	movs	r1, #0
 800ea22:	4618      	mov	r0, r3
 800ea24:	f000 fb9e 	bl	800f164 <hci_send_req>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	da01      	bge.n	800ea32 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800ea2e:	23ff      	movs	r3, #255	@ 0xff
 800ea30:	e004      	b.n	800ea3c <aci_hal_set_tx_power_level+0xc4>
  return status;
 800ea32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea3a:	781b      	ldrb	r3, [r3, #0]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}

0800ea46 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800ea46:	b580      	push	{r7, lr}
 800ea48:	b0cc      	sub	sp, #304	@ 0x130
 800ea4a:	af00      	add	r7, sp, #0
 800ea4c:	4602      	mov	r2, r0
 800ea4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ea56:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800ea58:	f107 0310 	add.w	r3, r7, #16
 800ea5c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ea60:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ea64:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ea68:	2200      	movs	r2, #0
 800ea6a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ea6c:	2300      	movs	r3, #0
 800ea6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800ea72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ea76:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ea7a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ea7e:	8812      	ldrh	r2, [r2, #0]
 800ea80:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ea82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea86:	3302      	adds	r3, #2
 800ea88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea8c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ea90:	2218      	movs	r2, #24
 800ea92:	2100      	movs	r1, #0
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 f8db 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea9a:	233f      	movs	r3, #63	@ 0x3f
 800ea9c:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800eaa0:	2318      	movs	r3, #24
 800eaa2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eaa6:	f107 0310 	add.w	r3, r7, #16
 800eaaa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eaae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eab2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eab6:	f107 030f 	add.w	r3, r7, #15
 800eaba:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eabe:	2301      	movs	r3, #1
 800eac0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eac4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eac8:	2100      	movs	r1, #0
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 fb4a 	bl	800f164 <hci_send_req>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	da01      	bge.n	800eada <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800ead6:	23ff      	movs	r3, #255	@ 0xff
 800ead8:	e004      	b.n	800eae4 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800eada:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eade:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eae2:	781b      	ldrb	r3, [r3, #0]
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}

0800eaee <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800eaee:	b580      	push	{r7, lr}
 800eaf0:	b088      	sub	sp, #32
 800eaf2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eaf8:	f107 0308 	add.w	r3, r7, #8
 800eafc:	2218      	movs	r2, #24
 800eafe:	2100      	movs	r1, #0
 800eb00:	4618      	mov	r0, r3
 800eb02:	f000 f8a5 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x03;
 800eb06:	2303      	movs	r3, #3
 800eb08:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800eb0a:	2303      	movs	r3, #3
 800eb0c:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800eb0e:	1dfb      	adds	r3, r7, #7
 800eb10:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800eb12:	2301      	movs	r3, #1
 800eb14:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eb16:	f107 0308 	add.w	r3, r7, #8
 800eb1a:	2100      	movs	r1, #0
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f000 fb21 	bl	800f164 <hci_send_req>
 800eb22:	4603      	mov	r3, r0
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	da01      	bge.n	800eb2c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800eb28:	23ff      	movs	r3, #255	@ 0xff
 800eb2a:	e000      	b.n	800eb2e <hci_reset+0x40>
  return status;
 800eb2c:	79fb      	ldrb	r3, [r7, #7]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3720      	adds	r7, #32
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}

0800eb36 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800eb36:	b590      	push	{r4, r7, lr}
 800eb38:	b0cd      	sub	sp, #308	@ 0x134
 800eb3a:	af00      	add	r7, sp, #0
 800eb3c:	4604      	mov	r4, r0
 800eb3e:	4608      	mov	r0, r1
 800eb40:	4611      	mov	r1, r2
 800eb42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb46:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800eb4a:	4622      	mov	r2, r4
 800eb4c:	701a      	strb	r2, [r3, #0]
 800eb4e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb52:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800eb56:	4602      	mov	r2, r0
 800eb58:	701a      	strb	r2, [r3, #0]
 800eb5a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb5e:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800eb62:	460a      	mov	r2, r1
 800eb64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800eb66:	f107 0310 	add.w	r3, r7, #16
 800eb6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800eb6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eb72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eb76:	2200      	movs	r2, #0
 800eb78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800eb80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eb88:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800eb8c:	7812      	ldrb	r2, [r2, #0]
 800eb8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eb90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb94:	3301      	adds	r3, #1
 800eb96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800eb9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb9e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eba2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800eba6:	7812      	ldrb	r2, [r2, #0]
 800eba8:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ebaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebae:	3301      	adds	r3, #1
 800ebb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ebb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ebb8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ebbc:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ebc0:	7812      	ldrb	r2, [r2, #0]
 800ebc2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ebc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebc8:	3301      	adds	r3, #1
 800ebca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ebce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebd2:	2218      	movs	r2, #24
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f000 f83a 	bl	800ec50 <Osal_MemSet>
  rq.ogf = 0x08;
 800ebdc:	2308      	movs	r3, #8
 800ebde:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800ebe2:	2331      	movs	r3, #49	@ 0x31
 800ebe4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ebe8:	f107 0310 	add.w	r3, r7, #16
 800ebec:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ebf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebf4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ebf8:	f107 030f 	add.w	r3, r7, #15
 800ebfc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ec00:	2301      	movs	r3, #1
 800ec02:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec0a:	2100      	movs	r1, #0
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f000 faa9 	bl	800f164 <hci_send_req>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	da01      	bge.n	800ec1c <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800ec18:	23ff      	movs	r3, #255	@ 0xff
 800ec1a:	e004      	b.n	800ec26 <hci_le_set_default_phy+0xf0>
  return status;
 800ec1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec20:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ec24:	781b      	ldrb	r3, [r3, #0]
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}

0800ec30 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800ec30:	b580      	push	{r7, lr}
 800ec32:	b084      	sub	sp, #16
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	60f8      	str	r0, [r7, #12]
 800ec38:	60b9      	str	r1, [r7, #8]
 800ec3a:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	68b9      	ldr	r1, [r7, #8]
 800ec40:	68f8      	ldr	r0, [r7, #12]
 800ec42:	f003 fda0 	bl	8012786 <memcpy>
 800ec46:	4603      	mov	r3, r0
}
 800ec48:	4618      	mov	r0, r3
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}

0800ec50 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b084      	sub	sp, #16
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	60f8      	str	r0, [r7, #12]
 800ec58:	60b9      	str	r1, [r7, #8]
 800ec5a:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800ec5c:	687a      	ldr	r2, [r7, #4]
 800ec5e:	68b9      	ldr	r1, [r7, #8]
 800ec60:	68f8      	ldr	r0, [r7, #12]
 800ec62:	f003 fcff 	bl	8012664 <memset>
 800ec66:	4603      	mov	r3, r0
}
 800ec68:	4618      	mov	r0, r3
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800ec70:	b480      	push	{r7}
 800ec72:	af00      	add	r7, sp, #0
  return;
 800ec74:	bf00      	nop
}
 800ec76:	46bd      	mov	sp, r7
 800ec78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7c:	4770      	bx	lr

0800ec7e <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800ec7e:	b480      	push	{r7}
 800ec80:	af00      	add	r7, sp, #0
  return;
 800ec82:	bf00      	nop
}
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	af00      	add	r7, sp, #0
  return;
 800ec90:	bf00      	nop
}
 800ec92:	46bd      	mov	sp, r7
 800ec94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec98:	4770      	bx	lr

0800ec9a <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800ec9a:	b480      	push	{r7}
 800ec9c:	af00      	add	r7, sp, #0
  return;
 800ec9e:	bf00      	nop
}
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800eca8:	b480      	push	{r7}
 800ecaa:	af00      	add	r7, sp, #0
  return;
 800ecac:	bf00      	nop
}
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb4:	4770      	bx	lr

0800ecb6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	af00      	add	r7, sp, #0
  return;
 800ecba:	bf00      	nop
}
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr

0800ecc4 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	af00      	add	r7, sp, #0
  return;
 800ecc8:	bf00      	nop
}
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr

0800ecd2 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800ecd2:	b480      	push	{r7}
 800ecd4:	af00      	add	r7, sp, #0
  return;
 800ecd6:	bf00      	nop
}
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecde:	4770      	bx	lr

0800ece0 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800ece0:	b480      	push	{r7}
 800ece2:	af00      	add	r7, sp, #0
  return;
 800ece4:	bf00      	nop
}
 800ece6:	46bd      	mov	sp, r7
 800ece8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecec:	4770      	bx	lr

0800ecee <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800ecee:	b480      	push	{r7}
 800ecf0:	af00      	add	r7, sp, #0
  return;
 800ecf2:	bf00      	nop
}
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfa:	4770      	bx	lr

0800ecfc <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	af00      	add	r7, sp, #0
  return;
 800ed00:	bf00      	nop
}
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800ed0a:	b480      	push	{r7}
 800ed0c:	af00      	add	r7, sp, #0
  return;
 800ed0e:	bf00      	nop
}
 800ed10:	46bd      	mov	sp, r7
 800ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed16:	4770      	bx	lr

0800ed18 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800ed18:	b480      	push	{r7}
 800ed1a:	af00      	add	r7, sp, #0
  return;
 800ed1c:	bf00      	nop
}
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr

0800ed26 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800ed26:	b480      	push	{r7}
 800ed28:	af00      	add	r7, sp, #0
  return;
 800ed2a:	bf00      	nop
}
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800ed34:	b480      	push	{r7}
 800ed36:	af00      	add	r7, sp, #0
  return;
 800ed38:	bf00      	nop
}
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed40:	4770      	bx	lr

0800ed42 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800ed42:	b480      	push	{r7}
 800ed44:	af00      	add	r7, sp, #0
  return;
 800ed46:	bf00      	nop
}
 800ed48:	46bd      	mov	sp, r7
 800ed4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed4e:	4770      	bx	lr

0800ed50 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800ed50:	b480      	push	{r7}
 800ed52:	af00      	add	r7, sp, #0
  return;
 800ed54:	bf00      	nop
}
 800ed56:	46bd      	mov	sp, r7
 800ed58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5c:	4770      	bx	lr
	...

0800ed60 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800ed64:	4b04      	ldr	r3, [pc, #16]	@ (800ed78 <SVCCTL_Init+0x18>)
 800ed66:	2200      	movs	r2, #0
 800ed68:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800ed6a:	4b04      	ldr	r3, [pc, #16]	@ (800ed7c <SVCCTL_Init+0x1c>)
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800ed70:	f000 f806 	bl	800ed80 <SVCCTL_SvcInit>

  return;
 800ed74:	bf00      	nop
}
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	2000016c 	.word	0x2000016c
 800ed7c:	2000018c 	.word	0x2000018c

0800ed80 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	af00      	add	r7, sp, #0
  BAS_Init();
 800ed84:	f7ff ff74 	bl	800ec70 <BAS_Init>

  BLS_Init();
 800ed88:	f7ff ff79 	bl	800ec7e <BLS_Init>

  CRS_STM_Init();
 800ed8c:	f7ff ff7e 	bl	800ec8c <CRS_STM_Init>

  DIS_Init();
 800ed90:	f7ff ff83 	bl	800ec9a <DIS_Init>

  EDS_STM_Init();
 800ed94:	f7ff ff88 	bl	800eca8 <EDS_STM_Init>

  HIDS_Init();
 800ed98:	f7ff ff8d 	bl	800ecb6 <HIDS_Init>

  HRS_Init();
 800ed9c:	f7ff ff92 	bl	800ecc4 <HRS_Init>

  HTS_Init();
 800eda0:	f7ff ff97 	bl	800ecd2 <HTS_Init>

  IAS_Init();
 800eda4:	f7ff ff9c 	bl	800ece0 <IAS_Init>

  LLS_Init();
 800eda8:	f7ff ffa1 	bl	800ecee <LLS_Init>

  TPS_Init();
 800edac:	f7ff ffa6 	bl	800ecfc <TPS_Init>

  MOTENV_STM_Init();
 800edb0:	f7ff ffab 	bl	800ed0a <MOTENV_STM_Init>

  P2PS_STM_Init();
 800edb4:	f7ff ffb0 	bl	800ed18 <P2PS_STM_Init>

  ZDD_STM_Init();
 800edb8:	f7ff ffb5 	bl	800ed26 <ZDD_STM_Init>

  OTAS_STM_Init();
 800edbc:	f7ff ffba 	bl	800ed34 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800edc0:	f7ff ffc6 	bl	800ed50 <BVOPUS_STM_Init>

  MESH_Init();
 800edc4:	f7ff ffbd 	bl	800ed42 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800edc8:	f002 fb1e 	bl	8011408 <SVCCTL_InitCustomSvc>
  
  return;
 800edcc:	bf00      	nop
}
 800edce:	bd80      	pop	{r7, pc}

0800edd0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800edd0:	b480      	push	{r7}
 800edd2:	b083      	sub	sp, #12
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800edd8:	4b09      	ldr	r3, [pc, #36]	@ (800ee00 <SVCCTL_RegisterSvcHandler+0x30>)
 800edda:	7f1b      	ldrb	r3, [r3, #28]
 800eddc:	4619      	mov	r1, r3
 800edde:	4a08      	ldr	r2, [pc, #32]	@ (800ee00 <SVCCTL_RegisterSvcHandler+0x30>)
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800ede6:	4b06      	ldr	r3, [pc, #24]	@ (800ee00 <SVCCTL_RegisterSvcHandler+0x30>)
 800ede8:	7f1b      	ldrb	r3, [r3, #28]
 800edea:	3301      	adds	r3, #1
 800edec:	b2da      	uxtb	r2, r3
 800edee:	4b04      	ldr	r3, [pc, #16]	@ (800ee00 <SVCCTL_RegisterSvcHandler+0x30>)
 800edf0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800edf2:	bf00      	nop
}
 800edf4:	370c      	adds	r7, #12
 800edf6:	46bd      	mov	sp, r7
 800edf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfc:	4770      	bx	lr
 800edfe:	bf00      	nop
 800ee00:	2000016c 	.word	0x2000016c

0800ee04 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b086      	sub	sp, #24
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3301      	adds	r3, #1
 800ee10:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800ee12:	2300      	movs	r3, #0
 800ee14:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	781b      	ldrb	r3, [r3, #0]
 800ee1a:	2bff      	cmp	r3, #255	@ 0xff
 800ee1c:	d125      	bne.n	800ee6a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800ee1e:	693b      	ldr	r3, [r7, #16]
 800ee20:	3302      	adds	r3, #2
 800ee22:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	881b      	ldrh	r3, [r3, #0]
 800ee28:	b29b      	uxth	r3, r3
 800ee2a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ee2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ee32:	d118      	bne.n	800ee66 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ee34:	2300      	movs	r3, #0
 800ee36:	757b      	strb	r3, [r7, #21]
 800ee38:	e00d      	b.n	800ee56 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800ee3a:	7d7b      	ldrb	r3, [r7, #21]
 800ee3c:	4a1a      	ldr	r2, [pc, #104]	@ (800eea8 <SVCCTL_UserEvtRx+0xa4>)
 800ee3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	4798      	blx	r3
 800ee46:	4603      	mov	r3, r0
 800ee48:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d108      	bne.n	800ee62 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800ee50:	7d7b      	ldrb	r3, [r7, #21]
 800ee52:	3301      	adds	r3, #1
 800ee54:	757b      	strb	r3, [r7, #21]
 800ee56:	4b14      	ldr	r3, [pc, #80]	@ (800eea8 <SVCCTL_UserEvtRx+0xa4>)
 800ee58:	7f1b      	ldrb	r3, [r3, #28]
 800ee5a:	7d7a      	ldrb	r2, [r7, #21]
 800ee5c:	429a      	cmp	r2, r3
 800ee5e:	d3ec      	bcc.n	800ee3a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800ee60:	e002      	b.n	800ee68 <SVCCTL_UserEvtRx+0x64>
              break;
 800ee62:	bf00      	nop
          break;
 800ee64:	e000      	b.n	800ee68 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800ee66:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800ee68:	e000      	b.n	800ee6c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800ee6a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800ee6c:	7dfb      	ldrb	r3, [r7, #23]
 800ee6e:	2b02      	cmp	r3, #2
 800ee70:	d00f      	beq.n	800ee92 <SVCCTL_UserEvtRx+0x8e>
 800ee72:	2b02      	cmp	r3, #2
 800ee74:	dc10      	bgt.n	800ee98 <SVCCTL_UserEvtRx+0x94>
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d002      	beq.n	800ee80 <SVCCTL_UserEvtRx+0x7c>
 800ee7a:	2b01      	cmp	r3, #1
 800ee7c:	d006      	beq.n	800ee8c <SVCCTL_UserEvtRx+0x88>
 800ee7e:	e00b      	b.n	800ee98 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f000 fffb 	bl	800fe7c <SVCCTL_App_Notification>
 800ee86:	4603      	mov	r3, r0
 800ee88:	75bb      	strb	r3, [r7, #22]
      break;
 800ee8a:	e008      	b.n	800ee9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	75bb      	strb	r3, [r7, #22]
      break;
 800ee90:	e005      	b.n	800ee9e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800ee92:	2300      	movs	r3, #0
 800ee94:	75bb      	strb	r3, [r7, #22]
      break;
 800ee96:	e002      	b.n	800ee9e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	75bb      	strb	r3, [r7, #22]
      break;
 800ee9c:	bf00      	nop
  }

  return (return_status);
 800ee9e:	7dbb      	ldrb	r3, [r7, #22]
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3718      	adds	r7, #24
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	2000016c 	.word	0x2000016c

0800eeac <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b088      	sub	sp, #32
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800eeb4:	f107 030c 	add.w	r3, r7, #12
 800eeb8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800eec0:	69fb      	ldr	r3, [r7, #28]
 800eec2:	212e      	movs	r1, #46	@ 0x2e
 800eec4:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800eec8:	f000 fae8 	bl	800f49c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	330b      	adds	r3, #11
 800eed0:	78db      	ldrb	r3, [r3, #3]
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	3720      	adds	r7, #32
 800eed6:	46bd      	mov	sp, r7
 800eed8:	bd80      	pop	{r7, pc}

0800eeda <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800eeda:	b580      	push	{r7, lr}
 800eedc:	b088      	sub	sp, #32
 800eede:	af00      	add	r7, sp, #0
 800eee0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800eee2:	f107 030c 	add.w	r3, r7, #12
 800eee6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	210f      	movs	r1, #15
 800eef2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800eef6:	f000 fad1 	bl	800f49c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800eefa:	69fb      	ldr	r3, [r7, #28]
 800eefc:	330b      	adds	r3, #11
 800eefe:	78db      	ldrb	r3, [r3, #3]
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3720      	adds	r7, #32
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b088      	sub	sp, #32
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ef10:	f107 030c 	add.w	r3, r7, #12
 800ef14:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	2110      	movs	r1, #16
 800ef1c:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ef20:	f000 fabc 	bl	800f49c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ef24:	69fb      	ldr	r3, [r7, #28]
 800ef26:	330b      	adds	r3, #11
 800ef28:	78db      	ldrb	r3, [r3, #3]
}
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	3720      	adds	r7, #32
 800ef2e:	46bd      	mov	sp, r7
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ef34:	b480      	push	{r7}
 800ef36:	b08b      	sub	sp, #44	@ 0x2c
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ef3c:	2300      	movs	r3, #0
 800ef3e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ef40:	2300      	movs	r3, #0
 800ef42:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ef44:	2300      	movs	r3, #0
 800ef46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ef54:	2300      	movs	r3, #0
 800ef56:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ef5c:	4b4a      	ldr	r3, [pc, #296]	@ (800f088 <SHCI_GetWirelessFwInfo+0x154>)
 800ef5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ef64:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ef66:	693b      	ldr	r3, [r7, #16]
 800ef68:	009b      	lsls	r3, r3, #2
 800ef6a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ef6e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ef76:	68bb      	ldr	r3, [r7, #8]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	4a44      	ldr	r2, [pc, #272]	@ (800f08c <SHCI_GetWirelessFwInfo+0x158>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d10f      	bne.n	800efa0 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	695b      	ldr	r3, [r3, #20]
 800ef84:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	69db      	ldr	r3, [r3, #28]
 800ef90:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ef92:	68bb      	ldr	r3, [r7, #8]
 800ef94:	68db      	ldr	r3, [r3, #12]
 800ef96:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ef98:	68bb      	ldr	r3, [r7, #8]
 800ef9a:	691b      	ldr	r3, [r3, #16]
 800ef9c:	617b      	str	r3, [r7, #20]
 800ef9e:	e01a      	b.n	800efd6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	009b      	lsls	r3, r3, #2
 800efa4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800efa8:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800efac:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	695b      	ldr	r3, [r3, #20]
 800efbc:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	689b      	ldr	r3, [r3, #8]
 800efd4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800efd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd8:	0e1b      	lsrs	r3, r3, #24
 800efda:	b2da      	uxtb	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800efe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efe2:	0c1b      	lsrs	r3, r3, #16
 800efe4:	b2da      	uxtb	r2, r3
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800efea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efec:	0a1b      	lsrs	r3, r3, #8
 800efee:	b2da      	uxtb	r2, r3
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800eff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eff6:	091b      	lsrs	r3, r3, #4
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	f003 030f 	and.w	r3, r3, #15
 800effe:	b2da      	uxtb	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800f004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f006:	b2db      	uxtb	r3, r3
 800f008:	f003 030f 	and.w	r3, r3, #15
 800f00c:	b2da      	uxtb	r2, r3
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f012:	6a3b      	ldr	r3, [r7, #32]
 800f014:	0e1b      	lsrs	r3, r3, #24
 800f016:	b2da      	uxtb	r2, r3
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f01c:	6a3b      	ldr	r3, [r7, #32]
 800f01e:	0c1b      	lsrs	r3, r3, #16
 800f020:	b2da      	uxtb	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800f026:	6a3b      	ldr	r3, [r7, #32]
 800f028:	0a1b      	lsrs	r3, r3, #8
 800f02a:	b2da      	uxtb	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f030:	6a3b      	ldr	r3, [r7, #32]
 800f032:	b2da      	uxtb	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	b2da      	uxtb	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	0e1b      	lsrs	r3, r3, #24
 800f044:	b2da      	uxtb	r2, r3
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800f04a:	69bb      	ldr	r3, [r7, #24]
 800f04c:	0c1b      	lsrs	r3, r3, #16
 800f04e:	b2da      	uxtb	r2, r3
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800f054:	69bb      	ldr	r3, [r7, #24]
 800f056:	0a1b      	lsrs	r3, r3, #8
 800f058:	b2da      	uxtb	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	0e1b      	lsrs	r3, r3, #24
 800f062:	b2da      	uxtb	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	0c1b      	lsrs	r3, r3, #16
 800f06c:	b2da      	uxtb	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	b2da      	uxtb	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	372c      	adds	r7, #44	@ 0x2c
 800f080:	46bd      	mov	sp, r7
 800f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f086:	4770      	bx	lr
 800f088:	58004000 	.word	0x58004000
 800f08c:	a94656b9 	.word	0xa94656b9

0800f090 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	685b      	ldr	r3, [r3, #4]
 800f09e:	4a08      	ldr	r2, [pc, #32]	@ (800f0c0 <hci_init+0x30>)
 800f0a0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800f0a2:	4a08      	ldr	r2, [pc, #32]	@ (800f0c4 <hci_init+0x34>)
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800f0a8:	4806      	ldr	r0, [pc, #24]	@ (800f0c4 <hci_init+0x34>)
 800f0aa:	f000 f979 	bl	800f3a0 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f000 f8da 	bl	800f26c <TlInit>

  return;
 800f0b8:	bf00      	nop
}
 800f0ba:	3708      	adds	r7, #8
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	200008dc 	.word	0x200008dc
 800f0c4:	200008b4 	.word	0x200008b4

0800f0c8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f0ce:	4822      	ldr	r0, [pc, #136]	@ (800f158 <hci_user_evt_proc+0x90>)
 800f0d0:	f000 fd5a 	bl	800fb88 <LST_is_empty>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d12b      	bne.n	800f132 <hci_user_evt_proc+0x6a>
 800f0da:	4b20      	ldr	r3, [pc, #128]	@ (800f15c <hci_user_evt_proc+0x94>)
 800f0dc:	781b      	ldrb	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d027      	beq.n	800f132 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f0e2:	f107 030c 	add.w	r3, r7, #12
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	481b      	ldr	r0, [pc, #108]	@ (800f158 <hci_user_evt_proc+0x90>)
 800f0ea:	f000 fddc 	bl	800fca6 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800f0ee:	4b1c      	ldr	r3, [pc, #112]	@ (800f160 <hci_user_evt_proc+0x98>)
 800f0f0:	69db      	ldr	r3, [r3, #28]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d00c      	beq.n	800f110 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f0fe:	4b18      	ldr	r3, [pc, #96]	@ (800f160 <hci_user_evt_proc+0x98>)
 800f100:	69db      	ldr	r3, [r3, #28]
 800f102:	1d3a      	adds	r2, r7, #4
 800f104:	4610      	mov	r0, r2
 800f106:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800f108:	793a      	ldrb	r2, [r7, #4]
 800f10a:	4b14      	ldr	r3, [pc, #80]	@ (800f15c <hci_user_evt_proc+0x94>)
 800f10c:	701a      	strb	r2, [r3, #0]
 800f10e:	e002      	b.n	800f116 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f110:	4b12      	ldr	r3, [pc, #72]	@ (800f15c <hci_user_evt_proc+0x94>)
 800f112:	2201      	movs	r2, #1
 800f114:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800f116:	4b11      	ldr	r3, [pc, #68]	@ (800f15c <hci_user_evt_proc+0x94>)
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d004      	beq.n	800f128 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	4618      	mov	r0, r3
 800f122:	f000 fc0d 	bl	800f940 <TL_MM_EvtDone>
 800f126:	e004      	b.n	800f132 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	4619      	mov	r1, r3
 800f12c:	480a      	ldr	r0, [pc, #40]	@ (800f158 <hci_user_evt_proc+0x90>)
 800f12e:	f000 fd4d 	bl	800fbcc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800f132:	4809      	ldr	r0, [pc, #36]	@ (800f158 <hci_user_evt_proc+0x90>)
 800f134:	f000 fd28 	bl	800fb88 <LST_is_empty>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d107      	bne.n	800f14e <hci_user_evt_proc+0x86>
 800f13e:	4b07      	ldr	r3, [pc, #28]	@ (800f15c <hci_user_evt_proc+0x94>)
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d003      	beq.n	800f14e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800f146:	4804      	ldr	r0, [pc, #16]	@ (800f158 <hci_user_evt_proc+0x90>)
 800f148:	f001 fd46 	bl	8010bd8 <hci_notify_asynch_evt>
  }


  return;
 800f14c:	bf00      	nop
 800f14e:	bf00      	nop
}
 800f150:	3710      	adds	r7, #16
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	20000194 	.word	0x20000194
 800f15c:	200001a0 	.word	0x200001a0
 800f160:	200008b4 	.word	0x200008b4

0800f164 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	460b      	mov	r3, r1
 800f16e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800f170:	2000      	movs	r0, #0
 800f172:	f000 f8d1 	bl	800f318 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800f176:	2300      	movs	r3, #0
 800f178:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	885b      	ldrh	r3, [r3, #2]
 800f17e:	b21b      	sxth	r3, r3
 800f180:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f184:	b21a      	sxth	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	881b      	ldrh	r3, [r3, #0]
 800f18a:	029b      	lsls	r3, r3, #10
 800f18c:	b21b      	sxth	r3, r3
 800f18e:	4313      	orrs	r3, r2
 800f190:	b21b      	sxth	r3, r3
 800f192:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800f194:	4b33      	ldr	r3, [pc, #204]	@ (800f264 <hci_send_req+0x100>)
 800f196:	2201      	movs	r2, #1
 800f198:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	b2d9      	uxtb	r1, r3
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	689a      	ldr	r2, [r3, #8]
 800f1a4:	8bbb      	ldrh	r3, [r7, #28]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f000 f890 	bl	800f2cc <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800f1ac:	e04e      	b.n	800f24c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800f1ae:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800f1b2:	f001 fd28 	bl	8010c06 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f1b6:	e043      	b.n	800f240 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800f1b8:	f107 030c 	add.w	r3, r7, #12
 800f1bc:	4619      	mov	r1, r3
 800f1be:	482a      	ldr	r0, [pc, #168]	@ (800f268 <hci_send_req+0x104>)
 800f1c0:	f000 fd71 	bl	800fca6 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	7a5b      	ldrb	r3, [r3, #9]
 800f1c8:	2b0f      	cmp	r3, #15
 800f1ca:	d114      	bne.n	800f1f6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	330b      	adds	r3, #11
 800f1d0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800f1d2:	693b      	ldr	r3, [r7, #16]
 800f1d4:	885b      	ldrh	r3, [r3, #2]
 800f1d6:	b29b      	uxth	r3, r3
 800f1d8:	8bba      	ldrh	r2, [r7, #28]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d104      	bne.n	800f1e8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	693a      	ldr	r2, [r7, #16]
 800f1e4:	7812      	ldrb	r2, [r2, #0]
 800f1e6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	785b      	ldrb	r3, [r3, #1]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d027      	beq.n	800f240 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	77fb      	strb	r3, [r7, #31]
 800f1f4:	e024      	b.n	800f240 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	330b      	adds	r3, #11
 800f1fa:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f202:	b29b      	uxth	r3, r3
 800f204:	8bba      	ldrh	r2, [r7, #28]
 800f206:	429a      	cmp	r2, r3
 800f208:	d114      	bne.n	800f234 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	7a9b      	ldrb	r3, [r3, #10]
 800f20e:	3b03      	subs	r3, #3
 800f210:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	695a      	ldr	r2, [r3, #20]
 800f216:	7dfb      	ldrb	r3, [r7, #23]
 800f218:	429a      	cmp	r2, r3
 800f21a:	bfa8      	it	ge
 800f21c:	461a      	movge	r2, r3
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	6918      	ldr	r0, [r3, #16]
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	1cd9      	adds	r1, r3, #3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	695b      	ldr	r3, [r3, #20]
 800f22e:	461a      	mov	r2, r3
 800f230:	f003 faa9 	bl	8012786 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800f234:	69bb      	ldr	r3, [r7, #24]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d001      	beq.n	800f240 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800f23c:	2301      	movs	r3, #1
 800f23e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800f240:	4809      	ldr	r0, [pc, #36]	@ (800f268 <hci_send_req+0x104>)
 800f242:	f000 fca1 	bl	800fb88 <LST_is_empty>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d0b5      	beq.n	800f1b8 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800f24c:	7ffb      	ldrb	r3, [r7, #31]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d0ad      	beq.n	800f1ae <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800f252:	2001      	movs	r0, #1
 800f254:	f000 f860 	bl	800f318 <NotifyCmdStatus>

  return 0;
 800f258:	2300      	movs	r3, #0
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3720      	adds	r7, #32
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}
 800f262:	bf00      	nop
 800f264:	200008e0 	.word	0x200008e0
 800f268:	200008d4 	.word	0x200008d4

0800f26c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b086      	sub	sp, #24
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800f274:	480f      	ldr	r0, [pc, #60]	@ (800f2b4 <TlInit+0x48>)
 800f276:	f000 fc77 	bl	800fb68 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800f27a:	4a0f      	ldr	r2, [pc, #60]	@ (800f2b8 <TlInit+0x4c>)
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800f280:	480e      	ldr	r0, [pc, #56]	@ (800f2bc <TlInit+0x50>)
 800f282:	f000 fc71 	bl	800fb68 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800f286:	4b0e      	ldr	r3, [pc, #56]	@ (800f2c0 <TlInit+0x54>)
 800f288:	2201      	movs	r2, #1
 800f28a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800f28c:	4b0d      	ldr	r3, [pc, #52]	@ (800f2c4 <TlInit+0x58>)
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	2b00      	cmp	r3, #0
 800f292:	d00a      	beq.n	800f2aa <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800f298:	4b0b      	ldr	r3, [pc, #44]	@ (800f2c8 <TlInit+0x5c>)
 800f29a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800f29c:	4b09      	ldr	r3, [pc, #36]	@ (800f2c4 <TlInit+0x58>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f107 0208 	add.w	r2, r7, #8
 800f2a4:	4610      	mov	r0, r2
 800f2a6:	4798      	blx	r3
  }

  return;
 800f2a8:	bf00      	nop
 800f2aa:	bf00      	nop
}
 800f2ac:	3718      	adds	r7, #24
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	bd80      	pop	{r7, pc}
 800f2b2:	bf00      	nop
 800f2b4:	200008d4 	.word	0x200008d4
 800f2b8:	2000019c 	.word	0x2000019c
 800f2bc:	20000194 	.word	0x20000194
 800f2c0:	200001a0 	.word	0x200001a0
 800f2c4:	200008b4 	.word	0x200008b4
 800f2c8:	0800f359 	.word	0x0800f359

0800f2cc <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b082      	sub	sp, #8
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	603a      	str	r2, [r7, #0]
 800f2d6:	80fb      	strh	r3, [r7, #6]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800f2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800f310 <SendCmd+0x44>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	88fa      	ldrh	r2, [r7, #6]
 800f2e2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800f2e6:	4b0a      	ldr	r3, [pc, #40]	@ (800f310 <SendCmd+0x44>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	797a      	ldrb	r2, [r7, #5]
 800f2ec:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800f2ee:	4b08      	ldr	r3, [pc, #32]	@ (800f310 <SendCmd+0x44>)
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	330c      	adds	r3, #12
 800f2f4:	797a      	ldrb	r2, [r7, #5]
 800f2f6:	6839      	ldr	r1, [r7, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f003 fa44 	bl	8012786 <memcpy>

  hciContext.io.Send(0,0);
 800f2fe:	4b05      	ldr	r3, [pc, #20]	@ (800f314 <SendCmd+0x48>)
 800f300:	691b      	ldr	r3, [r3, #16]
 800f302:	2100      	movs	r1, #0
 800f304:	2000      	movs	r0, #0
 800f306:	4798      	blx	r3

  return;
 800f308:	bf00      	nop
}
 800f30a:	3708      	adds	r7, #8
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	2000019c 	.word	0x2000019c
 800f314:	200008b4 	.word	0x200008b4

0800f318 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	4603      	mov	r3, r0
 800f320:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800f322:	79fb      	ldrb	r3, [r7, #7]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d108      	bne.n	800f33a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800f328:	4b0a      	ldr	r3, [pc, #40]	@ (800f354 <NotifyCmdStatus+0x3c>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00d      	beq.n	800f34c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800f330:	4b08      	ldr	r3, [pc, #32]	@ (800f354 <NotifyCmdStatus+0x3c>)
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2000      	movs	r0, #0
 800f336:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800f338:	e008      	b.n	800f34c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800f33a:	4b06      	ldr	r3, [pc, #24]	@ (800f354 <NotifyCmdStatus+0x3c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d004      	beq.n	800f34c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800f342:	4b04      	ldr	r3, [pc, #16]	@ (800f354 <NotifyCmdStatus+0x3c>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	2001      	movs	r0, #1
 800f348:	4798      	blx	r3
  return;
 800f34a:	bf00      	nop
 800f34c:	bf00      	nop
}
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}
 800f354:	200008dc 	.word	0x200008dc

0800f358 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800f358:	b580      	push	{r7, lr}
 800f35a:	b082      	sub	sp, #8
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	7a5b      	ldrb	r3, [r3, #9]
 800f364:	2b0f      	cmp	r3, #15
 800f366:	d003      	beq.n	800f370 <TlEvtReceived+0x18>
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	7a5b      	ldrb	r3, [r3, #9]
 800f36c:	2b0e      	cmp	r3, #14
 800f36e:	d107      	bne.n	800f380 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800f370:	6879      	ldr	r1, [r7, #4]
 800f372:	4809      	ldr	r0, [pc, #36]	@ (800f398 <TlEvtReceived+0x40>)
 800f374:	f000 fc50 	bl	800fc18 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800f378:	2000      	movs	r0, #0
 800f37a:	f001 fc39 	bl	8010bf0 <hci_cmd_resp_release>
 800f37e:	e006      	b.n	800f38e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800f380:	6879      	ldr	r1, [r7, #4]
 800f382:	4806      	ldr	r0, [pc, #24]	@ (800f39c <TlEvtReceived+0x44>)
 800f384:	f000 fc48 	bl	800fc18 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f388:	4804      	ldr	r0, [pc, #16]	@ (800f39c <TlEvtReceived+0x44>)
 800f38a:	f001 fc25 	bl	8010bd8 <hci_notify_asynch_evt>
  }

  return;
 800f38e:	bf00      	nop
}
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}
 800f396:	bf00      	nop
 800f398:	200008d4 	.word	0x200008d4
 800f39c:	20000194 	.word	0x20000194

0800f3a0 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	4a05      	ldr	r2, [pc, #20]	@ (800f3c0 <hci_register_io_bus+0x20>)
 800f3ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a04      	ldr	r2, [pc, #16]	@ (800f3c4 <hci_register_io_bus+0x24>)
 800f3b2:	611a      	str	r2, [r3, #16]

  return;
 800f3b4:	bf00      	nop
}
 800f3b6:	370c      	adds	r7, #12
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3be:	4770      	bx	lr
 800f3c0:	0800f6b9 	.word	0x0800f6b9
 800f3c4:	0800f721 	.word	0x0800f721

0800f3c8 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800f3c8:	b580      	push	{r7, lr}
 800f3ca:	b082      	sub	sp, #8
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
 800f3d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800f3d2:	683b      	ldr	r3, [r7, #0]
 800f3d4:	685b      	ldr	r3, [r3, #4]
 800f3d6:	4a08      	ldr	r2, [pc, #32]	@ (800f3f8 <shci_init+0x30>)
 800f3d8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800f3da:	4a08      	ldr	r2, [pc, #32]	@ (800f3fc <shci_init+0x34>)
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800f3e0:	4806      	ldr	r0, [pc, #24]	@ (800f3fc <shci_init+0x34>)
 800f3e2:	f000 f915 	bl	800f610 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 f898 	bl	800f520 <TlInit>

  return;
 800f3f0:	bf00      	nop
}
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}
 800f3f8:	20000904 	.word	0x20000904
 800f3fc:	200008e4 	.word	0x200008e4

0800f400 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800f400:	b580      	push	{r7, lr}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f406:	4822      	ldr	r0, [pc, #136]	@ (800f490 <shci_user_evt_proc+0x90>)
 800f408:	f000 fbbe 	bl	800fb88 <LST_is_empty>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d12b      	bne.n	800f46a <shci_user_evt_proc+0x6a>
 800f412:	4b20      	ldr	r3, [pc, #128]	@ (800f494 <shci_user_evt_proc+0x94>)
 800f414:	781b      	ldrb	r3, [r3, #0]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d027      	beq.n	800f46a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800f41a:	f107 030c 	add.w	r3, r7, #12
 800f41e:	4619      	mov	r1, r3
 800f420:	481b      	ldr	r0, [pc, #108]	@ (800f490 <shci_user_evt_proc+0x90>)
 800f422:	f000 fc40 	bl	800fca6 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800f426:	4b1c      	ldr	r3, [pc, #112]	@ (800f498 <shci_user_evt_proc+0x98>)
 800f428:	69db      	ldr	r3, [r3, #28]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00c      	beq.n	800f448 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800f432:	2301      	movs	r3, #1
 800f434:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800f436:	4b18      	ldr	r3, [pc, #96]	@ (800f498 <shci_user_evt_proc+0x98>)
 800f438:	69db      	ldr	r3, [r3, #28]
 800f43a:	1d3a      	adds	r2, r7, #4
 800f43c:	4610      	mov	r0, r2
 800f43e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800f440:	793a      	ldrb	r2, [r7, #4]
 800f442:	4b14      	ldr	r3, [pc, #80]	@ (800f494 <shci_user_evt_proc+0x94>)
 800f444:	701a      	strb	r2, [r3, #0]
 800f446:	e002      	b.n	800f44e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f448:	4b12      	ldr	r3, [pc, #72]	@ (800f494 <shci_user_evt_proc+0x94>)
 800f44a:	2201      	movs	r2, #1
 800f44c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800f44e:	4b11      	ldr	r3, [pc, #68]	@ (800f494 <shci_user_evt_proc+0x94>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d004      	beq.n	800f460 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	4618      	mov	r0, r3
 800f45a:	f000 fa71 	bl	800f940 <TL_MM_EvtDone>
 800f45e:	e004      	b.n	800f46a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	4619      	mov	r1, r3
 800f464:	480a      	ldr	r0, [pc, #40]	@ (800f490 <shci_user_evt_proc+0x90>)
 800f466:	f000 fbb1 	bl	800fbcc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800f46a:	4809      	ldr	r0, [pc, #36]	@ (800f490 <shci_user_evt_proc+0x90>)
 800f46c:	f000 fb8c 	bl	800fb88 <LST_is_empty>
 800f470:	4603      	mov	r3, r0
 800f472:	2b00      	cmp	r3, #0
 800f474:	d107      	bne.n	800f486 <shci_user_evt_proc+0x86>
 800f476:	4b07      	ldr	r3, [pc, #28]	@ (800f494 <shci_user_evt_proc+0x94>)
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d003      	beq.n	800f486 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800f47e:	4804      	ldr	r0, [pc, #16]	@ (800f490 <shci_user_evt_proc+0x90>)
 800f480:	f7f2 fbe5 	bl	8001c4e <shci_notify_asynch_evt>
  }


  return;
 800f484:	bf00      	nop
 800f486:	bf00      	nop
}
 800f488:	3710      	adds	r7, #16
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	200001a4 	.word	0x200001a4
 800f494:	200001b4 	.word	0x200001b4
 800f498:	200008e4 	.word	0x200008e4

0800f49c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60ba      	str	r2, [r7, #8]
 800f4a4:	607b      	str	r3, [r7, #4]
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	81fb      	strh	r3, [r7, #14]
 800f4aa:	460b      	mov	r3, r1
 800f4ac:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	f000 f868 	bl	800f584 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800f4b4:	4b17      	ldr	r3, [pc, #92]	@ (800f514 <shci_send+0x78>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	89fa      	ldrh	r2, [r7, #14]
 800f4ba:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800f4be:	4b15      	ldr	r3, [pc, #84]	@ (800f514 <shci_send+0x78>)
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	7b7a      	ldrb	r2, [r7, #13]
 800f4c4:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800f4c6:	4b13      	ldr	r3, [pc, #76]	@ (800f514 <shci_send+0x78>)
 800f4c8:	681b      	ldr	r3, [r3, #0]
 800f4ca:	330c      	adds	r3, #12
 800f4cc:	7b7a      	ldrb	r2, [r7, #13]
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f003 f958 	bl	8012786 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800f4d6:	4b10      	ldr	r3, [pc, #64]	@ (800f518 <shci_send+0x7c>)
 800f4d8:	2201      	movs	r2, #1
 800f4da:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800f4dc:	4b0f      	ldr	r3, [pc, #60]	@ (800f51c <shci_send+0x80>)
 800f4de:	691b      	ldr	r3, [r3, #16]
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	2000      	movs	r0, #0
 800f4e4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800f4e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800f4ea:	f7f2 fbc7 	bl	8001c7c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	f103 0008 	add.w	r0, r3, #8
 800f4f4:	4b07      	ldr	r3, [pc, #28]	@ (800f514 <shci_send+0x78>)
 800f4f6:	6819      	ldr	r1, [r3, #0]
 800f4f8:	4b06      	ldr	r3, [pc, #24]	@ (800f514 <shci_send+0x78>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	789b      	ldrb	r3, [r3, #2]
 800f4fe:	3303      	adds	r3, #3
 800f500:	461a      	mov	r2, r3
 800f502:	f003 f940 	bl	8012786 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f506:	2001      	movs	r0, #1
 800f508:	f000 f83c 	bl	800f584 <Cmd_SetStatus>

  return;
 800f50c:	bf00      	nop
}
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}
 800f514:	200001b0 	.word	0x200001b0
 800f518:	20000908 	.word	0x20000908
 800f51c:	200008e4 	.word	0x200008e4

0800f520 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800f520:	b580      	push	{r7, lr}
 800f522:	b086      	sub	sp, #24
 800f524:	af00      	add	r7, sp, #0
 800f526:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800f528:	4a10      	ldr	r2, [pc, #64]	@ (800f56c <TlInit+0x4c>)
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800f52e:	4810      	ldr	r0, [pc, #64]	@ (800f570 <TlInit+0x50>)
 800f530:	f000 fb1a 	bl	800fb68 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800f534:	2001      	movs	r0, #1
 800f536:	f000 f825 	bl	800f584 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800f53a:	4b0e      	ldr	r3, [pc, #56]	@ (800f574 <TlInit+0x54>)
 800f53c:	2201      	movs	r2, #1
 800f53e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800f540:	4b0d      	ldr	r3, [pc, #52]	@ (800f578 <TlInit+0x58>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d00c      	beq.n	800f562 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800f54c:	4b0b      	ldr	r3, [pc, #44]	@ (800f57c <TlInit+0x5c>)
 800f54e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800f550:	4b0b      	ldr	r3, [pc, #44]	@ (800f580 <TlInit+0x60>)
 800f552:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800f554:	4b08      	ldr	r3, [pc, #32]	@ (800f578 <TlInit+0x58>)
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	f107 020c 	add.w	r2, r7, #12
 800f55c:	4610      	mov	r0, r2
 800f55e:	4798      	blx	r3
  }

  return;
 800f560:	bf00      	nop
 800f562:	bf00      	nop
}
 800f564:	3718      	adds	r7, #24
 800f566:	46bd      	mov	sp, r7
 800f568:	bd80      	pop	{r7, pc}
 800f56a:	bf00      	nop
 800f56c:	200001b0 	.word	0x200001b0
 800f570:	200001a4 	.word	0x200001a4
 800f574:	200001b4 	.word	0x200001b4
 800f578:	200008e4 	.word	0x200008e4
 800f57c:	0800f5d5 	.word	0x0800f5d5
 800f580:	0800f5ed 	.word	0x0800f5ed

0800f584 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800f58e:	79fb      	ldrb	r3, [r7, #7]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10b      	bne.n	800f5ac <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800f594:	4b0d      	ldr	r3, [pc, #52]	@ (800f5cc <Cmd_SetStatus+0x48>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d003      	beq.n	800f5a4 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800f59c:	4b0b      	ldr	r3, [pc, #44]	@ (800f5cc <Cmd_SetStatus+0x48>)
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800f5a4:	4b0a      	ldr	r3, [pc, #40]	@ (800f5d0 <Cmd_SetStatus+0x4c>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800f5aa:	e00b      	b.n	800f5c4 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800f5ac:	4b08      	ldr	r3, [pc, #32]	@ (800f5d0 <Cmd_SetStatus+0x4c>)
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800f5b2:	4b06      	ldr	r3, [pc, #24]	@ (800f5cc <Cmd_SetStatus+0x48>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d004      	beq.n	800f5c4 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800f5ba:	4b04      	ldr	r3, [pc, #16]	@ (800f5cc <Cmd_SetStatus+0x48>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2001      	movs	r0, #1
 800f5c0:	4798      	blx	r3
  return;
 800f5c2:	bf00      	nop
 800f5c4:	bf00      	nop
}
 800f5c6:	3708      	adds	r7, #8
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	bd80      	pop	{r7, pc}
 800f5cc:	20000904 	.word	0x20000904
 800f5d0:	200001ac 	.word	0x200001ac

0800f5d4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b082      	sub	sp, #8
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800f5dc:	2000      	movs	r0, #0
 800f5de:	f7f2 fb42 	bl	8001c66 <shci_cmd_resp_release>

  return;
 800f5e2:	bf00      	nop
}
 800f5e4:	3708      	adds	r7, #8
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}
	...

0800f5ec <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800f5ec:	b580      	push	{r7, lr}
 800f5ee:	b082      	sub	sp, #8
 800f5f0:	af00      	add	r7, sp, #0
 800f5f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800f5f4:	6879      	ldr	r1, [r7, #4]
 800f5f6:	4805      	ldr	r0, [pc, #20]	@ (800f60c <TlUserEvtReceived+0x20>)
 800f5f8:	f000 fb0e 	bl	800fc18 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800f5fc:	4803      	ldr	r0, [pc, #12]	@ (800f60c <TlUserEvtReceived+0x20>)
 800f5fe:	f7f2 fb26 	bl	8001c4e <shci_notify_asynch_evt>

  return;
 800f602:	bf00      	nop
}
 800f604:	3708      	adds	r7, #8
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	200001a4 	.word	0x200001a4

0800f610 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800f610:	b480      	push	{r7}
 800f612:	b083      	sub	sp, #12
 800f614:	af00      	add	r7, sp, #0
 800f616:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4a05      	ldr	r2, [pc, #20]	@ (800f630 <shci_register_io_bus+0x20>)
 800f61c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	4a04      	ldr	r2, [pc, #16]	@ (800f634 <shci_register_io_bus+0x24>)
 800f622:	611a      	str	r2, [r3, #16]

  return;
 800f624:	bf00      	nop
}
 800f626:	370c      	adds	r7, #12
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr
 800f630:	0800f7cd 	.word	0x0800f7cd
 800f634:	0800f821 	.word	0x0800f821

0800f638 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800f63c:	f002 fab2 	bl	8011ba4 <HW_IPCC_Enable>

  return;
 800f640:	bf00      	nop
}
 800f642:	bd80      	pop	{r7, pc}

0800f644 <TL_Init>:


void TL_Init( void )
{
 800f644:	b580      	push	{r7, lr}
 800f646:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800f648:	4b10      	ldr	r3, [pc, #64]	@ (800f68c <TL_Init+0x48>)
 800f64a:	4a11      	ldr	r2, [pc, #68]	@ (800f690 <TL_Init+0x4c>)
 800f64c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800f64e:	4b0f      	ldr	r3, [pc, #60]	@ (800f68c <TL_Init+0x48>)
 800f650:	4a10      	ldr	r2, [pc, #64]	@ (800f694 <TL_Init+0x50>)
 800f652:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800f654:	4b0d      	ldr	r3, [pc, #52]	@ (800f68c <TL_Init+0x48>)
 800f656:	4a10      	ldr	r2, [pc, #64]	@ (800f698 <TL_Init+0x54>)
 800f658:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800f65a:	4b0c      	ldr	r3, [pc, #48]	@ (800f68c <TL_Init+0x48>)
 800f65c:	4a0f      	ldr	r2, [pc, #60]	@ (800f69c <TL_Init+0x58>)
 800f65e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800f660:	4b0a      	ldr	r3, [pc, #40]	@ (800f68c <TL_Init+0x48>)
 800f662:	4a0f      	ldr	r2, [pc, #60]	@ (800f6a0 <TL_Init+0x5c>)
 800f664:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800f666:	4b09      	ldr	r3, [pc, #36]	@ (800f68c <TL_Init+0x48>)
 800f668:	4a0e      	ldr	r2, [pc, #56]	@ (800f6a4 <TL_Init+0x60>)
 800f66a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800f66c:	4b07      	ldr	r3, [pc, #28]	@ (800f68c <TL_Init+0x48>)
 800f66e:	4a0e      	ldr	r2, [pc, #56]	@ (800f6a8 <TL_Init+0x64>)
 800f670:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800f672:	4b06      	ldr	r3, [pc, #24]	@ (800f68c <TL_Init+0x48>)
 800f674:	4a0d      	ldr	r2, [pc, #52]	@ (800f6ac <TL_Init+0x68>)
 800f676:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800f678:	4b04      	ldr	r3, [pc, #16]	@ (800f68c <TL_Init+0x48>)
 800f67a:	4a0d      	ldr	r2, [pc, #52]	@ (800f6b0 <TL_Init+0x6c>)
 800f67c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800f67e:	4b03      	ldr	r3, [pc, #12]	@ (800f68c <TL_Init+0x48>)
 800f680:	4a0c      	ldr	r2, [pc, #48]	@ (800f6b4 <TL_Init+0x70>)
 800f682:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800f684:	f002 faa2 	bl	8011bcc <HW_IPCC_Init>

  return;
 800f688:	bf00      	nop
}
 800f68a:	bd80      	pop	{r7, pc}
 800f68c:	20030000 	.word	0x20030000
 800f690:	20030028 	.word	0x20030028
 800f694:	20030048 	.word	0x20030048
 800f698:	20030058 	.word	0x20030058
 800f69c:	20030068 	.word	0x20030068
 800f6a0:	20030070 	.word	0x20030070
 800f6a4:	20030078 	.word	0x20030078
 800f6a8:	20030080 	.word	0x20030080
 800f6ac:	2003009c 	.word	0x2003009c
 800f6b0:	200300a0 	.word	0x200300a0
 800f6b4:	200300ac 	.word	0x200300ac

0800f6b8 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b084      	sub	sp, #16
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800f6c4:	4811      	ldr	r0, [pc, #68]	@ (800f70c <TL_BLE_Init+0x54>)
 800f6c6:	f000 fa4f 	bl	800fb68 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800f6ca:	4b11      	ldr	r3, [pc, #68]	@ (800f710 <TL_BLE_Init+0x58>)
 800f6cc:	685b      	ldr	r3, [r3, #4]
 800f6ce:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f6d0:	68fb      	ldr	r3, [r7, #12]
 800f6d2:	689a      	ldr	r2, [r3, #8]
 800f6d4:	68bb      	ldr	r3, [r7, #8]
 800f6d6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68da      	ldr	r2, [r3, #12]
 800f6dc:	68bb      	ldr	r3, [r7, #8]
 800f6de:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800f6e0:	68bb      	ldr	r3, [r7, #8]
 800f6e2:	4a0c      	ldr	r2, [pc, #48]	@ (800f714 <TL_BLE_Init+0x5c>)
 800f6e4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	4a08      	ldr	r2, [pc, #32]	@ (800f70c <TL_BLE_Init+0x54>)
 800f6ea:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800f6ec:	f002 fa84 	bl	8011bf8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	4a08      	ldr	r2, [pc, #32]	@ (800f718 <TL_BLE_Init+0x60>)
 800f6f6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	4a07      	ldr	r2, [pc, #28]	@ (800f71c <TL_BLE_Init+0x64>)
 800f6fe:	6013      	str	r3, [r2, #0]

  return 0;
 800f700:	2300      	movs	r3, #0
}
 800f702:	4618      	mov	r0, r3
 800f704:	3710      	adds	r7, #16
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}
 800f70a:	bf00      	nop
 800f70c:	200300c8 	.word	0x200300c8
 800f710:	20030000 	.word	0x20030000
 800f714:	20030a58 	.word	0x20030a58
 800f718:	20000914 	.word	0x20000914
 800f71c:	20000918 	.word	0x20000918

0800f720 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b082      	sub	sp, #8
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	460b      	mov	r3, r1
 800f72a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800f72c:	4b09      	ldr	r3, [pc, #36]	@ (800f754 <TL_BLE_SendCmd+0x34>)
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	2201      	movs	r2, #1
 800f734:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800f736:	4b07      	ldr	r3, [pc, #28]	@ (800f754 <TL_BLE_SendCmd+0x34>)
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	4619      	mov	r1, r3
 800f73e:	2001      	movs	r0, #1
 800f740:	f000 f96c 	bl	800fa1c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800f744:	f002 fa62 	bl	8011c0c <HW_IPCC_BLE_SendCmd>

  return 0;
 800f748:	2300      	movs	r3, #0
}
 800f74a:	4618      	mov	r0, r3
 800f74c:	3708      	adds	r7, #8
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}
 800f752:	bf00      	nop
 800f754:	20030000 	.word	0x20030000

0800f758 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800f75e:	e01c      	b.n	800f79a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800f760:	1d3b      	adds	r3, r7, #4
 800f762:	4619      	mov	r1, r3
 800f764:	4812      	ldr	r0, [pc, #72]	@ (800f7b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f766:	f000 fa9e 	bl	800fca6 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	7a5b      	ldrb	r3, [r3, #9]
 800f76e:	2b0f      	cmp	r3, #15
 800f770:	d003      	beq.n	800f77a <HW_IPCC_BLE_RxEvtNot+0x22>
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	7a5b      	ldrb	r3, [r3, #9]
 800f776:	2b0e      	cmp	r3, #14
 800f778:	d105      	bne.n	800f786 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	4619      	mov	r1, r3
 800f77e:	2002      	movs	r0, #2
 800f780:	f000 f94c 	bl	800fa1c <OutputDbgTrace>
 800f784:	e004      	b.n	800f790 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4619      	mov	r1, r3
 800f78a:	2003      	movs	r0, #3
 800f78c:	f000 f946 	bl	800fa1c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800f790:	4b08      	ldr	r3, [pc, #32]	@ (800f7b4 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	687a      	ldr	r2, [r7, #4]
 800f796:	4610      	mov	r0, r2
 800f798:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800f79a:	4805      	ldr	r0, [pc, #20]	@ (800f7b0 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800f79c:	f000 f9f4 	bl	800fb88 <LST_is_empty>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d0dc      	beq.n	800f760 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800f7a6:	bf00      	nop
}
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	200300c8 	.word	0x200300c8
 800f7b4:	20000914 	.word	0x20000914

0800f7b8 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800f7bc:	4b02      	ldr	r3, [pc, #8]	@ (800f7c8 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	4798      	blx	r3

  return;
 800f7c2:	bf00      	nop
}
 800f7c4:	bd80      	pop	{r7, pc}
 800f7c6:	bf00      	nop
 800f7c8:	20000918 	.word	0x20000918

0800f7cc <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b084      	sub	sp, #16
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800f7d8:	480d      	ldr	r0, [pc, #52]	@ (800f810 <TL_SYS_Init+0x44>)
 800f7da:	f000 f9c5 	bl	800fb68 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800f7de:	4b0d      	ldr	r3, [pc, #52]	@ (800f814 <TL_SYS_Init+0x48>)
 800f7e0:	68db      	ldr	r3, [r3, #12]
 800f7e2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	689a      	ldr	r2, [r3, #8]
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	4a08      	ldr	r2, [pc, #32]	@ (800f810 <TL_SYS_Init+0x44>)
 800f7f0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800f7f2:	f002 fa2d 	bl	8011c50 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a07      	ldr	r2, [pc, #28]	@ (800f818 <TL_SYS_Init+0x4c>)
 800f7fc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	685b      	ldr	r3, [r3, #4]
 800f802:	4a06      	ldr	r2, [pc, #24]	@ (800f81c <TL_SYS_Init+0x50>)
 800f804:	6013      	str	r3, [r2, #0]

  return 0;
 800f806:	2300      	movs	r3, #0
}
 800f808:	4618      	mov	r0, r3
 800f80a:	3710      	adds	r7, #16
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}
 800f810:	200300d0 	.word	0x200300d0
 800f814:	20030000 	.word	0x20030000
 800f818:	2000091c 	.word	0x2000091c
 800f81c:	20000920 	.word	0x20000920

0800f820 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
 800f828:	460b      	mov	r3, r1
 800f82a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800f82c:	4b09      	ldr	r3, [pc, #36]	@ (800f854 <TL_SYS_SendCmd+0x34>)
 800f82e:	68db      	ldr	r3, [r3, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2210      	movs	r2, #16
 800f834:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800f836:	4b07      	ldr	r3, [pc, #28]	@ (800f854 <TL_SYS_SendCmd+0x34>)
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	4619      	mov	r1, r3
 800f83e:	2004      	movs	r0, #4
 800f840:	f000 f8ec 	bl	800fa1c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800f844:	f002 fa0e 	bl	8011c64 <HW_IPCC_SYS_SendCmd>

  return 0;
 800f848:	2300      	movs	r3, #0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	20030000 	.word	0x20030000

0800f858 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f85c:	4b07      	ldr	r3, [pc, #28]	@ (800f87c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4619      	mov	r1, r3
 800f864:	2005      	movs	r0, #5
 800f866:	f000 f8d9 	bl	800fa1c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800f86a:	4b05      	ldr	r3, [pc, #20]	@ (800f880 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	4a03      	ldr	r2, [pc, #12]	@ (800f87c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800f870:	68d2      	ldr	r2, [r2, #12]
 800f872:	6812      	ldr	r2, [r2, #0]
 800f874:	4610      	mov	r0, r2
 800f876:	4798      	blx	r3

  return;
 800f878:	bf00      	nop
}
 800f87a:	bd80      	pop	{r7, pc}
 800f87c:	20030000 	.word	0x20030000
 800f880:	2000091c 	.word	0x2000091c

0800f884 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f88a:	e00e      	b.n	800f8aa <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800f88c:	1d3b      	adds	r3, r7, #4
 800f88e:	4619      	mov	r1, r3
 800f890:	480b      	ldr	r0, [pc, #44]	@ (800f8c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f892:	f000 fa08 	bl	800fca6 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	4619      	mov	r1, r3
 800f89a:	2006      	movs	r0, #6
 800f89c:	f000 f8be 	bl	800fa1c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800f8a0:	4b08      	ldr	r3, [pc, #32]	@ (800f8c4 <HW_IPCC_SYS_EvtNot+0x40>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	687a      	ldr	r2, [r7, #4]
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800f8aa:	4805      	ldr	r0, [pc, #20]	@ (800f8c0 <HW_IPCC_SYS_EvtNot+0x3c>)
 800f8ac:	f000 f96c 	bl	800fb88 <LST_is_empty>
 800f8b0:	4603      	mov	r3, r0
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d0ea      	beq.n	800f88c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800f8b6:	bf00      	nop
}
 800f8b8:	3708      	adds	r7, #8
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	bd80      	pop	{r7, pc}
 800f8be:	bf00      	nop
 800f8c0:	200300d0 	.word	0x200300d0
 800f8c4:	20000920 	.word	0x20000920

0800f8c8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b082      	sub	sp, #8
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800f8d0:	4817      	ldr	r0, [pc, #92]	@ (800f930 <TL_MM_Init+0x68>)
 800f8d2:	f000 f949 	bl	800fb68 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800f8d6:	4817      	ldr	r0, [pc, #92]	@ (800f934 <TL_MM_Init+0x6c>)
 800f8d8:	f000 f946 	bl	800fb68 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800f8dc:	4b16      	ldr	r3, [pc, #88]	@ (800f938 <TL_MM_Init+0x70>)
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	4a16      	ldr	r2, [pc, #88]	@ (800f93c <TL_MM_Init+0x74>)
 800f8e2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800f8e4:	4b15      	ldr	r3, [pc, #84]	@ (800f93c <TL_MM_Init+0x74>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	687a      	ldr	r2, [r7, #4]
 800f8ea:	6892      	ldr	r2, [r2, #8]
 800f8ec:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800f8ee:	4b13      	ldr	r3, [pc, #76]	@ (800f93c <TL_MM_Init+0x74>)
 800f8f0:	681b      	ldr	r3, [r3, #0]
 800f8f2:	687a      	ldr	r2, [r7, #4]
 800f8f4:	68d2      	ldr	r2, [r2, #12]
 800f8f6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800f8f8:	4b10      	ldr	r3, [pc, #64]	@ (800f93c <TL_MM_Init+0x74>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	4a0c      	ldr	r2, [pc, #48]	@ (800f930 <TL_MM_Init+0x68>)
 800f8fe:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800f900:	4b0e      	ldr	r3, [pc, #56]	@ (800f93c <TL_MM_Init+0x74>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	687a      	ldr	r2, [r7, #4]
 800f906:	6812      	ldr	r2, [r2, #0]
 800f908:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800f90a:	4b0c      	ldr	r3, [pc, #48]	@ (800f93c <TL_MM_Init+0x74>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	687a      	ldr	r2, [r7, #4]
 800f910:	6852      	ldr	r2, [r2, #4]
 800f912:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800f914:	4b09      	ldr	r3, [pc, #36]	@ (800f93c <TL_MM_Init+0x74>)
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	6912      	ldr	r2, [r2, #16]
 800f91c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800f91e:	4b07      	ldr	r3, [pc, #28]	@ (800f93c <TL_MM_Init+0x74>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	6952      	ldr	r2, [r2, #20]
 800f926:	619a      	str	r2, [r3, #24]

  return;
 800f928:	bf00      	nop
}
 800f92a:	3708      	adds	r7, #8
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	200300b8 	.word	0x200300b8
 800f934:	2000090c 	.word	0x2000090c
 800f938:	20030000 	.word	0x20030000
 800f93c:	20000924 	.word	0x20000924

0800f940 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800f948:	6879      	ldr	r1, [r7, #4]
 800f94a:	4807      	ldr	r0, [pc, #28]	@ (800f968 <TL_MM_EvtDone+0x28>)
 800f94c:	f000 f964 	bl	800fc18 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800f950:	6879      	ldr	r1, [r7, #4]
 800f952:	2000      	movs	r0, #0
 800f954:	f000 f862 	bl	800fa1c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800f958:	4804      	ldr	r0, [pc, #16]	@ (800f96c <TL_MM_EvtDone+0x2c>)
 800f95a:	f002 f9a9 	bl	8011cb0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800f95e:	bf00      	nop
}
 800f960:	3708      	adds	r7, #8
 800f962:	46bd      	mov	sp, r7
 800f964:	bd80      	pop	{r7, pc}
 800f966:	bf00      	nop
 800f968:	2000090c 	.word	0x2000090c
 800f96c:	0800f971 	.word	0x0800f971

0800f970 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b082      	sub	sp, #8
 800f974:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f976:	e00c      	b.n	800f992 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800f978:	1d3b      	adds	r3, r7, #4
 800f97a:	4619      	mov	r1, r3
 800f97c:	480a      	ldr	r0, [pc, #40]	@ (800f9a8 <SendFreeBuf+0x38>)
 800f97e:	f000 f992 	bl	800fca6 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800f982:	4b0a      	ldr	r3, [pc, #40]	@ (800f9ac <SendFreeBuf+0x3c>)
 800f984:	691b      	ldr	r3, [r3, #16]
 800f986:	691b      	ldr	r3, [r3, #16]
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	4611      	mov	r1, r2
 800f98c:	4618      	mov	r0, r3
 800f98e:	f000 f943 	bl	800fc18 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800f992:	4805      	ldr	r0, [pc, #20]	@ (800f9a8 <SendFreeBuf+0x38>)
 800f994:	f000 f8f8 	bl	800fb88 <LST_is_empty>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d0ec      	beq.n	800f978 <SendFreeBuf+0x8>
  }

  return;
 800f99e:	bf00      	nop
}
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	2000090c 	.word	0x2000090c
 800f9ac:	20030000 	.word	0x20030000

0800f9b0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800f9b4:	4805      	ldr	r0, [pc, #20]	@ (800f9cc <TL_TRACES_Init+0x1c>)
 800f9b6:	f000 f8d7 	bl	800fb68 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800f9ba:	4b05      	ldr	r3, [pc, #20]	@ (800f9d0 <TL_TRACES_Init+0x20>)
 800f9bc:	695b      	ldr	r3, [r3, #20]
 800f9be:	4a03      	ldr	r2, [pc, #12]	@ (800f9cc <TL_TRACES_Init+0x1c>)
 800f9c0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800f9c2:	f002 f9ab 	bl	8011d1c <HW_IPCC_TRACES_Init>

  return;
 800f9c6:	bf00      	nop
}
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	bf00      	nop
 800f9cc:	200300c0 	.word	0x200300c0
 800f9d0:	20030000 	.word	0x20030000

0800f9d4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b082      	sub	sp, #8
 800f9d8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f9da:	e008      	b.n	800f9ee <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800f9dc:	1d3b      	adds	r3, r7, #4
 800f9de:	4619      	mov	r1, r3
 800f9e0:	4808      	ldr	r0, [pc, #32]	@ (800fa04 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f9e2:	f000 f960 	bl	800fca6 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f000 f80d 	bl	800fa08 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800f9ee:	4805      	ldr	r0, [pc, #20]	@ (800fa04 <HW_IPCC_TRACES_EvtNot+0x30>)
 800f9f0:	f000 f8ca 	bl	800fb88 <LST_is_empty>
 800f9f4:	4603      	mov	r3, r0
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d0f0      	beq.n	800f9dc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800f9fa:	bf00      	nop
}
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	200300c0 	.word	0x200300c0

0800fa08 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800fa08:	b480      	push	{r7}
 800fa0a:	b083      	sub	sp, #12
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800fa1c:	b480      	push	{r7}
 800fa1e:	b085      	sub	sp, #20
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	4603      	mov	r3, r0
 800fa24:	6039      	str	r1, [r7, #0]
 800fa26:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	2b06      	cmp	r3, #6
 800fa2c:	d845      	bhi.n	800faba <OutputDbgTrace+0x9e>
 800fa2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa34 <OutputDbgTrace+0x18>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fa51 	.word	0x0800fa51
 800fa38:	0800fa75 	.word	0x0800fa75
 800fa3c:	0800fa7b 	.word	0x0800fa7b
 800fa40:	0800fa8f 	.word	0x0800fa8f
 800fa44:	0800fa9b 	.word	0x0800fa9b
 800fa48:	0800faa1 	.word	0x0800faa1
 800fa4c:	0800faaf 	.word	0x0800faaf
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	7a5b      	ldrb	r3, [r3, #9]
 800fa58:	2bff      	cmp	r3, #255	@ 0xff
 800fa5a:	d005      	beq.n	800fa68 <OutputDbgTrace+0x4c>
 800fa5c:	2bff      	cmp	r3, #255	@ 0xff
 800fa5e:	dc05      	bgt.n	800fa6c <OutputDbgTrace+0x50>
 800fa60:	2b0e      	cmp	r3, #14
 800fa62:	d005      	beq.n	800fa70 <OutputDbgTrace+0x54>
 800fa64:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800fa66:	e001      	b.n	800fa6c <OutputDbgTrace+0x50>
          break;
 800fa68:	bf00      	nop
 800fa6a:	e027      	b.n	800fabc <OutputDbgTrace+0xa0>
          break;
 800fa6c:	bf00      	nop
 800fa6e:	e025      	b.n	800fabc <OutputDbgTrace+0xa0>
          break;
 800fa70:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800fa72:	e023      	b.n	800fabc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fa78:	e020      	b.n	800fabc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	7a5b      	ldrb	r3, [r3, #9]
 800fa82:	2b0e      	cmp	r3, #14
 800fa84:	d001      	beq.n	800fa8a <OutputDbgTrace+0x6e>
 800fa86:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800fa88:	e000      	b.n	800fa8c <OutputDbgTrace+0x70>
          break;
 800fa8a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fa8c:	e016      	b.n	800fabc <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	7a5b      	ldrb	r3, [r3, #9]
 800fa96:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fa98:	e010      	b.n	800fabc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800fa9e:	e00d      	b.n	800fabc <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	7a5b      	ldrb	r3, [r3, #9]
 800faa8:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800faaa:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800faac:	e006      	b.n	800fabc <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800faae:	683b      	ldr	r3, [r7, #0]
 800fab0:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	7a5b      	ldrb	r3, [r3, #9]
 800fab6:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800fab8:	e000      	b.n	800fabc <OutputDbgTrace+0xa0>

    default:
      break;
 800faba:	bf00      	nop
  }

  return;
 800fabc:	bf00      	nop
}
 800fabe:	3714      	adds	r7, #20
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr

0800fac8 <DbgTraceGetFileName>:
 * @param  *fullPath Fullpath string (path + filename)
 * @retval char* Pointer on filename string
 */

const char *DbgTraceGetFileName(const char *fullpath)
{
 800fac8:	b580      	push	{r7, lr}
 800faca:	b084      	sub	sp, #16
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
  const char *ret = fullpath;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	60fb      	str	r3, [r7, #12]

  if (strrchr(fullpath, '\\') != NULL)
 800fad4:	215c      	movs	r1, #92	@ 0x5c
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f002 fdcc 	bl	8012674 <strrchr>
 800fadc:	4603      	mov	r3, r0
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d007      	beq.n	800faf2 <DbgTraceGetFileName+0x2a>
  {
    ret = strrchr(fullpath, '\\') + 1;
 800fae2:	215c      	movs	r1, #92	@ 0x5c
 800fae4:	6878      	ldr	r0, [r7, #4]
 800fae6:	f002 fdc5 	bl	8012674 <strrchr>
 800faea:	4603      	mov	r3, r0
 800faec:	3301      	adds	r3, #1
 800faee:	60fb      	str	r3, [r7, #12]
 800faf0:	e00d      	b.n	800fb0e <DbgTraceGetFileName+0x46>
  }
  else if (strrchr(fullpath, '/') != NULL)
 800faf2:	212f      	movs	r1, #47	@ 0x2f
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f002 fdbd 	bl	8012674 <strrchr>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d006      	beq.n	800fb0e <DbgTraceGetFileName+0x46>
  {
    ret = strrchr(fullpath, '/') + 1;
 800fb00:	212f      	movs	r1, #47	@ 0x2f
 800fb02:	6878      	ldr	r0, [r7, #4]
 800fb04:	f002 fdb6 	bl	8012674 <strrchr>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
}
 800fb10:	4618      	mov	r0, r3
 800fb12:	3710      	adds	r7, #16
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}

0800fb18 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	4603      	mov	r3, r0
 800fb20:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800fb22:	4b0f      	ldr	r3, [pc, #60]	@ (800fb60 <OTP_Read+0x48>)
 800fb24:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fb26:	e002      	b.n	800fb2e <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	3b08      	subs	r3, #8
 800fb2c:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	3307      	adds	r3, #7
 800fb32:	781b      	ldrb	r3, [r3, #0]
 800fb34:	79fa      	ldrb	r2, [r7, #7]
 800fb36:	429a      	cmp	r2, r3
 800fb38:	d003      	beq.n	800fb42 <OTP_Read+0x2a>
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	4a09      	ldr	r2, [pc, #36]	@ (800fb64 <OTP_Read+0x4c>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d1f2      	bne.n	800fb28 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	3307      	adds	r3, #7
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	79fa      	ldrb	r2, [r7, #7]
 800fb4a:	429a      	cmp	r2, r3
 800fb4c:	d001      	beq.n	800fb52 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800fb52:	68fb      	ldr	r3, [r7, #12]
}
 800fb54:	4618      	mov	r0, r3
 800fb56:	3714      	adds	r7, #20
 800fb58:	46bd      	mov	sp, r7
 800fb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5e:	4770      	bx	lr
 800fb60:	1fff73f8 	.word	0x1fff73f8
 800fb64:	1fff7000 	.word	0x1fff7000

0800fb68 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800fb68:	b480      	push	{r7}
 800fb6a:	b083      	sub	sp, #12
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	687a      	ldr	r2, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	687a      	ldr	r2, [r7, #4]
 800fb7a:	605a      	str	r2, [r3, #4]
}
 800fb7c:	bf00      	nop
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr

0800fb88 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb90:	f3ef 8310 	mrs	r3, PRIMASK
 800fb94:	60fb      	str	r3, [r7, #12]
  return(result);
 800fb96:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fb98:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800fb9a:	b672      	cpsid	i
}
 800fb9c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	687a      	ldr	r2, [r7, #4]
 800fba4:	429a      	cmp	r2, r3
 800fba6:	d102      	bne.n	800fbae <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800fba8:	2301      	movs	r3, #1
 800fbaa:	75fb      	strb	r3, [r7, #23]
 800fbac:	e001      	b.n	800fbb2 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800fbae:	2300      	movs	r3, #0
 800fbb0:	75fb      	strb	r3, [r7, #23]
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	f383 8810 	msr	PRIMASK, r3
}
 800fbbc:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800fbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	371c      	adds	r7, #28
 800fbc4:	46bd      	mov	sp, r7
 800fbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbca:	4770      	bx	lr

0800fbcc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800fbcc:	b480      	push	{r7}
 800fbce:	b087      	sub	sp, #28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbd6:	f3ef 8310 	mrs	r3, PRIMASK
 800fbda:	60fb      	str	r3, [r7, #12]
  return(result);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fbde:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fbe0:	b672      	cpsid	i
}
 800fbe2:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681a      	ldr	r2, [r3, #0]
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	683a      	ldr	r2, [r7, #0]
 800fbf6:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	605a      	str	r2, [r3, #4]
 800fc00:	697b      	ldr	r3, [r7, #20]
 800fc02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc04:	693b      	ldr	r3, [r7, #16]
 800fc06:	f383 8810 	msr	PRIMASK, r3
}
 800fc0a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fc0c:	bf00      	nop
 800fc0e:	371c      	adds	r7, #28
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b087      	sub	sp, #28
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc22:	f3ef 8310 	mrs	r3, PRIMASK
 800fc26:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc28:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc2c:	b672      	cpsid	i
}
 800fc2e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	685a      	ldr	r2, [r3, #4]
 800fc3a:	683b      	ldr	r3, [r7, #0]
 800fc3c:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	683a      	ldr	r2, [r7, #0]
 800fc42:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800fc44:	683b      	ldr	r3, [r7, #0]
 800fc46:	685b      	ldr	r3, [r3, #4]
 800fc48:	683a      	ldr	r2, [r7, #0]
 800fc4a:	601a      	str	r2, [r3, #0]
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc50:	693b      	ldr	r3, [r7, #16]
 800fc52:	f383 8810 	msr	PRIMASK, r3
}
 800fc56:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fc58:	bf00      	nop
 800fc5a:	371c      	adds	r7, #28
 800fc5c:	46bd      	mov	sp, r7
 800fc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc62:	4770      	bx	lr

0800fc64 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b087      	sub	sp, #28
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc6c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc70:	60fb      	str	r3, [r7, #12]
  return(result);
 800fc72:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fc74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fc76:	b672      	cpsid	i
}
 800fc78:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	687a      	ldr	r2, [r7, #4]
 800fc80:	6812      	ldr	r2, [r2, #0]
 800fc82:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	6852      	ldr	r2, [r2, #4]
 800fc8c:	605a      	str	r2, [r3, #4]
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	f383 8810 	msr	PRIMASK, r3
}
 800fc98:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fc9a:	bf00      	nop
 800fc9c:	371c      	adds	r7, #28
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca4:	4770      	bx	lr

0800fca6 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800fca6:	b580      	push	{r7, lr}
 800fca8:	b086      	sub	sp, #24
 800fcaa:	af00      	add	r7, sp, #0
 800fcac:	6078      	str	r0, [r7, #4]
 800fcae:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fcb0:	f3ef 8310 	mrs	r3, PRIMASK
 800fcb4:	60fb      	str	r3, [r7, #12]
  return(result);
 800fcb6:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800fcb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fcba:	b672      	cpsid	i
}
 800fcbc:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	681a      	ldr	r2, [r3, #0]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff ffca 	bl	800fc64 <LST_remove_node>
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	f383 8810 	msr	PRIMASK, r3
}
 800fcda:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800fcdc:	bf00      	nop
 800fcde:	3718      	adds	r7, #24
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 800fce4:	b480      	push	{r7}
 800fce6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 800fce8:	4b03      	ldr	r3, [pc, #12]	@ (800fcf8 <LL_FLASH_GetUDN+0x14>)
 800fcea:	681b      	ldr	r3, [r3, #0]
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf4:	4770      	bx	lr
 800fcf6:	bf00      	nop
 800fcf8:	1fff7580 	.word	0x1fff7580

0800fcfc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800fd00:	4b03      	ldr	r3, [pc, #12]	@ (800fd10 <LL_FLASH_GetDeviceID+0x14>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	b2db      	uxtb	r3, r3
}
 800fd06:	4618      	mov	r0, r3
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0e:	4770      	bx	lr
 800fd10:	1fff7584 	.word	0x1fff7584

0800fd14 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 800fd18:	4b03      	ldr	r3, [pc, #12]	@ (800fd28 <LL_FLASH_GetSTCompanyID+0x14>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	0a1b      	lsrs	r3, r3, #8
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	1fff7584 	.word	0x1fff7584

0800fd2c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 800fd2c:	b5b0      	push	{r4, r5, r7, lr}
 800fd2e:	b090      	sub	sp, #64	@ 0x40
 800fd30:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800fd32:	2392      	movs	r3, #146	@ 0x92
 800fd34:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 800fd38:	4b45      	ldr	r3, [pc, #276]	@ (800fe50 <APP_BLE_Init+0x124>)
 800fd3a:	1d3c      	adds	r4, r7, #4
 800fd3c:	461d      	mov	r5, r3
 800fd3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800fd48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fd4a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800fd4e:	c403      	stmia	r4!, {r0, r1}
 800fd50:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 800fd52:	f000 fb85 	bl	8010460 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800fd56:	2101      	movs	r1, #1
 800fd58:	2002      	movs	r0, #2
 800fd5a:	f002 f807 	bl	8011d6c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800fd5e:	4a3d      	ldr	r2, [pc, #244]	@ (800fe54 <APP_BLE_Init+0x128>)
 800fd60:	2100      	movs	r1, #0
 800fd62:	2002      	movs	r0, #2
 800fd64:	f002 f92e 	bl	8011fc4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800fd68:	1d3b      	adds	r3, r7, #4
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f7ff f89e 	bl	800eeac <SHCI_C2_BLE_Init>
 800fd70:	4603      	mov	r3, r0
 800fd72:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 800fd76:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d012      	beq.n	800fda4 <APP_BLE_Init+0x78>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 800fd7e:	4836      	ldr	r0, [pc, #216]	@ (800fe58 <APP_BLE_Init+0x12c>)
 800fd80:	f7ff fea2 	bl	800fac8 <DbgTraceGetFileName>
 800fd84:	4601      	mov	r1, r0
 800fd86:	f44f 73a4 	mov.w	r3, #328	@ 0x148
 800fd8a:	4a34      	ldr	r2, [pc, #208]	@ (800fe5c <APP_BLE_Init+0x130>)
 800fd8c:	4834      	ldr	r0, [pc, #208]	@ (800fe60 <APP_BLE_Init+0x134>)
 800fd8e:	f002 fb19 	bl	80123c4 <iprintf>
 800fd92:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800fd96:	4619      	mov	r1, r3
 800fd98:	4832      	ldr	r0, [pc, #200]	@ (800fe64 <APP_BLE_Init+0x138>)
 800fd9a:	f002 fb13 	bl	80123c4 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800fd9e:	f7f3 f86d 	bl	8002e7c <Error_Handler>
 800fda2:	e00c      	b.n	800fdbe <APP_BLE_Init+0x92>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 800fda4:	482c      	ldr	r0, [pc, #176]	@ (800fe58 <APP_BLE_Init+0x12c>)
 800fda6:	f7ff fe8f 	bl	800fac8 <DbgTraceGetFileName>
 800fdaa:	4601      	mov	r1, r0
 800fdac:	f44f 73a7 	mov.w	r3, #334	@ 0x14e
 800fdb0:	4a2a      	ldr	r2, [pc, #168]	@ (800fe5c <APP_BLE_Init+0x130>)
 800fdb2:	482b      	ldr	r0, [pc, #172]	@ (800fe60 <APP_BLE_Init+0x134>)
 800fdb4:	f002 fb06 	bl	80123c4 <iprintf>
 800fdb8:	482b      	ldr	r0, [pc, #172]	@ (800fe68 <APP_BLE_Init+0x13c>)
 800fdba:	f002 fb03 	bl	80123c4 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 800fdbe:	f000 fb65 	bl	801048c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800fdc2:	f7fe ffcd 	bl	800ed60 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fdc6:	4b29      	ldr	r3, [pc, #164]	@ (800fe6c <APP_BLE_Init+0x140>)
 800fdc8:	2200      	movs	r2, #0
 800fdca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 800fdce:	4b27      	ldr	r3, [pc, #156]	@ (800fe6c <APP_BLE_Init+0x140>)
 800fdd0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800fdd4:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800fdd6:	4a26      	ldr	r2, [pc, #152]	@ (800fe70 <APP_BLE_Init+0x144>)
 800fdd8:	2100      	movs	r1, #0
 800fdda:	2001      	movs	r0, #1
 800fddc:	f002 f8f2 	bl	8011fc4 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800fde0:	2006      	movs	r0, #6
 800fde2:	f7fe fe30 	bl	800ea46 <aci_hal_set_radio_activity_mask>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800fdec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d010      	beq.n	800fe16 <APP_BLE_Init+0xea>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 800fdf4:	4818      	ldr	r0, [pc, #96]	@ (800fe58 <APP_BLE_Init+0x12c>)
 800fdf6:	f7ff fe67 	bl	800fac8 <DbgTraceGetFileName>
 800fdfa:	4601      	mov	r1, r0
 800fdfc:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 800fe00:	4a16      	ldr	r2, [pc, #88]	@ (800fe5c <APP_BLE_Init+0x130>)
 800fe02:	4817      	ldr	r0, [pc, #92]	@ (800fe60 <APP_BLE_Init+0x134>)
 800fe04:	f002 fade 	bl	80123c4 <iprintf>
 800fe08:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4819      	ldr	r0, [pc, #100]	@ (800fe74 <APP_BLE_Init+0x148>)
 800fe10:	f002 fad8 	bl	80123c4 <iprintf>
 800fe14:	e00c      	b.n	800fe30 <APP_BLE_Init+0x104>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 800fe16:	4810      	ldr	r0, [pc, #64]	@ (800fe58 <APP_BLE_Init+0x12c>)
 800fe18:	f7ff fe56 	bl	800fac8 <DbgTraceGetFileName>
 800fe1c:	4601      	mov	r1, r0
 800fe1e:	f44f 73bb 	mov.w	r3, #374	@ 0x176
 800fe22:	4a0e      	ldr	r2, [pc, #56]	@ (800fe5c <APP_BLE_Init+0x130>)
 800fe24:	480e      	ldr	r0, [pc, #56]	@ (800fe60 <APP_BLE_Init+0x134>)
 800fe26:	f002 facd 	bl	80123c4 <iprintf>
 800fe2a:	4813      	ldr	r0, [pc, #76]	@ (800fe78 <APP_BLE_Init+0x14c>)
 800fe2c:	f002 faca 	bl	80123c4 <iprintf>
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 800fe30:	f000 ff82 	bl	8010d38 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800fe34:	4b0d      	ldr	r3, [pc, #52]	@ (800fe6c <APP_BLE_Init+0x140>)
 800fe36:	2200      	movs	r2, #0
 800fe38:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 800fe3a:	4b0c      	ldr	r3, [pc, #48]	@ (800fe6c <APP_BLE_Init+0x140>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 800fe40:	2001      	movs	r0, #1
 800fe42:	f000 fdb7 	bl	80109b4 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800fe46:	bf00      	nop
}
 800fe48:	3740      	adds	r7, #64	@ 0x40
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bdb0      	pop	{r4, r5, r7, pc}
 800fe4e:	bf00      	nop
 800fe50:	08013bd0 	.word	0x08013bd0
 800fe54:	0800f0c9 	.word	0x0800f0c9
 800fe58:	08013ac4 	.word	0x08013ac4
 800fe5c:	08015014 	.word	0x08015014
 800fe60:	08013ae0 	.word	0x08013ae0
 800fe64:	08013af4 	.word	0x08013af4
 800fe68:	08013b2c 	.word	0x08013b2c
 800fe6c:	20000930 	.word	0x20000930
 800fe70:	08010b39 	.word	0x08010b39
 800fe74:	08013b54 	.word	0x08013b54
 800fe78:	08013b98 	.word	0x08013b98

0800fe7c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 800fe7c:	b5b0      	push	{r4, r5, r7, lr}
 800fe7e:	b08e      	sub	sp, #56	@ 0x38
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 800fe84:	2392      	movs	r3, #146	@ 0x92
 800fe86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 800fe90:	6a3b      	ldr	r3, [r7, #32]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	2bff      	cmp	r3, #255	@ 0xff
 800fe96:	f000 811d 	beq.w	80100d4 <SVCCTL_App_Notification+0x258>
 800fe9a:	2bff      	cmp	r3, #255	@ 0xff
 800fe9c:	f300 8286 	bgt.w	80103ac <SVCCTL_App_Notification+0x530>
 800fea0:	2b05      	cmp	r3, #5
 800fea2:	d002      	beq.n	800feaa <SVCCTL_App_Notification+0x2e>
 800fea4:	2b3e      	cmp	r3, #62	@ 0x3e
 800fea6:	d042      	beq.n	800ff2e <SVCCTL_App_Notification+0xb2>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 800fea8:	e280      	b.n	80103ac <SVCCTL_App_Notification+0x530>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 800feaa:	6a3b      	ldr	r3, [r7, #32]
 800feac:	3302      	adds	r3, #2
 800feae:	60bb      	str	r3, [r7, #8]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800feb0:	68bb      	ldr	r3, [r7, #8]
 800feb2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800feb6:	b29a      	uxth	r2, r3
 800feb8:	4bb6      	ldr	r3, [pc, #728]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 800feba:	8adb      	ldrh	r3, [r3, #22]
 800febc:	429a      	cmp	r2, r3
 800febe:	d128      	bne.n	800ff12 <SVCCTL_App_Notification+0x96>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800fec0:	4bb4      	ldr	r3, [pc, #720]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 800fec2:	2200      	movs	r2, #0
 800fec4:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800fec6:	4bb3      	ldr	r3, [pc, #716]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 800fec8:	2200      	movs	r2, #0
 800feca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800fece:	48b2      	ldr	r0, [pc, #712]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800fed0:	f7ff fdfa 	bl	800fac8 <DbgTraceGetFileName>
 800fed4:	4601      	mov	r1, r0
 800fed6:	f44f 73dd 	mov.w	r3, #442	@ 0x1ba
 800feda:	4ab0      	ldr	r2, [pc, #704]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800fedc:	48b0      	ldr	r0, [pc, #704]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800fede:	f002 fa71 	bl	80123c4 <iprintf>
 800fee2:	48b0      	ldr	r0, [pc, #704]	@ (80101a4 <SVCCTL_App_Notification+0x328>)
 800fee4:	f002 fade 	bl	80124a4 <puts>
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800fee8:	48ab      	ldr	r0, [pc, #684]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800feea:	f7ff fded 	bl	800fac8 <DbgTraceGetFileName>
 800feee:	4601      	mov	r1, r0
 800fef0:	f240 13bb 	movw	r3, #443	@ 0x1bb
 800fef4:	4aa9      	ldr	r2, [pc, #676]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800fef6:	48aa      	ldr	r0, [pc, #680]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800fef8:	f002 fa64 	bl	80123c4 <iprintf>
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	4619      	mov	r1, r3
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	78db      	ldrb	r3, [r3, #3]
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	48a6      	ldr	r0, [pc, #664]	@ (80101a8 <SVCCTL_App_Notification+0x32c>)
 800ff0e:	f002 fa59 	bl	80123c4 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 800ff12:	2001      	movs	r0, #1
 800ff14:	f000 fd4e 	bl	80109b4 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 800ff18:	4ba4      	ldr	r3, [pc, #656]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 800ff1a:	2201      	movs	r2, #1
 800ff1c:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800ff1e:	4b9d      	ldr	r3, [pc, #628]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 800ff20:	8ada      	ldrh	r2, [r3, #22]
 800ff22:	4ba2      	ldr	r3, [pc, #648]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 800ff24:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 800ff26:	48a1      	ldr	r0, [pc, #644]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 800ff28:	f000 fef2 	bl	8010d10 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 800ff2c:	e241      	b.n	80103b2 <SVCCTL_App_Notification+0x536>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 800ff2e:	6a3b      	ldr	r3, [r7, #32]
 800ff30:	3302      	adds	r3, #2
 800ff32:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 800ff34:	697b      	ldr	r3, [r7, #20]
 800ff36:	781b      	ldrb	r3, [r3, #0]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d042      	beq.n	800ffc2 <SVCCTL_App_Notification+0x146>
 800ff3c:	2b03      	cmp	r3, #3
 800ff3e:	f040 80c7 	bne.w	80100d0 <SVCCTL_App_Notification+0x254>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 800ff42:	697b      	ldr	r3, [r7, #20]
 800ff44:	3301      	adds	r3, #1
 800ff46:	613b      	str	r3, [r7, #16]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 800ff48:	4893      	ldr	r0, [pc, #588]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800ff4a:	f7ff fdbd 	bl	800fac8 <DbgTraceGetFileName>
 800ff4e:	4601      	mov	r1, r0
 800ff50:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
 800ff54:	4a91      	ldr	r2, [pc, #580]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800ff56:	4892      	ldr	r0, [pc, #584]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800ff58:	f002 fa34 	bl	80123c4 <iprintf>
 800ff5c:	4894      	ldr	r0, [pc, #592]	@ (80101b0 <SVCCTL_App_Notification+0x334>)
 800ff5e:	f002 faa1 	bl	80124a4 <puts>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 800ff62:	488d      	ldr	r0, [pc, #564]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800ff64:	f7ff fdb0 	bl	800fac8 <DbgTraceGetFileName>
 800ff68:	4601      	mov	r1, r0
 800ff6a:	f240 13e3 	movw	r3, #483	@ 0x1e3
 800ff6e:	4a8b      	ldr	r2, [pc, #556]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800ff70:	488b      	ldr	r0, [pc, #556]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800ff72:	f002 fa27 	bl	80123c4 <iprintf>
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ff7c:	b29b      	uxth	r3, r3
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7f0 fbd2 	bl	8000728 <__aeabi_i2d>
 800ff84:	f04f 0200 	mov.w	r2, #0
 800ff88:	4b8a      	ldr	r3, [pc, #552]	@ (80101b4 <SVCCTL_App_Notification+0x338>)
 800ff8a:	f7f0 f951 	bl	8000230 <__aeabi_dmul>
 800ff8e:	4602      	mov	r2, r0
 800ff90:	460b      	mov	r3, r1
 800ff92:	4610      	mov	r0, r2
 800ff94:	4619      	mov	r1, r3
 800ff96:	693b      	ldr	r3, [r7, #16]
 800ff98:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800ff9c:	b29b      	uxth	r3, r3
 800ff9e:	461c      	mov	r4, r3
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	4613      	mov	r3, r2
 800ffac:	009b      	lsls	r3, r3, #2
 800ffae:	4413      	add	r3, r2
 800ffb0:	005b      	lsls	r3, r3, #1
 800ffb2:	9301      	str	r3, [sp, #4]
 800ffb4:	9400      	str	r4, [sp, #0]
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	487f      	ldr	r0, [pc, #508]	@ (80101b8 <SVCCTL_App_Notification+0x33c>)
 800ffbc:	f002 fa02 	bl	80123c4 <iprintf>
          break;
 800ffc0:	e087      	b.n	80100d2 <SVCCTL_App_Notification+0x256>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	3301      	adds	r3, #1
 800ffc6:	60fb      	str	r3, [r7, #12]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 800ffc8:	4873      	ldr	r0, [pc, #460]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800ffca:	f7ff fd7d 	bl	800fac8 <DbgTraceGetFileName>
 800ffce:	4601      	mov	r1, r0
 800ffd0:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800ffd4:	4a71      	ldr	r2, [pc, #452]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800ffd6:	4872      	ldr	r0, [pc, #456]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800ffd8:	f002 f9f4 	bl	80123c4 <iprintf>
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ffe2:	b29b      	uxth	r3, r3
 800ffe4:	4619      	mov	r1, r3
 800ffe6:	4875      	ldr	r0, [pc, #468]	@ (80101bc <SVCCTL_App_Notification+0x340>)
 800ffe8:	f002 f9ec 	bl	80123c4 <iprintf>
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800ffec:	486a      	ldr	r0, [pc, #424]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 800ffee:	f7ff fd6b 	bl	800fac8 <DbgTraceGetFileName>
 800fff2:	4601      	mov	r1, r0
 800fff4:	f44f 73fb 	mov.w	r3, #502	@ 0x1f6
 800fff8:	4a68      	ldr	r2, [pc, #416]	@ (801019c <SVCCTL_App_Notification+0x320>)
 800fffa:	4869      	ldr	r0, [pc, #420]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 800fffc:	f002 f9e2 	bl	80123c4 <iprintf>
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	7a9b      	ldrb	r3, [r3, #10]
 8010004:	4618      	mov	r0, r3
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	7a5b      	ldrb	r3, [r3, #9]
 801000a:	461c      	mov	r4, r3
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	7a1b      	ldrb	r3, [r3, #8]
 8010010:	461d      	mov	r5, r3
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	79db      	ldrb	r3, [r3, #7]
 8010016:	461a      	mov	r2, r3
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	799b      	ldrb	r3, [r3, #6]
 801001c:	4619      	mov	r1, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	795b      	ldrb	r3, [r3, #5]
 8010022:	9302      	str	r3, [sp, #8]
 8010024:	9101      	str	r1, [sp, #4]
 8010026:	9200      	str	r2, [sp, #0]
 8010028:	462b      	mov	r3, r5
 801002a:	4622      	mov	r2, r4
 801002c:	4601      	mov	r1, r0
 801002e:	4864      	ldr	r0, [pc, #400]	@ (80101c0 <SVCCTL_App_Notification+0x344>)
 8010030:	f002 f9c8 	bl	80123c4 <iprintf>
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 8010034:	4858      	ldr	r0, [pc, #352]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 8010036:	f7ff fd47 	bl	800fac8 <DbgTraceGetFileName>
 801003a:	4601      	mov	r1, r0
 801003c:	f240 13fd 	movw	r3, #509	@ 0x1fd
 8010040:	4a56      	ldr	r2, [pc, #344]	@ (801019c <SVCCTL_App_Notification+0x320>)
 8010042:	4857      	ldr	r0, [pc, #348]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 8010044:	f002 f9be 	bl	80123c4 <iprintf>
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 801004e:	b29b      	uxth	r3, r3
 8010050:	4618      	mov	r0, r3
 8010052:	f7f0 fb69 	bl	8000728 <__aeabi_i2d>
 8010056:	f04f 0200 	mov.w	r2, #0
 801005a:	4b56      	ldr	r3, [pc, #344]	@ (80101b4 <SVCCTL_App_Notification+0x338>)
 801005c:	f7f0 f8e8 	bl	8000230 <__aeabi_dmul>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4610      	mov	r0, r2
 8010066:	4619      	mov	r1, r3
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801006e:	b29b      	uxth	r3, r3
 8010070:	461c      	mov	r4, r3
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8010078:	b29b      	uxth	r3, r3
 801007a:	461a      	mov	r2, r3
 801007c:	4613      	mov	r3, r2
 801007e:	009b      	lsls	r3, r3, #2
 8010080:	4413      	add	r3, r2
 8010082:	005b      	lsls	r3, r3, #1
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	9400      	str	r4, [sp, #0]
 8010088:	4602      	mov	r2, r0
 801008a:	460b      	mov	r3, r1
 801008c:	484a      	ldr	r0, [pc, #296]	@ (80101b8 <SVCCTL_App_Notification+0x33c>)
 801008e:	f002 f999 	bl	80123c4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010092:	4b40      	ldr	r3, [pc, #256]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 8010094:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010098:	2b04      	cmp	r3, #4
 801009a:	d104      	bne.n	80100a6 <SVCCTL_App_Notification+0x22a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 801009c:	4b3d      	ldr	r3, [pc, #244]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 801009e:	2206      	movs	r2, #6
 80100a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80100a4:	e003      	b.n	80100ae <SVCCTL_App_Notification+0x232>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 80100a6:	4b3b      	ldr	r3, [pc, #236]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 80100a8:	2205      	movs	r2, #5
 80100aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 80100ae:	68fb      	ldr	r3, [r7, #12]
 80100b0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	4b37      	ldr	r3, [pc, #220]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 80100b8:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 80100ba:	4b3c      	ldr	r3, [pc, #240]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 80100bc:	2200      	movs	r2, #0
 80100be:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 80100c0:	4b34      	ldr	r3, [pc, #208]	@ (8010194 <SVCCTL_App_Notification+0x318>)
 80100c2:	8ada      	ldrh	r2, [r3, #22]
 80100c4:	4b39      	ldr	r3, [pc, #228]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 80100c6:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 80100c8:	4838      	ldr	r0, [pc, #224]	@ (80101ac <SVCCTL_App_Notification+0x330>)
 80100ca:	f000 fe21 	bl	8010d10 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 80100ce:	e000      	b.n	80100d2 <SVCCTL_App_Notification+0x256>
          break;
 80100d0:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 80100d2:	e16e      	b.n	80103b2 <SVCCTL_App_Notification+0x536>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 80100d4:	6a3b      	ldr	r3, [r7, #32]
 80100d6:	3302      	adds	r3, #2
 80100d8:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 80100da:	69fb      	ldr	r3, [r7, #28]
 80100dc:	881b      	ldrh	r3, [r3, #0]
 80100de:	b29b      	uxth	r3, r3
 80100e0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80100e4:	4293      	cmp	r3, r2
 80100e6:	f000 814a 	beq.w	801037e <SVCCTL_App_Notification+0x502>
 80100ea:	f640 420e 	movw	r2, #3086	@ 0xc0e
 80100ee:	4293      	cmp	r3, r2
 80100f0:	f300 815e 	bgt.w	80103b0 <SVCCTL_App_Notification+0x534>
 80100f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80100f8:	f000 8154 	beq.w	80103a4 <SVCCTL_App_Notification+0x528>
 80100fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010100:	f300 8156 	bgt.w	80103b0 <SVCCTL_App_Notification+0x534>
 8010104:	2b04      	cmp	r3, #4
 8010106:	f000 814f 	beq.w	80103a8 <SVCCTL_App_Notification+0x52c>
 801010a:	2b04      	cmp	r3, #4
 801010c:	f2c0 8150 	blt.w	80103b0 <SVCCTL_App_Notification+0x534>
 8010110:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010114:	4293      	cmp	r3, r2
 8010116:	f300 814b 	bgt.w	80103b0 <SVCCTL_App_Notification+0x534>
 801011a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801011e:	f340 8147 	ble.w	80103b0 <SVCCTL_App_Notification+0x534>
 8010122:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8010126:	2b09      	cmp	r3, #9
 8010128:	f200 8142 	bhi.w	80103b0 <SVCCTL_App_Notification+0x534>
 801012c:	a201      	add	r2, pc, #4	@ (adr r2, 8010134 <SVCCTL_App_Notification+0x2b8>)
 801012e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010132:	bf00      	nop
 8010134:	080102f9 	.word	0x080102f9
 8010138:	080101cd 	.word	0x080101cd
 801013c:	080103b1 	.word	0x080103b1
 8010140:	080103b1 	.word	0x080103b1
 8010144:	080103b1 	.word	0x080103b1
 8010148:	080103b1 	.word	0x080103b1
 801014c:	0801015d 	.word	0x0801015d
 8010150:	080103b1 	.word	0x080103b1
 8010154:	0801023f 	.word	0x0801023f
 8010158:	08010179 	.word	0x08010179
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 801015c:	480e      	ldr	r0, [pc, #56]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 801015e:	f7ff fcb3 	bl	800fac8 <DbgTraceGetFileName>
 8010162:	4601      	mov	r1, r0
 8010164:	f240 233f 	movw	r3, #575	@ 0x23f
 8010168:	4a0c      	ldr	r2, [pc, #48]	@ (801019c <SVCCTL_App_Notification+0x320>)
 801016a:	480d      	ldr	r0, [pc, #52]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 801016c:	f002 f92a 	bl	80123c4 <iprintf>
 8010170:	4814      	ldr	r0, [pc, #80]	@ (80101c4 <SVCCTL_App_Notification+0x348>)
 8010172:	f002 f927 	bl	80123c4 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8010176:	e118      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8010178:	4807      	ldr	r0, [pc, #28]	@ (8010198 <SVCCTL_App_Notification+0x31c>)
 801017a:	f7ff fca5 	bl	800fac8 <DbgTraceGetFileName>
 801017e:	4601      	mov	r1, r0
 8010180:	f240 234f 	movw	r3, #591	@ 0x24f
 8010184:	4a05      	ldr	r2, [pc, #20]	@ (801019c <SVCCTL_App_Notification+0x320>)
 8010186:	4806      	ldr	r0, [pc, #24]	@ (80101a0 <SVCCTL_App_Notification+0x324>)
 8010188:	f002 f91c 	bl	80123c4 <iprintf>
 801018c:	480e      	ldr	r0, [pc, #56]	@ (80101c8 <SVCCTL_App_Notification+0x34c>)
 801018e:	f002 f989 	bl	80124a4 <puts>
          break;
 8010192:	e10a      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
 8010194:	20000930 	.word	0x20000930
 8010198:	08013ac4 	.word	0x08013ac4
 801019c:	08015024 	.word	0x08015024
 80101a0:	08013ae0 	.word	0x08013ae0
 80101a4:	08013c0c 	.word	0x08013c0c
 80101a8:	08013c38 	.word	0x08013c38
 80101ac:	200009b4 	.word	0x200009b4
 80101b0:	08013c74 	.word	0x08013c74
 80101b4:	3ff40000 	.word	0x3ff40000
 80101b8:	08013ca8 	.word	0x08013ca8
 80101bc:	08013d14 	.word	0x08013d14
 80101c0:	08013d5c 	.word	0x08013d5c
 80101c4:	08013dac 	.word	0x08013dac
 80101c8:	08013dd4 	.word	0x08013dd4
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 80101cc:	487b      	ldr	r0, [pc, #492]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 80101ce:	f7ff fc7b 	bl	800fac8 <DbgTraceGetFileName>
 80101d2:	4601      	mov	r1, r0
 80101d4:	f240 2356 	movw	r3, #598	@ 0x256
 80101d8:	4a79      	ldr	r2, [pc, #484]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 80101da:	487a      	ldr	r0, [pc, #488]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 80101dc:	f002 f8f2 	bl	80123c4 <iprintf>
 80101e0:	4879      	ldr	r0, [pc, #484]	@ (80103c8 <SVCCTL_App_Notification+0x54c>)
 80101e2:	f002 f95f 	bl	80124a4 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 80101e6:	4b79      	ldr	r3, [pc, #484]	@ (80103cc <SVCCTL_App_Notification+0x550>)
 80101e8:	8adb      	ldrh	r3, [r3, #22]
 80101ea:	4979      	ldr	r1, [pc, #484]	@ (80103d0 <SVCCTL_App_Notification+0x554>)
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fd fe2c 	bl	800de4a <aci_gap_pass_key_resp>
 80101f2:	4603      	mov	r3, r0
 80101f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80101f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d010      	beq.n	8010222 <SVCCTL_App_Notification+0x3a6>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8010200:	486e      	ldr	r0, [pc, #440]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010202:	f7ff fc61 	bl	800fac8 <DbgTraceGetFileName>
 8010206:	4601      	mov	r1, r0
 8010208:	f240 235b 	movw	r3, #603	@ 0x25b
 801020c:	4a6c      	ldr	r2, [pc, #432]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801020e:	486d      	ldr	r0, [pc, #436]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010210:	f002 f8d8 	bl	80123c4 <iprintf>
 8010214:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010218:	4619      	mov	r1, r3
 801021a:	486e      	ldr	r0, [pc, #440]	@ (80103d4 <SVCCTL_App_Notification+0x558>)
 801021c:	f002 f8d2 	bl	80123c4 <iprintf>
          break;
 8010220:	e0c3      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8010222:	4866      	ldr	r0, [pc, #408]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010224:	f7ff fc50 	bl	800fac8 <DbgTraceGetFileName>
 8010228:	4601      	mov	r1, r0
 801022a:	f240 235f 	movw	r3, #607	@ 0x25f
 801022e:	4a64      	ldr	r2, [pc, #400]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 8010230:	4864      	ldr	r0, [pc, #400]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010232:	f002 f8c7 	bl	80123c4 <iprintf>
 8010236:	4868      	ldr	r0, [pc, #416]	@ (80103d8 <SVCCTL_App_Notification+0x55c>)
 8010238:	f002 f934 	bl	80124a4 <puts>
          break;
 801023c:	e0b5      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 801023e:	485f      	ldr	r0, [pc, #380]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010240:	f7ff fc42 	bl	800fac8 <DbgTraceGetFileName>
 8010244:	4601      	mov	r1, r0
 8010246:	f240 2367 	movw	r3, #615	@ 0x267
 801024a:	4a5d      	ldr	r2, [pc, #372]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801024c:	485d      	ldr	r0, [pc, #372]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 801024e:	f002 f8b9 	bl	80123c4 <iprintf>
 8010252:	4862      	ldr	r0, [pc, #392]	@ (80103dc <SVCCTL_App_Notification+0x560>)
 8010254:	f002 f926 	bl	80124a4 <puts>
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8010258:	4858      	ldr	r0, [pc, #352]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 801025a:	f7ff fc35 	bl	800fac8 <DbgTraceGetFileName>
 801025e:	4601      	mov	r1, r0
 8010260:	f44f 731a 	mov.w	r3, #616	@ 0x268
 8010264:	4a56      	ldr	r2, [pc, #344]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 8010266:	4857      	ldr	r0, [pc, #348]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010268:	f002 f8ac 	bl	80123c4 <iprintf>
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	3302      	adds	r3, #2
 8010270:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010274:	4619      	mov	r1, r3
 8010276:	485a      	ldr	r0, [pc, #360]	@ (80103e0 <SVCCTL_App_Notification+0x564>)
 8010278:	f002 f8a4 	bl	80123c4 <iprintf>
          APP_DBG_MSG("     - Hex_value = %lx\n",
 801027c:	484f      	ldr	r0, [pc, #316]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 801027e:	f7ff fc23 	bl	800fac8 <DbgTraceGetFileName>
 8010282:	4601      	mov	r1, r0
 8010284:	f240 236a 	movw	r3, #618	@ 0x26a
 8010288:	4a4d      	ldr	r2, [pc, #308]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801028a:	484e      	ldr	r0, [pc, #312]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 801028c:	f002 f89a 	bl	80123c4 <iprintf>
 8010290:	69fb      	ldr	r3, [r7, #28]
 8010292:	3302      	adds	r3, #2
 8010294:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8010298:	4619      	mov	r1, r3
 801029a:	4852      	ldr	r0, [pc, #328]	@ (80103e4 <SVCCTL_App_Notification+0x568>)
 801029c:	f002 f892 	bl	80123c4 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 80102a0:	4b4a      	ldr	r3, [pc, #296]	@ (80103cc <SVCCTL_App_Notification+0x550>)
 80102a2:	8adb      	ldrh	r3, [r3, #22]
 80102a4:	2101      	movs	r1, #1
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7fd ff79 	bl	800e19e <aci_gap_numeric_comparison_value_confirm_yesno>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          if (ret != BLE_STATUS_SUCCESS)
 80102b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d010      	beq.n	80102dc <SVCCTL_App_Notification+0x460>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 80102ba:	4840      	ldr	r0, [pc, #256]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 80102bc:	f7ff fc04 	bl	800fac8 <DbgTraceGetFileName>
 80102c0:	4601      	mov	r1, r0
 80102c2:	f240 236f 	movw	r3, #623	@ 0x26f
 80102c6:	4a3e      	ldr	r2, [pc, #248]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 80102c8:	483e      	ldr	r0, [pc, #248]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 80102ca:	f002 f87b 	bl	80123c4 <iprintf>
 80102ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80102d2:	4619      	mov	r1, r3
 80102d4:	4844      	ldr	r0, [pc, #272]	@ (80103e8 <SVCCTL_App_Notification+0x56c>)
 80102d6:	f002 f875 	bl	80123c4 <iprintf>
          break;
 80102da:	e066      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 80102dc:	4837      	ldr	r0, [pc, #220]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 80102de:	f7ff fbf3 	bl	800fac8 <DbgTraceGetFileName>
 80102e2:	4601      	mov	r1, r0
 80102e4:	f240 2373 	movw	r3, #627	@ 0x273
 80102e8:	4a35      	ldr	r2, [pc, #212]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 80102ea:	4836      	ldr	r0, [pc, #216]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 80102ec:	f002 f86a 	bl	80123c4 <iprintf>
 80102f0:	483e      	ldr	r0, [pc, #248]	@ (80103ec <SVCCTL_App_Notification+0x570>)
 80102f2:	f002 f8d7 	bl	80124a4 <puts>
          break;
 80102f6:	e058      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 80102f8:	69fb      	ldr	r3, [r7, #28]
 80102fa:	3302      	adds	r3, #2
 80102fc:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 80102fe:	482f      	ldr	r0, [pc, #188]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010300:	f7ff fbe2 	bl	800fac8 <DbgTraceGetFileName>
 8010304:	4601      	mov	r1, r0
 8010306:	f240 237d 	movw	r3, #637	@ 0x27d
 801030a:	4a2d      	ldr	r2, [pc, #180]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801030c:	482d      	ldr	r0, [pc, #180]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 801030e:	f002 f859 	bl	80123c4 <iprintf>
 8010312:	4837      	ldr	r0, [pc, #220]	@ (80103f0 <SVCCTL_App_Notification+0x574>)
 8010314:	f002 f8c6 	bl	80124a4 <puts>
          if (p_pairing_complete->Status != 0)
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	789b      	ldrb	r3, [r3, #2]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d013      	beq.n	8010348 <SVCCTL_App_Notification+0x4cc>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n", p_pairing_complete->Status, p_pairing_complete->Reason);
 8010320:	4826      	ldr	r0, [pc, #152]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010322:	f7ff fbd1 	bl	800fac8 <DbgTraceGetFileName>
 8010326:	4601      	mov	r1, r0
 8010328:	f44f 7320 	mov.w	r3, #640	@ 0x280
 801032c:	4a24      	ldr	r2, [pc, #144]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801032e:	4825      	ldr	r0, [pc, #148]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010330:	f002 f848 	bl	80123c4 <iprintf>
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	789b      	ldrb	r3, [r3, #2]
 8010338:	4619      	mov	r1, r3
 801033a:	69bb      	ldr	r3, [r7, #24]
 801033c:	78db      	ldrb	r3, [r3, #3]
 801033e:	461a      	mov	r2, r3
 8010340:	482c      	ldr	r0, [pc, #176]	@ (80103f4 <SVCCTL_App_Notification+0x578>)
 8010342:	f002 f83f 	bl	80123c4 <iprintf>
 8010346:	e00c      	b.n	8010362 <SVCCTL_App_Notification+0x4e6>
            APP_DBG_MSG("     - Pairing Success\n");
 8010348:	481c      	ldr	r0, [pc, #112]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 801034a:	f7ff fbbd 	bl	800fac8 <DbgTraceGetFileName>
 801034e:	4601      	mov	r1, r0
 8010350:	f44f 7321 	mov.w	r3, #644	@ 0x284
 8010354:	4a1a      	ldr	r2, [pc, #104]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 8010356:	481b      	ldr	r0, [pc, #108]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010358:	f002 f834 	bl	80123c4 <iprintf>
 801035c:	4826      	ldr	r0, [pc, #152]	@ (80103f8 <SVCCTL_App_Notification+0x57c>)
 801035e:	f002 f8a1 	bl	80124a4 <puts>
          APP_DBG_MSG("\n");
 8010362:	4816      	ldr	r0, [pc, #88]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010364:	f7ff fbb0 	bl	800fac8 <DbgTraceGetFileName>
 8010368:	4601      	mov	r1, r0
 801036a:	f240 2386 	movw	r3, #646	@ 0x286
 801036e:	4a14      	ldr	r2, [pc, #80]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 8010370:	4814      	ldr	r0, [pc, #80]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 8010372:	f002 f827 	bl	80123c4 <iprintf>
 8010376:	200a      	movs	r0, #10
 8010378:	f002 f836 	bl	80123e8 <putchar>
          break;
 801037c:	e015      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
          APP_DBG_MSG(">>== ACI_GATT_INDICATION_VSEVT_CODE \r");
 801037e:	480f      	ldr	r0, [pc, #60]	@ (80103bc <SVCCTL_App_Notification+0x540>)
 8010380:	f7ff fba2 	bl	800fac8 <DbgTraceGetFileName>
 8010384:	4601      	mov	r1, r0
 8010386:	f240 238f 	movw	r3, #655	@ 0x28f
 801038a:	4a0d      	ldr	r2, [pc, #52]	@ (80103c0 <SVCCTL_App_Notification+0x544>)
 801038c:	480d      	ldr	r0, [pc, #52]	@ (80103c4 <SVCCTL_App_Notification+0x548>)
 801038e:	f002 f819 	bl	80123c4 <iprintf>
 8010392:	481a      	ldr	r0, [pc, #104]	@ (80103fc <SVCCTL_App_Notification+0x580>)
 8010394:	f002 f816 	bl	80123c4 <iprintf>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010398:	4b0c      	ldr	r3, [pc, #48]	@ (80103cc <SVCCTL_App_Notification+0x550>)
 801039a:	8adb      	ldrh	r3, [r3, #22]
 801039c:	4618      	mov	r0, r3
 801039e:	f7fe fa11 	bl	800e7c4 <aci_gatt_confirm_indication>
        break;
 80103a2:	e002      	b.n	80103aa <SVCCTL_App_Notification+0x52e>
          break;
 80103a4:	bf00      	nop
 80103a6:	e003      	b.n	80103b0 <SVCCTL_App_Notification+0x534>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 80103a8:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80103aa:	e001      	b.n	80103b0 <SVCCTL_App_Notification+0x534>
      break;
 80103ac:	bf00      	nop
 80103ae:	e000      	b.n	80103b2 <SVCCTL_App_Notification+0x536>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80103b0:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80103b2:	2301      	movs	r3, #1
}
 80103b4:	4618      	mov	r0, r3
 80103b6:	3728      	adds	r7, #40	@ 0x28
 80103b8:	46bd      	mov	sp, r7
 80103ba:	bdb0      	pop	{r4, r5, r7, pc}
 80103bc:	08013ac4 	.word	0x08013ac4
 80103c0:	08015024 	.word	0x08015024
 80103c4:	08013ae0 	.word	0x08013ae0
 80103c8:	08013e04 	.word	0x08013e04
 80103cc:	20000930 	.word	0x20000930
 80103d0:	0001b207 	.word	0x0001b207
 80103d4:	08013e2c 	.word	0x08013e2c
 80103d8:	08013e60 	.word	0x08013e60
 80103dc:	08013e88 	.word	0x08013e88
 80103e0:	08013ebc 	.word	0x08013ebc
 80103e4:	08013ed8 	.word	0x08013ed8
 80103e8:	08013ef0 	.word	0x08013ef0
 80103ec:	08013f40 	.word	0x08013f40
 80103f0:	08013f88 	.word	0x08013f88
 80103f4:	08013fb4 	.word	0x08013fb4
 80103f8:	08013ff0 	.word	0x08013ff0
 80103fc:	08014008 	.word	0x08014008

08010400 <MVT_REF_fin>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void MVT_REF_fin(void)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_fin();
 8010404:	f000 fcb6 	bl	8010d74 <FSVC_MVT_REF_fin>
}
 8010408:	bf00      	nop
 801040a:	bd80      	pop	{r7, pc}

0801040c <MVT_REF_vide>:
void MVT_REF_vide(void)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_vide();
 8010410:	f000 fcbe 	bl	8010d90 <FSVC_MVT_REF_vide>
}
 8010414:	bf00      	nop
 8010416:	bd80      	pop	{r7, pc}

08010418 <MVT_REF_validation_succes>:

void MVT_REF_validation_succes(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_succes();
 801041c:	f000 fcc6 	bl	8010dac <FSVC_MVT_REF_validation_succes>
}
 8010420:	bf00      	nop
 8010422:	bd80      	pop	{r7, pc}

08010424 <MVT_REF_validation_fail>:
void MVT_REF_validation_fail(void)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_fail();
 8010428:	f000 fcce 	bl	8010dc8 <FSVC_MVT_REF_validation_fail>
}
 801042c:	bf00      	nop
 801042e:	bd80      	pop	{r7, pc}

08010430 <MVT_REF_validation_vide>:
void MVT_REF_validation_vide(void)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	af00      	add	r7, sp, #0
	FSVC_MVT_REF_validation_vide();
 8010434:	f000 fcd6 	bl	8010de4 <FSVC_MVT_REF_validation_vide>
}
 8010438:	bf00      	nop
 801043a:	bd80      	pop	{r7, pc}

0801043c <MVT_vide>:

void MVT_vide(void)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	af00      	add	r7, sp, #0
	FSVC_MVT_vide();
 8010440:	f000 fcde 	bl	8010e00 <FSVC_MVT_vide>
}
 8010444:	bf00      	nop
 8010446:	bd80      	pop	{r7, pc}

08010448 <MVT_valide>:
void MVT_valide(void)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	af00      	add	r7, sp, #0
	FSVC_MVT_valide();
 801044c:	f000 fce6 	bl	8010e1c <FSVC_MVT_valide>
}
 8010450:	bf00      	nop
 8010452:	bd80      	pop	{r7, pc}

08010454 <MVT_non_valide>:
void MVT_non_valide(void)
{
 8010454:	b580      	push	{r7, lr}
 8010456:	af00      	add	r7, sp, #0
	FSVC_MVT_non_valide();
 8010458:	f000 fcee 	bl	8010e38 <FSVC_MVT_non_valide>
}
 801045c:	bf00      	nop
 801045e:	bd80      	pop	{r7, pc}

08010460 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010466:	4b06      	ldr	r3, [pc, #24]	@ (8010480 <Ble_Tl_Init+0x20>)
 8010468:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 801046a:	4b06      	ldr	r3, [pc, #24]	@ (8010484 <Ble_Tl_Init+0x24>)
 801046c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 801046e:	463b      	mov	r3, r7
 8010470:	4619      	mov	r1, r3
 8010472:	4805      	ldr	r0, [pc, #20]	@ (8010488 <Ble_Tl_Init+0x28>)
 8010474:	f7fe fe0c 	bl	800f090 <hci_init>

  return;
 8010478:	bf00      	nop
}
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	200300d8 	.word	0x200300d8
 8010484:	08010c55 	.word	0x08010c55
 8010488:	08010c1d 	.word	0x08010c1d

0801048c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 801048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801048e:	b08d      	sub	sp, #52	@ 0x34
 8010490:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010492:	2300      	movs	r3, #0
 8010494:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010496:	2392      	movs	r3, #146	@ 0x92
 8010498:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 801049a:	48a3      	ldr	r0, [pc, #652]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801049c:	f7ff fb14 	bl	800fac8 <DbgTraceGetFileName>
 80104a0:	4601      	mov	r1, r0
 80104a2:	f240 23f9 	movw	r3, #761	@ 0x2f9
 80104a6:	4aa1      	ldr	r2, [pc, #644]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80104a8:	48a1      	ldr	r0, [pc, #644]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80104aa:	f001 ff8b 	bl	80123c4 <iprintf>
 80104ae:	48a1      	ldr	r0, [pc, #644]	@ (8010734 <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 80104b0:	f001 fff8 	bl	80124a4 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 80104b4:	f7fe fb1b 	bl	800eaee <hci_reset>
 80104b8:	4603      	mov	r3, r0
 80104ba:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80104bc:	7dfb      	ldrb	r3, [r7, #23]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d00f      	beq.n	80104e2 <Ble_Hci_Gap_Gatt_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 80104c2:	4899      	ldr	r0, [pc, #612]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80104c4:	f7ff fb00 	bl	800fac8 <DbgTraceGetFileName>
 80104c8:	4601      	mov	r1, r0
 80104ca:	f240 3302 	movw	r3, #770	@ 0x302
 80104ce:	4a97      	ldr	r2, [pc, #604]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80104d0:	4897      	ldr	r0, [pc, #604]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80104d2:	f001 ff77 	bl	80123c4 <iprintf>
 80104d6:	7dfb      	ldrb	r3, [r7, #23]
 80104d8:	4619      	mov	r1, r3
 80104da:	4897      	ldr	r0, [pc, #604]	@ (8010738 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 80104dc:	f001 ff72 	bl	80123c4 <iprintf>
 80104e0:	e00c      	b.n	80104fc <Ble_Hci_Gap_Gatt_Init+0x70>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 80104e2:	4891      	ldr	r0, [pc, #580]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80104e4:	f7ff faf0 	bl	800fac8 <DbgTraceGetFileName>
 80104e8:	4601      	mov	r1, r0
 80104ea:	f240 3306 	movw	r3, #774	@ 0x306
 80104ee:	4a8f      	ldr	r2, [pc, #572]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80104f0:	488f      	ldr	r0, [pc, #572]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80104f2:	f001 ff67 	bl	80123c4 <iprintf>
 80104f6:	4891      	ldr	r0, [pc, #580]	@ (801073c <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 80104f8:	f001 ffd4 	bl	80124a4 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 80104fc:	f000 fad8 	bl	8010ab0 <BleGetBdAddress>
 8010500:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010502:	693a      	ldr	r2, [r7, #16]
 8010504:	2106      	movs	r1, #6
 8010506:	2000      	movs	r0, #0
 8010508:	f7fe f9b1 	bl	800e86e <aci_hal_write_config_data>
 801050c:	4603      	mov	r3, r0
 801050e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010510:	7dfb      	ldrb	r3, [r7, #23]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d00f      	beq.n	8010536 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8010516:	4884      	ldr	r0, [pc, #528]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010518:	f7ff fad6 	bl	800fac8 <DbgTraceGetFileName>
 801051c:	4601      	mov	r1, r0
 801051e:	f44f 7344 	mov.w	r3, #784	@ 0x310
 8010522:	4a82      	ldr	r2, [pc, #520]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010524:	4882      	ldr	r0, [pc, #520]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010526:	f001 ff4d 	bl	80123c4 <iprintf>
 801052a:	7dfb      	ldrb	r3, [r7, #23]
 801052c:	4619      	mov	r1, r3
 801052e:	4884      	ldr	r0, [pc, #528]	@ (8010740 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8010530:	f001 ff48 	bl	80123c4 <iprintf>
 8010534:	e035      	b.n	80105a2 <Ble_Hci_Gap_Gatt_Init+0x116>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8010536:	487c      	ldr	r0, [pc, #496]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010538:	f7ff fac6 	bl	800fac8 <DbgTraceGetFileName>
 801053c:	4601      	mov	r1, r0
 801053e:	f44f 7345 	mov.w	r3, #788	@ 0x314
 8010542:	4a7a      	ldr	r2, [pc, #488]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010544:	487a      	ldr	r0, [pc, #488]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010546:	f001 ff3d 	bl	80123c4 <iprintf>
 801054a:	487e      	ldr	r0, [pc, #504]	@ (8010744 <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 801054c:	f001 ffaa 	bl	80124a4 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8010550:	4875      	ldr	r0, [pc, #468]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010552:	f7ff fab9 	bl	800fac8 <DbgTraceGetFileName>
 8010556:	4601      	mov	r1, r0
 8010558:	f240 3315 	movw	r3, #789	@ 0x315
 801055c:	4a73      	ldr	r2, [pc, #460]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801055e:	4874      	ldr	r0, [pc, #464]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010560:	f001 ff30 	bl	80123c4 <iprintf>
 8010564:	693b      	ldr	r3, [r7, #16]
 8010566:	3305      	adds	r3, #5
 8010568:	781b      	ldrb	r3, [r3, #0]
 801056a:	4618      	mov	r0, r3
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	3304      	adds	r3, #4
 8010570:	781b      	ldrb	r3, [r3, #0]
 8010572:	461c      	mov	r4, r3
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	3303      	adds	r3, #3
 8010578:	781b      	ldrb	r3, [r3, #0]
 801057a:	461d      	mov	r5, r3
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	3302      	adds	r3, #2
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	461a      	mov	r2, r3
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	3301      	adds	r3, #1
 8010588:	781b      	ldrb	r3, [r3, #0]
 801058a:	4619      	mov	r1, r3
 801058c:	693b      	ldr	r3, [r7, #16]
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	9302      	str	r3, [sp, #8]
 8010592:	9101      	str	r1, [sp, #4]
 8010594:	9200      	str	r2, [sp, #0]
 8010596:	462b      	mov	r3, r5
 8010598:	4622      	mov	r2, r4
 801059a:	4601      	mov	r1, r0
 801059c:	486a      	ldr	r0, [pc, #424]	@ (8010748 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 801059e:	f001 ff11 	bl	80123c4 <iprintf>
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 80105a2:	4a6a      	ldr	r2, [pc, #424]	@ (801074c <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 80105a4:	2110      	movs	r1, #16
 80105a6:	2018      	movs	r0, #24
 80105a8:	f7fe f961 	bl	800e86e <aci_hal_write_config_data>
 80105ac:	4603      	mov	r3, r0
 80105ae:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80105b0:	7dfb      	ldrb	r3, [r7, #23]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d00f      	beq.n	80105d6 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 80105b6:	485c      	ldr	r0, [pc, #368]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80105b8:	f7ff fa86 	bl	800fac8 <DbgTraceGetFileName>
 80105bc:	4601      	mov	r1, r0
 80105be:	f240 335f 	movw	r3, #863	@ 0x35f
 80105c2:	4a5a      	ldr	r2, [pc, #360]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80105c4:	485a      	ldr	r0, [pc, #360]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80105c6:	f001 fefd 	bl	80123c4 <iprintf>
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	4619      	mov	r1, r3
 80105ce:	4860      	ldr	r0, [pc, #384]	@ (8010750 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 80105d0:	f001 fef8 	bl	80123c4 <iprintf>
 80105d4:	e00c      	b.n	80105f0 <Ble_Hci_Gap_Gatt_Init+0x164>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 80105d6:	4854      	ldr	r0, [pc, #336]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80105d8:	f7ff fa76 	bl	800fac8 <DbgTraceGetFileName>
 80105dc:	4601      	mov	r1, r0
 80105de:	f240 3363 	movw	r3, #867	@ 0x363
 80105e2:	4a52      	ldr	r2, [pc, #328]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80105e4:	4852      	ldr	r0, [pc, #328]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80105e6:	f001 feed 	bl	80123c4 <iprintf>
 80105ea:	485a      	ldr	r0, [pc, #360]	@ (8010754 <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 80105ec:	f001 ff5a 	bl	80124a4 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 80105f0:	4a59      	ldr	r2, [pc, #356]	@ (8010758 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 80105f2:	2110      	movs	r1, #16
 80105f4:	2008      	movs	r0, #8
 80105f6:	f7fe f93a 	bl	800e86e <aci_hal_write_config_data>
 80105fa:	4603      	mov	r3, r0
 80105fc:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80105fe:	7dfb      	ldrb	r3, [r7, #23]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00f      	beq.n	8010624 <Ble_Hci_Gap_Gatt_Init+0x198>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8010604:	4848      	ldr	r0, [pc, #288]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010606:	f7ff fa5f 	bl	800fac8 <DbgTraceGetFileName>
 801060a:	4601      	mov	r1, r0
 801060c:	f44f 735b 	mov.w	r3, #876	@ 0x36c
 8010610:	4a46      	ldr	r2, [pc, #280]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010612:	4847      	ldr	r0, [pc, #284]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010614:	f001 fed6 	bl	80123c4 <iprintf>
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	4619      	mov	r1, r3
 801061c:	484f      	ldr	r0, [pc, #316]	@ (801075c <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 801061e:	f001 fed1 	bl	80123c4 <iprintf>
 8010622:	e00c      	b.n	801063e <Ble_Hci_Gap_Gatt_Init+0x1b2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8010624:	4840      	ldr	r0, [pc, #256]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010626:	f7ff fa4f 	bl	800fac8 <DbgTraceGetFileName>
 801062a:	4601      	mov	r1, r0
 801062c:	f44f 735c 	mov.w	r3, #880	@ 0x370
 8010630:	4a3e      	ldr	r2, [pc, #248]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010632:	483f      	ldr	r0, [pc, #252]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010634:	f001 fec6 	bl	80123c4 <iprintf>
 8010638:	4849      	ldr	r0, [pc, #292]	@ (8010760 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 801063a:	f001 ff33 	bl	80124a4 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 801063e:	2118      	movs	r1, #24
 8010640:	2001      	movs	r0, #1
 8010642:	f7fe f999 	bl	800e978 <aci_hal_set_tx_power_level>
 8010646:	4603      	mov	r3, r0
 8010648:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801064a:	7dfb      	ldrb	r3, [r7, #23]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00f      	beq.n	8010670 <Ble_Hci_Gap_Gatt_Init+0x1e4>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8010650:	4835      	ldr	r0, [pc, #212]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010652:	f7ff fa39 	bl	800fac8 <DbgTraceGetFileName>
 8010656:	4601      	mov	r1, r0
 8010658:	f240 3379 	movw	r3, #889	@ 0x379
 801065c:	4a33      	ldr	r2, [pc, #204]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801065e:	4834      	ldr	r0, [pc, #208]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010660:	f001 feb0 	bl	80123c4 <iprintf>
 8010664:	7dfb      	ldrb	r3, [r7, #23]
 8010666:	4619      	mov	r1, r3
 8010668:	483e      	ldr	r0, [pc, #248]	@ (8010764 <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 801066a:	f001 feab 	bl	80123c4 <iprintf>
 801066e:	e00c      	b.n	801068a <Ble_Hci_Gap_Gatt_Init+0x1fe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8010670:	482d      	ldr	r0, [pc, #180]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 8010672:	f7ff fa29 	bl	800fac8 <DbgTraceGetFileName>
 8010676:	4601      	mov	r1, r0
 8010678:	f240 337d 	movw	r3, #893	@ 0x37d
 801067c:	4a2b      	ldr	r2, [pc, #172]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 801067e:	482c      	ldr	r0, [pc, #176]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010680:	f001 fea0 	bl	80123c4 <iprintf>
 8010684:	4838      	ldr	r0, [pc, #224]	@ (8010768 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8010686:	f001 ff0d 	bl	80124a4 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 801068a:	f7fd fdef 	bl	800e26c <aci_gatt_init>
 801068e:	4603      	mov	r3, r0
 8010690:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8010692:	7dfb      	ldrb	r3, [r7, #23]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d00f      	beq.n	80106b8 <Ble_Hci_Gap_Gatt_Init+0x22c>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8010698:	4823      	ldr	r0, [pc, #140]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801069a:	f7ff fa15 	bl	800fac8 <DbgTraceGetFileName>
 801069e:	4601      	mov	r1, r0
 80106a0:	f240 3386 	movw	r3, #902	@ 0x386
 80106a4:	4a21      	ldr	r2, [pc, #132]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80106a6:	4822      	ldr	r0, [pc, #136]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80106a8:	f001 fe8c 	bl	80123c4 <iprintf>
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
 80106ae:	4619      	mov	r1, r3
 80106b0:	482e      	ldr	r0, [pc, #184]	@ (801076c <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 80106b2:	f001 fe87 	bl	80123c4 <iprintf>
 80106b6:	e00c      	b.n	80106d2 <Ble_Hci_Gap_Gatt_Init+0x246>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 80106b8:	481b      	ldr	r0, [pc, #108]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 80106ba:	f7ff fa05 	bl	800fac8 <DbgTraceGetFileName>
 80106be:	4601      	mov	r1, r0
 80106c0:	f240 338a 	movw	r3, #906	@ 0x38a
 80106c4:	4a19      	ldr	r2, [pc, #100]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 80106c6:	481a      	ldr	r0, [pc, #104]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 80106c8:	f001 fe7c 	bl	80123c4 <iprintf>
 80106cc:	4828      	ldr	r0, [pc, #160]	@ (8010770 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 80106ce:	f001 fee9 	bl	80124a4 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 80106d2:	2300      	movs	r3, #0
 80106d4:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80106d6:	7bfb      	ldrb	r3, [r7, #15]
 80106d8:	f043 0301 	orr.w	r3, r3, #1
 80106dc:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 80106de:	7bfb      	ldrb	r3, [r7, #15]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d069      	beq.n	80107b8 <Ble_Hci_Gap_Gatt_Init+0x32c>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80106e4:	4b23      	ldr	r3, [pc, #140]	@ (8010774 <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 80106e6:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 80106e8:	1dba      	adds	r2, r7, #6
 80106ea:	7bf8      	ldrb	r0, [r7, #15]
 80106ec:	1cbb      	adds	r3, r7, #2
 80106ee:	9301      	str	r3, [sp, #4]
 80106f0:	1d3b      	adds	r3, r7, #4
 80106f2:	9300      	str	r3, [sp, #0]
 80106f4:	4613      	mov	r3, r2
 80106f6:	2203      	movs	r2, #3
 80106f8:	2100      	movs	r1, #0
 80106fa:	f7fd fc0d 	bl	800df18 <aci_gap_init>
 80106fe:	4603      	mov	r3, r0
 8010700:	75fb      	strb	r3, [r7, #23]
                       CFG_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8010702:	7dfb      	ldrb	r3, [r7, #23]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d039      	beq.n	801077c <Ble_Hci_Gap_Gatt_Init+0x2f0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8010708:	4807      	ldr	r0, [pc, #28]	@ (8010728 <Ble_Hci_Gap_Gatt_Init+0x29c>)
 801070a:	f7ff f9dd 	bl	800fac8 <DbgTraceGetFileName>
 801070e:	4601      	mov	r1, r0
 8010710:	f240 33aa 	movw	r3, #938	@ 0x3aa
 8010714:	4a05      	ldr	r2, [pc, #20]	@ (801072c <Ble_Hci_Gap_Gatt_Init+0x2a0>)
 8010716:	4806      	ldr	r0, [pc, #24]	@ (8010730 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8010718:	f001 fe54 	bl	80123c4 <iprintf>
 801071c:	7dfb      	ldrb	r3, [r7, #23]
 801071e:	4619      	mov	r1, r3
 8010720:	4815      	ldr	r0, [pc, #84]	@ (8010778 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8010722:	f001 fe4f 	bl	80123c4 <iprintf>
 8010726:	e036      	b.n	8010796 <Ble_Hci_Gap_Gatt_Init+0x30a>
 8010728:	08013ac4 	.word	0x08013ac4
 801072c:	0801503c 	.word	0x0801503c
 8010730:	08013ae0 	.word	0x08013ae0
 8010734:	08014030 	.word	0x08014030
 8010738:	0801405c 	.word	0x0801405c
 801073c:	0801408c 	.word	0x0801408c
 8010740:	080140ac 	.word	0x080140ac
 8010744:	08014108 	.word	0x08014108
 8010748:	08014154 	.word	0x08014154
 801074c:	08014ff4 	.word	0x08014ff4
 8010750:	08014190 	.word	0x08014190
 8010754:	080141e8 	.word	0x080141e8
 8010758:	08015004 	.word	0x08015004
 801075c:	08014230 	.word	0x08014230
 8010760:	08014288 	.word	0x08014288
 8010764:	080142d0 	.word	0x080142d0
 8010768:	08014310 	.word	0x08014310
 801076c:	08014340 	.word	0x08014340
 8010770:	08014374 	.word	0x08014374
 8010774:	08014398 	.word	0x08014398
 8010778:	0801439c 	.word	0x0801439c
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 801077c:	487e      	ldr	r0, [pc, #504]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801077e:	f7ff f9a3 	bl	800fac8 <DbgTraceGetFileName>
 8010782:	4601      	mov	r1, r0
 8010784:	f240 33ae 	movw	r3, #942	@ 0x3ae
 8010788:	4a7c      	ldr	r2, [pc, #496]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801078a:	487d      	ldr	r0, [pc, #500]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801078c:	f001 fe1a 	bl	80123c4 <iprintf>
 8010790:	487c      	ldr	r0, [pc, #496]	@ (8010984 <Ble_Hci_Gap_Gatt_Init+0x4f8>)
 8010792:	f001 fe87 	bl	80124a4 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010796:	88fc      	ldrh	r4, [r7, #6]
 8010798:	88bd      	ldrh	r5, [r7, #4]
 801079a:	68b8      	ldr	r0, [r7, #8]
 801079c:	f7ef fcf0 	bl	8000180 <strlen>
 80107a0:	4603      	mov	r3, r0
 80107a2:	b2da      	uxtb	r2, r3
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	9300      	str	r3, [sp, #0]
 80107a8:	4613      	mov	r3, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	4629      	mov	r1, r5
 80107ae:	4620      	mov	r0, r4
 80107b0:	f7fd ff5f 	bl	800e672 <aci_gatt_update_char_value>
 80107b4:	4603      	mov	r3, r0
 80107b6:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 80107b8:	88f8      	ldrh	r0, [r7, #6]
 80107ba:	8879      	ldrh	r1, [r7, #2]
 80107bc:	463b      	mov	r3, r7
 80107be:	9300      	str	r3, [sp, #0]
 80107c0:	2302      	movs	r3, #2
 80107c2:	2200      	movs	r2, #0
 80107c4:	f7fd ff55 	bl	800e672 <aci_gatt_update_char_value>
 80107c8:	4603      	mov	r3, r0
 80107ca:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80107cc:	2202      	movs	r2, #2
 80107ce:	2102      	movs	r1, #2
 80107d0:	2000      	movs	r0, #0
 80107d2:	f7fe f9b0 	bl	800eb36 <hci_le_set_default_phy>
 80107d6:	4603      	mov	r3, r0
 80107d8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 80107da:	7dfb      	ldrb	r3, [r7, #23]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00f      	beq.n	8010800 <Ble_Hci_Gap_Gatt_Init+0x374>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 80107e0:	4865      	ldr	r0, [pc, #404]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80107e2:	f7ff f971 	bl	800fac8 <DbgTraceGetFileName>
 80107e6:	4601      	mov	r1, r0
 80107e8:	f44f 7374 	mov.w	r3, #976	@ 0x3d0
 80107ec:	4a63      	ldr	r2, [pc, #396]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80107ee:	4864      	ldr	r0, [pc, #400]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80107f0:	f001 fde8 	bl	80123c4 <iprintf>
 80107f4:	7dfb      	ldrb	r3, [r7, #23]
 80107f6:	4619      	mov	r1, r3
 80107f8:	4863      	ldr	r0, [pc, #396]	@ (8010988 <Ble_Hci_Gap_Gatt_Init+0x4fc>)
 80107fa:	f001 fde3 	bl	80123c4 <iprintf>
 80107fe:	e00c      	b.n	801081a <Ble_Hci_Gap_Gatt_Init+0x38e>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8010800:	485d      	ldr	r0, [pc, #372]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010802:	f7ff f961 	bl	800fac8 <DbgTraceGetFileName>
 8010806:	4601      	mov	r1, r0
 8010808:	f44f 7375 	mov.w	r3, #980	@ 0x3d4
 801080c:	4a5b      	ldr	r2, [pc, #364]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801080e:	485c      	ldr	r0, [pc, #368]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010810:	f001 fdd8 	bl	80123c4 <iprintf>
 8010814:	485d      	ldr	r0, [pc, #372]	@ (801098c <Ble_Hci_Gap_Gatt_Init+0x500>)
 8010816:	f001 fe45 	bl	80124a4 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801081a:	4b5d      	ldr	r3, [pc, #372]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801081c:	2201      	movs	r2, #1
 801081e:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8010820:	4b5b      	ldr	r3, [pc, #364]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010822:	781b      	ldrb	r3, [r3, #0]
 8010824:	4618      	mov	r0, r3
 8010826:	f7fd f9f8 	bl	800dc1a <aci_gap_set_io_capability>
 801082a:	4603      	mov	r3, r0
 801082c:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 801082e:	7dfb      	ldrb	r3, [r7, #23]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d00f      	beq.n	8010854 <Ble_Hci_Gap_Gatt_Init+0x3c8>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8010834:	4850      	ldr	r0, [pc, #320]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010836:	f7ff f947 	bl	800fac8 <DbgTraceGetFileName>
 801083a:	4601      	mov	r1, r0
 801083c:	f240 33de 	movw	r3, #990	@ 0x3de
 8010840:	4a4e      	ldr	r2, [pc, #312]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010842:	484f      	ldr	r0, [pc, #316]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010844:	f001 fdbe 	bl	80123c4 <iprintf>
 8010848:	7dfb      	ldrb	r3, [r7, #23]
 801084a:	4619      	mov	r1, r3
 801084c:	4851      	ldr	r0, [pc, #324]	@ (8010994 <Ble_Hci_Gap_Gatt_Init+0x508>)
 801084e:	f001 fdb9 	bl	80123c4 <iprintf>
 8010852:	e00c      	b.n	801086e <Ble_Hci_Gap_Gatt_Init+0x3e2>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8010854:	4848      	ldr	r0, [pc, #288]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010856:	f7ff f937 	bl	800fac8 <DbgTraceGetFileName>
 801085a:	4601      	mov	r1, r0
 801085c:	f240 33e2 	movw	r3, #994	@ 0x3e2
 8010860:	4a46      	ldr	r2, [pc, #280]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010862:	4847      	ldr	r0, [pc, #284]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010864:	f001 fdae 	bl	80123c4 <iprintf>
 8010868:	484b      	ldr	r0, [pc, #300]	@ (8010998 <Ble_Hci_Gap_Gatt_Init+0x50c>)
 801086a:	f001 fe1b 	bl	80124a4 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801086e:	4b48      	ldr	r3, [pc, #288]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010870:	2201      	movs	r2, #1
 8010872:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8010874:	4b46      	ldr	r3, [pc, #280]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010876:	2208      	movs	r2, #8
 8010878:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801087a:	4b45      	ldr	r3, [pc, #276]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801087c:	2210      	movs	r2, #16
 801087e:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8010880:	4b43      	ldr	r3, [pc, #268]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010882:	2200      	movs	r2, #0
 8010884:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8010886:	4b42      	ldr	r3, [pc, #264]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010888:	4a44      	ldr	r2, [pc, #272]	@ (801099c <Ble_Hci_Gap_Gatt_Init+0x510>)
 801088a:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 801088c:	4b40      	ldr	r3, [pc, #256]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801088e:	2200      	movs	r2, #0
 8010890:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8010892:	4b3f      	ldr	r3, [pc, #252]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010894:	789c      	ldrb	r4, [r3, #2]
 8010896:	4b3e      	ldr	r3, [pc, #248]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010898:	785d      	ldrb	r5, [r3, #1]
 801089a:	4b3d      	ldr	r3, [pc, #244]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 801089c:	791b      	ldrb	r3, [r3, #4]
 801089e:	4a3c      	ldr	r2, [pc, #240]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80108a0:	7952      	ldrb	r2, [r2, #5]
 80108a2:	493b      	ldr	r1, [pc, #236]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80108a4:	78c9      	ldrb	r1, [r1, #3]
 80108a6:	483a      	ldr	r0, [pc, #232]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 80108a8:	6880      	ldr	r0, [r0, #8]
 80108aa:	2600      	movs	r6, #0
 80108ac:	9604      	str	r6, [sp, #16]
 80108ae:	9003      	str	r0, [sp, #12]
 80108b0:	9102      	str	r1, [sp, #8]
 80108b2:	9201      	str	r2, [sp, #4]
 80108b4:	9300      	str	r3, [sp, #0]
 80108b6:	2300      	movs	r3, #0
 80108b8:	2201      	movs	r2, #1
 80108ba:	4629      	mov	r1, r5
 80108bc:	4620      	mov	r0, r4
 80108be:	f7fd fa00 	bl	800dcc2 <aci_gap_set_authentication_requirement>
 80108c2:	4603      	mov	r3, r0
 80108c4:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 80108c6:	7dfb      	ldrb	r3, [r7, #23]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d00f      	beq.n	80108ec <Ble_Hci_Gap_Gatt_Init+0x460>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 80108cc:	482a      	ldr	r0, [pc, #168]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80108ce:	f7ff f8fb 	bl	800fac8 <DbgTraceGetFileName>
 80108d2:	4601      	mov	r1, r0
 80108d4:	f240 33fd 	movw	r3, #1021	@ 0x3fd
 80108d8:	4a28      	ldr	r2, [pc, #160]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80108da:	4829      	ldr	r0, [pc, #164]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80108dc:	f001 fd72 	bl	80123c4 <iprintf>
 80108e0:	7dfb      	ldrb	r3, [r7, #23]
 80108e2:	4619      	mov	r1, r3
 80108e4:	482e      	ldr	r0, [pc, #184]	@ (80109a0 <Ble_Hci_Gap_Gatt_Init+0x514>)
 80108e6:	f001 fd6d 	bl	80123c4 <iprintf>
 80108ea:	e00c      	b.n	8010906 <Ble_Hci_Gap_Gatt_Init+0x47a>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 80108ec:	4822      	ldr	r0, [pc, #136]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 80108ee:	f7ff f8eb 	bl	800fac8 <DbgTraceGetFileName>
 80108f2:	4601      	mov	r1, r0
 80108f4:	f240 4301 	movw	r3, #1025	@ 0x401
 80108f8:	4a20      	ldr	r2, [pc, #128]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 80108fa:	4821      	ldr	r0, [pc, #132]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 80108fc:	f001 fd62 	bl	80123c4 <iprintf>
 8010900:	4828      	ldr	r0, [pc, #160]	@ (80109a4 <Ble_Hci_Gap_Gatt_Init+0x518>)
 8010902:	f001 fdcf 	bl	80124a4 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8010906:	4b22      	ldr	r3, [pc, #136]	@ (8010990 <Ble_Hci_Gap_Gatt_Init+0x504>)
 8010908:	789b      	ldrb	r3, [r3, #2]
 801090a:	2b00      	cmp	r3, #0
 801090c:	d023      	beq.n	8010956 <Ble_Hci_Gap_Gatt_Init+0x4ca>
  {
    ret = aci_gap_configure_whitelist();
 801090e:	f7fd fc22 	bl	800e156 <aci_gap_configure_filter_accept_list>
 8010912:	4603      	mov	r3, r0
 8010914:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 8010916:	7dfb      	ldrb	r3, [r7, #23]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d00f      	beq.n	801093c <Ble_Hci_Gap_Gatt_Init+0x4b0>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 801091c:	4816      	ldr	r0, [pc, #88]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801091e:	f7ff f8d3 	bl	800fac8 <DbgTraceGetFileName>
 8010922:	4601      	mov	r1, r0
 8010924:	f240 430c 	movw	r3, #1036	@ 0x40c
 8010928:	4a14      	ldr	r2, [pc, #80]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801092a:	4815      	ldr	r0, [pc, #84]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801092c:	f001 fd4a 	bl	80123c4 <iprintf>
 8010930:	7dfb      	ldrb	r3, [r7, #23]
 8010932:	4619      	mov	r1, r3
 8010934:	481c      	ldr	r0, [pc, #112]	@ (80109a8 <Ble_Hci_Gap_Gatt_Init+0x51c>)
 8010936:	f001 fd45 	bl	80123c4 <iprintf>
 801093a:	e00c      	b.n	8010956 <Ble_Hci_Gap_Gatt_Init+0x4ca>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 801093c:	480e      	ldr	r0, [pc, #56]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 801093e:	f7ff f8c3 	bl	800fac8 <DbgTraceGetFileName>
 8010942:	4601      	mov	r1, r0
 8010944:	f44f 6382 	mov.w	r3, #1040	@ 0x410
 8010948:	4a0c      	ldr	r2, [pc, #48]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 801094a:	480d      	ldr	r0, [pc, #52]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 801094c:	f001 fd3a 	bl	80123c4 <iprintf>
 8010950:	4816      	ldr	r0, [pc, #88]	@ (80109ac <Ble_Hci_Gap_Gatt_Init+0x520>)
 8010952:	f001 fda7 	bl	80124a4 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8010956:	4808      	ldr	r0, [pc, #32]	@ (8010978 <Ble_Hci_Gap_Gatt_Init+0x4ec>)
 8010958:	f7ff f8b6 	bl	800fac8 <DbgTraceGetFileName>
 801095c:	4601      	mov	r1, r0
 801095e:	f240 4313 	movw	r3, #1043	@ 0x413
 8010962:	4a06      	ldr	r2, [pc, #24]	@ (801097c <Ble_Hci_Gap_Gatt_Init+0x4f0>)
 8010964:	4806      	ldr	r0, [pc, #24]	@ (8010980 <Ble_Hci_Gap_Gatt_Init+0x4f4>)
 8010966:	f001 fd2d 	bl	80123c4 <iprintf>
 801096a:	4811      	ldr	r0, [pc, #68]	@ (80109b0 <Ble_Hci_Gap_Gatt_Init+0x524>)
 801096c:	f001 fd2a 	bl	80123c4 <iprintf>
}
 8010970:	bf00      	nop
 8010972:	371c      	adds	r7, #28
 8010974:	46bd      	mov	sp, r7
 8010976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010978:	08013ac4 	.word	0x08013ac4
 801097c:	0801503c 	.word	0x0801503c
 8010980:	08013ae0 	.word	0x08013ae0
 8010984:	080143cc 	.word	0x080143cc
 8010988:	080143ec 	.word	0x080143ec
 801098c:	08014428 	.word	0x08014428
 8010990:	20000930 	.word	0x20000930
 8010994:	08014454 	.word	0x08014454
 8010998:	08014494 	.word	0x08014494
 801099c:	0001b207 	.word	0x0001b207
 80109a0:	080144c4 	.word	0x080144c4
 80109a4:	08014510 	.word	0x08014510
 80109a8:	0801454c 	.word	0x0801454c
 80109ac:	0801458c 	.word	0x0801458c
 80109b0:	080145bc 	.word	0x080145bc

080109b4 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08c      	sub	sp, #48	@ 0x30
 80109b8:	af08      	add	r7, sp, #32
 80109ba:	4603      	mov	r3, r0
 80109bc:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80109be:	2392      	movs	r3, #146	@ 0x92
 80109c0:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80109c2:	4a32      	ldr	r2, [pc, #200]	@ (8010a8c <Adv_Request+0xd8>)
 80109c4:	79fb      	ldrb	r3, [r7, #7]
 80109c6:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80109ca:	2300      	movs	r3, #0
 80109cc:	9306      	str	r3, [sp, #24]
 80109ce:	2300      	movs	r3, #0
 80109d0:	9305      	str	r3, [sp, #20]
 80109d2:	2300      	movs	r3, #0
 80109d4:	9304      	str	r3, [sp, #16]
 80109d6:	2300      	movs	r3, #0
 80109d8:	9303      	str	r3, [sp, #12]
 80109da:	2300      	movs	r3, #0
 80109dc:	9302      	str	r3, [sp, #8]
 80109de:	2300      	movs	r3, #0
 80109e0:	9301      	str	r3, [sp, #4]
 80109e2:	2300      	movs	r3, #0
 80109e4:	9300      	str	r3, [sp, #0]
 80109e6:	2300      	movs	r3, #0
 80109e8:	22a0      	movs	r2, #160	@ 0xa0
 80109ea:	2180      	movs	r1, #128	@ 0x80
 80109ec:	2000      	movs	r0, #0
 80109ee:	f7fd f81a 	bl	800da26 <aci_gap_set_discoverable>
 80109f2:	4603      	mov	r3, r0
 80109f4:	73fb      	strb	r3, [r7, #15]
                                 0,
                                 0,
                                 0,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 80109f6:	7bfb      	ldrb	r3, [r7, #15]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d00f      	beq.n	8010a1c <Adv_Request+0x68>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 80109fc:	4824      	ldr	r0, [pc, #144]	@ (8010a90 <Adv_Request+0xdc>)
 80109fe:	f7ff f863 	bl	800fac8 <DbgTraceGetFileName>
 8010a02:	4601      	mov	r1, r0
 8010a04:	f240 4329 	movw	r3, #1065	@ 0x429
 8010a08:	4a22      	ldr	r2, [pc, #136]	@ (8010a94 <Adv_Request+0xe0>)
 8010a0a:	4823      	ldr	r0, [pc, #140]	@ (8010a98 <Adv_Request+0xe4>)
 8010a0c:	f001 fcda 	bl	80123c4 <iprintf>
 8010a10:	7bfb      	ldrb	r3, [r7, #15]
 8010a12:	4619      	mov	r1, r3
 8010a14:	4821      	ldr	r0, [pc, #132]	@ (8010a9c <Adv_Request+0xe8>)
 8010a16:	f001 fcd5 	bl	80123c4 <iprintf>
 8010a1a:	e00c      	b.n	8010a36 <Adv_Request+0x82>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8010a1c:	481c      	ldr	r0, [pc, #112]	@ (8010a90 <Adv_Request+0xdc>)
 8010a1e:	f7ff f853 	bl	800fac8 <DbgTraceGetFileName>
 8010a22:	4601      	mov	r1, r0
 8010a24:	f240 432d 	movw	r3, #1069	@ 0x42d
 8010a28:	4a1a      	ldr	r2, [pc, #104]	@ (8010a94 <Adv_Request+0xe0>)
 8010a2a:	481b      	ldr	r0, [pc, #108]	@ (8010a98 <Adv_Request+0xe4>)
 8010a2c:	f001 fcca 	bl	80123c4 <iprintf>
 8010a30:	481b      	ldr	r0, [pc, #108]	@ (8010aa0 <Adv_Request+0xec>)
 8010a32:	f001 fd37 	bl	80124a4 <puts>
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 8010a36:	491b      	ldr	r1, [pc, #108]	@ (8010aa4 <Adv_Request+0xf0>)
 8010a38:	201b      	movs	r0, #27
 8010a3a:	f7fd fb1a 	bl	800e072 <aci_gap_update_adv_data>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	73fb      	strb	r3, [r7, #15]
  if (ret != BLE_STATUS_SUCCESS)
 8010a42:	7bfb      	ldrb	r3, [r7, #15]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00f      	beq.n	8010a68 <Adv_Request+0xb4>
  {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 8010a48:	4811      	ldr	r0, [pc, #68]	@ (8010a90 <Adv_Request+0xdc>)
 8010a4a:	f7ff f83d 	bl	800fac8 <DbgTraceGetFileName>
 8010a4e:	4601      	mov	r1, r0
 8010a50:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8010a54:	4a0f      	ldr	r2, [pc, #60]	@ (8010a94 <Adv_Request+0xe0>)
 8010a56:	4810      	ldr	r0, [pc, #64]	@ (8010a98 <Adv_Request+0xe4>)
 8010a58:	f001 fcb4 	bl	80123c4 <iprintf>
 8010a5c:	7bfb      	ldrb	r3, [r7, #15]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4811      	ldr	r0, [pc, #68]	@ (8010aa8 <Adv_Request+0xf4>)
 8010a62:	f001 fcaf 	bl	80123c4 <iprintf>
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8010a66:	e00d      	b.n	8010a84 <Adv_Request+0xd0>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 8010a68:	4809      	ldr	r0, [pc, #36]	@ (8010a90 <Adv_Request+0xdc>)
 8010a6a:	f7ff f82d 	bl	800fac8 <DbgTraceGetFileName>
 8010a6e:	4601      	mov	r1, r0
 8010a70:	f240 433c 	movw	r3, #1084	@ 0x43c
 8010a74:	4a07      	ldr	r2, [pc, #28]	@ (8010a94 <Adv_Request+0xe0>)
 8010a76:	4808      	ldr	r0, [pc, #32]	@ (8010a98 <Adv_Request+0xe4>)
 8010a78:	f001 fca4 	bl	80123c4 <iprintf>
 8010a7c:	480b      	ldr	r0, [pc, #44]	@ (8010aac <Adv_Request+0xf8>)
 8010a7e:	f001 fca1 	bl	80123c4 <iprintf>
  return;
 8010a82:	bf00      	nop
}
 8010a84:	3710      	adds	r7, #16
 8010a86:	46bd      	mov	sp, r7
 8010a88:	bd80      	pop	{r7, pc}
 8010a8a:	bf00      	nop
 8010a8c:	20000930 	.word	0x20000930
 8010a90:	08013ac4 	.word	0x08013ac4
 8010a94:	08015054 	.word	0x08015054
 8010a98:	08013ae0 	.word	0x08013ae0
 8010a9c:	080145e8 	.word	0x080145e8
 8010aa0:	08014620 	.word	0x08014620
 8010aa4:	200000e8 	.word	0x200000e8
 8010aa8:	08014648 	.word	0x08014648
 8010aac:	0801467c 	.word	0x0801467c

08010ab0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8010ab0:	b580      	push	{r7, lr}
 8010ab2:	b086      	sub	sp, #24
 8010ab4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8010ab6:	f7ff f915 	bl	800fce4 <LL_FLASH_GetUDN>
 8010aba:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8010abc:	693b      	ldr	r3, [r7, #16]
 8010abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ac2:	d023      	beq.n	8010b0c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8010ac4:	f7ff f926 	bl	800fd14 <LL_FLASH_GetSTCompanyID>
 8010ac8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8010aca:	f7ff f917 	bl	800fcfc <LL_FLASH_GetDeviceID>
 8010ace:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8010ad0:	693b      	ldr	r3, [r7, #16]
 8010ad2:	b2da      	uxtb	r2, r3
 8010ad4:	4b16      	ldr	r3, [pc, #88]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010ad6:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8010ad8:	693b      	ldr	r3, [r7, #16]
 8010ada:	0a1b      	lsrs	r3, r3, #8
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	4b14      	ldr	r3, [pc, #80]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010ae0:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	4b12      	ldr	r3, [pc, #72]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010ae8:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8010aea:	68bb      	ldr	r3, [r7, #8]
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	4b10      	ldr	r3, [pc, #64]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010af0:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8010af2:	68bb      	ldr	r3, [r7, #8]
 8010af4:	0a1b      	lsrs	r3, r3, #8
 8010af6:	b2da      	uxtb	r2, r3
 8010af8:	4b0d      	ldr	r3, [pc, #52]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010afa:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	0c1b      	lsrs	r3, r3, #16
 8010b00:	b2da      	uxtb	r2, r3
 8010b02:	4b0b      	ldr	r3, [pc, #44]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010b04:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8010b06:	4b0a      	ldr	r3, [pc, #40]	@ (8010b30 <BleGetBdAddress+0x80>)
 8010b08:	617b      	str	r3, [r7, #20]
 8010b0a:	e00b      	b.n	8010b24 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f7ff f803 	bl	800fb18 <OTP_Read>
 8010b12:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d002      	beq.n	8010b20 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	617b      	str	r3, [r7, #20]
 8010b1e:	e001      	b.n	8010b24 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8010b20:	4b04      	ldr	r3, [pc, #16]	@ (8010b34 <BleGetBdAddress+0x84>)
 8010b22:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8010b24:	697b      	ldr	r3, [r7, #20]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	20000928 	.word	0x20000928
 8010b34:	08014fec 	.word	0x08014fec

08010b38 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8010b38:	b580      	push	{r7, lr}
 8010b3a:	b082      	sub	sp, #8
 8010b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8010b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8010bbc <Adv_Cancel+0x84>)
 8010b40:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010b44:	2b05      	cmp	r3, #5
 8010b46:	d035      	beq.n	8010bb4 <Adv_Cancel+0x7c>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010b48:	2392      	movs	r3, #146	@ 0x92
 8010b4a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 8010b4c:	f7fc ff47 	bl	800d9de <aci_gap_set_non_discoverable>
 8010b50:	4603      	mov	r3, r0
 8010b52:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010b54:	4b19      	ldr	r3, [pc, #100]	@ (8010bbc <Adv_Cancel+0x84>)
 8010b56:	2200      	movs	r2, #0
 8010b58:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    if (ret != BLE_STATUS_SUCCESS)
 8010b5c:	79fb      	ldrb	r3, [r7, #7]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d00d      	beq.n	8010b7e <Adv_Cancel+0x46>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8010b62:	4817      	ldr	r0, [pc, #92]	@ (8010bc0 <Adv_Cancel+0x88>)
 8010b64:	f7fe ffb0 	bl	800fac8 <DbgTraceGetFileName>
 8010b68:	4601      	mov	r1, r0
 8010b6a:	f240 438a 	movw	r3, #1162	@ 0x48a
 8010b6e:	4a15      	ldr	r2, [pc, #84]	@ (8010bc4 <Adv_Cancel+0x8c>)
 8010b70:	4815      	ldr	r0, [pc, #84]	@ (8010bc8 <Adv_Cancel+0x90>)
 8010b72:	f001 fc27 	bl	80123c4 <iprintf>
 8010b76:	4815      	ldr	r0, [pc, #84]	@ (8010bcc <Adv_Cancel+0x94>)
 8010b78:	f001 fc24 	bl	80123c4 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8010b7c:	e01a      	b.n	8010bb4 <Adv_Cancel+0x7c>
      APP_DBG_MSG("  \r\n\r");
 8010b7e:	4810      	ldr	r0, [pc, #64]	@ (8010bc0 <Adv_Cancel+0x88>)
 8010b80:	f7fe ffa2 	bl	800fac8 <DbgTraceGetFileName>
 8010b84:	4601      	mov	r1, r0
 8010b86:	f240 438e 	movw	r3, #1166	@ 0x48e
 8010b8a:	4a0e      	ldr	r2, [pc, #56]	@ (8010bc4 <Adv_Cancel+0x8c>)
 8010b8c:	480e      	ldr	r0, [pc, #56]	@ (8010bc8 <Adv_Cancel+0x90>)
 8010b8e:	f001 fc19 	bl	80123c4 <iprintf>
 8010b92:	480f      	ldr	r0, [pc, #60]	@ (8010bd0 <Adv_Cancel+0x98>)
 8010b94:	f001 fc16 	bl	80123c4 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8010b98:	4809      	ldr	r0, [pc, #36]	@ (8010bc0 <Adv_Cancel+0x88>)
 8010b9a:	f7fe ff95 	bl	800fac8 <DbgTraceGetFileName>
 8010b9e:	4601      	mov	r1, r0
 8010ba0:	f240 438f 	movw	r3, #1167	@ 0x48f
 8010ba4:	4a07      	ldr	r2, [pc, #28]	@ (8010bc4 <Adv_Cancel+0x8c>)
 8010ba6:	4808      	ldr	r0, [pc, #32]	@ (8010bc8 <Adv_Cancel+0x90>)
 8010ba8:	f001 fc0c 	bl	80123c4 <iprintf>
 8010bac:	4809      	ldr	r0, [pc, #36]	@ (8010bd4 <Adv_Cancel+0x9c>)
 8010bae:	f001 fc09 	bl	80123c4 <iprintf>
  return;
 8010bb2:	bf00      	nop
 8010bb4:	bf00      	nop
}
 8010bb6:	3708      	adds	r7, #8
 8010bb8:	46bd      	mov	sp, r7
 8010bba:	bd80      	pop	{r7, pc}
 8010bbc:	20000930 	.word	0x20000930
 8010bc0:	08013ac4 	.word	0x08013ac4
 8010bc4:	08015060 	.word	0x08015060
 8010bc8:	08013ae0 	.word	0x08013ae0
 8010bcc:	080146a4 	.word	0x080146a4
 8010bd0:	080146c8 	.word	0x080146c8
 8010bd4:	080146d0 	.word	0x080146d0

08010bd8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8010be0:	2100      	movs	r1, #0
 8010be2:	2002      	movs	r0, #2
 8010be4:	f001 fa10 	bl	8012008 <UTIL_SEQ_SetTask>

  return;
 8010be8:	bf00      	nop
}
 8010bea:	3708      	adds	r7, #8
 8010bec:	46bd      	mov	sp, r7
 8010bee:	bd80      	pop	{r7, pc}

08010bf0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b082      	sub	sp, #8
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010bf8:	2001      	movs	r0, #1
 8010bfa:	f001 fa71 	bl	80120e0 <UTIL_SEQ_SetEvt>

  return;
 8010bfe:	bf00      	nop
}
 8010c00:	3708      	adds	r7, #8
 8010c02:	46bd      	mov	sp, r7
 8010c04:	bd80      	pop	{r7, pc}

08010c06 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8010c0e:	2001      	movs	r0, #1
 8010c10:	f001 fa86 	bl	8012120 <UTIL_SEQ_WaitEvt>

  return;
 8010c14:	bf00      	nop
}
 8010c16:	3708      	adds	r7, #8
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}

08010c1c <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	685b      	ldr	r3, [r3, #4]
 8010c2c:	3308      	adds	r3, #8
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f7fe f8e8 	bl	800ee04 <SVCCTL_UserEvtRx>
 8010c34:	4603      	mov	r3, r0
 8010c36:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8010c38:	7afb      	ldrb	r3, [r7, #11]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d003      	beq.n	8010c46 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	2201      	movs	r2, #1
 8010c42:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8010c44:	e003      	b.n	8010c4e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	701a      	strb	r2, [r3, #0]
  return;
 8010c4c:	bf00      	nop
}
 8010c4e:	3710      	adds	r7, #16
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd80      	pop	{r7, pc}

08010c54 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b084      	sub	sp, #16
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8010c5e:	79fb      	ldrb	r3, [r7, #7]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d002      	beq.n	8010c6a <BLE_StatusNot+0x16>
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d006      	beq.n	8010c76 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8010c68:	e00b      	b.n	8010c82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010c6a:	230f      	movs	r3, #15
 8010c6c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8010c6e:	68f8      	ldr	r0, [r7, #12]
 8010c70:	f001 f9f6 	bl	8012060 <UTIL_SEQ_PauseTask>
      break;
 8010c74:	e005      	b.n	8010c82 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8010c76:	230f      	movs	r3, #15
 8010c78:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8010c7a:	68f8      	ldr	r0, [r7, #12]
 8010c7c:	f001 fa10 	bl	80120a0 <UTIL_SEQ_ResumeTask>
      break;
 8010c80:	bf00      	nop
  }

  return;
 8010c82:	bf00      	nop
}
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
	...

08010c8c <Custom_STM_App_Notification>:
static void Custom_Appli_Update_Char();
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	2b06      	cmp	r3, #6
 8010c9a:	d830      	bhi.n	8010cfe <Custom_STM_App_Notification+0x72>
 8010c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8010ca4 <Custom_STM_App_Notification+0x18>)
 8010c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ca2:	bf00      	nop
 8010ca4:	08010cc1 	.word	0x08010cc1
 8010ca8:	08010ccd 	.word	0x08010ccd
 8010cac:	08010cff 	.word	0x08010cff
 8010cb0:	08010cd5 	.word	0x08010cd5
 8010cb4:	08010ceb 	.word	0x08010ceb
 8010cb8:	08010cf7 	.word	0x08010cf7
 8010cbc:	08010cff 	.word	0x08010cff
    /* USER CODE END CUSTOM_STM_App_Notification_Custom_Evt_Opcode */

    /* Mvt_def */
    case CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 1;
 8010cc0:	4b11      	ldr	r3, [pc, #68]	@ (8010d08 <Custom_STM_App_Notification+0x7c>)
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	701a      	strb	r2, [r3, #0]
    	    	Custom_Mvt_rep_Send_Notification();
 8010cc6:	f000 f8d9 	bl	8010e7c <Custom_Mvt_rep_Send_Notification>
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT */
      break;
 8010cca:	e019      	b.n	8010d00 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Mvt_rep_Notification_Status = 0;
 8010ccc:	4b0e      	ldr	r3, [pc, #56]	@ (8010d08 <Custom_STM_App_Notification+0x7c>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	701a      	strb	r2, [r3, #0]
      /* USER CODE END CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT */
      break;
 8010cd2:	e015      	b.n	8010d00 <Custom_STM_App_Notification+0x74>
      /* USER CODE END CUSTOM_STM_APPEL_APP_READ_EVT */
      break;

    case CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT:
      /* USER CODE BEGIN CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
    	memcpy(UpdateCharData,pNotification->DataTransfered.pPayload,pNotification->DataTransfered.Length);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6859      	ldr	r1, [r3, #4]
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	7a1b      	ldrb	r3, [r3, #8]
 8010cdc:	461a      	mov	r2, r3
 8010cde:	480b      	ldr	r0, [pc, #44]	@ (8010d0c <Custom_STM_App_Notification+0x80>)
 8010ce0:	f001 fd51 	bl	8012786 <memcpy>
    	Custom_Appli_Update_Char();
 8010ce4:	f000 fab0 	bl	8011248 <Custom_Appli_Update_Char>
      /* USER CODE END CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT */
      break;
 8010ce8:	e00a      	b.n	8010d00 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT */
    	Custom_App_Context.Force_Notification_Status = 1;
 8010cea:	4b07      	ldr	r3, [pc, #28]	@ (8010d08 <Custom_STM_App_Notification+0x7c>)
 8010cec:	2201      	movs	r2, #1
 8010cee:	705a      	strb	r2, [r3, #1]
    	Custom_Force_Send_Notification();
 8010cf0:	f000 fa30 	bl	8011154 <Custom_Force_Send_Notification>
      /* USER CODE END CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT */
      break;
 8010cf4:	e004      	b.n	8010d00 <Custom_STM_App_Notification+0x74>

    case CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT:
      /* USER CODE BEGIN CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT */
    	Custom_App_Context.Force_Notification_Status = 0;
 8010cf6:	4b04      	ldr	r3, [pc, #16]	@ (8010d08 <Custom_STM_App_Notification+0x7c>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	705a      	strb	r2, [r3, #1]
      /* USER CODE END CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT */
      break;
 8010cfc:	e000      	b.n	8010d00 <Custom_STM_App_Notification+0x74>

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8010cfe:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8010d00:	bf00      	nop
}
 8010d02:	3708      	adds	r7, #8
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	200009b8 	.word	0x200009b8
 8010d0c:	200009c0 	.word	0x200009c0

08010d10 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 8010d10:	b480      	push	{r7}
 8010d12:	b083      	sub	sp, #12
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d002      	beq.n	8010d26 <Custom_APP_Notification+0x16>
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d002      	beq.n	8010d2a <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8010d24:	e002      	b.n	8010d2c <Custom_APP_Notification+0x1c>
      break;
 8010d26:	bf00      	nop
 8010d28:	e000      	b.n	8010d2c <Custom_APP_Notification+0x1c>
      break;
 8010d2a:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8010d2c:	bf00      	nop
}
 8010d2e:	370c      	adds	r7, #12
 8010d30:	46bd      	mov	sp, r7
 8010d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d36:	4770      	bx	lr

08010d38 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */
	Custom_App_Context.rep_status = 0;
 8010d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d68 <Custom_APP_Init+0x30>)
 8010d3e:	2200      	movs	r2, #0
 8010d40:	709a      	strb	r2, [r3, #2]
	Custom_App_Context.bras_status = 0;
 8010d42:	4b09      	ldr	r3, [pc, #36]	@ (8010d68 <Custom_APP_Init+0x30>)
 8010d44:	2200      	movs	r2, #0
 8010d46:	70da      	strb	r2, [r3, #3]
		UTIL_SEQ_RegTask(1<<CFG_TASK_ACC_rep_ID, UTIL_SEQ_RFU, Custom_Mvt_rep_Send_Notification);
 8010d48:	4a08      	ldr	r2, [pc, #32]	@ (8010d6c <Custom_APP_Init+0x34>)
 8010d4a:	2100      	movs	r1, #0
 8010d4c:	2004      	movs	r0, #4
 8010d4e:	f001 f939 	bl	8011fc4 <UTIL_SEQ_RegTask>
		UTIL_SEQ_RegTask(1<<CFG_TASK_ACC_bras_ID, UTIL_SEQ_RFU, Custom_Force_Send_Notification);
 8010d52:	4a07      	ldr	r2, [pc, #28]	@ (8010d70 <Custom_APP_Init+0x38>)
 8010d54:	2100      	movs	r1, #0
 8010d56:	2008      	movs	r0, #8
 8010d58:	f001 f934 	bl	8011fc4 <UTIL_SEQ_RegTask>
		Custom_Mvt_rep_Update_Char();
 8010d5c:	f000 f87a 	bl	8010e54 <Custom_Mvt_rep_Update_Char>
		Custom_Force_Update_Char();
 8010d60:	f000 f9e4 	bl	801112c <Custom_Force_Update_Char>

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8010d64:	bf00      	nop
}
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	200009b8 	.word	0x200009b8
 8010d6c:	08010e7d 	.word	0x08010e7d
 8010d70:	08011155 	.word	0x08011155

08010d74 <FSVC_MVT_REF_fin>:

/* USER CODE BEGIN FD */
void FSVC_MVT_REF_fin(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010d78:	2100      	movs	r1, #0
 8010d7a:	2004      	movs	r0, #4
 8010d7c:	f001 f944 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 1;
 8010d80:	4b02      	ldr	r3, [pc, #8]	@ (8010d8c <FSVC_MVT_REF_fin+0x18>)
 8010d82:	2201      	movs	r2, #1
 8010d84:	709a      	strb	r2, [r3, #2]

  return;
 8010d86:	bf00      	nop
}
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	200009b8 	.word	0x200009b8

08010d90 <FSVC_MVT_REF_vide>:
void FSVC_MVT_REF_vide(void)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010d94:	2100      	movs	r1, #0
 8010d96:	2004      	movs	r0, #4
 8010d98:	f001 f936 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 2;
 8010d9c:	4b02      	ldr	r3, [pc, #8]	@ (8010da8 <FSVC_MVT_REF_vide+0x18>)
 8010d9e:	2202      	movs	r2, #2
 8010da0:	709a      	strb	r2, [r3, #2]

  return;
 8010da2:	bf00      	nop
}
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	200009b8 	.word	0x200009b8

08010dac <FSVC_MVT_REF_validation_succes>:
void FSVC_MVT_REF_validation_succes(void)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010db0:	2100      	movs	r1, #0
 8010db2:	2004      	movs	r0, #4
 8010db4:	f001 f928 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 3;
 8010db8:	4b02      	ldr	r3, [pc, #8]	@ (8010dc4 <FSVC_MVT_REF_validation_succes+0x18>)
 8010dba:	2203      	movs	r2, #3
 8010dbc:	709a      	strb	r2, [r3, #2]

  return;
 8010dbe:	bf00      	nop
}
 8010dc0:	bd80      	pop	{r7, pc}
 8010dc2:	bf00      	nop
 8010dc4:	200009b8 	.word	0x200009b8

08010dc8 <FSVC_MVT_REF_validation_fail>:
void FSVC_MVT_REF_validation_fail(void)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010dcc:	2100      	movs	r1, #0
 8010dce:	2004      	movs	r0, #4
 8010dd0:	f001 f91a 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 4;
 8010dd4:	4b02      	ldr	r3, [pc, #8]	@ (8010de0 <FSVC_MVT_REF_validation_fail+0x18>)
 8010dd6:	2204      	movs	r2, #4
 8010dd8:	709a      	strb	r2, [r3, #2]

  return;
 8010dda:	bf00      	nop
}
 8010ddc:	bd80      	pop	{r7, pc}
 8010dde:	bf00      	nop
 8010de0:	200009b8 	.word	0x200009b8

08010de4 <FSVC_MVT_REF_validation_vide>:
void FSVC_MVT_REF_validation_vide(void)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010de8:	2100      	movs	r1, #0
 8010dea:	2004      	movs	r0, #4
 8010dec:	f001 f90c 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 5;
 8010df0:	4b02      	ldr	r3, [pc, #8]	@ (8010dfc <FSVC_MVT_REF_validation_vide+0x18>)
 8010df2:	2205      	movs	r2, #5
 8010df4:	709a      	strb	r2, [r3, #2]

  return;
 8010df6:	bf00      	nop
}
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	200009b8 	.word	0x200009b8

08010e00 <FSVC_MVT_vide>:
void FSVC_MVT_vide(void)
{
 8010e00:	b580      	push	{r7, lr}
 8010e02:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010e04:	2100      	movs	r1, #0
 8010e06:	2004      	movs	r0, #4
 8010e08:	f001 f8fe 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 6;
 8010e0c:	4b02      	ldr	r3, [pc, #8]	@ (8010e18 <FSVC_MVT_vide+0x18>)
 8010e0e:	2206      	movs	r2, #6
 8010e10:	709a      	strb	r2, [r3, #2]

  return;
 8010e12:	bf00      	nop
}
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	200009b8 	.word	0x200009b8

08010e1c <FSVC_MVT_valide>:
void FSVC_MVT_valide(void)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010e20:	2100      	movs	r1, #0
 8010e22:	2004      	movs	r0, #4
 8010e24:	f001 f8f0 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 7;
 8010e28:	4b02      	ldr	r3, [pc, #8]	@ (8010e34 <FSVC_MVT_valide+0x18>)
 8010e2a:	2207      	movs	r2, #7
 8010e2c:	709a      	strb	r2, [r3, #2]

  return;
 8010e2e:	bf00      	nop
}
 8010e30:	bd80      	pop	{r7, pc}
 8010e32:	bf00      	nop
 8010e34:	200009b8 	.word	0x200009b8

08010e38 <FSVC_MVT_non_valide>:
void FSVC_MVT_non_valide(void)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_ACC_rep_ID, CFG_SCH_PRIO_0);
 8010e3c:	2100      	movs	r1, #0
 8010e3e:	2004      	movs	r0, #4
 8010e40:	f001 f8e2 	bl	8012008 <UTIL_SEQ_SetTask>
  Custom_App_Context.rep_status = 8;
 8010e44:	4b02      	ldr	r3, [pc, #8]	@ (8010e50 <FSVC_MVT_non_valide+0x18>)
 8010e46:	2208      	movs	r2, #8
 8010e48:	709a      	strb	r2, [r3, #2]

  return;
 8010e4a:	bf00      	nop
}
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	200009b8 	.word	0x200009b8

08010e54 <Custom_Mvt_rep_Update_Char>:
 *
 *************************************************************/

/* Mvt_def */
void Custom_Mvt_rep_Update_Char(void) /* Property Read */
{
 8010e54:	b580      	push	{r7, lr}
 8010e56:	b082      	sub	sp, #8
 8010e58:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Mvt_rep_UC_1*/

  /* USER CODE END Mvt_rep_UC_1*/

  if (updateflag != 0)
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d004      	beq.n	8010e6e <Custom_Mvt_rep_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)UpdateCharData);
 8010e64:	4904      	ldr	r1, [pc, #16]	@ (8010e78 <Custom_Mvt_rep_Update_Char+0x24>)
 8010e66:	2000      	movs	r0, #0
 8010e68:	f000 fc54 	bl	8011714 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Mvt_rep_UC_Last*/

  /* USER CODE END Mvt_rep_UC_Last*/
  return;
 8010e6c:	bf00      	nop
 8010e6e:	bf00      	nop
}
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	200009c0 	.word	0x200009c0

08010e7c <Custom_Mvt_rep_Send_Notification>:

void Custom_Mvt_rep_Send_Notification(void) /* Property Notification */
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b090      	sub	sp, #64	@ 0x40
 8010e80:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /* USER CODE BEGIN Mvt_rep_NS_1*/
  if (Custom_App_Context.Mvt_rep_Notification_Status == 1)
 8010e88:	4b94      	ldr	r3, [pc, #592]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010e8a:	781b      	ldrb	r3, [r3, #0]
 8010e8c:	2b01      	cmp	r3, #1
 8010e8e:	f040 810a 	bne.w	80110a6 <Custom_Mvt_rep_Send_Notification+0x22a>
  	{
  	  updateflag = 1;
 8010e92:	2301      	movs	r3, #1
 8010e94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  	  if(Custom_App_Context.rep_status == 1)
 8010e98:	4b90      	ldr	r3, [pc, #576]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010e9a:	789b      	ldrb	r3, [r3, #2]
 8010e9c:	2b01      	cmp	r3, #1
 8010e9e:	d11c      	bne.n	8010eda <Custom_Mvt_rep_Send_Notification+0x5e>
  	  {

  		  char rep_ref_fin[] = "finr";
 8010ea0:	4a8f      	ldr	r2, [pc, #572]	@ (80110e0 <Custom_Mvt_rep_Send_Notification+0x264>)
 8010ea2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8010ea6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eaa:	6018      	str	r0, [r3, #0]
 8010eac:	3304      	adds	r3, #4
 8010eae:	7019      	strb	r1, [r3, #0]
  		 		  memcpy(&NotifyCharData[0], &rep_ref_fin, sizeof(rep_ref_fin));
 8010eb0:	4b8c      	ldr	r3, [pc, #560]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010eb2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8010eb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eba:	6018      	str	r0, [r3, #0]
 8010ebc:	3304      	adds	r3, #4
 8010ebe:	7019      	strb	r1, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_fin good \n");
 8010ec0:	4889      	ldr	r0, [pc, #548]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010ec2:	f7fe fe01 	bl	800fac8 <DbgTraceGetFileName>
 8010ec6:	4601      	mov	r1, r0
 8010ec8:	f240 134f 	movw	r3, #335	@ 0x14f
 8010ecc:	4a87      	ldr	r2, [pc, #540]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8010ece:	4888      	ldr	r0, [pc, #544]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 8010ed0:	f001 fa78 	bl	80123c4 <iprintf>
 8010ed4:	4887      	ldr	r0, [pc, #540]	@ (80110f4 <Custom_Mvt_rep_Send_Notification+0x278>)
 8010ed6:	f001 fae5 	bl	80124a4 <puts>
  	  }
  	  if(Custom_App_Context.rep_status == 2)
 8010eda:	4b80      	ldr	r3, [pc, #512]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010edc:	789b      	ldrb	r3, [r3, #2]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	d11c      	bne.n	8010f1c <Custom_Mvt_rep_Send_Notification+0xa0>
  		  {

  			  char rep_ref_vide[] = "refv";
 8010ee2:	4a85      	ldr	r2, [pc, #532]	@ (80110f8 <Custom_Mvt_rep_Send_Notification+0x27c>)
 8010ee4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8010ee8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010eec:	6018      	str	r0, [r3, #0]
 8010eee:	3304      	adds	r3, #4
 8010ef0:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_ref_vide, sizeof(rep_ref_vide));
 8010ef2:	4b7c      	ldr	r3, [pc, #496]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010ef4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010efc:	6018      	str	r0, [r3, #0]
 8010efe:	3304      	adds	r3, #4
 8010f00:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 8010f02:	4879      	ldr	r0, [pc, #484]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010f04:	f7fe fde0 	bl	800fac8 <DbgTraceGetFileName>
 8010f08:	4601      	mov	r1, r0
 8010f0a:	f44f 73ab 	mov.w	r3, #342	@ 0x156
 8010f0e:	4a77      	ldr	r2, [pc, #476]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8010f10:	4877      	ldr	r0, [pc, #476]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 8010f12:	f001 fa57 	bl	80123c4 <iprintf>
 8010f16:	4879      	ldr	r0, [pc, #484]	@ (80110fc <Custom_Mvt_rep_Send_Notification+0x280>)
 8010f18:	f001 fac4 	bl	80124a4 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 3)
 8010f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010f1e:	789b      	ldrb	r3, [r3, #2]
 8010f20:	2b03      	cmp	r3, #3
 8010f22:	d11c      	bne.n	8010f5e <Custom_Mvt_rep_Send_Notification+0xe2>
  		  {

  			  char validation_succes[] = "vals";
 8010f24:	4a76      	ldr	r2, [pc, #472]	@ (8011100 <Custom_Mvt_rep_Send_Notification+0x284>)
 8010f26:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8010f2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f2e:	6018      	str	r0, [r3, #0]
 8010f30:	3304      	adds	r3, #4
 8010f32:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_succes, sizeof(validation_succes));
 8010f34:	4b6b      	ldr	r3, [pc, #428]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010f36:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8010f3a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f3e:	6018      	str	r0, [r3, #0]
 8010f40:	3304      	adds	r3, #4
 8010f42:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 8010f44:	4868      	ldr	r0, [pc, #416]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010f46:	f7fe fdbf 	bl	800fac8 <DbgTraceGetFileName>
 8010f4a:	4601      	mov	r1, r0
 8010f4c:	f240 135d 	movw	r3, #349	@ 0x15d
 8010f50:	4a66      	ldr	r2, [pc, #408]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8010f52:	4867      	ldr	r0, [pc, #412]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 8010f54:	f001 fa36 	bl	80123c4 <iprintf>
 8010f58:	486a      	ldr	r0, [pc, #424]	@ (8011104 <Custom_Mvt_rep_Send_Notification+0x288>)
 8010f5a:	f001 faa3 	bl	80124a4 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 4)
 8010f5e:	4b5f      	ldr	r3, [pc, #380]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010f60:	789b      	ldrb	r3, [r3, #2]
 8010f62:	2b04      	cmp	r3, #4
 8010f64:	d11c      	bne.n	8010fa0 <Custom_Mvt_rep_Send_Notification+0x124>
  		  {

  			  char validation_fail[] = "valf";
 8010f66:	4a68      	ldr	r2, [pc, #416]	@ (8011108 <Custom_Mvt_rep_Send_Notification+0x28c>)
 8010f68:	f107 0320 	add.w	r3, r7, #32
 8010f6c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f70:	6018      	str	r0, [r3, #0]
 8010f72:	3304      	adds	r3, #4
 8010f74:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_fail, sizeof(validation_fail));
 8010f76:	4b5b      	ldr	r3, [pc, #364]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010f78:	f107 0220 	add.w	r2, r7, #32
 8010f7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f80:	6018      	str	r0, [r3, #0]
 8010f82:	3304      	adds	r3, #4
 8010f84:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_fail good \n");
 8010f86:	4858      	ldr	r0, [pc, #352]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010f88:	f7fe fd9e 	bl	800fac8 <DbgTraceGetFileName>
 8010f8c:	4601      	mov	r1, r0
 8010f8e:	f44f 73b2 	mov.w	r3, #356	@ 0x164
 8010f92:	4a56      	ldr	r2, [pc, #344]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8010f94:	4856      	ldr	r0, [pc, #344]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 8010f96:	f001 fa15 	bl	80123c4 <iprintf>
 8010f9a:	485c      	ldr	r0, [pc, #368]	@ (801110c <Custom_Mvt_rep_Send_Notification+0x290>)
 8010f9c:	f001 fa82 	bl	80124a4 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 5)
 8010fa0:	4b4e      	ldr	r3, [pc, #312]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010fa2:	789b      	ldrb	r3, [r3, #2]
 8010fa4:	2b05      	cmp	r3, #5
 8010fa6:	d11c      	bne.n	8010fe2 <Custom_Mvt_rep_Send_Notification+0x166>
  		  {

  			  char validation_vide[] = "valv";
 8010fa8:	4a59      	ldr	r2, [pc, #356]	@ (8011110 <Custom_Mvt_rep_Send_Notification+0x294>)
 8010faa:	f107 0318 	add.w	r3, r7, #24
 8010fae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fb2:	6018      	str	r0, [r3, #0]
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &validation_vide, sizeof(validation_vide));
 8010fb8:	4b4a      	ldr	r3, [pc, #296]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010fba:	f107 0218 	add.w	r2, r7, #24
 8010fbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010fc2:	6018      	str	r0, [r3, #0]
 8010fc4:	3304      	adds	r3, #4
 8010fc6:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_vide good \n");
 8010fc8:	4847      	ldr	r0, [pc, #284]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 8010fca:	f7fe fd7d 	bl	800fac8 <DbgTraceGetFileName>
 8010fce:	4601      	mov	r1, r0
 8010fd0:	f240 136b 	movw	r3, #363	@ 0x16b
 8010fd4:	4a45      	ldr	r2, [pc, #276]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8010fd6:	4846      	ldr	r0, [pc, #280]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 8010fd8:	f001 f9f4 	bl	80123c4 <iprintf>
 8010fdc:	484d      	ldr	r0, [pc, #308]	@ (8011114 <Custom_Mvt_rep_Send_Notification+0x298>)
 8010fde:	f001 fa61 	bl	80124a4 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 6)
 8010fe2:	4b3e      	ldr	r3, [pc, #248]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8010fe4:	789b      	ldrb	r3, [r3, #2]
 8010fe6:	2b06      	cmp	r3, #6
 8010fe8:	d11c      	bne.n	8011024 <Custom_Mvt_rep_Send_Notification+0x1a8>
  		  {

  			  char rep_vide[] = "repv";
 8010fea:	4a4b      	ldr	r2, [pc, #300]	@ (8011118 <Custom_Mvt_rep_Send_Notification+0x29c>)
 8010fec:	f107 0310 	add.w	r3, r7, #16
 8010ff0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ff4:	6018      	str	r0, [r3, #0]
 8010ff6:	3304      	adds	r3, #4
 8010ff8:	7019      	strb	r1, [r3, #0]
  			 		  memcpy(&NotifyCharData[0], &rep_vide, sizeof(rep_vide));
 8010ffa:	4b3a      	ldr	r3, [pc, #232]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 8010ffc:	f107 0210 	add.w	r2, r7, #16
 8011000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011004:	6018      	str	r0, [r3, #0]
 8011006:	3304      	adds	r3, #4
 8011008:	7019      	strb	r1, [r3, #0]
  			 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_vide good \n");
 801100a:	4837      	ldr	r0, [pc, #220]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 801100c:	f7fe fd5c 	bl	800fac8 <DbgTraceGetFileName>
 8011010:	4601      	mov	r1, r0
 8011012:	f44f 73b9 	mov.w	r3, #370	@ 0x172
 8011016:	4a35      	ldr	r2, [pc, #212]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8011018:	4835      	ldr	r0, [pc, #212]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 801101a:	f001 f9d3 	bl	80123c4 <iprintf>
 801101e:	483f      	ldr	r0, [pc, #252]	@ (801111c <Custom_Mvt_rep_Send_Notification+0x2a0>)
 8011020:	f001 fa40 	bl	80124a4 <puts>
  		  }
  	  if(Custom_App_Context.rep_status == 7)
 8011024:	4b2d      	ldr	r3, [pc, #180]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8011026:	789b      	ldrb	r3, [r3, #2]
 8011028:	2b07      	cmp	r3, #7
 801102a:	d11c      	bne.n	8011066 <Custom_Mvt_rep_Send_Notification+0x1ea>
  			  {

  				  char rep_valide[] = "ahah";
 801102c:	4a3c      	ldr	r2, [pc, #240]	@ (8011120 <Custom_Mvt_rep_Send_Notification+0x2a4>)
 801102e:	f107 0308 	add.w	r3, r7, #8
 8011032:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011036:	6018      	str	r0, [r3, #0]
 8011038:	3304      	adds	r3, #4
 801103a:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_valide, sizeof(rep_valide));
 801103c:	4b29      	ldr	r3, [pc, #164]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 801103e:	f107 0208 	add.w	r2, r7, #8
 8011042:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011046:	6018      	str	r0, [r3, #0]
 8011048:	3304      	adds	r3, #4
 801104a:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT rep_ref_vide good \n");
 801104c:	4826      	ldr	r0, [pc, #152]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 801104e:	f7fe fd3b 	bl	800fac8 <DbgTraceGetFileName>
 8011052:	4601      	mov	r1, r0
 8011054:	f240 1379 	movw	r3, #377	@ 0x179
 8011058:	4a24      	ldr	r2, [pc, #144]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 801105a:	4825      	ldr	r0, [pc, #148]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 801105c:	f001 f9b2 	bl	80123c4 <iprintf>
 8011060:	4826      	ldr	r0, [pc, #152]	@ (80110fc <Custom_Mvt_rep_Send_Notification+0x280>)
 8011062:	f001 fa1f 	bl	80124a4 <puts>
  			  }
  		  if(Custom_App_Context.rep_status == 8)
 8011066:	4b1d      	ldr	r3, [pc, #116]	@ (80110dc <Custom_Mvt_rep_Send_Notification+0x260>)
 8011068:	789b      	ldrb	r3, [r3, #2]
 801106a:	2b08      	cmp	r3, #8
 801106c:	d128      	bne.n	80110c0 <Custom_Mvt_rep_Send_Notification+0x244>
  			  {

  				  char rep_non_valide[] = "ihih";
 801106e:	4a2d      	ldr	r2, [pc, #180]	@ (8011124 <Custom_Mvt_rep_Send_Notification+0x2a8>)
 8011070:	463b      	mov	r3, r7
 8011072:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011076:	6018      	str	r0, [r3, #0]
 8011078:	3304      	adds	r3, #4
 801107a:	7019      	strb	r1, [r3, #0]
  				 		  memcpy(&NotifyCharData[0], &rep_non_valide, sizeof(rep_non_valide));
 801107c:	4b19      	ldr	r3, [pc, #100]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 801107e:	463a      	mov	r2, r7
 8011080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011084:	6018      	str	r0, [r3, #0]
 8011086:	3304      	adds	r3, #4
 8011088:	7019      	strb	r1, [r3, #0]
  				 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT validation_succes good \n");
 801108a:	4817      	ldr	r0, [pc, #92]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 801108c:	f7fe fd1c 	bl	800fac8 <DbgTraceGetFileName>
 8011090:	4601      	mov	r1, r0
 8011092:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8011096:	4a15      	ldr	r2, [pc, #84]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 8011098:	4815      	ldr	r0, [pc, #84]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 801109a:	f001 f993 	bl	80123c4 <iprintf>
 801109e:	4819      	ldr	r0, [pc, #100]	@ (8011104 <Custom_Mvt_rep_Send_Notification+0x288>)
 80110a0:	f001 fa00 	bl	80124a4 <puts>
 80110a4:	e00c      	b.n	80110c0 <Custom_Mvt_rep_Send_Notification+0x244>
  			  }
  	}
	else
	{
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 80110a6:	4810      	ldr	r0, [pc, #64]	@ (80110e8 <Custom_Mvt_rep_Send_Notification+0x26c>)
 80110a8:	f7fe fd0e 	bl	800fac8 <DbgTraceGetFileName>
 80110ac:	4601      	mov	r1, r0
 80110ae:	f240 1385 	movw	r3, #389	@ 0x185
 80110b2:	4a0e      	ldr	r2, [pc, #56]	@ (80110ec <Custom_Mvt_rep_Send_Notification+0x270>)
 80110b4:	480e      	ldr	r0, [pc, #56]	@ (80110f0 <Custom_Mvt_rep_Send_Notification+0x274>)
 80110b6:	f001 f985 	bl	80123c4 <iprintf>
 80110ba:	481b      	ldr	r0, [pc, #108]	@ (8011128 <Custom_Mvt_rep_Send_Notification+0x2ac>)
 80110bc:	f001 f9f2 	bl	80124a4 <puts>
	}
  /* USER CODE END Mvt_rep_NS_1*/

  if (updateflag != 0)
 80110c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d004      	beq.n	80110d2 <Custom_Mvt_rep_Send_Notification+0x256>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_MVT_REP, (uint8_t *)NotifyCharData);
 80110c8:	4906      	ldr	r1, [pc, #24]	@ (80110e4 <Custom_Mvt_rep_Send_Notification+0x268>)
 80110ca:	2000      	movs	r0, #0
 80110cc:	f000 fb22 	bl	8011714 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Mvt_rep_NS_Last*/

  /* USER CODE END Mvt_rep_NS_Last*/

  return;
 80110d0:	bf00      	nop
 80110d2:	bf00      	nop
}
 80110d4:	3740      	adds	r7, #64	@ 0x40
 80110d6:	46bd      	mov	sp, r7
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	200009b8 	.word	0x200009b8
 80110e0:	080148fc 	.word	0x080148fc
 80110e4:	20000ab8 	.word	0x20000ab8
 80110e8:	080146ec 	.word	0x080146ec
 80110ec:	0801506c 	.word	0x0801506c
 80110f0:	0801470c 	.word	0x0801470c
 80110f4:	08014720 	.word	0x08014720
 80110f8:	08014904 	.word	0x08014904
 80110fc:	08014760 	.word	0x08014760
 8011100:	0801490c 	.word	0x0801490c
 8011104:	080147a4 	.word	0x080147a4
 8011108:	08014914 	.word	0x08014914
 801110c:	080147ec 	.word	0x080147ec
 8011110:	0801491c 	.word	0x0801491c
 8011114:	08014830 	.word	0x08014830
 8011118:	08014924 	.word	0x08014924
 801111c:	08014874 	.word	0x08014874
 8011120:	0801492c 	.word	0x0801492c
 8011124:	08014934 	.word	0x08014934
 8011128:	080148b4 	.word	0x080148b4

0801112c <Custom_Force_Update_Char>:

void Custom_Force_Update_Char(void) /* Property Read */
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 8011132:	2300      	movs	r3, #0
 8011134:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN Force_UC_1*/

  /* USER CODE END Force_UC_1*/

  if (updateflag != 0)
 8011136:	79fb      	ldrb	r3, [r7, #7]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d004      	beq.n	8011146 <Custom_Force_Update_Char+0x1a>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_FORCE, (uint8_t *)UpdateCharData);
 801113c:	4904      	ldr	r1, [pc, #16]	@ (8011150 <Custom_Force_Update_Char+0x24>)
 801113e:	2002      	movs	r0, #2
 8011140:	f000 fae8 	bl	8011714 <Custom_STM_App_Update_Char>
  }

  /* USER CODE BEGIN Force_UC_Last*/

  /* USER CODE END Force_UC_Last*/
  return;
 8011144:	bf00      	nop
 8011146:	bf00      	nop
}
 8011148:	3708      	adds	r7, #8
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	200009c0 	.word	0x200009c0

08011154 <Custom_Force_Send_Notification>:

void Custom_Force_Send_Notification(void) /* Property Notification */
{
 8011154:	b580      	push	{r7, lr}
 8011156:	b084      	sub	sp, #16
 8011158:	af00      	add	r7, sp, #0
  uint8_t updateflag = 0;
 801115a:	2300      	movs	r3, #0
 801115c:	73fb      	strb	r3, [r7, #15]

  /* USER CODE BEGIN Force_NS_1*/
  if (Custom_App_Context.Force_Notification_Status == 1)
 801115e:	4b31      	ldr	r3, [pc, #196]	@ (8011224 <Custom_Force_Send_Notification+0xd0>)
 8011160:	785b      	ldrb	r3, [r3, #1]
 8011162:	2b01      	cmp	r3, #1
 8011164:	d144      	bne.n	80111f0 <Custom_Force_Send_Notification+0x9c>
  	{
  	  updateflag = 1;
 8011166:	2301      	movs	r3, #1
 8011168:	73fb      	strb	r3, [r7, #15]

  	  if(Custom_App_Context.bras_status == 1)
 801116a:	4b2e      	ldr	r3, [pc, #184]	@ (8011224 <Custom_Force_Send_Notification+0xd0>)
 801116c:	78db      	ldrb	r3, [r3, #3]
 801116e:	2b01      	cmp	r3, #1
 8011170:	d111      	bne.n	8011196 <Custom_Force_Send_Notification+0x42>
  	  {

  		  char bras_droit[] = "1";
 8011172:	2331      	movs	r3, #49	@ 0x31
 8011174:	81bb      	strh	r3, [r7, #12]
  		 		  memcpy(&NotifyCharData[0], &bras_droit, sizeof(bras_droit));
 8011176:	89ba      	ldrh	r2, [r7, #12]
 8011178:	4b2b      	ldr	r3, [pc, #172]	@ (8011228 <Custom_Force_Send_Notification+0xd4>)
 801117a:	801a      	strh	r2, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_droit good \n");
 801117c:	482b      	ldr	r0, [pc, #172]	@ (801122c <Custom_Force_Send_Notification+0xd8>)
 801117e:	f7fe fca3 	bl	800fac8 <DbgTraceGetFileName>
 8011182:	4601      	mov	r1, r0
 8011184:	f44f 73db 	mov.w	r3, #438	@ 0x1b6
 8011188:	4a29      	ldr	r2, [pc, #164]	@ (8011230 <Custom_Force_Send_Notification+0xdc>)
 801118a:	482a      	ldr	r0, [pc, #168]	@ (8011234 <Custom_Force_Send_Notification+0xe0>)
 801118c:	f001 f91a 	bl	80123c4 <iprintf>
 8011190:	4829      	ldr	r0, [pc, #164]	@ (8011238 <Custom_Force_Send_Notification+0xe4>)
 8011192:	f001 f987 	bl	80124a4 <puts>
  	  }
  	  if(Custom_App_Context.bras_status == 2)
 8011196:	4b23      	ldr	r3, [pc, #140]	@ (8011224 <Custom_Force_Send_Notification+0xd0>)
 8011198:	78db      	ldrb	r3, [r3, #3]
 801119a:	2b02      	cmp	r3, #2
 801119c:	d111      	bne.n	80111c2 <Custom_Force_Send_Notification+0x6e>
  	  {

  		  char bras_gauche[] = "2";
 801119e:	2332      	movs	r3, #50	@ 0x32
 80111a0:	813b      	strh	r3, [r7, #8]
  		 		  memcpy(&NotifyCharData[0], &bras_gauche, sizeof(bras_gauche));
 80111a2:	893a      	ldrh	r2, [r7, #8]
 80111a4:	4b20      	ldr	r3, [pc, #128]	@ (8011228 <Custom_Force_Send_Notification+0xd4>)
 80111a6:	801a      	strh	r2, [r3, #0]
  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_gauche good \n");
 80111a8:	4820      	ldr	r0, [pc, #128]	@ (801122c <Custom_Force_Send_Notification+0xd8>)
 80111aa:	f7fe fc8d 	bl	800fac8 <DbgTraceGetFileName>
 80111ae:	4601      	mov	r1, r0
 80111b0:	f240 13bd 	movw	r3, #445	@ 0x1bd
 80111b4:	4a1e      	ldr	r2, [pc, #120]	@ (8011230 <Custom_Force_Send_Notification+0xdc>)
 80111b6:	481f      	ldr	r0, [pc, #124]	@ (8011234 <Custom_Force_Send_Notification+0xe0>)
 80111b8:	f001 f904 	bl	80123c4 <iprintf>
 80111bc:	481f      	ldr	r0, [pc, #124]	@ (801123c <Custom_Force_Send_Notification+0xe8>)
 80111be:	f001 f971 	bl	80124a4 <puts>
  	  }
  	if(Custom_App_Context.bras_status == 3)
 80111c2:	4b18      	ldr	r3, [pc, #96]	@ (8011224 <Custom_Force_Send_Notification+0xd0>)
 80111c4:	78db      	ldrb	r3, [r3, #3]
 80111c6:	2b03      	cmp	r3, #3
 80111c8:	d11f      	bne.n	801120a <Custom_Force_Send_Notification+0xb6>
  	  	  {

  	  		  char bras_correct[] = "3";
 80111ca:	2333      	movs	r3, #51	@ 0x33
 80111cc:	80bb      	strh	r3, [r7, #4]
  	  		 		  memcpy(&NotifyCharData[0], &bras_correct, sizeof(bras_correct));
 80111ce:	88ba      	ldrh	r2, [r7, #4]
 80111d0:	4b15      	ldr	r3, [pc, #84]	@ (8011228 <Custom_Force_Send_Notification+0xd4>)
 80111d2:	801a      	strh	r2, [r3, #0]
  	  		 		  APP_DBG_MSG("-- CUSTOM APPLICATION SERVER  : INFORM CLIENT bras_correct good \n");
 80111d4:	4815      	ldr	r0, [pc, #84]	@ (801122c <Custom_Force_Send_Notification+0xd8>)
 80111d6:	f7fe fc77 	bl	800fac8 <DbgTraceGetFileName>
 80111da:	4601      	mov	r1, r0
 80111dc:	f44f 73e2 	mov.w	r3, #452	@ 0x1c4
 80111e0:	4a13      	ldr	r2, [pc, #76]	@ (8011230 <Custom_Force_Send_Notification+0xdc>)
 80111e2:	4814      	ldr	r0, [pc, #80]	@ (8011234 <Custom_Force_Send_Notification+0xe0>)
 80111e4:	f001 f8ee 	bl	80123c4 <iprintf>
 80111e8:	4815      	ldr	r0, [pc, #84]	@ (8011240 <Custom_Force_Send_Notification+0xec>)
 80111ea:	f001 f95b 	bl	80124a4 <puts>
 80111ee:	e00c      	b.n	801120a <Custom_Force_Send_Notification+0xb6>


  	}
	else
	{
	  APP_DBG_MSG("-- CUSTOM APPLICATION : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n");
 80111f0:	480e      	ldr	r0, [pc, #56]	@ (801122c <Custom_Force_Send_Notification+0xd8>)
 80111f2:	f7fe fc69 	bl	800fac8 <DbgTraceGetFileName>
 80111f6:	4601      	mov	r1, r0
 80111f8:	f240 13cb 	movw	r3, #459	@ 0x1cb
 80111fc:	4a0c      	ldr	r2, [pc, #48]	@ (8011230 <Custom_Force_Send_Notification+0xdc>)
 80111fe:	480d      	ldr	r0, [pc, #52]	@ (8011234 <Custom_Force_Send_Notification+0xe0>)
 8011200:	f001 f8e0 	bl	80123c4 <iprintf>
 8011204:	480f      	ldr	r0, [pc, #60]	@ (8011244 <Custom_Force_Send_Notification+0xf0>)
 8011206:	f001 f94d 	bl	80124a4 <puts>
	}
  /* USER CODE END Force_NS_1*/

  if (updateflag != 0)
 801120a:	7bfb      	ldrb	r3, [r7, #15]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d004      	beq.n	801121a <Custom_Force_Send_Notification+0xc6>
  {
    Custom_STM_App_Update_Char(CUSTOM_STM_FORCE, (uint8_t *)NotifyCharData);
 8011210:	4905      	ldr	r1, [pc, #20]	@ (8011228 <Custom_Force_Send_Notification+0xd4>)
 8011212:	2002      	movs	r0, #2
 8011214:	f000 fa7e 	bl	8011714 <Custom_STM_App_Update_Char>

  /* USER CODE BEGIN Force_NS_Last*/

  /* USER CODE END Force_NS_Last*/

  return;
 8011218:	bf00      	nop
 801121a:	bf00      	nop
}
 801121c:	3710      	adds	r7, #16
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}
 8011222:	bf00      	nop
 8011224:	200009b8 	.word	0x200009b8
 8011228:	20000ab8 	.word	0x20000ab8
 801122c:	080146ec 	.word	0x080146ec
 8011230:	08015090 	.word	0x08015090
 8011234:	0801470c 	.word	0x0801470c
 8011238:	0801493c 	.word	0x0801493c
 801123c:	0801497c 	.word	0x0801497c
 8011240:	080149bc 	.word	0x080149bc
 8011244:	080148b4 	.word	0x080148b4

08011248 <Custom_Appli_Update_Char>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void Custom_Appli_Update_Char()/* Property writed */
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
	Custom_STM_App_Update_Char(CUSTOM_STM_APPEL_APP, (uint8_t *)UpdateCharData);
 801124c:	4902      	ldr	r1, [pc, #8]	@ (8011258 <Custom_Appli_Update_Char+0x10>)
 801124e:	2001      	movs	r0, #1
 8011250:	f000 fa60 	bl	8011714 <Custom_STM_App_Update_Char>
	  return;
 8011254:	bf00      	nop
}
 8011256:	bd80      	pop	{r7, pc}
 8011258:	200009c0 	.word	0x200009c0

0801125c <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	b08c      	sub	sp, #48	@ 0x30
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 8011264:	2300      	movs	r3, #0
 8011266:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	3301      	adds	r3, #1
 801126e:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8011270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011272:	781b      	ldrb	r3, [r3, #0]
 8011274:	2bff      	cmp	r3, #255	@ 0xff
 8011276:	f040 80be 	bne.w	80113f6 <Custom_STM_Event_Handler+0x19a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 801127a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801127c:	3302      	adds	r3, #2
 801127e:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8011280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011282:	881b      	ldrh	r3, [r3, #0]
 8011284:	b29b      	uxth	r3, r3
 8011286:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801128a:	2b1a      	cmp	r3, #26
 801128c:	f200 80af 	bhi.w	80113ee <Custom_STM_Event_Handler+0x192>
 8011290:	a201      	add	r2, pc, #4	@ (adr r2, 8011298 <Custom_STM_Event_Handler+0x3c>)
 8011292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011296:	bf00      	nop
 8011298:	08011305 	.word	0x08011305
 801129c:	080113ef 	.word	0x080113ef
 80112a0:	080113ef 	.word	0x080113ef
 80112a4:	080113ef 	.word	0x080113ef
 80112a8:	080113ef 	.word	0x080113ef
 80112ac:	080113ef 	.word	0x080113ef
 80112b0:	080113ef 	.word	0x080113ef
 80112b4:	080113ef 	.word	0x080113ef
 80112b8:	080113ef 	.word	0x080113ef
 80112bc:	080113ef 	.word	0x080113ef
 80112c0:	080113ef 	.word	0x080113ef
 80112c4:	080113ef 	.word	0x080113ef
 80112c8:	080113ef 	.word	0x080113ef
 80112cc:	080113ef 	.word	0x080113ef
 80112d0:	080113ef 	.word	0x080113ef
 80112d4:	080113ef 	.word	0x080113ef
 80112d8:	080113ef 	.word	0x080113ef
 80112dc:	080113ef 	.word	0x080113ef
 80112e0:	080113ef 	.word	0x080113ef
 80112e4:	080113ef 	.word	0x080113ef
 80112e8:	080113ef 	.word	0x080113ef
 80112ec:	080113ef 	.word	0x080113ef
 80112f0:	080113ef 	.word	0x080113ef
 80112f4:	080113ef 	.word	0x080113ef
 80112f8:	080113ef 	.word	0x080113ef
 80112fc:	080113ef 	.word	0x080113ef
 8011300:	080113d1 	.word	0x080113d1
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8011304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011306:	3302      	adds	r3, #2
 8011308:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801130a:	69fb      	ldr	r3, [r7, #28]
 801130c:	885b      	ldrh	r3, [r3, #2]
 801130e:	b29b      	uxth	r3, r3
 8011310:	461a      	mov	r2, r3
 8011312:	4b3c      	ldr	r3, [pc, #240]	@ (8011404 <Custom_STM_Event_Handler+0x1a8>)
 8011314:	885b      	ldrh	r3, [r3, #2]
 8011316:	3302      	adds	r3, #2
 8011318:	429a      	cmp	r2, r3
 801131a:	d119      	bne.n	8011350 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801131c:	2301      	movs	r3, #1
 801131e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	7a1b      	ldrb	r3, [r3, #8]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d002      	beq.n	8011330 <Custom_STM_Event_Handler+0xd4>
 801132a:	2b01      	cmp	r3, #1
 801132c:	d008      	beq.n	8011340 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 801132e:	e04e      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_DISABLED_EVT;
 8011330:	2301      	movs	r3, #1
 8011332:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011334:	f107 0308 	add.w	r3, r7, #8
 8011338:	4618      	mov	r0, r3
 801133a:	f7ff fca7 	bl	8010c8c <Custom_STM_App_Notification>
                break;
 801133e:	e046      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_MVT_REP_NOTIFY_ENABLED_EVT;
 8011340:	2300      	movs	r3, #0
 8011342:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011344:	f107 0308 	add.w	r3, r7, #8
 8011348:	4618      	mov	r0, r3
 801134a:	f7ff fc9f 	bl	8010c8c <Custom_STM_App_Notification>
                break;
 801134e:	e03e      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomMvt_RepHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomForceHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	885b      	ldrh	r3, [r3, #2]
 8011354:	b29b      	uxth	r3, r3
 8011356:	461a      	mov	r2, r3
 8011358:	4b2a      	ldr	r3, [pc, #168]	@ (8011404 <Custom_STM_Event_Handler+0x1a8>)
 801135a:	88db      	ldrh	r3, [r3, #6]
 801135c:	3302      	adds	r3, #2
 801135e:	429a      	cmp	r2, r3
 8011360:	d119      	bne.n	8011396 <Custom_STM_Event_Handler+0x13a>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011362:	2301      	movs	r3, #1
 8011364:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_3 */
            switch (attribute_modified->Attr_Data[0])
 8011368:	69fb      	ldr	r3, [r7, #28]
 801136a:	7a1b      	ldrb	r3, [r3, #8]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d002      	beq.n	8011376 <Custom_STM_Event_Handler+0x11a>
 8011370:	2b01      	cmp	r3, #1
 8011372:	d008      	beq.n	8011386 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_3_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_3_default */
              break;
 8011374:	e02b      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_FORCE_NOTIFY_DISABLED_EVT;
 8011376:	2305      	movs	r3, #5
 8011378:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801137a:	f107 0308 	add.w	r3, r7, #8
 801137e:	4618      	mov	r0, r3
 8011380:	f7ff fc84 	bl	8010c8c <Custom_STM_App_Notification>
                break;
 8011384:	e023      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_FORCE_NOTIFY_ENABLED_EVT;
 8011386:	2304      	movs	r3, #4
 8011388:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801138a:	f107 0308 	add.w	r3, r7, #8
 801138e:	4618      	mov	r0, r3
 8011390:	f7ff fc7c 	bl	8010c8c <Custom_STM_App_Notification>
                break;
 8011394:	e01b      	b.n	80113ce <Custom_STM_Event_Handler+0x172>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomForceHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))
 8011396:	69fb      	ldr	r3, [r7, #28]
 8011398:	885b      	ldrh	r3, [r3, #2]
 801139a:	b29b      	uxth	r3, r3
 801139c:	461a      	mov	r2, r3
 801139e:	4b19      	ldr	r3, [pc, #100]	@ (8011404 <Custom_STM_Event_Handler+0x1a8>)
 80113a0:	889b      	ldrh	r3, [r3, #4]
 80113a2:	3301      	adds	r3, #1
 80113a4:	429a      	cmp	r2, r3
 80113a6:	d124      	bne.n	80113f2 <Custom_STM_Event_Handler+0x196>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80113a8:	2301      	movs	r3, #1
 80113aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
            Notification.Custom_Evt_Opcode = CUSTOM_STM_APPEL_APP_WRITE_NO_RESP_EVT;
 80113ae:	2303      	movs	r3, #3
 80113b0:	723b      	strb	r3, [r7, #8]
			Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	88db      	ldrh	r3, [r3, #6]
 80113b6:	b29b      	uxth	r3, r3
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	743b      	strb	r3, [r7, #16]
			Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 80113bc:	69fb      	ldr	r3, [r7, #28]
 80113be:	3308      	adds	r3, #8
 80113c0:	60fb      	str	r3, [r7, #12]
			Custom_STM_App_Notification(&Notification);
 80113c2:	f107 0308 	add.w	r3, r7, #8
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7ff fc60 	bl	8010c8c <Custom_STM_App_Notification>
            /* USER CODE END CUSTOM_STM_Service_1_Char_2_ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE */
          } /* if (attribute_modified->Attr_Handle == (CustomContext.CustomAppel_AppHdle + CHARACTERISTIC_VALUE_ATTRIBUTE_OFFSET))*/
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 80113cc:	e011      	b.n	80113f2 <Custom_STM_Event_Handler+0x196>
 80113ce:	e010      	b.n	80113f2 <Custom_STM_Event_Handler+0x196>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 80113d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113d2:	3302      	adds	r3, #2
 80113d4:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 80113d6:	2306      	movs	r3, #6
 80113d8:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 80113da:	6a3b      	ldr	r3, [r7, #32]
 80113dc:	881b      	ldrh	r3, [r3, #0]
 80113de:	b29b      	uxth	r3, r3
 80113e0:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 80113e2:	f107 0308 	add.w	r3, r7, #8
 80113e6:	4618      	mov	r0, r3
 80113e8:	f7ff fc50 	bl	8010c8c <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 80113ec:	e002      	b.n	80113f4 <Custom_STM_Event_Handler+0x198>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 80113ee:	bf00      	nop
 80113f0:	e002      	b.n	80113f8 <Custom_STM_Event_Handler+0x19c>
          break;
 80113f2:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80113f4:	e000      	b.n	80113f8 <Custom_STM_Event_Handler+0x19c>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80113f6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80113f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80113fc:	4618      	mov	r0, r3
 80113fe:	3730      	adds	r7, #48	@ 0x30
 8011400:	46bd      	mov	sp, r7
 8011402:	bd80      	pop	{r7, pc}
 8011404:	20000bb0 	.word	0x20000bb0

08011408 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b08c      	sub	sp, #48	@ 0x30
 801140c:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801140e:	2392      	movs	r3, #146	@ 0x92
 8011410:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8011412:	48ad      	ldr	r0, [pc, #692]	@ (80116c8 <SVCCTL_InitCustomSvc+0x2c0>)
 8011414:	f7fd fcdc 	bl	800edd0 <SVCCTL_RegisterSvcHandler>
   *                              = 9
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 9;
 8011418:	2309      	movs	r3, #9
 801141a:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_MVT_DEF_UUID(uuid.Char_UUID_128);
 801141c:	238f      	movs	r3, #143	@ 0x8f
 801141e:	713b      	strb	r3, [r7, #4]
 8011420:	23e5      	movs	r3, #229	@ 0xe5
 8011422:	717b      	strb	r3, [r7, #5]
 8011424:	23b3      	movs	r3, #179	@ 0xb3
 8011426:	71bb      	strb	r3, [r7, #6]
 8011428:	23d5      	movs	r3, #213	@ 0xd5
 801142a:	71fb      	strb	r3, [r7, #7]
 801142c:	232e      	movs	r3, #46	@ 0x2e
 801142e:	723b      	strb	r3, [r7, #8]
 8011430:	237f      	movs	r3, #127	@ 0x7f
 8011432:	727b      	strb	r3, [r7, #9]
 8011434:	234a      	movs	r3, #74	@ 0x4a
 8011436:	72bb      	strb	r3, [r7, #10]
 8011438:	2398      	movs	r3, #152	@ 0x98
 801143a:	72fb      	strb	r3, [r7, #11]
 801143c:	232a      	movs	r3, #42	@ 0x2a
 801143e:	733b      	strb	r3, [r7, #12]
 8011440:	2348      	movs	r3, #72	@ 0x48
 8011442:	737b      	strb	r3, [r7, #13]
 8011444:	237a      	movs	r3, #122	@ 0x7a
 8011446:	73bb      	strb	r3, [r7, #14]
 8011448:	23cc      	movs	r3, #204	@ 0xcc
 801144a:	73fb      	strb	r3, [r7, #15]
 801144c:	2300      	movs	r3, #0
 801144e:	743b      	strb	r3, [r7, #16]
 8011450:	2300      	movs	r3, #0
 8011452:	747b      	strb	r3, [r7, #17]
 8011454:	2300      	movs	r3, #0
 8011456:	74bb      	strb	r3, [r7, #18]
 8011458:	2300      	movs	r3, #0
 801145a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801145c:	7dbb      	ldrb	r3, [r7, #22]
 801145e:	1d39      	adds	r1, r7, #4
 8011460:	4a9a      	ldr	r2, [pc, #616]	@ (80116cc <SVCCTL_InitCustomSvc+0x2c4>)
 8011462:	9200      	str	r2, [sp, #0]
 8011464:	2201      	movs	r2, #1
 8011466:	2002      	movs	r0, #2
 8011468:	f7fc ff25 	bl	800e2b6 <aci_gatt_add_service>
 801146c:	4603      	mov	r3, r0
 801146e:	75fb      	strb	r3, [r7, #23]
                             (Service_UUID_t *) &uuid,
                             PRIMARY_SERVICE,
                             max_attr_record,
                             &(CustomContext.CustomMvt_DefHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011470:	7dfb      	ldrb	r3, [r7, #23]
 8011472:	2b00      	cmp	r3, #0
 8011474:	d00f      	beq.n	8011496 <SVCCTL_InitCustomSvc+0x8e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_service command: mvt_def, error code: 0x%x \n\r", ret);
 8011476:	4896      	ldr	r0, [pc, #600]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 8011478:	f7fe fb26 	bl	800fac8 <DbgTraceGetFileName>
 801147c:	4601      	mov	r1, r0
 801147e:	f240 1371 	movw	r3, #369	@ 0x171
 8011482:	4a94      	ldr	r2, [pc, #592]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 8011484:	4894      	ldr	r0, [pc, #592]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 8011486:	f000 ff9d 	bl	80123c4 <iprintf>
 801148a:	7dfb      	ldrb	r3, [r7, #23]
 801148c:	4619      	mov	r1, r3
 801148e:	4893      	ldr	r0, [pc, #588]	@ (80116dc <SVCCTL_InitCustomSvc+0x2d4>)
 8011490:	f000 ff98 	bl	80123c4 <iprintf>
 8011494:	e00c      	b.n	80114b0 <SVCCTL_InitCustomSvc+0xa8>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_service command: mvt_def \n\r");
 8011496:	488e      	ldr	r0, [pc, #568]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 8011498:	f7fe fb16 	bl	800fac8 <DbgTraceGetFileName>
 801149c:	4601      	mov	r1, r0
 801149e:	f240 1375 	movw	r3, #373	@ 0x175
 80114a2:	4a8c      	ldr	r2, [pc, #560]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 80114a4:	488c      	ldr	r0, [pc, #560]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 80114a6:	f000 ff8d 	bl	80123c4 <iprintf>
 80114aa:	488d      	ldr	r0, [pc, #564]	@ (80116e0 <SVCCTL_InitCustomSvc+0x2d8>)
 80114ac:	f000 ff8a 	bl	80123c4 <iprintf>
  }

  /**
   *  Mvt_rep
   */
  COPY_MVT_REP_UUID(uuid.Char_UUID_128);
 80114b0:	2319      	movs	r3, #25
 80114b2:	713b      	strb	r3, [r7, #4]
 80114b4:	23ed      	movs	r3, #237	@ 0xed
 80114b6:	717b      	strb	r3, [r7, #5]
 80114b8:	2382      	movs	r3, #130	@ 0x82
 80114ba:	71bb      	strb	r3, [r7, #6]
 80114bc:	23ae      	movs	r3, #174	@ 0xae
 80114be:	71fb      	strb	r3, [r7, #7]
 80114c0:	23ed      	movs	r3, #237	@ 0xed
 80114c2:	723b      	strb	r3, [r7, #8]
 80114c4:	2321      	movs	r3, #33	@ 0x21
 80114c6:	727b      	strb	r3, [r7, #9]
 80114c8:	234c      	movs	r3, #76	@ 0x4c
 80114ca:	72bb      	strb	r3, [r7, #10]
 80114cc:	239d      	movs	r3, #157	@ 0x9d
 80114ce:	72fb      	strb	r3, [r7, #11]
 80114d0:	2341      	movs	r3, #65	@ 0x41
 80114d2:	733b      	strb	r3, [r7, #12]
 80114d4:	2345      	movs	r3, #69	@ 0x45
 80114d6:	737b      	strb	r3, [r7, #13]
 80114d8:	2322      	movs	r3, #34	@ 0x22
 80114da:	73bb      	strb	r3, [r7, #14]
 80114dc:	238e      	movs	r3, #142	@ 0x8e
 80114de:	73fb      	strb	r3, [r7, #15]
 80114e0:	23cd      	movs	r3, #205	@ 0xcd
 80114e2:	743b      	strb	r3, [r7, #16]
 80114e4:	23ab      	movs	r3, #171	@ 0xab
 80114e6:	747b      	strb	r3, [r7, #17]
 80114e8:	2300      	movs	r3, #0
 80114ea:	74bb      	strb	r3, [r7, #18]
 80114ec:	2300      	movs	r3, #0
 80114ee:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 80114f0:	4b76      	ldr	r3, [pc, #472]	@ (80116cc <SVCCTL_InitCustomSvc+0x2c4>)
 80114f2:	8818      	ldrh	r0, [r3, #0]
 80114f4:	4b7b      	ldr	r3, [pc, #492]	@ (80116e4 <SVCCTL_InitCustomSvc+0x2dc>)
 80114f6:	781b      	ldrb	r3, [r3, #0]
 80114f8:	4619      	mov	r1, r3
 80114fa:	1d3a      	adds	r2, r7, #4
 80114fc:	4b7a      	ldr	r3, [pc, #488]	@ (80116e8 <SVCCTL_InitCustomSvc+0x2e0>)
 80114fe:	9305      	str	r3, [sp, #20]
 8011500:	2301      	movs	r3, #1
 8011502:	9304      	str	r3, [sp, #16]
 8011504:	2310      	movs	r3, #16
 8011506:	9303      	str	r3, [sp, #12]
 8011508:	2301      	movs	r3, #1
 801150a:	9302      	str	r3, [sp, #8]
 801150c:	2300      	movs	r3, #0
 801150e:	9301      	str	r3, [sp, #4]
 8011510:	2310      	movs	r3, #16
 8011512:	9300      	str	r3, [sp, #0]
 8011514:	460b      	mov	r3, r1
 8011516:	2102      	movs	r1, #2
 8011518:	f7fc ffa3 	bl	800e462 <aci_gatt_add_char>
 801151c:	4603      	mov	r3, r0
 801151e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomMvt_RepHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011520:	7dfb      	ldrb	r3, [r7, #23]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d00f      	beq.n	8011546 <SVCCTL_InitCustomSvc+0x13e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : MVT_REP, error code: 0x%x \n\r", ret);
 8011526:	486a      	ldr	r0, [pc, #424]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 8011528:	f7fe face 	bl	800fac8 <DbgTraceGetFileName>
 801152c:	4601      	mov	r1, r0
 801152e:	f240 1387 	movw	r3, #391	@ 0x187
 8011532:	4a68      	ldr	r2, [pc, #416]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 8011534:	4868      	ldr	r0, [pc, #416]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 8011536:	f000 ff45 	bl	80123c4 <iprintf>
 801153a:	7dfb      	ldrb	r3, [r7, #23]
 801153c:	4619      	mov	r1, r3
 801153e:	486b      	ldr	r0, [pc, #428]	@ (80116ec <SVCCTL_InitCustomSvc+0x2e4>)
 8011540:	f000 ff40 	bl	80123c4 <iprintf>
 8011544:	e00c      	b.n	8011560 <SVCCTL_InitCustomSvc+0x158>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : MVT_REP \n\r");
 8011546:	4862      	ldr	r0, [pc, #392]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 8011548:	f7fe fabe 	bl	800fac8 <DbgTraceGetFileName>
 801154c:	4601      	mov	r1, r0
 801154e:	f240 138b 	movw	r3, #395	@ 0x18b
 8011552:	4a60      	ldr	r2, [pc, #384]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 8011554:	4860      	ldr	r0, [pc, #384]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 8011556:	f000 ff35 	bl	80123c4 <iprintf>
 801155a:	4865      	ldr	r0, [pc, #404]	@ (80116f0 <SVCCTL_InitCustomSvc+0x2e8>)
 801155c:	f000 ff32 	bl	80123c4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Appel_app
   */
  COPY_APPEL_APP_UUID(uuid.Char_UUID_128);
 8011560:	2319      	movs	r3, #25
 8011562:	713b      	strb	r3, [r7, #4]
 8011564:	23ed      	movs	r3, #237	@ 0xed
 8011566:	717b      	strb	r3, [r7, #5]
 8011568:	2382      	movs	r3, #130	@ 0x82
 801156a:	71bb      	strb	r3, [r7, #6]
 801156c:	23ae      	movs	r3, #174	@ 0xae
 801156e:	71fb      	strb	r3, [r7, #7]
 8011570:	23ed      	movs	r3, #237	@ 0xed
 8011572:	723b      	strb	r3, [r7, #8]
 8011574:	2321      	movs	r3, #33	@ 0x21
 8011576:	727b      	strb	r3, [r7, #9]
 8011578:	234c      	movs	r3, #76	@ 0x4c
 801157a:	72bb      	strb	r3, [r7, #10]
 801157c:	239d      	movs	r3, #157	@ 0x9d
 801157e:	72fb      	strb	r3, [r7, #11]
 8011580:	2341      	movs	r3, #65	@ 0x41
 8011582:	733b      	strb	r3, [r7, #12]
 8011584:	2345      	movs	r3, #69	@ 0x45
 8011586:	737b      	strb	r3, [r7, #13]
 8011588:	2322      	movs	r3, #34	@ 0x22
 801158a:	73bb      	strb	r3, [r7, #14]
 801158c:	238e      	movs	r3, #142	@ 0x8e
 801158e:	73fb      	strb	r3, [r7, #15]
 8011590:	2334      	movs	r3, #52	@ 0x34
 8011592:	743b      	strb	r3, [r7, #16]
 8011594:	2312      	movs	r3, #18
 8011596:	747b      	strb	r3, [r7, #17]
 8011598:	2300      	movs	r3, #0
 801159a:	74bb      	strb	r3, [r7, #18]
 801159c:	2300      	movs	r3, #0
 801159e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 80115a0:	4b4a      	ldr	r3, [pc, #296]	@ (80116cc <SVCCTL_InitCustomSvc+0x2c4>)
 80115a2:	8818      	ldrh	r0, [r3, #0]
 80115a4:	4b53      	ldr	r3, [pc, #332]	@ (80116f4 <SVCCTL_InitCustomSvc+0x2ec>)
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	4619      	mov	r1, r3
 80115aa:	1d3a      	adds	r2, r7, #4
 80115ac:	4b52      	ldr	r3, [pc, #328]	@ (80116f8 <SVCCTL_InitCustomSvc+0x2f0>)
 80115ae:	9305      	str	r3, [sp, #20]
 80115b0:	2301      	movs	r3, #1
 80115b2:	9304      	str	r3, [sp, #16]
 80115b4:	2310      	movs	r3, #16
 80115b6:	9303      	str	r3, [sp, #12]
 80115b8:	2301      	movs	r3, #1
 80115ba:	9302      	str	r3, [sp, #8]
 80115bc:	2300      	movs	r3, #0
 80115be:	9301      	str	r3, [sp, #4]
 80115c0:	2306      	movs	r3, #6
 80115c2:	9300      	str	r3, [sp, #0]
 80115c4:	460b      	mov	r3, r1
 80115c6:	2102      	movs	r1, #2
 80115c8:	f7fc ff4b 	bl	800e462 <aci_gatt_add_char>
 80115cc:	4603      	mov	r3, r0
 80115ce:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_VARIABLE,
                          &(CustomContext.CustomAppel_AppHdle));
  if (ret != BLE_STATUS_SUCCESS)
 80115d0:	7dfb      	ldrb	r3, [r7, #23]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d00f      	beq.n	80115f6 <SVCCTL_InitCustomSvc+0x1ee>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : APPEL_APP, error code: 0x%x \n\r", ret);
 80115d6:	483e      	ldr	r0, [pc, #248]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 80115d8:	f7fe fa76 	bl	800fac8 <DbgTraceGetFileName>
 80115dc:	4601      	mov	r1, r0
 80115de:	f240 13a1 	movw	r3, #417	@ 0x1a1
 80115e2:	4a3c      	ldr	r2, [pc, #240]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 80115e4:	483c      	ldr	r0, [pc, #240]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 80115e6:	f000 feed 	bl	80123c4 <iprintf>
 80115ea:	7dfb      	ldrb	r3, [r7, #23]
 80115ec:	4619      	mov	r1, r3
 80115ee:	4843      	ldr	r0, [pc, #268]	@ (80116fc <SVCCTL_InitCustomSvc+0x2f4>)
 80115f0:	f000 fee8 	bl	80123c4 <iprintf>
 80115f4:	e00c      	b.n	8011610 <SVCCTL_InitCustomSvc+0x208>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : APPEL_APP \n\r");
 80115f6:	4836      	ldr	r0, [pc, #216]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 80115f8:	f7fe fa66 	bl	800fac8 <DbgTraceGetFileName>
 80115fc:	4601      	mov	r1, r0
 80115fe:	f240 13a5 	movw	r3, #421	@ 0x1a5
 8011602:	4a34      	ldr	r2, [pc, #208]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 8011604:	4834      	ldr	r0, [pc, #208]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 8011606:	f000 fedd 	bl	80123c4 <iprintf>
 801160a:	483d      	ldr	r0, [pc, #244]	@ (8011700 <SVCCTL_InitCustomSvc+0x2f8>)
 801160c:	f000 feda 	bl	80123c4 <iprintf>

  /* USER CODE END SVCCTL_Init_Service1_Char2 */
  /**
   *  force
   */
  COPY_FORCE_UUID(uuid.Char_UUID_128);
 8011610:	2319      	movs	r3, #25
 8011612:	713b      	strb	r3, [r7, #4]
 8011614:	23ed      	movs	r3, #237	@ 0xed
 8011616:	717b      	strb	r3, [r7, #5]
 8011618:	2382      	movs	r3, #130	@ 0x82
 801161a:	71bb      	strb	r3, [r7, #6]
 801161c:	23ae      	movs	r3, #174	@ 0xae
 801161e:	71fb      	strb	r3, [r7, #7]
 8011620:	23ed      	movs	r3, #237	@ 0xed
 8011622:	723b      	strb	r3, [r7, #8]
 8011624:	2321      	movs	r3, #33	@ 0x21
 8011626:	727b      	strb	r3, [r7, #9]
 8011628:	234c      	movs	r3, #76	@ 0x4c
 801162a:	72bb      	strb	r3, [r7, #10]
 801162c:	239d      	movs	r3, #157	@ 0x9d
 801162e:	72fb      	strb	r3, [r7, #11]
 8011630:	2341      	movs	r3, #65	@ 0x41
 8011632:	733b      	strb	r3, [r7, #12]
 8011634:	2345      	movs	r3, #69	@ 0x45
 8011636:	737b      	strb	r3, [r7, #13]
 8011638:	2322      	movs	r3, #34	@ 0x22
 801163a:	73bb      	strb	r3, [r7, #14]
 801163c:	238e      	movs	r3, #142	@ 0x8e
 801163e:	73fb      	strb	r3, [r7, #15]
 8011640:	2300      	movs	r3, #0
 8011642:	743b      	strb	r3, [r7, #16]
 8011644:	2300      	movs	r3, #0
 8011646:	747b      	strb	r3, [r7, #17]
 8011648:	2300      	movs	r3, #0
 801164a:	74bb      	strb	r3, [r7, #18]
 801164c:	2300      	movs	r3, #0
 801164e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomMvt_DefHdle,
 8011650:	4b1e      	ldr	r3, [pc, #120]	@ (80116cc <SVCCTL_InitCustomSvc+0x2c4>)
 8011652:	8818      	ldrh	r0, [r3, #0]
 8011654:	4b2b      	ldr	r3, [pc, #172]	@ (8011704 <SVCCTL_InitCustomSvc+0x2fc>)
 8011656:	781b      	ldrb	r3, [r3, #0]
 8011658:	4619      	mov	r1, r3
 801165a:	1d3a      	adds	r2, r7, #4
 801165c:	4b2a      	ldr	r3, [pc, #168]	@ (8011708 <SVCCTL_InitCustomSvc+0x300>)
 801165e:	9305      	str	r3, [sp, #20]
 8011660:	2300      	movs	r3, #0
 8011662:	9304      	str	r3, [sp, #16]
 8011664:	2310      	movs	r3, #16
 8011666:	9303      	str	r3, [sp, #12]
 8011668:	2301      	movs	r3, #1
 801166a:	9302      	str	r3, [sp, #8]
 801166c:	2300      	movs	r3, #0
 801166e:	9301      	str	r3, [sp, #4]
 8011670:	2310      	movs	r3, #16
 8011672:	9300      	str	r3, [sp, #0]
 8011674:	460b      	mov	r3, r1
 8011676:	2102      	movs	r1, #2
 8011678:	f7fc fef3 	bl	800e462 <aci_gatt_add_char>
 801167c:	4603      	mov	r3, r0
 801167e:	75fb      	strb	r3, [r7, #23]
                          ATTR_PERMISSION_NONE,
                          GATT_NOTIFY_ATTRIBUTE_WRITE,
                          0x10,
                          CHAR_VALUE_LEN_CONSTANT,
                          &(CustomContext.CustomForceHdle));
  if (ret != BLE_STATUS_SUCCESS)
 8011680:	7dfb      	ldrb	r3, [r7, #23]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d00f      	beq.n	80116a6 <SVCCTL_InitCustomSvc+0x29e>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_add_char command   : FORCE, error code: 0x%x \n\r", ret);
 8011686:	4812      	ldr	r0, [pc, #72]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 8011688:	f7fe fa1e 	bl	800fac8 <DbgTraceGetFileName>
 801168c:	4601      	mov	r1, r0
 801168e:	f240 13bb 	movw	r3, #443	@ 0x1bb
 8011692:	4a10      	ldr	r2, [pc, #64]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 8011694:	4810      	ldr	r0, [pc, #64]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 8011696:	f000 fe95 	bl	80123c4 <iprintf>
 801169a:	7dfb      	ldrb	r3, [r7, #23]
 801169c:	4619      	mov	r1, r3
 801169e:	481b      	ldr	r0, [pc, #108]	@ (801170c <SVCCTL_InitCustomSvc+0x304>)
 80116a0:	f000 fe90 	bl	80123c4 <iprintf>

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 80116a4:	e00d      	b.n	80116c2 <SVCCTL_InitCustomSvc+0x2ba>
    APP_DBG_MSG("  Success: aci_gatt_add_char command   : FORCE \n\r");
 80116a6:	480a      	ldr	r0, [pc, #40]	@ (80116d0 <SVCCTL_InitCustomSvc+0x2c8>)
 80116a8:	f7fe fa0e 	bl	800fac8 <DbgTraceGetFileName>
 80116ac:	4601      	mov	r1, r0
 80116ae:	f240 13bf 	movw	r3, #447	@ 0x1bf
 80116b2:	4a08      	ldr	r2, [pc, #32]	@ (80116d4 <SVCCTL_InitCustomSvc+0x2cc>)
 80116b4:	4808      	ldr	r0, [pc, #32]	@ (80116d8 <SVCCTL_InitCustomSvc+0x2d0>)
 80116b6:	f000 fe85 	bl	80123c4 <iprintf>
 80116ba:	4815      	ldr	r0, [pc, #84]	@ (8011710 <SVCCTL_InitCustomSvc+0x308>)
 80116bc:	f000 fe82 	bl	80123c4 <iprintf>
  return;
 80116c0:	bf00      	nop
}
 80116c2:	3718      	adds	r7, #24
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	0801125d 	.word	0x0801125d
 80116cc:	20000bb0 	.word	0x20000bb0
 80116d0:	08014a00 	.word	0x08014a00
 80116d4:	080150b0 	.word	0x080150b0
 80116d8:	08014a20 	.word	0x08014a20
 80116dc:	08014a34 	.word	0x08014a34
 80116e0:	08014a7c 	.word	0x08014a7c
 80116e4:	20000103 	.word	0x20000103
 80116e8:	20000bb2 	.word	0x20000bb2
 80116ec:	08014ab0 	.word	0x08014ab0
 80116f0:	08014af8 	.word	0x08014af8
 80116f4:	20000104 	.word	0x20000104
 80116f8:	20000bb4 	.word	0x20000bb4
 80116fc:	08014b2c 	.word	0x08014b2c
 8011700:	08014b74 	.word	0x08014b74
 8011704:	20000105 	.word	0x20000105
 8011708:	20000bb6 	.word	0x20000bb6
 801170c:	08014bac 	.word	0x08014bac
 8011710:	08014bf0 	.word	0x08014bf0

08011714 <Custom_STM_App_Update_Char>:
 * @param  CharOpcode: Characteristic identifier
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 *
 */
tBleStatus Custom_STM_App_Update_Char(Custom_STM_Char_Opcode_t CharOpcode, uint8_t *pPayload)
{
 8011714:	b580      	push	{r7, lr}
 8011716:	b086      	sub	sp, #24
 8011718:	af02      	add	r7, sp, #8
 801171a:	4603      	mov	r3, r0
 801171c:	6039      	str	r1, [r7, #0]
 801171e:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011720:	2392      	movs	r3, #146	@ 0x92
 8011722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN Custom_STM_App_Update_Char_1 */

  /* USER CODE END Custom_STM_App_Update_Char_1 */

  switch (CharOpcode)
 8011724:	79fb      	ldrb	r3, [r7, #7]
 8011726:	2b02      	cmp	r3, #2
 8011728:	d071      	beq.n	801180e <Custom_STM_App_Update_Char+0xfa>
 801172a:	2b02      	cmp	r3, #2
 801172c:	f300 809e 	bgt.w	801186c <Custom_STM_App_Update_Char+0x158>
 8011730:	2b00      	cmp	r3, #0
 8011732:	d002      	beq.n	801173a <Custom_STM_App_Update_Char+0x26>
 8011734:	2b01      	cmp	r3, #1
 8011736:	d02f      	beq.n	8011798 <Custom_STM_App_Update_Char+0x84>

      /* USER CODE END CUSTOM_STM_App_Update_Service_1_Char_3*/
      break;

    default:
      break;
 8011738:	e098      	b.n	801186c <Custom_STM_App_Update_Char+0x158>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 801173a:	4b4f      	ldr	r3, [pc, #316]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 801173c:	8818      	ldrh	r0, [r3, #0]
 801173e:	4b4e      	ldr	r3, [pc, #312]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 8011740:	8859      	ldrh	r1, [r3, #2]
 8011742:	4b4e      	ldr	r3, [pc, #312]	@ (801187c <Custom_STM_App_Update_Char+0x168>)
 8011744:	781a      	ldrb	r2, [r3, #0]
 8011746:	683b      	ldr	r3, [r7, #0]
 8011748:	9300      	str	r3, [sp, #0]
 801174a:	4613      	mov	r3, r2
 801174c:	2200      	movs	r2, #0
 801174e:	f7fc ff90 	bl	800e672 <aci_gatt_update_char_value>
 8011752:	4603      	mov	r3, r0
 8011754:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 8011756:	7bfb      	ldrb	r3, [r7, #15]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00f      	beq.n	801177c <Custom_STM_App_Update_Char+0x68>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value MVT_REP command, result : 0x%x \n\r", ret);
 801175c:	4848      	ldr	r0, [pc, #288]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 801175e:	f7fe f9b3 	bl	800fac8 <DbgTraceGetFileName>
 8011762:	4601      	mov	r1, r0
 8011764:	f44f 73f3 	mov.w	r3, #486	@ 0x1e6
 8011768:	4a46      	ldr	r2, [pc, #280]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 801176a:	4847      	ldr	r0, [pc, #284]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 801176c:	f000 fe2a 	bl	80123c4 <iprintf>
 8011770:	7bfb      	ldrb	r3, [r7, #15]
 8011772:	4619      	mov	r1, r3
 8011774:	4845      	ldr	r0, [pc, #276]	@ (801188c <Custom_STM_App_Update_Char+0x178>)
 8011776:	f000 fe25 	bl	80123c4 <iprintf>
      break;
 801177a:	e078      	b.n	801186e <Custom_STM_App_Update_Char+0x15a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value MVT_REP command\n\r");
 801177c:	4840      	ldr	r0, [pc, #256]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 801177e:	f7fe f9a3 	bl	800fac8 <DbgTraceGetFileName>
 8011782:	4601      	mov	r1, r0
 8011784:	f44f 73f5 	mov.w	r3, #490	@ 0x1ea
 8011788:	4a3e      	ldr	r2, [pc, #248]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 801178a:	483f      	ldr	r0, [pc, #252]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 801178c:	f000 fe1a 	bl	80123c4 <iprintf>
 8011790:	483f      	ldr	r0, [pc, #252]	@ (8011890 <Custom_STM_App_Update_Char+0x17c>)
 8011792:	f000 fe17 	bl	80123c4 <iprintf>
      break;
 8011796:	e06a      	b.n	801186e <Custom_STM_App_Update_Char+0x15a>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 8011798:	4b37      	ldr	r3, [pc, #220]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 801179a:	8818      	ldrh	r0, [r3, #0]
 801179c:	4b36      	ldr	r3, [pc, #216]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 801179e:	8899      	ldrh	r1, [r3, #4]
 80117a0:	4b3c      	ldr	r3, [pc, #240]	@ (8011894 <Custom_STM_App_Update_Char+0x180>)
 80117a2:	781a      	ldrb	r2, [r3, #0]
 80117a4:	683b      	ldr	r3, [r7, #0]
 80117a6:	9300      	str	r3, [sp, #0]
 80117a8:	4613      	mov	r3, r2
 80117aa:	2200      	movs	r2, #0
 80117ac:	f7fc ff61 	bl	800e672 <aci_gatt_update_char_value>
 80117b0:	4603      	mov	r3, r0
 80117b2:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 80117b4:	7bfb      	ldrb	r3, [r7, #15]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00f      	beq.n	80117da <Custom_STM_App_Update_Char+0xc6>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value APPEL_APP command, result : 0x%x \n\r", ret);
 80117ba:	4831      	ldr	r0, [pc, #196]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 80117bc:	f7fe f984 	bl	800fac8 <DbgTraceGetFileName>
 80117c0:	4601      	mov	r1, r0
 80117c2:	f240 13f9 	movw	r3, #505	@ 0x1f9
 80117c6:	4a2f      	ldr	r2, [pc, #188]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 80117c8:	482f      	ldr	r0, [pc, #188]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 80117ca:	f000 fdfb 	bl	80123c4 <iprintf>
 80117ce:	7bfb      	ldrb	r3, [r7, #15]
 80117d0:	4619      	mov	r1, r3
 80117d2:	4831      	ldr	r0, [pc, #196]	@ (8011898 <Custom_STM_App_Update_Char+0x184>)
 80117d4:	f000 fdf6 	bl	80123c4 <iprintf>
 80117d8:	e00c      	b.n	80117f4 <Custom_STM_App_Update_Char+0xe0>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value APPEL_APP command\n\r");
 80117da:	4829      	ldr	r0, [pc, #164]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 80117dc:	f7fe f974 	bl	800fac8 <DbgTraceGetFileName>
 80117e0:	4601      	mov	r1, r0
 80117e2:	f240 13fd 	movw	r3, #509	@ 0x1fd
 80117e6:	4a27      	ldr	r2, [pc, #156]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 80117e8:	4827      	ldr	r0, [pc, #156]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 80117ea:	f000 fdeb 	bl	80123c4 <iprintf>
 80117ee:	482b      	ldr	r0, [pc, #172]	@ (801189c <Custom_STM_App_Update_Char+0x188>)
 80117f0:	f000 fde8 	bl	80123c4 <iprintf>
      printf("%u\n", pPayload[0]);
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	781b      	ldrb	r3, [r3, #0]
 80117f8:	4619      	mov	r1, r3
 80117fa:	4829      	ldr	r0, [pc, #164]	@ (80118a0 <Custom_STM_App_Update_Char+0x18c>)
 80117fc:	f000 fde2 	bl	80123c4 <iprintf>
      global_payload_pointer = pPayload;
 8011800:	4a28      	ldr	r2, [pc, #160]	@ (80118a4 <Custom_STM_App_Update_Char+0x190>)
 8011802:	683b      	ldr	r3, [r7, #0]
 8011804:	6013      	str	r3, [r2, #0]
      etat = INITIALISATION;
 8011806:	4b28      	ldr	r3, [pc, #160]	@ (80118a8 <Custom_STM_App_Update_Char+0x194>)
 8011808:	2200      	movs	r2, #0
 801180a:	701a      	strb	r2, [r3, #0]
      break;
 801180c:	e02f      	b.n	801186e <Custom_STM_App_Update_Char+0x15a>
      ret = aci_gatt_update_char_value(CustomContext.CustomMvt_DefHdle,
 801180e:	4b1a      	ldr	r3, [pc, #104]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 8011810:	8818      	ldrh	r0, [r3, #0]
 8011812:	4b19      	ldr	r3, [pc, #100]	@ (8011878 <Custom_STM_App_Update_Char+0x164>)
 8011814:	88d9      	ldrh	r1, [r3, #6]
 8011816:	4b25      	ldr	r3, [pc, #148]	@ (80118ac <Custom_STM_App_Update_Char+0x198>)
 8011818:	781a      	ldrb	r2, [r3, #0]
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	4613      	mov	r3, r2
 8011820:	2200      	movs	r2, #0
 8011822:	f7fc ff26 	bl	800e672 <aci_gatt_update_char_value>
 8011826:	4603      	mov	r3, r0
 8011828:	73fb      	strb	r3, [r7, #15]
      if (ret != BLE_STATUS_SUCCESS)
 801182a:	7bfb      	ldrb	r3, [r7, #15]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00f      	beq.n	8011850 <Custom_STM_App_Update_Char+0x13c>
        APP_DBG_MSG("  Fail   : aci_gatt_update_char_value FORCE command, result : 0x%x \n\r", ret);
 8011830:	4813      	ldr	r0, [pc, #76]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 8011832:	f7fe f949 	bl	800fac8 <DbgTraceGetFileName>
 8011836:	4601      	mov	r1, r0
 8011838:	f44f 7304 	mov.w	r3, #528	@ 0x210
 801183c:	4a11      	ldr	r2, [pc, #68]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 801183e:	4812      	ldr	r0, [pc, #72]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 8011840:	f000 fdc0 	bl	80123c4 <iprintf>
 8011844:	7bfb      	ldrb	r3, [r7, #15]
 8011846:	4619      	mov	r1, r3
 8011848:	4819      	ldr	r0, [pc, #100]	@ (80118b0 <Custom_STM_App_Update_Char+0x19c>)
 801184a:	f000 fdbb 	bl	80123c4 <iprintf>
      break;
 801184e:	e00e      	b.n	801186e <Custom_STM_App_Update_Char+0x15a>
        APP_DBG_MSG("  Success: aci_gatt_update_char_value FORCE command\n\r");
 8011850:	480b      	ldr	r0, [pc, #44]	@ (8011880 <Custom_STM_App_Update_Char+0x16c>)
 8011852:	f7fe f939 	bl	800fac8 <DbgTraceGetFileName>
 8011856:	4601      	mov	r1, r0
 8011858:	f44f 7305 	mov.w	r3, #532	@ 0x214
 801185c:	4a09      	ldr	r2, [pc, #36]	@ (8011884 <Custom_STM_App_Update_Char+0x170>)
 801185e:	480a      	ldr	r0, [pc, #40]	@ (8011888 <Custom_STM_App_Update_Char+0x174>)
 8011860:	f000 fdb0 	bl	80123c4 <iprintf>
 8011864:	4813      	ldr	r0, [pc, #76]	@ (80118b4 <Custom_STM_App_Update_Char+0x1a0>)
 8011866:	f000 fdad 	bl	80123c4 <iprintf>
      break;
 801186a:	e000      	b.n	801186e <Custom_STM_App_Update_Char+0x15a>
      break;
 801186c:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_App_Update_Char_2 */

  /* USER CODE END Custom_STM_App_Update_Char_2 */

  return ret;
 801186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	20000bb0 	.word	0x20000bb0
 801187c:	20000103 	.word	0x20000103
 8011880:	08014a00 	.word	0x08014a00
 8011884:	080150c8 	.word	0x080150c8
 8011888:	08014a20 	.word	0x08014a20
 801188c:	08014c24 	.word	0x08014c24
 8011890:	08014c6c 	.word	0x08014c6c
 8011894:	20000104 	.word	0x20000104
 8011898:	08014ca4 	.word	0x08014ca4
 801189c:	08014cf0 	.word	0x08014cf0
 80118a0:	08014d2c 	.word	0x08014d2c
 80118a4:	20000bb8 	.word	0x20000bb8
 80118a8:	20000224 	.word	0x20000224
 80118ac:	20000105 	.word	0x20000105
 80118b0:	08014d30 	.word	0x08014d30
 80118b4:	08014d78 	.word	0x08014d78

080118b8 <LL_PWR_EnableBootC2>:
{
 80118b8:	b480      	push	{r7}
 80118ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80118bc:	4b05      	ldr	r3, [pc, #20]	@ (80118d4 <LL_PWR_EnableBootC2+0x1c>)
 80118be:	68db      	ldr	r3, [r3, #12]
 80118c0:	4a04      	ldr	r2, [pc, #16]	@ (80118d4 <LL_PWR_EnableBootC2+0x1c>)
 80118c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80118c6:	60d3      	str	r3, [r2, #12]
}
 80118c8:	bf00      	nop
 80118ca:	46bd      	mov	sp, r7
 80118cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop
 80118d4:	58000400 	.word	0x58000400

080118d8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80118d8:	b480      	push	{r7}
 80118da:	b083      	sub	sp, #12
 80118dc:	af00      	add	r7, sp, #0
 80118de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80118e0:	4b06      	ldr	r3, [pc, #24]	@ (80118fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80118e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80118e6:	4905      	ldr	r1, [pc, #20]	@ (80118fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	4313      	orrs	r3, r2
 80118ec:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80118f0:	bf00      	nop
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	58000800 	.word	0x58000800

08011900 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8011908:	4b05      	ldr	r3, [pc, #20]	@ (8011920 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801190a:	6a1a      	ldr	r2, [r3, #32]
 801190c:	4904      	ldr	r1, [pc, #16]	@ (8011920 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4313      	orrs	r3, r2
 8011912:	620b      	str	r3, [r1, #32]
}
 8011914:	bf00      	nop
 8011916:	370c      	adds	r7, #12
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	58000800 	.word	0x58000800

08011924 <LL_AHB3_GRP1_EnableClock>:
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011930:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4313      	orrs	r3, r2
 801193a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011940:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4013      	ands	r3, r2
 8011946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011948:	68fb      	ldr	r3, [r7, #12]
}
 801194a:	bf00      	nop
 801194c:	3714      	adds	r7, #20
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr

08011956 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8011956:	b480      	push	{r7}
 8011958:	b085      	sub	sp, #20
 801195a:	af00      	add	r7, sp, #0
 801195c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801195e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011962:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8011966:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4313      	orrs	r3, r2
 801196e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8011972:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011976:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	4013      	ands	r3, r2
 801197e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011980:	68fb      	ldr	r3, [r7, #12]
}
 8011982:	bf00      	nop
 8011984:	3714      	adds	r7, #20
 8011986:	46bd      	mov	sp, r7
 8011988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198c:	4770      	bx	lr

0801198e <LL_C1_IPCC_EnableIT_TXF>:
{
 801198e:	b480      	push	{r7}
 8011990:	b083      	sub	sp, #12
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	601a      	str	r2, [r3, #0]
}
 80119a2:	bf00      	nop
 80119a4:	370c      	adds	r7, #12
 80119a6:	46bd      	mov	sp, r7
 80119a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ac:	4770      	bx	lr

080119ae <LL_C1_IPCC_EnableIT_RXO>:
{
 80119ae:	b480      	push	{r7}
 80119b0:	b083      	sub	sp, #12
 80119b2:	af00      	add	r7, sp, #0
 80119b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f043 0201 	orr.w	r2, r3, #1
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	601a      	str	r2, [r3, #0]
}
 80119c2:	bf00      	nop
 80119c4:	370c      	adds	r7, #12
 80119c6:	46bd      	mov	sp, r7
 80119c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119cc:	4770      	bx	lr

080119ce <LL_C1_IPCC_EnableTransmitChannel>:
{
 80119ce:	b480      	push	{r7}
 80119d0:	b083      	sub	sp, #12
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
 80119d6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	685a      	ldr	r2, [r3, #4]
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	041b      	lsls	r3, r3, #16
 80119e0:	43db      	mvns	r3, r3
 80119e2:	401a      	ands	r2, r3
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	605a      	str	r2, [r3, #4]
}
 80119e8:	bf00      	nop
 80119ea:	370c      	adds	r7, #12
 80119ec:	46bd      	mov	sp, r7
 80119ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f2:	4770      	bx	lr

080119f4 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80119f4:	b480      	push	{r7}
 80119f6:	b083      	sub	sp, #12
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	685a      	ldr	r2, [r3, #4]
 8011a02:	683b      	ldr	r3, [r7, #0]
 8011a04:	041b      	lsls	r3, r3, #16
 8011a06:	431a      	orrs	r2, r3
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	605a      	str	r2, [r3, #4]
}
 8011a0c:	bf00      	nop
 8011a0e:	370c      	adds	r7, #12
 8011a10:	46bd      	mov	sp, r7
 8011a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a16:	4770      	bx	lr

08011a18 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8011a18:	b480      	push	{r7}
 8011a1a:	b083      	sub	sp, #12
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
 8011a20:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	685a      	ldr	r2, [r3, #4]
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	43db      	mvns	r3, r3
 8011a2a:	401a      	ands	r2, r3
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	605a      	str	r2, [r3, #4]
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <LL_C1_IPCC_ClearFlag_CHx>:
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	b083      	sub	sp, #12
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
 8011a44:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	683a      	ldr	r2, [r7, #0]
 8011a4a:	609a      	str	r2, [r3, #8]
}
 8011a4c:	bf00      	nop
 8011a4e:	370c      	adds	r7, #12
 8011a50:	46bd      	mov	sp, r7
 8011a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a56:	4770      	bx	lr

08011a58 <LL_C1_IPCC_SetFlag_CHx>:
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b083      	sub	sp, #12
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8011a62:	683b      	ldr	r3, [r7, #0]
 8011a64:	041a      	lsls	r2, r3, #16
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	609a      	str	r2, [r3, #8]
}
 8011a6a:	bf00      	nop
 8011a6c:	370c      	adds	r7, #12
 8011a6e:	46bd      	mov	sp, r7
 8011a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a74:	4770      	bx	lr

08011a76 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8011a76:	b480      	push	{r7}
 8011a78:	b083      	sub	sp, #12
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	68da      	ldr	r2, [r3, #12]
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	4013      	ands	r3, r2
 8011a88:	683a      	ldr	r2, [r7, #0]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d101      	bne.n	8011a92 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e000      	b.n	8011a94 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011a92:	2300      	movs	r3, #0
}
 8011a94:	4618      	mov	r0, r3
 8011a96:	370c      	adds	r7, #12
 8011a98:	46bd      	mov	sp, r7
 8011a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9e:	4770      	bx	lr

08011aa0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	69da      	ldr	r2, [r3, #28]
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	4013      	ands	r3, r2
 8011ab2:	683a      	ldr	r2, [r7, #0]
 8011ab4:	429a      	cmp	r2, r3
 8011ab6:	d101      	bne.n	8011abc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011ab8:	2301      	movs	r3, #1
 8011aba:	e000      	b.n	8011abe <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	370c      	adds	r7, #12
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr
	...

08011acc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011ad0:	2102      	movs	r1, #2
 8011ad2:	4818      	ldr	r0, [pc, #96]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011ad4:	f7ff ffe4 	bl	8011aa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011ad8:	4603      	mov	r3, r0
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d008      	beq.n	8011af0 <HW_IPCC_Rx_Handler+0x24>
 8011ade:	4b15      	ldr	r3, [pc, #84]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011ae0:	685b      	ldr	r3, [r3, #4]
 8011ae2:	f003 0302 	and.w	r3, r3, #2
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d102      	bne.n	8011af0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8011aea:	f000 f8d5 	bl	8011c98 <HW_IPCC_SYS_EvtHandler>
 8011aee:	e01e      	b.n	8011b2e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8011af0:	2101      	movs	r1, #1
 8011af2:	4810      	ldr	r0, [pc, #64]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011af4:	f7ff ffd4 	bl	8011aa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011af8:	4603      	mov	r3, r0
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d008      	beq.n	8011b10 <HW_IPCC_Rx_Handler+0x44>
 8011afe:	4b0d      	ldr	r3, [pc, #52]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011b00:	685b      	ldr	r3, [r3, #4]
 8011b02:	f003 0301 	and.w	r3, r3, #1
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d102      	bne.n	8011b10 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8011b0a:	f000 f889 	bl	8011c20 <HW_IPCC_BLE_EvtHandler>
 8011b0e:	e00e      	b.n	8011b2e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011b10:	2108      	movs	r1, #8
 8011b12:	4808      	ldr	r0, [pc, #32]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011b14:	f7ff ffc4 	bl	8011aa0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011b18:	4603      	mov	r3, r0
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d008      	beq.n	8011b30 <HW_IPCC_Rx_Handler+0x64>
 8011b1e:	4b05      	ldr	r3, [pc, #20]	@ (8011b34 <HW_IPCC_Rx_Handler+0x68>)
 8011b20:	685b      	ldr	r3, [r3, #4]
 8011b22:	f003 0308 	and.w	r3, r3, #8
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d102      	bne.n	8011b30 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8011b2a:	f000 f901 	bl	8011d30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011b2e:	bf00      	nop
 8011b30:	bf00      	nop
}
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	58000c00 	.word	0x58000c00

08011b38 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8011b3c:	2102      	movs	r1, #2
 8011b3e:	4818      	ldr	r0, [pc, #96]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b40:	f7ff ff99 	bl	8011a76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d108      	bne.n	8011b5c <HW_IPCC_Tx_Handler+0x24>
 8011b4a:	4b15      	ldr	r3, [pc, #84]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b4c:	685b      	ldr	r3, [r3, #4]
 8011b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d102      	bne.n	8011b5c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8011b56:	f000 f893 	bl	8011c80 <HW_IPCC_SYS_CmdEvtHandler>
 8011b5a:	e01e      	b.n	8011b9a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8011b5c:	2108      	movs	r1, #8
 8011b5e:	4810      	ldr	r0, [pc, #64]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b60:	f7ff ff89 	bl	8011a76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011b64:	4603      	mov	r3, r0
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d108      	bne.n	8011b7c <HW_IPCC_Tx_Handler+0x44>
 8011b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b6c:	685b      	ldr	r3, [r3, #4]
 8011b6e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d102      	bne.n	8011b7c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011b76:	f000 f8bd 	bl	8011cf4 <HW_IPCC_MM_FreeBufHandler>
 8011b7a:	e00e      	b.n	8011b9a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8011b7c:	2120      	movs	r1, #32
 8011b7e:	4808      	ldr	r0, [pc, #32]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b80:	f7ff ff79 	bl	8011a76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011b84:	4603      	mov	r3, r0
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d108      	bne.n	8011b9c <HW_IPCC_Tx_Handler+0x64>
 8011b8a:	4b05      	ldr	r3, [pc, #20]	@ (8011ba0 <HW_IPCC_Tx_Handler+0x68>)
 8011b8c:	685b      	ldr	r3, [r3, #4]
 8011b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d102      	bne.n	8011b9c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011b96:	f000 f84f 	bl	8011c38 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8011b9a:	bf00      	nop
 8011b9c:	bf00      	nop
}
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	58000c00 	.word	0x58000c00

08011ba4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011ba8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8011bac:	f7ff fed3 	bl	8011956 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011bb0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011bb4:	f7ff fea4 	bl	8011900 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011bb8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011bbc:	f7ff fe8c 	bl	80118d8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011bc0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8011bc2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8011bc4:	f7ff fe78 	bl	80118b8 <LL_PWR_EnableBootC2>

  return;
 8011bc8:	bf00      	nop
}
 8011bca:	bd80      	pop	{r7, pc}

08011bcc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011bd0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8011bd4:	f7ff fea6 	bl	8011924 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011bd8:	4806      	ldr	r0, [pc, #24]	@ (8011bf4 <HW_IPCC_Init+0x28>)
 8011bda:	f7ff fee8 	bl	80119ae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8011bde:	4805      	ldr	r0, [pc, #20]	@ (8011bf4 <HW_IPCC_Init+0x28>)
 8011be0:	f7ff fed5 	bl	801198e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8011be4:	202c      	movs	r0, #44	@ 0x2c
 8011be6:	f7f7 fce0 	bl	80095aa <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8011bea:	202d      	movs	r0, #45	@ 0x2d
 8011bec:	f7f7 fcdd 	bl	80095aa <HAL_NVIC_EnableIRQ>

  return;
 8011bf0:	bf00      	nop
}
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	58000c00 	.word	0x58000c00

08011bf8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011bfc:	2101      	movs	r1, #1
 8011bfe:	4802      	ldr	r0, [pc, #8]	@ (8011c08 <HW_IPCC_BLE_Init+0x10>)
 8011c00:	f7ff ff0a 	bl	8011a18 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011c04:	bf00      	nop
}
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	58000c00 	.word	0x58000c00

08011c0c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011c10:	2101      	movs	r1, #1
 8011c12:	4802      	ldr	r0, [pc, #8]	@ (8011c1c <HW_IPCC_BLE_SendCmd+0x10>)
 8011c14:	f7ff ff20 	bl	8011a58 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011c18:	bf00      	nop
}
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	58000c00 	.word	0x58000c00

08011c20 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011c24:	f7fd fd98 	bl	800f758 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011c28:	2101      	movs	r1, #1
 8011c2a:	4802      	ldr	r0, [pc, #8]	@ (8011c34 <HW_IPCC_BLE_EvtHandler+0x14>)
 8011c2c:	f7ff ff06 	bl	8011a3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011c30:	bf00      	nop
}
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	58000c00 	.word	0x58000c00

08011c38 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8011c3c:	2120      	movs	r1, #32
 8011c3e:	4803      	ldr	r0, [pc, #12]	@ (8011c4c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011c40:	f7ff fed8 	bl	80119f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011c44:	f7fd fdb8 	bl	800f7b8 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011c48:	bf00      	nop
}
 8011c4a:	bd80      	pop	{r7, pc}
 8011c4c:	58000c00 	.word	0x58000c00

08011c50 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011c54:	2102      	movs	r1, #2
 8011c56:	4802      	ldr	r0, [pc, #8]	@ (8011c60 <HW_IPCC_SYS_Init+0x10>)
 8011c58:	f7ff fede 	bl	8011a18 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011c5c:	bf00      	nop
}
 8011c5e:	bd80      	pop	{r7, pc}
 8011c60:	58000c00 	.word	0x58000c00

08011c64 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c68:	2102      	movs	r1, #2
 8011c6a:	4804      	ldr	r0, [pc, #16]	@ (8011c7c <HW_IPCC_SYS_SendCmd+0x18>)
 8011c6c:	f7ff fef4 	bl	8011a58 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c70:	2102      	movs	r1, #2
 8011c72:	4802      	ldr	r0, [pc, #8]	@ (8011c7c <HW_IPCC_SYS_SendCmd+0x18>)
 8011c74:	f7ff feab 	bl	80119ce <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011c78:	bf00      	nop
}
 8011c7a:	bd80      	pop	{r7, pc}
 8011c7c:	58000c00 	.word	0x58000c00

08011c80 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011c84:	2102      	movs	r1, #2
 8011c86:	4803      	ldr	r0, [pc, #12]	@ (8011c94 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011c88:	f7ff feb4 	bl	80119f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8011c8c:	f7fd fde4 	bl	800f858 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011c90:	bf00      	nop
}
 8011c92:	bd80      	pop	{r7, pc}
 8011c94:	58000c00 	.word	0x58000c00

08011c98 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8011c9c:	f7fd fdf2 	bl	800f884 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011ca0:	2102      	movs	r1, #2
 8011ca2:	4802      	ldr	r0, [pc, #8]	@ (8011cac <HW_IPCC_SYS_EvtHandler+0x14>)
 8011ca4:	f7ff feca 	bl	8011a3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011ca8:	bf00      	nop
}
 8011caa:	bd80      	pop	{r7, pc}
 8011cac:	58000c00 	.word	0x58000c00

08011cb0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b082      	sub	sp, #8
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011cb8:	2108      	movs	r1, #8
 8011cba:	480c      	ldr	r0, [pc, #48]	@ (8011cec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011cbc:	f7ff fedb 	bl	8011a76 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011cc0:	4603      	mov	r3, r0
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d007      	beq.n	8011cd6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8011cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8011cf0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011ccc:	2108      	movs	r1, #8
 8011cce:	4807      	ldr	r0, [pc, #28]	@ (8011cec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011cd0:	f7ff fe7d 	bl	80119ce <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8011cd4:	e006      	b.n	8011ce4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011cda:	2108      	movs	r1, #8
 8011cdc:	4803      	ldr	r0, [pc, #12]	@ (8011cec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011cde:	f7ff febb 	bl	8011a58 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8011ce2:	bf00      	nop
}
 8011ce4:	3708      	adds	r7, #8
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	58000c00 	.word	0x58000c00
 8011cf0:	20000bbc 	.word	0x20000bbc

08011cf4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011cf8:	2108      	movs	r1, #8
 8011cfa:	4806      	ldr	r0, [pc, #24]	@ (8011d14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011cfc:	f7ff fe7a 	bl	80119f4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011d00:	4b05      	ldr	r3, [pc, #20]	@ (8011d18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011d06:	2108      	movs	r1, #8
 8011d08:	4802      	ldr	r0, [pc, #8]	@ (8011d14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011d0a:	f7ff fea5 	bl	8011a58 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011d0e:	bf00      	nop
}
 8011d10:	bd80      	pop	{r7, pc}
 8011d12:	bf00      	nop
 8011d14:	58000c00 	.word	0x58000c00
 8011d18:	20000bbc 	.word	0x20000bbc

08011d1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011d20:	2108      	movs	r1, #8
 8011d22:	4802      	ldr	r0, [pc, #8]	@ (8011d2c <HW_IPCC_TRACES_Init+0x10>)
 8011d24:	f7ff fe78 	bl	8011a18 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011d28:	bf00      	nop
}
 8011d2a:	bd80      	pop	{r7, pc}
 8011d2c:	58000c00 	.word	0x58000c00

08011d30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011d34:	f7fd fe4e 	bl	800f9d4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011d38:	2108      	movs	r1, #8
 8011d3a:	4802      	ldr	r0, [pc, #8]	@ (8011d44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011d3c:	f7ff fe7e 	bl	8011a3c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011d40:	bf00      	nop
}
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	58000c00 	.word	0x58000c00

08011d48 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8011d48:	b480      	push	{r7}
 8011d4a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8011d4c:	4b05      	ldr	r3, [pc, #20]	@ (8011d64 <UTIL_LPM_Init+0x1c>)
 8011d4e:	2200      	movs	r2, #0
 8011d50:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8011d52:	4b05      	ldr	r3, [pc, #20]	@ (8011d68 <UTIL_LPM_Init+0x20>)
 8011d54:	2200      	movs	r2, #0
 8011d56:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8011d58:	bf00      	nop
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d60:	4770      	bx	lr
 8011d62:	bf00      	nop
 8011d64:	20000bc0 	.word	0x20000bc0
 8011d68:	20000bc4 	.word	0x20000bc4

08011d6c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b087      	sub	sp, #28
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
 8011d74:	460b      	mov	r3, r1
 8011d76:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011d78:	f3ef 8310 	mrs	r3, PRIMASK
 8011d7c:	613b      	str	r3, [r7, #16]
  return(result);
 8011d7e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8011d80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8011d82:	b672      	cpsid	i
}
 8011d84:	bf00      	nop
  
  switch(state)
 8011d86:	78fb      	ldrb	r3, [r7, #3]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d008      	beq.n	8011d9e <UTIL_LPM_SetOffMode+0x32>
 8011d8c:	2b01      	cmp	r3, #1
 8011d8e:	d10e      	bne.n	8011dae <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8011d90:	4b0d      	ldr	r3, [pc, #52]	@ (8011dc8 <UTIL_LPM_SetOffMode+0x5c>)
 8011d92:	681a      	ldr	r2, [r3, #0]
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	4313      	orrs	r3, r2
 8011d98:	4a0b      	ldr	r2, [pc, #44]	@ (8011dc8 <UTIL_LPM_SetOffMode+0x5c>)
 8011d9a:	6013      	str	r3, [r2, #0]
      break;
 8011d9c:	e008      	b.n	8011db0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	43da      	mvns	r2, r3
 8011da2:	4b09      	ldr	r3, [pc, #36]	@ (8011dc8 <UTIL_LPM_SetOffMode+0x5c>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	4013      	ands	r3, r2
 8011da8:	4a07      	ldr	r2, [pc, #28]	@ (8011dc8 <UTIL_LPM_SetOffMode+0x5c>)
 8011daa:	6013      	str	r3, [r2, #0]
      break;
 8011dac:	e000      	b.n	8011db0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8011dae:	bf00      	nop
 8011db0:	697b      	ldr	r3, [r7, #20]
 8011db2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f383 8810 	msr	PRIMASK, r3
}
 8011dba:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8011dbc:	bf00      	nop
 8011dbe:	371c      	adds	r7, #28
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	4770      	bx	lr
 8011dc8:	20000bc4 	.word	0x20000bc4

08011dcc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b090      	sub	sp, #64	@ 0x40
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8011dd4:	4b73      	ldr	r3, [pc, #460]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8011dda:	4b72      	ldr	r3, [pc, #456]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011ddc:	681a      	ldr	r2, [r3, #0]
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	4013      	ands	r3, r2
 8011de2:	4a70      	ldr	r2, [pc, #448]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011de4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8011de6:	4b70      	ldr	r3, [pc, #448]	@ (8011fa8 <UTIL_SEQ_Run+0x1dc>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011dec:	4b6f      	ldr	r3, [pc, #444]	@ (8011fac <UTIL_SEQ_Run+0x1e0>)
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8011df2:	4b6f      	ldr	r3, [pc, #444]	@ (8011fb0 <UTIL_SEQ_Run+0x1e4>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8011df8:	4b6e      	ldr	r3, [pc, #440]	@ (8011fb4 <UTIL_SEQ_Run+0x1e8>)
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011dfe:	e08d      	b.n	8011f1c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8011e00:	2300      	movs	r3, #0
 8011e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011e04:	e002      	b.n	8011e0c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8011e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e08:	3301      	adds	r3, #1
 8011e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8011e0c:	4a6a      	ldr	r2, [pc, #424]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e10:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e16:	401a      	ands	r2, r3
 8011e18:	4b62      	ldr	r3, [pc, #392]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	4013      	ands	r3, r2
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d0f1      	beq.n	8011e06 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8011e22:	4a65      	ldr	r2, [pc, #404]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e26:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8011e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e2c:	401a      	ands	r2, r3
 8011e2e:	4b5d      	ldr	r3, [pc, #372]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	4013      	ands	r3, r2
 8011e34:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8011e36:	4a60      	ldr	r2, [pc, #384]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e3a:	00db      	lsls	r3, r3, #3
 8011e3c:	4413      	add	r3, r2
 8011e3e:	685a      	ldr	r2, [r3, #4]
 8011e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e42:	4013      	ands	r3, r2
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d106      	bne.n	8011e56 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8011e48:	4a5b      	ldr	r2, [pc, #364]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e4c:	00db      	lsls	r3, r3, #3
 8011e4e:	4413      	add	r3, r2
 8011e50:	f04f 32ff 	mov.w	r2, #4294967295
 8011e54:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8011e56:	4a58      	ldr	r2, [pc, #352]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e5a:	00db      	lsls	r3, r3, #3
 8011e5c:	4413      	add	r3, r2
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e62:	4013      	ands	r3, r2
 8011e64:	4618      	mov	r0, r3
 8011e66:	f000 f9b3 	bl	80121d0 <SEQ_BitPosition>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	461a      	mov	r2, r3
 8011e6e:	4b53      	ldr	r3, [pc, #332]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011e70:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8011e72:	4a51      	ldr	r2, [pc, #324]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e76:	00db      	lsls	r3, r3, #3
 8011e78:	4413      	add	r3, r2
 8011e7a:	685a      	ldr	r2, [r3, #4]
 8011e7c:	4b4f      	ldr	r3, [pc, #316]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	2101      	movs	r1, #1
 8011e82:	fa01 f303 	lsl.w	r3, r1, r3
 8011e86:	43db      	mvns	r3, r3
 8011e88:	401a      	ands	r2, r3
 8011e8a:	494b      	ldr	r1, [pc, #300]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011e8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e8e:	00db      	lsls	r3, r3, #3
 8011e90:	440b      	add	r3, r1
 8011e92:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011e94:	f3ef 8310 	mrs	r3, PRIMASK
 8011e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8011e9a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8011e9c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8011e9e:	b672      	cpsid	i
}
 8011ea0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8011ea2:	4b46      	ldr	r3, [pc, #280]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	2201      	movs	r2, #1
 8011ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8011eac:	43da      	mvns	r2, r3
 8011eae:	4b3e      	ldr	r3, [pc, #248]	@ (8011fa8 <UTIL_SEQ_Run+0x1dc>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4013      	ands	r3, r2
 8011eb4:	4a3c      	ldr	r2, [pc, #240]	@ (8011fa8 <UTIL_SEQ_Run+0x1dc>)
 8011eb6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011eb8:	2302      	movs	r3, #2
 8011eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ebc:	e013      	b.n	8011ee6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8011ebe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	4a3d      	ldr	r2, [pc, #244]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011ec4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8011ec8:	4b3c      	ldr	r3, [pc, #240]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2201      	movs	r2, #1
 8011ece:	fa02 f303 	lsl.w	r3, r2, r3
 8011ed2:	43da      	mvns	r2, r3
 8011ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ed6:	3b01      	subs	r3, #1
 8011ed8:	400a      	ands	r2, r1
 8011eda:	4937      	ldr	r1, [pc, #220]	@ (8011fb8 <UTIL_SEQ_Run+0x1ec>)
 8011edc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8011ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ee2:	3b01      	subs	r3, #1
 8011ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ee6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d1e8      	bne.n	8011ebe <UTIL_SEQ_Run+0xf2>
 8011eec:	6a3b      	ldr	r3, [r7, #32]
 8011eee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ef0:	697b      	ldr	r3, [r7, #20]
 8011ef2:	f383 8810 	msr	PRIMASK, r3
}
 8011ef6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8011ef8:	4b30      	ldr	r3, [pc, #192]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	4a30      	ldr	r2, [pc, #192]	@ (8011fc0 <UTIL_SEQ_Run+0x1f4>)
 8011efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011f02:	4798      	blx	r3

    local_taskset = TaskSet;
 8011f04:	4b28      	ldr	r3, [pc, #160]	@ (8011fa8 <UTIL_SEQ_Run+0x1dc>)
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8011f0a:	4b28      	ldr	r3, [pc, #160]	@ (8011fac <UTIL_SEQ_Run+0x1e0>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8011f10:	4b27      	ldr	r3, [pc, #156]	@ (8011fb0 <UTIL_SEQ_Run+0x1e4>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8011f16:	4b27      	ldr	r3, [pc, #156]	@ (8011fb4 <UTIL_SEQ_Run+0x1e8>)
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8011f1c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f20:	401a      	ands	r2, r3
 8011f22:	4b20      	ldr	r3, [pc, #128]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	4013      	ands	r3, r2
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d005      	beq.n	8011f38 <UTIL_SEQ_Run+0x16c>
 8011f2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f30:	4013      	ands	r3, r2
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	f43f af64 	beq.w	8011e00 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8011f38:	4b20      	ldr	r3, [pc, #128]	@ (8011fbc <UTIL_SEQ_Run+0x1f0>)
 8011f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f3e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8011f40:	f000 f938 	bl	80121b4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011f44:	f3ef 8310 	mrs	r3, PRIMASK
 8011f48:	613b      	str	r3, [r7, #16]
  return(result);
 8011f4a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8011f4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011f4e:	b672      	cpsid	i
}
 8011f50:	bf00      	nop
  local_taskset = TaskSet;
 8011f52:	4b15      	ldr	r3, [pc, #84]	@ (8011fa8 <UTIL_SEQ_Run+0x1dc>)
 8011f54:	681b      	ldr	r3, [r3, #0]
 8011f56:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8011f58:	4b14      	ldr	r3, [pc, #80]	@ (8011fac <UTIL_SEQ_Run+0x1e0>)
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8011f5e:	4b14      	ldr	r3, [pc, #80]	@ (8011fb0 <UTIL_SEQ_Run+0x1e4>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8011f64:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f68:	401a      	ands	r2, r3
 8011f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	4013      	ands	r3, r2
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d107      	bne.n	8011f84 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8011f74:	4b0f      	ldr	r3, [pc, #60]	@ (8011fb4 <UTIL_SEQ_Run+0x1e8>)
 8011f76:	681a      	ldr	r2, [r3, #0]
 8011f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f7a:	4013      	ands	r3, r2
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d101      	bne.n	8011f84 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8011f80:	f7ef fe51 	bl	8001c26 <UTIL_SEQ_Idle>
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	f383 8810 	msr	PRIMASK, r3
}
 8011f8e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8011f90:	f000 f917 	bl	80121c2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8011f94:	4a03      	ldr	r2, [pc, #12]	@ (8011fa4 <UTIL_SEQ_Run+0x1d8>)
 8011f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f98:	6013      	str	r3, [r2, #0]

  return;
 8011f9a:	bf00      	nop
}
 8011f9c:	3740      	adds	r7, #64	@ 0x40
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
 8011fa2:	bf00      	nop
 8011fa4:	2000010c 	.word	0x2000010c
 8011fa8:	20000bc8 	.word	0x20000bc8
 8011fac:	20000bcc 	.word	0x20000bcc
 8011fb0:	20000108 	.word	0x20000108
 8011fb4:	20000bd0 	.word	0x20000bd0
 8011fb8:	20000c58 	.word	0x20000c58
 8011fbc:	20000bd4 	.word	0x20000bd4
 8011fc0:	20000bd8 	.word	0x20000bd8

08011fc4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	60f8      	str	r0, [r7, #12]
 8011fcc:	60b9      	str	r1, [r7, #8]
 8011fce:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011fd0:	f3ef 8310 	mrs	r3, PRIMASK
 8011fd4:	617b      	str	r3, [r7, #20]
  return(result);
 8011fd6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8011fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8011fda:	b672      	cpsid	i
}
 8011fdc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f000 f8f6 	bl	80121d0 <SEQ_BitPosition>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	4a06      	ldr	r2, [pc, #24]	@ (8012004 <UTIL_SEQ_RegTask+0x40>)
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8011ff0:	69fb      	ldr	r3, [r7, #28]
 8011ff2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011ff4:	69bb      	ldr	r3, [r7, #24]
 8011ff6:	f383 8810 	msr	PRIMASK, r3
}
 8011ffa:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8011ffc:	bf00      	nop
}
 8011ffe:	3720      	adds	r7, #32
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	20000bd8 	.word	0x20000bd8

08012008 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012008:	b480      	push	{r7}
 801200a:	b087      	sub	sp, #28
 801200c:	af00      	add	r7, sp, #0
 801200e:	6078      	str	r0, [r7, #4]
 8012010:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012012:	f3ef 8310 	mrs	r3, PRIMASK
 8012016:	60fb      	str	r3, [r7, #12]
  return(result);
 8012018:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801201a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801201c:	b672      	cpsid	i
}
 801201e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8012020:	4b0d      	ldr	r3, [pc, #52]	@ (8012058 <UTIL_SEQ_SetTask+0x50>)
 8012022:	681a      	ldr	r2, [r3, #0]
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	4313      	orrs	r3, r2
 8012028:	4a0b      	ldr	r2, [pc, #44]	@ (8012058 <UTIL_SEQ_SetTask+0x50>)
 801202a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801202c:	4a0b      	ldr	r2, [pc, #44]	@ (801205c <UTIL_SEQ_SetTask+0x54>)
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	431a      	orrs	r2, r3
 8012038:	4908      	ldr	r1, [pc, #32]	@ (801205c <UTIL_SEQ_SetTask+0x54>)
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012040:	697b      	ldr	r3, [r7, #20]
 8012042:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	f383 8810 	msr	PRIMASK, r3
}
 801204a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801204c:	bf00      	nop
}
 801204e:	371c      	adds	r7, #28
 8012050:	46bd      	mov	sp, r7
 8012052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012056:	4770      	bx	lr
 8012058:	20000bc8 	.word	0x20000bc8
 801205c:	20000c58 	.word	0x20000c58

08012060 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012060:	b480      	push	{r7}
 8012062:	b087      	sub	sp, #28
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012068:	f3ef 8310 	mrs	r3, PRIMASK
 801206c:	60fb      	str	r3, [r7, #12]
  return(result);
 801206e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012070:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012072:	b672      	cpsid	i
}
 8012074:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	43da      	mvns	r2, r3
 801207a:	4b08      	ldr	r3, [pc, #32]	@ (801209c <UTIL_SEQ_PauseTask+0x3c>)
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	4013      	ands	r3, r2
 8012080:	4a06      	ldr	r2, [pc, #24]	@ (801209c <UTIL_SEQ_PauseTask+0x3c>)
 8012082:	6013      	str	r3, [r2, #0]
 8012084:	697b      	ldr	r3, [r7, #20]
 8012086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	f383 8810 	msr	PRIMASK, r3
}
 801208e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012090:	bf00      	nop
}
 8012092:	371c      	adds	r7, #28
 8012094:	46bd      	mov	sp, r7
 8012096:	f85d 7b04 	ldr.w	r7, [sp], #4
 801209a:	4770      	bx	lr
 801209c:	20000108 	.word	0x20000108

080120a0 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80120a0:	b480      	push	{r7}
 80120a2:	b087      	sub	sp, #28
 80120a4:	af00      	add	r7, sp, #0
 80120a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120a8:	f3ef 8310 	mrs	r3, PRIMASK
 80120ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80120ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80120b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120b2:	b672      	cpsid	i
}
 80120b4:	bf00      	nop

  TaskMask |= TaskId_bm;
 80120b6:	4b09      	ldr	r3, [pc, #36]	@ (80120dc <UTIL_SEQ_ResumeTask+0x3c>)
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	4313      	orrs	r3, r2
 80120be:	4a07      	ldr	r2, [pc, #28]	@ (80120dc <UTIL_SEQ_ResumeTask+0x3c>)
 80120c0:	6013      	str	r3, [r2, #0]
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	f383 8810 	msr	PRIMASK, r3
}
 80120cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80120ce:	bf00      	nop
}
 80120d0:	371c      	adds	r7, #28
 80120d2:	46bd      	mov	sp, r7
 80120d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d8:	4770      	bx	lr
 80120da:	bf00      	nop
 80120dc:	20000108 	.word	0x20000108

080120e0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80120e0:	b480      	push	{r7}
 80120e2:	b087      	sub	sp, #28
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80120e8:	f3ef 8310 	mrs	r3, PRIMASK
 80120ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80120ee:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80120f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80120f2:	b672      	cpsid	i
}
 80120f4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80120f6:	4b09      	ldr	r3, [pc, #36]	@ (801211c <UTIL_SEQ_SetEvt+0x3c>)
 80120f8:	681a      	ldr	r2, [r3, #0]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	4313      	orrs	r3, r2
 80120fe:	4a07      	ldr	r2, [pc, #28]	@ (801211c <UTIL_SEQ_SetEvt+0x3c>)
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012106:	693b      	ldr	r3, [r7, #16]
 8012108:	f383 8810 	msr	PRIMASK, r3
}
 801210c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801210e:	bf00      	nop
}
 8012110:	371c      	adds	r7, #28
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	20000bcc 	.word	0x20000bcc

08012120 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b088      	sub	sp, #32
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012128:	4b1f      	ldr	r3, [pc, #124]	@ (80121a8 <UTIL_SEQ_WaitEvt+0x88>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801212e:	4b1e      	ldr	r3, [pc, #120]	@ (80121a8 <UTIL_SEQ_WaitEvt+0x88>)
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012136:	d102      	bne.n	801213e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012138:	2300      	movs	r3, #0
 801213a:	61fb      	str	r3, [r7, #28]
 801213c:	e005      	b.n	801214a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801213e:	4b1a      	ldr	r3, [pc, #104]	@ (80121a8 <UTIL_SEQ_WaitEvt+0x88>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	2201      	movs	r2, #1
 8012144:	fa02 f303 	lsl.w	r3, r2, r3
 8012148:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801214a:	4b18      	ldr	r3, [pc, #96]	@ (80121ac <UTIL_SEQ_WaitEvt+0x8c>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012150:	4a16      	ldr	r2, [pc, #88]	@ (80121ac <UTIL_SEQ_WaitEvt+0x8c>)
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8012156:	e003      	b.n	8012160 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012158:	6879      	ldr	r1, [r7, #4]
 801215a:	69f8      	ldr	r0, [r7, #28]
 801215c:	f7ef fd6a 	bl	8001c34 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012160:	4b13      	ldr	r3, [pc, #76]	@ (80121b0 <UTIL_SEQ_WaitEvt+0x90>)
 8012162:	681a      	ldr	r2, [r3, #0]
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	4013      	ands	r3, r2
 8012168:	2b00      	cmp	r3, #0
 801216a:	d0f5      	beq.n	8012158 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801216c:	4a0e      	ldr	r2, [pc, #56]	@ (80121a8 <UTIL_SEQ_WaitEvt+0x88>)
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012172:	f3ef 8310 	mrs	r3, PRIMASK
 8012176:	60bb      	str	r3, [r7, #8]
  return(result);
 8012178:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801217a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801217c:	b672      	cpsid	i
}
 801217e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	43da      	mvns	r2, r3
 8012184:	4b0a      	ldr	r3, [pc, #40]	@ (80121b0 <UTIL_SEQ_WaitEvt+0x90>)
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	4013      	ands	r3, r2
 801218a:	4a09      	ldr	r2, [pc, #36]	@ (80121b0 <UTIL_SEQ_WaitEvt+0x90>)
 801218c:	6013      	str	r3, [r2, #0]
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	f383 8810 	msr	PRIMASK, r3
}
 8012198:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801219a:	4a04      	ldr	r2, [pc, #16]	@ (80121ac <UTIL_SEQ_WaitEvt+0x8c>)
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	6013      	str	r3, [r2, #0]
  return;
 80121a0:	bf00      	nop
}
 80121a2:	3720      	adds	r7, #32
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bd80      	pop	{r7, pc}
 80121a8:	20000bd4 	.word	0x20000bd4
 80121ac:	20000bd0 	.word	0x20000bd0
 80121b0:	20000bcc 	.word	0x20000bcc

080121b4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80121b4:	b480      	push	{r7}
 80121b6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80121b8:	bf00      	nop
}
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80121c2:	b480      	push	{r7}
 80121c4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80121c6:	bf00      	nop
}
 80121c8:	46bd      	mov	sp, r7
 80121ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ce:	4770      	bx	lr

080121d0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 80121d8:	2300      	movs	r3, #0
 80121da:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80121e6:	d204      	bcs.n	80121f2 <SEQ_BitPosition+0x22>
 80121e8:	2310      	movs	r3, #16
 80121ea:	73fb      	strb	r3, [r7, #15]
 80121ec:	68bb      	ldr	r3, [r7, #8]
 80121ee:	041b      	lsls	r3, r3, #16
 80121f0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80121f8:	d205      	bcs.n	8012206 <SEQ_BitPosition+0x36>
 80121fa:	7bfb      	ldrb	r3, [r7, #15]
 80121fc:	3308      	adds	r3, #8
 80121fe:	73fb      	strb	r3, [r7, #15]
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	021b      	lsls	r3, r3, #8
 8012204:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801220c:	d205      	bcs.n	801221a <SEQ_BitPosition+0x4a>
 801220e:	7bfb      	ldrb	r3, [r7, #15]
 8012210:	3304      	adds	r3, #4
 8012212:	73fb      	strb	r3, [r7, #15]
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	011b      	lsls	r3, r3, #4
 8012218:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	0f1b      	lsrs	r3, r3, #28
 801221e:	4a07      	ldr	r2, [pc, #28]	@ (801223c <SEQ_BitPosition+0x6c>)
 8012220:	5cd2      	ldrb	r2, [r2, r3]
 8012222:	7bfb      	ldrb	r3, [r7, #15]
 8012224:	4413      	add	r3, r2
 8012226:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8012228:	7bfb      	ldrb	r3, [r7, #15]
 801222a:	f1c3 031f 	rsb	r3, r3, #31
 801222e:	b2db      	uxtb	r3, r3
}
 8012230:	4618      	mov	r0, r3
 8012232:	3714      	adds	r7, #20
 8012234:	46bd      	mov	sp, r7
 8012236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801223a:	4770      	bx	lr
 801223c:	080150e4 	.word	0x080150e4

08012240 <std>:
 8012240:	2300      	movs	r3, #0
 8012242:	b510      	push	{r4, lr}
 8012244:	4604      	mov	r4, r0
 8012246:	e9c0 3300 	strd	r3, r3, [r0]
 801224a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801224e:	6083      	str	r3, [r0, #8]
 8012250:	8181      	strh	r1, [r0, #12]
 8012252:	6643      	str	r3, [r0, #100]	@ 0x64
 8012254:	81c2      	strh	r2, [r0, #14]
 8012256:	6183      	str	r3, [r0, #24]
 8012258:	4619      	mov	r1, r3
 801225a:	2208      	movs	r2, #8
 801225c:	305c      	adds	r0, #92	@ 0x5c
 801225e:	f000 fa01 	bl	8012664 <memset>
 8012262:	4b0d      	ldr	r3, [pc, #52]	@ (8012298 <std+0x58>)
 8012264:	6263      	str	r3, [r4, #36]	@ 0x24
 8012266:	4b0d      	ldr	r3, [pc, #52]	@ (801229c <std+0x5c>)
 8012268:	62a3      	str	r3, [r4, #40]	@ 0x28
 801226a:	4b0d      	ldr	r3, [pc, #52]	@ (80122a0 <std+0x60>)
 801226c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801226e:	4b0d      	ldr	r3, [pc, #52]	@ (80122a4 <std+0x64>)
 8012270:	6323      	str	r3, [r4, #48]	@ 0x30
 8012272:	4b0d      	ldr	r3, [pc, #52]	@ (80122a8 <std+0x68>)
 8012274:	6224      	str	r4, [r4, #32]
 8012276:	429c      	cmp	r4, r3
 8012278:	d006      	beq.n	8012288 <std+0x48>
 801227a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801227e:	4294      	cmp	r4, r2
 8012280:	d002      	beq.n	8012288 <std+0x48>
 8012282:	33d0      	adds	r3, #208	@ 0xd0
 8012284:	429c      	cmp	r4, r3
 8012286:	d105      	bne.n	8012294 <std+0x54>
 8012288:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801228c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012290:	f000 ba76 	b.w	8012780 <__retarget_lock_init_recursive>
 8012294:	bd10      	pop	{r4, pc}
 8012296:	bf00      	nop
 8012298:	080124b5 	.word	0x080124b5
 801229c:	080124d7 	.word	0x080124d7
 80122a0:	0801250f 	.word	0x0801250f
 80122a4:	08012533 	.word	0x08012533
 80122a8:	20000c68 	.word	0x20000c68

080122ac <stdio_exit_handler>:
 80122ac:	4a02      	ldr	r2, [pc, #8]	@ (80122b8 <stdio_exit_handler+0xc>)
 80122ae:	4903      	ldr	r1, [pc, #12]	@ (80122bc <stdio_exit_handler+0x10>)
 80122b0:	4803      	ldr	r0, [pc, #12]	@ (80122c0 <stdio_exit_handler+0x14>)
 80122b2:	f000 b869 	b.w	8012388 <_fwalk_sglue>
 80122b6:	bf00      	nop
 80122b8:	20000110 	.word	0x20000110
 80122bc:	0801303d 	.word	0x0801303d
 80122c0:	20000120 	.word	0x20000120

080122c4 <cleanup_stdio>:
 80122c4:	6841      	ldr	r1, [r0, #4]
 80122c6:	4b0c      	ldr	r3, [pc, #48]	@ (80122f8 <cleanup_stdio+0x34>)
 80122c8:	4299      	cmp	r1, r3
 80122ca:	b510      	push	{r4, lr}
 80122cc:	4604      	mov	r4, r0
 80122ce:	d001      	beq.n	80122d4 <cleanup_stdio+0x10>
 80122d0:	f000 feb4 	bl	801303c <_fflush_r>
 80122d4:	68a1      	ldr	r1, [r4, #8]
 80122d6:	4b09      	ldr	r3, [pc, #36]	@ (80122fc <cleanup_stdio+0x38>)
 80122d8:	4299      	cmp	r1, r3
 80122da:	d002      	beq.n	80122e2 <cleanup_stdio+0x1e>
 80122dc:	4620      	mov	r0, r4
 80122de:	f000 fead 	bl	801303c <_fflush_r>
 80122e2:	68e1      	ldr	r1, [r4, #12]
 80122e4:	4b06      	ldr	r3, [pc, #24]	@ (8012300 <cleanup_stdio+0x3c>)
 80122e6:	4299      	cmp	r1, r3
 80122e8:	d004      	beq.n	80122f4 <cleanup_stdio+0x30>
 80122ea:	4620      	mov	r0, r4
 80122ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80122f0:	f000 bea4 	b.w	801303c <_fflush_r>
 80122f4:	bd10      	pop	{r4, pc}
 80122f6:	bf00      	nop
 80122f8:	20000c68 	.word	0x20000c68
 80122fc:	20000cd0 	.word	0x20000cd0
 8012300:	20000d38 	.word	0x20000d38

08012304 <global_stdio_init.part.0>:
 8012304:	b510      	push	{r4, lr}
 8012306:	4b0b      	ldr	r3, [pc, #44]	@ (8012334 <global_stdio_init.part.0+0x30>)
 8012308:	4c0b      	ldr	r4, [pc, #44]	@ (8012338 <global_stdio_init.part.0+0x34>)
 801230a:	4a0c      	ldr	r2, [pc, #48]	@ (801233c <global_stdio_init.part.0+0x38>)
 801230c:	601a      	str	r2, [r3, #0]
 801230e:	4620      	mov	r0, r4
 8012310:	2200      	movs	r2, #0
 8012312:	2104      	movs	r1, #4
 8012314:	f7ff ff94 	bl	8012240 <std>
 8012318:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801231c:	2201      	movs	r2, #1
 801231e:	2109      	movs	r1, #9
 8012320:	f7ff ff8e 	bl	8012240 <std>
 8012324:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012328:	2202      	movs	r2, #2
 801232a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801232e:	2112      	movs	r1, #18
 8012330:	f7ff bf86 	b.w	8012240 <std>
 8012334:	20000da0 	.word	0x20000da0
 8012338:	20000c68 	.word	0x20000c68
 801233c:	080122ad 	.word	0x080122ad

08012340 <__sfp_lock_acquire>:
 8012340:	4801      	ldr	r0, [pc, #4]	@ (8012348 <__sfp_lock_acquire+0x8>)
 8012342:	f000 ba1e 	b.w	8012782 <__retarget_lock_acquire_recursive>
 8012346:	bf00      	nop
 8012348:	20000da9 	.word	0x20000da9

0801234c <__sfp_lock_release>:
 801234c:	4801      	ldr	r0, [pc, #4]	@ (8012354 <__sfp_lock_release+0x8>)
 801234e:	f000 ba19 	b.w	8012784 <__retarget_lock_release_recursive>
 8012352:	bf00      	nop
 8012354:	20000da9 	.word	0x20000da9

08012358 <__sinit>:
 8012358:	b510      	push	{r4, lr}
 801235a:	4604      	mov	r4, r0
 801235c:	f7ff fff0 	bl	8012340 <__sfp_lock_acquire>
 8012360:	6a23      	ldr	r3, [r4, #32]
 8012362:	b11b      	cbz	r3, 801236c <__sinit+0x14>
 8012364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012368:	f7ff bff0 	b.w	801234c <__sfp_lock_release>
 801236c:	4b04      	ldr	r3, [pc, #16]	@ (8012380 <__sinit+0x28>)
 801236e:	6223      	str	r3, [r4, #32]
 8012370:	4b04      	ldr	r3, [pc, #16]	@ (8012384 <__sinit+0x2c>)
 8012372:	681b      	ldr	r3, [r3, #0]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d1f5      	bne.n	8012364 <__sinit+0xc>
 8012378:	f7ff ffc4 	bl	8012304 <global_stdio_init.part.0>
 801237c:	e7f2      	b.n	8012364 <__sinit+0xc>
 801237e:	bf00      	nop
 8012380:	080122c5 	.word	0x080122c5
 8012384:	20000da0 	.word	0x20000da0

08012388 <_fwalk_sglue>:
 8012388:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801238c:	4607      	mov	r7, r0
 801238e:	4688      	mov	r8, r1
 8012390:	4614      	mov	r4, r2
 8012392:	2600      	movs	r6, #0
 8012394:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012398:	f1b9 0901 	subs.w	r9, r9, #1
 801239c:	d505      	bpl.n	80123aa <_fwalk_sglue+0x22>
 801239e:	6824      	ldr	r4, [r4, #0]
 80123a0:	2c00      	cmp	r4, #0
 80123a2:	d1f7      	bne.n	8012394 <_fwalk_sglue+0xc>
 80123a4:	4630      	mov	r0, r6
 80123a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80123aa:	89ab      	ldrh	r3, [r5, #12]
 80123ac:	2b01      	cmp	r3, #1
 80123ae:	d907      	bls.n	80123c0 <_fwalk_sglue+0x38>
 80123b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80123b4:	3301      	adds	r3, #1
 80123b6:	d003      	beq.n	80123c0 <_fwalk_sglue+0x38>
 80123b8:	4629      	mov	r1, r5
 80123ba:	4638      	mov	r0, r7
 80123bc:	47c0      	blx	r8
 80123be:	4306      	orrs	r6, r0
 80123c0:	3568      	adds	r5, #104	@ 0x68
 80123c2:	e7e9      	b.n	8012398 <_fwalk_sglue+0x10>

080123c4 <iprintf>:
 80123c4:	b40f      	push	{r0, r1, r2, r3}
 80123c6:	b507      	push	{r0, r1, r2, lr}
 80123c8:	4906      	ldr	r1, [pc, #24]	@ (80123e4 <iprintf+0x20>)
 80123ca:	ab04      	add	r3, sp, #16
 80123cc:	6808      	ldr	r0, [r1, #0]
 80123ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80123d2:	6881      	ldr	r1, [r0, #8]
 80123d4:	9301      	str	r3, [sp, #4]
 80123d6:	f000 fb07 	bl	80129e8 <_vfiprintf_r>
 80123da:	b003      	add	sp, #12
 80123dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80123e0:	b004      	add	sp, #16
 80123e2:	4770      	bx	lr
 80123e4:	2000011c 	.word	0x2000011c

080123e8 <putchar>:
 80123e8:	4b02      	ldr	r3, [pc, #8]	@ (80123f4 <putchar+0xc>)
 80123ea:	4601      	mov	r1, r0
 80123ec:	6818      	ldr	r0, [r3, #0]
 80123ee:	6882      	ldr	r2, [r0, #8]
 80123f0:	f000 beae 	b.w	8013150 <_putc_r>
 80123f4:	2000011c 	.word	0x2000011c

080123f8 <_puts_r>:
 80123f8:	6a03      	ldr	r3, [r0, #32]
 80123fa:	b570      	push	{r4, r5, r6, lr}
 80123fc:	6884      	ldr	r4, [r0, #8]
 80123fe:	4605      	mov	r5, r0
 8012400:	460e      	mov	r6, r1
 8012402:	b90b      	cbnz	r3, 8012408 <_puts_r+0x10>
 8012404:	f7ff ffa8 	bl	8012358 <__sinit>
 8012408:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801240a:	07db      	lsls	r3, r3, #31
 801240c:	d405      	bmi.n	801241a <_puts_r+0x22>
 801240e:	89a3      	ldrh	r3, [r4, #12]
 8012410:	0598      	lsls	r0, r3, #22
 8012412:	d402      	bmi.n	801241a <_puts_r+0x22>
 8012414:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012416:	f000 f9b4 	bl	8012782 <__retarget_lock_acquire_recursive>
 801241a:	89a3      	ldrh	r3, [r4, #12]
 801241c:	0719      	lsls	r1, r3, #28
 801241e:	d502      	bpl.n	8012426 <_puts_r+0x2e>
 8012420:	6923      	ldr	r3, [r4, #16]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d135      	bne.n	8012492 <_puts_r+0x9a>
 8012426:	4621      	mov	r1, r4
 8012428:	4628      	mov	r0, r5
 801242a:	f000 f8c5 	bl	80125b8 <__swsetup_r>
 801242e:	b380      	cbz	r0, 8012492 <_puts_r+0x9a>
 8012430:	f04f 35ff 	mov.w	r5, #4294967295
 8012434:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8012436:	07da      	lsls	r2, r3, #31
 8012438:	d405      	bmi.n	8012446 <_puts_r+0x4e>
 801243a:	89a3      	ldrh	r3, [r4, #12]
 801243c:	059b      	lsls	r3, r3, #22
 801243e:	d402      	bmi.n	8012446 <_puts_r+0x4e>
 8012440:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8012442:	f000 f99f 	bl	8012784 <__retarget_lock_release_recursive>
 8012446:	4628      	mov	r0, r5
 8012448:	bd70      	pop	{r4, r5, r6, pc}
 801244a:	2b00      	cmp	r3, #0
 801244c:	da04      	bge.n	8012458 <_puts_r+0x60>
 801244e:	69a2      	ldr	r2, [r4, #24]
 8012450:	429a      	cmp	r2, r3
 8012452:	dc17      	bgt.n	8012484 <_puts_r+0x8c>
 8012454:	290a      	cmp	r1, #10
 8012456:	d015      	beq.n	8012484 <_puts_r+0x8c>
 8012458:	6823      	ldr	r3, [r4, #0]
 801245a:	1c5a      	adds	r2, r3, #1
 801245c:	6022      	str	r2, [r4, #0]
 801245e:	7019      	strb	r1, [r3, #0]
 8012460:	68a3      	ldr	r3, [r4, #8]
 8012462:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012466:	3b01      	subs	r3, #1
 8012468:	60a3      	str	r3, [r4, #8]
 801246a:	2900      	cmp	r1, #0
 801246c:	d1ed      	bne.n	801244a <_puts_r+0x52>
 801246e:	2b00      	cmp	r3, #0
 8012470:	da11      	bge.n	8012496 <_puts_r+0x9e>
 8012472:	4622      	mov	r2, r4
 8012474:	210a      	movs	r1, #10
 8012476:	4628      	mov	r0, r5
 8012478:	f000 f85f 	bl	801253a <__swbuf_r>
 801247c:	3001      	adds	r0, #1
 801247e:	d0d7      	beq.n	8012430 <_puts_r+0x38>
 8012480:	250a      	movs	r5, #10
 8012482:	e7d7      	b.n	8012434 <_puts_r+0x3c>
 8012484:	4622      	mov	r2, r4
 8012486:	4628      	mov	r0, r5
 8012488:	f000 f857 	bl	801253a <__swbuf_r>
 801248c:	3001      	adds	r0, #1
 801248e:	d1e7      	bne.n	8012460 <_puts_r+0x68>
 8012490:	e7ce      	b.n	8012430 <_puts_r+0x38>
 8012492:	3e01      	subs	r6, #1
 8012494:	e7e4      	b.n	8012460 <_puts_r+0x68>
 8012496:	6823      	ldr	r3, [r4, #0]
 8012498:	1c5a      	adds	r2, r3, #1
 801249a:	6022      	str	r2, [r4, #0]
 801249c:	220a      	movs	r2, #10
 801249e:	701a      	strb	r2, [r3, #0]
 80124a0:	e7ee      	b.n	8012480 <_puts_r+0x88>
	...

080124a4 <puts>:
 80124a4:	4b02      	ldr	r3, [pc, #8]	@ (80124b0 <puts+0xc>)
 80124a6:	4601      	mov	r1, r0
 80124a8:	6818      	ldr	r0, [r3, #0]
 80124aa:	f7ff bfa5 	b.w	80123f8 <_puts_r>
 80124ae:	bf00      	nop
 80124b0:	2000011c 	.word	0x2000011c

080124b4 <__sread>:
 80124b4:	b510      	push	{r4, lr}
 80124b6:	460c      	mov	r4, r1
 80124b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124bc:	f000 f912 	bl	80126e4 <_read_r>
 80124c0:	2800      	cmp	r0, #0
 80124c2:	bfab      	itete	ge
 80124c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80124c6:	89a3      	ldrhlt	r3, [r4, #12]
 80124c8:	181b      	addge	r3, r3, r0
 80124ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80124ce:	bfac      	ite	ge
 80124d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80124d2:	81a3      	strhlt	r3, [r4, #12]
 80124d4:	bd10      	pop	{r4, pc}

080124d6 <__swrite>:
 80124d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124da:	461f      	mov	r7, r3
 80124dc:	898b      	ldrh	r3, [r1, #12]
 80124de:	05db      	lsls	r3, r3, #23
 80124e0:	4605      	mov	r5, r0
 80124e2:	460c      	mov	r4, r1
 80124e4:	4616      	mov	r6, r2
 80124e6:	d505      	bpl.n	80124f4 <__swrite+0x1e>
 80124e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124ec:	2302      	movs	r3, #2
 80124ee:	2200      	movs	r2, #0
 80124f0:	f000 f8e6 	bl	80126c0 <_lseek_r>
 80124f4:	89a3      	ldrh	r3, [r4, #12]
 80124f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80124fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80124fe:	81a3      	strh	r3, [r4, #12]
 8012500:	4632      	mov	r2, r6
 8012502:	463b      	mov	r3, r7
 8012504:	4628      	mov	r0, r5
 8012506:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801250a:	f000 b8fd 	b.w	8012708 <_write_r>

0801250e <__sseek>:
 801250e:	b510      	push	{r4, lr}
 8012510:	460c      	mov	r4, r1
 8012512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012516:	f000 f8d3 	bl	80126c0 <_lseek_r>
 801251a:	1c43      	adds	r3, r0, #1
 801251c:	89a3      	ldrh	r3, [r4, #12]
 801251e:	bf15      	itete	ne
 8012520:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012522:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012526:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801252a:	81a3      	strheq	r3, [r4, #12]
 801252c:	bf18      	it	ne
 801252e:	81a3      	strhne	r3, [r4, #12]
 8012530:	bd10      	pop	{r4, pc}

08012532 <__sclose>:
 8012532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012536:	f000 b8b3 	b.w	80126a0 <_close_r>

0801253a <__swbuf_r>:
 801253a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801253c:	460e      	mov	r6, r1
 801253e:	4614      	mov	r4, r2
 8012540:	4605      	mov	r5, r0
 8012542:	b118      	cbz	r0, 801254c <__swbuf_r+0x12>
 8012544:	6a03      	ldr	r3, [r0, #32]
 8012546:	b90b      	cbnz	r3, 801254c <__swbuf_r+0x12>
 8012548:	f7ff ff06 	bl	8012358 <__sinit>
 801254c:	69a3      	ldr	r3, [r4, #24]
 801254e:	60a3      	str	r3, [r4, #8]
 8012550:	89a3      	ldrh	r3, [r4, #12]
 8012552:	071a      	lsls	r2, r3, #28
 8012554:	d501      	bpl.n	801255a <__swbuf_r+0x20>
 8012556:	6923      	ldr	r3, [r4, #16]
 8012558:	b943      	cbnz	r3, 801256c <__swbuf_r+0x32>
 801255a:	4621      	mov	r1, r4
 801255c:	4628      	mov	r0, r5
 801255e:	f000 f82b 	bl	80125b8 <__swsetup_r>
 8012562:	b118      	cbz	r0, 801256c <__swbuf_r+0x32>
 8012564:	f04f 37ff 	mov.w	r7, #4294967295
 8012568:	4638      	mov	r0, r7
 801256a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801256c:	6823      	ldr	r3, [r4, #0]
 801256e:	6922      	ldr	r2, [r4, #16]
 8012570:	1a98      	subs	r0, r3, r2
 8012572:	6963      	ldr	r3, [r4, #20]
 8012574:	b2f6      	uxtb	r6, r6
 8012576:	4283      	cmp	r3, r0
 8012578:	4637      	mov	r7, r6
 801257a:	dc05      	bgt.n	8012588 <__swbuf_r+0x4e>
 801257c:	4621      	mov	r1, r4
 801257e:	4628      	mov	r0, r5
 8012580:	f000 fd5c 	bl	801303c <_fflush_r>
 8012584:	2800      	cmp	r0, #0
 8012586:	d1ed      	bne.n	8012564 <__swbuf_r+0x2a>
 8012588:	68a3      	ldr	r3, [r4, #8]
 801258a:	3b01      	subs	r3, #1
 801258c:	60a3      	str	r3, [r4, #8]
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	1c5a      	adds	r2, r3, #1
 8012592:	6022      	str	r2, [r4, #0]
 8012594:	701e      	strb	r6, [r3, #0]
 8012596:	6962      	ldr	r2, [r4, #20]
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	429a      	cmp	r2, r3
 801259c:	d004      	beq.n	80125a8 <__swbuf_r+0x6e>
 801259e:	89a3      	ldrh	r3, [r4, #12]
 80125a0:	07db      	lsls	r3, r3, #31
 80125a2:	d5e1      	bpl.n	8012568 <__swbuf_r+0x2e>
 80125a4:	2e0a      	cmp	r6, #10
 80125a6:	d1df      	bne.n	8012568 <__swbuf_r+0x2e>
 80125a8:	4621      	mov	r1, r4
 80125aa:	4628      	mov	r0, r5
 80125ac:	f000 fd46 	bl	801303c <_fflush_r>
 80125b0:	2800      	cmp	r0, #0
 80125b2:	d0d9      	beq.n	8012568 <__swbuf_r+0x2e>
 80125b4:	e7d6      	b.n	8012564 <__swbuf_r+0x2a>
	...

080125b8 <__swsetup_r>:
 80125b8:	b538      	push	{r3, r4, r5, lr}
 80125ba:	4b29      	ldr	r3, [pc, #164]	@ (8012660 <__swsetup_r+0xa8>)
 80125bc:	4605      	mov	r5, r0
 80125be:	6818      	ldr	r0, [r3, #0]
 80125c0:	460c      	mov	r4, r1
 80125c2:	b118      	cbz	r0, 80125cc <__swsetup_r+0x14>
 80125c4:	6a03      	ldr	r3, [r0, #32]
 80125c6:	b90b      	cbnz	r3, 80125cc <__swsetup_r+0x14>
 80125c8:	f7ff fec6 	bl	8012358 <__sinit>
 80125cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125d0:	0719      	lsls	r1, r3, #28
 80125d2:	d422      	bmi.n	801261a <__swsetup_r+0x62>
 80125d4:	06da      	lsls	r2, r3, #27
 80125d6:	d407      	bmi.n	80125e8 <__swsetup_r+0x30>
 80125d8:	2209      	movs	r2, #9
 80125da:	602a      	str	r2, [r5, #0]
 80125dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80125e0:	81a3      	strh	r3, [r4, #12]
 80125e2:	f04f 30ff 	mov.w	r0, #4294967295
 80125e6:	e033      	b.n	8012650 <__swsetup_r+0x98>
 80125e8:	0758      	lsls	r0, r3, #29
 80125ea:	d512      	bpl.n	8012612 <__swsetup_r+0x5a>
 80125ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80125ee:	b141      	cbz	r1, 8012602 <__swsetup_r+0x4a>
 80125f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80125f4:	4299      	cmp	r1, r3
 80125f6:	d002      	beq.n	80125fe <__swsetup_r+0x46>
 80125f8:	4628      	mov	r0, r5
 80125fa:	f000 f8d3 	bl	80127a4 <_free_r>
 80125fe:	2300      	movs	r3, #0
 8012600:	6363      	str	r3, [r4, #52]	@ 0x34
 8012602:	89a3      	ldrh	r3, [r4, #12]
 8012604:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012608:	81a3      	strh	r3, [r4, #12]
 801260a:	2300      	movs	r3, #0
 801260c:	6063      	str	r3, [r4, #4]
 801260e:	6923      	ldr	r3, [r4, #16]
 8012610:	6023      	str	r3, [r4, #0]
 8012612:	89a3      	ldrh	r3, [r4, #12]
 8012614:	f043 0308 	orr.w	r3, r3, #8
 8012618:	81a3      	strh	r3, [r4, #12]
 801261a:	6923      	ldr	r3, [r4, #16]
 801261c:	b94b      	cbnz	r3, 8012632 <__swsetup_r+0x7a>
 801261e:	89a3      	ldrh	r3, [r4, #12]
 8012620:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012624:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012628:	d003      	beq.n	8012632 <__swsetup_r+0x7a>
 801262a:	4621      	mov	r1, r4
 801262c:	4628      	mov	r0, r5
 801262e:	f000 fd53 	bl	80130d8 <__smakebuf_r>
 8012632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012636:	f013 0201 	ands.w	r2, r3, #1
 801263a:	d00a      	beq.n	8012652 <__swsetup_r+0x9a>
 801263c:	2200      	movs	r2, #0
 801263e:	60a2      	str	r2, [r4, #8]
 8012640:	6962      	ldr	r2, [r4, #20]
 8012642:	4252      	negs	r2, r2
 8012644:	61a2      	str	r2, [r4, #24]
 8012646:	6922      	ldr	r2, [r4, #16]
 8012648:	b942      	cbnz	r2, 801265c <__swsetup_r+0xa4>
 801264a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801264e:	d1c5      	bne.n	80125dc <__swsetup_r+0x24>
 8012650:	bd38      	pop	{r3, r4, r5, pc}
 8012652:	0799      	lsls	r1, r3, #30
 8012654:	bf58      	it	pl
 8012656:	6962      	ldrpl	r2, [r4, #20]
 8012658:	60a2      	str	r2, [r4, #8]
 801265a:	e7f4      	b.n	8012646 <__swsetup_r+0x8e>
 801265c:	2000      	movs	r0, #0
 801265e:	e7f7      	b.n	8012650 <__swsetup_r+0x98>
 8012660:	2000011c 	.word	0x2000011c

08012664 <memset>:
 8012664:	4402      	add	r2, r0
 8012666:	4603      	mov	r3, r0
 8012668:	4293      	cmp	r3, r2
 801266a:	d100      	bne.n	801266e <memset+0xa>
 801266c:	4770      	bx	lr
 801266e:	f803 1b01 	strb.w	r1, [r3], #1
 8012672:	e7f9      	b.n	8012668 <memset+0x4>

08012674 <strrchr>:
 8012674:	b538      	push	{r3, r4, r5, lr}
 8012676:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 801267a:	4603      	mov	r3, r0
 801267c:	d10e      	bne.n	801269c <strrchr+0x28>
 801267e:	4621      	mov	r1, r4
 8012680:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012684:	f000 bd98 	b.w	80131b8 <strchr>
 8012688:	1c43      	adds	r3, r0, #1
 801268a:	4605      	mov	r5, r0
 801268c:	4621      	mov	r1, r4
 801268e:	4618      	mov	r0, r3
 8012690:	f000 fd92 	bl	80131b8 <strchr>
 8012694:	2800      	cmp	r0, #0
 8012696:	d1f7      	bne.n	8012688 <strrchr+0x14>
 8012698:	4628      	mov	r0, r5
 801269a:	bd38      	pop	{r3, r4, r5, pc}
 801269c:	2500      	movs	r5, #0
 801269e:	e7f5      	b.n	801268c <strrchr+0x18>

080126a0 <_close_r>:
 80126a0:	b538      	push	{r3, r4, r5, lr}
 80126a2:	4d06      	ldr	r5, [pc, #24]	@ (80126bc <_close_r+0x1c>)
 80126a4:	2300      	movs	r3, #0
 80126a6:	4604      	mov	r4, r0
 80126a8:	4608      	mov	r0, r1
 80126aa:	602b      	str	r3, [r5, #0]
 80126ac:	f7f0 ffc1 	bl	8003632 <_close>
 80126b0:	1c43      	adds	r3, r0, #1
 80126b2:	d102      	bne.n	80126ba <_close_r+0x1a>
 80126b4:	682b      	ldr	r3, [r5, #0]
 80126b6:	b103      	cbz	r3, 80126ba <_close_r+0x1a>
 80126b8:	6023      	str	r3, [r4, #0]
 80126ba:	bd38      	pop	{r3, r4, r5, pc}
 80126bc:	20000da4 	.word	0x20000da4

080126c0 <_lseek_r>:
 80126c0:	b538      	push	{r3, r4, r5, lr}
 80126c2:	4d07      	ldr	r5, [pc, #28]	@ (80126e0 <_lseek_r+0x20>)
 80126c4:	4604      	mov	r4, r0
 80126c6:	4608      	mov	r0, r1
 80126c8:	4611      	mov	r1, r2
 80126ca:	2200      	movs	r2, #0
 80126cc:	602a      	str	r2, [r5, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	f7f0 ffd6 	bl	8003680 <_lseek>
 80126d4:	1c43      	adds	r3, r0, #1
 80126d6:	d102      	bne.n	80126de <_lseek_r+0x1e>
 80126d8:	682b      	ldr	r3, [r5, #0]
 80126da:	b103      	cbz	r3, 80126de <_lseek_r+0x1e>
 80126dc:	6023      	str	r3, [r4, #0]
 80126de:	bd38      	pop	{r3, r4, r5, pc}
 80126e0:	20000da4 	.word	0x20000da4

080126e4 <_read_r>:
 80126e4:	b538      	push	{r3, r4, r5, lr}
 80126e6:	4d07      	ldr	r5, [pc, #28]	@ (8012704 <_read_r+0x20>)
 80126e8:	4604      	mov	r4, r0
 80126ea:	4608      	mov	r0, r1
 80126ec:	4611      	mov	r1, r2
 80126ee:	2200      	movs	r2, #0
 80126f0:	602a      	str	r2, [r5, #0]
 80126f2:	461a      	mov	r2, r3
 80126f4:	f7f0 ff80 	bl	80035f8 <_read>
 80126f8:	1c43      	adds	r3, r0, #1
 80126fa:	d102      	bne.n	8012702 <_read_r+0x1e>
 80126fc:	682b      	ldr	r3, [r5, #0]
 80126fe:	b103      	cbz	r3, 8012702 <_read_r+0x1e>
 8012700:	6023      	str	r3, [r4, #0]
 8012702:	bd38      	pop	{r3, r4, r5, pc}
 8012704:	20000da4 	.word	0x20000da4

08012708 <_write_r>:
 8012708:	b538      	push	{r3, r4, r5, lr}
 801270a:	4d07      	ldr	r5, [pc, #28]	@ (8012728 <_write_r+0x20>)
 801270c:	4604      	mov	r4, r0
 801270e:	4608      	mov	r0, r1
 8012710:	4611      	mov	r1, r2
 8012712:	2200      	movs	r2, #0
 8012714:	602a      	str	r2, [r5, #0]
 8012716:	461a      	mov	r2, r3
 8012718:	f7ee fabf 	bl	8000c9a <_write>
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	d102      	bne.n	8012726 <_write_r+0x1e>
 8012720:	682b      	ldr	r3, [r5, #0]
 8012722:	b103      	cbz	r3, 8012726 <_write_r+0x1e>
 8012724:	6023      	str	r3, [r4, #0]
 8012726:	bd38      	pop	{r3, r4, r5, pc}
 8012728:	20000da4 	.word	0x20000da4

0801272c <__errno>:
 801272c:	4b01      	ldr	r3, [pc, #4]	@ (8012734 <__errno+0x8>)
 801272e:	6818      	ldr	r0, [r3, #0]
 8012730:	4770      	bx	lr
 8012732:	bf00      	nop
 8012734:	2000011c 	.word	0x2000011c

08012738 <__libc_init_array>:
 8012738:	b570      	push	{r4, r5, r6, lr}
 801273a:	4d0d      	ldr	r5, [pc, #52]	@ (8012770 <__libc_init_array+0x38>)
 801273c:	4c0d      	ldr	r4, [pc, #52]	@ (8012774 <__libc_init_array+0x3c>)
 801273e:	1b64      	subs	r4, r4, r5
 8012740:	10a4      	asrs	r4, r4, #2
 8012742:	2600      	movs	r6, #0
 8012744:	42a6      	cmp	r6, r4
 8012746:	d109      	bne.n	801275c <__libc_init_array+0x24>
 8012748:	4d0b      	ldr	r5, [pc, #44]	@ (8012778 <__libc_init_array+0x40>)
 801274a:	4c0c      	ldr	r4, [pc, #48]	@ (801277c <__libc_init_array+0x44>)
 801274c:	f000 fdf2 	bl	8013334 <_init>
 8012750:	1b64      	subs	r4, r4, r5
 8012752:	10a4      	asrs	r4, r4, #2
 8012754:	2600      	movs	r6, #0
 8012756:	42a6      	cmp	r6, r4
 8012758:	d105      	bne.n	8012766 <__libc_init_array+0x2e>
 801275a:	bd70      	pop	{r4, r5, r6, pc}
 801275c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012760:	4798      	blx	r3
 8012762:	3601      	adds	r6, #1
 8012764:	e7ee      	b.n	8012744 <__libc_init_array+0xc>
 8012766:	f855 3b04 	ldr.w	r3, [r5], #4
 801276a:	4798      	blx	r3
 801276c:	3601      	adds	r6, #1
 801276e:	e7f2      	b.n	8012756 <__libc_init_array+0x1e>
 8012770:	08015130 	.word	0x08015130
 8012774:	08015130 	.word	0x08015130
 8012778:	08015130 	.word	0x08015130
 801277c:	08015134 	.word	0x08015134

08012780 <__retarget_lock_init_recursive>:
 8012780:	4770      	bx	lr

08012782 <__retarget_lock_acquire_recursive>:
 8012782:	4770      	bx	lr

08012784 <__retarget_lock_release_recursive>:
 8012784:	4770      	bx	lr

08012786 <memcpy>:
 8012786:	440a      	add	r2, r1
 8012788:	4291      	cmp	r1, r2
 801278a:	f100 33ff 	add.w	r3, r0, #4294967295
 801278e:	d100      	bne.n	8012792 <memcpy+0xc>
 8012790:	4770      	bx	lr
 8012792:	b510      	push	{r4, lr}
 8012794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012798:	f803 4f01 	strb.w	r4, [r3, #1]!
 801279c:	4291      	cmp	r1, r2
 801279e:	d1f9      	bne.n	8012794 <memcpy+0xe>
 80127a0:	bd10      	pop	{r4, pc}
	...

080127a4 <_free_r>:
 80127a4:	b538      	push	{r3, r4, r5, lr}
 80127a6:	4605      	mov	r5, r0
 80127a8:	2900      	cmp	r1, #0
 80127aa:	d041      	beq.n	8012830 <_free_r+0x8c>
 80127ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127b0:	1f0c      	subs	r4, r1, #4
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	bfb8      	it	lt
 80127b6:	18e4      	addlt	r4, r4, r3
 80127b8:	f000 f8e0 	bl	801297c <__malloc_lock>
 80127bc:	4a1d      	ldr	r2, [pc, #116]	@ (8012834 <_free_r+0x90>)
 80127be:	6813      	ldr	r3, [r2, #0]
 80127c0:	b933      	cbnz	r3, 80127d0 <_free_r+0x2c>
 80127c2:	6063      	str	r3, [r4, #4]
 80127c4:	6014      	str	r4, [r2, #0]
 80127c6:	4628      	mov	r0, r5
 80127c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127cc:	f000 b8dc 	b.w	8012988 <__malloc_unlock>
 80127d0:	42a3      	cmp	r3, r4
 80127d2:	d908      	bls.n	80127e6 <_free_r+0x42>
 80127d4:	6820      	ldr	r0, [r4, #0]
 80127d6:	1821      	adds	r1, r4, r0
 80127d8:	428b      	cmp	r3, r1
 80127da:	bf01      	itttt	eq
 80127dc:	6819      	ldreq	r1, [r3, #0]
 80127de:	685b      	ldreq	r3, [r3, #4]
 80127e0:	1809      	addeq	r1, r1, r0
 80127e2:	6021      	streq	r1, [r4, #0]
 80127e4:	e7ed      	b.n	80127c2 <_free_r+0x1e>
 80127e6:	461a      	mov	r2, r3
 80127e8:	685b      	ldr	r3, [r3, #4]
 80127ea:	b10b      	cbz	r3, 80127f0 <_free_r+0x4c>
 80127ec:	42a3      	cmp	r3, r4
 80127ee:	d9fa      	bls.n	80127e6 <_free_r+0x42>
 80127f0:	6811      	ldr	r1, [r2, #0]
 80127f2:	1850      	adds	r0, r2, r1
 80127f4:	42a0      	cmp	r0, r4
 80127f6:	d10b      	bne.n	8012810 <_free_r+0x6c>
 80127f8:	6820      	ldr	r0, [r4, #0]
 80127fa:	4401      	add	r1, r0
 80127fc:	1850      	adds	r0, r2, r1
 80127fe:	4283      	cmp	r3, r0
 8012800:	6011      	str	r1, [r2, #0]
 8012802:	d1e0      	bne.n	80127c6 <_free_r+0x22>
 8012804:	6818      	ldr	r0, [r3, #0]
 8012806:	685b      	ldr	r3, [r3, #4]
 8012808:	6053      	str	r3, [r2, #4]
 801280a:	4408      	add	r0, r1
 801280c:	6010      	str	r0, [r2, #0]
 801280e:	e7da      	b.n	80127c6 <_free_r+0x22>
 8012810:	d902      	bls.n	8012818 <_free_r+0x74>
 8012812:	230c      	movs	r3, #12
 8012814:	602b      	str	r3, [r5, #0]
 8012816:	e7d6      	b.n	80127c6 <_free_r+0x22>
 8012818:	6820      	ldr	r0, [r4, #0]
 801281a:	1821      	adds	r1, r4, r0
 801281c:	428b      	cmp	r3, r1
 801281e:	bf04      	itt	eq
 8012820:	6819      	ldreq	r1, [r3, #0]
 8012822:	685b      	ldreq	r3, [r3, #4]
 8012824:	6063      	str	r3, [r4, #4]
 8012826:	bf04      	itt	eq
 8012828:	1809      	addeq	r1, r1, r0
 801282a:	6021      	streq	r1, [r4, #0]
 801282c:	6054      	str	r4, [r2, #4]
 801282e:	e7ca      	b.n	80127c6 <_free_r+0x22>
 8012830:	bd38      	pop	{r3, r4, r5, pc}
 8012832:	bf00      	nop
 8012834:	20000db0 	.word	0x20000db0

08012838 <sbrk_aligned>:
 8012838:	b570      	push	{r4, r5, r6, lr}
 801283a:	4e0f      	ldr	r6, [pc, #60]	@ (8012878 <sbrk_aligned+0x40>)
 801283c:	460c      	mov	r4, r1
 801283e:	6831      	ldr	r1, [r6, #0]
 8012840:	4605      	mov	r5, r0
 8012842:	b911      	cbnz	r1, 801284a <sbrk_aligned+0x12>
 8012844:	f000 fce8 	bl	8013218 <_sbrk_r>
 8012848:	6030      	str	r0, [r6, #0]
 801284a:	4621      	mov	r1, r4
 801284c:	4628      	mov	r0, r5
 801284e:	f000 fce3 	bl	8013218 <_sbrk_r>
 8012852:	1c43      	adds	r3, r0, #1
 8012854:	d103      	bne.n	801285e <sbrk_aligned+0x26>
 8012856:	f04f 34ff 	mov.w	r4, #4294967295
 801285a:	4620      	mov	r0, r4
 801285c:	bd70      	pop	{r4, r5, r6, pc}
 801285e:	1cc4      	adds	r4, r0, #3
 8012860:	f024 0403 	bic.w	r4, r4, #3
 8012864:	42a0      	cmp	r0, r4
 8012866:	d0f8      	beq.n	801285a <sbrk_aligned+0x22>
 8012868:	1a21      	subs	r1, r4, r0
 801286a:	4628      	mov	r0, r5
 801286c:	f000 fcd4 	bl	8013218 <_sbrk_r>
 8012870:	3001      	adds	r0, #1
 8012872:	d1f2      	bne.n	801285a <sbrk_aligned+0x22>
 8012874:	e7ef      	b.n	8012856 <sbrk_aligned+0x1e>
 8012876:	bf00      	nop
 8012878:	20000dac 	.word	0x20000dac

0801287c <_malloc_r>:
 801287c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012880:	1ccd      	adds	r5, r1, #3
 8012882:	f025 0503 	bic.w	r5, r5, #3
 8012886:	3508      	adds	r5, #8
 8012888:	2d0c      	cmp	r5, #12
 801288a:	bf38      	it	cc
 801288c:	250c      	movcc	r5, #12
 801288e:	2d00      	cmp	r5, #0
 8012890:	4606      	mov	r6, r0
 8012892:	db01      	blt.n	8012898 <_malloc_r+0x1c>
 8012894:	42a9      	cmp	r1, r5
 8012896:	d904      	bls.n	80128a2 <_malloc_r+0x26>
 8012898:	230c      	movs	r3, #12
 801289a:	6033      	str	r3, [r6, #0]
 801289c:	2000      	movs	r0, #0
 801289e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80128a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012978 <_malloc_r+0xfc>
 80128a6:	f000 f869 	bl	801297c <__malloc_lock>
 80128aa:	f8d8 3000 	ldr.w	r3, [r8]
 80128ae:	461c      	mov	r4, r3
 80128b0:	bb44      	cbnz	r4, 8012904 <_malloc_r+0x88>
 80128b2:	4629      	mov	r1, r5
 80128b4:	4630      	mov	r0, r6
 80128b6:	f7ff ffbf 	bl	8012838 <sbrk_aligned>
 80128ba:	1c43      	adds	r3, r0, #1
 80128bc:	4604      	mov	r4, r0
 80128be:	d158      	bne.n	8012972 <_malloc_r+0xf6>
 80128c0:	f8d8 4000 	ldr.w	r4, [r8]
 80128c4:	4627      	mov	r7, r4
 80128c6:	2f00      	cmp	r7, #0
 80128c8:	d143      	bne.n	8012952 <_malloc_r+0xd6>
 80128ca:	2c00      	cmp	r4, #0
 80128cc:	d04b      	beq.n	8012966 <_malloc_r+0xea>
 80128ce:	6823      	ldr	r3, [r4, #0]
 80128d0:	4639      	mov	r1, r7
 80128d2:	4630      	mov	r0, r6
 80128d4:	eb04 0903 	add.w	r9, r4, r3
 80128d8:	f000 fc9e 	bl	8013218 <_sbrk_r>
 80128dc:	4581      	cmp	r9, r0
 80128de:	d142      	bne.n	8012966 <_malloc_r+0xea>
 80128e0:	6821      	ldr	r1, [r4, #0]
 80128e2:	1a6d      	subs	r5, r5, r1
 80128e4:	4629      	mov	r1, r5
 80128e6:	4630      	mov	r0, r6
 80128e8:	f7ff ffa6 	bl	8012838 <sbrk_aligned>
 80128ec:	3001      	adds	r0, #1
 80128ee:	d03a      	beq.n	8012966 <_malloc_r+0xea>
 80128f0:	6823      	ldr	r3, [r4, #0]
 80128f2:	442b      	add	r3, r5
 80128f4:	6023      	str	r3, [r4, #0]
 80128f6:	f8d8 3000 	ldr.w	r3, [r8]
 80128fa:	685a      	ldr	r2, [r3, #4]
 80128fc:	bb62      	cbnz	r2, 8012958 <_malloc_r+0xdc>
 80128fe:	f8c8 7000 	str.w	r7, [r8]
 8012902:	e00f      	b.n	8012924 <_malloc_r+0xa8>
 8012904:	6822      	ldr	r2, [r4, #0]
 8012906:	1b52      	subs	r2, r2, r5
 8012908:	d420      	bmi.n	801294c <_malloc_r+0xd0>
 801290a:	2a0b      	cmp	r2, #11
 801290c:	d917      	bls.n	801293e <_malloc_r+0xc2>
 801290e:	1961      	adds	r1, r4, r5
 8012910:	42a3      	cmp	r3, r4
 8012912:	6025      	str	r5, [r4, #0]
 8012914:	bf18      	it	ne
 8012916:	6059      	strne	r1, [r3, #4]
 8012918:	6863      	ldr	r3, [r4, #4]
 801291a:	bf08      	it	eq
 801291c:	f8c8 1000 	streq.w	r1, [r8]
 8012920:	5162      	str	r2, [r4, r5]
 8012922:	604b      	str	r3, [r1, #4]
 8012924:	4630      	mov	r0, r6
 8012926:	f000 f82f 	bl	8012988 <__malloc_unlock>
 801292a:	f104 000b 	add.w	r0, r4, #11
 801292e:	1d23      	adds	r3, r4, #4
 8012930:	f020 0007 	bic.w	r0, r0, #7
 8012934:	1ac2      	subs	r2, r0, r3
 8012936:	bf1c      	itt	ne
 8012938:	1a1b      	subne	r3, r3, r0
 801293a:	50a3      	strne	r3, [r4, r2]
 801293c:	e7af      	b.n	801289e <_malloc_r+0x22>
 801293e:	6862      	ldr	r2, [r4, #4]
 8012940:	42a3      	cmp	r3, r4
 8012942:	bf0c      	ite	eq
 8012944:	f8c8 2000 	streq.w	r2, [r8]
 8012948:	605a      	strne	r2, [r3, #4]
 801294a:	e7eb      	b.n	8012924 <_malloc_r+0xa8>
 801294c:	4623      	mov	r3, r4
 801294e:	6864      	ldr	r4, [r4, #4]
 8012950:	e7ae      	b.n	80128b0 <_malloc_r+0x34>
 8012952:	463c      	mov	r4, r7
 8012954:	687f      	ldr	r7, [r7, #4]
 8012956:	e7b6      	b.n	80128c6 <_malloc_r+0x4a>
 8012958:	461a      	mov	r2, r3
 801295a:	685b      	ldr	r3, [r3, #4]
 801295c:	42a3      	cmp	r3, r4
 801295e:	d1fb      	bne.n	8012958 <_malloc_r+0xdc>
 8012960:	2300      	movs	r3, #0
 8012962:	6053      	str	r3, [r2, #4]
 8012964:	e7de      	b.n	8012924 <_malloc_r+0xa8>
 8012966:	230c      	movs	r3, #12
 8012968:	6033      	str	r3, [r6, #0]
 801296a:	4630      	mov	r0, r6
 801296c:	f000 f80c 	bl	8012988 <__malloc_unlock>
 8012970:	e794      	b.n	801289c <_malloc_r+0x20>
 8012972:	6005      	str	r5, [r0, #0]
 8012974:	e7d6      	b.n	8012924 <_malloc_r+0xa8>
 8012976:	bf00      	nop
 8012978:	20000db0 	.word	0x20000db0

0801297c <__malloc_lock>:
 801297c:	4801      	ldr	r0, [pc, #4]	@ (8012984 <__malloc_lock+0x8>)
 801297e:	f7ff bf00 	b.w	8012782 <__retarget_lock_acquire_recursive>
 8012982:	bf00      	nop
 8012984:	20000da8 	.word	0x20000da8

08012988 <__malloc_unlock>:
 8012988:	4801      	ldr	r0, [pc, #4]	@ (8012990 <__malloc_unlock+0x8>)
 801298a:	f7ff befb 	b.w	8012784 <__retarget_lock_release_recursive>
 801298e:	bf00      	nop
 8012990:	20000da8 	.word	0x20000da8

08012994 <__sfputc_r>:
 8012994:	6893      	ldr	r3, [r2, #8]
 8012996:	3b01      	subs	r3, #1
 8012998:	2b00      	cmp	r3, #0
 801299a:	b410      	push	{r4}
 801299c:	6093      	str	r3, [r2, #8]
 801299e:	da08      	bge.n	80129b2 <__sfputc_r+0x1e>
 80129a0:	6994      	ldr	r4, [r2, #24]
 80129a2:	42a3      	cmp	r3, r4
 80129a4:	db01      	blt.n	80129aa <__sfputc_r+0x16>
 80129a6:	290a      	cmp	r1, #10
 80129a8:	d103      	bne.n	80129b2 <__sfputc_r+0x1e>
 80129aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129ae:	f7ff bdc4 	b.w	801253a <__swbuf_r>
 80129b2:	6813      	ldr	r3, [r2, #0]
 80129b4:	1c58      	adds	r0, r3, #1
 80129b6:	6010      	str	r0, [r2, #0]
 80129b8:	7019      	strb	r1, [r3, #0]
 80129ba:	4608      	mov	r0, r1
 80129bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80129c0:	4770      	bx	lr

080129c2 <__sfputs_r>:
 80129c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129c4:	4606      	mov	r6, r0
 80129c6:	460f      	mov	r7, r1
 80129c8:	4614      	mov	r4, r2
 80129ca:	18d5      	adds	r5, r2, r3
 80129cc:	42ac      	cmp	r4, r5
 80129ce:	d101      	bne.n	80129d4 <__sfputs_r+0x12>
 80129d0:	2000      	movs	r0, #0
 80129d2:	e007      	b.n	80129e4 <__sfputs_r+0x22>
 80129d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80129d8:	463a      	mov	r2, r7
 80129da:	4630      	mov	r0, r6
 80129dc:	f7ff ffda 	bl	8012994 <__sfputc_r>
 80129e0:	1c43      	adds	r3, r0, #1
 80129e2:	d1f3      	bne.n	80129cc <__sfputs_r+0xa>
 80129e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080129e8 <_vfiprintf_r>:
 80129e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129ec:	460d      	mov	r5, r1
 80129ee:	b09d      	sub	sp, #116	@ 0x74
 80129f0:	4614      	mov	r4, r2
 80129f2:	4698      	mov	r8, r3
 80129f4:	4606      	mov	r6, r0
 80129f6:	b118      	cbz	r0, 8012a00 <_vfiprintf_r+0x18>
 80129f8:	6a03      	ldr	r3, [r0, #32]
 80129fa:	b90b      	cbnz	r3, 8012a00 <_vfiprintf_r+0x18>
 80129fc:	f7ff fcac 	bl	8012358 <__sinit>
 8012a00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a02:	07d9      	lsls	r1, r3, #31
 8012a04:	d405      	bmi.n	8012a12 <_vfiprintf_r+0x2a>
 8012a06:	89ab      	ldrh	r3, [r5, #12]
 8012a08:	059a      	lsls	r2, r3, #22
 8012a0a:	d402      	bmi.n	8012a12 <_vfiprintf_r+0x2a>
 8012a0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a0e:	f7ff feb8 	bl	8012782 <__retarget_lock_acquire_recursive>
 8012a12:	89ab      	ldrh	r3, [r5, #12]
 8012a14:	071b      	lsls	r3, r3, #28
 8012a16:	d501      	bpl.n	8012a1c <_vfiprintf_r+0x34>
 8012a18:	692b      	ldr	r3, [r5, #16]
 8012a1a:	b99b      	cbnz	r3, 8012a44 <_vfiprintf_r+0x5c>
 8012a1c:	4629      	mov	r1, r5
 8012a1e:	4630      	mov	r0, r6
 8012a20:	f7ff fdca 	bl	80125b8 <__swsetup_r>
 8012a24:	b170      	cbz	r0, 8012a44 <_vfiprintf_r+0x5c>
 8012a26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012a28:	07dc      	lsls	r4, r3, #31
 8012a2a:	d504      	bpl.n	8012a36 <_vfiprintf_r+0x4e>
 8012a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8012a30:	b01d      	add	sp, #116	@ 0x74
 8012a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a36:	89ab      	ldrh	r3, [r5, #12]
 8012a38:	0598      	lsls	r0, r3, #22
 8012a3a:	d4f7      	bmi.n	8012a2c <_vfiprintf_r+0x44>
 8012a3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012a3e:	f7ff fea1 	bl	8012784 <__retarget_lock_release_recursive>
 8012a42:	e7f3      	b.n	8012a2c <_vfiprintf_r+0x44>
 8012a44:	2300      	movs	r3, #0
 8012a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8012a48:	2320      	movs	r3, #32
 8012a4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012a4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8012a52:	2330      	movs	r3, #48	@ 0x30
 8012a54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012c04 <_vfiprintf_r+0x21c>
 8012a58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012a5c:	f04f 0901 	mov.w	r9, #1
 8012a60:	4623      	mov	r3, r4
 8012a62:	469a      	mov	sl, r3
 8012a64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012a68:	b10a      	cbz	r2, 8012a6e <_vfiprintf_r+0x86>
 8012a6a:	2a25      	cmp	r2, #37	@ 0x25
 8012a6c:	d1f9      	bne.n	8012a62 <_vfiprintf_r+0x7a>
 8012a6e:	ebba 0b04 	subs.w	fp, sl, r4
 8012a72:	d00b      	beq.n	8012a8c <_vfiprintf_r+0xa4>
 8012a74:	465b      	mov	r3, fp
 8012a76:	4622      	mov	r2, r4
 8012a78:	4629      	mov	r1, r5
 8012a7a:	4630      	mov	r0, r6
 8012a7c:	f7ff ffa1 	bl	80129c2 <__sfputs_r>
 8012a80:	3001      	adds	r0, #1
 8012a82:	f000 80a7 	beq.w	8012bd4 <_vfiprintf_r+0x1ec>
 8012a86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a88:	445a      	add	r2, fp
 8012a8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	f000 809f 	beq.w	8012bd4 <_vfiprintf_r+0x1ec>
 8012a96:	2300      	movs	r3, #0
 8012a98:	f04f 32ff 	mov.w	r2, #4294967295
 8012a9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012aa0:	f10a 0a01 	add.w	sl, sl, #1
 8012aa4:	9304      	str	r3, [sp, #16]
 8012aa6:	9307      	str	r3, [sp, #28]
 8012aa8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012aac:	931a      	str	r3, [sp, #104]	@ 0x68
 8012aae:	4654      	mov	r4, sl
 8012ab0:	2205      	movs	r2, #5
 8012ab2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ab6:	4853      	ldr	r0, [pc, #332]	@ (8012c04 <_vfiprintf_r+0x21c>)
 8012ab8:	f7ed fb6a 	bl	8000190 <memchr>
 8012abc:	9a04      	ldr	r2, [sp, #16]
 8012abe:	b9d8      	cbnz	r0, 8012af8 <_vfiprintf_r+0x110>
 8012ac0:	06d1      	lsls	r1, r2, #27
 8012ac2:	bf44      	itt	mi
 8012ac4:	2320      	movmi	r3, #32
 8012ac6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012aca:	0713      	lsls	r3, r2, #28
 8012acc:	bf44      	itt	mi
 8012ace:	232b      	movmi	r3, #43	@ 0x2b
 8012ad0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8012ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ada:	d015      	beq.n	8012b08 <_vfiprintf_r+0x120>
 8012adc:	9a07      	ldr	r2, [sp, #28]
 8012ade:	4654      	mov	r4, sl
 8012ae0:	2000      	movs	r0, #0
 8012ae2:	f04f 0c0a 	mov.w	ip, #10
 8012ae6:	4621      	mov	r1, r4
 8012ae8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012aec:	3b30      	subs	r3, #48	@ 0x30
 8012aee:	2b09      	cmp	r3, #9
 8012af0:	d94b      	bls.n	8012b8a <_vfiprintf_r+0x1a2>
 8012af2:	b1b0      	cbz	r0, 8012b22 <_vfiprintf_r+0x13a>
 8012af4:	9207      	str	r2, [sp, #28]
 8012af6:	e014      	b.n	8012b22 <_vfiprintf_r+0x13a>
 8012af8:	eba0 0308 	sub.w	r3, r0, r8
 8012afc:	fa09 f303 	lsl.w	r3, r9, r3
 8012b00:	4313      	orrs	r3, r2
 8012b02:	9304      	str	r3, [sp, #16]
 8012b04:	46a2      	mov	sl, r4
 8012b06:	e7d2      	b.n	8012aae <_vfiprintf_r+0xc6>
 8012b08:	9b03      	ldr	r3, [sp, #12]
 8012b0a:	1d19      	adds	r1, r3, #4
 8012b0c:	681b      	ldr	r3, [r3, #0]
 8012b0e:	9103      	str	r1, [sp, #12]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	bfbb      	ittet	lt
 8012b14:	425b      	neglt	r3, r3
 8012b16:	f042 0202 	orrlt.w	r2, r2, #2
 8012b1a:	9307      	strge	r3, [sp, #28]
 8012b1c:	9307      	strlt	r3, [sp, #28]
 8012b1e:	bfb8      	it	lt
 8012b20:	9204      	strlt	r2, [sp, #16]
 8012b22:	7823      	ldrb	r3, [r4, #0]
 8012b24:	2b2e      	cmp	r3, #46	@ 0x2e
 8012b26:	d10a      	bne.n	8012b3e <_vfiprintf_r+0x156>
 8012b28:	7863      	ldrb	r3, [r4, #1]
 8012b2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8012b2c:	d132      	bne.n	8012b94 <_vfiprintf_r+0x1ac>
 8012b2e:	9b03      	ldr	r3, [sp, #12]
 8012b30:	1d1a      	adds	r2, r3, #4
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	9203      	str	r2, [sp, #12]
 8012b36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012b3a:	3402      	adds	r4, #2
 8012b3c:	9305      	str	r3, [sp, #20]
 8012b3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012c14 <_vfiprintf_r+0x22c>
 8012b42:	7821      	ldrb	r1, [r4, #0]
 8012b44:	2203      	movs	r2, #3
 8012b46:	4650      	mov	r0, sl
 8012b48:	f7ed fb22 	bl	8000190 <memchr>
 8012b4c:	b138      	cbz	r0, 8012b5e <_vfiprintf_r+0x176>
 8012b4e:	9b04      	ldr	r3, [sp, #16]
 8012b50:	eba0 000a 	sub.w	r0, r0, sl
 8012b54:	2240      	movs	r2, #64	@ 0x40
 8012b56:	4082      	lsls	r2, r0
 8012b58:	4313      	orrs	r3, r2
 8012b5a:	3401      	adds	r4, #1
 8012b5c:	9304      	str	r3, [sp, #16]
 8012b5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b62:	4829      	ldr	r0, [pc, #164]	@ (8012c08 <_vfiprintf_r+0x220>)
 8012b64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012b68:	2206      	movs	r2, #6
 8012b6a:	f7ed fb11 	bl	8000190 <memchr>
 8012b6e:	2800      	cmp	r0, #0
 8012b70:	d03f      	beq.n	8012bf2 <_vfiprintf_r+0x20a>
 8012b72:	4b26      	ldr	r3, [pc, #152]	@ (8012c0c <_vfiprintf_r+0x224>)
 8012b74:	bb1b      	cbnz	r3, 8012bbe <_vfiprintf_r+0x1d6>
 8012b76:	9b03      	ldr	r3, [sp, #12]
 8012b78:	3307      	adds	r3, #7
 8012b7a:	f023 0307 	bic.w	r3, r3, #7
 8012b7e:	3308      	adds	r3, #8
 8012b80:	9303      	str	r3, [sp, #12]
 8012b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b84:	443b      	add	r3, r7
 8012b86:	9309      	str	r3, [sp, #36]	@ 0x24
 8012b88:	e76a      	b.n	8012a60 <_vfiprintf_r+0x78>
 8012b8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8012b8e:	460c      	mov	r4, r1
 8012b90:	2001      	movs	r0, #1
 8012b92:	e7a8      	b.n	8012ae6 <_vfiprintf_r+0xfe>
 8012b94:	2300      	movs	r3, #0
 8012b96:	3401      	adds	r4, #1
 8012b98:	9305      	str	r3, [sp, #20]
 8012b9a:	4619      	mov	r1, r3
 8012b9c:	f04f 0c0a 	mov.w	ip, #10
 8012ba0:	4620      	mov	r0, r4
 8012ba2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ba6:	3a30      	subs	r2, #48	@ 0x30
 8012ba8:	2a09      	cmp	r2, #9
 8012baa:	d903      	bls.n	8012bb4 <_vfiprintf_r+0x1cc>
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d0c6      	beq.n	8012b3e <_vfiprintf_r+0x156>
 8012bb0:	9105      	str	r1, [sp, #20]
 8012bb2:	e7c4      	b.n	8012b3e <_vfiprintf_r+0x156>
 8012bb4:	fb0c 2101 	mla	r1, ip, r1, r2
 8012bb8:	4604      	mov	r4, r0
 8012bba:	2301      	movs	r3, #1
 8012bbc:	e7f0      	b.n	8012ba0 <_vfiprintf_r+0x1b8>
 8012bbe:	ab03      	add	r3, sp, #12
 8012bc0:	9300      	str	r3, [sp, #0]
 8012bc2:	462a      	mov	r2, r5
 8012bc4:	4b12      	ldr	r3, [pc, #72]	@ (8012c10 <_vfiprintf_r+0x228>)
 8012bc6:	a904      	add	r1, sp, #16
 8012bc8:	4630      	mov	r0, r6
 8012bca:	f3af 8000 	nop.w
 8012bce:	4607      	mov	r7, r0
 8012bd0:	1c78      	adds	r0, r7, #1
 8012bd2:	d1d6      	bne.n	8012b82 <_vfiprintf_r+0x19a>
 8012bd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012bd6:	07d9      	lsls	r1, r3, #31
 8012bd8:	d405      	bmi.n	8012be6 <_vfiprintf_r+0x1fe>
 8012bda:	89ab      	ldrh	r3, [r5, #12]
 8012bdc:	059a      	lsls	r2, r3, #22
 8012bde:	d402      	bmi.n	8012be6 <_vfiprintf_r+0x1fe>
 8012be0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012be2:	f7ff fdcf 	bl	8012784 <__retarget_lock_release_recursive>
 8012be6:	89ab      	ldrh	r3, [r5, #12]
 8012be8:	065b      	lsls	r3, r3, #25
 8012bea:	f53f af1f 	bmi.w	8012a2c <_vfiprintf_r+0x44>
 8012bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bf0:	e71e      	b.n	8012a30 <_vfiprintf_r+0x48>
 8012bf2:	ab03      	add	r3, sp, #12
 8012bf4:	9300      	str	r3, [sp, #0]
 8012bf6:	462a      	mov	r2, r5
 8012bf8:	4b05      	ldr	r3, [pc, #20]	@ (8012c10 <_vfiprintf_r+0x228>)
 8012bfa:	a904      	add	r1, sp, #16
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f000 f879 	bl	8012cf4 <_printf_i>
 8012c02:	e7e4      	b.n	8012bce <_vfiprintf_r+0x1e6>
 8012c04:	080150f4 	.word	0x080150f4
 8012c08:	080150fe 	.word	0x080150fe
 8012c0c:	00000000 	.word	0x00000000
 8012c10:	080129c3 	.word	0x080129c3
 8012c14:	080150fa 	.word	0x080150fa

08012c18 <_printf_common>:
 8012c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c1c:	4616      	mov	r6, r2
 8012c1e:	4698      	mov	r8, r3
 8012c20:	688a      	ldr	r2, [r1, #8]
 8012c22:	690b      	ldr	r3, [r1, #16]
 8012c24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012c28:	4293      	cmp	r3, r2
 8012c2a:	bfb8      	it	lt
 8012c2c:	4613      	movlt	r3, r2
 8012c2e:	6033      	str	r3, [r6, #0]
 8012c30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012c34:	4607      	mov	r7, r0
 8012c36:	460c      	mov	r4, r1
 8012c38:	b10a      	cbz	r2, 8012c3e <_printf_common+0x26>
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	6033      	str	r3, [r6, #0]
 8012c3e:	6823      	ldr	r3, [r4, #0]
 8012c40:	0699      	lsls	r1, r3, #26
 8012c42:	bf42      	ittt	mi
 8012c44:	6833      	ldrmi	r3, [r6, #0]
 8012c46:	3302      	addmi	r3, #2
 8012c48:	6033      	strmi	r3, [r6, #0]
 8012c4a:	6825      	ldr	r5, [r4, #0]
 8012c4c:	f015 0506 	ands.w	r5, r5, #6
 8012c50:	d106      	bne.n	8012c60 <_printf_common+0x48>
 8012c52:	f104 0a19 	add.w	sl, r4, #25
 8012c56:	68e3      	ldr	r3, [r4, #12]
 8012c58:	6832      	ldr	r2, [r6, #0]
 8012c5a:	1a9b      	subs	r3, r3, r2
 8012c5c:	42ab      	cmp	r3, r5
 8012c5e:	dc26      	bgt.n	8012cae <_printf_common+0x96>
 8012c60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012c64:	6822      	ldr	r2, [r4, #0]
 8012c66:	3b00      	subs	r3, #0
 8012c68:	bf18      	it	ne
 8012c6a:	2301      	movne	r3, #1
 8012c6c:	0692      	lsls	r2, r2, #26
 8012c6e:	d42b      	bmi.n	8012cc8 <_printf_common+0xb0>
 8012c70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012c74:	4641      	mov	r1, r8
 8012c76:	4638      	mov	r0, r7
 8012c78:	47c8      	blx	r9
 8012c7a:	3001      	adds	r0, #1
 8012c7c:	d01e      	beq.n	8012cbc <_printf_common+0xa4>
 8012c7e:	6823      	ldr	r3, [r4, #0]
 8012c80:	6922      	ldr	r2, [r4, #16]
 8012c82:	f003 0306 	and.w	r3, r3, #6
 8012c86:	2b04      	cmp	r3, #4
 8012c88:	bf02      	ittt	eq
 8012c8a:	68e5      	ldreq	r5, [r4, #12]
 8012c8c:	6833      	ldreq	r3, [r6, #0]
 8012c8e:	1aed      	subeq	r5, r5, r3
 8012c90:	68a3      	ldr	r3, [r4, #8]
 8012c92:	bf0c      	ite	eq
 8012c94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012c98:	2500      	movne	r5, #0
 8012c9a:	4293      	cmp	r3, r2
 8012c9c:	bfc4      	itt	gt
 8012c9e:	1a9b      	subgt	r3, r3, r2
 8012ca0:	18ed      	addgt	r5, r5, r3
 8012ca2:	2600      	movs	r6, #0
 8012ca4:	341a      	adds	r4, #26
 8012ca6:	42b5      	cmp	r5, r6
 8012ca8:	d11a      	bne.n	8012ce0 <_printf_common+0xc8>
 8012caa:	2000      	movs	r0, #0
 8012cac:	e008      	b.n	8012cc0 <_printf_common+0xa8>
 8012cae:	2301      	movs	r3, #1
 8012cb0:	4652      	mov	r2, sl
 8012cb2:	4641      	mov	r1, r8
 8012cb4:	4638      	mov	r0, r7
 8012cb6:	47c8      	blx	r9
 8012cb8:	3001      	adds	r0, #1
 8012cba:	d103      	bne.n	8012cc4 <_printf_common+0xac>
 8012cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cc4:	3501      	adds	r5, #1
 8012cc6:	e7c6      	b.n	8012c56 <_printf_common+0x3e>
 8012cc8:	18e1      	adds	r1, r4, r3
 8012cca:	1c5a      	adds	r2, r3, #1
 8012ccc:	2030      	movs	r0, #48	@ 0x30
 8012cce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012cd2:	4422      	add	r2, r4
 8012cd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012cd8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012cdc:	3302      	adds	r3, #2
 8012cde:	e7c7      	b.n	8012c70 <_printf_common+0x58>
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	4622      	mov	r2, r4
 8012ce4:	4641      	mov	r1, r8
 8012ce6:	4638      	mov	r0, r7
 8012ce8:	47c8      	blx	r9
 8012cea:	3001      	adds	r0, #1
 8012cec:	d0e6      	beq.n	8012cbc <_printf_common+0xa4>
 8012cee:	3601      	adds	r6, #1
 8012cf0:	e7d9      	b.n	8012ca6 <_printf_common+0x8e>
	...

08012cf4 <_printf_i>:
 8012cf4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012cf8:	7e0f      	ldrb	r7, [r1, #24]
 8012cfa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012cfc:	2f78      	cmp	r7, #120	@ 0x78
 8012cfe:	4691      	mov	r9, r2
 8012d00:	4680      	mov	r8, r0
 8012d02:	460c      	mov	r4, r1
 8012d04:	469a      	mov	sl, r3
 8012d06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012d0a:	d807      	bhi.n	8012d1c <_printf_i+0x28>
 8012d0c:	2f62      	cmp	r7, #98	@ 0x62
 8012d0e:	d80a      	bhi.n	8012d26 <_printf_i+0x32>
 8012d10:	2f00      	cmp	r7, #0
 8012d12:	f000 80d2 	beq.w	8012eba <_printf_i+0x1c6>
 8012d16:	2f58      	cmp	r7, #88	@ 0x58
 8012d18:	f000 80b9 	beq.w	8012e8e <_printf_i+0x19a>
 8012d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012d24:	e03a      	b.n	8012d9c <_printf_i+0xa8>
 8012d26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012d2a:	2b15      	cmp	r3, #21
 8012d2c:	d8f6      	bhi.n	8012d1c <_printf_i+0x28>
 8012d2e:	a101      	add	r1, pc, #4	@ (adr r1, 8012d34 <_printf_i+0x40>)
 8012d30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d34:	08012d8d 	.word	0x08012d8d
 8012d38:	08012da1 	.word	0x08012da1
 8012d3c:	08012d1d 	.word	0x08012d1d
 8012d40:	08012d1d 	.word	0x08012d1d
 8012d44:	08012d1d 	.word	0x08012d1d
 8012d48:	08012d1d 	.word	0x08012d1d
 8012d4c:	08012da1 	.word	0x08012da1
 8012d50:	08012d1d 	.word	0x08012d1d
 8012d54:	08012d1d 	.word	0x08012d1d
 8012d58:	08012d1d 	.word	0x08012d1d
 8012d5c:	08012d1d 	.word	0x08012d1d
 8012d60:	08012ea1 	.word	0x08012ea1
 8012d64:	08012dcb 	.word	0x08012dcb
 8012d68:	08012e5b 	.word	0x08012e5b
 8012d6c:	08012d1d 	.word	0x08012d1d
 8012d70:	08012d1d 	.word	0x08012d1d
 8012d74:	08012ec3 	.word	0x08012ec3
 8012d78:	08012d1d 	.word	0x08012d1d
 8012d7c:	08012dcb 	.word	0x08012dcb
 8012d80:	08012d1d 	.word	0x08012d1d
 8012d84:	08012d1d 	.word	0x08012d1d
 8012d88:	08012e63 	.word	0x08012e63
 8012d8c:	6833      	ldr	r3, [r6, #0]
 8012d8e:	1d1a      	adds	r2, r3, #4
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	6032      	str	r2, [r6, #0]
 8012d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012d98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012d9c:	2301      	movs	r3, #1
 8012d9e:	e09d      	b.n	8012edc <_printf_i+0x1e8>
 8012da0:	6833      	ldr	r3, [r6, #0]
 8012da2:	6820      	ldr	r0, [r4, #0]
 8012da4:	1d19      	adds	r1, r3, #4
 8012da6:	6031      	str	r1, [r6, #0]
 8012da8:	0606      	lsls	r6, r0, #24
 8012daa:	d501      	bpl.n	8012db0 <_printf_i+0xbc>
 8012dac:	681d      	ldr	r5, [r3, #0]
 8012dae:	e003      	b.n	8012db8 <_printf_i+0xc4>
 8012db0:	0645      	lsls	r5, r0, #25
 8012db2:	d5fb      	bpl.n	8012dac <_printf_i+0xb8>
 8012db4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012db8:	2d00      	cmp	r5, #0
 8012dba:	da03      	bge.n	8012dc4 <_printf_i+0xd0>
 8012dbc:	232d      	movs	r3, #45	@ 0x2d
 8012dbe:	426d      	negs	r5, r5
 8012dc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012dc4:	4859      	ldr	r0, [pc, #356]	@ (8012f2c <_printf_i+0x238>)
 8012dc6:	230a      	movs	r3, #10
 8012dc8:	e011      	b.n	8012dee <_printf_i+0xfa>
 8012dca:	6821      	ldr	r1, [r4, #0]
 8012dcc:	6833      	ldr	r3, [r6, #0]
 8012dce:	0608      	lsls	r0, r1, #24
 8012dd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8012dd4:	d402      	bmi.n	8012ddc <_printf_i+0xe8>
 8012dd6:	0649      	lsls	r1, r1, #25
 8012dd8:	bf48      	it	mi
 8012dda:	b2ad      	uxthmi	r5, r5
 8012ddc:	2f6f      	cmp	r7, #111	@ 0x6f
 8012dde:	4853      	ldr	r0, [pc, #332]	@ (8012f2c <_printf_i+0x238>)
 8012de0:	6033      	str	r3, [r6, #0]
 8012de2:	bf14      	ite	ne
 8012de4:	230a      	movne	r3, #10
 8012de6:	2308      	moveq	r3, #8
 8012de8:	2100      	movs	r1, #0
 8012dea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012dee:	6866      	ldr	r6, [r4, #4]
 8012df0:	60a6      	str	r6, [r4, #8]
 8012df2:	2e00      	cmp	r6, #0
 8012df4:	bfa2      	ittt	ge
 8012df6:	6821      	ldrge	r1, [r4, #0]
 8012df8:	f021 0104 	bicge.w	r1, r1, #4
 8012dfc:	6021      	strge	r1, [r4, #0]
 8012dfe:	b90d      	cbnz	r5, 8012e04 <_printf_i+0x110>
 8012e00:	2e00      	cmp	r6, #0
 8012e02:	d04b      	beq.n	8012e9c <_printf_i+0x1a8>
 8012e04:	4616      	mov	r6, r2
 8012e06:	fbb5 f1f3 	udiv	r1, r5, r3
 8012e0a:	fb03 5711 	mls	r7, r3, r1, r5
 8012e0e:	5dc7      	ldrb	r7, [r0, r7]
 8012e10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012e14:	462f      	mov	r7, r5
 8012e16:	42bb      	cmp	r3, r7
 8012e18:	460d      	mov	r5, r1
 8012e1a:	d9f4      	bls.n	8012e06 <_printf_i+0x112>
 8012e1c:	2b08      	cmp	r3, #8
 8012e1e:	d10b      	bne.n	8012e38 <_printf_i+0x144>
 8012e20:	6823      	ldr	r3, [r4, #0]
 8012e22:	07df      	lsls	r7, r3, #31
 8012e24:	d508      	bpl.n	8012e38 <_printf_i+0x144>
 8012e26:	6923      	ldr	r3, [r4, #16]
 8012e28:	6861      	ldr	r1, [r4, #4]
 8012e2a:	4299      	cmp	r1, r3
 8012e2c:	bfde      	ittt	le
 8012e2e:	2330      	movle	r3, #48	@ 0x30
 8012e30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012e34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012e38:	1b92      	subs	r2, r2, r6
 8012e3a:	6122      	str	r2, [r4, #16]
 8012e3c:	f8cd a000 	str.w	sl, [sp]
 8012e40:	464b      	mov	r3, r9
 8012e42:	aa03      	add	r2, sp, #12
 8012e44:	4621      	mov	r1, r4
 8012e46:	4640      	mov	r0, r8
 8012e48:	f7ff fee6 	bl	8012c18 <_printf_common>
 8012e4c:	3001      	adds	r0, #1
 8012e4e:	d14a      	bne.n	8012ee6 <_printf_i+0x1f2>
 8012e50:	f04f 30ff 	mov.w	r0, #4294967295
 8012e54:	b004      	add	sp, #16
 8012e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e5a:	6823      	ldr	r3, [r4, #0]
 8012e5c:	f043 0320 	orr.w	r3, r3, #32
 8012e60:	6023      	str	r3, [r4, #0]
 8012e62:	4833      	ldr	r0, [pc, #204]	@ (8012f30 <_printf_i+0x23c>)
 8012e64:	2778      	movs	r7, #120	@ 0x78
 8012e66:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012e6a:	6823      	ldr	r3, [r4, #0]
 8012e6c:	6831      	ldr	r1, [r6, #0]
 8012e6e:	061f      	lsls	r7, r3, #24
 8012e70:	f851 5b04 	ldr.w	r5, [r1], #4
 8012e74:	d402      	bmi.n	8012e7c <_printf_i+0x188>
 8012e76:	065f      	lsls	r7, r3, #25
 8012e78:	bf48      	it	mi
 8012e7a:	b2ad      	uxthmi	r5, r5
 8012e7c:	6031      	str	r1, [r6, #0]
 8012e7e:	07d9      	lsls	r1, r3, #31
 8012e80:	bf44      	itt	mi
 8012e82:	f043 0320 	orrmi.w	r3, r3, #32
 8012e86:	6023      	strmi	r3, [r4, #0]
 8012e88:	b11d      	cbz	r5, 8012e92 <_printf_i+0x19e>
 8012e8a:	2310      	movs	r3, #16
 8012e8c:	e7ac      	b.n	8012de8 <_printf_i+0xf4>
 8012e8e:	4827      	ldr	r0, [pc, #156]	@ (8012f2c <_printf_i+0x238>)
 8012e90:	e7e9      	b.n	8012e66 <_printf_i+0x172>
 8012e92:	6823      	ldr	r3, [r4, #0]
 8012e94:	f023 0320 	bic.w	r3, r3, #32
 8012e98:	6023      	str	r3, [r4, #0]
 8012e9a:	e7f6      	b.n	8012e8a <_printf_i+0x196>
 8012e9c:	4616      	mov	r6, r2
 8012e9e:	e7bd      	b.n	8012e1c <_printf_i+0x128>
 8012ea0:	6833      	ldr	r3, [r6, #0]
 8012ea2:	6825      	ldr	r5, [r4, #0]
 8012ea4:	6961      	ldr	r1, [r4, #20]
 8012ea6:	1d18      	adds	r0, r3, #4
 8012ea8:	6030      	str	r0, [r6, #0]
 8012eaa:	062e      	lsls	r6, r5, #24
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	d501      	bpl.n	8012eb4 <_printf_i+0x1c0>
 8012eb0:	6019      	str	r1, [r3, #0]
 8012eb2:	e002      	b.n	8012eba <_printf_i+0x1c6>
 8012eb4:	0668      	lsls	r0, r5, #25
 8012eb6:	d5fb      	bpl.n	8012eb0 <_printf_i+0x1bc>
 8012eb8:	8019      	strh	r1, [r3, #0]
 8012eba:	2300      	movs	r3, #0
 8012ebc:	6123      	str	r3, [r4, #16]
 8012ebe:	4616      	mov	r6, r2
 8012ec0:	e7bc      	b.n	8012e3c <_printf_i+0x148>
 8012ec2:	6833      	ldr	r3, [r6, #0]
 8012ec4:	1d1a      	adds	r2, r3, #4
 8012ec6:	6032      	str	r2, [r6, #0]
 8012ec8:	681e      	ldr	r6, [r3, #0]
 8012eca:	6862      	ldr	r2, [r4, #4]
 8012ecc:	2100      	movs	r1, #0
 8012ece:	4630      	mov	r0, r6
 8012ed0:	f7ed f95e 	bl	8000190 <memchr>
 8012ed4:	b108      	cbz	r0, 8012eda <_printf_i+0x1e6>
 8012ed6:	1b80      	subs	r0, r0, r6
 8012ed8:	6060      	str	r0, [r4, #4]
 8012eda:	6863      	ldr	r3, [r4, #4]
 8012edc:	6123      	str	r3, [r4, #16]
 8012ede:	2300      	movs	r3, #0
 8012ee0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012ee4:	e7aa      	b.n	8012e3c <_printf_i+0x148>
 8012ee6:	6923      	ldr	r3, [r4, #16]
 8012ee8:	4632      	mov	r2, r6
 8012eea:	4649      	mov	r1, r9
 8012eec:	4640      	mov	r0, r8
 8012eee:	47d0      	blx	sl
 8012ef0:	3001      	adds	r0, #1
 8012ef2:	d0ad      	beq.n	8012e50 <_printf_i+0x15c>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	079b      	lsls	r3, r3, #30
 8012ef8:	d413      	bmi.n	8012f22 <_printf_i+0x22e>
 8012efa:	68e0      	ldr	r0, [r4, #12]
 8012efc:	9b03      	ldr	r3, [sp, #12]
 8012efe:	4298      	cmp	r0, r3
 8012f00:	bfb8      	it	lt
 8012f02:	4618      	movlt	r0, r3
 8012f04:	e7a6      	b.n	8012e54 <_printf_i+0x160>
 8012f06:	2301      	movs	r3, #1
 8012f08:	4632      	mov	r2, r6
 8012f0a:	4649      	mov	r1, r9
 8012f0c:	4640      	mov	r0, r8
 8012f0e:	47d0      	blx	sl
 8012f10:	3001      	adds	r0, #1
 8012f12:	d09d      	beq.n	8012e50 <_printf_i+0x15c>
 8012f14:	3501      	adds	r5, #1
 8012f16:	68e3      	ldr	r3, [r4, #12]
 8012f18:	9903      	ldr	r1, [sp, #12]
 8012f1a:	1a5b      	subs	r3, r3, r1
 8012f1c:	42ab      	cmp	r3, r5
 8012f1e:	dcf2      	bgt.n	8012f06 <_printf_i+0x212>
 8012f20:	e7eb      	b.n	8012efa <_printf_i+0x206>
 8012f22:	2500      	movs	r5, #0
 8012f24:	f104 0619 	add.w	r6, r4, #25
 8012f28:	e7f5      	b.n	8012f16 <_printf_i+0x222>
 8012f2a:	bf00      	nop
 8012f2c:	08015105 	.word	0x08015105
 8012f30:	08015116 	.word	0x08015116

08012f34 <__sflush_r>:
 8012f34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f3c:	0716      	lsls	r6, r2, #28
 8012f3e:	4605      	mov	r5, r0
 8012f40:	460c      	mov	r4, r1
 8012f42:	d454      	bmi.n	8012fee <__sflush_r+0xba>
 8012f44:	684b      	ldr	r3, [r1, #4]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	dc02      	bgt.n	8012f50 <__sflush_r+0x1c>
 8012f4a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	dd48      	ble.n	8012fe2 <__sflush_r+0xae>
 8012f50:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f52:	2e00      	cmp	r6, #0
 8012f54:	d045      	beq.n	8012fe2 <__sflush_r+0xae>
 8012f56:	2300      	movs	r3, #0
 8012f58:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8012f5c:	682f      	ldr	r7, [r5, #0]
 8012f5e:	6a21      	ldr	r1, [r4, #32]
 8012f60:	602b      	str	r3, [r5, #0]
 8012f62:	d030      	beq.n	8012fc6 <__sflush_r+0x92>
 8012f64:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8012f66:	89a3      	ldrh	r3, [r4, #12]
 8012f68:	0759      	lsls	r1, r3, #29
 8012f6a:	d505      	bpl.n	8012f78 <__sflush_r+0x44>
 8012f6c:	6863      	ldr	r3, [r4, #4]
 8012f6e:	1ad2      	subs	r2, r2, r3
 8012f70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8012f72:	b10b      	cbz	r3, 8012f78 <__sflush_r+0x44>
 8012f74:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8012f76:	1ad2      	subs	r2, r2, r3
 8012f78:	2300      	movs	r3, #0
 8012f7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8012f7c:	6a21      	ldr	r1, [r4, #32]
 8012f7e:	4628      	mov	r0, r5
 8012f80:	47b0      	blx	r6
 8012f82:	1c43      	adds	r3, r0, #1
 8012f84:	89a3      	ldrh	r3, [r4, #12]
 8012f86:	d106      	bne.n	8012f96 <__sflush_r+0x62>
 8012f88:	6829      	ldr	r1, [r5, #0]
 8012f8a:	291d      	cmp	r1, #29
 8012f8c:	d82b      	bhi.n	8012fe6 <__sflush_r+0xb2>
 8012f8e:	4a2a      	ldr	r2, [pc, #168]	@ (8013038 <__sflush_r+0x104>)
 8012f90:	410a      	asrs	r2, r1
 8012f92:	07d6      	lsls	r6, r2, #31
 8012f94:	d427      	bmi.n	8012fe6 <__sflush_r+0xb2>
 8012f96:	2200      	movs	r2, #0
 8012f98:	6062      	str	r2, [r4, #4]
 8012f9a:	04d9      	lsls	r1, r3, #19
 8012f9c:	6922      	ldr	r2, [r4, #16]
 8012f9e:	6022      	str	r2, [r4, #0]
 8012fa0:	d504      	bpl.n	8012fac <__sflush_r+0x78>
 8012fa2:	1c42      	adds	r2, r0, #1
 8012fa4:	d101      	bne.n	8012faa <__sflush_r+0x76>
 8012fa6:	682b      	ldr	r3, [r5, #0]
 8012fa8:	b903      	cbnz	r3, 8012fac <__sflush_r+0x78>
 8012faa:	6560      	str	r0, [r4, #84]	@ 0x54
 8012fac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012fae:	602f      	str	r7, [r5, #0]
 8012fb0:	b1b9      	cbz	r1, 8012fe2 <__sflush_r+0xae>
 8012fb2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012fb6:	4299      	cmp	r1, r3
 8012fb8:	d002      	beq.n	8012fc0 <__sflush_r+0x8c>
 8012fba:	4628      	mov	r0, r5
 8012fbc:	f7ff fbf2 	bl	80127a4 <_free_r>
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	6363      	str	r3, [r4, #52]	@ 0x34
 8012fc4:	e00d      	b.n	8012fe2 <__sflush_r+0xae>
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	4628      	mov	r0, r5
 8012fca:	47b0      	blx	r6
 8012fcc:	4602      	mov	r2, r0
 8012fce:	1c50      	adds	r0, r2, #1
 8012fd0:	d1c9      	bne.n	8012f66 <__sflush_r+0x32>
 8012fd2:	682b      	ldr	r3, [r5, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d0c6      	beq.n	8012f66 <__sflush_r+0x32>
 8012fd8:	2b1d      	cmp	r3, #29
 8012fda:	d001      	beq.n	8012fe0 <__sflush_r+0xac>
 8012fdc:	2b16      	cmp	r3, #22
 8012fde:	d11e      	bne.n	801301e <__sflush_r+0xea>
 8012fe0:	602f      	str	r7, [r5, #0]
 8012fe2:	2000      	movs	r0, #0
 8012fe4:	e022      	b.n	801302c <__sflush_r+0xf8>
 8012fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fea:	b21b      	sxth	r3, r3
 8012fec:	e01b      	b.n	8013026 <__sflush_r+0xf2>
 8012fee:	690f      	ldr	r7, [r1, #16]
 8012ff0:	2f00      	cmp	r7, #0
 8012ff2:	d0f6      	beq.n	8012fe2 <__sflush_r+0xae>
 8012ff4:	0793      	lsls	r3, r2, #30
 8012ff6:	680e      	ldr	r6, [r1, #0]
 8012ff8:	bf08      	it	eq
 8012ffa:	694b      	ldreq	r3, [r1, #20]
 8012ffc:	600f      	str	r7, [r1, #0]
 8012ffe:	bf18      	it	ne
 8013000:	2300      	movne	r3, #0
 8013002:	eba6 0807 	sub.w	r8, r6, r7
 8013006:	608b      	str	r3, [r1, #8]
 8013008:	f1b8 0f00 	cmp.w	r8, #0
 801300c:	dde9      	ble.n	8012fe2 <__sflush_r+0xae>
 801300e:	6a21      	ldr	r1, [r4, #32]
 8013010:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8013012:	4643      	mov	r3, r8
 8013014:	463a      	mov	r2, r7
 8013016:	4628      	mov	r0, r5
 8013018:	47b0      	blx	r6
 801301a:	2800      	cmp	r0, #0
 801301c:	dc08      	bgt.n	8013030 <__sflush_r+0xfc>
 801301e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013022:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013026:	81a3      	strh	r3, [r4, #12]
 8013028:	f04f 30ff 	mov.w	r0, #4294967295
 801302c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013030:	4407      	add	r7, r0
 8013032:	eba8 0800 	sub.w	r8, r8, r0
 8013036:	e7e7      	b.n	8013008 <__sflush_r+0xd4>
 8013038:	dfbffffe 	.word	0xdfbffffe

0801303c <_fflush_r>:
 801303c:	b538      	push	{r3, r4, r5, lr}
 801303e:	690b      	ldr	r3, [r1, #16]
 8013040:	4605      	mov	r5, r0
 8013042:	460c      	mov	r4, r1
 8013044:	b913      	cbnz	r3, 801304c <_fflush_r+0x10>
 8013046:	2500      	movs	r5, #0
 8013048:	4628      	mov	r0, r5
 801304a:	bd38      	pop	{r3, r4, r5, pc}
 801304c:	b118      	cbz	r0, 8013056 <_fflush_r+0x1a>
 801304e:	6a03      	ldr	r3, [r0, #32]
 8013050:	b90b      	cbnz	r3, 8013056 <_fflush_r+0x1a>
 8013052:	f7ff f981 	bl	8012358 <__sinit>
 8013056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d0f3      	beq.n	8013046 <_fflush_r+0xa>
 801305e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8013060:	07d0      	lsls	r0, r2, #31
 8013062:	d404      	bmi.n	801306e <_fflush_r+0x32>
 8013064:	0599      	lsls	r1, r3, #22
 8013066:	d402      	bmi.n	801306e <_fflush_r+0x32>
 8013068:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801306a:	f7ff fb8a 	bl	8012782 <__retarget_lock_acquire_recursive>
 801306e:	4628      	mov	r0, r5
 8013070:	4621      	mov	r1, r4
 8013072:	f7ff ff5f 	bl	8012f34 <__sflush_r>
 8013076:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013078:	07da      	lsls	r2, r3, #31
 801307a:	4605      	mov	r5, r0
 801307c:	d4e4      	bmi.n	8013048 <_fflush_r+0xc>
 801307e:	89a3      	ldrh	r3, [r4, #12]
 8013080:	059b      	lsls	r3, r3, #22
 8013082:	d4e1      	bmi.n	8013048 <_fflush_r+0xc>
 8013084:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013086:	f7ff fb7d 	bl	8012784 <__retarget_lock_release_recursive>
 801308a:	e7dd      	b.n	8013048 <_fflush_r+0xc>

0801308c <__swhatbuf_r>:
 801308c:	b570      	push	{r4, r5, r6, lr}
 801308e:	460c      	mov	r4, r1
 8013090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013094:	2900      	cmp	r1, #0
 8013096:	b096      	sub	sp, #88	@ 0x58
 8013098:	4615      	mov	r5, r2
 801309a:	461e      	mov	r6, r3
 801309c:	da0d      	bge.n	80130ba <__swhatbuf_r+0x2e>
 801309e:	89a3      	ldrh	r3, [r4, #12]
 80130a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80130a4:	f04f 0100 	mov.w	r1, #0
 80130a8:	bf14      	ite	ne
 80130aa:	2340      	movne	r3, #64	@ 0x40
 80130ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80130b0:	2000      	movs	r0, #0
 80130b2:	6031      	str	r1, [r6, #0]
 80130b4:	602b      	str	r3, [r5, #0]
 80130b6:	b016      	add	sp, #88	@ 0x58
 80130b8:	bd70      	pop	{r4, r5, r6, pc}
 80130ba:	466a      	mov	r2, sp
 80130bc:	f000 f88a 	bl	80131d4 <_fstat_r>
 80130c0:	2800      	cmp	r0, #0
 80130c2:	dbec      	blt.n	801309e <__swhatbuf_r+0x12>
 80130c4:	9901      	ldr	r1, [sp, #4]
 80130c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80130ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80130ce:	4259      	negs	r1, r3
 80130d0:	4159      	adcs	r1, r3
 80130d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80130d6:	e7eb      	b.n	80130b0 <__swhatbuf_r+0x24>

080130d8 <__smakebuf_r>:
 80130d8:	898b      	ldrh	r3, [r1, #12]
 80130da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130dc:	079d      	lsls	r5, r3, #30
 80130de:	4606      	mov	r6, r0
 80130e0:	460c      	mov	r4, r1
 80130e2:	d507      	bpl.n	80130f4 <__smakebuf_r+0x1c>
 80130e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	2301      	movs	r3, #1
 80130ee:	6163      	str	r3, [r4, #20]
 80130f0:	b003      	add	sp, #12
 80130f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130f4:	ab01      	add	r3, sp, #4
 80130f6:	466a      	mov	r2, sp
 80130f8:	f7ff ffc8 	bl	801308c <__swhatbuf_r>
 80130fc:	9f00      	ldr	r7, [sp, #0]
 80130fe:	4605      	mov	r5, r0
 8013100:	4639      	mov	r1, r7
 8013102:	4630      	mov	r0, r6
 8013104:	f7ff fbba 	bl	801287c <_malloc_r>
 8013108:	b948      	cbnz	r0, 801311e <__smakebuf_r+0x46>
 801310a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801310e:	059a      	lsls	r2, r3, #22
 8013110:	d4ee      	bmi.n	80130f0 <__smakebuf_r+0x18>
 8013112:	f023 0303 	bic.w	r3, r3, #3
 8013116:	f043 0302 	orr.w	r3, r3, #2
 801311a:	81a3      	strh	r3, [r4, #12]
 801311c:	e7e2      	b.n	80130e4 <__smakebuf_r+0xc>
 801311e:	89a3      	ldrh	r3, [r4, #12]
 8013120:	6020      	str	r0, [r4, #0]
 8013122:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013126:	81a3      	strh	r3, [r4, #12]
 8013128:	9b01      	ldr	r3, [sp, #4]
 801312a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801312e:	b15b      	cbz	r3, 8013148 <__smakebuf_r+0x70>
 8013130:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013134:	4630      	mov	r0, r6
 8013136:	f000 f85f 	bl	80131f8 <_isatty_r>
 801313a:	b128      	cbz	r0, 8013148 <__smakebuf_r+0x70>
 801313c:	89a3      	ldrh	r3, [r4, #12]
 801313e:	f023 0303 	bic.w	r3, r3, #3
 8013142:	f043 0301 	orr.w	r3, r3, #1
 8013146:	81a3      	strh	r3, [r4, #12]
 8013148:	89a3      	ldrh	r3, [r4, #12]
 801314a:	431d      	orrs	r5, r3
 801314c:	81a5      	strh	r5, [r4, #12]
 801314e:	e7cf      	b.n	80130f0 <__smakebuf_r+0x18>

08013150 <_putc_r>:
 8013150:	b570      	push	{r4, r5, r6, lr}
 8013152:	460d      	mov	r5, r1
 8013154:	4614      	mov	r4, r2
 8013156:	4606      	mov	r6, r0
 8013158:	b118      	cbz	r0, 8013162 <_putc_r+0x12>
 801315a:	6a03      	ldr	r3, [r0, #32]
 801315c:	b90b      	cbnz	r3, 8013162 <_putc_r+0x12>
 801315e:	f7ff f8fb 	bl	8012358 <__sinit>
 8013162:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013164:	07d8      	lsls	r0, r3, #31
 8013166:	d405      	bmi.n	8013174 <_putc_r+0x24>
 8013168:	89a3      	ldrh	r3, [r4, #12]
 801316a:	0599      	lsls	r1, r3, #22
 801316c:	d402      	bmi.n	8013174 <_putc_r+0x24>
 801316e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013170:	f7ff fb07 	bl	8012782 <__retarget_lock_acquire_recursive>
 8013174:	68a3      	ldr	r3, [r4, #8]
 8013176:	3b01      	subs	r3, #1
 8013178:	2b00      	cmp	r3, #0
 801317a:	60a3      	str	r3, [r4, #8]
 801317c:	da05      	bge.n	801318a <_putc_r+0x3a>
 801317e:	69a2      	ldr	r2, [r4, #24]
 8013180:	4293      	cmp	r3, r2
 8013182:	db12      	blt.n	80131aa <_putc_r+0x5a>
 8013184:	b2eb      	uxtb	r3, r5
 8013186:	2b0a      	cmp	r3, #10
 8013188:	d00f      	beq.n	80131aa <_putc_r+0x5a>
 801318a:	6823      	ldr	r3, [r4, #0]
 801318c:	1c5a      	adds	r2, r3, #1
 801318e:	6022      	str	r2, [r4, #0]
 8013190:	701d      	strb	r5, [r3, #0]
 8013192:	b2ed      	uxtb	r5, r5
 8013194:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013196:	07da      	lsls	r2, r3, #31
 8013198:	d405      	bmi.n	80131a6 <_putc_r+0x56>
 801319a:	89a3      	ldrh	r3, [r4, #12]
 801319c:	059b      	lsls	r3, r3, #22
 801319e:	d402      	bmi.n	80131a6 <_putc_r+0x56>
 80131a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131a2:	f7ff faef 	bl	8012784 <__retarget_lock_release_recursive>
 80131a6:	4628      	mov	r0, r5
 80131a8:	bd70      	pop	{r4, r5, r6, pc}
 80131aa:	4629      	mov	r1, r5
 80131ac:	4622      	mov	r2, r4
 80131ae:	4630      	mov	r0, r6
 80131b0:	f7ff f9c3 	bl	801253a <__swbuf_r>
 80131b4:	4605      	mov	r5, r0
 80131b6:	e7ed      	b.n	8013194 <_putc_r+0x44>

080131b8 <strchr>:
 80131b8:	b2c9      	uxtb	r1, r1
 80131ba:	4603      	mov	r3, r0
 80131bc:	4618      	mov	r0, r3
 80131be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80131c2:	b112      	cbz	r2, 80131ca <strchr+0x12>
 80131c4:	428a      	cmp	r2, r1
 80131c6:	d1f9      	bne.n	80131bc <strchr+0x4>
 80131c8:	4770      	bx	lr
 80131ca:	2900      	cmp	r1, #0
 80131cc:	bf18      	it	ne
 80131ce:	2000      	movne	r0, #0
 80131d0:	4770      	bx	lr
	...

080131d4 <_fstat_r>:
 80131d4:	b538      	push	{r3, r4, r5, lr}
 80131d6:	4d07      	ldr	r5, [pc, #28]	@ (80131f4 <_fstat_r+0x20>)
 80131d8:	2300      	movs	r3, #0
 80131da:	4604      	mov	r4, r0
 80131dc:	4608      	mov	r0, r1
 80131de:	4611      	mov	r1, r2
 80131e0:	602b      	str	r3, [r5, #0]
 80131e2:	f7f0 fa32 	bl	800364a <_fstat>
 80131e6:	1c43      	adds	r3, r0, #1
 80131e8:	d102      	bne.n	80131f0 <_fstat_r+0x1c>
 80131ea:	682b      	ldr	r3, [r5, #0]
 80131ec:	b103      	cbz	r3, 80131f0 <_fstat_r+0x1c>
 80131ee:	6023      	str	r3, [r4, #0]
 80131f0:	bd38      	pop	{r3, r4, r5, pc}
 80131f2:	bf00      	nop
 80131f4:	20000da4 	.word	0x20000da4

080131f8 <_isatty_r>:
 80131f8:	b538      	push	{r3, r4, r5, lr}
 80131fa:	4d06      	ldr	r5, [pc, #24]	@ (8013214 <_isatty_r+0x1c>)
 80131fc:	2300      	movs	r3, #0
 80131fe:	4604      	mov	r4, r0
 8013200:	4608      	mov	r0, r1
 8013202:	602b      	str	r3, [r5, #0]
 8013204:	f7f0 fa31 	bl	800366a <_isatty>
 8013208:	1c43      	adds	r3, r0, #1
 801320a:	d102      	bne.n	8013212 <_isatty_r+0x1a>
 801320c:	682b      	ldr	r3, [r5, #0]
 801320e:	b103      	cbz	r3, 8013212 <_isatty_r+0x1a>
 8013210:	6023      	str	r3, [r4, #0]
 8013212:	bd38      	pop	{r3, r4, r5, pc}
 8013214:	20000da4 	.word	0x20000da4

08013218 <_sbrk_r>:
 8013218:	b538      	push	{r3, r4, r5, lr}
 801321a:	4d06      	ldr	r5, [pc, #24]	@ (8013234 <_sbrk_r+0x1c>)
 801321c:	2300      	movs	r3, #0
 801321e:	4604      	mov	r4, r0
 8013220:	4608      	mov	r0, r1
 8013222:	602b      	str	r3, [r5, #0]
 8013224:	f7f0 fa3a 	bl	800369c <_sbrk>
 8013228:	1c43      	adds	r3, r0, #1
 801322a:	d102      	bne.n	8013232 <_sbrk_r+0x1a>
 801322c:	682b      	ldr	r3, [r5, #0]
 801322e:	b103      	cbz	r3, 8013232 <_sbrk_r+0x1a>
 8013230:	6023      	str	r3, [r4, #0]
 8013232:	bd38      	pop	{r3, r4, r5, pc}
 8013234:	20000da4 	.word	0x20000da4

08013238 <fmax>:
 8013238:	b508      	push	{r3, lr}
 801323a:	ed2d 8b04 	vpush	{d8-d9}
 801323e:	eeb0 8a40 	vmov.f32	s16, s0
 8013242:	eef0 8a60 	vmov.f32	s17, s1
 8013246:	eeb0 9a41 	vmov.f32	s18, s2
 801324a:	eef0 9a61 	vmov.f32	s19, s3
 801324e:	f000 f847 	bl	80132e0 <__fpclassifyd>
 8013252:	b950      	cbnz	r0, 801326a <fmax+0x32>
 8013254:	eeb0 8a49 	vmov.f32	s16, s18
 8013258:	eef0 8a69 	vmov.f32	s17, s19
 801325c:	eeb0 0a48 	vmov.f32	s0, s16
 8013260:	eef0 0a68 	vmov.f32	s1, s17
 8013264:	ecbd 8b04 	vpop	{d8-d9}
 8013268:	bd08      	pop	{r3, pc}
 801326a:	eeb0 0a49 	vmov.f32	s0, s18
 801326e:	eef0 0a69 	vmov.f32	s1, s19
 8013272:	f000 f835 	bl	80132e0 <__fpclassifyd>
 8013276:	2800      	cmp	r0, #0
 8013278:	d0f0      	beq.n	801325c <fmax+0x24>
 801327a:	ec53 2b19 	vmov	r2, r3, d9
 801327e:	ec51 0b18 	vmov	r0, r1, d8
 8013282:	f7ed fb39 	bl	80008f8 <__aeabi_dcmpgt>
 8013286:	2800      	cmp	r0, #0
 8013288:	d0e4      	beq.n	8013254 <fmax+0x1c>
 801328a:	e7e7      	b.n	801325c <fmax+0x24>

0801328c <fmin>:
 801328c:	b508      	push	{r3, lr}
 801328e:	ed2d 8b04 	vpush	{d8-d9}
 8013292:	eeb0 8a40 	vmov.f32	s16, s0
 8013296:	eef0 8a60 	vmov.f32	s17, s1
 801329a:	eeb0 9a41 	vmov.f32	s18, s2
 801329e:	eef0 9a61 	vmov.f32	s19, s3
 80132a2:	f000 f81d 	bl	80132e0 <__fpclassifyd>
 80132a6:	b950      	cbnz	r0, 80132be <fmin+0x32>
 80132a8:	eeb0 8a49 	vmov.f32	s16, s18
 80132ac:	eef0 8a69 	vmov.f32	s17, s19
 80132b0:	eeb0 0a48 	vmov.f32	s0, s16
 80132b4:	eef0 0a68 	vmov.f32	s1, s17
 80132b8:	ecbd 8b04 	vpop	{d8-d9}
 80132bc:	bd08      	pop	{r3, pc}
 80132be:	eeb0 0a49 	vmov.f32	s0, s18
 80132c2:	eef0 0a69 	vmov.f32	s1, s19
 80132c6:	f000 f80b 	bl	80132e0 <__fpclassifyd>
 80132ca:	2800      	cmp	r0, #0
 80132cc:	d0f0      	beq.n	80132b0 <fmin+0x24>
 80132ce:	ec53 2b19 	vmov	r2, r3, d9
 80132d2:	ec51 0b18 	vmov	r0, r1, d8
 80132d6:	f7ed faf1 	bl	80008bc <__aeabi_dcmplt>
 80132da:	2800      	cmp	r0, #0
 80132dc:	d0e4      	beq.n	80132a8 <fmin+0x1c>
 80132de:	e7e7      	b.n	80132b0 <fmin+0x24>

080132e0 <__fpclassifyd>:
 80132e0:	ec51 0b10 	vmov	r0, r1, d0
 80132e4:	b510      	push	{r4, lr}
 80132e6:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 80132ea:	460b      	mov	r3, r1
 80132ec:	d019      	beq.n	8013322 <__fpclassifyd+0x42>
 80132ee:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 80132f2:	490e      	ldr	r1, [pc, #56]	@ (801332c <__fpclassifyd+0x4c>)
 80132f4:	428a      	cmp	r2, r1
 80132f6:	d90e      	bls.n	8013316 <__fpclassifyd+0x36>
 80132f8:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 80132fc:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 8013300:	428a      	cmp	r2, r1
 8013302:	d908      	bls.n	8013316 <__fpclassifyd+0x36>
 8013304:	4a0a      	ldr	r2, [pc, #40]	@ (8013330 <__fpclassifyd+0x50>)
 8013306:	4213      	tst	r3, r2
 8013308:	d007      	beq.n	801331a <__fpclassifyd+0x3a>
 801330a:	4294      	cmp	r4, r2
 801330c:	d107      	bne.n	801331e <__fpclassifyd+0x3e>
 801330e:	fab0 f080 	clz	r0, r0
 8013312:	0940      	lsrs	r0, r0, #5
 8013314:	bd10      	pop	{r4, pc}
 8013316:	2004      	movs	r0, #4
 8013318:	e7fc      	b.n	8013314 <__fpclassifyd+0x34>
 801331a:	2003      	movs	r0, #3
 801331c:	e7fa      	b.n	8013314 <__fpclassifyd+0x34>
 801331e:	2000      	movs	r0, #0
 8013320:	e7f8      	b.n	8013314 <__fpclassifyd+0x34>
 8013322:	2800      	cmp	r0, #0
 8013324:	d1ee      	bne.n	8013304 <__fpclassifyd+0x24>
 8013326:	2002      	movs	r0, #2
 8013328:	e7f4      	b.n	8013314 <__fpclassifyd+0x34>
 801332a:	bf00      	nop
 801332c:	7fdfffff 	.word	0x7fdfffff
 8013330:	7ff00000 	.word	0x7ff00000

08013334 <_init>:
 8013334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013336:	bf00      	nop
 8013338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801333a:	bc08      	pop	{r3}
 801333c:	469e      	mov	lr, r3
 801333e:	4770      	bx	lr

08013340 <_fini>:
 8013340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013342:	bf00      	nop
 8013344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013346:	bc08      	pop	{r3}
 8013348:	469e      	mov	lr, r3
 801334a:	4770      	bx	lr
